# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: List[str]=None, actor_email: List[str]=None, earliest_change_time: str=None, latest_change_time: str=None, page_size: int=None, page_token: str=None, _property: str=None, resource_type: List[str]=None):
        """GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest - a model defined in OpenAPI

        :param action: The action of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :param actor_email: The actor_email of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :param earliest_change_time: The earliest_change_time of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :param latest_change_time: The latest_change_time of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :param page_size: The page_size of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :param page_token: The page_token of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :param _property: The _property of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :param resource_type: The resource_type of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        """
        self.openapi_types = {
            'action': List[str],
            'actor_email': List[str],
            'earliest_change_time': str,
            'latest_change_time': str,
            'page_size': int,
            'page_token': str,
            '_property': str,
            'resource_type': List[str]
        }

        self.attribute_map = {
            'action': 'action',
            'actor_email': 'actorEmail',
            'earliest_change_time': 'earliestChangeTime',
            'latest_change_time': 'latestChangeTime',
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            '_property': 'property',
            'resource_type': 'resourceType'
        }

        self._action = action
        self._actor_email = actor_email
        self._earliest_change_time = earliest_change_time
        self._latest_change_time = latest_change_time
        self._page_size = page_size
        self._page_token = page_token
        self.__property = _property
        self._resource_type = resource_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. If set, only return changes that match one or more of these types of actions.

        :return: The action of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :rtype: List[str]
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. If set, only return changes that match one or more of these types of actions.

        :param action: The action of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :type action: List[str]
        """
        allowed_values = ["ACTION_TYPE_UNSPECIFIED", "CREATED", "UPDATED", "DELETED"]  # noqa: E501
        if not set(action).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `action` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(action) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._action = action

    @property
    def actor_email(self):
        """Gets the actor_email of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. If set, only return changes if they are made by a user in this list.

        :return: The actor_email of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :rtype: List[str]
        """
        return self._actor_email

    @actor_email.setter
    def actor_email(self, actor_email):
        """Sets the actor_email of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. If set, only return changes if they are made by a user in this list.

        :param actor_email: The actor_email of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :type actor_email: List[str]
        """

        self._actor_email = actor_email

    @property
    def earliest_change_time(self):
        """Gets the earliest_change_time of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. If set, only return changes made after this time (inclusive).

        :return: The earliest_change_time of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :rtype: str
        """
        return self._earliest_change_time

    @earliest_change_time.setter
    def earliest_change_time(self, earliest_change_time):
        """Sets the earliest_change_time of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. If set, only return changes made after this time (inclusive).

        :param earliest_change_time: The earliest_change_time of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :type earliest_change_time: str
        """

        self._earliest_change_time = earliest_change_time

    @property
    def latest_change_time(self):
        """Gets the latest_change_time of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. If set, only return changes made before this time (inclusive).

        :return: The latest_change_time of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :rtype: str
        """
        return self._latest_change_time

    @latest_change_time.setter
    def latest_change_time(self, latest_change_time):
        """Sets the latest_change_time of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. If set, only return changes made before this time (inclusive).

        :param latest_change_time: The latest_change_time of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :type latest_change_time: str
        """

        self._latest_change_time = latest_change_time

    @property
    def page_size(self):
        """Gets the page_size of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. The maximum number of ChangeHistoryEvent items to return. The service may return fewer than this value, even if there are additional pages. If unspecified, at most 50 items will be returned. The maximum value is 200 (higher values will be coerced to the maximum).

        :return: The page_size of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. The maximum number of ChangeHistoryEvent items to return. The service may return fewer than this value, even if there are additional pages. If unspecified, at most 50 items will be returned. The maximum value is 200 (higher values will be coerced to the maximum).

        :param page_size: The page_size of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. A page token, received from a previous `SearchChangeHistoryEvents` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchChangeHistoryEvents` must match the call that provided the page token.

        :return: The page_token of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. A page token, received from a previous `SearchChangeHistoryEvents` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchChangeHistoryEvents` must match the call that provided the page token.

        :param page_token: The page_token of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def _property(self):
        """Gets the _property of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. Resource name for a child property. If set, only return changes made to this property or its child resources. Format: properties/{propertyId} Example: \"properties/100\"

        :return: The _property of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. Resource name for a child property. If set, only return changes made to this property or its child resources. Format: properties/{propertyId} Example: \"properties/100\"

        :param _property: The _property of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :type _property: str
        """

        self.__property = _property

    @property
    def resource_type(self):
        """Gets the resource_type of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. If set, only return changes if they are for a resource that matches at least one of these types.

        :return: The resource_type of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :rtype: List[str]
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.

        Optional. If set, only return changes if they are for a resource that matches at least one of these types.

        :param resource_type: The resource_type of this GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.
        :type resource_type: List[str]
        """
        allowed_values = ["CHANGE_HISTORY_RESOURCE_TYPE_UNSPECIFIED", "ACCOUNT", "PROPERTY", "FIREBASE_LINK", "GOOGLE_ADS_LINK", "GOOGLE_SIGNALS_SETTINGS", "CONVERSION_EVENT", "MEASUREMENT_PROTOCOL_SECRET", "DATA_RETENTION_SETTINGS", "DISPLAY_VIDEO_360_ADVERTISER_LINK", "DISPLAY_VIDEO_360_ADVERTISER_LINK_PROPOSAL", "DATA_STREAM", "ATTRIBUTION_SETTINGS"]  # noqa: E501
        if not set(resource_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `resource_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(resource_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._resource_type = resource_type
