# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1beta_access_quota_status import GoogleAnalyticsAdminV1betaAccessQuotaStatus
from openapi_server import util


class GoogleAnalyticsAdminV1betaAccessQuota(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concurrent_requests: GoogleAnalyticsAdminV1betaAccessQuotaStatus=None, server_errors_per_project_per_hour: GoogleAnalyticsAdminV1betaAccessQuotaStatus=None, tokens_per_day: GoogleAnalyticsAdminV1betaAccessQuotaStatus=None, tokens_per_hour: GoogleAnalyticsAdminV1betaAccessQuotaStatus=None, tokens_per_project_per_hour: GoogleAnalyticsAdminV1betaAccessQuotaStatus=None):
        """GoogleAnalyticsAdminV1betaAccessQuota - a model defined in OpenAPI

        :param concurrent_requests: The concurrent_requests of this GoogleAnalyticsAdminV1betaAccessQuota.
        :param server_errors_per_project_per_hour: The server_errors_per_project_per_hour of this GoogleAnalyticsAdminV1betaAccessQuota.
        :param tokens_per_day: The tokens_per_day of this GoogleAnalyticsAdminV1betaAccessQuota.
        :param tokens_per_hour: The tokens_per_hour of this GoogleAnalyticsAdminV1betaAccessQuota.
        :param tokens_per_project_per_hour: The tokens_per_project_per_hour of this GoogleAnalyticsAdminV1betaAccessQuota.
        """
        self.openapi_types = {
            'concurrent_requests': GoogleAnalyticsAdminV1betaAccessQuotaStatus,
            'server_errors_per_project_per_hour': GoogleAnalyticsAdminV1betaAccessQuotaStatus,
            'tokens_per_day': GoogleAnalyticsAdminV1betaAccessQuotaStatus,
            'tokens_per_hour': GoogleAnalyticsAdminV1betaAccessQuotaStatus,
            'tokens_per_project_per_hour': GoogleAnalyticsAdminV1betaAccessQuotaStatus
        }

        self.attribute_map = {
            'concurrent_requests': 'concurrentRequests',
            'server_errors_per_project_per_hour': 'serverErrorsPerProjectPerHour',
            'tokens_per_day': 'tokensPerDay',
            'tokens_per_hour': 'tokensPerHour',
            'tokens_per_project_per_hour': 'tokensPerProjectPerHour'
        }

        self._concurrent_requests = concurrent_requests
        self._server_errors_per_project_per_hour = server_errors_per_project_per_hour
        self._tokens_per_day = tokens_per_day
        self._tokens_per_hour = tokens_per_hour
        self._tokens_per_project_per_hour = tokens_per_project_per_hour

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1betaAccessQuota':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1betaAccessQuota of this GoogleAnalyticsAdminV1betaAccessQuota.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concurrent_requests(self):
        """Gets the concurrent_requests of this GoogleAnalyticsAdminV1betaAccessQuota.


        :return: The concurrent_requests of this GoogleAnalyticsAdminV1betaAccessQuota.
        :rtype: GoogleAnalyticsAdminV1betaAccessQuotaStatus
        """
        return self._concurrent_requests

    @concurrent_requests.setter
    def concurrent_requests(self, concurrent_requests):
        """Sets the concurrent_requests of this GoogleAnalyticsAdminV1betaAccessQuota.


        :param concurrent_requests: The concurrent_requests of this GoogleAnalyticsAdminV1betaAccessQuota.
        :type concurrent_requests: GoogleAnalyticsAdminV1betaAccessQuotaStatus
        """

        self._concurrent_requests = concurrent_requests

    @property
    def server_errors_per_project_per_hour(self):
        """Gets the server_errors_per_project_per_hour of this GoogleAnalyticsAdminV1betaAccessQuota.


        :return: The server_errors_per_project_per_hour of this GoogleAnalyticsAdminV1betaAccessQuota.
        :rtype: GoogleAnalyticsAdminV1betaAccessQuotaStatus
        """
        return self._server_errors_per_project_per_hour

    @server_errors_per_project_per_hour.setter
    def server_errors_per_project_per_hour(self, server_errors_per_project_per_hour):
        """Sets the server_errors_per_project_per_hour of this GoogleAnalyticsAdminV1betaAccessQuota.


        :param server_errors_per_project_per_hour: The server_errors_per_project_per_hour of this GoogleAnalyticsAdminV1betaAccessQuota.
        :type server_errors_per_project_per_hour: GoogleAnalyticsAdminV1betaAccessQuotaStatus
        """

        self._server_errors_per_project_per_hour = server_errors_per_project_per_hour

    @property
    def tokens_per_day(self):
        """Gets the tokens_per_day of this GoogleAnalyticsAdminV1betaAccessQuota.


        :return: The tokens_per_day of this GoogleAnalyticsAdminV1betaAccessQuota.
        :rtype: GoogleAnalyticsAdminV1betaAccessQuotaStatus
        """
        return self._tokens_per_day

    @tokens_per_day.setter
    def tokens_per_day(self, tokens_per_day):
        """Sets the tokens_per_day of this GoogleAnalyticsAdminV1betaAccessQuota.


        :param tokens_per_day: The tokens_per_day of this GoogleAnalyticsAdminV1betaAccessQuota.
        :type tokens_per_day: GoogleAnalyticsAdminV1betaAccessQuotaStatus
        """

        self._tokens_per_day = tokens_per_day

    @property
    def tokens_per_hour(self):
        """Gets the tokens_per_hour of this GoogleAnalyticsAdminV1betaAccessQuota.


        :return: The tokens_per_hour of this GoogleAnalyticsAdminV1betaAccessQuota.
        :rtype: GoogleAnalyticsAdminV1betaAccessQuotaStatus
        """
        return self._tokens_per_hour

    @tokens_per_hour.setter
    def tokens_per_hour(self, tokens_per_hour):
        """Sets the tokens_per_hour of this GoogleAnalyticsAdminV1betaAccessQuota.


        :param tokens_per_hour: The tokens_per_hour of this GoogleAnalyticsAdminV1betaAccessQuota.
        :type tokens_per_hour: GoogleAnalyticsAdminV1betaAccessQuotaStatus
        """

        self._tokens_per_hour = tokens_per_hour

    @property
    def tokens_per_project_per_hour(self):
        """Gets the tokens_per_project_per_hour of this GoogleAnalyticsAdminV1betaAccessQuota.


        :return: The tokens_per_project_per_hour of this GoogleAnalyticsAdminV1betaAccessQuota.
        :rtype: GoogleAnalyticsAdminV1betaAccessQuotaStatus
        """
        return self._tokens_per_project_per_hour

    @tokens_per_project_per_hour.setter
    def tokens_per_project_per_hour(self, tokens_per_project_per_hour):
        """Sets the tokens_per_project_per_hour of this GoogleAnalyticsAdminV1betaAccessQuota.


        :param tokens_per_project_per_hour: The tokens_per_project_per_hour of this GoogleAnalyticsAdminV1betaAccessQuota.
        :type tokens_per_project_per_hour: GoogleAnalyticsAdminV1betaAccessQuotaStatus
        """

        self._tokens_per_project_per_hour = tokens_per_project_per_hour
