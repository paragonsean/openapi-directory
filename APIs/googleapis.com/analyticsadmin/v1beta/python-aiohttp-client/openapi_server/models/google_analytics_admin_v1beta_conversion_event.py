# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1beta_conversion_event_default_conversion_value import GoogleAnalyticsAdminV1betaConversionEventDefaultConversionValue
from openapi_server import util


class GoogleAnalyticsAdminV1betaConversionEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counting_method: str=None, create_time: str=None, custom: bool=None, default_conversion_value: GoogleAnalyticsAdminV1betaConversionEventDefaultConversionValue=None, deletable: bool=None, event_name: str=None, name: str=None):
        """GoogleAnalyticsAdminV1betaConversionEvent - a model defined in OpenAPI

        :param counting_method: The counting_method of this GoogleAnalyticsAdminV1betaConversionEvent.
        :param create_time: The create_time of this GoogleAnalyticsAdminV1betaConversionEvent.
        :param custom: The custom of this GoogleAnalyticsAdminV1betaConversionEvent.
        :param default_conversion_value: The default_conversion_value of this GoogleAnalyticsAdminV1betaConversionEvent.
        :param deletable: The deletable of this GoogleAnalyticsAdminV1betaConversionEvent.
        :param event_name: The event_name of this GoogleAnalyticsAdminV1betaConversionEvent.
        :param name: The name of this GoogleAnalyticsAdminV1betaConversionEvent.
        """
        self.openapi_types = {
            'counting_method': str,
            'create_time': str,
            'custom': bool,
            'default_conversion_value': GoogleAnalyticsAdminV1betaConversionEventDefaultConversionValue,
            'deletable': bool,
            'event_name': str,
            'name': str
        }

        self.attribute_map = {
            'counting_method': 'countingMethod',
            'create_time': 'createTime',
            'custom': 'custom',
            'default_conversion_value': 'defaultConversionValue',
            'deletable': 'deletable',
            'event_name': 'eventName',
            'name': 'name'
        }

        self._counting_method = counting_method
        self._create_time = create_time
        self._custom = custom
        self._default_conversion_value = default_conversion_value
        self._deletable = deletable
        self._event_name = event_name
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1betaConversionEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1betaConversionEvent of this GoogleAnalyticsAdminV1betaConversionEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counting_method(self):
        """Gets the counting_method of this GoogleAnalyticsAdminV1betaConversionEvent.

        Optional. The method by which conversions will be counted across multiple events within a session. If this value is not provided, it will be set to `ONCE_PER_EVENT`.

        :return: The counting_method of this GoogleAnalyticsAdminV1betaConversionEvent.
        :rtype: str
        """
        return self._counting_method

    @counting_method.setter
    def counting_method(self, counting_method):
        """Sets the counting_method of this GoogleAnalyticsAdminV1betaConversionEvent.

        Optional. The method by which conversions will be counted across multiple events within a session. If this value is not provided, it will be set to `ONCE_PER_EVENT`.

        :param counting_method: The counting_method of this GoogleAnalyticsAdminV1betaConversionEvent.
        :type counting_method: str
        """
        allowed_values = ["CONVERSION_COUNTING_METHOD_UNSPECIFIED", "ONCE_PER_EVENT", "ONCE_PER_SESSION"]  # noqa: E501
        if counting_method not in allowed_values:
            raise ValueError(
                "Invalid value for `counting_method` ({0}), must be one of {1}"
                .format(counting_method, allowed_values)
            )

        self._counting_method = counting_method

    @property
    def create_time(self):
        """Gets the create_time of this GoogleAnalyticsAdminV1betaConversionEvent.

        Output only. Time when this conversion event was created in the property.

        :return: The create_time of this GoogleAnalyticsAdminV1betaConversionEvent.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleAnalyticsAdminV1betaConversionEvent.

        Output only. Time when this conversion event was created in the property.

        :param create_time: The create_time of this GoogleAnalyticsAdminV1betaConversionEvent.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def custom(self):
        """Gets the custom of this GoogleAnalyticsAdminV1betaConversionEvent.

        Output only. If set to true, this conversion event refers to a custom event. If set to false, this conversion event refers to a default event in GA. Default events typically have special meaning in GA. Default events are usually created for you by the GA system, but in some cases can be created by property admins. Custom events count towards the maximum number of custom conversion events that may be created per property.

        :return: The custom of this GoogleAnalyticsAdminV1betaConversionEvent.
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this GoogleAnalyticsAdminV1betaConversionEvent.

        Output only. If set to true, this conversion event refers to a custom event. If set to false, this conversion event refers to a default event in GA. Default events typically have special meaning in GA. Default events are usually created for you by the GA system, but in some cases can be created by property admins. Custom events count towards the maximum number of custom conversion events that may be created per property.

        :param custom: The custom of this GoogleAnalyticsAdminV1betaConversionEvent.
        :type custom: bool
        """

        self._custom = custom

    @property
    def default_conversion_value(self):
        """Gets the default_conversion_value of this GoogleAnalyticsAdminV1betaConversionEvent.


        :return: The default_conversion_value of this GoogleAnalyticsAdminV1betaConversionEvent.
        :rtype: GoogleAnalyticsAdminV1betaConversionEventDefaultConversionValue
        """
        return self._default_conversion_value

    @default_conversion_value.setter
    def default_conversion_value(self, default_conversion_value):
        """Sets the default_conversion_value of this GoogleAnalyticsAdminV1betaConversionEvent.


        :param default_conversion_value: The default_conversion_value of this GoogleAnalyticsAdminV1betaConversionEvent.
        :type default_conversion_value: GoogleAnalyticsAdminV1betaConversionEventDefaultConversionValue
        """

        self._default_conversion_value = default_conversion_value

    @property
    def deletable(self):
        """Gets the deletable of this GoogleAnalyticsAdminV1betaConversionEvent.

        Output only. If set, this event can currently be deleted with DeleteConversionEvent.

        :return: The deletable of this GoogleAnalyticsAdminV1betaConversionEvent.
        :rtype: bool
        """
        return self._deletable

    @deletable.setter
    def deletable(self, deletable):
        """Sets the deletable of this GoogleAnalyticsAdminV1betaConversionEvent.

        Output only. If set, this event can currently be deleted with DeleteConversionEvent.

        :param deletable: The deletable of this GoogleAnalyticsAdminV1betaConversionEvent.
        :type deletable: bool
        """

        self._deletable = deletable

    @property
    def event_name(self):
        """Gets the event_name of this GoogleAnalyticsAdminV1betaConversionEvent.

        Immutable. The event name for this conversion event. Examples: 'click', 'purchase'

        :return: The event_name of this GoogleAnalyticsAdminV1betaConversionEvent.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this GoogleAnalyticsAdminV1betaConversionEvent.

        Immutable. The event name for this conversion event. Examples: 'click', 'purchase'

        :param event_name: The event_name of this GoogleAnalyticsAdminV1betaConversionEvent.
        :type event_name: str
        """

        self._event_name = event_name

    @property
    def name(self):
        """Gets the name of this GoogleAnalyticsAdminV1betaConversionEvent.

        Output only. Resource name of this conversion event. Format: properties/{property}/conversionEvents/{conversion_event}

        :return: The name of this GoogleAnalyticsAdminV1betaConversionEvent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleAnalyticsAdminV1betaConversionEvent.

        Output only. Resource name of this conversion event. Format: properties/{property}/conversionEvents/{conversion_event}

        :param name: The name of this GoogleAnalyticsAdminV1betaConversionEvent.
        :type name: str
        """

        self._name = name
