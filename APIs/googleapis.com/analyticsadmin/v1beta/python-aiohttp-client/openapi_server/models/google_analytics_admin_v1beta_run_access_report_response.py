# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1beta_access_dimension_header import GoogleAnalyticsAdminV1betaAccessDimensionHeader
from openapi_server.models.google_analytics_admin_v1beta_access_metric_header import GoogleAnalyticsAdminV1betaAccessMetricHeader
from openapi_server.models.google_analytics_admin_v1beta_access_quota import GoogleAnalyticsAdminV1betaAccessQuota
from openapi_server.models.google_analytics_admin_v1beta_access_row import GoogleAnalyticsAdminV1betaAccessRow
from openapi_server import util


class GoogleAnalyticsAdminV1betaRunAccessReportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension_headers: List[GoogleAnalyticsAdminV1betaAccessDimensionHeader]=None, metric_headers: List[GoogleAnalyticsAdminV1betaAccessMetricHeader]=None, quota: GoogleAnalyticsAdminV1betaAccessQuota=None, row_count: int=None, rows: List[GoogleAnalyticsAdminV1betaAccessRow]=None):
        """GoogleAnalyticsAdminV1betaRunAccessReportResponse - a model defined in OpenAPI

        :param dimension_headers: The dimension_headers of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        :param metric_headers: The metric_headers of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        :param quota: The quota of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        :param row_count: The row_count of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        :param rows: The rows of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        """
        self.openapi_types = {
            'dimension_headers': List[GoogleAnalyticsAdminV1betaAccessDimensionHeader],
            'metric_headers': List[GoogleAnalyticsAdminV1betaAccessMetricHeader],
            'quota': GoogleAnalyticsAdminV1betaAccessQuota,
            'row_count': int,
            'rows': List[GoogleAnalyticsAdminV1betaAccessRow]
        }

        self.attribute_map = {
            'dimension_headers': 'dimensionHeaders',
            'metric_headers': 'metricHeaders',
            'quota': 'quota',
            'row_count': 'rowCount',
            'rows': 'rows'
        }

        self._dimension_headers = dimension_headers
        self._metric_headers = metric_headers
        self._quota = quota
        self._row_count = row_count
        self._rows = rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1betaRunAccessReportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1betaRunAccessReportResponse of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension_headers(self):
        """Gets the dimension_headers of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.

        The header for a column in the report that corresponds to a specific dimension. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.

        :return: The dimension_headers of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        :rtype: List[GoogleAnalyticsAdminV1betaAccessDimensionHeader]
        """
        return self._dimension_headers

    @dimension_headers.setter
    def dimension_headers(self, dimension_headers):
        """Sets the dimension_headers of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.

        The header for a column in the report that corresponds to a specific dimension. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.

        :param dimension_headers: The dimension_headers of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        :type dimension_headers: List[GoogleAnalyticsAdminV1betaAccessDimensionHeader]
        """

        self._dimension_headers = dimension_headers

    @property
    def metric_headers(self):
        """Gets the metric_headers of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.

        The header for a column in the report that corresponds to a specific metric. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.

        :return: The metric_headers of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        :rtype: List[GoogleAnalyticsAdminV1betaAccessMetricHeader]
        """
        return self._metric_headers

    @metric_headers.setter
    def metric_headers(self, metric_headers):
        """Sets the metric_headers of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.

        The header for a column in the report that corresponds to a specific metric. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.

        :param metric_headers: The metric_headers of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        :type metric_headers: List[GoogleAnalyticsAdminV1betaAccessMetricHeader]
        """

        self._metric_headers = metric_headers

    @property
    def quota(self):
        """Gets the quota of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.


        :return: The quota of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        :rtype: GoogleAnalyticsAdminV1betaAccessQuota
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.


        :param quota: The quota of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        :type quota: GoogleAnalyticsAdminV1betaAccessQuota
        """

        self._quota = quota

    @property
    def row_count(self):
        """Gets the row_count of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.

        The total number of rows in the query result. `rowCount` is independent of the number of rows returned in the response, the `limit` request parameter, and the `offset` request parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API request, the response will contain `rowCount` of 175 but only 50 rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :return: The row_count of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.

        The total number of rows in the query result. `rowCount` is independent of the number of rows returned in the response, the `limit` request parameter, and the `offset` request parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API request, the response will contain `rowCount` of 175 but only 50 rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :param row_count: The row_count of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        :type row_count: int
        """

        self._row_count = row_count

    @property
    def rows(self):
        """Gets the rows of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.

        Rows of dimension value combinations and metric values in the report.

        :return: The rows of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        :rtype: List[GoogleAnalyticsAdminV1betaAccessRow]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.

        Rows of dimension value combinations and metric values in the report.

        :param rows: The rows of this GoogleAnalyticsAdminV1betaRunAccessReportResponse.
        :type rows: List[GoogleAnalyticsAdminV1betaAccessRow]
        """

        self._rows = rows
