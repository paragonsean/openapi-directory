/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAnalyticsAdminV1betaPropertySummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A virtual resource representing an overview of an account and all its child GA4 properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:28.359351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1betaAccountSummary {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROPERTY_SUMMARIES = "propertySummaries";
  @SerializedName(SERIALIZED_NAME_PROPERTY_SUMMARIES)
  private List<GoogleAnalyticsAdminV1betaPropertySummary> propertySummaries = new ArrayList<>();

  public GoogleAnalyticsAdminV1betaAccountSummary() {
  }

  public GoogleAnalyticsAdminV1betaAccountSummary account(String account) {
    this.account = account;
    return this;
  }

  /**
   * Resource name of account referred to by this account summary Format: accounts/{account_id} Example: \&quot;accounts/1000\&quot;
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  public GoogleAnalyticsAdminV1betaAccountSummary displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name for the account referred to in this account summary.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleAnalyticsAdminV1betaAccountSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Resource name for this account summary. Format: accountSummaries/{account_id} Example: \&quot;accountSummaries/1000\&quot;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleAnalyticsAdminV1betaAccountSummary propertySummaries(List<GoogleAnalyticsAdminV1betaPropertySummary> propertySummaries) {
    this.propertySummaries = propertySummaries;
    return this;
  }

  public GoogleAnalyticsAdminV1betaAccountSummary addPropertySummariesItem(GoogleAnalyticsAdminV1betaPropertySummary propertySummariesItem) {
    if (this.propertySummaries == null) {
      this.propertySummaries = new ArrayList<>();
    }
    this.propertySummaries.add(propertySummariesItem);
    return this;
  }

  /**
   * List of summaries for child accounts of this account.
   * @return propertySummaries
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1betaPropertySummary> getPropertySummaries() {
    return propertySummaries;
  }

  public void setPropertySummaries(List<GoogleAnalyticsAdminV1betaPropertySummary> propertySummaries) {
    this.propertySummaries = propertySummaries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1betaAccountSummary googleAnalyticsAdminV1betaAccountSummary = (GoogleAnalyticsAdminV1betaAccountSummary) o;
    return Objects.equals(this.account, googleAnalyticsAdminV1betaAccountSummary.account) &&
        Objects.equals(this.displayName, googleAnalyticsAdminV1betaAccountSummary.displayName) &&
        Objects.equals(this.name, googleAnalyticsAdminV1betaAccountSummary.name) &&
        Objects.equals(this.propertySummaries, googleAnalyticsAdminV1betaAccountSummary.propertySummaries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, displayName, name, propertySummaries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1betaAccountSummary {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    propertySummaries: ").append(toIndentedString(propertySummaries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("propertySummaries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1betaAccountSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1betaAccountSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1betaAccountSummary is not found in the empty JSON string", GoogleAnalyticsAdminV1betaAccountSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1betaAccountSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1betaAccountSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("propertySummaries") != null && !jsonObj.get("propertySummaries").isJsonNull()) {
        JsonArray jsonArraypropertySummaries = jsonObj.getAsJsonArray("propertySummaries");
        if (jsonArraypropertySummaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("propertySummaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `propertySummaries` to be an array in the JSON string but got `%s`", jsonObj.get("propertySummaries").toString()));
          }

          // validate the optional field `propertySummaries` (array)
          for (int i = 0; i < jsonArraypropertySummaries.size(); i++) {
            GoogleAnalyticsAdminV1betaPropertySummary.validateJsonElement(jsonArraypropertySummaries.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1betaAccountSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1betaAccountSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1betaAccountSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1betaAccountSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1betaAccountSummary>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1betaAccountSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1betaAccountSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1betaAccountSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1betaAccountSummary
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1betaAccountSummary
   */
  public static GoogleAnalyticsAdminV1betaAccountSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1betaAccountSummary.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1betaAccountSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

