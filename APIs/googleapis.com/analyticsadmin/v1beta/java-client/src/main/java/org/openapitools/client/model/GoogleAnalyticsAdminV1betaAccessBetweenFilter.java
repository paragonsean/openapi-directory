/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAnalyticsAdminV1betaNumericValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * To express that the result needs to be between two numbers (inclusive).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:28.359351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1betaAccessBetweenFilter {
  public static final String SERIALIZED_NAME_FROM_VALUE = "fromValue";
  @SerializedName(SERIALIZED_NAME_FROM_VALUE)
  private GoogleAnalyticsAdminV1betaNumericValue fromValue;

  public static final String SERIALIZED_NAME_TO_VALUE = "toValue";
  @SerializedName(SERIALIZED_NAME_TO_VALUE)
  private GoogleAnalyticsAdminV1betaNumericValue toValue;

  public GoogleAnalyticsAdminV1betaAccessBetweenFilter() {
  }

  public GoogleAnalyticsAdminV1betaAccessBetweenFilter fromValue(GoogleAnalyticsAdminV1betaNumericValue fromValue) {
    this.fromValue = fromValue;
    return this;
  }

  /**
   * Get fromValue
   * @return fromValue
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1betaNumericValue getFromValue() {
    return fromValue;
  }

  public void setFromValue(GoogleAnalyticsAdminV1betaNumericValue fromValue) {
    this.fromValue = fromValue;
  }


  public GoogleAnalyticsAdminV1betaAccessBetweenFilter toValue(GoogleAnalyticsAdminV1betaNumericValue toValue) {
    this.toValue = toValue;
    return this;
  }

  /**
   * Get toValue
   * @return toValue
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1betaNumericValue getToValue() {
    return toValue;
  }

  public void setToValue(GoogleAnalyticsAdminV1betaNumericValue toValue) {
    this.toValue = toValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1betaAccessBetweenFilter googleAnalyticsAdminV1betaAccessBetweenFilter = (GoogleAnalyticsAdminV1betaAccessBetweenFilter) o;
    return Objects.equals(this.fromValue, googleAnalyticsAdminV1betaAccessBetweenFilter.fromValue) &&
        Objects.equals(this.toValue, googleAnalyticsAdminV1betaAccessBetweenFilter.toValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromValue, toValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1betaAccessBetweenFilter {\n");
    sb.append("    fromValue: ").append(toIndentedString(fromValue)).append("\n");
    sb.append("    toValue: ").append(toIndentedString(toValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fromValue");
    openapiFields.add("toValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1betaAccessBetweenFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1betaAccessBetweenFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1betaAccessBetweenFilter is not found in the empty JSON string", GoogleAnalyticsAdminV1betaAccessBetweenFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1betaAccessBetweenFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1betaAccessBetweenFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `fromValue`
      if (jsonObj.get("fromValue") != null && !jsonObj.get("fromValue").isJsonNull()) {
        GoogleAnalyticsAdminV1betaNumericValue.validateJsonElement(jsonObj.get("fromValue"));
      }
      // validate the optional field `toValue`
      if (jsonObj.get("toValue") != null && !jsonObj.get("toValue").isJsonNull()) {
        GoogleAnalyticsAdminV1betaNumericValue.validateJsonElement(jsonObj.get("toValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1betaAccessBetweenFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1betaAccessBetweenFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1betaAccessBetweenFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1betaAccessBetweenFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1betaAccessBetweenFilter>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1betaAccessBetweenFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1betaAccessBetweenFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1betaAccessBetweenFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1betaAccessBetweenFilter
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1betaAccessBetweenFilter
   */
  public static GoogleAnalyticsAdminV1betaAccessBetweenFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1betaAccessBetweenFilter.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1betaAccessBetweenFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

