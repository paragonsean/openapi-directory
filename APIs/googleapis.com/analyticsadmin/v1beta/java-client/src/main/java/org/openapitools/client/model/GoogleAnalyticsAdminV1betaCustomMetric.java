/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A definition for a custom metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:28.359351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1betaCustomMetric {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Required. The type for the custom metric&#39;s value.
   */
  @JsonAdapter(MeasurementUnitEnum.Adapter.class)
  public enum MeasurementUnitEnum {
    MEASUREMENT_UNIT_UNSPECIFIED("MEASUREMENT_UNIT_UNSPECIFIED"),
    
    STANDARD("STANDARD"),
    
    CURRENCY("CURRENCY"),
    
    FEET("FEET"),
    
    METERS("METERS"),
    
    KILOMETERS("KILOMETERS"),
    
    MILES("MILES"),
    
    MILLISECONDS("MILLISECONDS"),
    
    SECONDS("SECONDS"),
    
    MINUTES("MINUTES"),
    
    HOURS("HOURS");

    private String value;

    MeasurementUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MeasurementUnitEnum fromValue(String value) {
      for (MeasurementUnitEnum b : MeasurementUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MeasurementUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MeasurementUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MeasurementUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MeasurementUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MeasurementUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "measurementUnit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private MeasurementUnitEnum measurementUnit;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARAMETER_NAME = "parameterName";
  @SerializedName(SERIALIZED_NAME_PARAMETER_NAME)
  private String parameterName;

  /**
   * Gets or Sets restrictedMetricType
   */
  @JsonAdapter(RestrictedMetricTypeEnum.Adapter.class)
  public enum RestrictedMetricTypeEnum {
    RESTRICTED_METRIC_TYPE_UNSPECIFIED("RESTRICTED_METRIC_TYPE_UNSPECIFIED"),
    
    COST_DATA("COST_DATA"),
    
    REVENUE_DATA("REVENUE_DATA");

    private String value;

    RestrictedMetricTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestrictedMetricTypeEnum fromValue(String value) {
      for (RestrictedMetricTypeEnum b : RestrictedMetricTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RestrictedMetricTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestrictedMetricTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestrictedMetricTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RestrictedMetricTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RestrictedMetricTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESTRICTED_METRIC_TYPE = "restrictedMetricType";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_METRIC_TYPE)
  private List<RestrictedMetricTypeEnum> restrictedMetricType = new ArrayList<>();

  /**
   * Required. Immutable. The scope of this custom metric.
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    METRIC_SCOPE_UNSPECIFIED("METRIC_SCOPE_UNSPECIFIED"),
    
    EVENT("EVENT");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private ScopeEnum scope;

  public GoogleAnalyticsAdminV1betaCustomMetric() {
  }

  public GoogleAnalyticsAdminV1betaCustomMetric(
     String name
  ) {
    this();
    this.name = name;
  }

  public GoogleAnalyticsAdminV1betaCustomMetric description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Description for this custom dimension. Max length of 150 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleAnalyticsAdminV1betaCustomMetric displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. Display name for this custom metric as shown in the Analytics UI. Max length of 82 characters, alphanumeric plus space and underscore starting with a letter. Legacy system-generated display names may contain square brackets, but updates to this field will never permit square brackets.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleAnalyticsAdminV1betaCustomMetric measurementUnit(MeasurementUnitEnum measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  /**
   * Required. The type for the custom metric&#39;s value.
   * @return measurementUnit
   */
  @javax.annotation.Nullable
  public MeasurementUnitEnum getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(MeasurementUnitEnum measurementUnit) {
    this.measurementUnit = measurementUnit;
  }


  /**
   * Output only. Resource name for this CustomMetric resource. Format: properties/{property}/customMetrics/{customMetric}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleAnalyticsAdminV1betaCustomMetric parameterName(String parameterName) {
    this.parameterName = parameterName;
    return this;
  }

  /**
   * Required. Immutable. Tagging name for this custom metric. If this is an event-scoped metric, then this is the event parameter name. May only contain alphanumeric and underscore charactes, starting with a letter. Max length of 40 characters for event-scoped metrics.
   * @return parameterName
   */
  @javax.annotation.Nullable
  public String getParameterName() {
    return parameterName;
  }

  public void setParameterName(String parameterName) {
    this.parameterName = parameterName;
  }


  public GoogleAnalyticsAdminV1betaCustomMetric restrictedMetricType(List<RestrictedMetricTypeEnum> restrictedMetricType) {
    this.restrictedMetricType = restrictedMetricType;
    return this;
  }

  public GoogleAnalyticsAdminV1betaCustomMetric addRestrictedMetricTypeItem(RestrictedMetricTypeEnum restrictedMetricTypeItem) {
    if (this.restrictedMetricType == null) {
      this.restrictedMetricType = new ArrayList<>();
    }
    this.restrictedMetricType.add(restrictedMetricTypeItem);
    return this;
  }

  /**
   * Optional. Types of restricted data that this metric may contain. Required for metrics with CURRENCY measurement unit. Must be empty for metrics with a non-CURRENCY measurement unit.
   * @return restrictedMetricType
   */
  @javax.annotation.Nullable
  public List<RestrictedMetricTypeEnum> getRestrictedMetricType() {
    return restrictedMetricType;
  }

  public void setRestrictedMetricType(List<RestrictedMetricTypeEnum> restrictedMetricType) {
    this.restrictedMetricType = restrictedMetricType;
  }


  public GoogleAnalyticsAdminV1betaCustomMetric scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Required. Immutable. The scope of this custom metric.
   * @return scope
   */
  @javax.annotation.Nullable
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1betaCustomMetric googleAnalyticsAdminV1betaCustomMetric = (GoogleAnalyticsAdminV1betaCustomMetric) o;
    return Objects.equals(this.description, googleAnalyticsAdminV1betaCustomMetric.description) &&
        Objects.equals(this.displayName, googleAnalyticsAdminV1betaCustomMetric.displayName) &&
        Objects.equals(this.measurementUnit, googleAnalyticsAdminV1betaCustomMetric.measurementUnit) &&
        Objects.equals(this.name, googleAnalyticsAdminV1betaCustomMetric.name) &&
        Objects.equals(this.parameterName, googleAnalyticsAdminV1betaCustomMetric.parameterName) &&
        Objects.equals(this.restrictedMetricType, googleAnalyticsAdminV1betaCustomMetric.restrictedMetricType) &&
        Objects.equals(this.scope, googleAnalyticsAdminV1betaCustomMetric.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, measurementUnit, name, parameterName, restrictedMetricType, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1betaCustomMetric {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parameterName: ").append(toIndentedString(parameterName)).append("\n");
    sb.append("    restrictedMetricType: ").append(toIndentedString(restrictedMetricType)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("measurementUnit");
    openapiFields.add("name");
    openapiFields.add("parameterName");
    openapiFields.add("restrictedMetricType");
    openapiFields.add("scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1betaCustomMetric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1betaCustomMetric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1betaCustomMetric is not found in the empty JSON string", GoogleAnalyticsAdminV1betaCustomMetric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1betaCustomMetric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1betaCustomMetric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("measurementUnit") != null && !jsonObj.get("measurementUnit").isJsonNull()) && !jsonObj.get("measurementUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementUnit").toString()));
      }
      // validate the optional field `measurementUnit`
      if (jsonObj.get("measurementUnit") != null && !jsonObj.get("measurementUnit").isJsonNull()) {
        MeasurementUnitEnum.validateJsonElement(jsonObj.get("measurementUnit"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parameterName") != null && !jsonObj.get("parameterName").isJsonNull()) && !jsonObj.get("parameterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameterName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("restrictedMetricType") != null && !jsonObj.get("restrictedMetricType").isJsonNull() && !jsonObj.get("restrictedMetricType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictedMetricType` to be an array in the JSON string but got `%s`", jsonObj.get("restrictedMetricType").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      // validate the optional field `scope`
      if (jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) {
        ScopeEnum.validateJsonElement(jsonObj.get("scope"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1betaCustomMetric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1betaCustomMetric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1betaCustomMetric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1betaCustomMetric.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1betaCustomMetric>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1betaCustomMetric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1betaCustomMetric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1betaCustomMetric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1betaCustomMetric
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1betaCustomMetric
   */
  public static GoogleAnalyticsAdminV1betaCustomMetric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1betaCustomMetric.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1betaCustomMetric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

