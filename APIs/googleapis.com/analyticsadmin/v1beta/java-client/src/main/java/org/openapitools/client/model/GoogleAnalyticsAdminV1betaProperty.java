/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A resource message representing a Google Analytics GA4 property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:28.359351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1betaProperty {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DELETE_TIME = "deleteTime";
  @SerializedName(SERIALIZED_NAME_DELETE_TIME)
  private String deleteTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  /**
   * Industry associated with this property Example: AUTOMOTIVE, FOOD_AND_DRINK
   */
  @JsonAdapter(IndustryCategoryEnum.Adapter.class)
  public enum IndustryCategoryEnum {
    INDUSTRY_CATEGORY_UNSPECIFIED("INDUSTRY_CATEGORY_UNSPECIFIED"),
    
    AUTOMOTIVE("AUTOMOTIVE"),
    
    BUSINESS_AND_INDUSTRIAL_MARKETS("BUSINESS_AND_INDUSTRIAL_MARKETS"),
    
    FINANCE("FINANCE"),
    
    HEALTHCARE("HEALTHCARE"),
    
    TECHNOLOGY("TECHNOLOGY"),
    
    TRAVEL("TRAVEL"),
    
    OTHER("OTHER"),
    
    ARTS_AND_ENTERTAINMENT("ARTS_AND_ENTERTAINMENT"),
    
    BEAUTY_AND_FITNESS("BEAUTY_AND_FITNESS"),
    
    BOOKS_AND_LITERATURE("BOOKS_AND_LITERATURE"),
    
    FOOD_AND_DRINK("FOOD_AND_DRINK"),
    
    GAMES("GAMES"),
    
    HOBBIES_AND_LEISURE("HOBBIES_AND_LEISURE"),
    
    HOME_AND_GARDEN("HOME_AND_GARDEN"),
    
    INTERNET_AND_TELECOM("INTERNET_AND_TELECOM"),
    
    LAW_AND_GOVERNMENT("LAW_AND_GOVERNMENT"),
    
    NEWS("NEWS"),
    
    ONLINE_COMMUNITIES("ONLINE_COMMUNITIES"),
    
    PEOPLE_AND_SOCIETY("PEOPLE_AND_SOCIETY"),
    
    PETS_AND_ANIMALS("PETS_AND_ANIMALS"),
    
    REAL_ESTATE("REAL_ESTATE"),
    
    REFERENCE("REFERENCE"),
    
    SCIENCE("SCIENCE"),
    
    SPORTS("SPORTS"),
    
    JOBS_AND_EDUCATION("JOBS_AND_EDUCATION"),
    
    SHOPPING("SHOPPING");

    private String value;

    IndustryCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndustryCategoryEnum fromValue(String value) {
      for (IndustryCategoryEnum b : IndustryCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndustryCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndustryCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndustryCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndustryCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndustryCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDUSTRY_CATEGORY = "industryCategory";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_CATEGORY)
  private IndustryCategoryEnum industryCategory;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private String parent;

  /**
   * Immutable. The property type for this Property resource. When creating a property, if the type is \&quot;PROPERTY_TYPE_UNSPECIFIED\&quot;, then \&quot;ORDINARY_PROPERTY\&quot; will be implied.
   */
  @JsonAdapter(PropertyTypeEnum.Adapter.class)
  public enum PropertyTypeEnum {
    UNSPECIFIED("PROPERTY_TYPE_UNSPECIFIED"),
    
    ORDINARY("PROPERTY_TYPE_ORDINARY"),
    
    SUBPROPERTY("PROPERTY_TYPE_SUBPROPERTY"),
    
    ROLLUP("PROPERTY_TYPE_ROLLUP");

    private String value;

    PropertyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PropertyTypeEnum fromValue(String value) {
      for (PropertyTypeEnum b : PropertyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PropertyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PropertyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PropertyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PropertyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROPERTY_TYPE = "propertyType";
  @SerializedName(SERIALIZED_NAME_PROPERTY_TYPE)
  private PropertyTypeEnum propertyType;

  /**
   * Output only. The Google Analytics service level that applies to this property.
   */
  @JsonAdapter(ServiceLevelEnum.Adapter.class)
  public enum ServiceLevelEnum {
    SERVICE_LEVEL_UNSPECIFIED("SERVICE_LEVEL_UNSPECIFIED"),
    
    GOOGLE_ANALYTICS_STANDARD("GOOGLE_ANALYTICS_STANDARD"),
    
    GOOGLE_ANALYTICS_360("GOOGLE_ANALYTICS_360");

    private String value;

    ServiceLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceLevelEnum fromValue(String value) {
      for (ServiceLevelEnum b : ServiceLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_LEVEL = "serviceLevel";
  @SerializedName(SERIALIZED_NAME_SERVICE_LEVEL)
  private ServiceLevelEnum serviceLevel;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GoogleAnalyticsAdminV1betaProperty() {
  }

  public GoogleAnalyticsAdminV1betaProperty(
     String createTime, 
     String deleteTime, 
     String expireTime, 
     String name, 
     ServiceLevelEnum serviceLevel, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.deleteTime = deleteTime;
    this.expireTime = expireTime;
    this.name = name;
    this.serviceLevel = serviceLevel;
    this.updateTime = updateTime;
  }

  public GoogleAnalyticsAdminV1betaProperty account(String account) {
    this.account = account;
    return this;
  }

  /**
   * Immutable. The resource name of the parent account Format: accounts/{account_id} Example: \&quot;accounts/123\&quot;
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  /**
   * Output only. Time when the entity was originally created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GoogleAnalyticsAdminV1betaProperty currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency type used in reports involving monetary values. Format: https://en.wikipedia.org/wiki/ISO_4217 Examples: \&quot;USD\&quot;, \&quot;EUR\&quot;, \&quot;JPY\&quot;
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  /**
   * Output only. If set, the time at which this property was trashed. If not set, then this property is not currently in the trash can.
   * @return deleteTime
   */
  @javax.annotation.Nullable
  public String getDeleteTime() {
    return deleteTime;
  }



  public GoogleAnalyticsAdminV1betaProperty displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. Human-readable display name for this property. The max allowed display name length is 100 UTF-16 code units.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. If set, the time at which this trashed property will be permanently deleted. If not set, then this property is not currently in the trash can and is not slated to be deleted.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }



  public GoogleAnalyticsAdminV1betaProperty industryCategory(IndustryCategoryEnum industryCategory) {
    this.industryCategory = industryCategory;
    return this;
  }

  /**
   * Industry associated with this property Example: AUTOMOTIVE, FOOD_AND_DRINK
   * @return industryCategory
   */
  @javax.annotation.Nullable
  public IndustryCategoryEnum getIndustryCategory() {
    return industryCategory;
  }

  public void setIndustryCategory(IndustryCategoryEnum industryCategory) {
    this.industryCategory = industryCategory;
  }


  /**
   * Output only. Resource name of this property. Format: properties/{property_id} Example: \&quot;properties/1000\&quot;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleAnalyticsAdminV1betaProperty parent(String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Immutable. Resource name of this property&#39;s logical parent. Note: The Property-Moving UI can be used to change the parent. Format: accounts/{account}, properties/{property} Example: \&quot;accounts/100\&quot;, \&quot;properties/101\&quot;
   * @return parent
   */
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }

  public void setParent(String parent) {
    this.parent = parent;
  }


  public GoogleAnalyticsAdminV1betaProperty propertyType(PropertyTypeEnum propertyType) {
    this.propertyType = propertyType;
    return this;
  }

  /**
   * Immutable. The property type for this Property resource. When creating a property, if the type is \&quot;PROPERTY_TYPE_UNSPECIFIED\&quot;, then \&quot;ORDINARY_PROPERTY\&quot; will be implied.
   * @return propertyType
   */
  @javax.annotation.Nullable
  public PropertyTypeEnum getPropertyType() {
    return propertyType;
  }

  public void setPropertyType(PropertyTypeEnum propertyType) {
    this.propertyType = propertyType;
  }


  /**
   * Output only. The Google Analytics service level that applies to this property.
   * @return serviceLevel
   */
  @javax.annotation.Nullable
  public ServiceLevelEnum getServiceLevel() {
    return serviceLevel;
  }



  public GoogleAnalyticsAdminV1betaProperty timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Required. Reporting Time Zone, used as the day boundary for reports, regardless of where the data originates. If the time zone honors DST, Analytics will automatically adjust for the changes. NOTE: Changing the time zone only affects data going forward, and is not applied retroactively. Format: https://www.iana.org/time-zones Example: \&quot;America/Los_Angeles\&quot;
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  /**
   * Output only. Time when entity payload fields were last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1betaProperty googleAnalyticsAdminV1betaProperty = (GoogleAnalyticsAdminV1betaProperty) o;
    return Objects.equals(this.account, googleAnalyticsAdminV1betaProperty.account) &&
        Objects.equals(this.createTime, googleAnalyticsAdminV1betaProperty.createTime) &&
        Objects.equals(this.currencyCode, googleAnalyticsAdminV1betaProperty.currencyCode) &&
        Objects.equals(this.deleteTime, googleAnalyticsAdminV1betaProperty.deleteTime) &&
        Objects.equals(this.displayName, googleAnalyticsAdminV1betaProperty.displayName) &&
        Objects.equals(this.expireTime, googleAnalyticsAdminV1betaProperty.expireTime) &&
        Objects.equals(this.industryCategory, googleAnalyticsAdminV1betaProperty.industryCategory) &&
        Objects.equals(this.name, googleAnalyticsAdminV1betaProperty.name) &&
        Objects.equals(this.parent, googleAnalyticsAdminV1betaProperty.parent) &&
        Objects.equals(this.propertyType, googleAnalyticsAdminV1betaProperty.propertyType) &&
        Objects.equals(this.serviceLevel, googleAnalyticsAdminV1betaProperty.serviceLevel) &&
        Objects.equals(this.timeZone, googleAnalyticsAdminV1betaProperty.timeZone) &&
        Objects.equals(this.updateTime, googleAnalyticsAdminV1betaProperty.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, createTime, currencyCode, deleteTime, displayName, expireTime, industryCategory, name, parent, propertyType, serviceLevel, timeZone, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1betaProperty {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    deleteTime: ").append(toIndentedString(deleteTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    industryCategory: ").append(toIndentedString(industryCategory)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    propertyType: ").append(toIndentedString(propertyType)).append("\n");
    sb.append("    serviceLevel: ").append(toIndentedString(serviceLevel)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("createTime");
    openapiFields.add("currencyCode");
    openapiFields.add("deleteTime");
    openapiFields.add("displayName");
    openapiFields.add("expireTime");
    openapiFields.add("industryCategory");
    openapiFields.add("name");
    openapiFields.add("parent");
    openapiFields.add("propertyType");
    openapiFields.add("serviceLevel");
    openapiFields.add("timeZone");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1betaProperty
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1betaProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1betaProperty is not found in the empty JSON string", GoogleAnalyticsAdminV1betaProperty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1betaProperty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1betaProperty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("deleteTime") != null && !jsonObj.get("deleteTime").isJsonNull()) && !jsonObj.get("deleteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("industryCategory") != null && !jsonObj.get("industryCategory").isJsonNull()) && !jsonObj.get("industryCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industryCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industryCategory").toString()));
      }
      // validate the optional field `industryCategory`
      if (jsonObj.get("industryCategory") != null && !jsonObj.get("industryCategory").isJsonNull()) {
        IndustryCategoryEnum.validateJsonElement(jsonObj.get("industryCategory"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      if ((jsonObj.get("propertyType") != null && !jsonObj.get("propertyType").isJsonNull()) && !jsonObj.get("propertyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyType").toString()));
      }
      // validate the optional field `propertyType`
      if (jsonObj.get("propertyType") != null && !jsonObj.get("propertyType").isJsonNull()) {
        PropertyTypeEnum.validateJsonElement(jsonObj.get("propertyType"));
      }
      if ((jsonObj.get("serviceLevel") != null && !jsonObj.get("serviceLevel").isJsonNull()) && !jsonObj.get("serviceLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceLevel").toString()));
      }
      // validate the optional field `serviceLevel`
      if (jsonObj.get("serviceLevel") != null && !jsonObj.get("serviceLevel").isJsonNull()) {
        ServiceLevelEnum.validateJsonElement(jsonObj.get("serviceLevel"));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1betaProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1betaProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1betaProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1betaProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1betaProperty>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1betaProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1betaProperty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1betaProperty given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1betaProperty
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1betaProperty
   */
  public static GoogleAnalyticsAdminV1betaProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1betaProperty.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1betaProperty to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

