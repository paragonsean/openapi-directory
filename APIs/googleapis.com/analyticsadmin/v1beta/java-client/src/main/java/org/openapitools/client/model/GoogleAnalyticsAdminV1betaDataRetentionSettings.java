/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings values for data retention. This is a singleton resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:28.359351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1betaDataRetentionSettings {
  /**
   * The length of time that event-level data is retained.
   */
  @JsonAdapter(EventDataRetentionEnum.Adapter.class)
  public enum EventDataRetentionEnum {
    RETENTION_DURATION_UNSPECIFIED("RETENTION_DURATION_UNSPECIFIED"),
    
    TWO_MONTHS("TWO_MONTHS"),
    
    FOURTEEN_MONTHS("FOURTEEN_MONTHS"),
    
    TWENTY_SIX_MONTHS("TWENTY_SIX_MONTHS"),
    
    THIRTY_EIGHT_MONTHS("THIRTY_EIGHT_MONTHS"),
    
    FIFTY_MONTHS("FIFTY_MONTHS");

    private String value;

    EventDataRetentionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventDataRetentionEnum fromValue(String value) {
      for (EventDataRetentionEnum b : EventDataRetentionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventDataRetentionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventDataRetentionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventDataRetentionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventDataRetentionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventDataRetentionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_DATA_RETENTION = "eventDataRetention";
  @SerializedName(SERIALIZED_NAME_EVENT_DATA_RETENTION)
  private EventDataRetentionEnum eventDataRetention;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESET_USER_DATA_ON_NEW_ACTIVITY = "resetUserDataOnNewActivity";
  @SerializedName(SERIALIZED_NAME_RESET_USER_DATA_ON_NEW_ACTIVITY)
  private Boolean resetUserDataOnNewActivity;

  public GoogleAnalyticsAdminV1betaDataRetentionSettings() {
  }

  public GoogleAnalyticsAdminV1betaDataRetentionSettings(
     String name
  ) {
    this();
    this.name = name;
  }

  public GoogleAnalyticsAdminV1betaDataRetentionSettings eventDataRetention(EventDataRetentionEnum eventDataRetention) {
    this.eventDataRetention = eventDataRetention;
    return this;
  }

  /**
   * The length of time that event-level data is retained.
   * @return eventDataRetention
   */
  @javax.annotation.Nullable
  public EventDataRetentionEnum getEventDataRetention() {
    return eventDataRetention;
  }

  public void setEventDataRetention(EventDataRetentionEnum eventDataRetention) {
    this.eventDataRetention = eventDataRetention;
  }


  /**
   * Output only. Resource name for this DataRetentionSetting resource. Format: properties/{property}/dataRetentionSettings
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleAnalyticsAdminV1betaDataRetentionSettings resetUserDataOnNewActivity(Boolean resetUserDataOnNewActivity) {
    this.resetUserDataOnNewActivity = resetUserDataOnNewActivity;
    return this;
  }

  /**
   * If true, reset the retention period for the user identifier with every event from that user.
   * @return resetUserDataOnNewActivity
   */
  @javax.annotation.Nullable
  public Boolean getResetUserDataOnNewActivity() {
    return resetUserDataOnNewActivity;
  }

  public void setResetUserDataOnNewActivity(Boolean resetUserDataOnNewActivity) {
    this.resetUserDataOnNewActivity = resetUserDataOnNewActivity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1betaDataRetentionSettings googleAnalyticsAdminV1betaDataRetentionSettings = (GoogleAnalyticsAdminV1betaDataRetentionSettings) o;
    return Objects.equals(this.eventDataRetention, googleAnalyticsAdminV1betaDataRetentionSettings.eventDataRetention) &&
        Objects.equals(this.name, googleAnalyticsAdminV1betaDataRetentionSettings.name) &&
        Objects.equals(this.resetUserDataOnNewActivity, googleAnalyticsAdminV1betaDataRetentionSettings.resetUserDataOnNewActivity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventDataRetention, name, resetUserDataOnNewActivity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1betaDataRetentionSettings {\n");
    sb.append("    eventDataRetention: ").append(toIndentedString(eventDataRetention)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resetUserDataOnNewActivity: ").append(toIndentedString(resetUserDataOnNewActivity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventDataRetention");
    openapiFields.add("name");
    openapiFields.add("resetUserDataOnNewActivity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1betaDataRetentionSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1betaDataRetentionSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1betaDataRetentionSettings is not found in the empty JSON string", GoogleAnalyticsAdminV1betaDataRetentionSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1betaDataRetentionSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1betaDataRetentionSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eventDataRetention") != null && !jsonObj.get("eventDataRetention").isJsonNull()) && !jsonObj.get("eventDataRetention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventDataRetention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventDataRetention").toString()));
      }
      // validate the optional field `eventDataRetention`
      if (jsonObj.get("eventDataRetention") != null && !jsonObj.get("eventDataRetention").isJsonNull()) {
        EventDataRetentionEnum.validateJsonElement(jsonObj.get("eventDataRetention"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1betaDataRetentionSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1betaDataRetentionSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1betaDataRetentionSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1betaDataRetentionSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1betaDataRetentionSettings>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1betaDataRetentionSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1betaDataRetentionSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1betaDataRetentionSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1betaDataRetentionSettings
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1betaDataRetentionSettings
   */
  public static GoogleAnalyticsAdminV1betaDataRetentionSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1betaDataRetentionSettings.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1betaDataRetentionSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

