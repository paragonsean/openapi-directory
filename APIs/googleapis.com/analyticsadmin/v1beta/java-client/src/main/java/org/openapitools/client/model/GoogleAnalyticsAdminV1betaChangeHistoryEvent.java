/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAnalyticsAdminV1betaChangeHistoryChange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A set of changes within a Google Analytics account or its child properties that resulted from the same cause. Common causes would be updates made in the Google Analytics UI, changes from customer support, or automatic Google Analytics system changes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:28.359351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1betaChangeHistoryEvent {
  /**
   * The type of actor that made this change.
   */
  @JsonAdapter(ActorTypeEnum.Adapter.class)
  public enum ActorTypeEnum {
    ACTOR_TYPE_UNSPECIFIED("ACTOR_TYPE_UNSPECIFIED"),
    
    USER("USER"),
    
    SYSTEM("SYSTEM"),
    
    SUPPORT("SUPPORT");

    private String value;

    ActorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActorTypeEnum fromValue(String value) {
      for (ActorTypeEnum b : ActorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTOR_TYPE = "actorType";
  @SerializedName(SERIALIZED_NAME_ACTOR_TYPE)
  private ActorTypeEnum actorType;

  public static final String SERIALIZED_NAME_CHANGE_TIME = "changeTime";
  @SerializedName(SERIALIZED_NAME_CHANGE_TIME)
  private String changeTime;

  public static final String SERIALIZED_NAME_CHANGES = "changes";
  @SerializedName(SERIALIZED_NAME_CHANGES)
  private List<GoogleAnalyticsAdminV1betaChangeHistoryChange> changes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANGES_FILTERED = "changesFiltered";
  @SerializedName(SERIALIZED_NAME_CHANGES_FILTERED)
  private Boolean changesFiltered;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_USER_ACTOR_EMAIL = "userActorEmail";
  @SerializedName(SERIALIZED_NAME_USER_ACTOR_EMAIL)
  private String userActorEmail;

  public GoogleAnalyticsAdminV1betaChangeHistoryEvent() {
  }

  public GoogleAnalyticsAdminV1betaChangeHistoryEvent actorType(ActorTypeEnum actorType) {
    this.actorType = actorType;
    return this;
  }

  /**
   * The type of actor that made this change.
   * @return actorType
   */
  @javax.annotation.Nullable
  public ActorTypeEnum getActorType() {
    return actorType;
  }

  public void setActorType(ActorTypeEnum actorType) {
    this.actorType = actorType;
  }


  public GoogleAnalyticsAdminV1betaChangeHistoryEvent changeTime(String changeTime) {
    this.changeTime = changeTime;
    return this;
  }

  /**
   * Time when change was made.
   * @return changeTime
   */
  @javax.annotation.Nullable
  public String getChangeTime() {
    return changeTime;
  }

  public void setChangeTime(String changeTime) {
    this.changeTime = changeTime;
  }


  public GoogleAnalyticsAdminV1betaChangeHistoryEvent changes(List<GoogleAnalyticsAdminV1betaChangeHistoryChange> changes) {
    this.changes = changes;
    return this;
  }

  public GoogleAnalyticsAdminV1betaChangeHistoryEvent addChangesItem(GoogleAnalyticsAdminV1betaChangeHistoryChange changesItem) {
    if (this.changes == null) {
      this.changes = new ArrayList<>();
    }
    this.changes.add(changesItem);
    return this;
  }

  /**
   * A list of changes made in this change history event that fit the filters specified in SearchChangeHistoryEventsRequest.
   * @return changes
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1betaChangeHistoryChange> getChanges() {
    return changes;
  }

  public void setChanges(List<GoogleAnalyticsAdminV1betaChangeHistoryChange> changes) {
    this.changes = changes;
  }


  public GoogleAnalyticsAdminV1betaChangeHistoryEvent changesFiltered(Boolean changesFiltered) {
    this.changesFiltered = changesFiltered;
    return this;
  }

  /**
   * If true, then the list of changes returned was filtered, and does not represent all changes that occurred in this event.
   * @return changesFiltered
   */
  @javax.annotation.Nullable
  public Boolean getChangesFiltered() {
    return changesFiltered;
  }

  public void setChangesFiltered(Boolean changesFiltered) {
    this.changesFiltered = changesFiltered;
  }


  public GoogleAnalyticsAdminV1betaChangeHistoryEvent id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this change history event. This ID is unique across Google Analytics.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GoogleAnalyticsAdminV1betaChangeHistoryEvent userActorEmail(String userActorEmail) {
    this.userActorEmail = userActorEmail;
    return this;
  }

  /**
   * Email address of the Google account that made the change. This will be a valid email address if the actor field is set to USER, and empty otherwise. Google accounts that have been deleted will cause an error.
   * @return userActorEmail
   */
  @javax.annotation.Nullable
  public String getUserActorEmail() {
    return userActorEmail;
  }

  public void setUserActorEmail(String userActorEmail) {
    this.userActorEmail = userActorEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1betaChangeHistoryEvent googleAnalyticsAdminV1betaChangeHistoryEvent = (GoogleAnalyticsAdminV1betaChangeHistoryEvent) o;
    return Objects.equals(this.actorType, googleAnalyticsAdminV1betaChangeHistoryEvent.actorType) &&
        Objects.equals(this.changeTime, googleAnalyticsAdminV1betaChangeHistoryEvent.changeTime) &&
        Objects.equals(this.changes, googleAnalyticsAdminV1betaChangeHistoryEvent.changes) &&
        Objects.equals(this.changesFiltered, googleAnalyticsAdminV1betaChangeHistoryEvent.changesFiltered) &&
        Objects.equals(this.id, googleAnalyticsAdminV1betaChangeHistoryEvent.id) &&
        Objects.equals(this.userActorEmail, googleAnalyticsAdminV1betaChangeHistoryEvent.userActorEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actorType, changeTime, changes, changesFiltered, id, userActorEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1betaChangeHistoryEvent {\n");
    sb.append("    actorType: ").append(toIndentedString(actorType)).append("\n");
    sb.append("    changeTime: ").append(toIndentedString(changeTime)).append("\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    changesFiltered: ").append(toIndentedString(changesFiltered)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userActorEmail: ").append(toIndentedString(userActorEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actorType");
    openapiFields.add("changeTime");
    openapiFields.add("changes");
    openapiFields.add("changesFiltered");
    openapiFields.add("id");
    openapiFields.add("userActorEmail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1betaChangeHistoryEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1betaChangeHistoryEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1betaChangeHistoryEvent is not found in the empty JSON string", GoogleAnalyticsAdminV1betaChangeHistoryEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1betaChangeHistoryEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1betaChangeHistoryEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actorType") != null && !jsonObj.get("actorType").isJsonNull()) && !jsonObj.get("actorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actorType").toString()));
      }
      // validate the optional field `actorType`
      if (jsonObj.get("actorType") != null && !jsonObj.get("actorType").isJsonNull()) {
        ActorTypeEnum.validateJsonElement(jsonObj.get("actorType"));
      }
      if ((jsonObj.get("changeTime") != null && !jsonObj.get("changeTime").isJsonNull()) && !jsonObj.get("changeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeTime").toString()));
      }
      if (jsonObj.get("changes") != null && !jsonObj.get("changes").isJsonNull()) {
        JsonArray jsonArraychanges = jsonObj.getAsJsonArray("changes");
        if (jsonArraychanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("changes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `changes` to be an array in the JSON string but got `%s`", jsonObj.get("changes").toString()));
          }

          // validate the optional field `changes` (array)
          for (int i = 0; i < jsonArraychanges.size(); i++) {
            GoogleAnalyticsAdminV1betaChangeHistoryChange.validateJsonElement(jsonArraychanges.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("userActorEmail") != null && !jsonObj.get("userActorEmail").isJsonNull()) && !jsonObj.get("userActorEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userActorEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userActorEmail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1betaChangeHistoryEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1betaChangeHistoryEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1betaChangeHistoryEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1betaChangeHistoryEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1betaChangeHistoryEvent>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1betaChangeHistoryEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1betaChangeHistoryEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1betaChangeHistoryEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1betaChangeHistoryEvent
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1betaChangeHistoryEvent
   */
  public static GoogleAnalyticsAdminV1betaChangeHistoryEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1betaChangeHistoryEvent.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1betaChangeHistoryEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

