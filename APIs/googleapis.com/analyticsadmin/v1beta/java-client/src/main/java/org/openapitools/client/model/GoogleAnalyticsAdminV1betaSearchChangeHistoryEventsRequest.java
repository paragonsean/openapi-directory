/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for SearchChangeHistoryEvents RPC.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:28.359351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest {
  /**
   * Gets or Sets action
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    ACTION_TYPE_UNSPECIFIED("ACTION_TYPE_UNSPECIFIED"),
    
    CREATED("CREATED"),
    
    UPDATED("UPDATED"),
    
    DELETED("DELETED");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private List<ActionEnum> action = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTOR_EMAIL = "actorEmail";
  @SerializedName(SERIALIZED_NAME_ACTOR_EMAIL)
  private List<String> actorEmail = new ArrayList<>();

  public static final String SERIALIZED_NAME_EARLIEST_CHANGE_TIME = "earliestChangeTime";
  @SerializedName(SERIALIZED_NAME_EARLIEST_CHANGE_TIME)
  private String earliestChangeTime;

  public static final String SERIALIZED_NAME_LATEST_CHANGE_TIME = "latestChangeTime";
  @SerializedName(SERIALIZED_NAME_LATEST_CHANGE_TIME)
  private String latestChangeTime;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PAGE_TOKEN = "pageToken";
  @SerializedName(SERIALIZED_NAME_PAGE_TOKEN)
  private String pageToken;

  public static final String SERIALIZED_NAME_PROPERTY = "property";
  @SerializedName(SERIALIZED_NAME_PROPERTY)
  private String property;

  /**
   * Gets or Sets resourceType
   */
  @JsonAdapter(ResourceTypeEnum.Adapter.class)
  public enum ResourceTypeEnum {
    CHANGE_HISTORY_RESOURCE_TYPE_UNSPECIFIED("CHANGE_HISTORY_RESOURCE_TYPE_UNSPECIFIED"),
    
    ACCOUNT("ACCOUNT"),
    
    PROPERTY("PROPERTY"),
    
    FIREBASE_LINK("FIREBASE_LINK"),
    
    GOOGLE_ADS_LINK("GOOGLE_ADS_LINK"),
    
    GOOGLE_SIGNALS_SETTINGS("GOOGLE_SIGNALS_SETTINGS"),
    
    CONVERSION_EVENT("CONVERSION_EVENT"),
    
    MEASUREMENT_PROTOCOL_SECRET("MEASUREMENT_PROTOCOL_SECRET"),
    
    DATA_RETENTION_SETTINGS("DATA_RETENTION_SETTINGS"),
    
    DISPLAY_VIDEO_360_ADVERTISER_LINK("DISPLAY_VIDEO_360_ADVERTISER_LINK"),
    
    DISPLAY_VIDEO_360_ADVERTISER_LINK_PROPOSAL("DISPLAY_VIDEO_360_ADVERTISER_LINK_PROPOSAL"),
    
    DATA_STREAM("DATA_STREAM"),
    
    ATTRIBUTION_SETTINGS("ATTRIBUTION_SETTINGS");

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private List<ResourceTypeEnum> resourceType = new ArrayList<>();

  public GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest() {
  }

  public GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest action(List<ActionEnum> action) {
    this.action = action;
    return this;
  }

  public GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest addActionItem(ActionEnum actionItem) {
    if (this.action == null) {
      this.action = new ArrayList<>();
    }
    this.action.add(actionItem);
    return this;
  }

  /**
   * Optional. If set, only return changes that match one or more of these types of actions.
   * @return action
   */
  @javax.annotation.Nullable
  public List<ActionEnum> getAction() {
    return action;
  }

  public void setAction(List<ActionEnum> action) {
    this.action = action;
  }


  public GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest actorEmail(List<String> actorEmail) {
    this.actorEmail = actorEmail;
    return this;
  }

  public GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest addActorEmailItem(String actorEmailItem) {
    if (this.actorEmail == null) {
      this.actorEmail = new ArrayList<>();
    }
    this.actorEmail.add(actorEmailItem);
    return this;
  }

  /**
   * Optional. If set, only return changes if they are made by a user in this list.
   * @return actorEmail
   */
  @javax.annotation.Nullable
  public List<String> getActorEmail() {
    return actorEmail;
  }

  public void setActorEmail(List<String> actorEmail) {
    this.actorEmail = actorEmail;
  }


  public GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest earliestChangeTime(String earliestChangeTime) {
    this.earliestChangeTime = earliestChangeTime;
    return this;
  }

  /**
   * Optional. If set, only return changes made after this time (inclusive).
   * @return earliestChangeTime
   */
  @javax.annotation.Nullable
  public String getEarliestChangeTime() {
    return earliestChangeTime;
  }

  public void setEarliestChangeTime(String earliestChangeTime) {
    this.earliestChangeTime = earliestChangeTime;
  }


  public GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest latestChangeTime(String latestChangeTime) {
    this.latestChangeTime = latestChangeTime;
    return this;
  }

  /**
   * Optional. If set, only return changes made before this time (inclusive).
   * @return latestChangeTime
   */
  @javax.annotation.Nullable
  public String getLatestChangeTime() {
    return latestChangeTime;
  }

  public void setLatestChangeTime(String latestChangeTime) {
    this.latestChangeTime = latestChangeTime;
  }


  public GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Optional. The maximum number of ChangeHistoryEvent items to return. The service may return fewer than this value, even if there are additional pages. If unspecified, at most 50 items will be returned. The maximum value is 200 (higher values will be coerced to the maximum).
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest pageToken(String pageToken) {
    this.pageToken = pageToken;
    return this;
  }

  /**
   * Optional. A page token, received from a previous &#x60;SearchChangeHistoryEvents&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;SearchChangeHistoryEvents&#x60; must match the call that provided the page token.
   * @return pageToken
   */
  @javax.annotation.Nullable
  public String getPageToken() {
    return pageToken;
  }

  public void setPageToken(String pageToken) {
    this.pageToken = pageToken;
  }


  public GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest property(String property) {
    this.property = property;
    return this;
  }

  /**
   * Optional. Resource name for a child property. If set, only return changes made to this property or its child resources. Format: properties/{propertyId} Example: \&quot;properties/100\&quot;
   * @return property
   */
  @javax.annotation.Nullable
  public String getProperty() {
    return property;
  }

  public void setProperty(String property) {
    this.property = property;
  }


  public GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest resourceType(List<ResourceTypeEnum> resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  public GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest addResourceTypeItem(ResourceTypeEnum resourceTypeItem) {
    if (this.resourceType == null) {
      this.resourceType = new ArrayList<>();
    }
    this.resourceType.add(resourceTypeItem);
    return this;
  }

  /**
   * Optional. If set, only return changes if they are for a resource that matches at least one of these types.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public List<ResourceTypeEnum> getResourceType() {
    return resourceType;
  }

  public void setResourceType(List<ResourceTypeEnum> resourceType) {
    this.resourceType = resourceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest googleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest = (GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest) o;
    return Objects.equals(this.action, googleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.action) &&
        Objects.equals(this.actorEmail, googleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.actorEmail) &&
        Objects.equals(this.earliestChangeTime, googleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.earliestChangeTime) &&
        Objects.equals(this.latestChangeTime, googleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.latestChangeTime) &&
        Objects.equals(this.pageSize, googleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.pageSize) &&
        Objects.equals(this.pageToken, googleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.pageToken) &&
        Objects.equals(this.property, googleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.property) &&
        Objects.equals(this.resourceType, googleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.resourceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, actorEmail, earliestChangeTime, latestChangeTime, pageSize, pageToken, property, resourceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    actorEmail: ").append(toIndentedString(actorEmail)).append("\n");
    sb.append("    earliestChangeTime: ").append(toIndentedString(earliestChangeTime)).append("\n");
    sb.append("    latestChangeTime: ").append(toIndentedString(latestChangeTime)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    pageToken: ").append(toIndentedString(pageToken)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("actorEmail");
    openapiFields.add("earliestChangeTime");
    openapiFields.add("latestChangeTime");
    openapiFields.add("pageSize");
    openapiFields.add("pageToken");
    openapiFields.add("property");
    openapiFields.add("resourceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest is not found in the empty JSON string", GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull() && !jsonObj.get("action").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be an array in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("actorEmail") != null && !jsonObj.get("actorEmail").isJsonNull() && !jsonObj.get("actorEmail").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actorEmail` to be an array in the JSON string but got `%s`", jsonObj.get("actorEmail").toString()));
      }
      if ((jsonObj.get("earliestChangeTime") != null && !jsonObj.get("earliestChangeTime").isJsonNull()) && !jsonObj.get("earliestChangeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `earliestChangeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("earliestChangeTime").toString()));
      }
      if ((jsonObj.get("latestChangeTime") != null && !jsonObj.get("latestChangeTime").isJsonNull()) && !jsonObj.get("latestChangeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latestChangeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latestChangeTime").toString()));
      }
      if ((jsonObj.get("pageToken") != null && !jsonObj.get("pageToken").isJsonNull()) && !jsonObj.get("pageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageToken").toString()));
      }
      if ((jsonObj.get("property") != null && !jsonObj.get("property").isJsonNull()) && !jsonObj.get("property").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `property` to be a primitive type in the JSON string but got `%s`", jsonObj.get("property").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull() && !jsonObj.get("resourceType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be an array in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest
   */
  public static GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1betaSearchChangeHistoryEventsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

