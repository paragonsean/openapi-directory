/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAnalyticsAdminV1betaDataStreamAndroidAppStreamData;
import org.openapitools.client.model.GoogleAnalyticsAdminV1betaDataStreamIosAppStreamData;
import org.openapitools.client.model.GoogleAnalyticsAdminV1betaDataStreamWebStreamData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A resource message representing a data stream.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:28.359351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1betaDataStream {
  public static final String SERIALIZED_NAME_ANDROID_APP_STREAM_DATA = "androidAppStreamData";
  @SerializedName(SERIALIZED_NAME_ANDROID_APP_STREAM_DATA)
  private GoogleAnalyticsAdminV1betaDataStreamAndroidAppStreamData androidAppStreamData;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_IOS_APP_STREAM_DATA = "iosAppStreamData";
  @SerializedName(SERIALIZED_NAME_IOS_APP_STREAM_DATA)
  private GoogleAnalyticsAdminV1betaDataStreamIosAppStreamData iosAppStreamData;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Required. Immutable. The type of this DataStream resource.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DATA_STREAM_TYPE_UNSPECIFIED("DATA_STREAM_TYPE_UNSPECIFIED"),
    
    WEB_DATA_STREAM("WEB_DATA_STREAM"),
    
    ANDROID_APP_DATA_STREAM("ANDROID_APP_DATA_STREAM"),
    
    IOS_APP_DATA_STREAM("IOS_APP_DATA_STREAM");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_WEB_STREAM_DATA = "webStreamData";
  @SerializedName(SERIALIZED_NAME_WEB_STREAM_DATA)
  private GoogleAnalyticsAdminV1betaDataStreamWebStreamData webStreamData;

  public GoogleAnalyticsAdminV1betaDataStream() {
  }

  public GoogleAnalyticsAdminV1betaDataStream(
     String createTime, 
     String name, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
    this.updateTime = updateTime;
  }

  public GoogleAnalyticsAdminV1betaDataStream androidAppStreamData(GoogleAnalyticsAdminV1betaDataStreamAndroidAppStreamData androidAppStreamData) {
    this.androidAppStreamData = androidAppStreamData;
    return this;
  }

  /**
   * Get androidAppStreamData
   * @return androidAppStreamData
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1betaDataStreamAndroidAppStreamData getAndroidAppStreamData() {
    return androidAppStreamData;
  }

  public void setAndroidAppStreamData(GoogleAnalyticsAdminV1betaDataStreamAndroidAppStreamData androidAppStreamData) {
    this.androidAppStreamData = androidAppStreamData;
  }


  /**
   * Output only. Time when this stream was originally created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GoogleAnalyticsAdminV1betaDataStream displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Human-readable display name for the Data Stream. Required for web data streams. The max allowed display name length is 255 UTF-16 code units.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleAnalyticsAdminV1betaDataStream iosAppStreamData(GoogleAnalyticsAdminV1betaDataStreamIosAppStreamData iosAppStreamData) {
    this.iosAppStreamData = iosAppStreamData;
    return this;
  }

  /**
   * Get iosAppStreamData
   * @return iosAppStreamData
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1betaDataStreamIosAppStreamData getIosAppStreamData() {
    return iosAppStreamData;
  }

  public void setIosAppStreamData(GoogleAnalyticsAdminV1betaDataStreamIosAppStreamData iosAppStreamData) {
    this.iosAppStreamData = iosAppStreamData;
  }


  /**
   * Output only. Resource name of this Data Stream. Format: properties/{property_id}/dataStreams/{stream_id} Example: \&quot;properties/1000/dataStreams/2000\&quot;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleAnalyticsAdminV1betaDataStream type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Required. Immutable. The type of this DataStream resource.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Output only. Time when stream payload fields were last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public GoogleAnalyticsAdminV1betaDataStream webStreamData(GoogleAnalyticsAdminV1betaDataStreamWebStreamData webStreamData) {
    this.webStreamData = webStreamData;
    return this;
  }

  /**
   * Get webStreamData
   * @return webStreamData
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1betaDataStreamWebStreamData getWebStreamData() {
    return webStreamData;
  }

  public void setWebStreamData(GoogleAnalyticsAdminV1betaDataStreamWebStreamData webStreamData) {
    this.webStreamData = webStreamData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1betaDataStream googleAnalyticsAdminV1betaDataStream = (GoogleAnalyticsAdminV1betaDataStream) o;
    return Objects.equals(this.androidAppStreamData, googleAnalyticsAdminV1betaDataStream.androidAppStreamData) &&
        Objects.equals(this.createTime, googleAnalyticsAdminV1betaDataStream.createTime) &&
        Objects.equals(this.displayName, googleAnalyticsAdminV1betaDataStream.displayName) &&
        Objects.equals(this.iosAppStreamData, googleAnalyticsAdminV1betaDataStream.iosAppStreamData) &&
        Objects.equals(this.name, googleAnalyticsAdminV1betaDataStream.name) &&
        Objects.equals(this.type, googleAnalyticsAdminV1betaDataStream.type) &&
        Objects.equals(this.updateTime, googleAnalyticsAdminV1betaDataStream.updateTime) &&
        Objects.equals(this.webStreamData, googleAnalyticsAdminV1betaDataStream.webStreamData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(androidAppStreamData, createTime, displayName, iosAppStreamData, name, type, updateTime, webStreamData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1betaDataStream {\n");
    sb.append("    androidAppStreamData: ").append(toIndentedString(androidAppStreamData)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    iosAppStreamData: ").append(toIndentedString(iosAppStreamData)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    webStreamData: ").append(toIndentedString(webStreamData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("androidAppStreamData");
    openapiFields.add("createTime");
    openapiFields.add("displayName");
    openapiFields.add("iosAppStreamData");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("updateTime");
    openapiFields.add("webStreamData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1betaDataStream
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1betaDataStream.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1betaDataStream is not found in the empty JSON string", GoogleAnalyticsAdminV1betaDataStream.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1betaDataStream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1betaDataStream` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `androidAppStreamData`
      if (jsonObj.get("androidAppStreamData") != null && !jsonObj.get("androidAppStreamData").isJsonNull()) {
        GoogleAnalyticsAdminV1betaDataStreamAndroidAppStreamData.validateJsonElement(jsonObj.get("androidAppStreamData"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `iosAppStreamData`
      if (jsonObj.get("iosAppStreamData") != null && !jsonObj.get("iosAppStreamData").isJsonNull()) {
        GoogleAnalyticsAdminV1betaDataStreamIosAppStreamData.validateJsonElement(jsonObj.get("iosAppStreamData"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `webStreamData`
      if (jsonObj.get("webStreamData") != null && !jsonObj.get("webStreamData").isJsonNull()) {
        GoogleAnalyticsAdminV1betaDataStreamWebStreamData.validateJsonElement(jsonObj.get("webStreamData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1betaDataStream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1betaDataStream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1betaDataStream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1betaDataStream.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1betaDataStream>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1betaDataStream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1betaDataStream read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1betaDataStream given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1betaDataStream
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1betaDataStream
   */
  public static GoogleAnalyticsAdminV1betaDataStream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1betaDataStream.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1betaDataStream to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

