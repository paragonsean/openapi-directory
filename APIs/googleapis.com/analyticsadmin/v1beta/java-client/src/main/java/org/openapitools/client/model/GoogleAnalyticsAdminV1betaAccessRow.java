/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAnalyticsAdminV1betaAccessDimensionValue;
import org.openapitools.client.model.GoogleAnalyticsAdminV1betaAccessMetricValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Access report data for each row.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:28.359351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1betaAccessRow {
  public static final String SERIALIZED_NAME_DIMENSION_VALUES = "dimensionValues";
  @SerializedName(SERIALIZED_NAME_DIMENSION_VALUES)
  private List<GoogleAnalyticsAdminV1betaAccessDimensionValue> dimensionValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRIC_VALUES = "metricValues";
  @SerializedName(SERIALIZED_NAME_METRIC_VALUES)
  private List<GoogleAnalyticsAdminV1betaAccessMetricValue> metricValues = new ArrayList<>();

  public GoogleAnalyticsAdminV1betaAccessRow() {
  }

  public GoogleAnalyticsAdminV1betaAccessRow dimensionValues(List<GoogleAnalyticsAdminV1betaAccessDimensionValue> dimensionValues) {
    this.dimensionValues = dimensionValues;
    return this;
  }

  public GoogleAnalyticsAdminV1betaAccessRow addDimensionValuesItem(GoogleAnalyticsAdminV1betaAccessDimensionValue dimensionValuesItem) {
    if (this.dimensionValues == null) {
      this.dimensionValues = new ArrayList<>();
    }
    this.dimensionValues.add(dimensionValuesItem);
    return this;
  }

  /**
   * List of dimension values. These values are in the same order as specified in the request.
   * @return dimensionValues
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1betaAccessDimensionValue> getDimensionValues() {
    return dimensionValues;
  }

  public void setDimensionValues(List<GoogleAnalyticsAdminV1betaAccessDimensionValue> dimensionValues) {
    this.dimensionValues = dimensionValues;
  }


  public GoogleAnalyticsAdminV1betaAccessRow metricValues(List<GoogleAnalyticsAdminV1betaAccessMetricValue> metricValues) {
    this.metricValues = metricValues;
    return this;
  }

  public GoogleAnalyticsAdminV1betaAccessRow addMetricValuesItem(GoogleAnalyticsAdminV1betaAccessMetricValue metricValuesItem) {
    if (this.metricValues == null) {
      this.metricValues = new ArrayList<>();
    }
    this.metricValues.add(metricValuesItem);
    return this;
  }

  /**
   * List of metric values. These values are in the same order as specified in the request.
   * @return metricValues
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1betaAccessMetricValue> getMetricValues() {
    return metricValues;
  }

  public void setMetricValues(List<GoogleAnalyticsAdminV1betaAccessMetricValue> metricValues) {
    this.metricValues = metricValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1betaAccessRow googleAnalyticsAdminV1betaAccessRow = (GoogleAnalyticsAdminV1betaAccessRow) o;
    return Objects.equals(this.dimensionValues, googleAnalyticsAdminV1betaAccessRow.dimensionValues) &&
        Objects.equals(this.metricValues, googleAnalyticsAdminV1betaAccessRow.metricValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensionValues, metricValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1betaAccessRow {\n");
    sb.append("    dimensionValues: ").append(toIndentedString(dimensionValues)).append("\n");
    sb.append("    metricValues: ").append(toIndentedString(metricValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimensionValues");
    openapiFields.add("metricValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1betaAccessRow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1betaAccessRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1betaAccessRow is not found in the empty JSON string", GoogleAnalyticsAdminV1betaAccessRow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1betaAccessRow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1betaAccessRow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dimensionValues") != null && !jsonObj.get("dimensionValues").isJsonNull()) {
        JsonArray jsonArraydimensionValues = jsonObj.getAsJsonArray("dimensionValues");
        if (jsonArraydimensionValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensionValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensionValues` to be an array in the JSON string but got `%s`", jsonObj.get("dimensionValues").toString()));
          }

          // validate the optional field `dimensionValues` (array)
          for (int i = 0; i < jsonArraydimensionValues.size(); i++) {
            GoogleAnalyticsAdminV1betaAccessDimensionValue.validateJsonElement(jsonArraydimensionValues.get(i));
          };
        }
      }
      if (jsonObj.get("metricValues") != null && !jsonObj.get("metricValues").isJsonNull()) {
        JsonArray jsonArraymetricValues = jsonObj.getAsJsonArray("metricValues");
        if (jsonArraymetricValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metricValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metricValues` to be an array in the JSON string but got `%s`", jsonObj.get("metricValues").toString()));
          }

          // validate the optional field `metricValues` (array)
          for (int i = 0; i < jsonArraymetricValues.size(); i++) {
            GoogleAnalyticsAdminV1betaAccessMetricValue.validateJsonElement(jsonArraymetricValues.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1betaAccessRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1betaAccessRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1betaAccessRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1betaAccessRow.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1betaAccessRow>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1betaAccessRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1betaAccessRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1betaAccessRow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1betaAccessRow
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1betaAccessRow
   */
  public static GoogleAnalyticsAdminV1betaAccessRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1betaAccessRow.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1betaAccessRow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

