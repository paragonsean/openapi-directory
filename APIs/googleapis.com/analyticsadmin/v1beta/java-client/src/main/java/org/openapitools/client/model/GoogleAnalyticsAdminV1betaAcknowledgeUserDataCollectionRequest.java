/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for AcknowledgeUserDataCollection RPC.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:28.359351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest {
  public static final String SERIALIZED_NAME_ACKNOWLEDGEMENT = "acknowledgement";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGEMENT)
  private String acknowledgement;

  public GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest() {
  }

  public GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest acknowledgement(String acknowledgement) {
    this.acknowledgement = acknowledgement;
    return this;
  }

  /**
   * Required. An acknowledgement that the caller of this method understands the terms of user data collection. This field must contain the exact value: \&quot;I acknowledge that I have the necessary privacy disclosures and rights from my end users for the collection and processing of their data, including the association of such data with the visitation information Google Analytics collects from my site and/or app property.\&quot;
   * @return acknowledgement
   */
  @javax.annotation.Nullable
  public String getAcknowledgement() {
    return acknowledgement;
  }

  public void setAcknowledgement(String acknowledgement) {
    this.acknowledgement = acknowledgement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest googleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest = (GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest) o;
    return Objects.equals(this.acknowledgement, googleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest.acknowledgement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acknowledgement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest {\n");
    sb.append("    acknowledgement: ").append(toIndentedString(acknowledgement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acknowledgement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest is not found in the empty JSON string", GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acknowledgement") != null && !jsonObj.get("acknowledgement").isJsonNull()) && !jsonObj.get("acknowledgement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acknowledgement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acknowledgement").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest
   */
  public static GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

