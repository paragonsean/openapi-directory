/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleAnalyticsAdminV1betaConversionEventDefaultConversionValue from './GoogleAnalyticsAdminV1betaConversionEventDefaultConversionValue';

/**
 * The GoogleAnalyticsAdminV1betaConversionEvent model module.
 * @module model/GoogleAnalyticsAdminV1betaConversionEvent
 * @version v1beta
 */
class GoogleAnalyticsAdminV1betaConversionEvent {
    /**
     * Constructs a new <code>GoogleAnalyticsAdminV1betaConversionEvent</code>.
     * A conversion event in a Google Analytics property.
     * @alias module:model/GoogleAnalyticsAdminV1betaConversionEvent
     */
    constructor() { 
        
        GoogleAnalyticsAdminV1betaConversionEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleAnalyticsAdminV1betaConversionEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleAnalyticsAdminV1betaConversionEvent} obj Optional instance to populate.
     * @return {module:model/GoogleAnalyticsAdminV1betaConversionEvent} The populated <code>GoogleAnalyticsAdminV1betaConversionEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleAnalyticsAdminV1betaConversionEvent();

            if (data.hasOwnProperty('countingMethod')) {
                obj['countingMethod'] = ApiClient.convertToType(data['countingMethod'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('custom')) {
                obj['custom'] = ApiClient.convertToType(data['custom'], 'Boolean');
            }
            if (data.hasOwnProperty('defaultConversionValue')) {
                obj['defaultConversionValue'] = GoogleAnalyticsAdminV1betaConversionEventDefaultConversionValue.constructFromObject(data['defaultConversionValue']);
            }
            if (data.hasOwnProperty('deletable')) {
                obj['deletable'] = ApiClient.convertToType(data['deletable'], 'Boolean');
            }
            if (data.hasOwnProperty('eventName')) {
                obj['eventName'] = ApiClient.convertToType(data['eventName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleAnalyticsAdminV1betaConversionEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleAnalyticsAdminV1betaConversionEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['countingMethod'] && !(typeof data['countingMethod'] === 'string' || data['countingMethod'] instanceof String)) {
            throw new Error("Expected the field `countingMethod` to be a primitive type in the JSON string but got " + data['countingMethod']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `defaultConversionValue`
        if (data['defaultConversionValue']) { // data not null
          GoogleAnalyticsAdminV1betaConversionEventDefaultConversionValue.validateJSON(data['defaultConversionValue']);
        }
        // ensure the json data is a string
        if (data['eventName'] && !(typeof data['eventName'] === 'string' || data['eventName'] instanceof String)) {
            throw new Error("Expected the field `eventName` to be a primitive type in the JSON string but got " + data['eventName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Optional. The method by which conversions will be counted across multiple events within a session. If this value is not provided, it will be set to `ONCE_PER_EVENT`.
 * @member {module:model/GoogleAnalyticsAdminV1betaConversionEvent.CountingMethodEnum} countingMethod
 */
GoogleAnalyticsAdminV1betaConversionEvent.prototype['countingMethod'] = undefined;

/**
 * Output only. Time when this conversion event was created in the property.
 * @member {String} createTime
 */
GoogleAnalyticsAdminV1betaConversionEvent.prototype['createTime'] = undefined;

/**
 * Output only. If set to true, this conversion event refers to a custom event. If set to false, this conversion event refers to a default event in GA. Default events typically have special meaning in GA. Default events are usually created for you by the GA system, but in some cases can be created by property admins. Custom events count towards the maximum number of custom conversion events that may be created per property.
 * @member {Boolean} custom
 */
GoogleAnalyticsAdminV1betaConversionEvent.prototype['custom'] = undefined;

/**
 * @member {module:model/GoogleAnalyticsAdminV1betaConversionEventDefaultConversionValue} defaultConversionValue
 */
GoogleAnalyticsAdminV1betaConversionEvent.prototype['defaultConversionValue'] = undefined;

/**
 * Output only. If set, this event can currently be deleted with DeleteConversionEvent.
 * @member {Boolean} deletable
 */
GoogleAnalyticsAdminV1betaConversionEvent.prototype['deletable'] = undefined;

/**
 * Immutable. The event name for this conversion event. Examples: 'click', 'purchase'
 * @member {String} eventName
 */
GoogleAnalyticsAdminV1betaConversionEvent.prototype['eventName'] = undefined;

/**
 * Output only. Resource name of this conversion event. Format: properties/{property}/conversionEvents/{conversion_event}
 * @member {String} name
 */
GoogleAnalyticsAdminV1betaConversionEvent.prototype['name'] = undefined;





/**
 * Allowed values for the <code>countingMethod</code> property.
 * @enum {String}
 * @readonly
 */
GoogleAnalyticsAdminV1betaConversionEvent['CountingMethodEnum'] = {

    /**
     * value: "CONVERSION_COUNTING_METHOD_UNSPECIFIED"
     * @const
     */
    "CONVERSION_COUNTING_METHOD_UNSPECIFIED": "CONVERSION_COUNTING_METHOD_UNSPECIFIED",

    /**
     * value: "ONCE_PER_EVENT"
     * @const
     */
    "ONCE_PER_EVENT": "ONCE_PER_EVENT",

    /**
     * value: "ONCE_PER_SESSION"
     * @const
     */
    "ONCE_PER_SESSION": "ONCE_PER_SESSION"
};



export default GoogleAnalyticsAdminV1betaConversionEvent;

