/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::~OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse() {}

void OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::initializeModel() {

    m_conversion_events_isSet = false;
    m_conversion_events_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::fromJsonObject(QJsonObject json) {

    m_conversion_events_isValid = ::OpenAPI::fromJsonValue(m_conversion_events, json[QString("conversionEvents")]);
    m_conversion_events_isSet = !json[QString("conversionEvents")].isNull() && m_conversion_events_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_conversion_events.size() > 0) {
        obj.insert(QString("conversionEvents"), ::OpenAPI::toJsonValue(m_conversion_events));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIGoogleAnalyticsAdminV1betaConversionEvent> OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::getConversionEvents() const {
    return m_conversion_events;
}
void OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::setConversionEvents(const QList<OAIGoogleAnalyticsAdminV1betaConversionEvent> &conversion_events) {
    m_conversion_events = conversion_events;
    m_conversion_events_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::is_conversion_events_Set() const{
    return m_conversion_events_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::is_conversion_events_Valid() const{
    return m_conversion_events_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversion_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
