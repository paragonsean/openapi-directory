/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1betaDataSharingSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1betaDataSharingSettings::OAIGoogleAnalyticsAdminV1betaDataSharingSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1betaDataSharingSettings::OAIGoogleAnalyticsAdminV1betaDataSharingSettings() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1betaDataSharingSettings::~OAIGoogleAnalyticsAdminV1betaDataSharingSettings() {}

void OAIGoogleAnalyticsAdminV1betaDataSharingSettings::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_sharing_with_google_any_sales_enabled_isSet = false;
    m_sharing_with_google_any_sales_enabled_isValid = false;

    m_sharing_with_google_assigned_sales_enabled_isSet = false;
    m_sharing_with_google_assigned_sales_enabled_isValid = false;

    m_sharing_with_google_products_enabled_isSet = false;
    m_sharing_with_google_products_enabled_isValid = false;

    m_sharing_with_google_support_enabled_isSet = false;
    m_sharing_with_google_support_enabled_isValid = false;

    m_sharing_with_others_enabled_isSet = false;
    m_sharing_with_others_enabled_isValid = false;
}

void OAIGoogleAnalyticsAdminV1betaDataSharingSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1betaDataSharingSettings::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sharing_with_google_any_sales_enabled_isValid = ::OpenAPI::fromJsonValue(m_sharing_with_google_any_sales_enabled, json[QString("sharingWithGoogleAnySalesEnabled")]);
    m_sharing_with_google_any_sales_enabled_isSet = !json[QString("sharingWithGoogleAnySalesEnabled")].isNull() && m_sharing_with_google_any_sales_enabled_isValid;

    m_sharing_with_google_assigned_sales_enabled_isValid = ::OpenAPI::fromJsonValue(m_sharing_with_google_assigned_sales_enabled, json[QString("sharingWithGoogleAssignedSalesEnabled")]);
    m_sharing_with_google_assigned_sales_enabled_isSet = !json[QString("sharingWithGoogleAssignedSalesEnabled")].isNull() && m_sharing_with_google_assigned_sales_enabled_isValid;

    m_sharing_with_google_products_enabled_isValid = ::OpenAPI::fromJsonValue(m_sharing_with_google_products_enabled, json[QString("sharingWithGoogleProductsEnabled")]);
    m_sharing_with_google_products_enabled_isSet = !json[QString("sharingWithGoogleProductsEnabled")].isNull() && m_sharing_with_google_products_enabled_isValid;

    m_sharing_with_google_support_enabled_isValid = ::OpenAPI::fromJsonValue(m_sharing_with_google_support_enabled, json[QString("sharingWithGoogleSupportEnabled")]);
    m_sharing_with_google_support_enabled_isSet = !json[QString("sharingWithGoogleSupportEnabled")].isNull() && m_sharing_with_google_support_enabled_isValid;

    m_sharing_with_others_enabled_isValid = ::OpenAPI::fromJsonValue(m_sharing_with_others_enabled, json[QString("sharingWithOthersEnabled")]);
    m_sharing_with_others_enabled_isSet = !json[QString("sharingWithOthersEnabled")].isNull() && m_sharing_with_others_enabled_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaDataSharingSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1betaDataSharingSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sharing_with_google_any_sales_enabled_isSet) {
        obj.insert(QString("sharingWithGoogleAnySalesEnabled"), ::OpenAPI::toJsonValue(m_sharing_with_google_any_sales_enabled));
    }
    if (m_sharing_with_google_assigned_sales_enabled_isSet) {
        obj.insert(QString("sharingWithGoogleAssignedSalesEnabled"), ::OpenAPI::toJsonValue(m_sharing_with_google_assigned_sales_enabled));
    }
    if (m_sharing_with_google_products_enabled_isSet) {
        obj.insert(QString("sharingWithGoogleProductsEnabled"), ::OpenAPI::toJsonValue(m_sharing_with_google_products_enabled));
    }
    if (m_sharing_with_google_support_enabled_isSet) {
        obj.insert(QString("sharingWithGoogleSupportEnabled"), ::OpenAPI::toJsonValue(m_sharing_with_google_support_enabled));
    }
    if (m_sharing_with_others_enabled_isSet) {
        obj.insert(QString("sharingWithOthersEnabled"), ::OpenAPI::toJsonValue(m_sharing_with_others_enabled));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1betaDataSharingSettings::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1betaDataSharingSettings::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::isSharingWithGoogleAnySalesEnabled() const {
    return m_sharing_with_google_any_sales_enabled;
}
void OAIGoogleAnalyticsAdminV1betaDataSharingSettings::setSharingWithGoogleAnySalesEnabled(const bool &sharing_with_google_any_sales_enabled) {
    m_sharing_with_google_any_sales_enabled = sharing_with_google_any_sales_enabled;
    m_sharing_with_google_any_sales_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::is_sharing_with_google_any_sales_enabled_Set() const{
    return m_sharing_with_google_any_sales_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::is_sharing_with_google_any_sales_enabled_Valid() const{
    return m_sharing_with_google_any_sales_enabled_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::isSharingWithGoogleAssignedSalesEnabled() const {
    return m_sharing_with_google_assigned_sales_enabled;
}
void OAIGoogleAnalyticsAdminV1betaDataSharingSettings::setSharingWithGoogleAssignedSalesEnabled(const bool &sharing_with_google_assigned_sales_enabled) {
    m_sharing_with_google_assigned_sales_enabled = sharing_with_google_assigned_sales_enabled;
    m_sharing_with_google_assigned_sales_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::is_sharing_with_google_assigned_sales_enabled_Set() const{
    return m_sharing_with_google_assigned_sales_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::is_sharing_with_google_assigned_sales_enabled_Valid() const{
    return m_sharing_with_google_assigned_sales_enabled_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::isSharingWithGoogleProductsEnabled() const {
    return m_sharing_with_google_products_enabled;
}
void OAIGoogleAnalyticsAdminV1betaDataSharingSettings::setSharingWithGoogleProductsEnabled(const bool &sharing_with_google_products_enabled) {
    m_sharing_with_google_products_enabled = sharing_with_google_products_enabled;
    m_sharing_with_google_products_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::is_sharing_with_google_products_enabled_Set() const{
    return m_sharing_with_google_products_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::is_sharing_with_google_products_enabled_Valid() const{
    return m_sharing_with_google_products_enabled_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::isSharingWithGoogleSupportEnabled() const {
    return m_sharing_with_google_support_enabled;
}
void OAIGoogleAnalyticsAdminV1betaDataSharingSettings::setSharingWithGoogleSupportEnabled(const bool &sharing_with_google_support_enabled) {
    m_sharing_with_google_support_enabled = sharing_with_google_support_enabled;
    m_sharing_with_google_support_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::is_sharing_with_google_support_enabled_Set() const{
    return m_sharing_with_google_support_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::is_sharing_with_google_support_enabled_Valid() const{
    return m_sharing_with_google_support_enabled_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::isSharingWithOthersEnabled() const {
    return m_sharing_with_others_enabled;
}
void OAIGoogleAnalyticsAdminV1betaDataSharingSettings::setSharingWithOthersEnabled(const bool &sharing_with_others_enabled) {
    m_sharing_with_others_enabled = sharing_with_others_enabled;
    m_sharing_with_others_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::is_sharing_with_others_enabled_Set() const{
    return m_sharing_with_others_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::is_sharing_with_others_enabled_Valid() const{
    return m_sharing_with_others_enabled_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_with_google_any_sales_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_with_google_assigned_sales_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_with_google_products_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_with_google_support_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_with_others_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1betaDataSharingSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
