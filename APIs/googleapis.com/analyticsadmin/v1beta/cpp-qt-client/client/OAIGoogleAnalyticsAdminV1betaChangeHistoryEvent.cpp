/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::~OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent() {}

void OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::initializeModel() {

    m_actor_type_isSet = false;
    m_actor_type_isValid = false;

    m_change_time_isSet = false;
    m_change_time_isValid = false;

    m_changes_isSet = false;
    m_changes_isValid = false;

    m_changes_filtered_isSet = false;
    m_changes_filtered_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_user_actor_email_isSet = false;
    m_user_actor_email_isValid = false;
}

void OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::fromJsonObject(QJsonObject json) {

    m_actor_type_isValid = ::OpenAPI::fromJsonValue(m_actor_type, json[QString("actorType")]);
    m_actor_type_isSet = !json[QString("actorType")].isNull() && m_actor_type_isValid;

    m_change_time_isValid = ::OpenAPI::fromJsonValue(m_change_time, json[QString("changeTime")]);
    m_change_time_isSet = !json[QString("changeTime")].isNull() && m_change_time_isValid;

    m_changes_isValid = ::OpenAPI::fromJsonValue(m_changes, json[QString("changes")]);
    m_changes_isSet = !json[QString("changes")].isNull() && m_changes_isValid;

    m_changes_filtered_isValid = ::OpenAPI::fromJsonValue(m_changes_filtered, json[QString("changesFiltered")]);
    m_changes_filtered_isSet = !json[QString("changesFiltered")].isNull() && m_changes_filtered_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_user_actor_email_isValid = ::OpenAPI::fromJsonValue(m_user_actor_email, json[QString("userActorEmail")]);
    m_user_actor_email_isSet = !json[QString("userActorEmail")].isNull() && m_user_actor_email_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_actor_type_isSet) {
        obj.insert(QString("actorType"), ::OpenAPI::toJsonValue(m_actor_type));
    }
    if (m_change_time_isSet) {
        obj.insert(QString("changeTime"), ::OpenAPI::toJsonValue(m_change_time));
    }
    if (m_changes.size() > 0) {
        obj.insert(QString("changes"), ::OpenAPI::toJsonValue(m_changes));
    }
    if (m_changes_filtered_isSet) {
        obj.insert(QString("changesFiltered"), ::OpenAPI::toJsonValue(m_changes_filtered));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_user_actor_email_isSet) {
        obj.insert(QString("userActorEmail"), ::OpenAPI::toJsonValue(m_user_actor_email));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::getActorType() const {
    return m_actor_type;
}
void OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::setActorType(const QString &actor_type) {
    m_actor_type = actor_type;
    m_actor_type_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::is_actor_type_Set() const{
    return m_actor_type_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::is_actor_type_Valid() const{
    return m_actor_type_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::getChangeTime() const {
    return m_change_time;
}
void OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::setChangeTime(const QString &change_time) {
    m_change_time = change_time;
    m_change_time_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::is_change_time_Set() const{
    return m_change_time_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::is_change_time_Valid() const{
    return m_change_time_isValid;
}

QList<OAIGoogleAnalyticsAdminV1betaChangeHistoryChange> OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::getChanges() const {
    return m_changes;
}
void OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::setChanges(const QList<OAIGoogleAnalyticsAdminV1betaChangeHistoryChange> &changes) {
    m_changes = changes;
    m_changes_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::is_changes_Set() const{
    return m_changes_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::is_changes_Valid() const{
    return m_changes_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::isChangesFiltered() const {
    return m_changes_filtered;
}
void OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::setChangesFiltered(const bool &changes_filtered) {
    m_changes_filtered = changes_filtered;
    m_changes_filtered_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::is_changes_filtered_Set() const{
    return m_changes_filtered_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::is_changes_filtered_Valid() const{
    return m_changes_filtered_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::getId() const {
    return m_id;
}
void OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::getUserActorEmail() const {
    return m_user_actor_email;
}
void OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::setUserActorEmail(const QString &user_actor_email) {
    m_user_actor_email = user_actor_email;
    m_user_actor_email_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::is_user_actor_email_Set() const{
    return m_user_actor_email_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::is_user_actor_email_Valid() const{
    return m_user_actor_email_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_changes_filtered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_actor_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
