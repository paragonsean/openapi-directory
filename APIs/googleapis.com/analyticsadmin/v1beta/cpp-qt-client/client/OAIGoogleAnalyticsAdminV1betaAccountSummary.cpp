/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1betaAccountSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1betaAccountSummary::OAIGoogleAnalyticsAdminV1betaAccountSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1betaAccountSummary::OAIGoogleAnalyticsAdminV1betaAccountSummary() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1betaAccountSummary::~OAIGoogleAnalyticsAdminV1betaAccountSummary() {}

void OAIGoogleAnalyticsAdminV1betaAccountSummary::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_property_summaries_isSet = false;
    m_property_summaries_isValid = false;
}

void OAIGoogleAnalyticsAdminV1betaAccountSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1betaAccountSummary::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_property_summaries_isValid = ::OpenAPI::fromJsonValue(m_property_summaries, json[QString("propertySummaries")]);
    m_property_summaries_isSet = !json[QString("propertySummaries")].isNull() && m_property_summaries_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaAccountSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1betaAccountSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_property_summaries.size() > 0) {
        obj.insert(QString("propertySummaries"), ::OpenAPI::toJsonValue(m_property_summaries));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1betaAccountSummary::getAccount() const {
    return m_account;
}
void OAIGoogleAnalyticsAdminV1betaAccountSummary::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccountSummary::is_account_Set() const{
    return m_account_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccountSummary::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaAccountSummary::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleAnalyticsAdminV1betaAccountSummary::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccountSummary::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccountSummary::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaAccountSummary::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1betaAccountSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccountSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccountSummary::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGoogleAnalyticsAdminV1betaPropertySummary> OAIGoogleAnalyticsAdminV1betaAccountSummary::getPropertySummaries() const {
    return m_property_summaries;
}
void OAIGoogleAnalyticsAdminV1betaAccountSummary::setPropertySummaries(const QList<OAIGoogleAnalyticsAdminV1betaPropertySummary> &property_summaries) {
    m_property_summaries = property_summaries;
    m_property_summaries_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccountSummary::is_property_summaries_Set() const{
    return m_property_summaries_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccountSummary::is_property_summaries_Valid() const{
    return m_property_summaries_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaAccountSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_summaries.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1betaAccountSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
