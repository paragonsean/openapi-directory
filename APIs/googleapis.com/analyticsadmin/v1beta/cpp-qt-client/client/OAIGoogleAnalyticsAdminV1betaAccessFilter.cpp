/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1betaAccessFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1betaAccessFilter::OAIGoogleAnalyticsAdminV1betaAccessFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1betaAccessFilter::OAIGoogleAnalyticsAdminV1betaAccessFilter() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1betaAccessFilter::~OAIGoogleAnalyticsAdminV1betaAccessFilter() {}

void OAIGoogleAnalyticsAdminV1betaAccessFilter::initializeModel() {

    m_between_filter_isSet = false;
    m_between_filter_isValid = false;

    m_field_name_isSet = false;
    m_field_name_isValid = false;

    m_in_list_filter_isSet = false;
    m_in_list_filter_isValid = false;

    m_numeric_filter_isSet = false;
    m_numeric_filter_isValid = false;

    m_string_filter_isSet = false;
    m_string_filter_isValid = false;
}

void OAIGoogleAnalyticsAdminV1betaAccessFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1betaAccessFilter::fromJsonObject(QJsonObject json) {

    m_between_filter_isValid = ::OpenAPI::fromJsonValue(m_between_filter, json[QString("betweenFilter")]);
    m_between_filter_isSet = !json[QString("betweenFilter")].isNull() && m_between_filter_isValid;

    m_field_name_isValid = ::OpenAPI::fromJsonValue(m_field_name, json[QString("fieldName")]);
    m_field_name_isSet = !json[QString("fieldName")].isNull() && m_field_name_isValid;

    m_in_list_filter_isValid = ::OpenAPI::fromJsonValue(m_in_list_filter, json[QString("inListFilter")]);
    m_in_list_filter_isSet = !json[QString("inListFilter")].isNull() && m_in_list_filter_isValid;

    m_numeric_filter_isValid = ::OpenAPI::fromJsonValue(m_numeric_filter, json[QString("numericFilter")]);
    m_numeric_filter_isSet = !json[QString("numericFilter")].isNull() && m_numeric_filter_isValid;

    m_string_filter_isValid = ::OpenAPI::fromJsonValue(m_string_filter, json[QString("stringFilter")]);
    m_string_filter_isSet = !json[QString("stringFilter")].isNull() && m_string_filter_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaAccessFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1betaAccessFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_between_filter.isSet()) {
        obj.insert(QString("betweenFilter"), ::OpenAPI::toJsonValue(m_between_filter));
    }
    if (m_field_name_isSet) {
        obj.insert(QString("fieldName"), ::OpenAPI::toJsonValue(m_field_name));
    }
    if (m_in_list_filter.isSet()) {
        obj.insert(QString("inListFilter"), ::OpenAPI::toJsonValue(m_in_list_filter));
    }
    if (m_numeric_filter.isSet()) {
        obj.insert(QString("numericFilter"), ::OpenAPI::toJsonValue(m_numeric_filter));
    }
    if (m_string_filter.isSet()) {
        obj.insert(QString("stringFilter"), ::OpenAPI::toJsonValue(m_string_filter));
    }
    return obj;
}

OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter OAIGoogleAnalyticsAdminV1betaAccessFilter::getBetweenFilter() const {
    return m_between_filter;
}
void OAIGoogleAnalyticsAdminV1betaAccessFilter::setBetweenFilter(const OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter &between_filter) {
    m_between_filter = between_filter;
    m_between_filter_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccessFilter::is_between_filter_Set() const{
    return m_between_filter_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccessFilter::is_between_filter_Valid() const{
    return m_between_filter_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaAccessFilter::getFieldName() const {
    return m_field_name;
}
void OAIGoogleAnalyticsAdminV1betaAccessFilter::setFieldName(const QString &field_name) {
    m_field_name = field_name;
    m_field_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccessFilter::is_field_name_Set() const{
    return m_field_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccessFilter::is_field_name_Valid() const{
    return m_field_name_isValid;
}

OAIGoogleAnalyticsAdminV1betaAccessInListFilter OAIGoogleAnalyticsAdminV1betaAccessFilter::getInListFilter() const {
    return m_in_list_filter;
}
void OAIGoogleAnalyticsAdminV1betaAccessFilter::setInListFilter(const OAIGoogleAnalyticsAdminV1betaAccessInListFilter &in_list_filter) {
    m_in_list_filter = in_list_filter;
    m_in_list_filter_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccessFilter::is_in_list_filter_Set() const{
    return m_in_list_filter_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccessFilter::is_in_list_filter_Valid() const{
    return m_in_list_filter_isValid;
}

OAIGoogleAnalyticsAdminV1betaAccessNumericFilter OAIGoogleAnalyticsAdminV1betaAccessFilter::getNumericFilter() const {
    return m_numeric_filter;
}
void OAIGoogleAnalyticsAdminV1betaAccessFilter::setNumericFilter(const OAIGoogleAnalyticsAdminV1betaAccessNumericFilter &numeric_filter) {
    m_numeric_filter = numeric_filter;
    m_numeric_filter_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccessFilter::is_numeric_filter_Set() const{
    return m_numeric_filter_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccessFilter::is_numeric_filter_Valid() const{
    return m_numeric_filter_isValid;
}

OAIGoogleAnalyticsAdminV1betaAccessStringFilter OAIGoogleAnalyticsAdminV1betaAccessFilter::getStringFilter() const {
    return m_string_filter;
}
void OAIGoogleAnalyticsAdminV1betaAccessFilter::setStringFilter(const OAIGoogleAnalyticsAdminV1betaAccessStringFilter &string_filter) {
    m_string_filter = string_filter;
    m_string_filter_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccessFilter::is_string_filter_Set() const{
    return m_string_filter_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccessFilter::is_string_filter_Valid() const{
    return m_string_filter_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaAccessFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_between_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_list_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numeric_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1betaAccessFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
