/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::~OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse() {}

void OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::initializeModel() {

    m_measurement_protocol_secrets_isSet = false;
    m_measurement_protocol_secrets_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::fromJsonObject(QJsonObject json) {

    m_measurement_protocol_secrets_isValid = ::OpenAPI::fromJsonValue(m_measurement_protocol_secrets, json[QString("measurementProtocolSecrets")]);
    m_measurement_protocol_secrets_isSet = !json[QString("measurementProtocolSecrets")].isNull() && m_measurement_protocol_secrets_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_measurement_protocol_secrets.size() > 0) {
        obj.insert(QString("measurementProtocolSecrets"), ::OpenAPI::toJsonValue(m_measurement_protocol_secrets));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIGoogleAnalyticsAdminV1betaMeasurementProtocolSecret> OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::getMeasurementProtocolSecrets() const {
    return m_measurement_protocol_secrets;
}
void OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::setMeasurementProtocolSecrets(const QList<OAIGoogleAnalyticsAdminV1betaMeasurementProtocolSecret> &measurement_protocol_secrets) {
    m_measurement_protocol_secrets = measurement_protocol_secrets;
    m_measurement_protocol_secrets_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::is_measurement_protocol_secrets_Set() const{
    return m_measurement_protocol_secrets_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::is_measurement_protocol_secrets_Valid() const{
    return m_measurement_protocol_secrets_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_measurement_protocol_secrets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
