/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1betaDataRetentionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::OAIGoogleAnalyticsAdminV1betaDataRetentionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::OAIGoogleAnalyticsAdminV1betaDataRetentionSettings() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::~OAIGoogleAnalyticsAdminV1betaDataRetentionSettings() {}

void OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::initializeModel() {

    m_event_data_retention_isSet = false;
    m_event_data_retention_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reset_user_data_on_new_activity_isSet = false;
    m_reset_user_data_on_new_activity_isValid = false;
}

void OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::fromJsonObject(QJsonObject json) {

    m_event_data_retention_isValid = ::OpenAPI::fromJsonValue(m_event_data_retention, json[QString("eventDataRetention")]);
    m_event_data_retention_isSet = !json[QString("eventDataRetention")].isNull() && m_event_data_retention_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reset_user_data_on_new_activity_isValid = ::OpenAPI::fromJsonValue(m_reset_user_data_on_new_activity, json[QString("resetUserDataOnNewActivity")]);
    m_reset_user_data_on_new_activity_isSet = !json[QString("resetUserDataOnNewActivity")].isNull() && m_reset_user_data_on_new_activity_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_event_data_retention_isSet) {
        obj.insert(QString("eventDataRetention"), ::OpenAPI::toJsonValue(m_event_data_retention));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reset_user_data_on_new_activity_isSet) {
        obj.insert(QString("resetUserDataOnNewActivity"), ::OpenAPI::toJsonValue(m_reset_user_data_on_new_activity));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::getEventDataRetention() const {
    return m_event_data_retention;
}
void OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::setEventDataRetention(const QString &event_data_retention) {
    m_event_data_retention = event_data_retention;
    m_event_data_retention_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::is_event_data_retention_Set() const{
    return m_event_data_retention_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::is_event_data_retention_Valid() const{
    return m_event_data_retention_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::isResetUserDataOnNewActivity() const {
    return m_reset_user_data_on_new_activity;
}
void OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::setResetUserDataOnNewActivity(const bool &reset_user_data_on_new_activity) {
    m_reset_user_data_on_new_activity = reset_user_data_on_new_activity;
    m_reset_user_data_on_new_activity_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::is_reset_user_data_on_new_activity_Set() const{
    return m_reset_user_data_on_new_activity_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::is_reset_user_data_on_new_activity_Valid() const{
    return m_reset_user_data_on_new_activity_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_data_retention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_user_data_on_new_activity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1betaDataRetentionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
