/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::~OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse() {}

void OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::initializeModel() {

    m_change_history_events_isSet = false;
    m_change_history_events_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::fromJsonObject(QJsonObject json) {

    m_change_history_events_isValid = ::OpenAPI::fromJsonValue(m_change_history_events, json[QString("changeHistoryEvents")]);
    m_change_history_events_isSet = !json[QString("changeHistoryEvents")].isNull() && m_change_history_events_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_change_history_events.size() > 0) {
        obj.insert(QString("changeHistoryEvents"), ::OpenAPI::toJsonValue(m_change_history_events));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent> OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::getChangeHistoryEvents() const {
    return m_change_history_events;
}
void OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::setChangeHistoryEvents(const QList<OAIGoogleAnalyticsAdminV1betaChangeHistoryEvent> &change_history_events) {
    m_change_history_events = change_history_events;
    m_change_history_events_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::is_change_history_events_Set() const{
    return m_change_history_events_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::is_change_history_events_Valid() const{
    return m_change_history_events_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_change_history_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1betaSearchChangeHistoryEventsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
