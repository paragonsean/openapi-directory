/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1betaAccessQuota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1betaAccessQuota::OAIGoogleAnalyticsAdminV1betaAccessQuota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1betaAccessQuota::OAIGoogleAnalyticsAdminV1betaAccessQuota() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1betaAccessQuota::~OAIGoogleAnalyticsAdminV1betaAccessQuota() {}

void OAIGoogleAnalyticsAdminV1betaAccessQuota::initializeModel() {

    m_concurrent_requests_isSet = false;
    m_concurrent_requests_isValid = false;

    m_server_errors_per_project_per_hour_isSet = false;
    m_server_errors_per_project_per_hour_isValid = false;

    m_tokens_per_day_isSet = false;
    m_tokens_per_day_isValid = false;

    m_tokens_per_hour_isSet = false;
    m_tokens_per_hour_isValid = false;

    m_tokens_per_project_per_hour_isSet = false;
    m_tokens_per_project_per_hour_isValid = false;
}

void OAIGoogleAnalyticsAdminV1betaAccessQuota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1betaAccessQuota::fromJsonObject(QJsonObject json) {

    m_concurrent_requests_isValid = ::OpenAPI::fromJsonValue(m_concurrent_requests, json[QString("concurrentRequests")]);
    m_concurrent_requests_isSet = !json[QString("concurrentRequests")].isNull() && m_concurrent_requests_isValid;

    m_server_errors_per_project_per_hour_isValid = ::OpenAPI::fromJsonValue(m_server_errors_per_project_per_hour, json[QString("serverErrorsPerProjectPerHour")]);
    m_server_errors_per_project_per_hour_isSet = !json[QString("serverErrorsPerProjectPerHour")].isNull() && m_server_errors_per_project_per_hour_isValid;

    m_tokens_per_day_isValid = ::OpenAPI::fromJsonValue(m_tokens_per_day, json[QString("tokensPerDay")]);
    m_tokens_per_day_isSet = !json[QString("tokensPerDay")].isNull() && m_tokens_per_day_isValid;

    m_tokens_per_hour_isValid = ::OpenAPI::fromJsonValue(m_tokens_per_hour, json[QString("tokensPerHour")]);
    m_tokens_per_hour_isSet = !json[QString("tokensPerHour")].isNull() && m_tokens_per_hour_isValid;

    m_tokens_per_project_per_hour_isValid = ::OpenAPI::fromJsonValue(m_tokens_per_project_per_hour, json[QString("tokensPerProjectPerHour")]);
    m_tokens_per_project_per_hour_isSet = !json[QString("tokensPerProjectPerHour")].isNull() && m_tokens_per_project_per_hour_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaAccessQuota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1betaAccessQuota::asJsonObject() const {
    QJsonObject obj;
    if (m_concurrent_requests.isSet()) {
        obj.insert(QString("concurrentRequests"), ::OpenAPI::toJsonValue(m_concurrent_requests));
    }
    if (m_server_errors_per_project_per_hour.isSet()) {
        obj.insert(QString("serverErrorsPerProjectPerHour"), ::OpenAPI::toJsonValue(m_server_errors_per_project_per_hour));
    }
    if (m_tokens_per_day.isSet()) {
        obj.insert(QString("tokensPerDay"), ::OpenAPI::toJsonValue(m_tokens_per_day));
    }
    if (m_tokens_per_hour.isSet()) {
        obj.insert(QString("tokensPerHour"), ::OpenAPI::toJsonValue(m_tokens_per_hour));
    }
    if (m_tokens_per_project_per_hour.isSet()) {
        obj.insert(QString("tokensPerProjectPerHour"), ::OpenAPI::toJsonValue(m_tokens_per_project_per_hour));
    }
    return obj;
}

OAIGoogleAnalyticsAdminV1betaAccessQuotaStatus OAIGoogleAnalyticsAdminV1betaAccessQuota::getConcurrentRequests() const {
    return m_concurrent_requests;
}
void OAIGoogleAnalyticsAdminV1betaAccessQuota::setConcurrentRequests(const OAIGoogleAnalyticsAdminV1betaAccessQuotaStatus &concurrent_requests) {
    m_concurrent_requests = concurrent_requests;
    m_concurrent_requests_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccessQuota::is_concurrent_requests_Set() const{
    return m_concurrent_requests_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccessQuota::is_concurrent_requests_Valid() const{
    return m_concurrent_requests_isValid;
}

OAIGoogleAnalyticsAdminV1betaAccessQuotaStatus OAIGoogleAnalyticsAdminV1betaAccessQuota::getServerErrorsPerProjectPerHour() const {
    return m_server_errors_per_project_per_hour;
}
void OAIGoogleAnalyticsAdminV1betaAccessQuota::setServerErrorsPerProjectPerHour(const OAIGoogleAnalyticsAdminV1betaAccessQuotaStatus &server_errors_per_project_per_hour) {
    m_server_errors_per_project_per_hour = server_errors_per_project_per_hour;
    m_server_errors_per_project_per_hour_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccessQuota::is_server_errors_per_project_per_hour_Set() const{
    return m_server_errors_per_project_per_hour_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccessQuota::is_server_errors_per_project_per_hour_Valid() const{
    return m_server_errors_per_project_per_hour_isValid;
}

OAIGoogleAnalyticsAdminV1betaAccessQuotaStatus OAIGoogleAnalyticsAdminV1betaAccessQuota::getTokensPerDay() const {
    return m_tokens_per_day;
}
void OAIGoogleAnalyticsAdminV1betaAccessQuota::setTokensPerDay(const OAIGoogleAnalyticsAdminV1betaAccessQuotaStatus &tokens_per_day) {
    m_tokens_per_day = tokens_per_day;
    m_tokens_per_day_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccessQuota::is_tokens_per_day_Set() const{
    return m_tokens_per_day_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccessQuota::is_tokens_per_day_Valid() const{
    return m_tokens_per_day_isValid;
}

OAIGoogleAnalyticsAdminV1betaAccessQuotaStatus OAIGoogleAnalyticsAdminV1betaAccessQuota::getTokensPerHour() const {
    return m_tokens_per_hour;
}
void OAIGoogleAnalyticsAdminV1betaAccessQuota::setTokensPerHour(const OAIGoogleAnalyticsAdminV1betaAccessQuotaStatus &tokens_per_hour) {
    m_tokens_per_hour = tokens_per_hour;
    m_tokens_per_hour_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccessQuota::is_tokens_per_hour_Set() const{
    return m_tokens_per_hour_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccessQuota::is_tokens_per_hour_Valid() const{
    return m_tokens_per_hour_isValid;
}

OAIGoogleAnalyticsAdminV1betaAccessQuotaStatus OAIGoogleAnalyticsAdminV1betaAccessQuota::getTokensPerProjectPerHour() const {
    return m_tokens_per_project_per_hour;
}
void OAIGoogleAnalyticsAdminV1betaAccessQuota::setTokensPerProjectPerHour(const OAIGoogleAnalyticsAdminV1betaAccessQuotaStatus &tokens_per_project_per_hour) {
    m_tokens_per_project_per_hour = tokens_per_project_per_hour;
    m_tokens_per_project_per_hour_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccessQuota::is_tokens_per_project_per_hour_Set() const{
    return m_tokens_per_project_per_hour_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccessQuota::is_tokens_per_project_per_hour_Valid() const{
    return m_tokens_per_project_per_hour_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaAccessQuota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concurrent_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_errors_per_project_per_hour.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens_per_day.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens_per_hour.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens_per_project_per_hour.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1betaAccessQuota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
