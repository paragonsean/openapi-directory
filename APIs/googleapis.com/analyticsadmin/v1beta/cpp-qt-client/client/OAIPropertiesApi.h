/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPropertiesApi_H
#define OAI_OAIPropertiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest.h"
#include "OAIGoogleAnalyticsAdminV1betaConversionEvent.h"
#include "OAIGoogleAnalyticsAdminV1betaCustomDimension.h"
#include "OAIGoogleAnalyticsAdminV1betaCustomMetric.h"
#include "OAIGoogleAnalyticsAdminV1betaDataStream.h"
#include "OAIGoogleAnalyticsAdminV1betaFirebaseLink.h"
#include "OAIGoogleAnalyticsAdminV1betaGoogleAdsLink.h"
#include "OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse.h"
#include "OAIGoogleAnalyticsAdminV1betaListCustomDimensionsResponse.h"
#include "OAIGoogleAnalyticsAdminV1betaListCustomMetricsResponse.h"
#include "OAIGoogleAnalyticsAdminV1betaListDataStreamsResponse.h"
#include "OAIGoogleAnalyticsAdminV1betaListFirebaseLinksResponse.h"
#include "OAIGoogleAnalyticsAdminV1betaListGoogleAdsLinksResponse.h"
#include "OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse.h"
#include "OAIGoogleAnalyticsAdminV1betaListPropertiesResponse.h"
#include "OAIGoogleAnalyticsAdminV1betaMeasurementProtocolSecret.h"
#include "OAIGoogleAnalyticsAdminV1betaProperty.h"
#include "OAIGoogleAnalyticsAdminV1betaRunAccessReportRequest.h"
#include "OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPropertiesApi : public QObject {
    Q_OBJECT

public:
    OAIPropertiesApi(const int timeOut = 0);
    ~OAIPropertiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  property QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1beta_acknowledge_user_data_collection_request OAIGoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest [optional]
    */
    virtual void analyticsadmin_properties_acknowledgeUserDataCollection(const QString &property, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest> &oai_google_analytics_admin_v1beta_acknowledge_user_data_collection_request = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaAcknowledgeUserDataCollectionRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1beta_conversion_event OAIGoogleAnalyticsAdminV1betaConversionEvent [optional]
    */
    virtual void analyticsadmin_properties_conversionEvents_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaConversionEvent> &oai_google_analytics_admin_v1beta_conversion_event = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaConversionEvent>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_conversionEvents_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1beta_property OAIGoogleAnalyticsAdminV1betaProperty [optional]
    */
    virtual void analyticsadmin_properties_create(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaProperty> &oai_google_analytics_admin_v1beta_property = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaProperty>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1beta_custom_dimension OAIGoogleAnalyticsAdminV1betaCustomDimension [optional]
    */
    virtual void analyticsadmin_properties_customDimensions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaCustomDimension> &oai_google_analytics_admin_v1beta_custom_dimension = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaCustomDimension>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_customDimensions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void analyticsadmin_properties_customMetrics_archive(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1beta_custom_metric OAIGoogleAnalyticsAdminV1betaCustomMetric [optional]
    */
    virtual void analyticsadmin_properties_customMetrics_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaCustomMetric> &oai_google_analytics_admin_v1beta_custom_metric = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaCustomMetric>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_customMetrics_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1beta_data_stream OAIGoogleAnalyticsAdminV1betaDataStream [optional]
    */
    virtual void analyticsadmin_properties_dataStreams_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaDataStream> &oai_google_analytics_admin_v1beta_data_stream = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaDataStream>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_dataStreams_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1beta_measurement_protocol_secret OAIGoogleAnalyticsAdminV1betaMeasurementProtocolSecret [optional]
    */
    virtual void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaMeasurementProtocolSecret> &oai_google_analytics_admin_v1beta_measurement_protocol_secret = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaMeasurementProtocolSecret>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1beta_firebase_link OAIGoogleAnalyticsAdminV1betaFirebaseLink [optional]
    */
    virtual void analyticsadmin_properties_firebaseLinks_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaFirebaseLink> &oai_google_analytics_admin_v1beta_firebase_link = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaFirebaseLink>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_firebaseLinks_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1beta_google_ads_link OAIGoogleAnalyticsAdminV1betaGoogleAdsLink [optional]
    */
    virtual void analyticsadmin_properties_googleAdsLinks_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaGoogleAdsLink> &oai_google_analytics_admin_v1beta_google_ads_link = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaGoogleAdsLink>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void analyticsadmin_properties_googleAdsLinks_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_googleAdsLinks_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_google_analytics_admin_v1beta_google_ads_link OAIGoogleAnalyticsAdminV1betaGoogleAdsLink [optional]
    */
    virtual void analyticsadmin_properties_googleAdsLinks_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaGoogleAdsLink> &oai_google_analytics_admin_v1beta_google_ads_link = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaGoogleAdsLink>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  show_deleted bool [optional]
    */
    virtual void analyticsadmin_properties_list(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_deleted = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  entity QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1beta_run_access_report_request OAIGoogleAnalyticsAdminV1betaRunAccessReportRequest [optional]
    */
    virtual void analyticsadmin_properties_runAccessReport(const QString &entity, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaRunAccessReportRequest> &oai_google_analytics_admin_v1beta_run_access_report_request = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1betaRunAccessReportRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analyticsadmin_properties_acknowledgeUserDataCollectionCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_conversionEvents_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_conversionEvents_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_customDimensions_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_customDimensions_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_customMetrics_archiveCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_customMetrics_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_customMetrics_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_dataStreams_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_dataStreams_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_getCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_firebaseLinks_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_firebaseLinks_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_googleAdsLinks_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_googleAdsLinks_deleteCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_googleAdsLinks_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_googleAdsLinks_patchCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_runAccessReportCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analyticsadmin_properties_acknowledgeUserDataCollectionSignal(OAIObject summary);
    void analyticsadmin_properties_conversionEvents_createSignal(OAIGoogleAnalyticsAdminV1betaConversionEvent summary);
    void analyticsadmin_properties_conversionEvents_listSignal(OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse summary);
    void analyticsadmin_properties_createSignal(OAIGoogleAnalyticsAdminV1betaProperty summary);
    void analyticsadmin_properties_customDimensions_createSignal(OAIGoogleAnalyticsAdminV1betaCustomDimension summary);
    void analyticsadmin_properties_customDimensions_listSignal(OAIGoogleAnalyticsAdminV1betaListCustomDimensionsResponse summary);
    void analyticsadmin_properties_customMetrics_archiveSignal(OAIObject summary);
    void analyticsadmin_properties_customMetrics_createSignal(OAIGoogleAnalyticsAdminV1betaCustomMetric summary);
    void analyticsadmin_properties_customMetrics_listSignal(OAIGoogleAnalyticsAdminV1betaListCustomMetricsResponse summary);
    void analyticsadmin_properties_dataStreams_createSignal(OAIGoogleAnalyticsAdminV1betaDataStream summary);
    void analyticsadmin_properties_dataStreams_listSignal(OAIGoogleAnalyticsAdminV1betaListDataStreamsResponse summary);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignal(OAIGoogleAnalyticsAdminV1betaMeasurementProtocolSecret summary);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_getSignal(OAIGoogleAnalyticsAdminV1betaMeasurementProtocolSecret summary);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignal(OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse summary);
    void analyticsadmin_properties_firebaseLinks_createSignal(OAIGoogleAnalyticsAdminV1betaFirebaseLink summary);
    void analyticsadmin_properties_firebaseLinks_listSignal(OAIGoogleAnalyticsAdminV1betaListFirebaseLinksResponse summary);
    void analyticsadmin_properties_googleAdsLinks_createSignal(OAIGoogleAnalyticsAdminV1betaGoogleAdsLink summary);
    void analyticsadmin_properties_googleAdsLinks_deleteSignal(OAIObject summary);
    void analyticsadmin_properties_googleAdsLinks_listSignal(OAIGoogleAnalyticsAdminV1betaListGoogleAdsLinksResponse summary);
    void analyticsadmin_properties_googleAdsLinks_patchSignal(OAIGoogleAnalyticsAdminV1betaGoogleAdsLink summary);
    void analyticsadmin_properties_listSignal(OAIGoogleAnalyticsAdminV1betaListPropertiesResponse summary);
    void analyticsadmin_properties_runAccessReportSignal(OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse summary);


    void analyticsadmin_properties_acknowledgeUserDataCollectionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void analyticsadmin_properties_conversionEvents_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaConversionEvent summary);
    void analyticsadmin_properties_conversionEvents_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse summary);
    void analyticsadmin_properties_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaProperty summary);
    void analyticsadmin_properties_customDimensions_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaCustomDimension summary);
    void analyticsadmin_properties_customDimensions_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaListCustomDimensionsResponse summary);
    void analyticsadmin_properties_customMetrics_archiveSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void analyticsadmin_properties_customMetrics_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaCustomMetric summary);
    void analyticsadmin_properties_customMetrics_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaListCustomMetricsResponse summary);
    void analyticsadmin_properties_dataStreams_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaDataStream summary);
    void analyticsadmin_properties_dataStreams_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaListDataStreamsResponse summary);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaMeasurementProtocolSecret summary);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaMeasurementProtocolSecret summary);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse summary);
    void analyticsadmin_properties_firebaseLinks_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaFirebaseLink summary);
    void analyticsadmin_properties_firebaseLinks_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaListFirebaseLinksResponse summary);
    void analyticsadmin_properties_googleAdsLinks_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaGoogleAdsLink summary);
    void analyticsadmin_properties_googleAdsLinks_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void analyticsadmin_properties_googleAdsLinks_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaListGoogleAdsLinksResponse summary);
    void analyticsadmin_properties_googleAdsLinks_patchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaGoogleAdsLink summary);
    void analyticsadmin_properties_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaListPropertiesResponse summary);
    void analyticsadmin_properties_runAccessReportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse summary);

    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_acknowledgeUserDataCollectionSignalError() instead")
    void analyticsadmin_properties_acknowledgeUserDataCollectionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_acknowledgeUserDataCollectionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_conversionEvents_createSignalError() instead")
    void analyticsadmin_properties_conversionEvents_createSignalE(OAIGoogleAnalyticsAdminV1betaConversionEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_conversionEvents_createSignalError(OAIGoogleAnalyticsAdminV1betaConversionEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_conversionEvents_listSignalError() instead")
    void analyticsadmin_properties_conversionEvents_listSignalE(OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_conversionEvents_listSignalError(OAIGoogleAnalyticsAdminV1betaListConversionEventsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_createSignalError() instead")
    void analyticsadmin_properties_createSignalE(OAIGoogleAnalyticsAdminV1betaProperty summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_createSignalError(OAIGoogleAnalyticsAdminV1betaProperty summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customDimensions_createSignalError() instead")
    void analyticsadmin_properties_customDimensions_createSignalE(OAIGoogleAnalyticsAdminV1betaCustomDimension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customDimensions_createSignalError(OAIGoogleAnalyticsAdminV1betaCustomDimension summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customDimensions_listSignalError() instead")
    void analyticsadmin_properties_customDimensions_listSignalE(OAIGoogleAnalyticsAdminV1betaListCustomDimensionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customDimensions_listSignalError(OAIGoogleAnalyticsAdminV1betaListCustomDimensionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customMetrics_archiveSignalError() instead")
    void analyticsadmin_properties_customMetrics_archiveSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customMetrics_archiveSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customMetrics_createSignalError() instead")
    void analyticsadmin_properties_customMetrics_createSignalE(OAIGoogleAnalyticsAdminV1betaCustomMetric summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customMetrics_createSignalError(OAIGoogleAnalyticsAdminV1betaCustomMetric summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customMetrics_listSignalError() instead")
    void analyticsadmin_properties_customMetrics_listSignalE(OAIGoogleAnalyticsAdminV1betaListCustomMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customMetrics_listSignalError(OAIGoogleAnalyticsAdminV1betaListCustomMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_createSignalError() instead")
    void analyticsadmin_properties_dataStreams_createSignalE(OAIGoogleAnalyticsAdminV1betaDataStream summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_createSignalError(OAIGoogleAnalyticsAdminV1betaDataStream summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_listSignalError() instead")
    void analyticsadmin_properties_dataStreams_listSignalE(OAIGoogleAnalyticsAdminV1betaListDataStreamsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_listSignalError(OAIGoogleAnalyticsAdminV1betaListDataStreamsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignalError() instead")
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignalE(OAIGoogleAnalyticsAdminV1betaMeasurementProtocolSecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignalError(OAIGoogleAnalyticsAdminV1betaMeasurementProtocolSecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_measurementProtocolSecrets_getSignalError() instead")
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_getSignalE(OAIGoogleAnalyticsAdminV1betaMeasurementProtocolSecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_getSignalError(OAIGoogleAnalyticsAdminV1betaMeasurementProtocolSecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignalError() instead")
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignalE(OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignalError(OAIGoogleAnalyticsAdminV1betaListMeasurementProtocolSecretsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_firebaseLinks_createSignalError() instead")
    void analyticsadmin_properties_firebaseLinks_createSignalE(OAIGoogleAnalyticsAdminV1betaFirebaseLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_firebaseLinks_createSignalError(OAIGoogleAnalyticsAdminV1betaFirebaseLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_firebaseLinks_listSignalError() instead")
    void analyticsadmin_properties_firebaseLinks_listSignalE(OAIGoogleAnalyticsAdminV1betaListFirebaseLinksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_firebaseLinks_listSignalError(OAIGoogleAnalyticsAdminV1betaListFirebaseLinksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_googleAdsLinks_createSignalError() instead")
    void analyticsadmin_properties_googleAdsLinks_createSignalE(OAIGoogleAnalyticsAdminV1betaGoogleAdsLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_googleAdsLinks_createSignalError(OAIGoogleAnalyticsAdminV1betaGoogleAdsLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_googleAdsLinks_deleteSignalError() instead")
    void analyticsadmin_properties_googleAdsLinks_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_googleAdsLinks_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_googleAdsLinks_listSignalError() instead")
    void analyticsadmin_properties_googleAdsLinks_listSignalE(OAIGoogleAnalyticsAdminV1betaListGoogleAdsLinksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_googleAdsLinks_listSignalError(OAIGoogleAnalyticsAdminV1betaListGoogleAdsLinksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_googleAdsLinks_patchSignalError() instead")
    void analyticsadmin_properties_googleAdsLinks_patchSignalE(OAIGoogleAnalyticsAdminV1betaGoogleAdsLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_googleAdsLinks_patchSignalError(OAIGoogleAnalyticsAdminV1betaGoogleAdsLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_listSignalError() instead")
    void analyticsadmin_properties_listSignalE(OAIGoogleAnalyticsAdminV1betaListPropertiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_listSignalError(OAIGoogleAnalyticsAdminV1betaListPropertiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_runAccessReportSignalError() instead")
    void analyticsadmin_properties_runAccessReportSignalE(OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_runAccessReportSignalError(OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_acknowledgeUserDataCollectionSignalErrorFull() instead")
    void analyticsadmin_properties_acknowledgeUserDataCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_acknowledgeUserDataCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_conversionEvents_createSignalErrorFull() instead")
    void analyticsadmin_properties_conversionEvents_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_conversionEvents_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_conversionEvents_listSignalErrorFull() instead")
    void analyticsadmin_properties_conversionEvents_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_conversionEvents_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_createSignalErrorFull() instead")
    void analyticsadmin_properties_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customDimensions_createSignalErrorFull() instead")
    void analyticsadmin_properties_customDimensions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customDimensions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customDimensions_listSignalErrorFull() instead")
    void analyticsadmin_properties_customDimensions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customDimensions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customMetrics_archiveSignalErrorFull() instead")
    void analyticsadmin_properties_customMetrics_archiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customMetrics_archiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customMetrics_createSignalErrorFull() instead")
    void analyticsadmin_properties_customMetrics_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customMetrics_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customMetrics_listSignalErrorFull() instead")
    void analyticsadmin_properties_customMetrics_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customMetrics_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_createSignalErrorFull() instead")
    void analyticsadmin_properties_dataStreams_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_listSignalErrorFull() instead")
    void analyticsadmin_properties_dataStreams_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignalErrorFull() instead")
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_measurementProtocolSecrets_getSignalErrorFull() instead")
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignalErrorFull() instead")
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_firebaseLinks_createSignalErrorFull() instead")
    void analyticsadmin_properties_firebaseLinks_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_firebaseLinks_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_firebaseLinks_listSignalErrorFull() instead")
    void analyticsadmin_properties_firebaseLinks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_firebaseLinks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_googleAdsLinks_createSignalErrorFull() instead")
    void analyticsadmin_properties_googleAdsLinks_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_googleAdsLinks_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_googleAdsLinks_deleteSignalErrorFull() instead")
    void analyticsadmin_properties_googleAdsLinks_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_googleAdsLinks_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_googleAdsLinks_listSignalErrorFull() instead")
    void analyticsadmin_properties_googleAdsLinks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_googleAdsLinks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_googleAdsLinks_patchSignalErrorFull() instead")
    void analyticsadmin_properties_googleAdsLinks_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_googleAdsLinks_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_listSignalErrorFull() instead")
    void analyticsadmin_properties_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_runAccessReportSignalErrorFull() instead")
    void analyticsadmin_properties_runAccessReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_runAccessReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
