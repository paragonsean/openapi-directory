/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1betaCustomMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1betaCustomMetric::OAIGoogleAnalyticsAdminV1betaCustomMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1betaCustomMetric::OAIGoogleAnalyticsAdminV1betaCustomMetric() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1betaCustomMetric::~OAIGoogleAnalyticsAdminV1betaCustomMetric() {}

void OAIGoogleAnalyticsAdminV1betaCustomMetric::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;

    m_restricted_metric_type_isSet = false;
    m_restricted_metric_type_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIGoogleAnalyticsAdminV1betaCustomMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1betaCustomMetric::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurementUnit")]);
    m_measurement_unit_isSet = !json[QString("measurementUnit")].isNull() && m_measurement_unit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("parameterName")]);
    m_parameter_name_isSet = !json[QString("parameterName")].isNull() && m_parameter_name_isValid;

    m_restricted_metric_type_isValid = ::OpenAPI::fromJsonValue(m_restricted_metric_type, json[QString("restrictedMetricType")]);
    m_restricted_metric_type_isSet = !json[QString("restrictedMetricType")].isNull() && m_restricted_metric_type_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaCustomMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1betaCustomMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("measurementUnit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameter_name_isSet) {
        obj.insert(QString("parameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    if (m_restricted_metric_type.size() > 0) {
        obj.insert(QString("restrictedMetricType"), ::OpenAPI::toJsonValue(m_restricted_metric_type));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1betaCustomMetric::getDescription() const {
    return m_description;
}
void OAIGoogleAnalyticsAdminV1betaCustomMetric::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaCustomMetric::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleAnalyticsAdminV1betaCustomMetric::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaCustomMetric::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIGoogleAnalyticsAdminV1betaCustomMetric::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaCustomMetric::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1betaCustomMetric::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaCustomMetric::getParameterName() const {
    return m_parameter_name;
}
void OAIGoogleAnalyticsAdminV1betaCustomMetric::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

QList<QString> OAIGoogleAnalyticsAdminV1betaCustomMetric::getRestrictedMetricType() const {
    return m_restricted_metric_type;
}
void OAIGoogleAnalyticsAdminV1betaCustomMetric::setRestrictedMetricType(const QList<QString> &restricted_metric_type) {
    m_restricted_metric_type = restricted_metric_type;
    m_restricted_metric_type_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::is_restricted_metric_type_Set() const{
    return m_restricted_metric_type_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::is_restricted_metric_type_Valid() const{
    return m_restricted_metric_type_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaCustomMetric::getScope() const {
    return m_scope;
}
void OAIGoogleAnalyticsAdminV1betaCustomMetric::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_metric_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1betaCustomMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
