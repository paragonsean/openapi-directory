/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1betaConversionEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1betaConversionEvent::OAIGoogleAnalyticsAdminV1betaConversionEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1betaConversionEvent::OAIGoogleAnalyticsAdminV1betaConversionEvent() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1betaConversionEvent::~OAIGoogleAnalyticsAdminV1betaConversionEvent() {}

void OAIGoogleAnalyticsAdminV1betaConversionEvent::initializeModel() {

    m_counting_method_isSet = false;
    m_counting_method_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_default_conversion_value_isSet = false;
    m_default_conversion_value_isValid = false;

    m_deletable_isSet = false;
    m_deletable_isValid = false;

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGoogleAnalyticsAdminV1betaConversionEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1betaConversionEvent::fromJsonObject(QJsonObject json) {

    m_counting_method_isValid = ::OpenAPI::fromJsonValue(m_counting_method, json[QString("countingMethod")]);
    m_counting_method_isSet = !json[QString("countingMethod")].isNull() && m_counting_method_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_default_conversion_value_isValid = ::OpenAPI::fromJsonValue(m_default_conversion_value, json[QString("defaultConversionValue")]);
    m_default_conversion_value_isSet = !json[QString("defaultConversionValue")].isNull() && m_default_conversion_value_isValid;

    m_deletable_isValid = ::OpenAPI::fromJsonValue(m_deletable, json[QString("deletable")]);
    m_deletable_isSet = !json[QString("deletable")].isNull() && m_deletable_isValid;

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaConversionEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1betaConversionEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_counting_method_isSet) {
        obj.insert(QString("countingMethod"), ::OpenAPI::toJsonValue(m_counting_method));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_custom_isSet) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_default_conversion_value.isSet()) {
        obj.insert(QString("defaultConversionValue"), ::OpenAPI::toJsonValue(m_default_conversion_value));
    }
    if (m_deletable_isSet) {
        obj.insert(QString("deletable"), ::OpenAPI::toJsonValue(m_deletable));
    }
    if (m_event_name_isSet) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1betaConversionEvent::getCountingMethod() const {
    return m_counting_method;
}
void OAIGoogleAnalyticsAdminV1betaConversionEvent::setCountingMethod(const QString &counting_method) {
    m_counting_method = counting_method;
    m_counting_method_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::is_counting_method_Set() const{
    return m_counting_method_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::is_counting_method_Valid() const{
    return m_counting_method_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaConversionEvent::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleAnalyticsAdminV1betaConversionEvent::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::is_create_time_Valid() const{
    return m_create_time_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::isCustom() const {
    return m_custom;
}
void OAIGoogleAnalyticsAdminV1betaConversionEvent::setCustom(const bool &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::is_custom_Valid() const{
    return m_custom_isValid;
}

OAIGoogleAnalyticsAdminV1betaConversionEventDefaultConversionValue OAIGoogleAnalyticsAdminV1betaConversionEvent::getDefaultConversionValue() const {
    return m_default_conversion_value;
}
void OAIGoogleAnalyticsAdminV1betaConversionEvent::setDefaultConversionValue(const OAIGoogleAnalyticsAdminV1betaConversionEventDefaultConversionValue &default_conversion_value) {
    m_default_conversion_value = default_conversion_value;
    m_default_conversion_value_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::is_default_conversion_value_Set() const{
    return m_default_conversion_value_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::is_default_conversion_value_Valid() const{
    return m_default_conversion_value_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::isDeletable() const {
    return m_deletable;
}
void OAIGoogleAnalyticsAdminV1betaConversionEvent::setDeletable(const bool &deletable) {
    m_deletable = deletable;
    m_deletable_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::is_deletable_Set() const{
    return m_deletable_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::is_deletable_Valid() const{
    return m_deletable_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaConversionEvent::getEventName() const {
    return m_event_name;
}
void OAIGoogleAnalyticsAdminV1betaConversionEvent::setEventName(const QString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::is_event_name_Valid() const{
    return m_event_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaConversionEvent::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1betaConversionEvent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counting_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_conversion_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1betaConversionEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
