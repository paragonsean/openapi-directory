/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::~OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse() {}

void OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::initializeModel() {

    m_dimension_headers_isSet = false;
    m_dimension_headers_isValid = false;

    m_metric_headers_isSet = false;
    m_metric_headers_isValid = false;

    m_quota_isSet = false;
    m_quota_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;
}

void OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::fromJsonObject(QJsonObject json) {

    m_dimension_headers_isValid = ::OpenAPI::fromJsonValue(m_dimension_headers, json[QString("dimensionHeaders")]);
    m_dimension_headers_isSet = !json[QString("dimensionHeaders")].isNull() && m_dimension_headers_isValid;

    m_metric_headers_isValid = ::OpenAPI::fromJsonValue(m_metric_headers, json[QString("metricHeaders")]);
    m_metric_headers_isSet = !json[QString("metricHeaders")].isNull() && m_metric_headers_isValid;

    m_quota_isValid = ::OpenAPI::fromJsonValue(m_quota, json[QString("quota")]);
    m_quota_isSet = !json[QString("quota")].isNull() && m_quota_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_headers.size() > 0) {
        obj.insert(QString("dimensionHeaders"), ::OpenAPI::toJsonValue(m_dimension_headers));
    }
    if (m_metric_headers.size() > 0) {
        obj.insert(QString("metricHeaders"), ::OpenAPI::toJsonValue(m_metric_headers));
    }
    if (m_quota.isSet()) {
        obj.insert(QString("quota"), ::OpenAPI::toJsonValue(m_quota));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    if (m_rows.size() > 0) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    return obj;
}

QList<OAIGoogleAnalyticsAdminV1betaAccessDimensionHeader> OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::getDimensionHeaders() const {
    return m_dimension_headers;
}
void OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::setDimensionHeaders(const QList<OAIGoogleAnalyticsAdminV1betaAccessDimensionHeader> &dimension_headers) {
    m_dimension_headers = dimension_headers;
    m_dimension_headers_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::is_dimension_headers_Set() const{
    return m_dimension_headers_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::is_dimension_headers_Valid() const{
    return m_dimension_headers_isValid;
}

QList<OAIGoogleAnalyticsAdminV1betaAccessMetricHeader> OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::getMetricHeaders() const {
    return m_metric_headers;
}
void OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::setMetricHeaders(const QList<OAIGoogleAnalyticsAdminV1betaAccessMetricHeader> &metric_headers) {
    m_metric_headers = metric_headers;
    m_metric_headers_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::is_metric_headers_Set() const{
    return m_metric_headers_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::is_metric_headers_Valid() const{
    return m_metric_headers_isValid;
}

OAIGoogleAnalyticsAdminV1betaAccessQuota OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::getQuota() const {
    return m_quota;
}
void OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::setQuota(const OAIGoogleAnalyticsAdminV1betaAccessQuota &quota) {
    m_quota = quota;
    m_quota_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::is_quota_Set() const{
    return m_quota_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::is_quota_Valid() const{
    return m_quota_isValid;
}

qint32 OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::getRowCount() const {
    return m_row_count;
}
void OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::setRowCount(const qint32 &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::is_row_count_Valid() const{
    return m_row_count_isValid;
}

QList<OAIGoogleAnalyticsAdminV1betaAccessRow> OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::getRows() const {
    return m_rows;
}
void OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::setRows(const QList<OAIGoogleAnalyticsAdminV1betaAccessRow> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::is_rows_Valid() const{
    return m_rows_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1betaRunAccessReportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
