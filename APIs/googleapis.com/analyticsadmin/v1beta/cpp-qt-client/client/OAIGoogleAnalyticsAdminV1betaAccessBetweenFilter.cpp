/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::~OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter() {}

void OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::initializeModel() {

    m_from_value_isSet = false;
    m_from_value_isValid = false;

    m_to_value_isSet = false;
    m_to_value_isValid = false;
}

void OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::fromJsonObject(QJsonObject json) {

    m_from_value_isValid = ::OpenAPI::fromJsonValue(m_from_value, json[QString("fromValue")]);
    m_from_value_isSet = !json[QString("fromValue")].isNull() && m_from_value_isValid;

    m_to_value_isValid = ::OpenAPI::fromJsonValue(m_to_value, json[QString("toValue")]);
    m_to_value_isSet = !json[QString("toValue")].isNull() && m_to_value_isValid;
}

QString OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_from_value.isSet()) {
        obj.insert(QString("fromValue"), ::OpenAPI::toJsonValue(m_from_value));
    }
    if (m_to_value.isSet()) {
        obj.insert(QString("toValue"), ::OpenAPI::toJsonValue(m_to_value));
    }
    return obj;
}

OAIGoogleAnalyticsAdminV1betaNumericValue OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::getFromValue() const {
    return m_from_value;
}
void OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::setFromValue(const OAIGoogleAnalyticsAdminV1betaNumericValue &from_value) {
    m_from_value = from_value;
    m_from_value_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::is_from_value_Set() const{
    return m_from_value_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::is_from_value_Valid() const{
    return m_from_value_isValid;
}

OAIGoogleAnalyticsAdminV1betaNumericValue OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::getToValue() const {
    return m_to_value;
}
void OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::setToValue(const OAIGoogleAnalyticsAdminV1betaNumericValue &to_value) {
    m_to_value = to_value;
    m_to_value_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::is_to_value_Set() const{
    return m_to_value_isSet;
}

bool OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::is_to_value_Valid() const{
    return m_to_value_isValid;
}

bool OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1betaAccessBetweenFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
