/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse::OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse::OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse::~OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse() {}

void OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse::initializeModel() {

    m_opt_out_isSet = false;
    m_opt_out_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse::fromJsonObject(QJsonObject json) {

    m_opt_out_isValid = ::OpenAPI::fromJsonValue(m_opt_out, json[QString("optOut")]);
    m_opt_out_isSet = !json[QString("optOut")].isNull() && m_opt_out_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_opt_out_isSet) {
        obj.insert(QString("optOut"), ::OpenAPI::toJsonValue(m_opt_out));
    }
    return obj;
}

bool OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse::isOptOut() const {
    return m_opt_out;
}
void OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse::setOptOut(const bool &opt_out) {
    m_opt_out = opt_out;
    m_opt_out_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse::is_opt_out_Set() const{
    return m_opt_out_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse::is_opt_out_Valid() const{
    return m_opt_out_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_opt_out_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
