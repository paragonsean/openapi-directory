/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::~OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger() {}

void OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::initializeModel() {

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_log_condition_isSet = false;
    m_log_condition_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::fromJsonObject(QJsonObject json) {

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_log_condition_isValid = ::OpenAPI::fromJsonValue(m_log_condition, json[QString("logCondition")]);
    m_log_condition_isSet = !json[QString("logCondition")].isNull() && m_log_condition_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_event_name_isSet) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_log_condition_isSet) {
        obj.insert(QString("logCondition"), ::OpenAPI::toJsonValue(m_log_condition));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::getEventName() const {
    return m_event_name;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::setEventName(const QString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::is_event_name_Valid() const{
    return m_event_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::getLogCondition() const {
    return m_log_condition;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::setLogCondition(const QString &log_condition) {
    m_log_condition = log_condition;
    m_log_condition_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::is_log_condition_Set() const{
    return m_log_condition_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::is_log_condition_Valid() const{
    return m_log_condition_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_condition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
