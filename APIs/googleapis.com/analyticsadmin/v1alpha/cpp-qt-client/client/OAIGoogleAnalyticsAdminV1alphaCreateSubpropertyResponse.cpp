/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::~OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse() {}

void OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::initializeModel() {

    m_subproperty_isSet = false;
    m_subproperty_isValid = false;

    m_subproperty_event_filter_isSet = false;
    m_subproperty_event_filter_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::fromJsonObject(QJsonObject json) {

    m_subproperty_isValid = ::OpenAPI::fromJsonValue(m_subproperty, json[QString("subproperty")]);
    m_subproperty_isSet = !json[QString("subproperty")].isNull() && m_subproperty_isValid;

    m_subproperty_event_filter_isValid = ::OpenAPI::fromJsonValue(m_subproperty_event_filter, json[QString("subpropertyEventFilter")]);
    m_subproperty_event_filter_isSet = !json[QString("subpropertyEventFilter")].isNull() && m_subproperty_event_filter_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_subproperty.isSet()) {
        obj.insert(QString("subproperty"), ::OpenAPI::toJsonValue(m_subproperty));
    }
    if (m_subproperty_event_filter.isSet()) {
        obj.insert(QString("subpropertyEventFilter"), ::OpenAPI::toJsonValue(m_subproperty_event_filter));
    }
    return obj;
}

OAIGoogleAnalyticsAdminV1alphaProperty OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::getSubproperty() const {
    return m_subproperty;
}
void OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::setSubproperty(const OAIGoogleAnalyticsAdminV1alphaProperty &subproperty) {
    m_subproperty = subproperty;
    m_subproperty_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::is_subproperty_Set() const{
    return m_subproperty_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::is_subproperty_Valid() const{
    return m_subproperty_isValid;
}

OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::getSubpropertyEventFilter() const {
    return m_subproperty_event_filter;
}
void OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::setSubpropertyEventFilter(const OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter &subproperty_event_filter) {
    m_subproperty_event_filter = subproperty_event_filter;
    m_subproperty_event_filter_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::is_subproperty_event_filter_Set() const{
    return m_subproperty_event_filter_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::is_subproperty_event_filter_Valid() const{
    return m_subproperty_event_filter_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subproperty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subproperty_event_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
