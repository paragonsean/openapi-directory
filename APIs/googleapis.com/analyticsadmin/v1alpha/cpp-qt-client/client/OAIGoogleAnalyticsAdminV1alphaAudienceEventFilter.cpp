/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::~OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter() {}

void OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::initializeModel() {

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_event_parameter_filter_expression_isSet = false;
    m_event_parameter_filter_expression_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::fromJsonObject(QJsonObject json) {

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_event_parameter_filter_expression_isValid = ::OpenAPI::fromJsonValue(m_event_parameter_filter_expression, json[QString("eventParameterFilterExpression")]);
    m_event_parameter_filter_expression_isSet = !json[QString("eventParameterFilterExpression")].isNull() && m_event_parameter_filter_expression_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_event_name_isSet) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_event_parameter_filter_expression.isSet()) {
        obj.insert(QString("eventParameterFilterExpression"), ::OpenAPI::toJsonValue(m_event_parameter_filter_expression));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::getEventName() const {
    return m_event_name;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::setEventName(const QString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::is_event_name_Valid() const{
    return m_event_name_isValid;
}

OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::getEventParameterFilterExpression() const {
    return m_event_parameter_filter_expression;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::setEventParameterFilterExpression(const OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression &event_parameter_filter_expression) {
    m_event_parameter_filter_expression = event_parameter_filter_expression;
    m_event_parameter_filter_expression_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::is_event_parameter_filter_expression_Set() const{
    return m_event_parameter_filter_expression_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::is_event_parameter_filter_expression_Valid() const{
    return m_event_parameter_filter_expression_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_parameter_filter_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
