/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaBigQueryLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaBigQueryLink::OAIGoogleAnalyticsAdminV1alphaBigQueryLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaBigQueryLink::OAIGoogleAnalyticsAdminV1alphaBigQueryLink() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaBigQueryLink::~OAIGoogleAnalyticsAdminV1alphaBigQueryLink() {}

void OAIGoogleAnalyticsAdminV1alphaBigQueryLink::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_daily_export_enabled_isSet = false;
    m_daily_export_enabled_isValid = false;

    m_excluded_events_isSet = false;
    m_excluded_events_isValid = false;

    m_export_streams_isSet = false;
    m_export_streams_isValid = false;

    m_fresh_daily_export_enabled_isSet = false;
    m_fresh_daily_export_enabled_isValid = false;

    m_include_advertising_id_isSet = false;
    m_include_advertising_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_streaming_export_enabled_isSet = false;
    m_streaming_export_enabled_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaBigQueryLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaBigQueryLink::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_daily_export_enabled_isValid = ::OpenAPI::fromJsonValue(m_daily_export_enabled, json[QString("dailyExportEnabled")]);
    m_daily_export_enabled_isSet = !json[QString("dailyExportEnabled")].isNull() && m_daily_export_enabled_isValid;

    m_excluded_events_isValid = ::OpenAPI::fromJsonValue(m_excluded_events, json[QString("excludedEvents")]);
    m_excluded_events_isSet = !json[QString("excludedEvents")].isNull() && m_excluded_events_isValid;

    m_export_streams_isValid = ::OpenAPI::fromJsonValue(m_export_streams, json[QString("exportStreams")]);
    m_export_streams_isSet = !json[QString("exportStreams")].isNull() && m_export_streams_isValid;

    m_fresh_daily_export_enabled_isValid = ::OpenAPI::fromJsonValue(m_fresh_daily_export_enabled, json[QString("freshDailyExportEnabled")]);
    m_fresh_daily_export_enabled_isSet = !json[QString("freshDailyExportEnabled")].isNull() && m_fresh_daily_export_enabled_isValid;

    m_include_advertising_id_isValid = ::OpenAPI::fromJsonValue(m_include_advertising_id, json[QString("includeAdvertisingId")]);
    m_include_advertising_id_isSet = !json[QString("includeAdvertisingId")].isNull() && m_include_advertising_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_streaming_export_enabled_isValid = ::OpenAPI::fromJsonValue(m_streaming_export_enabled, json[QString("streamingExportEnabled")]);
    m_streaming_export_enabled_isSet = !json[QString("streamingExportEnabled")].isNull() && m_streaming_export_enabled_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaBigQueryLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaBigQueryLink::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_daily_export_enabled_isSet) {
        obj.insert(QString("dailyExportEnabled"), ::OpenAPI::toJsonValue(m_daily_export_enabled));
    }
    if (m_excluded_events.size() > 0) {
        obj.insert(QString("excludedEvents"), ::OpenAPI::toJsonValue(m_excluded_events));
    }
    if (m_export_streams.size() > 0) {
        obj.insert(QString("exportStreams"), ::OpenAPI::toJsonValue(m_export_streams));
    }
    if (m_fresh_daily_export_enabled_isSet) {
        obj.insert(QString("freshDailyExportEnabled"), ::OpenAPI::toJsonValue(m_fresh_daily_export_enabled));
    }
    if (m_include_advertising_id_isSet) {
        obj.insert(QString("includeAdvertisingId"), ::OpenAPI::toJsonValue(m_include_advertising_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_streaming_export_enabled_isSet) {
        obj.insert(QString("streamingExportEnabled"), ::OpenAPI::toJsonValue(m_streaming_export_enabled));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaBigQueryLink::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleAnalyticsAdminV1alphaBigQueryLink::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_create_time_Valid() const{
    return m_create_time_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::isDailyExportEnabled() const {
    return m_daily_export_enabled;
}
void OAIGoogleAnalyticsAdminV1alphaBigQueryLink::setDailyExportEnabled(const bool &daily_export_enabled) {
    m_daily_export_enabled = daily_export_enabled;
    m_daily_export_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_daily_export_enabled_Set() const{
    return m_daily_export_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_daily_export_enabled_Valid() const{
    return m_daily_export_enabled_isValid;
}

QList<QString> OAIGoogleAnalyticsAdminV1alphaBigQueryLink::getExcludedEvents() const {
    return m_excluded_events;
}
void OAIGoogleAnalyticsAdminV1alphaBigQueryLink::setExcludedEvents(const QList<QString> &excluded_events) {
    m_excluded_events = excluded_events;
    m_excluded_events_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_excluded_events_Set() const{
    return m_excluded_events_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_excluded_events_Valid() const{
    return m_excluded_events_isValid;
}

QList<QString> OAIGoogleAnalyticsAdminV1alphaBigQueryLink::getExportStreams() const {
    return m_export_streams;
}
void OAIGoogleAnalyticsAdminV1alphaBigQueryLink::setExportStreams(const QList<QString> &export_streams) {
    m_export_streams = export_streams;
    m_export_streams_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_export_streams_Set() const{
    return m_export_streams_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_export_streams_Valid() const{
    return m_export_streams_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::isFreshDailyExportEnabled() const {
    return m_fresh_daily_export_enabled;
}
void OAIGoogleAnalyticsAdminV1alphaBigQueryLink::setFreshDailyExportEnabled(const bool &fresh_daily_export_enabled) {
    m_fresh_daily_export_enabled = fresh_daily_export_enabled;
    m_fresh_daily_export_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_fresh_daily_export_enabled_Set() const{
    return m_fresh_daily_export_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_fresh_daily_export_enabled_Valid() const{
    return m_fresh_daily_export_enabled_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::isIncludeAdvertisingId() const {
    return m_include_advertising_id;
}
void OAIGoogleAnalyticsAdminV1alphaBigQueryLink::setIncludeAdvertisingId(const bool &include_advertising_id) {
    m_include_advertising_id = include_advertising_id;
    m_include_advertising_id_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_include_advertising_id_Set() const{
    return m_include_advertising_id_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_include_advertising_id_Valid() const{
    return m_include_advertising_id_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaBigQueryLink::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1alphaBigQueryLink::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaBigQueryLink::getProject() const {
    return m_project;
}
void OAIGoogleAnalyticsAdminV1alphaBigQueryLink::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_project_Set() const{
    return m_project_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_project_Valid() const{
    return m_project_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::isStreamingExportEnabled() const {
    return m_streaming_export_enabled;
}
void OAIGoogleAnalyticsAdminV1alphaBigQueryLink::setStreamingExportEnabled(const bool &streaming_export_enabled) {
    m_streaming_export_enabled = streaming_export_enabled;
    m_streaming_export_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_streaming_export_enabled_Set() const{
    return m_streaming_export_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::is_streaming_export_enabled_Valid() const{
    return m_streaming_export_enabled_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_export_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_streams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fresh_daily_export_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_advertising_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_export_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaBigQueryLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
