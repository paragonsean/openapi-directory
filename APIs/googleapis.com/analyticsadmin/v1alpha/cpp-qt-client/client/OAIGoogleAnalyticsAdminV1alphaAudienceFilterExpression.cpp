/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::~OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression() {}

void OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::initializeModel() {

    m_and_group_isSet = false;
    m_and_group_isValid = false;

    m_dimension_or_metric_filter_isSet = false;
    m_dimension_or_metric_filter_isValid = false;

    m_event_filter_isSet = false;
    m_event_filter_isValid = false;

    m_not_expression_isSet = false;
    m_not_expression_isValid = false;

    m_or_group_isSet = false;
    m_or_group_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::fromJsonObject(QJsonObject json) {

    m_and_group_isValid = ::OpenAPI::fromJsonValue(m_and_group, json[QString("andGroup")]);
    m_and_group_isSet = !json[QString("andGroup")].isNull() && m_and_group_isValid;

    m_dimension_or_metric_filter_isValid = ::OpenAPI::fromJsonValue(m_dimension_or_metric_filter, json[QString("dimensionOrMetricFilter")]);
    m_dimension_or_metric_filter_isSet = !json[QString("dimensionOrMetricFilter")].isNull() && m_dimension_or_metric_filter_isValid;

    m_event_filter_isValid = ::OpenAPI::fromJsonValue(m_event_filter, json[QString("eventFilter")]);
    m_event_filter_isSet = !json[QString("eventFilter")].isNull() && m_event_filter_isValid;

    m_not_expression_isValid = ::OpenAPI::fromJsonValue(m_not_expression, json[QString("notExpression")]);
    m_not_expression_isSet = !json[QString("notExpression")].isNull() && m_not_expression_isValid;

    m_or_group_isValid = ::OpenAPI::fromJsonValue(m_or_group, json[QString("orGroup")]);
    m_or_group_isSet = !json[QString("orGroup")].isNull() && m_or_group_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_and_group.isSet()) {
        obj.insert(QString("andGroup"), ::OpenAPI::toJsonValue(m_and_group));
    }
    if (m_dimension_or_metric_filter.isSet()) {
        obj.insert(QString("dimensionOrMetricFilter"), ::OpenAPI::toJsonValue(m_dimension_or_metric_filter));
    }
    if (m_event_filter.isSet()) {
        obj.insert(QString("eventFilter"), ::OpenAPI::toJsonValue(m_event_filter));
    }
    if (m_not_expression.isSet()) {
        obj.insert(QString("notExpression"), ::OpenAPI::toJsonValue(m_not_expression));
    }
    if (m_or_group.isSet()) {
        obj.insert(QString("orGroup"), ::OpenAPI::toJsonValue(m_or_group));
    }
    return obj;
}

OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpressionList OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::getAndGroup() const {
    return m_and_group;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::setAndGroup(const OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpressionList &and_group) {
    m_and_group = and_group;
    m_and_group_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::is_and_group_Set() const{
    return m_and_group_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::is_and_group_Valid() const{
    return m_and_group_isValid;
}

OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::getDimensionOrMetricFilter() const {
    return m_dimension_or_metric_filter;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::setDimensionOrMetricFilter(const OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter &dimension_or_metric_filter) {
    m_dimension_or_metric_filter = dimension_or_metric_filter;
    m_dimension_or_metric_filter_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::is_dimension_or_metric_filter_Set() const{
    return m_dimension_or_metric_filter_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::is_dimension_or_metric_filter_Valid() const{
    return m_dimension_or_metric_filter_isValid;
}

OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::getEventFilter() const {
    return m_event_filter;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::setEventFilter(const OAIGoogleAnalyticsAdminV1alphaAudienceEventFilter &event_filter) {
    m_event_filter = event_filter;
    m_event_filter_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::is_event_filter_Set() const{
    return m_event_filter_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::is_event_filter_Valid() const{
    return m_event_filter_isValid;
}

OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::getNotExpression() const {
    return m_not_expression;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::setNotExpression(const OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression &not_expression) {
    m_not_expression = not_expression;
    m_not_expression_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::is_not_expression_Set() const{
    return m_not_expression_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::is_not_expression_Valid() const{
    return m_not_expression_isValid;
}

OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpressionList OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::getOrGroup() const {
    return m_or_group;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::setOrGroup(const OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpressionList &or_group) {
    m_or_group = or_group;
    m_or_group_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::is_or_group_Set() const{
    return m_or_group_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::is_or_group_Valid() const{
    return m_or_group_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_and_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_or_metric_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_or_group.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
