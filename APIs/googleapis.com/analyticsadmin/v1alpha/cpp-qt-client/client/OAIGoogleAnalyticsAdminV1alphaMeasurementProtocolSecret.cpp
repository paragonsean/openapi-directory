/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::~OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret() {}

void OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_secret_value_isSet = false;
    m_secret_value_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_secret_value_isValid = ::OpenAPI::fromJsonValue(m_secret_value, json[QString("secretValue")]);
    m_secret_value_isSet = !json[QString("secretValue")].isNull() && m_secret_value_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_secret_value_isSet) {
        obj.insert(QString("secretValue"), ::OpenAPI::toJsonValue(m_secret_value));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::getSecretValue() const {
    return m_secret_value;
}
void OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::setSecretValue(const QString &secret_value) {
    m_secret_value = secret_value;
    m_secret_value_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::is_secret_value_Set() const{
    return m_secret_value_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::is_secret_value_Valid() const{
    return m_secret_value_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
