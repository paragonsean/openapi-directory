/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::~OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause() {}

void OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::initializeModel() {

    m_clause_type_isSet = false;
    m_clause_type_isValid = false;

    m_sequence_filter_isSet = false;
    m_sequence_filter_isValid = false;

    m_simple_filter_isSet = false;
    m_simple_filter_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::fromJsonObject(QJsonObject json) {

    m_clause_type_isValid = ::OpenAPI::fromJsonValue(m_clause_type, json[QString("clauseType")]);
    m_clause_type_isSet = !json[QString("clauseType")].isNull() && m_clause_type_isValid;

    m_sequence_filter_isValid = ::OpenAPI::fromJsonValue(m_sequence_filter, json[QString("sequenceFilter")]);
    m_sequence_filter_isSet = !json[QString("sequenceFilter")].isNull() && m_sequence_filter_isValid;

    m_simple_filter_isValid = ::OpenAPI::fromJsonValue(m_simple_filter, json[QString("simpleFilter")]);
    m_simple_filter_isSet = !json[QString("simpleFilter")].isNull() && m_simple_filter_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::asJsonObject() const {
    QJsonObject obj;
    if (m_clause_type_isSet) {
        obj.insert(QString("clauseType"), ::OpenAPI::toJsonValue(m_clause_type));
    }
    if (m_sequence_filter.isSet()) {
        obj.insert(QString("sequenceFilter"), ::OpenAPI::toJsonValue(m_sequence_filter));
    }
    if (m_simple_filter.isSet()) {
        obj.insert(QString("simpleFilter"), ::OpenAPI::toJsonValue(m_simple_filter));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::getClauseType() const {
    return m_clause_type;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::setClauseType(const QString &clause_type) {
    m_clause_type = clause_type;
    m_clause_type_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::is_clause_type_Set() const{
    return m_clause_type_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::is_clause_type_Valid() const{
    return m_clause_type_isValid;
}

OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilter OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::getSequenceFilter() const {
    return m_sequence_filter;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::setSequenceFilter(const OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilter &sequence_filter) {
    m_sequence_filter = sequence_filter;
    m_sequence_filter_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::is_sequence_filter_Set() const{
    return m_sequence_filter_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::is_sequence_filter_Valid() const{
    return m_sequence_filter_isValid;
}

OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::getSimpleFilter() const {
    return m_simple_filter;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::setSimpleFilter(const OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter &simple_filter) {
    m_simple_filter = simple_filter;
    m_simple_filter_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::is_simple_filter_Set() const{
    return m_simple_filter_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::is_simple_filter_Valid() const{
    return m_simple_filter_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clause_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
