/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaSearchAds360Link.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::OAIGoogleAnalyticsAdminV1alphaSearchAds360Link(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::OAIGoogleAnalyticsAdminV1alphaSearchAds360Link() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::~OAIGoogleAnalyticsAdminV1alphaSearchAds360Link() {}

void OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::initializeModel() {

    m_ads_personalization_enabled_isSet = false;
    m_ads_personalization_enabled_isValid = false;

    m_advertiser_display_name_isSet = false;
    m_advertiser_display_name_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_campaign_data_sharing_enabled_isSet = false;
    m_campaign_data_sharing_enabled_isValid = false;

    m_cost_data_sharing_enabled_isSet = false;
    m_cost_data_sharing_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_site_stats_sharing_enabled_isSet = false;
    m_site_stats_sharing_enabled_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::fromJsonObject(QJsonObject json) {

    m_ads_personalization_enabled_isValid = ::OpenAPI::fromJsonValue(m_ads_personalization_enabled, json[QString("adsPersonalizationEnabled")]);
    m_ads_personalization_enabled_isSet = !json[QString("adsPersonalizationEnabled")].isNull() && m_ads_personalization_enabled_isValid;

    m_advertiser_display_name_isValid = ::OpenAPI::fromJsonValue(m_advertiser_display_name, json[QString("advertiserDisplayName")]);
    m_advertiser_display_name_isSet = !json[QString("advertiserDisplayName")].isNull() && m_advertiser_display_name_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_campaign_data_sharing_enabled_isValid = ::OpenAPI::fromJsonValue(m_campaign_data_sharing_enabled, json[QString("campaignDataSharingEnabled")]);
    m_campaign_data_sharing_enabled_isSet = !json[QString("campaignDataSharingEnabled")].isNull() && m_campaign_data_sharing_enabled_isValid;

    m_cost_data_sharing_enabled_isValid = ::OpenAPI::fromJsonValue(m_cost_data_sharing_enabled, json[QString("costDataSharingEnabled")]);
    m_cost_data_sharing_enabled_isSet = !json[QString("costDataSharingEnabled")].isNull() && m_cost_data_sharing_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_site_stats_sharing_enabled_isValid = ::OpenAPI::fromJsonValue(m_site_stats_sharing_enabled, json[QString("siteStatsSharingEnabled")]);
    m_site_stats_sharing_enabled_isSet = !json[QString("siteStatsSharingEnabled")].isNull() && m_site_stats_sharing_enabled_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::asJsonObject() const {
    QJsonObject obj;
    if (m_ads_personalization_enabled_isSet) {
        obj.insert(QString("adsPersonalizationEnabled"), ::OpenAPI::toJsonValue(m_ads_personalization_enabled));
    }
    if (m_advertiser_display_name_isSet) {
        obj.insert(QString("advertiserDisplayName"), ::OpenAPI::toJsonValue(m_advertiser_display_name));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_campaign_data_sharing_enabled_isSet) {
        obj.insert(QString("campaignDataSharingEnabled"), ::OpenAPI::toJsonValue(m_campaign_data_sharing_enabled));
    }
    if (m_cost_data_sharing_enabled_isSet) {
        obj.insert(QString("costDataSharingEnabled"), ::OpenAPI::toJsonValue(m_cost_data_sharing_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_site_stats_sharing_enabled_isSet) {
        obj.insert(QString("siteStatsSharingEnabled"), ::OpenAPI::toJsonValue(m_site_stats_sharing_enabled));
    }
    return obj;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::isAdsPersonalizationEnabled() const {
    return m_ads_personalization_enabled;
}
void OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::setAdsPersonalizationEnabled(const bool &ads_personalization_enabled) {
    m_ads_personalization_enabled = ads_personalization_enabled;
    m_ads_personalization_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::is_ads_personalization_enabled_Set() const{
    return m_ads_personalization_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::is_ads_personalization_enabled_Valid() const{
    return m_ads_personalization_enabled_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::getAdvertiserDisplayName() const {
    return m_advertiser_display_name;
}
void OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::setAdvertiserDisplayName(const QString &advertiser_display_name) {
    m_advertiser_display_name = advertiser_display_name;
    m_advertiser_display_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::is_advertiser_display_name_Set() const{
    return m_advertiser_display_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::is_advertiser_display_name_Valid() const{
    return m_advertiser_display_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::isCampaignDataSharingEnabled() const {
    return m_campaign_data_sharing_enabled;
}
void OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::setCampaignDataSharingEnabled(const bool &campaign_data_sharing_enabled) {
    m_campaign_data_sharing_enabled = campaign_data_sharing_enabled;
    m_campaign_data_sharing_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::is_campaign_data_sharing_enabled_Set() const{
    return m_campaign_data_sharing_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::is_campaign_data_sharing_enabled_Valid() const{
    return m_campaign_data_sharing_enabled_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::isCostDataSharingEnabled() const {
    return m_cost_data_sharing_enabled;
}
void OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::setCostDataSharingEnabled(const bool &cost_data_sharing_enabled) {
    m_cost_data_sharing_enabled = cost_data_sharing_enabled;
    m_cost_data_sharing_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::is_cost_data_sharing_enabled_Set() const{
    return m_cost_data_sharing_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::is_cost_data_sharing_enabled_Valid() const{
    return m_cost_data_sharing_enabled_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::isSiteStatsSharingEnabled() const {
    return m_site_stats_sharing_enabled;
}
void OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::setSiteStatsSharingEnabled(const bool &site_stats_sharing_enabled) {
    m_site_stats_sharing_enabled = site_stats_sharing_enabled;
    m_site_stats_sharing_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::is_site_stats_sharing_enabled_Set() const{
    return m_site_stats_sharing_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::is_site_stats_sharing_enabled_Valid() const{
    return m_site_stats_sharing_enabled_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ads_personalization_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_data_sharing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_data_sharing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_stats_sharing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchAds360Link::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
