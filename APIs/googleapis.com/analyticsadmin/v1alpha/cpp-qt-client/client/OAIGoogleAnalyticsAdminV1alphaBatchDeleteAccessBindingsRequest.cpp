/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest::OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest::OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest::~OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest() {}

void OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest::initializeModel() {

    m_requests_isSet = false;
    m_requests_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest::fromJsonObject(QJsonObject json) {

    m_requests_isValid = ::OpenAPI::fromJsonValue(m_requests, json[QString("requests")]);
    m_requests_isSet = !json[QString("requests")].isNull() && m_requests_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_requests.size() > 0) {
        obj.insert(QString("requests"), ::OpenAPI::toJsonValue(m_requests));
    }
    return obj;
}

QList<OAIGoogleAnalyticsAdminV1alphaDeleteAccessBindingRequest> OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest::getRequests() const {
    return m_requests;
}
void OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest::setRequests(const QList<OAIGoogleAnalyticsAdminV1alphaDeleteAccessBindingRequest> &requests) {
    m_requests = requests;
    m_requests_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest::is_requests_Set() const{
    return m_requests_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest::is_requests_Valid() const{
    return m_requests_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
