/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::~OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter() {}

void OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::initializeModel() {

    m_case_sensitive_isSet = false;
    m_case_sensitive_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::fromJsonObject(QJsonObject json) {

    m_case_sensitive_isValid = ::OpenAPI::fromJsonValue(m_case_sensitive, json[QString("caseSensitive")]);
    m_case_sensitive_isSet = !json[QString("caseSensitive")].isNull() && m_case_sensitive_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_case_sensitive_isSet) {
        obj.insert(QString("caseSensitive"), ::OpenAPI::toJsonValue(m_case_sensitive));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::isCaseSensitive() const {
    return m_case_sensitive;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::setCaseSensitive(const bool &case_sensitive) {
    m_case_sensitive = case_sensitive;
    m_case_sensitive_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::is_case_sensitive_Set() const{
    return m_case_sensitive_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::is_case_sensitive_Valid() const{
    return m_case_sensitive_isValid;
}

QList<QString> OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::getValues() const {
    return m_values;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::is_values_Set() const{
    return m_values_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_sensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
