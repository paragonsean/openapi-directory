/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaEventMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaEventMapping::OAIGoogleAnalyticsAdminV1alphaEventMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaEventMapping::OAIGoogleAnalyticsAdminV1alphaEventMapping() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaEventMapping::~OAIGoogleAnalyticsAdminV1alphaEventMapping() {}

void OAIGoogleAnalyticsAdminV1alphaEventMapping::initializeModel() {

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_max_event_count_isSet = false;
    m_max_event_count_isValid = false;

    m_max_event_value_isSet = false;
    m_max_event_value_isValid = false;

    m_min_event_count_isSet = false;
    m_min_event_count_isValid = false;

    m_min_event_value_isSet = false;
    m_min_event_value_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaEventMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaEventMapping::fromJsonObject(QJsonObject json) {

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_max_event_count_isValid = ::OpenAPI::fromJsonValue(m_max_event_count, json[QString("maxEventCount")]);
    m_max_event_count_isSet = !json[QString("maxEventCount")].isNull() && m_max_event_count_isValid;

    m_max_event_value_isValid = ::OpenAPI::fromJsonValue(m_max_event_value, json[QString("maxEventValue")]);
    m_max_event_value_isSet = !json[QString("maxEventValue")].isNull() && m_max_event_value_isValid;

    m_min_event_count_isValid = ::OpenAPI::fromJsonValue(m_min_event_count, json[QString("minEventCount")]);
    m_min_event_count_isSet = !json[QString("minEventCount")].isNull() && m_min_event_count_isValid;

    m_min_event_value_isValid = ::OpenAPI::fromJsonValue(m_min_event_value, json[QString("minEventValue")]);
    m_min_event_value_isSet = !json[QString("minEventValue")].isNull() && m_min_event_value_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaEventMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaEventMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_event_name_isSet) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_max_event_count_isSet) {
        obj.insert(QString("maxEventCount"), ::OpenAPI::toJsonValue(m_max_event_count));
    }
    if (m_max_event_value_isSet) {
        obj.insert(QString("maxEventValue"), ::OpenAPI::toJsonValue(m_max_event_value));
    }
    if (m_min_event_count_isSet) {
        obj.insert(QString("minEventCount"), ::OpenAPI::toJsonValue(m_min_event_count));
    }
    if (m_min_event_value_isSet) {
        obj.insert(QString("minEventValue"), ::OpenAPI::toJsonValue(m_min_event_value));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaEventMapping::getEventName() const {
    return m_event_name;
}
void OAIGoogleAnalyticsAdminV1alphaEventMapping::setEventName(const QString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaEventMapping::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaEventMapping::is_event_name_Valid() const{
    return m_event_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaEventMapping::getMaxEventCount() const {
    return m_max_event_count;
}
void OAIGoogleAnalyticsAdminV1alphaEventMapping::setMaxEventCount(const QString &max_event_count) {
    m_max_event_count = max_event_count;
    m_max_event_count_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaEventMapping::is_max_event_count_Set() const{
    return m_max_event_count_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaEventMapping::is_max_event_count_Valid() const{
    return m_max_event_count_isValid;
}

double OAIGoogleAnalyticsAdminV1alphaEventMapping::getMaxEventValue() const {
    return m_max_event_value;
}
void OAIGoogleAnalyticsAdminV1alphaEventMapping::setMaxEventValue(const double &max_event_value) {
    m_max_event_value = max_event_value;
    m_max_event_value_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaEventMapping::is_max_event_value_Set() const{
    return m_max_event_value_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaEventMapping::is_max_event_value_Valid() const{
    return m_max_event_value_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaEventMapping::getMinEventCount() const {
    return m_min_event_count;
}
void OAIGoogleAnalyticsAdminV1alphaEventMapping::setMinEventCount(const QString &min_event_count) {
    m_min_event_count = min_event_count;
    m_min_event_count_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaEventMapping::is_min_event_count_Set() const{
    return m_min_event_count_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaEventMapping::is_min_event_count_Valid() const{
    return m_min_event_count_isValid;
}

double OAIGoogleAnalyticsAdminV1alphaEventMapping::getMinEventValue() const {
    return m_min_event_value;
}
void OAIGoogleAnalyticsAdminV1alphaEventMapping::setMinEventValue(const double &min_event_value) {
    m_min_event_value = min_event_value;
    m_min_event_value_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaEventMapping::is_min_event_value_Set() const{
    return m_min_event_value_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaEventMapping::is_min_event_value_Valid() const{
    return m_min_event_value_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaEventMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_event_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_event_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_event_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_event_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaEventMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
