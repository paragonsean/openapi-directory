/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::~OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag() {}

void OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_snippet_isSet = false;
    m_snippet_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_snippet_isValid = ::OpenAPI::fromJsonValue(m_snippet, json[QString("snippet")]);
    m_snippet_isSet = !json[QString("snippet")].isNull() && m_snippet_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_snippet_isSet) {
        obj.insert(QString("snippet"), ::OpenAPI::toJsonValue(m_snippet));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::getSnippet() const {
    return m_snippet;
}
void OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::setSnippet(const QString &snippet) {
    m_snippet = snippet;
    m_snippet_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::is_snippet_Set() const{
    return m_snippet_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::is_snippet_Valid() const{
    return m_snippet_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaGlobalSiteTag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
