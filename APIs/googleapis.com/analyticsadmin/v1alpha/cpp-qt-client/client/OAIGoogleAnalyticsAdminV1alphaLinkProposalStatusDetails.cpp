/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::~OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails() {}

void OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::initializeModel() {

    m_link_proposal_initiating_product_isSet = false;
    m_link_proposal_initiating_product_isValid = false;

    m_link_proposal_state_isSet = false;
    m_link_proposal_state_isValid = false;

    m_requestor_email_isSet = false;
    m_requestor_email_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::fromJsonObject(QJsonObject json) {

    m_link_proposal_initiating_product_isValid = ::OpenAPI::fromJsonValue(m_link_proposal_initiating_product, json[QString("linkProposalInitiatingProduct")]);
    m_link_proposal_initiating_product_isSet = !json[QString("linkProposalInitiatingProduct")].isNull() && m_link_proposal_initiating_product_isValid;

    m_link_proposal_state_isValid = ::OpenAPI::fromJsonValue(m_link_proposal_state, json[QString("linkProposalState")]);
    m_link_proposal_state_isSet = !json[QString("linkProposalState")].isNull() && m_link_proposal_state_isValid;

    m_requestor_email_isValid = ::OpenAPI::fromJsonValue(m_requestor_email, json[QString("requestorEmail")]);
    m_requestor_email_isSet = !json[QString("requestorEmail")].isNull() && m_requestor_email_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_link_proposal_initiating_product_isSet) {
        obj.insert(QString("linkProposalInitiatingProduct"), ::OpenAPI::toJsonValue(m_link_proposal_initiating_product));
    }
    if (m_link_proposal_state_isSet) {
        obj.insert(QString("linkProposalState"), ::OpenAPI::toJsonValue(m_link_proposal_state));
    }
    if (m_requestor_email_isSet) {
        obj.insert(QString("requestorEmail"), ::OpenAPI::toJsonValue(m_requestor_email));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::getLinkProposalInitiatingProduct() const {
    return m_link_proposal_initiating_product;
}
void OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::setLinkProposalInitiatingProduct(const QString &link_proposal_initiating_product) {
    m_link_proposal_initiating_product = link_proposal_initiating_product;
    m_link_proposal_initiating_product_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::is_link_proposal_initiating_product_Set() const{
    return m_link_proposal_initiating_product_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::is_link_proposal_initiating_product_Valid() const{
    return m_link_proposal_initiating_product_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::getLinkProposalState() const {
    return m_link_proposal_state;
}
void OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::setLinkProposalState(const QString &link_proposal_state) {
    m_link_proposal_state = link_proposal_state;
    m_link_proposal_state_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::is_link_proposal_state_Set() const{
    return m_link_proposal_state_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::is_link_proposal_state_Valid() const{
    return m_link_proposal_state_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::getRequestorEmail() const {
    return m_requestor_email;
}
void OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::setRequestorEmail(const QString &requestor_email) {
    m_requestor_email = requestor_email;
    m_requestor_email_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::is_requestor_email_Set() const{
    return m_requestor_email_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::is_requestor_email_Valid() const{
    return m_requestor_email_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_link_proposal_initiating_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_proposal_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requestor_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaLinkProposalStatusDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
