/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest::OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest::OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest::~OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest() {}

void OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest::initializeModel() {

    m_requests_isSet = false;
    m_requests_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest::fromJsonObject(QJsonObject json) {

    m_requests_isValid = ::OpenAPI::fromJsonValue(m_requests, json[QString("requests")]);
    m_requests_isSet = !json[QString("requests")].isNull() && m_requests_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_requests.size() > 0) {
        obj.insert(QString("requests"), ::OpenAPI::toJsonValue(m_requests));
    }
    return obj;
}

QList<OAIGoogleAnalyticsAdminV1alphaUpdateAccessBindingRequest> OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest::getRequests() const {
    return m_requests;
}
void OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest::setRequests(const QList<OAIGoogleAnalyticsAdminV1alphaUpdateAccessBindingRequest> &requests) {
    m_requests = requests;
    m_requests_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest::is_requests_Set() const{
    return m_requests_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest::is_requests_Valid() const{
    return m_requests_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
