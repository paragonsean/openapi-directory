/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::~OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse() {}

void OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::initializeModel() {

    m_event_create_rules_isSet = false;
    m_event_create_rules_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::fromJsonObject(QJsonObject json) {

    m_event_create_rules_isValid = ::OpenAPI::fromJsonValue(m_event_create_rules, json[QString("eventCreateRules")]);
    m_event_create_rules_isSet = !json[QString("eventCreateRules")].isNull() && m_event_create_rules_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_event_create_rules.size() > 0) {
        obj.insert(QString("eventCreateRules"), ::OpenAPI::toJsonValue(m_event_create_rules));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIGoogleAnalyticsAdminV1alphaEventCreateRule> OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::getEventCreateRules() const {
    return m_event_create_rules;
}
void OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::setEventCreateRules(const QList<OAIGoogleAnalyticsAdminV1alphaEventCreateRule> &event_create_rules) {
    m_event_create_rules = event_create_rules;
    m_event_create_rules_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::is_event_create_rules_Set() const{
    return m_event_create_rules_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::is_event_create_rules_Valid() const{
    return m_event_create_rules_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_create_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
