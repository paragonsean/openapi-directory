/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.h
 *
 * A clause for defining a filter. A filter may be inclusive (events satisfying the filter clause are included in the subproperty&#39;s data) or exclusive (events satisfying the filter clause are excluded from the subproperty&#39;s data).
 */

#ifndef OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause_H
#define OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause_H

#include <QJsonObject>

#include "OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression;

class OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause : public OAIObject {
public:
    OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause();
    OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause(QString json);
    ~OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFilterClauseType() const;
    void setFilterClauseType(const QString &filter_clause_type);
    bool is_filter_clause_type_Set() const;
    bool is_filter_clause_type_Valid() const;

    OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression getFilterExpression() const;
    void setFilterExpression(const OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression &filter_expression);
    bool is_filter_expression_Set() const;
    bool is_filter_expression_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_filter_clause_type;
    bool m_filter_clause_type_isSet;
    bool m_filter_clause_type_isValid;

    OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression m_filter_expression;
    bool m_filter_expression_isSet;
    bool m_filter_expression_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause)

#endif // OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause_H
