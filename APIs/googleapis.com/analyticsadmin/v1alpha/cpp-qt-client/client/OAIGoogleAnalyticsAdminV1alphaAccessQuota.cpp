/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaAccessQuota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaAccessQuota::OAIGoogleAnalyticsAdminV1alphaAccessQuota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaAccessQuota::OAIGoogleAnalyticsAdminV1alphaAccessQuota() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaAccessQuota::~OAIGoogleAnalyticsAdminV1alphaAccessQuota() {}

void OAIGoogleAnalyticsAdminV1alphaAccessQuota::initializeModel() {

    m_concurrent_requests_isSet = false;
    m_concurrent_requests_isValid = false;

    m_server_errors_per_project_per_hour_isSet = false;
    m_server_errors_per_project_per_hour_isValid = false;

    m_tokens_per_day_isSet = false;
    m_tokens_per_day_isValid = false;

    m_tokens_per_hour_isSet = false;
    m_tokens_per_hour_isValid = false;

    m_tokens_per_project_per_hour_isSet = false;
    m_tokens_per_project_per_hour_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaAccessQuota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaAccessQuota::fromJsonObject(QJsonObject json) {

    m_concurrent_requests_isValid = ::OpenAPI::fromJsonValue(m_concurrent_requests, json[QString("concurrentRequests")]);
    m_concurrent_requests_isSet = !json[QString("concurrentRequests")].isNull() && m_concurrent_requests_isValid;

    m_server_errors_per_project_per_hour_isValid = ::OpenAPI::fromJsonValue(m_server_errors_per_project_per_hour, json[QString("serverErrorsPerProjectPerHour")]);
    m_server_errors_per_project_per_hour_isSet = !json[QString("serverErrorsPerProjectPerHour")].isNull() && m_server_errors_per_project_per_hour_isValid;

    m_tokens_per_day_isValid = ::OpenAPI::fromJsonValue(m_tokens_per_day, json[QString("tokensPerDay")]);
    m_tokens_per_day_isSet = !json[QString("tokensPerDay")].isNull() && m_tokens_per_day_isValid;

    m_tokens_per_hour_isValid = ::OpenAPI::fromJsonValue(m_tokens_per_hour, json[QString("tokensPerHour")]);
    m_tokens_per_hour_isSet = !json[QString("tokensPerHour")].isNull() && m_tokens_per_hour_isValid;

    m_tokens_per_project_per_hour_isValid = ::OpenAPI::fromJsonValue(m_tokens_per_project_per_hour, json[QString("tokensPerProjectPerHour")]);
    m_tokens_per_project_per_hour_isSet = !json[QString("tokensPerProjectPerHour")].isNull() && m_tokens_per_project_per_hour_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAccessQuota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaAccessQuota::asJsonObject() const {
    QJsonObject obj;
    if (m_concurrent_requests.isSet()) {
        obj.insert(QString("concurrentRequests"), ::OpenAPI::toJsonValue(m_concurrent_requests));
    }
    if (m_server_errors_per_project_per_hour.isSet()) {
        obj.insert(QString("serverErrorsPerProjectPerHour"), ::OpenAPI::toJsonValue(m_server_errors_per_project_per_hour));
    }
    if (m_tokens_per_day.isSet()) {
        obj.insert(QString("tokensPerDay"), ::OpenAPI::toJsonValue(m_tokens_per_day));
    }
    if (m_tokens_per_hour.isSet()) {
        obj.insert(QString("tokensPerHour"), ::OpenAPI::toJsonValue(m_tokens_per_hour));
    }
    if (m_tokens_per_project_per_hour.isSet()) {
        obj.insert(QString("tokensPerProjectPerHour"), ::OpenAPI::toJsonValue(m_tokens_per_project_per_hour));
    }
    return obj;
}

OAIGoogleAnalyticsAdminV1alphaAccessQuotaStatus OAIGoogleAnalyticsAdminV1alphaAccessQuota::getConcurrentRequests() const {
    return m_concurrent_requests;
}
void OAIGoogleAnalyticsAdminV1alphaAccessQuota::setConcurrentRequests(const OAIGoogleAnalyticsAdminV1alphaAccessQuotaStatus &concurrent_requests) {
    m_concurrent_requests = concurrent_requests;
    m_concurrent_requests_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessQuota::is_concurrent_requests_Set() const{
    return m_concurrent_requests_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessQuota::is_concurrent_requests_Valid() const{
    return m_concurrent_requests_isValid;
}

OAIGoogleAnalyticsAdminV1alphaAccessQuotaStatus OAIGoogleAnalyticsAdminV1alphaAccessQuota::getServerErrorsPerProjectPerHour() const {
    return m_server_errors_per_project_per_hour;
}
void OAIGoogleAnalyticsAdminV1alphaAccessQuota::setServerErrorsPerProjectPerHour(const OAIGoogleAnalyticsAdminV1alphaAccessQuotaStatus &server_errors_per_project_per_hour) {
    m_server_errors_per_project_per_hour = server_errors_per_project_per_hour;
    m_server_errors_per_project_per_hour_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessQuota::is_server_errors_per_project_per_hour_Set() const{
    return m_server_errors_per_project_per_hour_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessQuota::is_server_errors_per_project_per_hour_Valid() const{
    return m_server_errors_per_project_per_hour_isValid;
}

OAIGoogleAnalyticsAdminV1alphaAccessQuotaStatus OAIGoogleAnalyticsAdminV1alphaAccessQuota::getTokensPerDay() const {
    return m_tokens_per_day;
}
void OAIGoogleAnalyticsAdminV1alphaAccessQuota::setTokensPerDay(const OAIGoogleAnalyticsAdminV1alphaAccessQuotaStatus &tokens_per_day) {
    m_tokens_per_day = tokens_per_day;
    m_tokens_per_day_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessQuota::is_tokens_per_day_Set() const{
    return m_tokens_per_day_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessQuota::is_tokens_per_day_Valid() const{
    return m_tokens_per_day_isValid;
}

OAIGoogleAnalyticsAdminV1alphaAccessQuotaStatus OAIGoogleAnalyticsAdminV1alphaAccessQuota::getTokensPerHour() const {
    return m_tokens_per_hour;
}
void OAIGoogleAnalyticsAdminV1alphaAccessQuota::setTokensPerHour(const OAIGoogleAnalyticsAdminV1alphaAccessQuotaStatus &tokens_per_hour) {
    m_tokens_per_hour = tokens_per_hour;
    m_tokens_per_hour_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessQuota::is_tokens_per_hour_Set() const{
    return m_tokens_per_hour_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessQuota::is_tokens_per_hour_Valid() const{
    return m_tokens_per_hour_isValid;
}

OAIGoogleAnalyticsAdminV1alphaAccessQuotaStatus OAIGoogleAnalyticsAdminV1alphaAccessQuota::getTokensPerProjectPerHour() const {
    return m_tokens_per_project_per_hour;
}
void OAIGoogleAnalyticsAdminV1alphaAccessQuota::setTokensPerProjectPerHour(const OAIGoogleAnalyticsAdminV1alphaAccessQuotaStatus &tokens_per_project_per_hour) {
    m_tokens_per_project_per_hour = tokens_per_project_per_hour;
    m_tokens_per_project_per_hour_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessQuota::is_tokens_per_project_per_hour_Set() const{
    return m_tokens_per_project_per_hour_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessQuota::is_tokens_per_project_per_hour_Valid() const{
    return m_tokens_per_project_per_hour_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessQuota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concurrent_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_errors_per_project_per_hour.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens_per_day.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens_per_hour.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens_per_project_per_hour.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessQuota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
