/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaGroupingRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaGroupingRule::OAIGoogleAnalyticsAdminV1alphaGroupingRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaGroupingRule::OAIGoogleAnalyticsAdminV1alphaGroupingRule() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaGroupingRule::~OAIGoogleAnalyticsAdminV1alphaGroupingRule() {}

void OAIGoogleAnalyticsAdminV1alphaGroupingRule::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaGroupingRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaGroupingRule::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaGroupingRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaGroupingRule::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_expression.isSet()) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaGroupingRule::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleAnalyticsAdminV1alphaGroupingRule::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaGroupingRule::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaGroupingRule::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression OAIGoogleAnalyticsAdminV1alphaGroupingRule::getExpression() const {
    return m_expression;
}
void OAIGoogleAnalyticsAdminV1alphaGroupingRule::setExpression(const OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaGroupingRule::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaGroupingRule::is_expression_Valid() const{
    return m_expression_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaGroupingRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaGroupingRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
