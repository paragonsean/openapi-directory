/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleAnalyticsAdminV1alphaAttributionSettings.h
 *
 * The attribution settings used for a given property. This is a singleton resource.
 */

#ifndef OAIGoogleAnalyticsAdminV1alphaAttributionSettings_H
#define OAIGoogleAnalyticsAdminV1alphaAttributionSettings_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleAnalyticsAdminV1alphaAttributionSettings : public OAIObject {
public:
    OAIGoogleAnalyticsAdminV1alphaAttributionSettings();
    OAIGoogleAnalyticsAdminV1alphaAttributionSettings(QString json);
    ~OAIGoogleAnalyticsAdminV1alphaAttributionSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAcquisitionConversionEventLookbackWindow() const;
    void setAcquisitionConversionEventLookbackWindow(const QString &acquisition_conversion_event_lookback_window);
    bool is_acquisition_conversion_event_lookback_window_Set() const;
    bool is_acquisition_conversion_event_lookback_window_Valid() const;

    QString getAdsWebConversionDataExportScope() const;
    void setAdsWebConversionDataExportScope(const QString &ads_web_conversion_data_export_scope);
    bool is_ads_web_conversion_data_export_scope_Set() const;
    bool is_ads_web_conversion_data_export_scope_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOtherConversionEventLookbackWindow() const;
    void setOtherConversionEventLookbackWindow(const QString &other_conversion_event_lookback_window);
    bool is_other_conversion_event_lookback_window_Set() const;
    bool is_other_conversion_event_lookback_window_Valid() const;

    QString getReportingAttributionModel() const;
    void setReportingAttributionModel(const QString &reporting_attribution_model);
    bool is_reporting_attribution_model_Set() const;
    bool is_reporting_attribution_model_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_acquisition_conversion_event_lookback_window;
    bool m_acquisition_conversion_event_lookback_window_isSet;
    bool m_acquisition_conversion_event_lookback_window_isValid;

    QString m_ads_web_conversion_data_export_scope;
    bool m_ads_web_conversion_data_export_scope_isSet;
    bool m_ads_web_conversion_data_export_scope_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_other_conversion_event_lookback_window;
    bool m_other_conversion_event_lookback_window_isSet;
    bool m_other_conversion_event_lookback_window_isValid;

    QString m_reporting_attribution_model;
    bool m_reporting_attribution_model_isSet;
    bool m_reporting_attribution_model_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleAnalyticsAdminV1alphaAttributionSettings)

#endif // OAIGoogleAnalyticsAdminV1alphaAttributionSettings_H
