/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::~OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest() {}

void OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::initializeModel() {

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_subproperty_isSet = false;
    m_subproperty_isValid = false;

    m_subproperty_event_filter_isSet = false;
    m_subproperty_event_filter_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::fromJsonObject(QJsonObject json) {

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_subproperty_isValid = ::OpenAPI::fromJsonValue(m_subproperty, json[QString("subproperty")]);
    m_subproperty_isSet = !json[QString("subproperty")].isNull() && m_subproperty_isValid;

    m_subproperty_event_filter_isValid = ::OpenAPI::fromJsonValue(m_subproperty_event_filter, json[QString("subpropertyEventFilter")]);
    m_subproperty_event_filter_isSet = !json[QString("subpropertyEventFilter")].isNull() && m_subproperty_event_filter_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_subproperty.isSet()) {
        obj.insert(QString("subproperty"), ::OpenAPI::toJsonValue(m_subproperty));
    }
    if (m_subproperty_event_filter.isSet()) {
        obj.insert(QString("subpropertyEventFilter"), ::OpenAPI::toJsonValue(m_subproperty_event_filter));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::getParent() const {
    return m_parent;
}
void OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::is_parent_Valid() const{
    return m_parent_isValid;
}

OAIGoogleAnalyticsAdminV1alphaProperty OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::getSubproperty() const {
    return m_subproperty;
}
void OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::setSubproperty(const OAIGoogleAnalyticsAdminV1alphaProperty &subproperty) {
    m_subproperty = subproperty;
    m_subproperty_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::is_subproperty_Set() const{
    return m_subproperty_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::is_subproperty_Valid() const{
    return m_subproperty_isValid;
}

OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::getSubpropertyEventFilter() const {
    return m_subproperty_event_filter;
}
void OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::setSubpropertyEventFilter(const OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter &subproperty_event_filter) {
    m_subproperty_event_filter = subproperty_event_filter;
    m_subproperty_event_filter_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::is_subproperty_event_filter_Set() const{
    return m_subproperty_event_filter_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::is_subproperty_event_filter_Valid() const{
    return m_subproperty_event_filter_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subproperty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subproperty_event_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
