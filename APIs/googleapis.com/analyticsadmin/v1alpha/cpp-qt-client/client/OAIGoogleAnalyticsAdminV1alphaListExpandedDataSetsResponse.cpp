/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::~OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse() {}

void OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::initializeModel() {

    m_expanded_data_sets_isSet = false;
    m_expanded_data_sets_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::fromJsonObject(QJsonObject json) {

    m_expanded_data_sets_isValid = ::OpenAPI::fromJsonValue(m_expanded_data_sets, json[QString("expandedDataSets")]);
    m_expanded_data_sets_isSet = !json[QString("expandedDataSets")].isNull() && m_expanded_data_sets_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_expanded_data_sets.size() > 0) {
        obj.insert(QString("expandedDataSets"), ::OpenAPI::toJsonValue(m_expanded_data_sets));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIGoogleAnalyticsAdminV1alphaExpandedDataSet> OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::getExpandedDataSets() const {
    return m_expanded_data_sets;
}
void OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::setExpandedDataSets(const QList<OAIGoogleAnalyticsAdminV1alphaExpandedDataSet> &expanded_data_sets) {
    m_expanded_data_sets = expanded_data_sets;
    m_expanded_data_sets_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::is_expanded_data_sets_Set() const{
    return m_expanded_data_sets_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::is_expanded_data_sets_Valid() const{
    return m_expanded_data_sets_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expanded_data_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
