/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter::OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter::OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter::~OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter() {}

void OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter::initializeModel() {

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter::fromJsonObject(QJsonObject json) {

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList<QString> OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter::getValues() const {
    return m_values;
}
void OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter::is_values_Set() const{
    return m_values_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterInListFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
