/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::~OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse() {}

void OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_search_ads360_links_isSet = false;
    m_search_ads360_links_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_search_ads360_links_isValid = ::OpenAPI::fromJsonValue(m_search_ads360_links, json[QString("searchAds360Links")]);
    m_search_ads360_links_isSet = !json[QString("searchAds360Links")].isNull() && m_search_ads360_links_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_search_ads360_links.size() > 0) {
        obj.insert(QString("searchAds360Links"), ::OpenAPI::toJsonValue(m_search_ads360_links));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIGoogleAnalyticsAdminV1alphaSearchAds360Link> OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::getSearchAds360Links() const {
    return m_search_ads360_links;
}
void OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::setSearchAds360Links(const QList<OAIGoogleAnalyticsAdminV1alphaSearchAds360Link> &search_ads360_links) {
    m_search_ads360_links = search_ads360_links;
    m_search_ads360_links_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::is_search_ads360_links_Set() const{
    return m_search_ads360_links_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::is_search_ads360_links_Valid() const{
    return m_search_ads360_links_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_ads360_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
