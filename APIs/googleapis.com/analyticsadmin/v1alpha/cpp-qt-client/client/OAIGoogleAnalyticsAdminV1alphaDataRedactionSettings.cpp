/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::~OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings() {}

void OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::initializeModel() {

    m_email_redaction_enabled_isSet = false;
    m_email_redaction_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_query_parameter_keys_isSet = false;
    m_query_parameter_keys_isValid = false;

    m_query_parameter_redaction_enabled_isSet = false;
    m_query_parameter_redaction_enabled_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::fromJsonObject(QJsonObject json) {

    m_email_redaction_enabled_isValid = ::OpenAPI::fromJsonValue(m_email_redaction_enabled, json[QString("emailRedactionEnabled")]);
    m_email_redaction_enabled_isSet = !json[QString("emailRedactionEnabled")].isNull() && m_email_redaction_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_query_parameter_keys_isValid = ::OpenAPI::fromJsonValue(m_query_parameter_keys, json[QString("queryParameterKeys")]);
    m_query_parameter_keys_isSet = !json[QString("queryParameterKeys")].isNull() && m_query_parameter_keys_isValid;

    m_query_parameter_redaction_enabled_isValid = ::OpenAPI::fromJsonValue(m_query_parameter_redaction_enabled, json[QString("queryParameterRedactionEnabled")]);
    m_query_parameter_redaction_enabled_isSet = !json[QString("queryParameterRedactionEnabled")].isNull() && m_query_parameter_redaction_enabled_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_email_redaction_enabled_isSet) {
        obj.insert(QString("emailRedactionEnabled"), ::OpenAPI::toJsonValue(m_email_redaction_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_query_parameter_keys.size() > 0) {
        obj.insert(QString("queryParameterKeys"), ::OpenAPI::toJsonValue(m_query_parameter_keys));
    }
    if (m_query_parameter_redaction_enabled_isSet) {
        obj.insert(QString("queryParameterRedactionEnabled"), ::OpenAPI::toJsonValue(m_query_parameter_redaction_enabled));
    }
    return obj;
}

bool OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::isEmailRedactionEnabled() const {
    return m_email_redaction_enabled;
}
void OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::setEmailRedactionEnabled(const bool &email_redaction_enabled) {
    m_email_redaction_enabled = email_redaction_enabled;
    m_email_redaction_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::is_email_redaction_enabled_Set() const{
    return m_email_redaction_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::is_email_redaction_enabled_Valid() const{
    return m_email_redaction_enabled_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::getQueryParameterKeys() const {
    return m_query_parameter_keys;
}
void OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::setQueryParameterKeys(const QList<QString> &query_parameter_keys) {
    m_query_parameter_keys = query_parameter_keys;
    m_query_parameter_keys_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::is_query_parameter_keys_Set() const{
    return m_query_parameter_keys_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::is_query_parameter_keys_Valid() const{
    return m_query_parameter_keys_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::isQueryParameterRedactionEnabled() const {
    return m_query_parameter_redaction_enabled;
}
void OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::setQueryParameterRedactionEnabled(const bool &query_parameter_redaction_enabled) {
    m_query_parameter_redaction_enabled = query_parameter_redaction_enabled;
    m_query_parameter_redaction_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::is_query_parameter_redaction_enabled_Set() const{
    return m_query_parameter_redaction_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::is_query_parameter_redaction_enabled_Valid() const{
    return m_query_parameter_redaction_enabled_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_redaction_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_parameter_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_parameter_redaction_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaDataRedactionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
