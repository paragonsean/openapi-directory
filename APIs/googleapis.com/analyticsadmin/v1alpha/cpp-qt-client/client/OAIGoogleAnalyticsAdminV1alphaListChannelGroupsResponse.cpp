/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::~OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse() {}

void OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::initializeModel() {

    m_channel_groups_isSet = false;
    m_channel_groups_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::fromJsonObject(QJsonObject json) {

    m_channel_groups_isValid = ::OpenAPI::fromJsonValue(m_channel_groups, json[QString("channelGroups")]);
    m_channel_groups_isSet = !json[QString("channelGroups")].isNull() && m_channel_groups_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_groups.size() > 0) {
        obj.insert(QString("channelGroups"), ::OpenAPI::toJsonValue(m_channel_groups));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIGoogleAnalyticsAdminV1alphaChannelGroup> OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::getChannelGroups() const {
    return m_channel_groups;
}
void OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::setChannelGroups(const QList<OAIGoogleAnalyticsAdminV1alphaChannelGroup> &channel_groups) {
    m_channel_groups = channel_groups;
    m_channel_groups_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::is_channel_groups_Set() const{
    return m_channel_groups_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::is_channel_groups_Valid() const{
    return m_channel_groups_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
