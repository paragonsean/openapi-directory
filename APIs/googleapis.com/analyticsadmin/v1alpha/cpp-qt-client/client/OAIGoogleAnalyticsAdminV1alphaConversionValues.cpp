/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaConversionValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaConversionValues::OAIGoogleAnalyticsAdminV1alphaConversionValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaConversionValues::OAIGoogleAnalyticsAdminV1alphaConversionValues() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaConversionValues::~OAIGoogleAnalyticsAdminV1alphaConversionValues() {}

void OAIGoogleAnalyticsAdminV1alphaConversionValues::initializeModel() {

    m_coarse_value_isSet = false;
    m_coarse_value_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_event_mappings_isSet = false;
    m_event_mappings_isValid = false;

    m_fine_value_isSet = false;
    m_fine_value_isValid = false;

    m_lock_enabled_isSet = false;
    m_lock_enabled_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaConversionValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaConversionValues::fromJsonObject(QJsonObject json) {

    m_coarse_value_isValid = ::OpenAPI::fromJsonValue(m_coarse_value, json[QString("coarseValue")]);
    m_coarse_value_isSet = !json[QString("coarseValue")].isNull() && m_coarse_value_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_event_mappings_isValid = ::OpenAPI::fromJsonValue(m_event_mappings, json[QString("eventMappings")]);
    m_event_mappings_isSet = !json[QString("eventMappings")].isNull() && m_event_mappings_isValid;

    m_fine_value_isValid = ::OpenAPI::fromJsonValue(m_fine_value, json[QString("fineValue")]);
    m_fine_value_isSet = !json[QString("fineValue")].isNull() && m_fine_value_isValid;

    m_lock_enabled_isValid = ::OpenAPI::fromJsonValue(m_lock_enabled, json[QString("lockEnabled")]);
    m_lock_enabled_isSet = !json[QString("lockEnabled")].isNull() && m_lock_enabled_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaConversionValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaConversionValues::asJsonObject() const {
    QJsonObject obj;
    if (m_coarse_value_isSet) {
        obj.insert(QString("coarseValue"), ::OpenAPI::toJsonValue(m_coarse_value));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_event_mappings.size() > 0) {
        obj.insert(QString("eventMappings"), ::OpenAPI::toJsonValue(m_event_mappings));
    }
    if (m_fine_value_isSet) {
        obj.insert(QString("fineValue"), ::OpenAPI::toJsonValue(m_fine_value));
    }
    if (m_lock_enabled_isSet) {
        obj.insert(QString("lockEnabled"), ::OpenAPI::toJsonValue(m_lock_enabled));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaConversionValues::getCoarseValue() const {
    return m_coarse_value;
}
void OAIGoogleAnalyticsAdminV1alphaConversionValues::setCoarseValue(const QString &coarse_value) {
    m_coarse_value = coarse_value;
    m_coarse_value_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaConversionValues::is_coarse_value_Set() const{
    return m_coarse_value_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaConversionValues::is_coarse_value_Valid() const{
    return m_coarse_value_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaConversionValues::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleAnalyticsAdminV1alphaConversionValues::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaConversionValues::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaConversionValues::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIGoogleAnalyticsAdminV1alphaEventMapping> OAIGoogleAnalyticsAdminV1alphaConversionValues::getEventMappings() const {
    return m_event_mappings;
}
void OAIGoogleAnalyticsAdminV1alphaConversionValues::setEventMappings(const QList<OAIGoogleAnalyticsAdminV1alphaEventMapping> &event_mappings) {
    m_event_mappings = event_mappings;
    m_event_mappings_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaConversionValues::is_event_mappings_Set() const{
    return m_event_mappings_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaConversionValues::is_event_mappings_Valid() const{
    return m_event_mappings_isValid;
}

qint32 OAIGoogleAnalyticsAdminV1alphaConversionValues::getFineValue() const {
    return m_fine_value;
}
void OAIGoogleAnalyticsAdminV1alphaConversionValues::setFineValue(const qint32 &fine_value) {
    m_fine_value = fine_value;
    m_fine_value_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaConversionValues::is_fine_value_Set() const{
    return m_fine_value_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaConversionValues::is_fine_value_Valid() const{
    return m_fine_value_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaConversionValues::isLockEnabled() const {
    return m_lock_enabled;
}
void OAIGoogleAnalyticsAdminV1alphaConversionValues::setLockEnabled(const bool &lock_enabled) {
    m_lock_enabled = lock_enabled;
    m_lock_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaConversionValues::is_lock_enabled_Set() const{
    return m_lock_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaConversionValues::is_lock_enabled_Valid() const{
    return m_lock_enabled_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaConversionValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coarse_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fine_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaConversionValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
