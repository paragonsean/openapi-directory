/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::~OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep() {}

void OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::initializeModel() {

    m_constraint_duration_isSet = false;
    m_constraint_duration_isValid = false;

    m_filter_expression_isSet = false;
    m_filter_expression_isValid = false;

    m_immediately_follows_isSet = false;
    m_immediately_follows_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::fromJsonObject(QJsonObject json) {

    m_constraint_duration_isValid = ::OpenAPI::fromJsonValue(m_constraint_duration, json[QString("constraintDuration")]);
    m_constraint_duration_isSet = !json[QString("constraintDuration")].isNull() && m_constraint_duration_isValid;

    m_filter_expression_isValid = ::OpenAPI::fromJsonValue(m_filter_expression, json[QString("filterExpression")]);
    m_filter_expression_isSet = !json[QString("filterExpression")].isNull() && m_filter_expression_isValid;

    m_immediately_follows_isValid = ::OpenAPI::fromJsonValue(m_immediately_follows, json[QString("immediatelyFollows")]);
    m_immediately_follows_isSet = !json[QString("immediatelyFollows")].isNull() && m_immediately_follows_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::asJsonObject() const {
    QJsonObject obj;
    if (m_constraint_duration_isSet) {
        obj.insert(QString("constraintDuration"), ::OpenAPI::toJsonValue(m_constraint_duration));
    }
    if (m_filter_expression.isSet()) {
        obj.insert(QString("filterExpression"), ::OpenAPI::toJsonValue(m_filter_expression));
    }
    if (m_immediately_follows_isSet) {
        obj.insert(QString("immediatelyFollows"), ::OpenAPI::toJsonValue(m_immediately_follows));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::getConstraintDuration() const {
    return m_constraint_duration;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::setConstraintDuration(const QString &constraint_duration) {
    m_constraint_duration = constraint_duration;
    m_constraint_duration_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::is_constraint_duration_Set() const{
    return m_constraint_duration_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::is_constraint_duration_Valid() const{
    return m_constraint_duration_isValid;
}

OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::getFilterExpression() const {
    return m_filter_expression;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::setFilterExpression(const OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression &filter_expression) {
    m_filter_expression = filter_expression;
    m_filter_expression_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::is_filter_expression_Set() const{
    return m_filter_expression_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::is_filter_expression_Valid() const{
    return m_filter_expression_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::isImmediatelyFollows() const {
    return m_immediately_follows;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::setImmediatelyFollows(const bool &immediately_follows) {
    m_immediately_follows = immediately_follows;
    m_immediately_follows_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::is_immediately_follows_Set() const{
    return m_immediately_follows_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::is_immediately_follows_Valid() const{
    return m_immediately_follows_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::getScope() const {
    return m_scope;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constraint_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_immediately_follows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
