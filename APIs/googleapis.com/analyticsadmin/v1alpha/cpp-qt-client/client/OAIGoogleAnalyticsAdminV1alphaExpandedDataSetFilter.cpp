/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::~OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter() {}

void OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::initializeModel() {

    m_field_name_isSet = false;
    m_field_name_isValid = false;

    m_in_list_filter_isSet = false;
    m_in_list_filter_isValid = false;

    m_string_filter_isSet = false;
    m_string_filter_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::fromJsonObject(QJsonObject json) {

    m_field_name_isValid = ::OpenAPI::fromJsonValue(m_field_name, json[QString("fieldName")]);
    m_field_name_isSet = !json[QString("fieldName")].isNull() && m_field_name_isValid;

    m_in_list_filter_isValid = ::OpenAPI::fromJsonValue(m_in_list_filter, json[QString("inListFilter")]);
    m_in_list_filter_isSet = !json[QString("inListFilter")].isNull() && m_in_list_filter_isValid;

    m_string_filter_isValid = ::OpenAPI::fromJsonValue(m_string_filter, json[QString("stringFilter")]);
    m_string_filter_isSet = !json[QString("stringFilter")].isNull() && m_string_filter_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_field_name_isSet) {
        obj.insert(QString("fieldName"), ::OpenAPI::toJsonValue(m_field_name));
    }
    if (m_in_list_filter.isSet()) {
        obj.insert(QString("inListFilter"), ::OpenAPI::toJsonValue(m_in_list_filter));
    }
    if (m_string_filter.isSet()) {
        obj.insert(QString("stringFilter"), ::OpenAPI::toJsonValue(m_string_filter));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::getFieldName() const {
    return m_field_name;
}
void OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::setFieldName(const QString &field_name) {
    m_field_name = field_name;
    m_field_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::is_field_name_Set() const{
    return m_field_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::is_field_name_Valid() const{
    return m_field_name_isValid;
}

OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilterInListFilter OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::getInListFilter() const {
    return m_in_list_filter;
}
void OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::setInListFilter(const OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilterInListFilter &in_list_filter) {
    m_in_list_filter = in_list_filter;
    m_in_list_filter_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::is_in_list_filter_Set() const{
    return m_in_list_filter_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::is_in_list_filter_Valid() const{
    return m_in_list_filter_isValid;
}

OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilterStringFilter OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::getStringFilter() const {
    return m_string_filter;
}
void OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::setStringFilter(const OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilterStringFilter &string_filter) {
    m_string_filter = string_filter;
    m_string_filter_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::is_string_filter_Set() const{
    return m_string_filter_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::is_string_filter_Valid() const{
    return m_string_filter_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_list_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaExpandedDataSetFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
