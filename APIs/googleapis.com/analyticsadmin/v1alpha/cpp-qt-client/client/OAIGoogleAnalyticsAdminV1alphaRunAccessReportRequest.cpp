/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::~OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest() {}

void OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::initializeModel() {

    m_date_ranges_isSet = false;
    m_date_ranges_isValid = false;

    m_dimension_filter_isSet = false;
    m_dimension_filter_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_expand_groups_isSet = false;
    m_expand_groups_isValid = false;

    m_include_all_users_isSet = false;
    m_include_all_users_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_metric_filter_isSet = false;
    m_metric_filter_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_order_bys_isSet = false;
    m_order_bys_isValid = false;

    m_return_entity_quota_isSet = false;
    m_return_entity_quota_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::fromJsonObject(QJsonObject json) {

    m_date_ranges_isValid = ::OpenAPI::fromJsonValue(m_date_ranges, json[QString("dateRanges")]);
    m_date_ranges_isSet = !json[QString("dateRanges")].isNull() && m_date_ranges_isValid;

    m_dimension_filter_isValid = ::OpenAPI::fromJsonValue(m_dimension_filter, json[QString("dimensionFilter")]);
    m_dimension_filter_isSet = !json[QString("dimensionFilter")].isNull() && m_dimension_filter_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_expand_groups_isValid = ::OpenAPI::fromJsonValue(m_expand_groups, json[QString("expandGroups")]);
    m_expand_groups_isSet = !json[QString("expandGroups")].isNull() && m_expand_groups_isValid;

    m_include_all_users_isValid = ::OpenAPI::fromJsonValue(m_include_all_users, json[QString("includeAllUsers")]);
    m_include_all_users_isSet = !json[QString("includeAllUsers")].isNull() && m_include_all_users_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_metric_filter_isValid = ::OpenAPI::fromJsonValue(m_metric_filter, json[QString("metricFilter")]);
    m_metric_filter_isSet = !json[QString("metricFilter")].isNull() && m_metric_filter_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_order_bys_isValid = ::OpenAPI::fromJsonValue(m_order_bys, json[QString("orderBys")]);
    m_order_bys_isSet = !json[QString("orderBys")].isNull() && m_order_bys_isValid;

    m_return_entity_quota_isValid = ::OpenAPI::fromJsonValue(m_return_entity_quota, json[QString("returnEntityQuota")]);
    m_return_entity_quota_isSet = !json[QString("returnEntityQuota")].isNull() && m_return_entity_quota_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_date_ranges.size() > 0) {
        obj.insert(QString("dateRanges"), ::OpenAPI::toJsonValue(m_date_ranges));
    }
    if (m_dimension_filter.isSet()) {
        obj.insert(QString("dimensionFilter"), ::OpenAPI::toJsonValue(m_dimension_filter));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_expand_groups_isSet) {
        obj.insert(QString("expandGroups"), ::OpenAPI::toJsonValue(m_expand_groups));
    }
    if (m_include_all_users_isSet) {
        obj.insert(QString("includeAllUsers"), ::OpenAPI::toJsonValue(m_include_all_users));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_metric_filter.isSet()) {
        obj.insert(QString("metricFilter"), ::OpenAPI::toJsonValue(m_metric_filter));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_order_bys.size() > 0) {
        obj.insert(QString("orderBys"), ::OpenAPI::toJsonValue(m_order_bys));
    }
    if (m_return_entity_quota_isSet) {
        obj.insert(QString("returnEntityQuota"), ::OpenAPI::toJsonValue(m_return_entity_quota));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QList<OAIGoogleAnalyticsAdminV1alphaAccessDateRange> OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::getDateRanges() const {
    return m_date_ranges;
}
void OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::setDateRanges(const QList<OAIGoogleAnalyticsAdminV1alphaAccessDateRange> &date_ranges) {
    m_date_ranges = date_ranges;
    m_date_ranges_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_date_ranges_Set() const{
    return m_date_ranges_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_date_ranges_Valid() const{
    return m_date_ranges_isValid;
}

OAIGoogleAnalyticsAdminV1alphaAccessFilterExpression OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::getDimensionFilter() const {
    return m_dimension_filter;
}
void OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::setDimensionFilter(const OAIGoogleAnalyticsAdminV1alphaAccessFilterExpression &dimension_filter) {
    m_dimension_filter = dimension_filter;
    m_dimension_filter_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_dimension_filter_Set() const{
    return m_dimension_filter_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_dimension_filter_Valid() const{
    return m_dimension_filter_isValid;
}

QList<OAIGoogleAnalyticsAdminV1alphaAccessDimension> OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::getDimensions() const {
    return m_dimensions;
}
void OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::setDimensions(const QList<OAIGoogleAnalyticsAdminV1alphaAccessDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::isExpandGroups() const {
    return m_expand_groups;
}
void OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::setExpandGroups(const bool &expand_groups) {
    m_expand_groups = expand_groups;
    m_expand_groups_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_expand_groups_Set() const{
    return m_expand_groups_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_expand_groups_Valid() const{
    return m_expand_groups_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::isIncludeAllUsers() const {
    return m_include_all_users;
}
void OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::setIncludeAllUsers(const bool &include_all_users) {
    m_include_all_users = include_all_users;
    m_include_all_users_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_include_all_users_Set() const{
    return m_include_all_users_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_include_all_users_Valid() const{
    return m_include_all_users_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::getLimit() const {
    return m_limit;
}
void OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::setLimit(const QString &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

OAIGoogleAnalyticsAdminV1alphaAccessFilterExpression OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::getMetricFilter() const {
    return m_metric_filter;
}
void OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::setMetricFilter(const OAIGoogleAnalyticsAdminV1alphaAccessFilterExpression &metric_filter) {
    m_metric_filter = metric_filter;
    m_metric_filter_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_metric_filter_Set() const{
    return m_metric_filter_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_metric_filter_Valid() const{
    return m_metric_filter_isValid;
}

QList<OAIGoogleAnalyticsAdminV1alphaAccessMetric> OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::getMetrics() const {
    return m_metrics;
}
void OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::setMetrics(const QList<OAIGoogleAnalyticsAdminV1alphaAccessMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::getOffset() const {
    return m_offset;
}
void OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::setOffset(const QString &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_offset_Valid() const{
    return m_offset_isValid;
}

QList<OAIGoogleAnalyticsAdminV1alphaAccessOrderBy> OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::getOrderBys() const {
    return m_order_bys;
}
void OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::setOrderBys(const QList<OAIGoogleAnalyticsAdminV1alphaAccessOrderBy> &order_bys) {
    m_order_bys = order_bys;
    m_order_bys_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_order_bys_Set() const{
    return m_order_bys_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_order_bys_Valid() const{
    return m_order_bys_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::isReturnEntityQuota() const {
    return m_return_entity_quota;
}
void OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::setReturnEntityQuota(const bool &return_entity_quota) {
    m_return_entity_quota = return_entity_quota;
    m_return_entity_quota_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_return_entity_quota_Set() const{
    return m_return_entity_quota_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_return_entity_quota_Valid() const{
    return m_return_entity_quota_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::getTimeZone() const {
    return m_time_zone;
}
void OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_all_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_bys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_entity_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
