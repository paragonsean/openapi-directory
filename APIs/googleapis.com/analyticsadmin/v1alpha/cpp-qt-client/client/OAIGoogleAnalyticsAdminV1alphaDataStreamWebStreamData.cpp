/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::~OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData() {}

void OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::initializeModel() {

    m_default_uri_isSet = false;
    m_default_uri_isValid = false;

    m_firebase_app_id_isSet = false;
    m_firebase_app_id_isValid = false;

    m_measurement_id_isSet = false;
    m_measurement_id_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::fromJsonObject(QJsonObject json) {

    m_default_uri_isValid = ::OpenAPI::fromJsonValue(m_default_uri, json[QString("defaultUri")]);
    m_default_uri_isSet = !json[QString("defaultUri")].isNull() && m_default_uri_isValid;

    m_firebase_app_id_isValid = ::OpenAPI::fromJsonValue(m_firebase_app_id, json[QString("firebaseAppId")]);
    m_firebase_app_id_isSet = !json[QString("firebaseAppId")].isNull() && m_firebase_app_id_isValid;

    m_measurement_id_isValid = ::OpenAPI::fromJsonValue(m_measurement_id, json[QString("measurementId")]);
    m_measurement_id_isSet = !json[QString("measurementId")].isNull() && m_measurement_id_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::asJsonObject() const {
    QJsonObject obj;
    if (m_default_uri_isSet) {
        obj.insert(QString("defaultUri"), ::OpenAPI::toJsonValue(m_default_uri));
    }
    if (m_firebase_app_id_isSet) {
        obj.insert(QString("firebaseAppId"), ::OpenAPI::toJsonValue(m_firebase_app_id));
    }
    if (m_measurement_id_isSet) {
        obj.insert(QString("measurementId"), ::OpenAPI::toJsonValue(m_measurement_id));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::getDefaultUri() const {
    return m_default_uri;
}
void OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::setDefaultUri(const QString &default_uri) {
    m_default_uri = default_uri;
    m_default_uri_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::is_default_uri_Set() const{
    return m_default_uri_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::is_default_uri_Valid() const{
    return m_default_uri_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::getFirebaseAppId() const {
    return m_firebase_app_id;
}
void OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::setFirebaseAppId(const QString &firebase_app_id) {
    m_firebase_app_id = firebase_app_id;
    m_firebase_app_id_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::is_firebase_app_id_Set() const{
    return m_firebase_app_id_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::is_firebase_app_id_Valid() const{
    return m_firebase_app_id_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::getMeasurementId() const {
    return m_measurement_id;
}
void OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::setMeasurementId(const QString &measurement_id) {
    m_measurement_id = measurement_id;
    m_measurement_id_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::is_measurement_id_Set() const{
    return m_measurement_id_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::is_measurement_id_Valid() const{
    return m_measurement_id_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firebase_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaDataStreamWebStreamData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
