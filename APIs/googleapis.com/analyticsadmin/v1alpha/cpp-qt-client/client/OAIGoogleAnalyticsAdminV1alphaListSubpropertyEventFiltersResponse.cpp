/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::~OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse() {}

void OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_subproperty_event_filters_isSet = false;
    m_subproperty_event_filters_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_subproperty_event_filters_isValid = ::OpenAPI::fromJsonValue(m_subproperty_event_filters, json[QString("subpropertyEventFilters")]);
    m_subproperty_event_filters_isSet = !json[QString("subpropertyEventFilters")].isNull() && m_subproperty_event_filters_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_subproperty_event_filters.size() > 0) {
        obj.insert(QString("subpropertyEventFilters"), ::OpenAPI::toJsonValue(m_subproperty_event_filters));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter> OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::getSubpropertyEventFilters() const {
    return m_subproperty_event_filters;
}
void OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::setSubpropertyEventFilters(const QList<OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter> &subproperty_event_filters) {
    m_subproperty_event_filters = subproperty_event_filters;
    m_subproperty_event_filters_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::is_subproperty_event_filters_Set() const{
    return m_subproperty_event_filters_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::is_subproperty_event_filters_Valid() const{
    return m_subproperty_event_filters_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subproperty_event_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
