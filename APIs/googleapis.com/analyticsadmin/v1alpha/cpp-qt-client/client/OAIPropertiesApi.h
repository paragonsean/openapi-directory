/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPropertiesApi_H
#define OAI_OAIPropertiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleAnalyticsAdminV1alphaAccessBinding.h"
#include "OAIGoogleAnalyticsAdminV1alphaAcknowledgeUserDataCollectionRequest.h"
#include "OAIGoogleAnalyticsAdminV1alphaAdSenseLink.h"
#include "OAIGoogleAnalyticsAdminV1alphaApproveDisplayVideo360AdvertiserLinkProposalResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaAudience.h"
#include "OAIGoogleAnalyticsAdminV1alphaBatchCreateAccessBindingsRequest.h"
#include "OAIGoogleAnalyticsAdminV1alphaBatchCreateAccessBindingsResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest.h"
#include "OAIGoogleAnalyticsAdminV1alphaBatchGetAccessBindingsResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest.h"
#include "OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaCalculatedMetric.h"
#include "OAIGoogleAnalyticsAdminV1alphaChannelGroup.h"
#include "OAIGoogleAnalyticsAdminV1alphaConversionEvent.h"
#include "OAIGoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest.h"
#include "OAIGoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest.h"
#include "OAIGoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest.h"
#include "OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaCustomDimension.h"
#include "OAIGoogleAnalyticsAdminV1alphaCustomMetric.h"
#include "OAIGoogleAnalyticsAdminV1alphaDataStream.h"
#include "OAIGoogleAnalyticsAdminV1alphaDeleteConnectedSiteTagRequest.h"
#include "OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLink.h"
#include "OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal.h"
#include "OAIGoogleAnalyticsAdminV1alphaEventCreateRule.h"
#include "OAIGoogleAnalyticsAdminV1alphaExpandedDataSet.h"
#include "OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutRequest.h"
#include "OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaFirebaseLink.h"
#include "OAIGoogleAnalyticsAdminV1alphaGoogleAdsLink.h"
#include "OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListAudiencesResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListCalculatedMetricsResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListConnectedSiteTagsRequest.h"
#include "OAIGoogleAnalyticsAdminV1alphaListConnectedSiteTagsResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListConversionEventsResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListCustomDimensionsResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListCustomMetricsResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListDataStreamsResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListDisplayVideo360AdvertiserLinkProposalsResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListDisplayVideo360AdvertiserLinksResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListFirebaseLinksResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListGoogleAdsLinksResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListMeasurementProtocolSecretsResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListPropertiesResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret.h"
#include "OAIGoogleAnalyticsAdminV1alphaProperty.h"
#include "OAIGoogleAnalyticsAdminV1alphaRollupPropertySourceLink.h"
#include "OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest.h"
#include "OAIGoogleAnalyticsAdminV1alphaRunAccessReportResponse.h"
#include "OAIGoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema.h"
#include "OAIGoogleAnalyticsAdminV1alphaSearchAds360Link.h"
#include "OAIGoogleAnalyticsAdminV1alphaSetAutomatedGa4ConfigurationOptOutRequest.h"
#include "OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPropertiesApi : public QObject {
    Q_OBJECT

public:
    OAIPropertiesApi(const int timeOut = 0);
    ~OAIPropertiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_batch_create_access_bindings_request OAIGoogleAnalyticsAdminV1alphaBatchCreateAccessBindingsRequest [optional]
    */
    virtual void analyticsadmin_properties_accessBindings_batchCreate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaBatchCreateAccessBindingsRequest> &oai_google_analytics_admin_v1alpha_batch_create_access_bindings_request = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaBatchCreateAccessBindingsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_batch_delete_access_bindings_request OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest [optional]
    */
    virtual void analyticsadmin_properties_accessBindings_batchDelete(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest> &oai_google_analytics_admin_v1alpha_batch_delete_access_bindings_request = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  names QList<QString> [optional]
    */
    virtual void analyticsadmin_properties_accessBindings_batchGet(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &names = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_batch_update_access_bindings_request OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest [optional]
    */
    virtual void analyticsadmin_properties_accessBindings_batchUpdate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest> &oai_google_analytics_admin_v1alpha_batch_update_access_bindings_request = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_access_binding OAIGoogleAnalyticsAdminV1alphaAccessBinding [optional]
    */
    virtual void analyticsadmin_properties_accessBindings_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaAccessBinding> &oai_google_analytics_admin_v1alpha_access_binding = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaAccessBinding>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_accessBindings_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  property QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_acknowledge_user_data_collection_request OAIGoogleAnalyticsAdminV1alphaAcknowledgeUserDataCollectionRequest [optional]
    */
    virtual void analyticsadmin_properties_acknowledgeUserDataCollection(const QString &property, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaAcknowledgeUserDataCollectionRequest> &oai_google_analytics_admin_v1alpha_acknowledge_user_data_collection_request = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaAcknowledgeUserDataCollectionRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_ad_sense_link OAIGoogleAnalyticsAdminV1alphaAdSenseLink [optional]
    */
    virtual void analyticsadmin_properties_adSenseLinks_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaAdSenseLink> &oai_google_analytics_admin_v1alpha_ad_sense_link = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaAdSenseLink>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_adSenseLinks_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_audience OAIGoogleAnalyticsAdminV1alphaAudience [optional]
    */
    virtual void analyticsadmin_properties_audiences_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaAudience> &oai_google_analytics_admin_v1alpha_audience = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaAudience>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_audiences_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_bigQueryLinks_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  calculated_metric_id QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_calculated_metric OAIGoogleAnalyticsAdminV1alphaCalculatedMetric [optional]
    */
    virtual void analyticsadmin_properties_calculatedMetrics_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &calculated_metric_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaCalculatedMetric> &oai_google_analytics_admin_v1alpha_calculated_metric = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaCalculatedMetric>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_calculatedMetrics_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_channel_group OAIGoogleAnalyticsAdminV1alphaChannelGroup [optional]
    */
    virtual void analyticsadmin_properties_channelGroups_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaChannelGroup> &oai_google_analytics_admin_v1alpha_channel_group = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaChannelGroup>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_channelGroups_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_conversion_event OAIGoogleAnalyticsAdminV1alphaConversionEvent [optional]
    */
    virtual void analyticsadmin_properties_conversionEvents_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaConversionEvent> &oai_google_analytics_admin_v1alpha_conversion_event = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaConversionEvent>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_conversionEvents_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_property OAIGoogleAnalyticsAdminV1alphaProperty [optional]
    */
    virtual void analyticsadmin_properties_create(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaProperty> &oai_google_analytics_admin_v1alpha_property = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaProperty>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_create_connected_site_tag_request OAIGoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest [optional]
    */
    virtual void analyticsadmin_properties_createConnectedSiteTag(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest> &oai_google_analytics_admin_v1alpha_create_connected_site_tag_request = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_create_rollup_property_request OAIGoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest [optional]
    */
    virtual void analyticsadmin_properties_createRollupProperty(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest> &oai_google_analytics_admin_v1alpha_create_rollup_property_request = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_create_subproperty_request OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest [optional]
    */
    virtual void analyticsadmin_properties_createSubproperty(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest> &oai_google_analytics_admin_v1alpha_create_subproperty_request = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_custom_dimension OAIGoogleAnalyticsAdminV1alphaCustomDimension [optional]
    */
    virtual void analyticsadmin_properties_customDimensions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaCustomDimension> &oai_google_analytics_admin_v1alpha_custom_dimension = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaCustomDimension>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_customDimensions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void analyticsadmin_properties_customMetrics_archive(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_custom_metric OAIGoogleAnalyticsAdminV1alphaCustomMetric [optional]
    */
    virtual void analyticsadmin_properties_customMetrics_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaCustomMetric> &oai_google_analytics_admin_v1alpha_custom_metric = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaCustomMetric>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_customMetrics_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_data_stream OAIGoogleAnalyticsAdminV1alphaDataStream [optional]
    */
    virtual void analyticsadmin_properties_dataStreams_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaDataStream> &oai_google_analytics_admin_v1alpha_data_stream = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaDataStream>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_event_create_rule OAIGoogleAnalyticsAdminV1alphaEventCreateRule [optional]
    */
    virtual void analyticsadmin_properties_dataStreams_eventCreateRules_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaEventCreateRule> &oai_google_analytics_admin_v1alpha_event_create_rule = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaEventCreateRule>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_dataStreams_eventCreateRules_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_dataStreams_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_measurement_protocol_secret OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret [optional]
    */
    virtual void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret> &oai_google_analytics_admin_v1alpha_measurement_protocol_secret = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_skad_network_conversion_value_schema OAIGoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema [optional]
    */
    virtual void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema> &oai_google_analytics_admin_v1alpha_skad_network_conversion_value_schema = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_delete_connected_site_tag_request OAIGoogleAnalyticsAdminV1alphaDeleteConnectedSiteTagRequest [optional]
    */
    virtual void analyticsadmin_properties_deleteConnectedSiteTag(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaDeleteConnectedSiteTagRequest> &oai_google_analytics_admin_v1alpha_delete_connected_site_tag_request = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaDeleteConnectedSiteTagRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_approve(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_cancel(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_display_video360_advertiser_link_proposal OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal [optional]
    */
    virtual void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal> &oai_google_analytics_admin_v1alpha_display_video360_advertiser_link_proposal = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_display_video360_advertiser_link OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLink [optional]
    */
    virtual void analyticsadmin_properties_displayVideo360AdvertiserLinks_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLink> &oai_google_analytics_admin_v1alpha_display_video360_advertiser_link = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLink>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_displayVideo360AdvertiserLinks_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_expanded_data_set OAIGoogleAnalyticsAdminV1alphaExpandedDataSet [optional]
    */
    virtual void analyticsadmin_properties_expandedDataSets_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaExpandedDataSet> &oai_google_analytics_admin_v1alpha_expanded_data_set = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaExpandedDataSet>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_expandedDataSets_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_fetch_automated_ga4_configuration_opt_out_request OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutRequest [optional]
    */
    virtual void analyticsadmin_properties_fetchAutomatedGa4ConfigurationOptOut(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutRequest> &oai_google_analytics_admin_v1alpha_fetch_automated_ga4_configuration_opt_out_request = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutRequest>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  property QString [optional]
    */
    virtual void analyticsadmin_properties_fetchConnectedGa4Property(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &property = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_firebase_link OAIGoogleAnalyticsAdminV1alphaFirebaseLink [optional]
    */
    virtual void analyticsadmin_properties_firebaseLinks_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaFirebaseLink> &oai_google_analytics_admin_v1alpha_firebase_link = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaFirebaseLink>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_firebaseLinks_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_google_ads_link OAIGoogleAnalyticsAdminV1alphaGoogleAdsLink [optional]
    */
    virtual void analyticsadmin_properties_googleAdsLinks_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaGoogleAdsLink> &oai_google_analytics_admin_v1alpha_google_ads_link = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaGoogleAdsLink>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_googleAdsLinks_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  show_deleted bool [optional]
    */
    virtual void analyticsadmin_properties_list(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_deleted = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_list_connected_site_tags_request OAIGoogleAnalyticsAdminV1alphaListConnectedSiteTagsRequest [optional]
    */
    virtual void analyticsadmin_properties_listConnectedSiteTags(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaListConnectedSiteTagsRequest> &oai_google_analytics_admin_v1alpha_list_connected_site_tags_request = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaListConnectedSiteTagsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_rollup_property_source_link OAIGoogleAnalyticsAdminV1alphaRollupPropertySourceLink [optional]
    */
    virtual void analyticsadmin_properties_rollupPropertySourceLinks_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaRollupPropertySourceLink> &oai_google_analytics_admin_v1alpha_rollup_property_source_link = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaRollupPropertySourceLink>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_rollupPropertySourceLinks_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  entity QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_run_access_report_request OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest [optional]
    */
    virtual void analyticsadmin_properties_runAccessReport(const QString &entity, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest> &oai_google_analytics_admin_v1alpha_run_access_report_request = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaRunAccessReportRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_search_ads360_link OAIGoogleAnalyticsAdminV1alphaSearchAds360Link [optional]
    */
    virtual void analyticsadmin_properties_searchAds360Links_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaSearchAds360Link> &oai_google_analytics_admin_v1alpha_search_ads360_link = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaSearchAds360Link>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_searchAds360Links_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_set_automated_ga4_configuration_opt_out_request OAIGoogleAnalyticsAdminV1alphaSetAutomatedGa4ConfigurationOptOutRequest [optional]
    */
    virtual void analyticsadmin_properties_setAutomatedGa4ConfigurationOptOut(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaSetAutomatedGa4ConfigurationOptOutRequest> &oai_google_analytics_admin_v1alpha_set_automated_ga4_configuration_opt_out_request = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaSetAutomatedGa4ConfigurationOptOutRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_subproperty_event_filter OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter [optional]
    */
    virtual void analyticsadmin_properties_subpropertyEventFilters_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter> &oai_google_analytics_admin_v1alpha_subproperty_event_filter = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void analyticsadmin_properties_subpropertyEventFilters_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void analyticsadmin_properties_subpropertyEventFilters_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void analyticsadmin_properties_subpropertyEventFilters_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_google_analytics_admin_v1alpha_subproperty_event_filter OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter [optional]
    */
    virtual void analyticsadmin_properties_subpropertyEventFilters_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter> &oai_google_analytics_admin_v1alpha_subproperty_event_filter = ::OpenAPI::OptionalParam<OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analyticsadmin_properties_accessBindings_batchCreateCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_accessBindings_batchDeleteCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_accessBindings_batchGetCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_accessBindings_batchUpdateCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_accessBindings_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_accessBindings_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_acknowledgeUserDataCollectionCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_adSenseLinks_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_adSenseLinks_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_audiences_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_audiences_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_bigQueryLinks_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_calculatedMetrics_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_calculatedMetrics_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_channelGroups_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_channelGroups_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_conversionEvents_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_conversionEvents_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_createConnectedSiteTagCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_createRollupPropertyCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_createSubpropertyCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_customDimensions_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_customDimensions_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_customMetrics_archiveCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_customMetrics_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_customMetrics_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_dataStreams_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_dataStreams_eventCreateRules_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_dataStreams_eventCreateRules_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_dataStreams_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_deleteConnectedSiteTagCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_approveCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_cancelCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_displayVideo360AdvertiserLinks_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_displayVideo360AdvertiserLinks_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_expandedDataSets_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_expandedDataSets_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_fetchAutomatedGa4ConfigurationOptOutCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_fetchConnectedGa4PropertyCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_firebaseLinks_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_firebaseLinks_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_googleAdsLinks_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_googleAdsLinks_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_listConnectedSiteTagsCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_rollupPropertySourceLinks_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_rollupPropertySourceLinks_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_runAccessReportCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_searchAds360Links_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_searchAds360Links_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_setAutomatedGa4ConfigurationOptOutCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_subpropertyEventFilters_createCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_subpropertyEventFilters_deleteCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_subpropertyEventFilters_getCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_subpropertyEventFilters_listCallback(OAIHttpRequestWorker *worker);
    void analyticsadmin_properties_subpropertyEventFilters_patchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analyticsadmin_properties_accessBindings_batchCreateSignal(OAIGoogleAnalyticsAdminV1alphaBatchCreateAccessBindingsResponse summary);
    void analyticsadmin_properties_accessBindings_batchDeleteSignal(OAIObject summary);
    void analyticsadmin_properties_accessBindings_batchGetSignal(OAIGoogleAnalyticsAdminV1alphaBatchGetAccessBindingsResponse summary);
    void analyticsadmin_properties_accessBindings_batchUpdateSignal(OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsResponse summary);
    void analyticsadmin_properties_accessBindings_createSignal(OAIGoogleAnalyticsAdminV1alphaAccessBinding summary);
    void analyticsadmin_properties_accessBindings_listSignal(OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse summary);
    void analyticsadmin_properties_acknowledgeUserDataCollectionSignal(OAIObject summary);
    void analyticsadmin_properties_adSenseLinks_createSignal(OAIGoogleAnalyticsAdminV1alphaAdSenseLink summary);
    void analyticsadmin_properties_adSenseLinks_listSignal(OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse summary);
    void analyticsadmin_properties_audiences_createSignal(OAIGoogleAnalyticsAdminV1alphaAudience summary);
    void analyticsadmin_properties_audiences_listSignal(OAIGoogleAnalyticsAdminV1alphaListAudiencesResponse summary);
    void analyticsadmin_properties_bigQueryLinks_listSignal(OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse summary);
    void analyticsadmin_properties_calculatedMetrics_createSignal(OAIGoogleAnalyticsAdminV1alphaCalculatedMetric summary);
    void analyticsadmin_properties_calculatedMetrics_listSignal(OAIGoogleAnalyticsAdminV1alphaListCalculatedMetricsResponse summary);
    void analyticsadmin_properties_channelGroups_createSignal(OAIGoogleAnalyticsAdminV1alphaChannelGroup summary);
    void analyticsadmin_properties_channelGroups_listSignal(OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse summary);
    void analyticsadmin_properties_conversionEvents_createSignal(OAIGoogleAnalyticsAdminV1alphaConversionEvent summary);
    void analyticsadmin_properties_conversionEvents_listSignal(OAIGoogleAnalyticsAdminV1alphaListConversionEventsResponse summary);
    void analyticsadmin_properties_createSignal(OAIGoogleAnalyticsAdminV1alphaProperty summary);
    void analyticsadmin_properties_createConnectedSiteTagSignal(OAIObject summary);
    void analyticsadmin_properties_createRollupPropertySignal(OAIGoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse summary);
    void analyticsadmin_properties_createSubpropertySignal(OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse summary);
    void analyticsadmin_properties_customDimensions_createSignal(OAIGoogleAnalyticsAdminV1alphaCustomDimension summary);
    void analyticsadmin_properties_customDimensions_listSignal(OAIGoogleAnalyticsAdminV1alphaListCustomDimensionsResponse summary);
    void analyticsadmin_properties_customMetrics_archiveSignal(OAIObject summary);
    void analyticsadmin_properties_customMetrics_createSignal(OAIGoogleAnalyticsAdminV1alphaCustomMetric summary);
    void analyticsadmin_properties_customMetrics_listSignal(OAIGoogleAnalyticsAdminV1alphaListCustomMetricsResponse summary);
    void analyticsadmin_properties_dataStreams_createSignal(OAIGoogleAnalyticsAdminV1alphaDataStream summary);
    void analyticsadmin_properties_dataStreams_eventCreateRules_createSignal(OAIGoogleAnalyticsAdminV1alphaEventCreateRule summary);
    void analyticsadmin_properties_dataStreams_eventCreateRules_listSignal(OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse summary);
    void analyticsadmin_properties_dataStreams_listSignal(OAIGoogleAnalyticsAdminV1alphaListDataStreamsResponse summary);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignal(OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret summary);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignal(OAIGoogleAnalyticsAdminV1alphaListMeasurementProtocolSecretsResponse summary);
    void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_createSignal(OAIGoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema summary);
    void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_listSignal(OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse summary);
    void analyticsadmin_properties_deleteConnectedSiteTagSignal(OAIObject summary);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_approveSignal(OAIGoogleAnalyticsAdminV1alphaApproveDisplayVideo360AdvertiserLinkProposalResponse summary);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_cancelSignal(OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal summary);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_createSignal(OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal summary);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_listSignal(OAIGoogleAnalyticsAdminV1alphaListDisplayVideo360AdvertiserLinkProposalsResponse summary);
    void analyticsadmin_properties_displayVideo360AdvertiserLinks_createSignal(OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLink summary);
    void analyticsadmin_properties_displayVideo360AdvertiserLinks_listSignal(OAIGoogleAnalyticsAdminV1alphaListDisplayVideo360AdvertiserLinksResponse summary);
    void analyticsadmin_properties_expandedDataSets_createSignal(OAIGoogleAnalyticsAdminV1alphaExpandedDataSet summary);
    void analyticsadmin_properties_expandedDataSets_listSignal(OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse summary);
    void analyticsadmin_properties_fetchAutomatedGa4ConfigurationOptOutSignal(OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse summary);
    void analyticsadmin_properties_fetchConnectedGa4PropertySignal(OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse summary);
    void analyticsadmin_properties_firebaseLinks_createSignal(OAIGoogleAnalyticsAdminV1alphaFirebaseLink summary);
    void analyticsadmin_properties_firebaseLinks_listSignal(OAIGoogleAnalyticsAdminV1alphaListFirebaseLinksResponse summary);
    void analyticsadmin_properties_googleAdsLinks_createSignal(OAIGoogleAnalyticsAdminV1alphaGoogleAdsLink summary);
    void analyticsadmin_properties_googleAdsLinks_listSignal(OAIGoogleAnalyticsAdminV1alphaListGoogleAdsLinksResponse summary);
    void analyticsadmin_properties_listSignal(OAIGoogleAnalyticsAdminV1alphaListPropertiesResponse summary);
    void analyticsadmin_properties_listConnectedSiteTagsSignal(OAIGoogleAnalyticsAdminV1alphaListConnectedSiteTagsResponse summary);
    void analyticsadmin_properties_rollupPropertySourceLinks_createSignal(OAIGoogleAnalyticsAdminV1alphaRollupPropertySourceLink summary);
    void analyticsadmin_properties_rollupPropertySourceLinks_listSignal(OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse summary);
    void analyticsadmin_properties_runAccessReportSignal(OAIGoogleAnalyticsAdminV1alphaRunAccessReportResponse summary);
    void analyticsadmin_properties_searchAds360Links_createSignal(OAIGoogleAnalyticsAdminV1alphaSearchAds360Link summary);
    void analyticsadmin_properties_searchAds360Links_listSignal(OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse summary);
    void analyticsadmin_properties_setAutomatedGa4ConfigurationOptOutSignal(OAIObject summary);
    void analyticsadmin_properties_subpropertyEventFilters_createSignal(OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter summary);
    void analyticsadmin_properties_subpropertyEventFilters_deleteSignal(OAIObject summary);
    void analyticsadmin_properties_subpropertyEventFilters_getSignal(OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter summary);
    void analyticsadmin_properties_subpropertyEventFilters_listSignal(OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse summary);
    void analyticsadmin_properties_subpropertyEventFilters_patchSignal(OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter summary);


    void analyticsadmin_properties_accessBindings_batchCreateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaBatchCreateAccessBindingsResponse summary);
    void analyticsadmin_properties_accessBindings_batchDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void analyticsadmin_properties_accessBindings_batchGetSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaBatchGetAccessBindingsResponse summary);
    void analyticsadmin_properties_accessBindings_batchUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsResponse summary);
    void analyticsadmin_properties_accessBindings_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaAccessBinding summary);
    void analyticsadmin_properties_accessBindings_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse summary);
    void analyticsadmin_properties_acknowledgeUserDataCollectionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void analyticsadmin_properties_adSenseLinks_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaAdSenseLink summary);
    void analyticsadmin_properties_adSenseLinks_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse summary);
    void analyticsadmin_properties_audiences_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaAudience summary);
    void analyticsadmin_properties_audiences_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListAudiencesResponse summary);
    void analyticsadmin_properties_bigQueryLinks_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse summary);
    void analyticsadmin_properties_calculatedMetrics_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaCalculatedMetric summary);
    void analyticsadmin_properties_calculatedMetrics_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListCalculatedMetricsResponse summary);
    void analyticsadmin_properties_channelGroups_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaChannelGroup summary);
    void analyticsadmin_properties_channelGroups_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse summary);
    void analyticsadmin_properties_conversionEvents_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaConversionEvent summary);
    void analyticsadmin_properties_conversionEvents_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListConversionEventsResponse summary);
    void analyticsadmin_properties_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaProperty summary);
    void analyticsadmin_properties_createConnectedSiteTagSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void analyticsadmin_properties_createRollupPropertySignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse summary);
    void analyticsadmin_properties_createSubpropertySignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse summary);
    void analyticsadmin_properties_customDimensions_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaCustomDimension summary);
    void analyticsadmin_properties_customDimensions_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListCustomDimensionsResponse summary);
    void analyticsadmin_properties_customMetrics_archiveSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void analyticsadmin_properties_customMetrics_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaCustomMetric summary);
    void analyticsadmin_properties_customMetrics_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListCustomMetricsResponse summary);
    void analyticsadmin_properties_dataStreams_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaDataStream summary);
    void analyticsadmin_properties_dataStreams_eventCreateRules_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaEventCreateRule summary);
    void analyticsadmin_properties_dataStreams_eventCreateRules_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse summary);
    void analyticsadmin_properties_dataStreams_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListDataStreamsResponse summary);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret summary);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListMeasurementProtocolSecretsResponse summary);
    void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema summary);
    void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse summary);
    void analyticsadmin_properties_deleteConnectedSiteTagSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_approveSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaApproveDisplayVideo360AdvertiserLinkProposalResponse summary);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_cancelSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal summary);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal summary);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListDisplayVideo360AdvertiserLinkProposalsResponse summary);
    void analyticsadmin_properties_displayVideo360AdvertiserLinks_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLink summary);
    void analyticsadmin_properties_displayVideo360AdvertiserLinks_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListDisplayVideo360AdvertiserLinksResponse summary);
    void analyticsadmin_properties_expandedDataSets_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaExpandedDataSet summary);
    void analyticsadmin_properties_expandedDataSets_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse summary);
    void analyticsadmin_properties_fetchAutomatedGa4ConfigurationOptOutSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse summary);
    void analyticsadmin_properties_fetchConnectedGa4PropertySignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse summary);
    void analyticsadmin_properties_firebaseLinks_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaFirebaseLink summary);
    void analyticsadmin_properties_firebaseLinks_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListFirebaseLinksResponse summary);
    void analyticsadmin_properties_googleAdsLinks_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaGoogleAdsLink summary);
    void analyticsadmin_properties_googleAdsLinks_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListGoogleAdsLinksResponse summary);
    void analyticsadmin_properties_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListPropertiesResponse summary);
    void analyticsadmin_properties_listConnectedSiteTagsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListConnectedSiteTagsResponse summary);
    void analyticsadmin_properties_rollupPropertySourceLinks_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaRollupPropertySourceLink summary);
    void analyticsadmin_properties_rollupPropertySourceLinks_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse summary);
    void analyticsadmin_properties_runAccessReportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaRunAccessReportResponse summary);
    void analyticsadmin_properties_searchAds360Links_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaSearchAds360Link summary);
    void analyticsadmin_properties_searchAds360Links_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse summary);
    void analyticsadmin_properties_setAutomatedGa4ConfigurationOptOutSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void analyticsadmin_properties_subpropertyEventFilters_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter summary);
    void analyticsadmin_properties_subpropertyEventFilters_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void analyticsadmin_properties_subpropertyEventFilters_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter summary);
    void analyticsadmin_properties_subpropertyEventFilters_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse summary);
    void analyticsadmin_properties_subpropertyEventFilters_patchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter summary);

    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_accessBindings_batchCreateSignalError() instead")
    void analyticsadmin_properties_accessBindings_batchCreateSignalE(OAIGoogleAnalyticsAdminV1alphaBatchCreateAccessBindingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_accessBindings_batchCreateSignalError(OAIGoogleAnalyticsAdminV1alphaBatchCreateAccessBindingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_accessBindings_batchDeleteSignalError() instead")
    void analyticsadmin_properties_accessBindings_batchDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_accessBindings_batchDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_accessBindings_batchGetSignalError() instead")
    void analyticsadmin_properties_accessBindings_batchGetSignalE(OAIGoogleAnalyticsAdminV1alphaBatchGetAccessBindingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_accessBindings_batchGetSignalError(OAIGoogleAnalyticsAdminV1alphaBatchGetAccessBindingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_accessBindings_batchUpdateSignalError() instead")
    void analyticsadmin_properties_accessBindings_batchUpdateSignalE(OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_accessBindings_batchUpdateSignalError(OAIGoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_accessBindings_createSignalError() instead")
    void analyticsadmin_properties_accessBindings_createSignalE(OAIGoogleAnalyticsAdminV1alphaAccessBinding summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_accessBindings_createSignalError(OAIGoogleAnalyticsAdminV1alphaAccessBinding summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_accessBindings_listSignalError() instead")
    void analyticsadmin_properties_accessBindings_listSignalE(OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_accessBindings_listSignalError(OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_acknowledgeUserDataCollectionSignalError() instead")
    void analyticsadmin_properties_acknowledgeUserDataCollectionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_acknowledgeUserDataCollectionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_adSenseLinks_createSignalError() instead")
    void analyticsadmin_properties_adSenseLinks_createSignalE(OAIGoogleAnalyticsAdminV1alphaAdSenseLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_adSenseLinks_createSignalError(OAIGoogleAnalyticsAdminV1alphaAdSenseLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_adSenseLinks_listSignalError() instead")
    void analyticsadmin_properties_adSenseLinks_listSignalE(OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_adSenseLinks_listSignalError(OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_audiences_createSignalError() instead")
    void analyticsadmin_properties_audiences_createSignalE(OAIGoogleAnalyticsAdminV1alphaAudience summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_audiences_createSignalError(OAIGoogleAnalyticsAdminV1alphaAudience summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_audiences_listSignalError() instead")
    void analyticsadmin_properties_audiences_listSignalE(OAIGoogleAnalyticsAdminV1alphaListAudiencesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_audiences_listSignalError(OAIGoogleAnalyticsAdminV1alphaListAudiencesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_bigQueryLinks_listSignalError() instead")
    void analyticsadmin_properties_bigQueryLinks_listSignalE(OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_bigQueryLinks_listSignalError(OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_calculatedMetrics_createSignalError() instead")
    void analyticsadmin_properties_calculatedMetrics_createSignalE(OAIGoogleAnalyticsAdminV1alphaCalculatedMetric summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_calculatedMetrics_createSignalError(OAIGoogleAnalyticsAdminV1alphaCalculatedMetric summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_calculatedMetrics_listSignalError() instead")
    void analyticsadmin_properties_calculatedMetrics_listSignalE(OAIGoogleAnalyticsAdminV1alphaListCalculatedMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_calculatedMetrics_listSignalError(OAIGoogleAnalyticsAdminV1alphaListCalculatedMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_channelGroups_createSignalError() instead")
    void analyticsadmin_properties_channelGroups_createSignalE(OAIGoogleAnalyticsAdminV1alphaChannelGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_channelGroups_createSignalError(OAIGoogleAnalyticsAdminV1alphaChannelGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_channelGroups_listSignalError() instead")
    void analyticsadmin_properties_channelGroups_listSignalE(OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_channelGroups_listSignalError(OAIGoogleAnalyticsAdminV1alphaListChannelGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_conversionEvents_createSignalError() instead")
    void analyticsadmin_properties_conversionEvents_createSignalE(OAIGoogleAnalyticsAdminV1alphaConversionEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_conversionEvents_createSignalError(OAIGoogleAnalyticsAdminV1alphaConversionEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_conversionEvents_listSignalError() instead")
    void analyticsadmin_properties_conversionEvents_listSignalE(OAIGoogleAnalyticsAdminV1alphaListConversionEventsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_conversionEvents_listSignalError(OAIGoogleAnalyticsAdminV1alphaListConversionEventsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_createSignalError() instead")
    void analyticsadmin_properties_createSignalE(OAIGoogleAnalyticsAdminV1alphaProperty summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_createSignalError(OAIGoogleAnalyticsAdminV1alphaProperty summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_createConnectedSiteTagSignalError() instead")
    void analyticsadmin_properties_createConnectedSiteTagSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_createConnectedSiteTagSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_createRollupPropertySignalError() instead")
    void analyticsadmin_properties_createRollupPropertySignalE(OAIGoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_createRollupPropertySignalError(OAIGoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_createSubpropertySignalError() instead")
    void analyticsadmin_properties_createSubpropertySignalE(OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_createSubpropertySignalError(OAIGoogleAnalyticsAdminV1alphaCreateSubpropertyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customDimensions_createSignalError() instead")
    void analyticsadmin_properties_customDimensions_createSignalE(OAIGoogleAnalyticsAdminV1alphaCustomDimension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customDimensions_createSignalError(OAIGoogleAnalyticsAdminV1alphaCustomDimension summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customDimensions_listSignalError() instead")
    void analyticsadmin_properties_customDimensions_listSignalE(OAIGoogleAnalyticsAdminV1alphaListCustomDimensionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customDimensions_listSignalError(OAIGoogleAnalyticsAdminV1alphaListCustomDimensionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customMetrics_archiveSignalError() instead")
    void analyticsadmin_properties_customMetrics_archiveSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customMetrics_archiveSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customMetrics_createSignalError() instead")
    void analyticsadmin_properties_customMetrics_createSignalE(OAIGoogleAnalyticsAdminV1alphaCustomMetric summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customMetrics_createSignalError(OAIGoogleAnalyticsAdminV1alphaCustomMetric summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customMetrics_listSignalError() instead")
    void analyticsadmin_properties_customMetrics_listSignalE(OAIGoogleAnalyticsAdminV1alphaListCustomMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customMetrics_listSignalError(OAIGoogleAnalyticsAdminV1alphaListCustomMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_createSignalError() instead")
    void analyticsadmin_properties_dataStreams_createSignalE(OAIGoogleAnalyticsAdminV1alphaDataStream summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_createSignalError(OAIGoogleAnalyticsAdminV1alphaDataStream summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_eventCreateRules_createSignalError() instead")
    void analyticsadmin_properties_dataStreams_eventCreateRules_createSignalE(OAIGoogleAnalyticsAdminV1alphaEventCreateRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_eventCreateRules_createSignalError(OAIGoogleAnalyticsAdminV1alphaEventCreateRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_eventCreateRules_listSignalError() instead")
    void analyticsadmin_properties_dataStreams_eventCreateRules_listSignalE(OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_eventCreateRules_listSignalError(OAIGoogleAnalyticsAdminV1alphaListEventCreateRulesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_listSignalError() instead")
    void analyticsadmin_properties_dataStreams_listSignalE(OAIGoogleAnalyticsAdminV1alphaListDataStreamsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_listSignalError(OAIGoogleAnalyticsAdminV1alphaListDataStreamsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignalError() instead")
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignalE(OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignalError(OAIGoogleAnalyticsAdminV1alphaMeasurementProtocolSecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignalError() instead")
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignalE(OAIGoogleAnalyticsAdminV1alphaListMeasurementProtocolSecretsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignalError(OAIGoogleAnalyticsAdminV1alphaListMeasurementProtocolSecretsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_createSignalError() instead")
    void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_createSignalE(OAIGoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_createSignalError(OAIGoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_listSignalError() instead")
    void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_listSignalE(OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_listSignalError(OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_deleteConnectedSiteTagSignalError() instead")
    void analyticsadmin_properties_deleteConnectedSiteTagSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_deleteConnectedSiteTagSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_approveSignalError() instead")
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_approveSignalE(OAIGoogleAnalyticsAdminV1alphaApproveDisplayVideo360AdvertiserLinkProposalResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_approveSignalError(OAIGoogleAnalyticsAdminV1alphaApproveDisplayVideo360AdvertiserLinkProposalResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_cancelSignalError() instead")
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_cancelSignalE(OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_cancelSignalError(OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_createSignalError() instead")
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_createSignalE(OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_createSignalError(OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_listSignalError() instead")
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_listSignalE(OAIGoogleAnalyticsAdminV1alphaListDisplayVideo360AdvertiserLinkProposalsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_listSignalError(OAIGoogleAnalyticsAdminV1alphaListDisplayVideo360AdvertiserLinkProposalsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_displayVideo360AdvertiserLinks_createSignalError() instead")
    void analyticsadmin_properties_displayVideo360AdvertiserLinks_createSignalE(OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_displayVideo360AdvertiserLinks_createSignalError(OAIGoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_displayVideo360AdvertiserLinks_listSignalError() instead")
    void analyticsadmin_properties_displayVideo360AdvertiserLinks_listSignalE(OAIGoogleAnalyticsAdminV1alphaListDisplayVideo360AdvertiserLinksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_displayVideo360AdvertiserLinks_listSignalError(OAIGoogleAnalyticsAdminV1alphaListDisplayVideo360AdvertiserLinksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_expandedDataSets_createSignalError() instead")
    void analyticsadmin_properties_expandedDataSets_createSignalE(OAIGoogleAnalyticsAdminV1alphaExpandedDataSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_expandedDataSets_createSignalError(OAIGoogleAnalyticsAdminV1alphaExpandedDataSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_expandedDataSets_listSignalError() instead")
    void analyticsadmin_properties_expandedDataSets_listSignalE(OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_expandedDataSets_listSignalError(OAIGoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_fetchAutomatedGa4ConfigurationOptOutSignalError() instead")
    void analyticsadmin_properties_fetchAutomatedGa4ConfigurationOptOutSignalE(OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_fetchAutomatedGa4ConfigurationOptOutSignalError(OAIGoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_fetchConnectedGa4PropertySignalError() instead")
    void analyticsadmin_properties_fetchConnectedGa4PropertySignalE(OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_fetchConnectedGa4PropertySignalError(OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_firebaseLinks_createSignalError() instead")
    void analyticsadmin_properties_firebaseLinks_createSignalE(OAIGoogleAnalyticsAdminV1alphaFirebaseLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_firebaseLinks_createSignalError(OAIGoogleAnalyticsAdminV1alphaFirebaseLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_firebaseLinks_listSignalError() instead")
    void analyticsadmin_properties_firebaseLinks_listSignalE(OAIGoogleAnalyticsAdminV1alphaListFirebaseLinksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_firebaseLinks_listSignalError(OAIGoogleAnalyticsAdminV1alphaListFirebaseLinksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_googleAdsLinks_createSignalError() instead")
    void analyticsadmin_properties_googleAdsLinks_createSignalE(OAIGoogleAnalyticsAdminV1alphaGoogleAdsLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_googleAdsLinks_createSignalError(OAIGoogleAnalyticsAdminV1alphaGoogleAdsLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_googleAdsLinks_listSignalError() instead")
    void analyticsadmin_properties_googleAdsLinks_listSignalE(OAIGoogleAnalyticsAdminV1alphaListGoogleAdsLinksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_googleAdsLinks_listSignalError(OAIGoogleAnalyticsAdminV1alphaListGoogleAdsLinksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_listSignalError() instead")
    void analyticsadmin_properties_listSignalE(OAIGoogleAnalyticsAdminV1alphaListPropertiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_listSignalError(OAIGoogleAnalyticsAdminV1alphaListPropertiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_listConnectedSiteTagsSignalError() instead")
    void analyticsadmin_properties_listConnectedSiteTagsSignalE(OAIGoogleAnalyticsAdminV1alphaListConnectedSiteTagsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_listConnectedSiteTagsSignalError(OAIGoogleAnalyticsAdminV1alphaListConnectedSiteTagsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_rollupPropertySourceLinks_createSignalError() instead")
    void analyticsadmin_properties_rollupPropertySourceLinks_createSignalE(OAIGoogleAnalyticsAdminV1alphaRollupPropertySourceLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_rollupPropertySourceLinks_createSignalError(OAIGoogleAnalyticsAdminV1alphaRollupPropertySourceLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_rollupPropertySourceLinks_listSignalError() instead")
    void analyticsadmin_properties_rollupPropertySourceLinks_listSignalE(OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_rollupPropertySourceLinks_listSignalError(OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_runAccessReportSignalError() instead")
    void analyticsadmin_properties_runAccessReportSignalE(OAIGoogleAnalyticsAdminV1alphaRunAccessReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_runAccessReportSignalError(OAIGoogleAnalyticsAdminV1alphaRunAccessReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_searchAds360Links_createSignalError() instead")
    void analyticsadmin_properties_searchAds360Links_createSignalE(OAIGoogleAnalyticsAdminV1alphaSearchAds360Link summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_searchAds360Links_createSignalError(OAIGoogleAnalyticsAdminV1alphaSearchAds360Link summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_searchAds360Links_listSignalError() instead")
    void analyticsadmin_properties_searchAds360Links_listSignalE(OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_searchAds360Links_listSignalError(OAIGoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_setAutomatedGa4ConfigurationOptOutSignalError() instead")
    void analyticsadmin_properties_setAutomatedGa4ConfigurationOptOutSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_setAutomatedGa4ConfigurationOptOutSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_subpropertyEventFilters_createSignalError() instead")
    void analyticsadmin_properties_subpropertyEventFilters_createSignalE(OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_subpropertyEventFilters_createSignalError(OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_subpropertyEventFilters_deleteSignalError() instead")
    void analyticsadmin_properties_subpropertyEventFilters_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_subpropertyEventFilters_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_subpropertyEventFilters_getSignalError() instead")
    void analyticsadmin_properties_subpropertyEventFilters_getSignalE(OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_subpropertyEventFilters_getSignalError(OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_subpropertyEventFilters_listSignalError() instead")
    void analyticsadmin_properties_subpropertyEventFilters_listSignalE(OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_subpropertyEventFilters_listSignalError(OAIGoogleAnalyticsAdminV1alphaListSubpropertyEventFiltersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_subpropertyEventFilters_patchSignalError() instead")
    void analyticsadmin_properties_subpropertyEventFilters_patchSignalE(OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_subpropertyEventFilters_patchSignalError(OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_accessBindings_batchCreateSignalErrorFull() instead")
    void analyticsadmin_properties_accessBindings_batchCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_accessBindings_batchCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_accessBindings_batchDeleteSignalErrorFull() instead")
    void analyticsadmin_properties_accessBindings_batchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_accessBindings_batchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_accessBindings_batchGetSignalErrorFull() instead")
    void analyticsadmin_properties_accessBindings_batchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_accessBindings_batchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_accessBindings_batchUpdateSignalErrorFull() instead")
    void analyticsadmin_properties_accessBindings_batchUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_accessBindings_batchUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_accessBindings_createSignalErrorFull() instead")
    void analyticsadmin_properties_accessBindings_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_accessBindings_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_accessBindings_listSignalErrorFull() instead")
    void analyticsadmin_properties_accessBindings_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_accessBindings_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_acknowledgeUserDataCollectionSignalErrorFull() instead")
    void analyticsadmin_properties_acknowledgeUserDataCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_acknowledgeUserDataCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_adSenseLinks_createSignalErrorFull() instead")
    void analyticsadmin_properties_adSenseLinks_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_adSenseLinks_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_adSenseLinks_listSignalErrorFull() instead")
    void analyticsadmin_properties_adSenseLinks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_adSenseLinks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_audiences_createSignalErrorFull() instead")
    void analyticsadmin_properties_audiences_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_audiences_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_audiences_listSignalErrorFull() instead")
    void analyticsadmin_properties_audiences_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_audiences_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_bigQueryLinks_listSignalErrorFull() instead")
    void analyticsadmin_properties_bigQueryLinks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_bigQueryLinks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_calculatedMetrics_createSignalErrorFull() instead")
    void analyticsadmin_properties_calculatedMetrics_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_calculatedMetrics_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_calculatedMetrics_listSignalErrorFull() instead")
    void analyticsadmin_properties_calculatedMetrics_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_calculatedMetrics_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_channelGroups_createSignalErrorFull() instead")
    void analyticsadmin_properties_channelGroups_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_channelGroups_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_channelGroups_listSignalErrorFull() instead")
    void analyticsadmin_properties_channelGroups_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_channelGroups_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_conversionEvents_createSignalErrorFull() instead")
    void analyticsadmin_properties_conversionEvents_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_conversionEvents_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_conversionEvents_listSignalErrorFull() instead")
    void analyticsadmin_properties_conversionEvents_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_conversionEvents_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_createSignalErrorFull() instead")
    void analyticsadmin_properties_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_createConnectedSiteTagSignalErrorFull() instead")
    void analyticsadmin_properties_createConnectedSiteTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_createConnectedSiteTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_createRollupPropertySignalErrorFull() instead")
    void analyticsadmin_properties_createRollupPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_createRollupPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_createSubpropertySignalErrorFull() instead")
    void analyticsadmin_properties_createSubpropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_createSubpropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customDimensions_createSignalErrorFull() instead")
    void analyticsadmin_properties_customDimensions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customDimensions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customDimensions_listSignalErrorFull() instead")
    void analyticsadmin_properties_customDimensions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customDimensions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customMetrics_archiveSignalErrorFull() instead")
    void analyticsadmin_properties_customMetrics_archiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customMetrics_archiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customMetrics_createSignalErrorFull() instead")
    void analyticsadmin_properties_customMetrics_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customMetrics_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_customMetrics_listSignalErrorFull() instead")
    void analyticsadmin_properties_customMetrics_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_customMetrics_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_createSignalErrorFull() instead")
    void analyticsadmin_properties_dataStreams_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_eventCreateRules_createSignalErrorFull() instead")
    void analyticsadmin_properties_dataStreams_eventCreateRules_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_eventCreateRules_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_eventCreateRules_listSignalErrorFull() instead")
    void analyticsadmin_properties_dataStreams_eventCreateRules_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_eventCreateRules_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_listSignalErrorFull() instead")
    void analyticsadmin_properties_dataStreams_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignalErrorFull() instead")
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignalErrorFull() instead")
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_measurementProtocolSecrets_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_createSignalErrorFull() instead")
    void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_listSignalErrorFull() instead")
    void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_dataStreams_sKAdNetworkConversionValueSchema_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_deleteConnectedSiteTagSignalErrorFull() instead")
    void analyticsadmin_properties_deleteConnectedSiteTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_deleteConnectedSiteTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_approveSignalErrorFull() instead")
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_approveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_approveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_cancelSignalErrorFull() instead")
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_createSignalErrorFull() instead")
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_listSignalErrorFull() instead")
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_displayVideo360AdvertiserLinkProposals_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_displayVideo360AdvertiserLinks_createSignalErrorFull() instead")
    void analyticsadmin_properties_displayVideo360AdvertiserLinks_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_displayVideo360AdvertiserLinks_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_displayVideo360AdvertiserLinks_listSignalErrorFull() instead")
    void analyticsadmin_properties_displayVideo360AdvertiserLinks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_displayVideo360AdvertiserLinks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_expandedDataSets_createSignalErrorFull() instead")
    void analyticsadmin_properties_expandedDataSets_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_expandedDataSets_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_expandedDataSets_listSignalErrorFull() instead")
    void analyticsadmin_properties_expandedDataSets_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_expandedDataSets_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_fetchAutomatedGa4ConfigurationOptOutSignalErrorFull() instead")
    void analyticsadmin_properties_fetchAutomatedGa4ConfigurationOptOutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_fetchAutomatedGa4ConfigurationOptOutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_fetchConnectedGa4PropertySignalErrorFull() instead")
    void analyticsadmin_properties_fetchConnectedGa4PropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_fetchConnectedGa4PropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_firebaseLinks_createSignalErrorFull() instead")
    void analyticsadmin_properties_firebaseLinks_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_firebaseLinks_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_firebaseLinks_listSignalErrorFull() instead")
    void analyticsadmin_properties_firebaseLinks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_firebaseLinks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_googleAdsLinks_createSignalErrorFull() instead")
    void analyticsadmin_properties_googleAdsLinks_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_googleAdsLinks_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_googleAdsLinks_listSignalErrorFull() instead")
    void analyticsadmin_properties_googleAdsLinks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_googleAdsLinks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_listSignalErrorFull() instead")
    void analyticsadmin_properties_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_listConnectedSiteTagsSignalErrorFull() instead")
    void analyticsadmin_properties_listConnectedSiteTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_listConnectedSiteTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_rollupPropertySourceLinks_createSignalErrorFull() instead")
    void analyticsadmin_properties_rollupPropertySourceLinks_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_rollupPropertySourceLinks_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_rollupPropertySourceLinks_listSignalErrorFull() instead")
    void analyticsadmin_properties_rollupPropertySourceLinks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_rollupPropertySourceLinks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_runAccessReportSignalErrorFull() instead")
    void analyticsadmin_properties_runAccessReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_runAccessReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_searchAds360Links_createSignalErrorFull() instead")
    void analyticsadmin_properties_searchAds360Links_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_searchAds360Links_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_searchAds360Links_listSignalErrorFull() instead")
    void analyticsadmin_properties_searchAds360Links_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_searchAds360Links_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_setAutomatedGa4ConfigurationOptOutSignalErrorFull() instead")
    void analyticsadmin_properties_setAutomatedGa4ConfigurationOptOutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_setAutomatedGa4ConfigurationOptOutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_subpropertyEventFilters_createSignalErrorFull() instead")
    void analyticsadmin_properties_subpropertyEventFilters_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_subpropertyEventFilters_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_subpropertyEventFilters_deleteSignalErrorFull() instead")
    void analyticsadmin_properties_subpropertyEventFilters_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_subpropertyEventFilters_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_subpropertyEventFilters_getSignalErrorFull() instead")
    void analyticsadmin_properties_subpropertyEventFilters_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_subpropertyEventFilters_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_subpropertyEventFilters_listSignalErrorFull() instead")
    void analyticsadmin_properties_subpropertyEventFilters_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_subpropertyEventFilters_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsadmin_properties_subpropertyEventFilters_patchSignalErrorFull() instead")
    void analyticsadmin_properties_subpropertyEventFilters_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsadmin_properties_subpropertyEventFilters_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
