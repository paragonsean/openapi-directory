/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaAccessBinding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaAccessBinding::OAIGoogleAnalyticsAdminV1alphaAccessBinding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaAccessBinding::OAIGoogleAnalyticsAdminV1alphaAccessBinding() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaAccessBinding::~OAIGoogleAnalyticsAdminV1alphaAccessBinding() {}

void OAIGoogleAnalyticsAdminV1alphaAccessBinding::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaAccessBinding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaAccessBinding::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAccessBinding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaAccessBinding::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaAccessBinding::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1alphaAccessBinding::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessBinding::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessBinding::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIGoogleAnalyticsAdminV1alphaAccessBinding::getRoles() const {
    return m_roles;
}
void OAIGoogleAnalyticsAdminV1alphaAccessBinding::setRoles(const QList<QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessBinding::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessBinding::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAccessBinding::getUser() const {
    return m_user;
}
void OAIGoogleAnalyticsAdminV1alphaAccessBinding::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessBinding::is_user_Set() const{
    return m_user_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessBinding::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessBinding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaAccessBinding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
