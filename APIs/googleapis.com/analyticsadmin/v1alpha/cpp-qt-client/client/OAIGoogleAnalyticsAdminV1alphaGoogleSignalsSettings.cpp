/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::~OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings() {}

void OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::initializeModel() {

    m_consent_isSet = false;
    m_consent_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::fromJsonObject(QJsonObject json) {

    m_consent_isValid = ::OpenAPI::fromJsonValue(m_consent, json[QString("consent")]);
    m_consent_isSet = !json[QString("consent")].isNull() && m_consent_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_isSet) {
        obj.insert(QString("consent"), ::OpenAPI::toJsonValue(m_consent));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::getConsent() const {
    return m_consent;
}
void OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::setConsent(const QString &consent) {
    m_consent = consent;
    m_consent_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::is_consent_Set() const{
    return m_consent_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::is_consent_Valid() const{
    return m_consent_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::getState() const {
    return m_state;
}
void OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaGoogleSignalsSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
