/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::~OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse() {}

void OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::initializeModel() {

    m_bigquery_links_isSet = false;
    m_bigquery_links_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::fromJsonObject(QJsonObject json) {

    m_bigquery_links_isValid = ::OpenAPI::fromJsonValue(m_bigquery_links, json[QString("bigqueryLinks")]);
    m_bigquery_links_isSet = !json[QString("bigqueryLinks")].isNull() && m_bigquery_links_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bigquery_links.size() > 0) {
        obj.insert(QString("bigqueryLinks"), ::OpenAPI::toJsonValue(m_bigquery_links));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIGoogleAnalyticsAdminV1alphaBigQueryLink> OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::getBigqueryLinks() const {
    return m_bigquery_links;
}
void OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::setBigqueryLinks(const QList<OAIGoogleAnalyticsAdminV1alphaBigQueryLink> &bigquery_links) {
    m_bigquery_links = bigquery_links;
    m_bigquery_links_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::is_bigquery_links_Set() const{
    return m_bigquery_links_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::is_bigquery_links_Valid() const{
    return m_bigquery_links_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bigquery_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaListBigQueryLinksResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
