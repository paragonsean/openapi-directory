/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::~OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse() {}

void OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_skadnetwork_conversion_value_schemas_isSet = false;
    m_skadnetwork_conversion_value_schemas_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_skadnetwork_conversion_value_schemas_isValid = ::OpenAPI::fromJsonValue(m_skadnetwork_conversion_value_schemas, json[QString("skadnetworkConversionValueSchemas")]);
    m_skadnetwork_conversion_value_schemas_isSet = !json[QString("skadnetworkConversionValueSchemas")].isNull() && m_skadnetwork_conversion_value_schemas_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_skadnetwork_conversion_value_schemas.size() > 0) {
        obj.insert(QString("skadnetworkConversionValueSchemas"), ::OpenAPI::toJsonValue(m_skadnetwork_conversion_value_schemas));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIGoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema> OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::getSkadnetworkConversionValueSchemas() const {
    return m_skadnetwork_conversion_value_schemas;
}
void OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::setSkadnetworkConversionValueSchemas(const QList<OAIGoogleAnalyticsAdminV1alphaSKAdNetworkConversionValueSchema> &skadnetwork_conversion_value_schemas) {
    m_skadnetwork_conversion_value_schemas = skadnetwork_conversion_value_schemas;
    m_skadnetwork_conversion_value_schemas_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::is_skadnetwork_conversion_value_schemas_Set() const{
    return m_skadnetwork_conversion_value_schemas_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::is_skadnetwork_conversion_value_schemas_Valid() const{
    return m_skadnetwork_conversion_value_schemas_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skadnetwork_conversion_value_schemas.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaListSKAdNetworkConversionValueSchemasResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
