/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::~OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter() {}

void OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::initializeModel() {

    m_filter_expression_isSet = false;
    m_filter_expression_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::fromJsonObject(QJsonObject json) {

    m_filter_expression_isValid = ::OpenAPI::fromJsonValue(m_filter_expression, json[QString("filterExpression")]);
    m_filter_expression_isSet = !json[QString("filterExpression")].isNull() && m_filter_expression_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_expression.isSet()) {
        obj.insert(QString("filterExpression"), ::OpenAPI::toJsonValue(m_filter_expression));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::getFilterExpression() const {
    return m_filter_expression;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::setFilterExpression(const OAIGoogleAnalyticsAdminV1alphaAudienceFilterExpression &filter_expression) {
    m_filter_expression = filter_expression;
    m_filter_expression_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::is_filter_expression_Set() const{
    return m_filter_expression_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::is_filter_expression_Valid() const{
    return m_filter_expression_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::getScope() const {
    return m_scope;
}
void OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaAudienceSimpleFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
