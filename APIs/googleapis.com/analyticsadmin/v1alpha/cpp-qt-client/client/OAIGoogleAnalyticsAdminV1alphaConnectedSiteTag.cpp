/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::~OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag() {}

void OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_tag_id_isSet = false;
    m_tag_id_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_tag_id_isValid = ::OpenAPI::fromJsonValue(m_tag_id, json[QString("tagId")]);
    m_tag_id_isSet = !json[QString("tagId")].isNull() && m_tag_id_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_tag_id_isSet) {
        obj.insert(QString("tagId"), ::OpenAPI::toJsonValue(m_tag_id));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::getTagId() const {
    return m_tag_id;
}
void OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::setTagId(const QString &tag_id) {
    m_tag_id = tag_id;
    m_tag_id_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::is_tag_id_Set() const{
    return m_tag_id_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::is_tag_id_Valid() const{
    return m_tag_id_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaConnectedSiteTag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
