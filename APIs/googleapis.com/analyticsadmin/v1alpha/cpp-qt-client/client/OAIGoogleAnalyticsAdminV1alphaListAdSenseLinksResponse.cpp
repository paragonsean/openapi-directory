/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::~OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse() {}

void OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::initializeModel() {

    m_adsense_links_isSet = false;
    m_adsense_links_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::fromJsonObject(QJsonObject json) {

    m_adsense_links_isValid = ::OpenAPI::fromJsonValue(m_adsense_links, json[QString("adsenseLinks")]);
    m_adsense_links_isSet = !json[QString("adsenseLinks")].isNull() && m_adsense_links_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_adsense_links.size() > 0) {
        obj.insert(QString("adsenseLinks"), ::OpenAPI::toJsonValue(m_adsense_links));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIGoogleAnalyticsAdminV1alphaAdSenseLink> OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::getAdsenseLinks() const {
    return m_adsense_links;
}
void OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::setAdsenseLinks(const QList<OAIGoogleAnalyticsAdminV1alphaAdSenseLink> &adsense_links) {
    m_adsense_links = adsense_links;
    m_adsense_links_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::is_adsense_links_Set() const{
    return m_adsense_links_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::is_adsense_links_Valid() const{
    return m_adsense_links_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adsense_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaListAdSenseLinksResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
