/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaAudience.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaAudience::OAIGoogleAnalyticsAdminV1alphaAudience(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaAudience::OAIGoogleAnalyticsAdminV1alphaAudience() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaAudience::~OAIGoogleAnalyticsAdminV1alphaAudience() {}

void OAIGoogleAnalyticsAdminV1alphaAudience::initializeModel() {

    m_ads_personalization_enabled_isSet = false;
    m_ads_personalization_enabled_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_event_trigger_isSet = false;
    m_event_trigger_isValid = false;

    m_exclusion_duration_mode_isSet = false;
    m_exclusion_duration_mode_isValid = false;

    m_filter_clauses_isSet = false;
    m_filter_clauses_isValid = false;

    m_membership_duration_days_isSet = false;
    m_membership_duration_days_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaAudience::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaAudience::fromJsonObject(QJsonObject json) {

    m_ads_personalization_enabled_isValid = ::OpenAPI::fromJsonValue(m_ads_personalization_enabled, json[QString("adsPersonalizationEnabled")]);
    m_ads_personalization_enabled_isSet = !json[QString("adsPersonalizationEnabled")].isNull() && m_ads_personalization_enabled_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_event_trigger_isValid = ::OpenAPI::fromJsonValue(m_event_trigger, json[QString("eventTrigger")]);
    m_event_trigger_isSet = !json[QString("eventTrigger")].isNull() && m_event_trigger_isValid;

    m_exclusion_duration_mode_isValid = ::OpenAPI::fromJsonValue(m_exclusion_duration_mode, json[QString("exclusionDurationMode")]);
    m_exclusion_duration_mode_isSet = !json[QString("exclusionDurationMode")].isNull() && m_exclusion_duration_mode_isValid;

    m_filter_clauses_isValid = ::OpenAPI::fromJsonValue(m_filter_clauses, json[QString("filterClauses")]);
    m_filter_clauses_isSet = !json[QString("filterClauses")].isNull() && m_filter_clauses_isValid;

    m_membership_duration_days_isValid = ::OpenAPI::fromJsonValue(m_membership_duration_days, json[QString("membershipDurationDays")]);
    m_membership_duration_days_isSet = !json[QString("membershipDurationDays")].isNull() && m_membership_duration_days_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAudience::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaAudience::asJsonObject() const {
    QJsonObject obj;
    if (m_ads_personalization_enabled_isSet) {
        obj.insert(QString("adsPersonalizationEnabled"), ::OpenAPI::toJsonValue(m_ads_personalization_enabled));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_event_trigger.isSet()) {
        obj.insert(QString("eventTrigger"), ::OpenAPI::toJsonValue(m_event_trigger));
    }
    if (m_exclusion_duration_mode_isSet) {
        obj.insert(QString("exclusionDurationMode"), ::OpenAPI::toJsonValue(m_exclusion_duration_mode));
    }
    if (m_filter_clauses.size() > 0) {
        obj.insert(QString("filterClauses"), ::OpenAPI::toJsonValue(m_filter_clauses));
    }
    if (m_membership_duration_days_isSet) {
        obj.insert(QString("membershipDurationDays"), ::OpenAPI::toJsonValue(m_membership_duration_days));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::isAdsPersonalizationEnabled() const {
    return m_ads_personalization_enabled;
}
void OAIGoogleAnalyticsAdminV1alphaAudience::setAdsPersonalizationEnabled(const bool &ads_personalization_enabled) {
    m_ads_personalization_enabled = ads_personalization_enabled;
    m_ads_personalization_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_ads_personalization_enabled_Set() const{
    return m_ads_personalization_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_ads_personalization_enabled_Valid() const{
    return m_ads_personalization_enabled_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAudience::getDescription() const {
    return m_description;
}
void OAIGoogleAnalyticsAdminV1alphaAudience::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAudience::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleAnalyticsAdminV1alphaAudience::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger OAIGoogleAnalyticsAdminV1alphaAudience::getEventTrigger() const {
    return m_event_trigger;
}
void OAIGoogleAnalyticsAdminV1alphaAudience::setEventTrigger(const OAIGoogleAnalyticsAdminV1alphaAudienceEventTrigger &event_trigger) {
    m_event_trigger = event_trigger;
    m_event_trigger_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_event_trigger_Set() const{
    return m_event_trigger_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_event_trigger_Valid() const{
    return m_event_trigger_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAudience::getExclusionDurationMode() const {
    return m_exclusion_duration_mode;
}
void OAIGoogleAnalyticsAdminV1alphaAudience::setExclusionDurationMode(const QString &exclusion_duration_mode) {
    m_exclusion_duration_mode = exclusion_duration_mode;
    m_exclusion_duration_mode_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_exclusion_duration_mode_Set() const{
    return m_exclusion_duration_mode_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_exclusion_duration_mode_Valid() const{
    return m_exclusion_duration_mode_isValid;
}

QList<OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause> OAIGoogleAnalyticsAdminV1alphaAudience::getFilterClauses() const {
    return m_filter_clauses;
}
void OAIGoogleAnalyticsAdminV1alphaAudience::setFilterClauses(const QList<OAIGoogleAnalyticsAdminV1alphaAudienceFilterClause> &filter_clauses) {
    m_filter_clauses = filter_clauses;
    m_filter_clauses_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_filter_clauses_Set() const{
    return m_filter_clauses_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_filter_clauses_Valid() const{
    return m_filter_clauses_isValid;
}

qint32 OAIGoogleAnalyticsAdminV1alphaAudience::getMembershipDurationDays() const {
    return m_membership_duration_days;
}
void OAIGoogleAnalyticsAdminV1alphaAudience::setMembershipDurationDays(const qint32 &membership_duration_days) {
    m_membership_duration_days = membership_duration_days;
    m_membership_duration_days_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_membership_duration_days_Set() const{
    return m_membership_duration_days_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_membership_duration_days_Valid() const{
    return m_membership_duration_days_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAudience::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1alphaAudience::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ads_personalization_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_duration_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_clauses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_duration_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaAudience::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
