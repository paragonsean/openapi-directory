/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::~OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange() {}

void OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_resource_after_change_isSet = false;
    m_resource_after_change_isValid = false;

    m_resource_before_change_isSet = false;
    m_resource_before_change_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_resource_after_change_isValid = ::OpenAPI::fromJsonValue(m_resource_after_change, json[QString("resourceAfterChange")]);
    m_resource_after_change_isSet = !json[QString("resourceAfterChange")].isNull() && m_resource_after_change_isValid;

    m_resource_before_change_isValid = ::OpenAPI::fromJsonValue(m_resource_before_change, json[QString("resourceBeforeChange")]);
    m_resource_before_change_isSet = !json[QString("resourceBeforeChange")].isNull() && m_resource_before_change_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_resource_after_change.isSet()) {
        obj.insert(QString("resourceAfterChange"), ::OpenAPI::toJsonValue(m_resource_after_change));
    }
    if (m_resource_before_change.isSet()) {
        obj.insert(QString("resourceBeforeChange"), ::OpenAPI::toJsonValue(m_resource_before_change));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::getAction() const {
    return m_action;
}
void OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::is_action_Set() const{
    return m_action_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::getResource() const {
    return m_resource;
}
void OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::is_resource_Valid() const{
    return m_resource_isValid;
}

OAIGoogleAnalyticsAdminV1alphaChangeHistoryChangeChangeHistoryResource OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::getResourceAfterChange() const {
    return m_resource_after_change;
}
void OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::setResourceAfterChange(const OAIGoogleAnalyticsAdminV1alphaChangeHistoryChangeChangeHistoryResource &resource_after_change) {
    m_resource_after_change = resource_after_change;
    m_resource_after_change_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::is_resource_after_change_Set() const{
    return m_resource_after_change_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::is_resource_after_change_Valid() const{
    return m_resource_after_change_isValid;
}

OAIGoogleAnalyticsAdminV1alphaChangeHistoryChangeChangeHistoryResource OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::getResourceBeforeChange() const {
    return m_resource_before_change;
}
void OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::setResourceBeforeChange(const OAIGoogleAnalyticsAdminV1alphaChangeHistoryChangeChangeHistoryResource &resource_before_change) {
    m_resource_before_change = resource_before_change;
    m_resource_before_change_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::is_resource_before_change_Set() const{
    return m_resource_before_change_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::is_resource_before_change_Valid() const{
    return m_resource_before_change_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_after_change.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_before_change.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaChangeHistoryChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
