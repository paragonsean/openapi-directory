/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaPostbackWindow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaPostbackWindow::OAIGoogleAnalyticsAdminV1alphaPostbackWindow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaPostbackWindow::OAIGoogleAnalyticsAdminV1alphaPostbackWindow() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaPostbackWindow::~OAIGoogleAnalyticsAdminV1alphaPostbackWindow() {}

void OAIGoogleAnalyticsAdminV1alphaPostbackWindow::initializeModel() {

    m_conversion_values_isSet = false;
    m_conversion_values_isValid = false;

    m_postback_window_settings_enabled_isSet = false;
    m_postback_window_settings_enabled_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaPostbackWindow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaPostbackWindow::fromJsonObject(QJsonObject json) {

    m_conversion_values_isValid = ::OpenAPI::fromJsonValue(m_conversion_values, json[QString("conversionValues")]);
    m_conversion_values_isSet = !json[QString("conversionValues")].isNull() && m_conversion_values_isValid;

    m_postback_window_settings_enabled_isValid = ::OpenAPI::fromJsonValue(m_postback_window_settings_enabled, json[QString("postbackWindowSettingsEnabled")]);
    m_postback_window_settings_enabled_isSet = !json[QString("postbackWindowSettingsEnabled")].isNull() && m_postback_window_settings_enabled_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaPostbackWindow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaPostbackWindow::asJsonObject() const {
    QJsonObject obj;
    if (m_conversion_values.size() > 0) {
        obj.insert(QString("conversionValues"), ::OpenAPI::toJsonValue(m_conversion_values));
    }
    if (m_postback_window_settings_enabled_isSet) {
        obj.insert(QString("postbackWindowSettingsEnabled"), ::OpenAPI::toJsonValue(m_postback_window_settings_enabled));
    }
    return obj;
}

QList<OAIGoogleAnalyticsAdminV1alphaConversionValues> OAIGoogleAnalyticsAdminV1alphaPostbackWindow::getConversionValues() const {
    return m_conversion_values;
}
void OAIGoogleAnalyticsAdminV1alphaPostbackWindow::setConversionValues(const QList<OAIGoogleAnalyticsAdminV1alphaConversionValues> &conversion_values) {
    m_conversion_values = conversion_values;
    m_conversion_values_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaPostbackWindow::is_conversion_values_Set() const{
    return m_conversion_values_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaPostbackWindow::is_conversion_values_Valid() const{
    return m_conversion_values_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaPostbackWindow::isPostbackWindowSettingsEnabled() const {
    return m_postback_window_settings_enabled;
}
void OAIGoogleAnalyticsAdminV1alphaPostbackWindow::setPostbackWindowSettingsEnabled(const bool &postback_window_settings_enabled) {
    m_postback_window_settings_enabled = postback_window_settings_enabled;
    m_postback_window_settings_enabled_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaPostbackWindow::is_postback_window_settings_enabled_Set() const{
    return m_postback_window_settings_enabled_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaPostbackWindow::is_postback_window_settings_enabled_Valid() const{
    return m_postback_window_settings_enabled_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaPostbackWindow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversion_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_postback_window_settings_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaPostbackWindow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
