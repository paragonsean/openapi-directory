/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse::OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse::OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse::~OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse() {}

void OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse::initializeModel() {

    m_property_isSet = false;
    m_property_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse::fromJsonObject(QJsonObject json) {

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_property_isSet) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse::getProperty() const {
    return m_property;
}
void OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse::is_property_Set() const{
    return m_property_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse::is_property_Valid() const{
    return m_property_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaFetchConnectedGa4PropertyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
