/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::~OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause() {}

void OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::initializeModel() {

    m_filter_clause_type_isSet = false;
    m_filter_clause_type_isValid = false;

    m_filter_expression_isSet = false;
    m_filter_expression_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::fromJsonObject(QJsonObject json) {

    m_filter_clause_type_isValid = ::OpenAPI::fromJsonValue(m_filter_clause_type, json[QString("filterClauseType")]);
    m_filter_clause_type_isSet = !json[QString("filterClauseType")].isNull() && m_filter_clause_type_isValid;

    m_filter_expression_isValid = ::OpenAPI::fromJsonValue(m_filter_expression, json[QString("filterExpression")]);
    m_filter_expression_isSet = !json[QString("filterExpression")].isNull() && m_filter_expression_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_clause_type_isSet) {
        obj.insert(QString("filterClauseType"), ::OpenAPI::toJsonValue(m_filter_clause_type));
    }
    if (m_filter_expression.isSet()) {
        obj.insert(QString("filterExpression"), ::OpenAPI::toJsonValue(m_filter_expression));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::getFilterClauseType() const {
    return m_filter_clause_type;
}
void OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::setFilterClauseType(const QString &filter_clause_type) {
    m_filter_clause_type = filter_clause_type;
    m_filter_clause_type_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::is_filter_clause_type_Set() const{
    return m_filter_clause_type_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::is_filter_clause_type_Valid() const{
    return m_filter_clause_type_isValid;
}

OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::getFilterExpression() const {
    return m_filter_expression;
}
void OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::setFilterExpression(const OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression &filter_expression) {
    m_filter_expression = filter_expression;
    m_filter_expression_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::is_filter_expression_Set() const{
    return m_filter_expression_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::is_filter_expression_Valid() const{
    return m_filter_expression_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_clause_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
