/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaAttributionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaAttributionSettings::OAIGoogleAnalyticsAdminV1alphaAttributionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaAttributionSettings::OAIGoogleAnalyticsAdminV1alphaAttributionSettings() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaAttributionSettings::~OAIGoogleAnalyticsAdminV1alphaAttributionSettings() {}

void OAIGoogleAnalyticsAdminV1alphaAttributionSettings::initializeModel() {

    m_acquisition_conversion_event_lookback_window_isSet = false;
    m_acquisition_conversion_event_lookback_window_isValid = false;

    m_ads_web_conversion_data_export_scope_isSet = false;
    m_ads_web_conversion_data_export_scope_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_other_conversion_event_lookback_window_isSet = false;
    m_other_conversion_event_lookback_window_isValid = false;

    m_reporting_attribution_model_isSet = false;
    m_reporting_attribution_model_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaAttributionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaAttributionSettings::fromJsonObject(QJsonObject json) {

    m_acquisition_conversion_event_lookback_window_isValid = ::OpenAPI::fromJsonValue(m_acquisition_conversion_event_lookback_window, json[QString("acquisitionConversionEventLookbackWindow")]);
    m_acquisition_conversion_event_lookback_window_isSet = !json[QString("acquisitionConversionEventLookbackWindow")].isNull() && m_acquisition_conversion_event_lookback_window_isValid;

    m_ads_web_conversion_data_export_scope_isValid = ::OpenAPI::fromJsonValue(m_ads_web_conversion_data_export_scope, json[QString("adsWebConversionDataExportScope")]);
    m_ads_web_conversion_data_export_scope_isSet = !json[QString("adsWebConversionDataExportScope")].isNull() && m_ads_web_conversion_data_export_scope_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_other_conversion_event_lookback_window_isValid = ::OpenAPI::fromJsonValue(m_other_conversion_event_lookback_window, json[QString("otherConversionEventLookbackWindow")]);
    m_other_conversion_event_lookback_window_isSet = !json[QString("otherConversionEventLookbackWindow")].isNull() && m_other_conversion_event_lookback_window_isValid;

    m_reporting_attribution_model_isValid = ::OpenAPI::fromJsonValue(m_reporting_attribution_model, json[QString("reportingAttributionModel")]);
    m_reporting_attribution_model_isSet = !json[QString("reportingAttributionModel")].isNull() && m_reporting_attribution_model_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAttributionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaAttributionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_acquisition_conversion_event_lookback_window_isSet) {
        obj.insert(QString("acquisitionConversionEventLookbackWindow"), ::OpenAPI::toJsonValue(m_acquisition_conversion_event_lookback_window));
    }
    if (m_ads_web_conversion_data_export_scope_isSet) {
        obj.insert(QString("adsWebConversionDataExportScope"), ::OpenAPI::toJsonValue(m_ads_web_conversion_data_export_scope));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_other_conversion_event_lookback_window_isSet) {
        obj.insert(QString("otherConversionEventLookbackWindow"), ::OpenAPI::toJsonValue(m_other_conversion_event_lookback_window));
    }
    if (m_reporting_attribution_model_isSet) {
        obj.insert(QString("reportingAttributionModel"), ::OpenAPI::toJsonValue(m_reporting_attribution_model));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaAttributionSettings::getAcquisitionConversionEventLookbackWindow() const {
    return m_acquisition_conversion_event_lookback_window;
}
void OAIGoogleAnalyticsAdminV1alphaAttributionSettings::setAcquisitionConversionEventLookbackWindow(const QString &acquisition_conversion_event_lookback_window) {
    m_acquisition_conversion_event_lookback_window = acquisition_conversion_event_lookback_window;
    m_acquisition_conversion_event_lookback_window_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAttributionSettings::is_acquisition_conversion_event_lookback_window_Set() const{
    return m_acquisition_conversion_event_lookback_window_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAttributionSettings::is_acquisition_conversion_event_lookback_window_Valid() const{
    return m_acquisition_conversion_event_lookback_window_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAttributionSettings::getAdsWebConversionDataExportScope() const {
    return m_ads_web_conversion_data_export_scope;
}
void OAIGoogleAnalyticsAdminV1alphaAttributionSettings::setAdsWebConversionDataExportScope(const QString &ads_web_conversion_data_export_scope) {
    m_ads_web_conversion_data_export_scope = ads_web_conversion_data_export_scope;
    m_ads_web_conversion_data_export_scope_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAttributionSettings::is_ads_web_conversion_data_export_scope_Set() const{
    return m_ads_web_conversion_data_export_scope_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAttributionSettings::is_ads_web_conversion_data_export_scope_Valid() const{
    return m_ads_web_conversion_data_export_scope_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAttributionSettings::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1alphaAttributionSettings::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAttributionSettings::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAttributionSettings::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAttributionSettings::getOtherConversionEventLookbackWindow() const {
    return m_other_conversion_event_lookback_window;
}
void OAIGoogleAnalyticsAdminV1alphaAttributionSettings::setOtherConversionEventLookbackWindow(const QString &other_conversion_event_lookback_window) {
    m_other_conversion_event_lookback_window = other_conversion_event_lookback_window;
    m_other_conversion_event_lookback_window_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAttributionSettings::is_other_conversion_event_lookback_window_Set() const{
    return m_other_conversion_event_lookback_window_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAttributionSettings::is_other_conversion_event_lookback_window_Valid() const{
    return m_other_conversion_event_lookback_window_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaAttributionSettings::getReportingAttributionModel() const {
    return m_reporting_attribution_model;
}
void OAIGoogleAnalyticsAdminV1alphaAttributionSettings::setReportingAttributionModel(const QString &reporting_attribution_model) {
    m_reporting_attribution_model = reporting_attribution_model;
    m_reporting_attribution_model_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaAttributionSettings::is_reporting_attribution_model_Set() const{
    return m_reporting_attribution_model_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaAttributionSettings::is_reporting_attribution_model_Valid() const{
    return m_reporting_attribution_model_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaAttributionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquisition_conversion_event_lookback_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ads_web_conversion_data_export_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_conversion_event_lookback_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_attribution_model_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaAttributionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
