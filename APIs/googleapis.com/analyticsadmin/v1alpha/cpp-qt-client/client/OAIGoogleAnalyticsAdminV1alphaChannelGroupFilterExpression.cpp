/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::~OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression() {}

void OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::initializeModel() {

    m_and_group_isSet = false;
    m_and_group_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_not_expression_isSet = false;
    m_not_expression_isValid = false;

    m_or_group_isSet = false;
    m_or_group_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::fromJsonObject(QJsonObject json) {

    m_and_group_isValid = ::OpenAPI::fromJsonValue(m_and_group, json[QString("andGroup")]);
    m_and_group_isSet = !json[QString("andGroup")].isNull() && m_and_group_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_not_expression_isValid = ::OpenAPI::fromJsonValue(m_not_expression, json[QString("notExpression")]);
    m_not_expression_isSet = !json[QString("notExpression")].isNull() && m_not_expression_isValid;

    m_or_group_isValid = ::OpenAPI::fromJsonValue(m_or_group, json[QString("orGroup")]);
    m_or_group_isSet = !json[QString("orGroup")].isNull() && m_or_group_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_and_group.isSet()) {
        obj.insert(QString("andGroup"), ::OpenAPI::toJsonValue(m_and_group));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_not_expression.isSet()) {
        obj.insert(QString("notExpression"), ::OpenAPI::toJsonValue(m_not_expression));
    }
    if (m_or_group.isSet()) {
        obj.insert(QString("orGroup"), ::OpenAPI::toJsonValue(m_or_group));
    }
    return obj;
}

OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::getAndGroup() const {
    return m_and_group;
}
void OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::setAndGroup(const OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList &and_group) {
    m_and_group = and_group;
    m_and_group_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::is_and_group_Set() const{
    return m_and_group_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::is_and_group_Valid() const{
    return m_and_group_isValid;
}

OAIGoogleAnalyticsAdminV1alphaChannelGroupFilter OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::getFilter() const {
    return m_filter;
}
void OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::setFilter(const OAIGoogleAnalyticsAdminV1alphaChannelGroupFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::getNotExpression() const {
    return m_not_expression;
}
void OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::setNotExpression(const OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression &not_expression) {
    m_not_expression = not_expression;
    m_not_expression_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::is_not_expression_Set() const{
    return m_not_expression_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::is_not_expression_Valid() const{
    return m_not_expression_isValid;
}

OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::getOrGroup() const {
    return m_or_group;
}
void OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::setOrGroup(const OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList &or_group) {
    m_or_group = or_group;
    m_or_group_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::is_or_group_Set() const{
    return m_or_group_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::is_or_group_Valid() const{
    return m_or_group_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_and_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_or_group.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
