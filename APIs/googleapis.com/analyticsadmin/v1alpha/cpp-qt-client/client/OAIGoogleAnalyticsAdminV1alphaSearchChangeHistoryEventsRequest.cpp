/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::~OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest() {}

void OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_actor_email_isSet = false;
    m_actor_email_isValid = false;

    m_earliest_change_time_isSet = false;
    m_earliest_change_time_isValid = false;

    m_latest_change_time_isSet = false;
    m_latest_change_time_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_actor_email_isValid = ::OpenAPI::fromJsonValue(m_actor_email, json[QString("actorEmail")]);
    m_actor_email_isSet = !json[QString("actorEmail")].isNull() && m_actor_email_isValid;

    m_earliest_change_time_isValid = ::OpenAPI::fromJsonValue(m_earliest_change_time, json[QString("earliestChangeTime")]);
    m_earliest_change_time_isSet = !json[QString("earliestChangeTime")].isNull() && m_earliest_change_time_isValid;

    m_latest_change_time_isValid = ::OpenAPI::fromJsonValue(m_latest_change_time, json[QString("latestChangeTime")]);
    m_latest_change_time_isSet = !json[QString("latestChangeTime")].isNull() && m_latest_change_time_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_action.size() > 0) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_actor_email.size() > 0) {
        obj.insert(QString("actorEmail"), ::OpenAPI::toJsonValue(m_actor_email));
    }
    if (m_earliest_change_time_isSet) {
        obj.insert(QString("earliestChangeTime"), ::OpenAPI::toJsonValue(m_earliest_change_time));
    }
    if (m_latest_change_time_isSet) {
        obj.insert(QString("latestChangeTime"), ::OpenAPI::toJsonValue(m_latest_change_time));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_property_isSet) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_resource_type.size() > 0) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    return obj;
}

QList<QString> OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::getAction() const {
    return m_action;
}
void OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::setAction(const QList<QString> &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_action_Set() const{
    return m_action_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_action_Valid() const{
    return m_action_isValid;
}

QList<QString> OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::getActorEmail() const {
    return m_actor_email;
}
void OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::setActorEmail(const QList<QString> &actor_email) {
    m_actor_email = actor_email;
    m_actor_email_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_actor_email_Set() const{
    return m_actor_email_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_actor_email_Valid() const{
    return m_actor_email_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::getEarliestChangeTime() const {
    return m_earliest_change_time;
}
void OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::setEarliestChangeTime(const QString &earliest_change_time) {
    m_earliest_change_time = earliest_change_time;
    m_earliest_change_time_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_earliest_change_time_Set() const{
    return m_earliest_change_time_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_earliest_change_time_Valid() const{
    return m_earliest_change_time_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::getLatestChangeTime() const {
    return m_latest_change_time;
}
void OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::setLatestChangeTime(const QString &latest_change_time) {
    m_latest_change_time = latest_change_time;
    m_latest_change_time_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_latest_change_time_Set() const{
    return m_latest_change_time_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_latest_change_time_Valid() const{
    return m_latest_change_time_isValid;
}

qint32 OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::getPageSize() const {
    return m_page_size;
}
void OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::getPageToken() const {
    return m_page_token;
}
void OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::getProperty() const {
    return m_property;
}
void OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_property_Set() const{
    return m_property_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_property_Valid() const{
    return m_property_isValid;
}

QList<QString> OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::getResourceType() const {
    return m_resource_type;
}
void OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::setResourceType(const QList<QString> &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_actor_email.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_earliest_change_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_change_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaSearchChangeHistoryEventsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
