/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaCalculatedMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::OAIGoogleAnalyticsAdminV1alphaCalculatedMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::OAIGoogleAnalyticsAdminV1alphaCalculatedMetric() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::~OAIGoogleAnalyticsAdminV1alphaCalculatedMetric() {}

void OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::initializeModel() {

    m_calculated_metric_id_isSet = false;
    m_calculated_metric_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_formula_isSet = false;
    m_formula_isValid = false;

    m_invalid_metric_reference_isSet = false;
    m_invalid_metric_reference_isValid = false;

    m_metric_unit_isSet = false;
    m_metric_unit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_restricted_metric_type_isSet = false;
    m_restricted_metric_type_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::fromJsonObject(QJsonObject json) {

    m_calculated_metric_id_isValid = ::OpenAPI::fromJsonValue(m_calculated_metric_id, json[QString("calculatedMetricId")]);
    m_calculated_metric_id_isSet = !json[QString("calculatedMetricId")].isNull() && m_calculated_metric_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_formula_isValid = ::OpenAPI::fromJsonValue(m_formula, json[QString("formula")]);
    m_formula_isSet = !json[QString("formula")].isNull() && m_formula_isValid;

    m_invalid_metric_reference_isValid = ::OpenAPI::fromJsonValue(m_invalid_metric_reference, json[QString("invalidMetricReference")]);
    m_invalid_metric_reference_isSet = !json[QString("invalidMetricReference")].isNull() && m_invalid_metric_reference_isValid;

    m_metric_unit_isValid = ::OpenAPI::fromJsonValue(m_metric_unit, json[QString("metricUnit")]);
    m_metric_unit_isSet = !json[QString("metricUnit")].isNull() && m_metric_unit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_restricted_metric_type_isValid = ::OpenAPI::fromJsonValue(m_restricted_metric_type, json[QString("restrictedMetricType")]);
    m_restricted_metric_type_isSet = !json[QString("restrictedMetricType")].isNull() && m_restricted_metric_type_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_calculated_metric_id_isSet) {
        obj.insert(QString("calculatedMetricId"), ::OpenAPI::toJsonValue(m_calculated_metric_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_formula_isSet) {
        obj.insert(QString("formula"), ::OpenAPI::toJsonValue(m_formula));
    }
    if (m_invalid_metric_reference_isSet) {
        obj.insert(QString("invalidMetricReference"), ::OpenAPI::toJsonValue(m_invalid_metric_reference));
    }
    if (m_metric_unit_isSet) {
        obj.insert(QString("metricUnit"), ::OpenAPI::toJsonValue(m_metric_unit));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_restricted_metric_type.size() > 0) {
        obj.insert(QString("restrictedMetricType"), ::OpenAPI::toJsonValue(m_restricted_metric_type));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::getCalculatedMetricId() const {
    return m_calculated_metric_id;
}
void OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::setCalculatedMetricId(const QString &calculated_metric_id) {
    m_calculated_metric_id = calculated_metric_id;
    m_calculated_metric_id_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_calculated_metric_id_Set() const{
    return m_calculated_metric_id_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_calculated_metric_id_Valid() const{
    return m_calculated_metric_id_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::getDescription() const {
    return m_description;
}
void OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::getFormula() const {
    return m_formula;
}
void OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::setFormula(const QString &formula) {
    m_formula = formula;
    m_formula_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_formula_Set() const{
    return m_formula_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_formula_Valid() const{
    return m_formula_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::isInvalidMetricReference() const {
    return m_invalid_metric_reference;
}
void OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::setInvalidMetricReference(const bool &invalid_metric_reference) {
    m_invalid_metric_reference = invalid_metric_reference;
    m_invalid_metric_reference_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_invalid_metric_reference_Set() const{
    return m_invalid_metric_reference_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_invalid_metric_reference_Valid() const{
    return m_invalid_metric_reference_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::getMetricUnit() const {
    return m_metric_unit;
}
void OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::setMetricUnit(const QString &metric_unit) {
    m_metric_unit = metric_unit;
    m_metric_unit_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_metric_unit_Set() const{
    return m_metric_unit_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_metric_unit_Valid() const{
    return m_metric_unit_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::getRestrictedMetricType() const {
    return m_restricted_metric_type;
}
void OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::setRestrictedMetricType(const QList<QString> &restricted_metric_type) {
    m_restricted_metric_type = restricted_metric_type;
    m_restricted_metric_type_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_restricted_metric_type_Set() const{
    return m_restricted_metric_type_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::is_restricted_metric_type_Valid() const{
    return m_restricted_metric_type_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculated_metric_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formula_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_metric_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_metric_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaCalculatedMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
