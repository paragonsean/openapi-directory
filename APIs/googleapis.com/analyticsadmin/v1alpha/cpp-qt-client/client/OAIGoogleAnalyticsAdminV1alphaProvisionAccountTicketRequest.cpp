/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::~OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest() {}

void OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_redirect_uri_isSet = false;
    m_redirect_uri_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_redirect_uri, json[QString("redirectUri")]);
    m_redirect_uri_isSet = !json[QString("redirectUri")].isNull() && m_redirect_uri_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_redirect_uri_isSet) {
        obj.insert(QString("redirectUri"), ::OpenAPI::toJsonValue(m_redirect_uri));
    }
    return obj;
}

OAIGoogleAnalyticsAdminV1alphaAccount OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::getAccount() const {
    return m_account;
}
void OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::setAccount(const OAIGoogleAnalyticsAdminV1alphaAccount &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::is_account_Set() const{
    return m_account_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::getRedirectUri() const {
    return m_redirect_uri;
}
void OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::setRedirectUri(const QString &redirect_uri) {
    m_redirect_uri = redirect_uri;
    m_redirect_uri_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::is_redirect_uri_Set() const{
    return m_redirect_uri_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::is_redirect_uri_Valid() const{
    return m_redirect_uri_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaProvisionAccountTicketRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
