/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList::OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList::OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList::~OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList() {}

void OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList::initializeModel() {

    m_filter_expressions_isSet = false;
    m_filter_expressions_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList::fromJsonObject(QJsonObject json) {

    m_filter_expressions_isValid = ::OpenAPI::fromJsonValue(m_filter_expressions, json[QString("filterExpressions")]);
    m_filter_expressions_isSet = !json[QString("filterExpressions")].isNull() && m_filter_expressions_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_expressions.size() > 0) {
        obj.insert(QString("filterExpressions"), ::OpenAPI::toJsonValue(m_filter_expressions));
    }
    return obj;
}

QList<OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression> OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList::getFilterExpressions() const {
    return m_filter_expressions;
}
void OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList::setFilterExpressions(const QList<OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpression> &filter_expressions) {
    m_filter_expressions = filter_expressions;
    m_filter_expressions_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList::is_filter_expressions_Set() const{
    return m_filter_expressions_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList::is_filter_expressions_Valid() const{
    return m_filter_expressions_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_expressions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
