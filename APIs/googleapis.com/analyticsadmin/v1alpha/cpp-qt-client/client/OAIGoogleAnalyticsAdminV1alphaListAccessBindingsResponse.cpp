/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::~OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse() {}

void OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::initializeModel() {

    m_access_bindings_isSet = false;
    m_access_bindings_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::fromJsonObject(QJsonObject json) {

    m_access_bindings_isValid = ::OpenAPI::fromJsonValue(m_access_bindings, json[QString("accessBindings")]);
    m_access_bindings_isSet = !json[QString("accessBindings")].isNull() && m_access_bindings_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_access_bindings.size() > 0) {
        obj.insert(QString("accessBindings"), ::OpenAPI::toJsonValue(m_access_bindings));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIGoogleAnalyticsAdminV1alphaAccessBinding> OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::getAccessBindings() const {
    return m_access_bindings;
}
void OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::setAccessBindings(const QList<OAIGoogleAnalyticsAdminV1alphaAccessBinding> &access_bindings) {
    m_access_bindings = access_bindings;
    m_access_bindings_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::is_access_bindings_Set() const{
    return m_access_bindings_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::is_access_bindings_Valid() const{
    return m_access_bindings_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_bindings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaListAccessBindingsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
