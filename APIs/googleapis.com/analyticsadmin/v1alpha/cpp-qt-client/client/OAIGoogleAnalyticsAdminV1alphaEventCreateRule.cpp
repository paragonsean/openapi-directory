/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaEventCreateRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaEventCreateRule::OAIGoogleAnalyticsAdminV1alphaEventCreateRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaEventCreateRule::OAIGoogleAnalyticsAdminV1alphaEventCreateRule() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaEventCreateRule::~OAIGoogleAnalyticsAdminV1alphaEventCreateRule() {}

void OAIGoogleAnalyticsAdminV1alphaEventCreateRule::initializeModel() {

    m_destination_event_isSet = false;
    m_destination_event_isValid = false;

    m_event_conditions_isSet = false;
    m_event_conditions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameter_mutations_isSet = false;
    m_parameter_mutations_isValid = false;

    m_source_copy_parameters_isSet = false;
    m_source_copy_parameters_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaEventCreateRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaEventCreateRule::fromJsonObject(QJsonObject json) {

    m_destination_event_isValid = ::OpenAPI::fromJsonValue(m_destination_event, json[QString("destinationEvent")]);
    m_destination_event_isSet = !json[QString("destinationEvent")].isNull() && m_destination_event_isValid;

    m_event_conditions_isValid = ::OpenAPI::fromJsonValue(m_event_conditions, json[QString("eventConditions")]);
    m_event_conditions_isSet = !json[QString("eventConditions")].isNull() && m_event_conditions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameter_mutations_isValid = ::OpenAPI::fromJsonValue(m_parameter_mutations, json[QString("parameterMutations")]);
    m_parameter_mutations_isSet = !json[QString("parameterMutations")].isNull() && m_parameter_mutations_isValid;

    m_source_copy_parameters_isValid = ::OpenAPI::fromJsonValue(m_source_copy_parameters, json[QString("sourceCopyParameters")]);
    m_source_copy_parameters_isSet = !json[QString("sourceCopyParameters")].isNull() && m_source_copy_parameters_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaEventCreateRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaEventCreateRule::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_event_isSet) {
        obj.insert(QString("destinationEvent"), ::OpenAPI::toJsonValue(m_destination_event));
    }
    if (m_event_conditions.size() > 0) {
        obj.insert(QString("eventConditions"), ::OpenAPI::toJsonValue(m_event_conditions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameter_mutations.size() > 0) {
        obj.insert(QString("parameterMutations"), ::OpenAPI::toJsonValue(m_parameter_mutations));
    }
    if (m_source_copy_parameters_isSet) {
        obj.insert(QString("sourceCopyParameters"), ::OpenAPI::toJsonValue(m_source_copy_parameters));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaEventCreateRule::getDestinationEvent() const {
    return m_destination_event;
}
void OAIGoogleAnalyticsAdminV1alphaEventCreateRule::setDestinationEvent(const QString &destination_event) {
    m_destination_event = destination_event;
    m_destination_event_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaEventCreateRule::is_destination_event_Set() const{
    return m_destination_event_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaEventCreateRule::is_destination_event_Valid() const{
    return m_destination_event_isValid;
}

QList<OAIGoogleAnalyticsAdminV1alphaMatchingCondition> OAIGoogleAnalyticsAdminV1alphaEventCreateRule::getEventConditions() const {
    return m_event_conditions;
}
void OAIGoogleAnalyticsAdminV1alphaEventCreateRule::setEventConditions(const QList<OAIGoogleAnalyticsAdminV1alphaMatchingCondition> &event_conditions) {
    m_event_conditions = event_conditions;
    m_event_conditions_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaEventCreateRule::is_event_conditions_Set() const{
    return m_event_conditions_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaEventCreateRule::is_event_conditions_Valid() const{
    return m_event_conditions_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaEventCreateRule::getName() const {
    return m_name;
}
void OAIGoogleAnalyticsAdminV1alphaEventCreateRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaEventCreateRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaEventCreateRule::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGoogleAnalyticsAdminV1alphaParameterMutation> OAIGoogleAnalyticsAdminV1alphaEventCreateRule::getParameterMutations() const {
    return m_parameter_mutations;
}
void OAIGoogleAnalyticsAdminV1alphaEventCreateRule::setParameterMutations(const QList<OAIGoogleAnalyticsAdminV1alphaParameterMutation> &parameter_mutations) {
    m_parameter_mutations = parameter_mutations;
    m_parameter_mutations_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaEventCreateRule::is_parameter_mutations_Set() const{
    return m_parameter_mutations_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaEventCreateRule::is_parameter_mutations_Valid() const{
    return m_parameter_mutations_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaEventCreateRule::isSourceCopyParameters() const {
    return m_source_copy_parameters;
}
void OAIGoogleAnalyticsAdminV1alphaEventCreateRule::setSourceCopyParameters(const bool &source_copy_parameters) {
    m_source_copy_parameters = source_copy_parameters;
    m_source_copy_parameters_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaEventCreateRule::is_source_copy_parameters_Set() const{
    return m_source_copy_parameters_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaEventCreateRule::is_source_copy_parameters_Valid() const{
    return m_source_copy_parameters_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaEventCreateRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_mutations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_copy_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaEventCreateRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
