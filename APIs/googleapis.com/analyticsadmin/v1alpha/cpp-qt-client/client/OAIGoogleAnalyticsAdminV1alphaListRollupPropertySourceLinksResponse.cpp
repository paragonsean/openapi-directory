/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse() {
    this->initializeModel();
}

OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::~OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse() {}

void OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_rollup_property_source_links_isSet = false;
    m_rollup_property_source_links_isValid = false;
}

void OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_rollup_property_source_links_isValid = ::OpenAPI::fromJsonValue(m_rollup_property_source_links, json[QString("rollupPropertySourceLinks")]);
    m_rollup_property_source_links_isSet = !json[QString("rollupPropertySourceLinks")].isNull() && m_rollup_property_source_links_isValid;
}

QString OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_rollup_property_source_links.size() > 0) {
        obj.insert(QString("rollupPropertySourceLinks"), ::OpenAPI::toJsonValue(m_rollup_property_source_links));
    }
    return obj;
}

QString OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIGoogleAnalyticsAdminV1alphaRollupPropertySourceLink> OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::getRollupPropertySourceLinks() const {
    return m_rollup_property_source_links;
}
void OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::setRollupPropertySourceLinks(const QList<OAIGoogleAnalyticsAdminV1alphaRollupPropertySourceLink> &rollup_property_source_links) {
    m_rollup_property_source_links = rollup_property_source_links;
    m_rollup_property_source_links_isSet = true;
}

bool OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::is_rollup_property_source_links_Set() const{
    return m_rollup_property_source_links_isSet;
}

bool OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::is_rollup_property_source_links_Valid() const{
    return m_rollup_property_source_links_isValid;
}

bool OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollup_property_source_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAnalyticsAdminV1alphaListRollupPropertySourceLinksResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
