# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1alpha_audience_sequence_filter_audience_sequence_step import GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep
from openapi_server import util


class GoogleAnalyticsAdminV1alphaAudienceSequenceFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scope: str=None, sequence_maximum_duration: str=None, sequence_steps: List[GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep]=None):
        """GoogleAnalyticsAdminV1alphaAudienceSequenceFilter - a model defined in OpenAPI

        :param scope: The scope of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.
        :param sequence_maximum_duration: The sequence_maximum_duration of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.
        :param sequence_steps: The sequence_steps of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.
        """
        self.openapi_types = {
            'scope': str,
            'sequence_maximum_duration': str,
            'sequence_steps': List[GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep]
        }

        self.attribute_map = {
            'scope': 'scope',
            'sequence_maximum_duration': 'sequenceMaximumDuration',
            'sequence_steps': 'sequenceSteps'
        }

        self._scope = scope
        self._sequence_maximum_duration = sequence_maximum_duration
        self._sequence_steps = sequence_steps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaAudienceSequenceFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaAudienceSequenceFilter of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scope(self):
        """Gets the scope of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.

        Required. Immutable. Specifies the scope for this filter.

        :return: The scope of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.

        Required. Immutable. Specifies the scope for this filter.

        :param scope: The scope of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.
        :type scope: str
        """
        allowed_values = ["AUDIENCE_FILTER_SCOPE_UNSPECIFIED", "AUDIENCE_FILTER_SCOPE_WITHIN_SAME_EVENT", "AUDIENCE_FILTER_SCOPE_WITHIN_SAME_SESSION", "AUDIENCE_FILTER_SCOPE_ACROSS_ALL_SESSIONS"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def sequence_maximum_duration(self):
        """Gets the sequence_maximum_duration of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.

        Optional. Defines the time period in which the whole sequence must occur.

        :return: The sequence_maximum_duration of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.
        :rtype: str
        """
        return self._sequence_maximum_duration

    @sequence_maximum_duration.setter
    def sequence_maximum_duration(self, sequence_maximum_duration):
        """Sets the sequence_maximum_duration of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.

        Optional. Defines the time period in which the whole sequence must occur.

        :param sequence_maximum_duration: The sequence_maximum_duration of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.
        :type sequence_maximum_duration: str
        """

        self._sequence_maximum_duration = sequence_maximum_duration

    @property
    def sequence_steps(self):
        """Gets the sequence_steps of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.

        Required. An ordered sequence of steps. A user must complete each step in order to join the sequence filter.

        :return: The sequence_steps of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.
        :rtype: List[GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep]
        """
        return self._sequence_steps

    @sequence_steps.setter
    def sequence_steps(self, sequence_steps):
        """Sets the sequence_steps of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.

        Required. An ordered sequence of steps. A user must complete each step in order to join the sequence filter.

        :param sequence_steps: The sequence_steps of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.
        :type sequence_steps: List[GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep]
        """

        self._sequence_steps = sequence_steps
