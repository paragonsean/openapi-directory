# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1alpha_audience_filter_expression import GoogleAnalyticsAdminV1alphaAudienceFilterExpression
from openapi_server import util


class GoogleAnalyticsAdminV1alphaAudienceSimpleFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_expression: GoogleAnalyticsAdminV1alphaAudienceFilterExpression=None, scope: str=None):
        """GoogleAnalyticsAdminV1alphaAudienceSimpleFilter - a model defined in OpenAPI

        :param filter_expression: The filter_expression of this GoogleAnalyticsAdminV1alphaAudienceSimpleFilter.
        :param scope: The scope of this GoogleAnalyticsAdminV1alphaAudienceSimpleFilter.
        """
        self.openapi_types = {
            'filter_expression': GoogleAnalyticsAdminV1alphaAudienceFilterExpression,
            'scope': str
        }

        self.attribute_map = {
            'filter_expression': 'filterExpression',
            'scope': 'scope'
        }

        self._filter_expression = filter_expression
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaAudienceSimpleFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaAudienceSimpleFilter of this GoogleAnalyticsAdminV1alphaAudienceSimpleFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_expression(self):
        """Gets the filter_expression of this GoogleAnalyticsAdminV1alphaAudienceSimpleFilter.


        :return: The filter_expression of this GoogleAnalyticsAdminV1alphaAudienceSimpleFilter.
        :rtype: GoogleAnalyticsAdminV1alphaAudienceFilterExpression
        """
        return self._filter_expression

    @filter_expression.setter
    def filter_expression(self, filter_expression):
        """Sets the filter_expression of this GoogleAnalyticsAdminV1alphaAudienceSimpleFilter.


        :param filter_expression: The filter_expression of this GoogleAnalyticsAdminV1alphaAudienceSimpleFilter.
        :type filter_expression: GoogleAnalyticsAdminV1alphaAudienceFilterExpression
        """

        self._filter_expression = filter_expression

    @property
    def scope(self):
        """Gets the scope of this GoogleAnalyticsAdminV1alphaAudienceSimpleFilter.

        Required. Immutable. Specifies the scope for this filter.

        :return: The scope of this GoogleAnalyticsAdminV1alphaAudienceSimpleFilter.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this GoogleAnalyticsAdminV1alphaAudienceSimpleFilter.

        Required. Immutable. Specifies the scope for this filter.

        :param scope: The scope of this GoogleAnalyticsAdminV1alphaAudienceSimpleFilter.
        :type scope: str
        """
        allowed_values = ["AUDIENCE_FILTER_SCOPE_UNSPECIFIED", "AUDIENCE_FILTER_SCOPE_WITHIN_SAME_EVENT", "AUDIENCE_FILTER_SCOPE_WITHIN_SAME_SESSION", "AUDIENCE_FILTER_SCOPE_ACROSS_ALL_SESSIONS"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope
