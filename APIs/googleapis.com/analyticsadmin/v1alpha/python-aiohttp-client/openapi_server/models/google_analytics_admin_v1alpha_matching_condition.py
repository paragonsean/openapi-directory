# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAnalyticsAdminV1alphaMatchingCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comparison_type: str=None, _field: str=None, negated: bool=None, value: str=None):
        """GoogleAnalyticsAdminV1alphaMatchingCondition - a model defined in OpenAPI

        :param comparison_type: The comparison_type of this GoogleAnalyticsAdminV1alphaMatchingCondition.
        :param _field: The _field of this GoogleAnalyticsAdminV1alphaMatchingCondition.
        :param negated: The negated of this GoogleAnalyticsAdminV1alphaMatchingCondition.
        :param value: The value of this GoogleAnalyticsAdminV1alphaMatchingCondition.
        """
        self.openapi_types = {
            'comparison_type': str,
            '_field': str,
            'negated': bool,
            'value': str
        }

        self.attribute_map = {
            'comparison_type': 'comparisonType',
            '_field': 'field',
            'negated': 'negated',
            'value': 'value'
        }

        self._comparison_type = comparison_type
        self.__field = _field
        self._negated = negated
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaMatchingCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaMatchingCondition of this GoogleAnalyticsAdminV1alphaMatchingCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comparison_type(self):
        """Gets the comparison_type of this GoogleAnalyticsAdminV1alphaMatchingCondition.

        Required. The type of comparison to be applied to the value.

        :return: The comparison_type of this GoogleAnalyticsAdminV1alphaMatchingCondition.
        :rtype: str
        """
        return self._comparison_type

    @comparison_type.setter
    def comparison_type(self, comparison_type):
        """Sets the comparison_type of this GoogleAnalyticsAdminV1alphaMatchingCondition.

        Required. The type of comparison to be applied to the value.

        :param comparison_type: The comparison_type of this GoogleAnalyticsAdminV1alphaMatchingCondition.
        :type comparison_type: str
        """
        allowed_values = ["COMPARISON_TYPE_UNSPECIFIED", "EQUALS", "EQUALS_CASE_INSENSITIVE", "CONTAINS", "CONTAINS_CASE_INSENSITIVE", "STARTS_WITH", "STARTS_WITH_CASE_INSENSITIVE", "ENDS_WITH", "ENDS_WITH_CASE_INSENSITIVE", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", "LESS_THAN", "LESS_THAN_OR_EQUAL", "REGULAR_EXPRESSION", "REGULAR_EXPRESSION_CASE_INSENSITIVE"]  # noqa: E501
        if comparison_type not in allowed_values:
            raise ValueError(
                "Invalid value for `comparison_type` ({0}), must be one of {1}"
                .format(comparison_type, allowed_values)
            )

        self._comparison_type = comparison_type

    @property
    def _field(self):
        """Gets the _field of this GoogleAnalyticsAdminV1alphaMatchingCondition.

        Required. The name of the field that is compared against for the condition. If 'event_name' is specified this condition will apply to the name of the event. Otherwise the condition will apply to a parameter with the specified name. This value cannot contain spaces.

        :return: The _field of this GoogleAnalyticsAdminV1alphaMatchingCondition.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this GoogleAnalyticsAdminV1alphaMatchingCondition.

        Required. The name of the field that is compared against for the condition. If 'event_name' is specified this condition will apply to the name of the event. Otherwise the condition will apply to a parameter with the specified name. This value cannot contain spaces.

        :param _field: The _field of this GoogleAnalyticsAdminV1alphaMatchingCondition.
        :type _field: str
        """

        self.__field = _field

    @property
    def negated(self):
        """Gets the negated of this GoogleAnalyticsAdminV1alphaMatchingCondition.

        Whether or not the result of the comparison should be negated. For example, if `negated` is true, then 'equals' comparisons would function as 'not equals'.

        :return: The negated of this GoogleAnalyticsAdminV1alphaMatchingCondition.
        :rtype: bool
        """
        return self._negated

    @negated.setter
    def negated(self, negated):
        """Sets the negated of this GoogleAnalyticsAdminV1alphaMatchingCondition.

        Whether or not the result of the comparison should be negated. For example, if `negated` is true, then 'equals' comparisons would function as 'not equals'.

        :param negated: The negated of this GoogleAnalyticsAdminV1alphaMatchingCondition.
        :type negated: bool
        """

        self._negated = negated

    @property
    def value(self):
        """Gets the value of this GoogleAnalyticsAdminV1alphaMatchingCondition.

        Required. The value being compared against for this condition. The runtime implementation may perform type coercion of this value to evaluate this condition based on the type of the parameter value.

        :return: The value of this GoogleAnalyticsAdminV1alphaMatchingCondition.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GoogleAnalyticsAdminV1alphaMatchingCondition.

        Required. The value being compared against for this condition. The runtime implementation may perform type coercion of this value to evaluate this condition based on the type of the parameter value.

        :param value: The value of this GoogleAnalyticsAdminV1alphaMatchingCondition.
        :type value: str
        """

        self._value = value
