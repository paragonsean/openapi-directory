# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAnalyticsAdminV1alphaCalculatedMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calculated_metric_id: str=None, description: str=None, display_name: str=None, formula: str=None, invalid_metric_reference: bool=None, metric_unit: str=None, name: str=None, restricted_metric_type: List[str]=None):
        """GoogleAnalyticsAdminV1alphaCalculatedMetric - a model defined in OpenAPI

        :param calculated_metric_id: The calculated_metric_id of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :param description: The description of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :param display_name: The display_name of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :param formula: The formula of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :param invalid_metric_reference: The invalid_metric_reference of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :param metric_unit: The metric_unit of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :param name: The name of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :param restricted_metric_type: The restricted_metric_type of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        """
        self.openapi_types = {
            'calculated_metric_id': str,
            'description': str,
            'display_name': str,
            'formula': str,
            'invalid_metric_reference': bool,
            'metric_unit': str,
            'name': str,
            'restricted_metric_type': List[str]
        }

        self.attribute_map = {
            'calculated_metric_id': 'calculatedMetricId',
            'description': 'description',
            'display_name': 'displayName',
            'formula': 'formula',
            'invalid_metric_reference': 'invalidMetricReference',
            'metric_unit': 'metricUnit',
            'name': 'name',
            'restricted_metric_type': 'restrictedMetricType'
        }

        self._calculated_metric_id = calculated_metric_id
        self._description = description
        self._display_name = display_name
        self._formula = formula
        self._invalid_metric_reference = invalid_metric_reference
        self._metric_unit = metric_unit
        self._name = name
        self._restricted_metric_type = restricted_metric_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaCalculatedMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaCalculatedMetric of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calculated_metric_id(self):
        """Gets the calculated_metric_id of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Output only. The ID to use for the calculated metric. In the UI, this is referred to as the \"API name.\" The calculated_metric_id is used when referencing this calculated metric from external APIs. For example, \"calcMetric:{calculated_metric_id}\".

        :return: The calculated_metric_id of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :rtype: str
        """
        return self._calculated_metric_id

    @calculated_metric_id.setter
    def calculated_metric_id(self, calculated_metric_id):
        """Sets the calculated_metric_id of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Output only. The ID to use for the calculated metric. In the UI, this is referred to as the \"API name.\" The calculated_metric_id is used when referencing this calculated metric from external APIs. For example, \"calcMetric:{calculated_metric_id}\".

        :param calculated_metric_id: The calculated_metric_id of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :type calculated_metric_id: str
        """

        self._calculated_metric_id = calculated_metric_id

    @property
    def description(self):
        """Gets the description of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Optional. Description for this calculated metric. Max length of 4096 characters.

        :return: The description of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Optional. Description for this calculated metric. Max length of 4096 characters.

        :param description: The description of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Required. Display name for this calculated metric as shown in the Google Analytics UI. Max length 82 characters.

        :return: The display_name of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Required. Display name for this calculated metric as shown in the Google Analytics UI. Max length 82 characters.

        :param display_name: The display_name of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def formula(self):
        """Gets the formula of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Required. The calculated metric's definition. Maximum number of unique referenced custom metrics is 5. Formulas supports the following operations: + (addition), - (subtraction), - (negative), * (multiplication), / (division), () (parenthesis). Any valid real numbers are acceptable that fit in a Long (64bit integer) or a Double (64 bit floating point number). Example formula: \"( customEvent:parameter_name + cartPurchaseQuantity ) / 2.0\"

        :return: The formula of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Required. The calculated metric's definition. Maximum number of unique referenced custom metrics is 5. Formulas supports the following operations: + (addition), - (subtraction), - (negative), * (multiplication), / (division), () (parenthesis). Any valid real numbers are acceptable that fit in a Long (64bit integer) or a Double (64 bit floating point number). Example formula: \"( customEvent:parameter_name + cartPurchaseQuantity ) / 2.0\"

        :param formula: The formula of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :type formula: str
        """

        self._formula = formula

    @property
    def invalid_metric_reference(self):
        """Gets the invalid_metric_reference of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Output only. If true, this calculated metric has a invalid metric reference. Anything using a calculated metric with invalid_metric_reference set to true may fail, produce warnings, or produce unexpected results.

        :return: The invalid_metric_reference of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :rtype: bool
        """
        return self._invalid_metric_reference

    @invalid_metric_reference.setter
    def invalid_metric_reference(self, invalid_metric_reference):
        """Sets the invalid_metric_reference of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Output only. If true, this calculated metric has a invalid metric reference. Anything using a calculated metric with invalid_metric_reference set to true may fail, produce warnings, or produce unexpected results.

        :param invalid_metric_reference: The invalid_metric_reference of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :type invalid_metric_reference: bool
        """

        self._invalid_metric_reference = invalid_metric_reference

    @property
    def metric_unit(self):
        """Gets the metric_unit of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Required. The type for the calculated metric's value.

        :return: The metric_unit of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :rtype: str
        """
        return self._metric_unit

    @metric_unit.setter
    def metric_unit(self, metric_unit):
        """Sets the metric_unit of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Required. The type for the calculated metric's value.

        :param metric_unit: The metric_unit of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :type metric_unit: str
        """
        allowed_values = ["METRIC_UNIT_UNSPECIFIED", "STANDARD", "CURRENCY", "FEET", "MILES", "METERS", "KILOMETERS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS"]  # noqa: E501
        if metric_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `metric_unit` ({0}), must be one of {1}"
                .format(metric_unit, allowed_values)
            )

        self._metric_unit = metric_unit

    @property
    def name(self):
        """Gets the name of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Output only. Resource name for this CalculatedMetric. Format: 'properties/{property_id}/calculatedMetrics/{calculated_metric_id}'

        :return: The name of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Output only. Resource name for this CalculatedMetric. Format: 'properties/{property_id}/calculatedMetrics/{calculated_metric_id}'

        :param name: The name of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :type name: str
        """

        self._name = name

    @property
    def restricted_metric_type(self):
        """Gets the restricted_metric_type of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Output only. Types of restricted data that this metric contains.

        :return: The restricted_metric_type of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :rtype: List[str]
        """
        return self._restricted_metric_type

    @restricted_metric_type.setter
    def restricted_metric_type(self, restricted_metric_type):
        """Sets the restricted_metric_type of this GoogleAnalyticsAdminV1alphaCalculatedMetric.

        Output only. Types of restricted data that this metric contains.

        :param restricted_metric_type: The restricted_metric_type of this GoogleAnalyticsAdminV1alphaCalculatedMetric.
        :type restricted_metric_type: List[str]
        """
        allowed_values = ["RESTRICTED_METRIC_TYPE_UNSPECIFIED", "COST_DATA", "REVENUE_DATA"]  # noqa: E501
        if not set(restricted_metric_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `restricted_metric_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(restricted_metric_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._restricted_metric_type = restricted_metric_type
