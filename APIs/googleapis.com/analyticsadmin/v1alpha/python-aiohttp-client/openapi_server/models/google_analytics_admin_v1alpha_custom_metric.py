# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAnalyticsAdminV1alphaCustomMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, measurement_unit: str=None, name: str=None, parameter_name: str=None, restricted_metric_type: List[str]=None, scope: str=None):
        """GoogleAnalyticsAdminV1alphaCustomMetric - a model defined in OpenAPI

        :param description: The description of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :param display_name: The display_name of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :param measurement_unit: The measurement_unit of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :param name: The name of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :param parameter_name: The parameter_name of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :param restricted_metric_type: The restricted_metric_type of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :param scope: The scope of this GoogleAnalyticsAdminV1alphaCustomMetric.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'measurement_unit': str,
            'name': str,
            'parameter_name': str,
            'restricted_metric_type': List[str],
            'scope': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'measurement_unit': 'measurementUnit',
            'name': 'name',
            'parameter_name': 'parameterName',
            'restricted_metric_type': 'restrictedMetricType',
            'scope': 'scope'
        }

        self._description = description
        self._display_name = display_name
        self._measurement_unit = measurement_unit
        self._name = name
        self._parameter_name = parameter_name
        self._restricted_metric_type = restricted_metric_type
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaCustomMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaCustomMetric of this GoogleAnalyticsAdminV1alphaCustomMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this GoogleAnalyticsAdminV1alphaCustomMetric.

        Optional. Description for this custom dimension. Max length of 150 characters.

        :return: The description of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleAnalyticsAdminV1alphaCustomMetric.

        Optional. Description for this custom dimension. Max length of 150 characters.

        :param description: The description of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleAnalyticsAdminV1alphaCustomMetric.

        Required. Display name for this custom metric as shown in the Analytics UI. Max length of 82 characters, alphanumeric plus space and underscore starting with a letter. Legacy system-generated display names may contain square brackets, but updates to this field will never permit square brackets.

        :return: The display_name of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleAnalyticsAdminV1alphaCustomMetric.

        Required. Display name for this custom metric as shown in the Analytics UI. Max length of 82 characters, alphanumeric plus space and underscore starting with a letter. Legacy system-generated display names may contain square brackets, but updates to this field will never permit square brackets.

        :param display_name: The display_name of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this GoogleAnalyticsAdminV1alphaCustomMetric.

        Required. The type for the custom metric's value.

        :return: The measurement_unit of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this GoogleAnalyticsAdminV1alphaCustomMetric.

        Required. The type for the custom metric's value.

        :param measurement_unit: The measurement_unit of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :type measurement_unit: str
        """
        allowed_values = ["MEASUREMENT_UNIT_UNSPECIFIED", "STANDARD", "CURRENCY", "FEET", "METERS", "KILOMETERS", "MILES", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS"]  # noqa: E501
        if measurement_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `measurement_unit` ({0}), must be one of {1}"
                .format(measurement_unit, allowed_values)
            )

        self._measurement_unit = measurement_unit

    @property
    def name(self):
        """Gets the name of this GoogleAnalyticsAdminV1alphaCustomMetric.

        Output only. Resource name for this CustomMetric resource. Format: properties/{property}/customMetrics/{customMetric}

        :return: The name of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleAnalyticsAdminV1alphaCustomMetric.

        Output only. Resource name for this CustomMetric resource. Format: properties/{property}/customMetrics/{customMetric}

        :param name: The name of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :type name: str
        """

        self._name = name

    @property
    def parameter_name(self):
        """Gets the parameter_name of this GoogleAnalyticsAdminV1alphaCustomMetric.

        Required. Immutable. Tagging name for this custom metric. If this is an event-scoped metric, then this is the event parameter name. May only contain alphanumeric and underscore charactes, starting with a letter. Max length of 40 characters for event-scoped metrics.

        :return: The parameter_name of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :rtype: str
        """
        return self._parameter_name

    @parameter_name.setter
    def parameter_name(self, parameter_name):
        """Sets the parameter_name of this GoogleAnalyticsAdminV1alphaCustomMetric.

        Required. Immutable. Tagging name for this custom metric. If this is an event-scoped metric, then this is the event parameter name. May only contain alphanumeric and underscore charactes, starting with a letter. Max length of 40 characters for event-scoped metrics.

        :param parameter_name: The parameter_name of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :type parameter_name: str
        """

        self._parameter_name = parameter_name

    @property
    def restricted_metric_type(self):
        """Gets the restricted_metric_type of this GoogleAnalyticsAdminV1alphaCustomMetric.

        Optional. Types of restricted data that this metric may contain. Required for metrics with CURRENCY measurement unit. Must be empty for metrics with a non-CURRENCY measurement unit.

        :return: The restricted_metric_type of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :rtype: List[str]
        """
        return self._restricted_metric_type

    @restricted_metric_type.setter
    def restricted_metric_type(self, restricted_metric_type):
        """Sets the restricted_metric_type of this GoogleAnalyticsAdminV1alphaCustomMetric.

        Optional. Types of restricted data that this metric may contain. Required for metrics with CURRENCY measurement unit. Must be empty for metrics with a non-CURRENCY measurement unit.

        :param restricted_metric_type: The restricted_metric_type of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :type restricted_metric_type: List[str]
        """
        allowed_values = ["RESTRICTED_METRIC_TYPE_UNSPECIFIED", "COST_DATA", "REVENUE_DATA"]  # noqa: E501
        if not set(restricted_metric_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `restricted_metric_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(restricted_metric_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._restricted_metric_type = restricted_metric_type

    @property
    def scope(self):
        """Gets the scope of this GoogleAnalyticsAdminV1alphaCustomMetric.

        Required. Immutable. The scope of this custom metric.

        :return: The scope of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this GoogleAnalyticsAdminV1alphaCustomMetric.

        Required. Immutable. The scope of this custom metric.

        :param scope: The scope of this GoogleAnalyticsAdminV1alphaCustomMetric.
        :type scope: str
        """
        allowed_values = ["METRIC_SCOPE_UNSPECIFIED", "EVENT"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope
