# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1alpha_subproperty_event_filter_condition import GoogleAnalyticsAdminV1alphaSubpropertyEventFilterCondition
from openapi_server.models.google_analytics_admin_v1alpha_subproperty_event_filter_expression_list import GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList
from openapi_server import util


class GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_condition: GoogleAnalyticsAdminV1alphaSubpropertyEventFilterCondition=None, not_expression: GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression=None, or_group: GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList=None):
        """GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression - a model defined in OpenAPI

        :param filter_condition: The filter_condition of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.
        :param not_expression: The not_expression of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.
        :param or_group: The or_group of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.
        """
        self.openapi_types = {
            'filter_condition': GoogleAnalyticsAdminV1alphaSubpropertyEventFilterCondition,
            'not_expression': GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression,
            'or_group': GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList
        }

        self.attribute_map = {
            'filter_condition': 'filterCondition',
            'not_expression': 'notExpression',
            'or_group': 'orGroup'
        }

        self._filter_condition = filter_condition
        self._not_expression = not_expression
        self._or_group = or_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_condition(self):
        """Gets the filter_condition of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.


        :return: The filter_condition of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.
        :rtype: GoogleAnalyticsAdminV1alphaSubpropertyEventFilterCondition
        """
        return self._filter_condition

    @filter_condition.setter
    def filter_condition(self, filter_condition):
        """Sets the filter_condition of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.


        :param filter_condition: The filter_condition of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.
        :type filter_condition: GoogleAnalyticsAdminV1alphaSubpropertyEventFilterCondition
        """

        self._filter_condition = filter_condition

    @property
    def not_expression(self):
        """Gets the not_expression of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.


        :return: The not_expression of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.
        :rtype: GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression
        """
        return self._not_expression

    @not_expression.setter
    def not_expression(self, not_expression):
        """Sets the not_expression of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.


        :param not_expression: The not_expression of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.
        :type not_expression: GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression
        """

        self._not_expression = not_expression

    @property
    def or_group(self):
        """Gets the or_group of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.


        :return: The or_group of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.
        :rtype: GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList
        """
        return self._or_group

    @or_group.setter
    def or_group(self, or_group):
        """Sets the or_group of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.


        :param or_group: The or_group of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.
        :type or_group: GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList
        """

        self._or_group = or_group
