# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1alpha_access_filter import GoogleAnalyticsAdminV1alphaAccessFilter
from openapi_server.models.google_analytics_admin_v1alpha_access_filter_expression_list import GoogleAnalyticsAdminV1alphaAccessFilterExpressionList
from openapi_server import util


class GoogleAnalyticsAdminV1alphaAccessFilterExpression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_filter: GoogleAnalyticsAdminV1alphaAccessFilter=None, and_group: GoogleAnalyticsAdminV1alphaAccessFilterExpressionList=None, not_expression: GoogleAnalyticsAdminV1alphaAccessFilterExpression=None, or_group: GoogleAnalyticsAdminV1alphaAccessFilterExpressionList=None):
        """GoogleAnalyticsAdminV1alphaAccessFilterExpression - a model defined in OpenAPI

        :param access_filter: The access_filter of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.
        :param and_group: The and_group of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.
        :param not_expression: The not_expression of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.
        :param or_group: The or_group of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.
        """
        self.openapi_types = {
            'access_filter': GoogleAnalyticsAdminV1alphaAccessFilter,
            'and_group': GoogleAnalyticsAdminV1alphaAccessFilterExpressionList,
            'not_expression': GoogleAnalyticsAdminV1alphaAccessFilterExpression,
            'or_group': GoogleAnalyticsAdminV1alphaAccessFilterExpressionList
        }

        self.attribute_map = {
            'access_filter': 'accessFilter',
            'and_group': 'andGroup',
            'not_expression': 'notExpression',
            'or_group': 'orGroup'
        }

        self._access_filter = access_filter
        self._and_group = and_group
        self._not_expression = not_expression
        self._or_group = or_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaAccessFilterExpression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaAccessFilterExpression of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_filter(self):
        """Gets the access_filter of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.


        :return: The access_filter of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.
        :rtype: GoogleAnalyticsAdminV1alphaAccessFilter
        """
        return self._access_filter

    @access_filter.setter
    def access_filter(self, access_filter):
        """Sets the access_filter of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.


        :param access_filter: The access_filter of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.
        :type access_filter: GoogleAnalyticsAdminV1alphaAccessFilter
        """

        self._access_filter = access_filter

    @property
    def and_group(self):
        """Gets the and_group of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.


        :return: The and_group of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.
        :rtype: GoogleAnalyticsAdminV1alphaAccessFilterExpressionList
        """
        return self._and_group

    @and_group.setter
    def and_group(self, and_group):
        """Sets the and_group of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.


        :param and_group: The and_group of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.
        :type and_group: GoogleAnalyticsAdminV1alphaAccessFilterExpressionList
        """

        self._and_group = and_group

    @property
    def not_expression(self):
        """Gets the not_expression of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.


        :return: The not_expression of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.
        :rtype: GoogleAnalyticsAdminV1alphaAccessFilterExpression
        """
        return self._not_expression

    @not_expression.setter
    def not_expression(self, not_expression):
        """Sets the not_expression of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.


        :param not_expression: The not_expression of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.
        :type not_expression: GoogleAnalyticsAdminV1alphaAccessFilterExpression
        """

        self._not_expression = not_expression

    @property
    def or_group(self):
        """Gets the or_group of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.


        :return: The or_group of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.
        :rtype: GoogleAnalyticsAdminV1alphaAccessFilterExpressionList
        """
        return self._or_group

    @or_group.setter
    def or_group(self, or_group):
        """Sets the or_group of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.


        :param or_group: The or_group of this GoogleAnalyticsAdminV1alphaAccessFilterExpression.
        :type or_group: GoogleAnalyticsAdminV1alphaAccessFilterExpressionList
        """

        self._or_group = or_group
