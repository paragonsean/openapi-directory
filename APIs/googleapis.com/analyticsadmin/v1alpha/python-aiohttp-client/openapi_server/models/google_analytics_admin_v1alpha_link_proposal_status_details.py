# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, link_proposal_initiating_product: str=None, link_proposal_state: str=None, requestor_email: str=None):
        """GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails - a model defined in OpenAPI

        :param link_proposal_initiating_product: The link_proposal_initiating_product of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.
        :param link_proposal_state: The link_proposal_state of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.
        :param requestor_email: The requestor_email of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.
        """
        self.openapi_types = {
            'link_proposal_initiating_product': str,
            'link_proposal_state': str,
            'requestor_email': str
        }

        self.attribute_map = {
            'link_proposal_initiating_product': 'linkProposalInitiatingProduct',
            'link_proposal_state': 'linkProposalState',
            'requestor_email': 'requestorEmail'
        }

        self._link_proposal_initiating_product = link_proposal_initiating_product
        self._link_proposal_state = link_proposal_state
        self._requestor_email = requestor_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def link_proposal_initiating_product(self):
        """Gets the link_proposal_initiating_product of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.

        Output only. The source of this proposal.

        :return: The link_proposal_initiating_product of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.
        :rtype: str
        """
        return self._link_proposal_initiating_product

    @link_proposal_initiating_product.setter
    def link_proposal_initiating_product(self, link_proposal_initiating_product):
        """Sets the link_proposal_initiating_product of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.

        Output only. The source of this proposal.

        :param link_proposal_initiating_product: The link_proposal_initiating_product of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.
        :type link_proposal_initiating_product: str
        """
        allowed_values = ["LINK_PROPOSAL_INITIATING_PRODUCT_UNSPECIFIED", "GOOGLE_ANALYTICS", "LINKED_PRODUCT"]  # noqa: E501
        if link_proposal_initiating_product not in allowed_values:
            raise ValueError(
                "Invalid value for `link_proposal_initiating_product` ({0}), must be one of {1}"
                .format(link_proposal_initiating_product, allowed_values)
            )

        self._link_proposal_initiating_product = link_proposal_initiating_product

    @property
    def link_proposal_state(self):
        """Gets the link_proposal_state of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.

        Output only. The state of this proposal.

        :return: The link_proposal_state of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.
        :rtype: str
        """
        return self._link_proposal_state

    @link_proposal_state.setter
    def link_proposal_state(self, link_proposal_state):
        """Sets the link_proposal_state of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.

        Output only. The state of this proposal.

        :param link_proposal_state: The link_proposal_state of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.
        :type link_proposal_state: str
        """
        allowed_values = ["LINK_PROPOSAL_STATE_UNSPECIFIED", "AWAITING_REVIEW_FROM_GOOGLE_ANALYTICS", "AWAITING_REVIEW_FROM_LINKED_PRODUCT", "WITHDRAWN", "DECLINED", "EXPIRED", "OBSOLETE"]  # noqa: E501
        if link_proposal_state not in allowed_values:
            raise ValueError(
                "Invalid value for `link_proposal_state` ({0}), must be one of {1}"
                .format(link_proposal_state, allowed_values)
            )

        self._link_proposal_state = link_proposal_state

    @property
    def requestor_email(self):
        """Gets the requestor_email of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.

        Output only. The email address of the user that proposed this linkage.

        :return: The requestor_email of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.
        :rtype: str
        """
        return self._requestor_email

    @requestor_email.setter
    def requestor_email(self, requestor_email):
        """Sets the requestor_email of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.

        Output only. The email address of the user that proposed this linkage.

        :param requestor_email: The requestor_email of this GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.
        :type requestor_email: str
        """

        self._requestor_email = requestor_email
