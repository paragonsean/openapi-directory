# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAnalyticsAdminV1alphaAttributionSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquisition_conversion_event_lookback_window: str=None, ads_web_conversion_data_export_scope: str=None, name: str=None, other_conversion_event_lookback_window: str=None, reporting_attribution_model: str=None):
        """GoogleAnalyticsAdminV1alphaAttributionSettings - a model defined in OpenAPI

        :param acquisition_conversion_event_lookback_window: The acquisition_conversion_event_lookback_window of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        :param ads_web_conversion_data_export_scope: The ads_web_conversion_data_export_scope of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        :param name: The name of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        :param other_conversion_event_lookback_window: The other_conversion_event_lookback_window of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        :param reporting_attribution_model: The reporting_attribution_model of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        """
        self.openapi_types = {
            'acquisition_conversion_event_lookback_window': str,
            'ads_web_conversion_data_export_scope': str,
            'name': str,
            'other_conversion_event_lookback_window': str,
            'reporting_attribution_model': str
        }

        self.attribute_map = {
            'acquisition_conversion_event_lookback_window': 'acquisitionConversionEventLookbackWindow',
            'ads_web_conversion_data_export_scope': 'adsWebConversionDataExportScope',
            'name': 'name',
            'other_conversion_event_lookback_window': 'otherConversionEventLookbackWindow',
            'reporting_attribution_model': 'reportingAttributionModel'
        }

        self._acquisition_conversion_event_lookback_window = acquisition_conversion_event_lookback_window
        self._ads_web_conversion_data_export_scope = ads_web_conversion_data_export_scope
        self._name = name
        self._other_conversion_event_lookback_window = other_conversion_event_lookback_window
        self._reporting_attribution_model = reporting_attribution_model

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaAttributionSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaAttributionSettings of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquisition_conversion_event_lookback_window(self):
        """Gets the acquisition_conversion_event_lookback_window of this GoogleAnalyticsAdminV1alphaAttributionSettings.

        Required. The lookback window configuration for acquisition conversion events. The default window size is 30 days.

        :return: The acquisition_conversion_event_lookback_window of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        :rtype: str
        """
        return self._acquisition_conversion_event_lookback_window

    @acquisition_conversion_event_lookback_window.setter
    def acquisition_conversion_event_lookback_window(self, acquisition_conversion_event_lookback_window):
        """Sets the acquisition_conversion_event_lookback_window of this GoogleAnalyticsAdminV1alphaAttributionSettings.

        Required. The lookback window configuration for acquisition conversion events. The default window size is 30 days.

        :param acquisition_conversion_event_lookback_window: The acquisition_conversion_event_lookback_window of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        :type acquisition_conversion_event_lookback_window: str
        """
        allowed_values = ["ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED", "ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_7_DAYS", "ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS"]  # noqa: E501
        if acquisition_conversion_event_lookback_window not in allowed_values:
            raise ValueError(
                "Invalid value for `acquisition_conversion_event_lookback_window` ({0}), must be one of {1}"
                .format(acquisition_conversion_event_lookback_window, allowed_values)
            )

        self._acquisition_conversion_event_lookback_window = acquisition_conversion_event_lookback_window

    @property
    def ads_web_conversion_data_export_scope(self):
        """Gets the ads_web_conversion_data_export_scope of this GoogleAnalyticsAdminV1alphaAttributionSettings.

        Required. The Conversion Export Scope for data exported to linked Ads Accounts.

        :return: The ads_web_conversion_data_export_scope of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        :rtype: str
        """
        return self._ads_web_conversion_data_export_scope

    @ads_web_conversion_data_export_scope.setter
    def ads_web_conversion_data_export_scope(self, ads_web_conversion_data_export_scope):
        """Sets the ads_web_conversion_data_export_scope of this GoogleAnalyticsAdminV1alphaAttributionSettings.

        Required. The Conversion Export Scope for data exported to linked Ads Accounts.

        :param ads_web_conversion_data_export_scope: The ads_web_conversion_data_export_scope of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        :type ads_web_conversion_data_export_scope: str
        """
        allowed_values = ["ADS_WEB_CONVERSION_DATA_EXPORT_SCOPE_UNSPECIFIED", "NOT_SELECTED_YET", "PAID_AND_ORGANIC_CHANNELS", "GOOGLE_PAID_CHANNELS"]  # noqa: E501
        if ads_web_conversion_data_export_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `ads_web_conversion_data_export_scope` ({0}), must be one of {1}"
                .format(ads_web_conversion_data_export_scope, allowed_values)
            )

        self._ads_web_conversion_data_export_scope = ads_web_conversion_data_export_scope

    @property
    def name(self):
        """Gets the name of this GoogleAnalyticsAdminV1alphaAttributionSettings.

        Output only. Resource name of this attribution settings resource. Format: properties/{property_id}/attributionSettings Example: \"properties/1000/attributionSettings\"

        :return: The name of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleAnalyticsAdminV1alphaAttributionSettings.

        Output only. Resource name of this attribution settings resource. Format: properties/{property_id}/attributionSettings Example: \"properties/1000/attributionSettings\"

        :param name: The name of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        :type name: str
        """

        self._name = name

    @property
    def other_conversion_event_lookback_window(self):
        """Gets the other_conversion_event_lookback_window of this GoogleAnalyticsAdminV1alphaAttributionSettings.

        Required. The lookback window for all other, non-acquisition conversion events. The default window size is 90 days.

        :return: The other_conversion_event_lookback_window of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        :rtype: str
        """
        return self._other_conversion_event_lookback_window

    @other_conversion_event_lookback_window.setter
    def other_conversion_event_lookback_window(self, other_conversion_event_lookback_window):
        """Sets the other_conversion_event_lookback_window of this GoogleAnalyticsAdminV1alphaAttributionSettings.

        Required. The lookback window for all other, non-acquisition conversion events. The default window size is 90 days.

        :param other_conversion_event_lookback_window: The other_conversion_event_lookback_window of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        :type other_conversion_event_lookback_window: str
        """
        allowed_values = ["OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED", "OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS", "OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_60_DAYS", "OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_90_DAYS"]  # noqa: E501
        if other_conversion_event_lookback_window not in allowed_values:
            raise ValueError(
                "Invalid value for `other_conversion_event_lookback_window` ({0}), must be one of {1}"
                .format(other_conversion_event_lookback_window, allowed_values)
            )

        self._other_conversion_event_lookback_window = other_conversion_event_lookback_window

    @property
    def reporting_attribution_model(self):
        """Gets the reporting_attribution_model of this GoogleAnalyticsAdminV1alphaAttributionSettings.

        Required. The reporting attribution model used to calculate conversion credit in this property's reports. Changing the attribution model will apply to both historical and future data. These changes will be reflected in reports with conversion and revenue data. User and session data will be unaffected.

        :return: The reporting_attribution_model of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        :rtype: str
        """
        return self._reporting_attribution_model

    @reporting_attribution_model.setter
    def reporting_attribution_model(self, reporting_attribution_model):
        """Sets the reporting_attribution_model of this GoogleAnalyticsAdminV1alphaAttributionSettings.

        Required. The reporting attribution model used to calculate conversion credit in this property's reports. Changing the attribution model will apply to both historical and future data. These changes will be reflected in reports with conversion and revenue data. User and session data will be unaffected.

        :param reporting_attribution_model: The reporting_attribution_model of this GoogleAnalyticsAdminV1alphaAttributionSettings.
        :type reporting_attribution_model: str
        """
        allowed_values = ["REPORTING_ATTRIBUTION_MODEL_UNSPECIFIED", "PAID_AND_ORGANIC_CHANNELS_DATA_DRIVEN", "PAID_AND_ORGANIC_CHANNELS_LAST_CLICK", "GOOGLE_PAID_CHANNELS_LAST_CLICK"]  # noqa: E501
        if reporting_attribution_model not in allowed_values:
            raise ValueError(
                "Invalid value for `reporting_attribution_model` ({0}), must be one of {1}"
                .format(reporting_attribution_model, allowed_values)
            )

        self._reporting_attribution_model = reporting_attribution_model
