# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAnalyticsAdminV1alphaChannelGroupFilterStringFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, match_type: str=None, value: str=None):
        """GoogleAnalyticsAdminV1alphaChannelGroupFilterStringFilter - a model defined in OpenAPI

        :param match_type: The match_type of this GoogleAnalyticsAdminV1alphaChannelGroupFilterStringFilter.
        :param value: The value of this GoogleAnalyticsAdminV1alphaChannelGroupFilterStringFilter.
        """
        self.openapi_types = {
            'match_type': str,
            'value': str
        }

        self.attribute_map = {
            'match_type': 'matchType',
            'value': 'value'
        }

        self._match_type = match_type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaChannelGroupFilterStringFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaChannelGroupFilterStringFilter of this GoogleAnalyticsAdminV1alphaChannelGroupFilterStringFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_type(self):
        """Gets the match_type of this GoogleAnalyticsAdminV1alphaChannelGroupFilterStringFilter.

        Required. The match type for the string filter.

        :return: The match_type of this GoogleAnalyticsAdminV1alphaChannelGroupFilterStringFilter.
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this GoogleAnalyticsAdminV1alphaChannelGroupFilterStringFilter.

        Required. The match type for the string filter.

        :param match_type: The match_type of this GoogleAnalyticsAdminV1alphaChannelGroupFilterStringFilter.
        :type match_type: str
        """
        allowed_values = ["MATCH_TYPE_UNSPECIFIED", "EXACT", "BEGINS_WITH", "ENDS_WITH", "CONTAINS", "FULL_REGEXP", "PARTIAL_REGEXP"]  # noqa: E501
        if match_type not in allowed_values:
            raise ValueError(
                "Invalid value for `match_type` ({0}), must be one of {1}"
                .format(match_type, allowed_values)
            )

        self._match_type = match_type

    @property
    def value(self):
        """Gets the value of this GoogleAnalyticsAdminV1alphaChannelGroupFilterStringFilter.

        Required. The string value to be matched against.

        :return: The value of this GoogleAnalyticsAdminV1alphaChannelGroupFilterStringFilter.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GoogleAnalyticsAdminV1alphaChannelGroupFilterStringFilter.

        Required. The string value to be matched against.

        :param value: The value of this GoogleAnalyticsAdminV1alphaChannelGroupFilterStringFilter.
        :type value: str
        """

        self._value = value
