# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1alpha_subproperty_event_filter_expression import GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression
from openapi_server import util


class GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_clause_type: str=None, filter_expression: GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression=None):
        """GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause - a model defined in OpenAPI

        :param filter_clause_type: The filter_clause_type of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.
        :param filter_expression: The filter_expression of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.
        """
        self.openapi_types = {
            'filter_clause_type': str,
            'filter_expression': GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression
        }

        self.attribute_map = {
            'filter_clause_type': 'filterClauseType',
            'filter_expression': 'filterExpression'
        }

        self._filter_clause_type = filter_clause_type
        self._filter_expression = filter_expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_clause_type(self):
        """Gets the filter_clause_type of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.

        Required. The type for the filter clause.

        :return: The filter_clause_type of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.
        :rtype: str
        """
        return self._filter_clause_type

    @filter_clause_type.setter
    def filter_clause_type(self, filter_clause_type):
        """Sets the filter_clause_type of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.

        Required. The type for the filter clause.

        :param filter_clause_type: The filter_clause_type of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.
        :type filter_clause_type: str
        """
        allowed_values = ["FILTER_CLAUSE_TYPE_UNSPECIFIED", "INCLUDE", "EXCLUDE"]  # noqa: E501
        if filter_clause_type not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_clause_type` ({0}), must be one of {1}"
                .format(filter_clause_type, allowed_values)
            )

        self._filter_clause_type = filter_clause_type

    @property
    def filter_expression(self):
        """Gets the filter_expression of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.


        :return: The filter_expression of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.
        :rtype: GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression
        """
        return self._filter_expression

    @filter_expression.setter
    def filter_expression(self, filter_expression):
        """Sets the filter_expression of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.


        :param filter_expression: The filter_expression of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.
        :type filter_expression: GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression
        """

        self._filter_expression = filter_expression
