# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAnalyticsAdminV1alphaGoogleSignalsSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent: str=None, name: str=None, state: str=None):
        """GoogleAnalyticsAdminV1alphaGoogleSignalsSettings - a model defined in OpenAPI

        :param consent: The consent of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.
        :param name: The name of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.
        :param state: The state of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.
        """
        self.openapi_types = {
            'consent': str,
            'name': str,
            'state': str
        }

        self.attribute_map = {
            'consent': 'consent',
            'name': 'name',
            'state': 'state'
        }

        self._consent = consent
        self._name = name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaGoogleSignalsSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaGoogleSignalsSettings of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent(self):
        """Gets the consent of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.

        Output only. Terms of Service acceptance.

        :return: The consent of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.
        :rtype: str
        """
        return self._consent

    @consent.setter
    def consent(self, consent):
        """Sets the consent of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.

        Output only. Terms of Service acceptance.

        :param consent: The consent of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.
        :type consent: str
        """
        allowed_values = ["GOOGLE_SIGNALS_CONSENT_UNSPECIFIED", "GOOGLE_SIGNALS_CONSENT_CONSENTED", "GOOGLE_SIGNALS_CONSENT_NOT_CONSENTED"]  # noqa: E501
        if consent not in allowed_values:
            raise ValueError(
                "Invalid value for `consent` ({0}), must be one of {1}"
                .format(consent, allowed_values)
            )

        self._consent = consent

    @property
    def name(self):
        """Gets the name of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.

        Output only. Resource name of this setting. Format: properties/{property_id}/googleSignalsSettings Example: \"properties/1000/googleSignalsSettings\"

        :return: The name of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.

        Output only. Resource name of this setting. Format: properties/{property_id}/googleSignalsSettings Example: \"properties/1000/googleSignalsSettings\"

        :param name: The name of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.

        Status of this setting.

        :return: The state of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.

        Status of this setting.

        :param state: The state of this GoogleAnalyticsAdminV1alphaGoogleSignalsSettings.
        :type state: str
        """
        allowed_values = ["GOOGLE_SIGNALS_STATE_UNSPECIFIED", "GOOGLE_SIGNALS_ENABLED", "GOOGLE_SIGNALS_DISABLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
