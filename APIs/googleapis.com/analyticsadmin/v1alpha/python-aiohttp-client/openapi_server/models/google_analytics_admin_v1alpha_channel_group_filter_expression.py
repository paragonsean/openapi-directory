# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1alpha_channel_group_filter import GoogleAnalyticsAdminV1alphaChannelGroupFilter
from openapi_server.models.google_analytics_admin_v1alpha_channel_group_filter_expression_list import GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList
from openapi_server import util


class GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, and_group: GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList=None, filter: GoogleAnalyticsAdminV1alphaChannelGroupFilter=None, not_expression: GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression=None, or_group: GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList=None):
        """GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression - a model defined in OpenAPI

        :param and_group: The and_group of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.
        :param filter: The filter of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.
        :param not_expression: The not_expression of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.
        :param or_group: The or_group of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.
        """
        self.openapi_types = {
            'and_group': GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList,
            'filter': GoogleAnalyticsAdminV1alphaChannelGroupFilter,
            'not_expression': GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression,
            'or_group': GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList
        }

        self.attribute_map = {
            'and_group': 'andGroup',
            'filter': 'filter',
            'not_expression': 'notExpression',
            'or_group': 'orGroup'
        }

        self._and_group = and_group
        self._filter = filter
        self._not_expression = not_expression
        self._or_group = or_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def and_group(self):
        """Gets the and_group of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.


        :return: The and_group of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.
        :rtype: GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList
        """
        return self._and_group

    @and_group.setter
    def and_group(self, and_group):
        """Sets the and_group of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.


        :param and_group: The and_group of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.
        :type and_group: GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList
        """

        self._and_group = and_group

    @property
    def filter(self):
        """Gets the filter of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.


        :return: The filter of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.
        :rtype: GoogleAnalyticsAdminV1alphaChannelGroupFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.


        :param filter: The filter of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.
        :type filter: GoogleAnalyticsAdminV1alphaChannelGroupFilter
        """

        self._filter = filter

    @property
    def not_expression(self):
        """Gets the not_expression of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.


        :return: The not_expression of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.
        :rtype: GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression
        """
        return self._not_expression

    @not_expression.setter
    def not_expression(self, not_expression):
        """Sets the not_expression of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.


        :param not_expression: The not_expression of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.
        :type not_expression: GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression
        """

        self._not_expression = not_expression

    @property
    def or_group(self):
        """Gets the or_group of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.


        :return: The or_group of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.
        :rtype: GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList
        """
        return self._or_group

    @or_group.setter
    def or_group(self, or_group):
        """Sets the or_group of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.


        :param or_group: The or_group of this GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.
        :type or_group: GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList
        """

        self._or_group = or_group
