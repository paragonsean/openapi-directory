# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1alpha_change_history_change import GoogleAnalyticsAdminV1alphaChangeHistoryChange
from openapi_server import util


class GoogleAnalyticsAdminV1alphaChangeHistoryEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actor_type: str=None, change_time: str=None, changes: List[GoogleAnalyticsAdminV1alphaChangeHistoryChange]=None, changes_filtered: bool=None, id: str=None, user_actor_email: str=None):
        """GoogleAnalyticsAdminV1alphaChangeHistoryEvent - a model defined in OpenAPI

        :param actor_type: The actor_type of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :param change_time: The change_time of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :param changes: The changes of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :param changes_filtered: The changes_filtered of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :param id: The id of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :param user_actor_email: The user_actor_email of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        """
        self.openapi_types = {
            'actor_type': str,
            'change_time': str,
            'changes': List[GoogleAnalyticsAdminV1alphaChangeHistoryChange],
            'changes_filtered': bool,
            'id': str,
            'user_actor_email': str
        }

        self.attribute_map = {
            'actor_type': 'actorType',
            'change_time': 'changeTime',
            'changes': 'changes',
            'changes_filtered': 'changesFiltered',
            'id': 'id',
            'user_actor_email': 'userActorEmail'
        }

        self._actor_type = actor_type
        self._change_time = change_time
        self._changes = changes
        self._changes_filtered = changes_filtered
        self._id = id
        self._user_actor_email = user_actor_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaChangeHistoryEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaChangeHistoryEvent of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor_type(self):
        """Gets the actor_type of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.

        The type of actor that made this change.

        :return: The actor_type of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :rtype: str
        """
        return self._actor_type

    @actor_type.setter
    def actor_type(self, actor_type):
        """Sets the actor_type of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.

        The type of actor that made this change.

        :param actor_type: The actor_type of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :type actor_type: str
        """
        allowed_values = ["ACTOR_TYPE_UNSPECIFIED", "USER", "SYSTEM", "SUPPORT"]  # noqa: E501
        if actor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `actor_type` ({0}), must be one of {1}"
                .format(actor_type, allowed_values)
            )

        self._actor_type = actor_type

    @property
    def change_time(self):
        """Gets the change_time of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.

        Time when change was made.

        :return: The change_time of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :rtype: str
        """
        return self._change_time

    @change_time.setter
    def change_time(self, change_time):
        """Sets the change_time of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.

        Time when change was made.

        :param change_time: The change_time of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :type change_time: str
        """

        self._change_time = change_time

    @property
    def changes(self):
        """Gets the changes of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.

        A list of changes made in this change history event that fit the filters specified in SearchChangeHistoryEventsRequest.

        :return: The changes of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :rtype: List[GoogleAnalyticsAdminV1alphaChangeHistoryChange]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.

        A list of changes made in this change history event that fit the filters specified in SearchChangeHistoryEventsRequest.

        :param changes: The changes of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :type changes: List[GoogleAnalyticsAdminV1alphaChangeHistoryChange]
        """

        self._changes = changes

    @property
    def changes_filtered(self):
        """Gets the changes_filtered of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.

        If true, then the list of changes returned was filtered, and does not represent all changes that occurred in this event.

        :return: The changes_filtered of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :rtype: bool
        """
        return self._changes_filtered

    @changes_filtered.setter
    def changes_filtered(self, changes_filtered):
        """Sets the changes_filtered of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.

        If true, then the list of changes returned was filtered, and does not represent all changes that occurred in this event.

        :param changes_filtered: The changes_filtered of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :type changes_filtered: bool
        """

        self._changes_filtered = changes_filtered

    @property
    def id(self):
        """Gets the id of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.

        ID of this change history event. This ID is unique across Google Analytics.

        :return: The id of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.

        ID of this change history event. This ID is unique across Google Analytics.

        :param id: The id of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :type id: str
        """

        self._id = id

    @property
    def user_actor_email(self):
        """Gets the user_actor_email of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.

        Email address of the Google account that made the change. This will be a valid email address if the actor field is set to USER, and empty otherwise. Google accounts that have been deleted will cause an error.

        :return: The user_actor_email of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :rtype: str
        """
        return self._user_actor_email

    @user_actor_email.setter
    def user_actor_email(self, user_actor_email):
        """Sets the user_actor_email of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.

        Email address of the Google account that made the change. This will be a valid email address if the actor field is set to USER, and empty otherwise. Google accounts that have been deleted will cause an error.

        :param user_actor_email: The user_actor_email of this GoogleAnalyticsAdminV1alphaChangeHistoryEvent.
        :type user_actor_email: str
        """

        self._user_actor_email = user_actor_email
