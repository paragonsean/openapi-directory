# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1alpha_matching_condition import GoogleAnalyticsAdminV1alphaMatchingCondition
from openapi_server.models.google_analytics_admin_v1alpha_parameter_mutation import GoogleAnalyticsAdminV1alphaParameterMutation
from openapi_server import util


class GoogleAnalyticsAdminV1alphaEventCreateRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_event: str=None, event_conditions: List[GoogleAnalyticsAdminV1alphaMatchingCondition]=None, name: str=None, parameter_mutations: List[GoogleAnalyticsAdminV1alphaParameterMutation]=None, source_copy_parameters: bool=None):
        """GoogleAnalyticsAdminV1alphaEventCreateRule - a model defined in OpenAPI

        :param destination_event: The destination_event of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        :param event_conditions: The event_conditions of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        :param name: The name of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        :param parameter_mutations: The parameter_mutations of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        :param source_copy_parameters: The source_copy_parameters of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        """
        self.openapi_types = {
            'destination_event': str,
            'event_conditions': List[GoogleAnalyticsAdminV1alphaMatchingCondition],
            'name': str,
            'parameter_mutations': List[GoogleAnalyticsAdminV1alphaParameterMutation],
            'source_copy_parameters': bool
        }

        self.attribute_map = {
            'destination_event': 'destinationEvent',
            'event_conditions': 'eventConditions',
            'name': 'name',
            'parameter_mutations': 'parameterMutations',
            'source_copy_parameters': 'sourceCopyParameters'
        }

        self._destination_event = destination_event
        self._event_conditions = event_conditions
        self._name = name
        self._parameter_mutations = parameter_mutations
        self._source_copy_parameters = source_copy_parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaEventCreateRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaEventCreateRule of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_event(self):
        """Gets the destination_event of this GoogleAnalyticsAdminV1alphaEventCreateRule.

        Required. The name of the new event to be created. This value must: * be less than 40 characters * consist only of letters, digits or _ (underscores) * start with a letter

        :return: The destination_event of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        :rtype: str
        """
        return self._destination_event

    @destination_event.setter
    def destination_event(self, destination_event):
        """Sets the destination_event of this GoogleAnalyticsAdminV1alphaEventCreateRule.

        Required. The name of the new event to be created. This value must: * be less than 40 characters * consist only of letters, digits or _ (underscores) * start with a letter

        :param destination_event: The destination_event of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        :type destination_event: str
        """

        self._destination_event = destination_event

    @property
    def event_conditions(self):
        """Gets the event_conditions of this GoogleAnalyticsAdminV1alphaEventCreateRule.

        Required. Must have at least one condition, and can have up to 10 max. Conditions on the source event must match for this rule to be applied.

        :return: The event_conditions of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        :rtype: List[GoogleAnalyticsAdminV1alphaMatchingCondition]
        """
        return self._event_conditions

    @event_conditions.setter
    def event_conditions(self, event_conditions):
        """Sets the event_conditions of this GoogleAnalyticsAdminV1alphaEventCreateRule.

        Required. Must have at least one condition, and can have up to 10 max. Conditions on the source event must match for this rule to be applied.

        :param event_conditions: The event_conditions of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        :type event_conditions: List[GoogleAnalyticsAdminV1alphaMatchingCondition]
        """

        self._event_conditions = event_conditions

    @property
    def name(self):
        """Gets the name of this GoogleAnalyticsAdminV1alphaEventCreateRule.

        Output only. Resource name for this EventCreateRule resource. Format: properties/{property}/dataStreams/{data_stream}/eventCreateRules/{event_create_rule}

        :return: The name of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleAnalyticsAdminV1alphaEventCreateRule.

        Output only. Resource name for this EventCreateRule resource. Format: properties/{property}/dataStreams/{data_stream}/eventCreateRules/{event_create_rule}

        :param name: The name of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        :type name: str
        """

        self._name = name

    @property
    def parameter_mutations(self):
        """Gets the parameter_mutations of this GoogleAnalyticsAdminV1alphaEventCreateRule.

        Parameter mutations define parameter behavior on the new event, and are applied in order. A maximum of 20 mutations can be applied.

        :return: The parameter_mutations of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        :rtype: List[GoogleAnalyticsAdminV1alphaParameterMutation]
        """
        return self._parameter_mutations

    @parameter_mutations.setter
    def parameter_mutations(self, parameter_mutations):
        """Sets the parameter_mutations of this GoogleAnalyticsAdminV1alphaEventCreateRule.

        Parameter mutations define parameter behavior on the new event, and are applied in order. A maximum of 20 mutations can be applied.

        :param parameter_mutations: The parameter_mutations of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        :type parameter_mutations: List[GoogleAnalyticsAdminV1alphaParameterMutation]
        """

        self._parameter_mutations = parameter_mutations

    @property
    def source_copy_parameters(self):
        """Gets the source_copy_parameters of this GoogleAnalyticsAdminV1alphaEventCreateRule.

        If true, the source parameters are copied to the new event. If false, or unset, all non-internal parameters are not copied from the source event. Parameter mutations are applied after the parameters have been copied.

        :return: The source_copy_parameters of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        :rtype: bool
        """
        return self._source_copy_parameters

    @source_copy_parameters.setter
    def source_copy_parameters(self, source_copy_parameters):
        """Sets the source_copy_parameters of this GoogleAnalyticsAdminV1alphaEventCreateRule.

        If true, the source parameters are copied to the new event. If false, or unset, all non-internal parameters are not copied from the source event. Parameter mutations are applied after the parameters have been copied.

        :param source_copy_parameters: The source_copy_parameters of this GoogleAnalyticsAdminV1alphaEventCreateRule.
        :type source_copy_parameters: bool
        """

        self._source_copy_parameters = source_copy_parameters
