# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1alpha_audience_filter_expression import GoogleAnalyticsAdminV1alphaAudienceFilterExpression
from openapi_server import util


class GoogleAnalyticsAdminV1alphaAudienceEventFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_name: str=None, event_parameter_filter_expression: GoogleAnalyticsAdminV1alphaAudienceFilterExpression=None):
        """GoogleAnalyticsAdminV1alphaAudienceEventFilter - a model defined in OpenAPI

        :param event_name: The event_name of this GoogleAnalyticsAdminV1alphaAudienceEventFilter.
        :param event_parameter_filter_expression: The event_parameter_filter_expression of this GoogleAnalyticsAdminV1alphaAudienceEventFilter.
        """
        self.openapi_types = {
            'event_name': str,
            'event_parameter_filter_expression': GoogleAnalyticsAdminV1alphaAudienceFilterExpression
        }

        self.attribute_map = {
            'event_name': 'eventName',
            'event_parameter_filter_expression': 'eventParameterFilterExpression'
        }

        self._event_name = event_name
        self._event_parameter_filter_expression = event_parameter_filter_expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaAudienceEventFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaAudienceEventFilter of this GoogleAnalyticsAdminV1alphaAudienceEventFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_name(self):
        """Gets the event_name of this GoogleAnalyticsAdminV1alphaAudienceEventFilter.

        Required. Immutable. The name of the event to match against.

        :return: The event_name of this GoogleAnalyticsAdminV1alphaAudienceEventFilter.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this GoogleAnalyticsAdminV1alphaAudienceEventFilter.

        Required. Immutable. The name of the event to match against.

        :param event_name: The event_name of this GoogleAnalyticsAdminV1alphaAudienceEventFilter.
        :type event_name: str
        """

        self._event_name = event_name

    @property
    def event_parameter_filter_expression(self):
        """Gets the event_parameter_filter_expression of this GoogleAnalyticsAdminV1alphaAudienceEventFilter.


        :return: The event_parameter_filter_expression of this GoogleAnalyticsAdminV1alphaAudienceEventFilter.
        :rtype: GoogleAnalyticsAdminV1alphaAudienceFilterExpression
        """
        return self._event_parameter_filter_expression

    @event_parameter_filter_expression.setter
    def event_parameter_filter_expression(self, event_parameter_filter_expression):
        """Sets the event_parameter_filter_expression of this GoogleAnalyticsAdminV1alphaAudienceEventFilter.


        :param event_parameter_filter_expression: The event_parameter_filter_expression of this GoogleAnalyticsAdminV1alphaAudienceEventFilter.
        :type event_parameter_filter_expression: GoogleAnalyticsAdminV1alphaAudienceFilterExpression
        """

        self._event_parameter_filter_expression = event_parameter_filter_expression
