# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAnalyticsAdminV1alphaEventMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_name: str=None, max_event_count: str=None, max_event_value: float=None, min_event_count: str=None, min_event_value: float=None):
        """GoogleAnalyticsAdminV1alphaEventMapping - a model defined in OpenAPI

        :param event_name: The event_name of this GoogleAnalyticsAdminV1alphaEventMapping.
        :param max_event_count: The max_event_count of this GoogleAnalyticsAdminV1alphaEventMapping.
        :param max_event_value: The max_event_value of this GoogleAnalyticsAdminV1alphaEventMapping.
        :param min_event_count: The min_event_count of this GoogleAnalyticsAdminV1alphaEventMapping.
        :param min_event_value: The min_event_value of this GoogleAnalyticsAdminV1alphaEventMapping.
        """
        self.openapi_types = {
            'event_name': str,
            'max_event_count': str,
            'max_event_value': float,
            'min_event_count': str,
            'min_event_value': float
        }

        self.attribute_map = {
            'event_name': 'eventName',
            'max_event_count': 'maxEventCount',
            'max_event_value': 'maxEventValue',
            'min_event_count': 'minEventCount',
            'min_event_value': 'minEventValue'
        }

        self._event_name = event_name
        self._max_event_count = max_event_count
        self._max_event_value = max_event_value
        self._min_event_count = min_event_count
        self._min_event_value = min_event_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaEventMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaEventMapping of this GoogleAnalyticsAdminV1alphaEventMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_name(self):
        """Gets the event_name of this GoogleAnalyticsAdminV1alphaEventMapping.

        Required. Name of the GA4 event. It must always be set. The max allowed display name length is 40 UTF-16 code units.

        :return: The event_name of this GoogleAnalyticsAdminV1alphaEventMapping.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this GoogleAnalyticsAdminV1alphaEventMapping.

        Required. Name of the GA4 event. It must always be set. The max allowed display name length is 40 UTF-16 code units.

        :param event_name: The event_name of this GoogleAnalyticsAdminV1alphaEventMapping.
        :type event_name: str
        """

        self._event_name = event_name

    @property
    def max_event_count(self):
        """Gets the max_event_count of this GoogleAnalyticsAdminV1alphaEventMapping.

        The maximum number of times the event occurred. If not set, maximum event count won't be checked.

        :return: The max_event_count of this GoogleAnalyticsAdminV1alphaEventMapping.
        :rtype: str
        """
        return self._max_event_count

    @max_event_count.setter
    def max_event_count(self, max_event_count):
        """Sets the max_event_count of this GoogleAnalyticsAdminV1alphaEventMapping.

        The maximum number of times the event occurred. If not set, maximum event count won't be checked.

        :param max_event_count: The max_event_count of this GoogleAnalyticsAdminV1alphaEventMapping.
        :type max_event_count: str
        """

        self._max_event_count = max_event_count

    @property
    def max_event_value(self):
        """Gets the max_event_value of this GoogleAnalyticsAdminV1alphaEventMapping.

        The maximum revenue generated due to the event. Revenue currency will be defined at the property level. If not set, maximum event value won't be checked.

        :return: The max_event_value of this GoogleAnalyticsAdminV1alphaEventMapping.
        :rtype: float
        """
        return self._max_event_value

    @max_event_value.setter
    def max_event_value(self, max_event_value):
        """Sets the max_event_value of this GoogleAnalyticsAdminV1alphaEventMapping.

        The maximum revenue generated due to the event. Revenue currency will be defined at the property level. If not set, maximum event value won't be checked.

        :param max_event_value: The max_event_value of this GoogleAnalyticsAdminV1alphaEventMapping.
        :type max_event_value: float
        """

        self._max_event_value = max_event_value

    @property
    def min_event_count(self):
        """Gets the min_event_count of this GoogleAnalyticsAdminV1alphaEventMapping.

        At least one of the following four min/max values must be set. The values set will be ANDed together to qualify an event. The minimum number of times the event occurred. If not set, minimum event count won't be checked.

        :return: The min_event_count of this GoogleAnalyticsAdminV1alphaEventMapping.
        :rtype: str
        """
        return self._min_event_count

    @min_event_count.setter
    def min_event_count(self, min_event_count):
        """Sets the min_event_count of this GoogleAnalyticsAdminV1alphaEventMapping.

        At least one of the following four min/max values must be set. The values set will be ANDed together to qualify an event. The minimum number of times the event occurred. If not set, minimum event count won't be checked.

        :param min_event_count: The min_event_count of this GoogleAnalyticsAdminV1alphaEventMapping.
        :type min_event_count: str
        """

        self._min_event_count = min_event_count

    @property
    def min_event_value(self):
        """Gets the min_event_value of this GoogleAnalyticsAdminV1alphaEventMapping.

        The minimum revenue generated due to the event. Revenue currency will be defined at the property level. If not set, minimum event value won't be checked.

        :return: The min_event_value of this GoogleAnalyticsAdminV1alphaEventMapping.
        :rtype: float
        """
        return self._min_event_value

    @min_event_value.setter
    def min_event_value(self, min_event_value):
        """Sets the min_event_value of this GoogleAnalyticsAdminV1alphaEventMapping.

        The minimum revenue generated due to the event. Revenue currency will be defined at the property level. If not set, minimum event value won't be checked.

        :param min_event_value: The min_event_value of this GoogleAnalyticsAdminV1alphaEventMapping.
        :type min_event_value: float
        """

        self._min_event_value = min_event_value
