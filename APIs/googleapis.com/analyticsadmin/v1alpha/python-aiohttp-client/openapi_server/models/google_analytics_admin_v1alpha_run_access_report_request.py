# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1alpha_access_date_range import GoogleAnalyticsAdminV1alphaAccessDateRange
from openapi_server.models.google_analytics_admin_v1alpha_access_dimension import GoogleAnalyticsAdminV1alphaAccessDimension
from openapi_server.models.google_analytics_admin_v1alpha_access_filter_expression import GoogleAnalyticsAdminV1alphaAccessFilterExpression
from openapi_server.models.google_analytics_admin_v1alpha_access_metric import GoogleAnalyticsAdminV1alphaAccessMetric
from openapi_server.models.google_analytics_admin_v1alpha_access_order_by import GoogleAnalyticsAdminV1alphaAccessOrderBy
from openapi_server import util


class GoogleAnalyticsAdminV1alphaRunAccessReportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_ranges: List[GoogleAnalyticsAdminV1alphaAccessDateRange]=None, dimension_filter: GoogleAnalyticsAdminV1alphaAccessFilterExpression=None, dimensions: List[GoogleAnalyticsAdminV1alphaAccessDimension]=None, expand_groups: bool=None, include_all_users: bool=None, limit: str=None, metric_filter: GoogleAnalyticsAdminV1alphaAccessFilterExpression=None, metrics: List[GoogleAnalyticsAdminV1alphaAccessMetric]=None, offset: str=None, order_bys: List[GoogleAnalyticsAdminV1alphaAccessOrderBy]=None, return_entity_quota: bool=None, time_zone: str=None):
        """GoogleAnalyticsAdminV1alphaRunAccessReportRequest - a model defined in OpenAPI

        :param date_ranges: The date_ranges of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :param dimension_filter: The dimension_filter of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :param dimensions: The dimensions of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :param expand_groups: The expand_groups of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :param include_all_users: The include_all_users of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :param limit: The limit of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :param metric_filter: The metric_filter of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :param metrics: The metrics of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :param offset: The offset of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :param order_bys: The order_bys of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :param return_entity_quota: The return_entity_quota of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :param time_zone: The time_zone of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        """
        self.openapi_types = {
            'date_ranges': List[GoogleAnalyticsAdminV1alphaAccessDateRange],
            'dimension_filter': GoogleAnalyticsAdminV1alphaAccessFilterExpression,
            'dimensions': List[GoogleAnalyticsAdminV1alphaAccessDimension],
            'expand_groups': bool,
            'include_all_users': bool,
            'limit': str,
            'metric_filter': GoogleAnalyticsAdminV1alphaAccessFilterExpression,
            'metrics': List[GoogleAnalyticsAdminV1alphaAccessMetric],
            'offset': str,
            'order_bys': List[GoogleAnalyticsAdminV1alphaAccessOrderBy],
            'return_entity_quota': bool,
            'time_zone': str
        }

        self.attribute_map = {
            'date_ranges': 'dateRanges',
            'dimension_filter': 'dimensionFilter',
            'dimensions': 'dimensions',
            'expand_groups': 'expandGroups',
            'include_all_users': 'includeAllUsers',
            'limit': 'limit',
            'metric_filter': 'metricFilter',
            'metrics': 'metrics',
            'offset': 'offset',
            'order_bys': 'orderBys',
            'return_entity_quota': 'returnEntityQuota',
            'time_zone': 'timeZone'
        }

        self._date_ranges = date_ranges
        self._dimension_filter = dimension_filter
        self._dimensions = dimensions
        self._expand_groups = expand_groups
        self._include_all_users = include_all_users
        self._limit = limit
        self._metric_filter = metric_filter
        self._metrics = metrics
        self._offset = offset
        self._order_bys = order_bys
        self._return_entity_quota = return_entity_quota
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaRunAccessReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaRunAccessReportRequest of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_ranges(self):
        """Gets the date_ranges of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        Date ranges of access records to read. If multiple date ranges are requested, each response row will contain a zero based date range index. If two date ranges overlap, the access records for the overlapping days is included in the response rows for both date ranges. Requests are allowed up to 2 date ranges.

        :return: The date_ranges of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :rtype: List[GoogleAnalyticsAdminV1alphaAccessDateRange]
        """
        return self._date_ranges

    @date_ranges.setter
    def date_ranges(self, date_ranges):
        """Sets the date_ranges of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        Date ranges of access records to read. If multiple date ranges are requested, each response row will contain a zero based date range index. If two date ranges overlap, the access records for the overlapping days is included in the response rows for both date ranges. Requests are allowed up to 2 date ranges.

        :param date_ranges: The date_ranges of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :type date_ranges: List[GoogleAnalyticsAdminV1alphaAccessDateRange]
        """

        self._date_ranges = date_ranges

    @property
    def dimension_filter(self):
        """Gets the dimension_filter of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.


        :return: The dimension_filter of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :rtype: GoogleAnalyticsAdminV1alphaAccessFilterExpression
        """
        return self._dimension_filter

    @dimension_filter.setter
    def dimension_filter(self, dimension_filter):
        """Sets the dimension_filter of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.


        :param dimension_filter: The dimension_filter of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :type dimension_filter: GoogleAnalyticsAdminV1alphaAccessFilterExpression
        """

        self._dimension_filter = dimension_filter

    @property
    def dimensions(self):
        """Gets the dimensions of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        The dimensions requested and displayed in the response. Requests are allowed up to 9 dimensions.

        :return: The dimensions of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :rtype: List[GoogleAnalyticsAdminV1alphaAccessDimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        The dimensions requested and displayed in the response. Requests are allowed up to 9 dimensions.

        :param dimensions: The dimensions of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :type dimensions: List[GoogleAnalyticsAdminV1alphaAccessDimension]
        """

        self._dimensions = dimensions

    @property
    def expand_groups(self):
        """Gets the expand_groups of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        Optional. Decides whether to return the users within user groups. This field works only when include_all_users is set to true. If true, it will return all users with access to the specified property or account. If false, only the users with direct access will be returned.

        :return: The expand_groups of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :rtype: bool
        """
        return self._expand_groups

    @expand_groups.setter
    def expand_groups(self, expand_groups):
        """Sets the expand_groups of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        Optional. Decides whether to return the users within user groups. This field works only when include_all_users is set to true. If true, it will return all users with access to the specified property or account. If false, only the users with direct access will be returned.

        :param expand_groups: The expand_groups of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :type expand_groups: bool
        """

        self._expand_groups = expand_groups

    @property
    def include_all_users(self):
        """Gets the include_all_users of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        Optional. Determines whether to include users who have never made an API call in the response. If true, all users with access to the specified property or account are included in the response, regardless of whether they have made an API call or not. If false, only the users who have made an API call will be included.

        :return: The include_all_users of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :rtype: bool
        """
        return self._include_all_users

    @include_all_users.setter
    def include_all_users(self, include_all_users):
        """Sets the include_all_users of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        Optional. Determines whether to include users who have never made an API call in the response. If true, all users with access to the specified property or account are included in the response, regardless of whether they have made an API call or not. If false, only the users who have made an API call will be included.

        :param include_all_users: The include_all_users of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :type include_all_users: bool
        """

        self._include_all_users = include_all_users

    @property
    def limit(self):
        """Gets the limit of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 100,000 rows per request, no matter how many you ask for. `limit` must be positive. The API may return fewer rows than the requested `limit`, if there aren't as many remaining rows as the `limit`. For instance, there are fewer than 300 possible values for the dimension `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you set `limit` to a higher value. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :return: The limit of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 100,000 rows per request, no matter how many you ask for. `limit` must be positive. The API may return fewer rows than the requested `limit`, if there aren't as many remaining rows as the `limit`. For instance, there are fewer than 300 possible values for the dimension `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you set `limit` to a higher value. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :param limit: The limit of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :type limit: str
        """

        self._limit = limit

    @property
    def metric_filter(self):
        """Gets the metric_filter of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.


        :return: The metric_filter of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :rtype: GoogleAnalyticsAdminV1alphaAccessFilterExpression
        """
        return self._metric_filter

    @metric_filter.setter
    def metric_filter(self, metric_filter):
        """Sets the metric_filter of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.


        :param metric_filter: The metric_filter of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :type metric_filter: GoogleAnalyticsAdminV1alphaAccessFilterExpression
        """

        self._metric_filter = metric_filter

    @property
    def metrics(self):
        """Gets the metrics of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        The metrics requested and displayed in the response. Requests are allowed up to 10 metrics.

        :return: The metrics of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :rtype: List[GoogleAnalyticsAdminV1alphaAccessMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        The metrics requested and displayed in the response. Requests are allowed up to 10 metrics.

        :param metrics: The metrics of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :type metrics: List[GoogleAnalyticsAdminV1alphaAccessMetric]
        """

        self._metrics = metrics

    @property
    def offset(self):
        """Gets the offset of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        The row count of the start row. The first row is counted as row 0. If offset is unspecified, it is treated as 0. If offset is zero, then this method will return the first page of results with `limit` entries. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :return: The offset of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        The row count of the start row. The first row is counted as row 0. If offset is unspecified, it is treated as 0. If offset is zero, then this method will return the first page of results with `limit` entries. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).

        :param offset: The offset of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :type offset: str
        """

        self._offset = offset

    @property
    def order_bys(self):
        """Gets the order_bys of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        Specifies how rows are ordered in the response.

        :return: The order_bys of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :rtype: List[GoogleAnalyticsAdminV1alphaAccessOrderBy]
        """
        return self._order_bys

    @order_bys.setter
    def order_bys(self, order_bys):
        """Sets the order_bys of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        Specifies how rows are ordered in the response.

        :param order_bys: The order_bys of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :type order_bys: List[GoogleAnalyticsAdminV1alphaAccessOrderBy]
        """

        self._order_bys = order_bys

    @property
    def return_entity_quota(self):
        """Gets the return_entity_quota of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        Toggles whether to return the current state of this Analytics Property's quota. Quota is returned in [AccessQuota](#AccessQuota). For account-level requests, this field must be false.

        :return: The return_entity_quota of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :rtype: bool
        """
        return self._return_entity_quota

    @return_entity_quota.setter
    def return_entity_quota(self, return_entity_quota):
        """Sets the return_entity_quota of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        Toggles whether to return the current state of this Analytics Property's quota. Quota is returned in [AccessQuota](#AccessQuota). For account-level requests, this field must be false.

        :param return_entity_quota: The return_entity_quota of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :type return_entity_quota: bool
        """

        self._return_entity_quota = return_entity_quota

    @property
    def time_zone(self):
        """Gets the time_zone of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        This request's time zone if specified. If unspecified, the property's time zone is used. The request's time zone is used to interpret the start & end dates of the report. Formatted as strings from the IANA Time Zone database (https://www.iana.org/time-zones); for example \"America/New_York\" or \"Asia/Tokyo\".

        :return: The time_zone of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.

        This request's time zone if specified. If unspecified, the property's time zone is used. The request's time zone is used to interpret the start & end dates of the report. Formatted as strings from the IANA Time Zone database (https://www.iana.org/time-zones); for example \"America/New_York\" or \"Asia/Tokyo\".

        :param time_zone: The time_zone of this GoogleAnalyticsAdminV1alphaRunAccessReportRequest.
        :type time_zone: str
        """

        self._time_zone = time_zone
