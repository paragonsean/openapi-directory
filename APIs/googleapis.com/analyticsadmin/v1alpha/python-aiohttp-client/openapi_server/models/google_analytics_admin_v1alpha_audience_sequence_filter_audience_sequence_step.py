# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1alpha_audience_filter_expression import GoogleAnalyticsAdminV1alphaAudienceFilterExpression
from openapi_server import util


class GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constraint_duration: str=None, filter_expression: GoogleAnalyticsAdminV1alphaAudienceFilterExpression=None, immediately_follows: bool=None, scope: str=None):
        """GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep - a model defined in OpenAPI

        :param constraint_duration: The constraint_duration of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.
        :param filter_expression: The filter_expression of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.
        :param immediately_follows: The immediately_follows of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.
        :param scope: The scope of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.
        """
        self.openapi_types = {
            'constraint_duration': str,
            'filter_expression': GoogleAnalyticsAdminV1alphaAudienceFilterExpression,
            'immediately_follows': bool,
            'scope': str
        }

        self.attribute_map = {
            'constraint_duration': 'constraintDuration',
            'filter_expression': 'filterExpression',
            'immediately_follows': 'immediatelyFollows',
            'scope': 'scope'
        }

        self._constraint_duration = constraint_duration
        self._filter_expression = filter_expression
        self._immediately_follows = immediately_follows
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constraint_duration(self):
        """Gets the constraint_duration of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.

        Optional. When set, this step must be satisfied within the constraint_duration of the previous step (For example, t[i] - t[i-1] <= constraint_duration). If not set, there is no duration requirement (the duration is effectively unlimited). It is ignored for the first step.

        :return: The constraint_duration of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.
        :rtype: str
        """
        return self._constraint_duration

    @constraint_duration.setter
    def constraint_duration(self, constraint_duration):
        """Sets the constraint_duration of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.

        Optional. When set, this step must be satisfied within the constraint_duration of the previous step (For example, t[i] - t[i-1] <= constraint_duration). If not set, there is no duration requirement (the duration is effectively unlimited). It is ignored for the first step.

        :param constraint_duration: The constraint_duration of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.
        :type constraint_duration: str
        """

        self._constraint_duration = constraint_duration

    @property
    def filter_expression(self):
        """Gets the filter_expression of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.


        :return: The filter_expression of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.
        :rtype: GoogleAnalyticsAdminV1alphaAudienceFilterExpression
        """
        return self._filter_expression

    @filter_expression.setter
    def filter_expression(self, filter_expression):
        """Sets the filter_expression of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.


        :param filter_expression: The filter_expression of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.
        :type filter_expression: GoogleAnalyticsAdminV1alphaAudienceFilterExpression
        """

        self._filter_expression = filter_expression

    @property
    def immediately_follows(self):
        """Gets the immediately_follows of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.

        Optional. If true, the event satisfying this step must be the very next event after the event satisfying the last step. If unset or false, this step indirectly follows the prior step; for example, there may be events between the prior step and this step. It is ignored for the first step.

        :return: The immediately_follows of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.
        :rtype: bool
        """
        return self._immediately_follows

    @immediately_follows.setter
    def immediately_follows(self, immediately_follows):
        """Sets the immediately_follows of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.

        Optional. If true, the event satisfying this step must be the very next event after the event satisfying the last step. If unset or false, this step indirectly follows the prior step; for example, there may be events between the prior step and this step. It is ignored for the first step.

        :param immediately_follows: The immediately_follows of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.
        :type immediately_follows: bool
        """

        self._immediately_follows = immediately_follows

    @property
    def scope(self):
        """Gets the scope of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.

        Required. Immutable. Specifies the scope for this step.

        :return: The scope of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.

        Required. Immutable. Specifies the scope for this step.

        :param scope: The scope of this GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.
        :type scope: str
        """
        allowed_values = ["AUDIENCE_FILTER_SCOPE_UNSPECIFIED", "AUDIENCE_FILTER_SCOPE_WITHIN_SAME_EVENT", "AUDIENCE_FILTER_SCOPE_WITHIN_SAME_SESSION", "AUDIENCE_FILTER_SCOPE_ACROSS_ALL_SESSIONS"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope
