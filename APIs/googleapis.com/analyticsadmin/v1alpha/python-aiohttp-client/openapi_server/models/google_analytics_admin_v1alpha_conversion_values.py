# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1alpha_event_mapping import GoogleAnalyticsAdminV1alphaEventMapping
from openapi_server import util


class GoogleAnalyticsAdminV1alphaConversionValues(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coarse_value: str=None, display_name: str=None, event_mappings: List[GoogleAnalyticsAdminV1alphaEventMapping]=None, fine_value: int=None, lock_enabled: bool=None):
        """GoogleAnalyticsAdminV1alphaConversionValues - a model defined in OpenAPI

        :param coarse_value: The coarse_value of this GoogleAnalyticsAdminV1alphaConversionValues.
        :param display_name: The display_name of this GoogleAnalyticsAdminV1alphaConversionValues.
        :param event_mappings: The event_mappings of this GoogleAnalyticsAdminV1alphaConversionValues.
        :param fine_value: The fine_value of this GoogleAnalyticsAdminV1alphaConversionValues.
        :param lock_enabled: The lock_enabled of this GoogleAnalyticsAdminV1alphaConversionValues.
        """
        self.openapi_types = {
            'coarse_value': str,
            'display_name': str,
            'event_mappings': List[GoogleAnalyticsAdminV1alphaEventMapping],
            'fine_value': int,
            'lock_enabled': bool
        }

        self.attribute_map = {
            'coarse_value': 'coarseValue',
            'display_name': 'displayName',
            'event_mappings': 'eventMappings',
            'fine_value': 'fineValue',
            'lock_enabled': 'lockEnabled'
        }

        self._coarse_value = coarse_value
        self._display_name = display_name
        self._event_mappings = event_mappings
        self._fine_value = fine_value
        self._lock_enabled = lock_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaConversionValues':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaConversionValues of this GoogleAnalyticsAdminV1alphaConversionValues.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coarse_value(self):
        """Gets the coarse_value of this GoogleAnalyticsAdminV1alphaConversionValues.

        Required. A coarse grained conversion value. This value is not guaranteed to be unique.

        :return: The coarse_value of this GoogleAnalyticsAdminV1alphaConversionValues.
        :rtype: str
        """
        return self._coarse_value

    @coarse_value.setter
    def coarse_value(self, coarse_value):
        """Sets the coarse_value of this GoogleAnalyticsAdminV1alphaConversionValues.

        Required. A coarse grained conversion value. This value is not guaranteed to be unique.

        :param coarse_value: The coarse_value of this GoogleAnalyticsAdminV1alphaConversionValues.
        :type coarse_value: str
        """
        allowed_values = ["COARSE_VALUE_UNSPECIFIED", "COARSE_VALUE_LOW", "COARSE_VALUE_MEDIUM", "COARSE_VALUE_HIGH"]  # noqa: E501
        if coarse_value not in allowed_values:
            raise ValueError(
                "Invalid value for `coarse_value` ({0}), must be one of {1}"
                .format(coarse_value, allowed_values)
            )

        self._coarse_value = coarse_value

    @property
    def display_name(self):
        """Gets the display_name of this GoogleAnalyticsAdminV1alphaConversionValues.

        Display name of the SKAdNetwork conversion value. The max allowed display name length is 50 UTF-16 code units.

        :return: The display_name of this GoogleAnalyticsAdminV1alphaConversionValues.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleAnalyticsAdminV1alphaConversionValues.

        Display name of the SKAdNetwork conversion value. The max allowed display name length is 50 UTF-16 code units.

        :param display_name: The display_name of this GoogleAnalyticsAdminV1alphaConversionValues.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def event_mappings(self):
        """Gets the event_mappings of this GoogleAnalyticsAdminV1alphaConversionValues.

        Event conditions that must be met for this Conversion Value to be achieved. The conditions in this list are ANDed together. It must have minimum of 1 entry and maximum of 3 entries, if the postback window is enabled.

        :return: The event_mappings of this GoogleAnalyticsAdminV1alphaConversionValues.
        :rtype: List[GoogleAnalyticsAdminV1alphaEventMapping]
        """
        return self._event_mappings

    @event_mappings.setter
    def event_mappings(self, event_mappings):
        """Sets the event_mappings of this GoogleAnalyticsAdminV1alphaConversionValues.

        Event conditions that must be met for this Conversion Value to be achieved. The conditions in this list are ANDed together. It must have minimum of 1 entry and maximum of 3 entries, if the postback window is enabled.

        :param event_mappings: The event_mappings of this GoogleAnalyticsAdminV1alphaConversionValues.
        :type event_mappings: List[GoogleAnalyticsAdminV1alphaEventMapping]
        """

        self._event_mappings = event_mappings

    @property
    def fine_value(self):
        """Gets the fine_value of this GoogleAnalyticsAdminV1alphaConversionValues.

        The fine-grained conversion value. This is applicable only to the first postback window. Its valid values are [0,63], both inclusive. It must be set for postback window 1, and must not be set for postback window 2 & 3. This value is not guaranteed to be unique. If the configuration for the first postback window is re-used for second or third postback windows this field has no effect.

        :return: The fine_value of this GoogleAnalyticsAdminV1alphaConversionValues.
        :rtype: int
        """
        return self._fine_value

    @fine_value.setter
    def fine_value(self, fine_value):
        """Sets the fine_value of this GoogleAnalyticsAdminV1alphaConversionValues.

        The fine-grained conversion value. This is applicable only to the first postback window. Its valid values are [0,63], both inclusive. It must be set for postback window 1, and must not be set for postback window 2 & 3. This value is not guaranteed to be unique. If the configuration for the first postback window is re-used for second or third postback windows this field has no effect.

        :param fine_value: The fine_value of this GoogleAnalyticsAdminV1alphaConversionValues.
        :type fine_value: int
        """

        self._fine_value = fine_value

    @property
    def lock_enabled(self):
        """Gets the lock_enabled of this GoogleAnalyticsAdminV1alphaConversionValues.

        If true, the SDK should lock to this conversion value for the current postback window.

        :return: The lock_enabled of this GoogleAnalyticsAdminV1alphaConversionValues.
        :rtype: bool
        """
        return self._lock_enabled

    @lock_enabled.setter
    def lock_enabled(self, lock_enabled):
        """Sets the lock_enabled of this GoogleAnalyticsAdminV1alphaConversionValues.

        If true, the SDK should lock to this conversion value for the current postback window.

        :param lock_enabled: The lock_enabled of this GoogleAnalyticsAdminV1alphaConversionValues.
        :type lock_enabled: bool
        """

        self._lock_enabled = lock_enabled
