# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_admin_v1alpha_subproperty_event_filter_clause import GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause
from openapi_server import util


class GoogleAnalyticsAdminV1alphaSubpropertyEventFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_to_property: str=None, filter_clauses: List[GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause]=None, name: str=None):
        """GoogleAnalyticsAdminV1alphaSubpropertyEventFilter - a model defined in OpenAPI

        :param apply_to_property: The apply_to_property of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.
        :param filter_clauses: The filter_clauses of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.
        :param name: The name of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.
        """
        self.openapi_types = {
            'apply_to_property': str,
            'filter_clauses': List[GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause],
            'name': str
        }

        self.attribute_map = {
            'apply_to_property': 'applyToProperty',
            'filter_clauses': 'filterClauses',
            'name': 'name'
        }

        self._apply_to_property = apply_to_property
        self._filter_clauses = filter_clauses
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAnalyticsAdminV1alphaSubpropertyEventFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAnalyticsAdminV1alphaSubpropertyEventFilter of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_to_property(self):
        """Gets the apply_to_property of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.

        Immutable. Resource name of the Subproperty that uses this filter.

        :return: The apply_to_property of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.
        :rtype: str
        """
        return self._apply_to_property

    @apply_to_property.setter
    def apply_to_property(self, apply_to_property):
        """Sets the apply_to_property of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.

        Immutable. Resource name of the Subproperty that uses this filter.

        :param apply_to_property: The apply_to_property of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.
        :type apply_to_property: str
        """

        self._apply_to_property = apply_to_property

    @property
    def filter_clauses(self):
        """Gets the filter_clauses of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.

        Required. Unordered list. Filter clauses that define the SubpropertyEventFilter. All clauses are AND'ed together to determine what data is sent to the subproperty.

        :return: The filter_clauses of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.
        :rtype: List[GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause]
        """
        return self._filter_clauses

    @filter_clauses.setter
    def filter_clauses(self, filter_clauses):
        """Sets the filter_clauses of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.

        Required. Unordered list. Filter clauses that define the SubpropertyEventFilter. All clauses are AND'ed together to determine what data is sent to the subproperty.

        :param filter_clauses: The filter_clauses of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.
        :type filter_clauses: List[GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause]
        """

        self._filter_clauses = filter_clauses

    @property
    def name(self):
        """Gets the name of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.

        Output only. Format: properties/{ordinary_property_id}/subpropertyEventFilters/{sub_property_event_filter} Example: properties/1234/subpropertyEventFilters/5678

        :return: The name of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.

        Output only. Format: properties/{ordinary_property_id}/subpropertyEventFilters/{sub_property_event_filter} Example: properties/1234/subpropertyEventFilters/5678

        :param name: The name of this GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.
        :type name: str
        """

        self._name = name
