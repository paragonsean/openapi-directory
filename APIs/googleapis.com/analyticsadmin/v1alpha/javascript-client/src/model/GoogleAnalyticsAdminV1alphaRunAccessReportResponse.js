/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleAnalyticsAdminV1alphaAccessDimensionHeader from './GoogleAnalyticsAdminV1alphaAccessDimensionHeader';
import GoogleAnalyticsAdminV1alphaAccessMetricHeader from './GoogleAnalyticsAdminV1alphaAccessMetricHeader';
import GoogleAnalyticsAdminV1alphaAccessQuota from './GoogleAnalyticsAdminV1alphaAccessQuota';
import GoogleAnalyticsAdminV1alphaAccessRow from './GoogleAnalyticsAdminV1alphaAccessRow';

/**
 * The GoogleAnalyticsAdminV1alphaRunAccessReportResponse model module.
 * @module model/GoogleAnalyticsAdminV1alphaRunAccessReportResponse
 * @version v1alpha
 */
class GoogleAnalyticsAdminV1alphaRunAccessReportResponse {
    /**
     * Constructs a new <code>GoogleAnalyticsAdminV1alphaRunAccessReportResponse</code>.
     * The customized Data Access Record Report response.
     * @alias module:model/GoogleAnalyticsAdminV1alphaRunAccessReportResponse
     */
    constructor() { 
        
        GoogleAnalyticsAdminV1alphaRunAccessReportResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleAnalyticsAdminV1alphaRunAccessReportResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleAnalyticsAdminV1alphaRunAccessReportResponse} obj Optional instance to populate.
     * @return {module:model/GoogleAnalyticsAdminV1alphaRunAccessReportResponse} The populated <code>GoogleAnalyticsAdminV1alphaRunAccessReportResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleAnalyticsAdminV1alphaRunAccessReportResponse();

            if (data.hasOwnProperty('dimensionHeaders')) {
                obj['dimensionHeaders'] = ApiClient.convertToType(data['dimensionHeaders'], [GoogleAnalyticsAdminV1alphaAccessDimensionHeader]);
            }
            if (data.hasOwnProperty('metricHeaders')) {
                obj['metricHeaders'] = ApiClient.convertToType(data['metricHeaders'], [GoogleAnalyticsAdminV1alphaAccessMetricHeader]);
            }
            if (data.hasOwnProperty('quota')) {
                obj['quota'] = GoogleAnalyticsAdminV1alphaAccessQuota.constructFromObject(data['quota']);
            }
            if (data.hasOwnProperty('rowCount')) {
                obj['rowCount'] = ApiClient.convertToType(data['rowCount'], 'Number');
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [GoogleAnalyticsAdminV1alphaAccessRow]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleAnalyticsAdminV1alphaRunAccessReportResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleAnalyticsAdminV1alphaRunAccessReportResponse</code>.
     */
    static validateJSON(data) {
        if (data['dimensionHeaders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensionHeaders'])) {
                throw new Error("Expected the field `dimensionHeaders` to be an array in the JSON data but got " + data['dimensionHeaders']);
            }
            // validate the optional field `dimensionHeaders` (array)
            for (const item of data['dimensionHeaders']) {
                GoogleAnalyticsAdminV1alphaAccessDimensionHeader.validateJSON(item);
            };
        }
        if (data['metricHeaders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metricHeaders'])) {
                throw new Error("Expected the field `metricHeaders` to be an array in the JSON data but got " + data['metricHeaders']);
            }
            // validate the optional field `metricHeaders` (array)
            for (const item of data['metricHeaders']) {
                GoogleAnalyticsAdminV1alphaAccessMetricHeader.validateJSON(item);
            };
        }
        // validate the optional field `quota`
        if (data['quota']) { // data not null
          GoogleAnalyticsAdminV1alphaAccessQuota.validateJSON(data['quota']);
        }
        if (data['rows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rows'])) {
                throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
            }
            // validate the optional field `rows` (array)
            for (const item of data['rows']) {
                GoogleAnalyticsAdminV1alphaAccessRow.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The header for a column in the report that corresponds to a specific dimension. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.
 * @member {Array.<module:model/GoogleAnalyticsAdminV1alphaAccessDimensionHeader>} dimensionHeaders
 */
GoogleAnalyticsAdminV1alphaRunAccessReportResponse.prototype['dimensionHeaders'] = undefined;

/**
 * The header for a column in the report that corresponds to a specific metric. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.
 * @member {Array.<module:model/GoogleAnalyticsAdminV1alphaAccessMetricHeader>} metricHeaders
 */
GoogleAnalyticsAdminV1alphaRunAccessReportResponse.prototype['metricHeaders'] = undefined;

/**
 * @member {module:model/GoogleAnalyticsAdminV1alphaAccessQuota} quota
 */
GoogleAnalyticsAdminV1alphaRunAccessReportResponse.prototype['quota'] = undefined;

/**
 * The total number of rows in the query result. `rowCount` is independent of the number of rows returned in the response, the `limit` request parameter, and the `offset` request parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API request, the response will contain `rowCount` of 175 but only 50 rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
 * @member {Number} rowCount
 */
GoogleAnalyticsAdminV1alphaRunAccessReportResponse.prototype['rowCount'] = undefined;

/**
 * Rows of dimension value combinations and metric values in the report.
 * @member {Array.<module:model/GoogleAnalyticsAdminV1alphaAccessRow>} rows
 */
GoogleAnalyticsAdminV1alphaRunAccessReportResponse.prototype['rows'] = undefined;






export default GoogleAnalyticsAdminV1alphaRunAccessReportResponse;

