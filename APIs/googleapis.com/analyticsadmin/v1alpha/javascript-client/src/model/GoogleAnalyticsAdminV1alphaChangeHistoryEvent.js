/**
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleAnalyticsAdminV1alphaChangeHistoryChange from './GoogleAnalyticsAdminV1alphaChangeHistoryChange';

/**
 * The GoogleAnalyticsAdminV1alphaChangeHistoryEvent model module.
 * @module model/GoogleAnalyticsAdminV1alphaChangeHistoryEvent
 * @version v1alpha
 */
class GoogleAnalyticsAdminV1alphaChangeHistoryEvent {
    /**
     * Constructs a new <code>GoogleAnalyticsAdminV1alphaChangeHistoryEvent</code>.
     * A set of changes within a Google Analytics account or its child properties that resulted from the same cause. Common causes would be updates made in the Google Analytics UI, changes from customer support, or automatic Google Analytics system changes.
     * @alias module:model/GoogleAnalyticsAdminV1alphaChangeHistoryEvent
     */
    constructor() { 
        
        GoogleAnalyticsAdminV1alphaChangeHistoryEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleAnalyticsAdminV1alphaChangeHistoryEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleAnalyticsAdminV1alphaChangeHistoryEvent} obj Optional instance to populate.
     * @return {module:model/GoogleAnalyticsAdminV1alphaChangeHistoryEvent} The populated <code>GoogleAnalyticsAdminV1alphaChangeHistoryEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleAnalyticsAdminV1alphaChangeHistoryEvent();

            if (data.hasOwnProperty('actorType')) {
                obj['actorType'] = ApiClient.convertToType(data['actorType'], 'String');
            }
            if (data.hasOwnProperty('changeTime')) {
                obj['changeTime'] = ApiClient.convertToType(data['changeTime'], 'String');
            }
            if (data.hasOwnProperty('changes')) {
                obj['changes'] = ApiClient.convertToType(data['changes'], [GoogleAnalyticsAdminV1alphaChangeHistoryChange]);
            }
            if (data.hasOwnProperty('changesFiltered')) {
                obj['changesFiltered'] = ApiClient.convertToType(data['changesFiltered'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('userActorEmail')) {
                obj['userActorEmail'] = ApiClient.convertToType(data['userActorEmail'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleAnalyticsAdminV1alphaChangeHistoryEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleAnalyticsAdminV1alphaChangeHistoryEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actorType'] && !(typeof data['actorType'] === 'string' || data['actorType'] instanceof String)) {
            throw new Error("Expected the field `actorType` to be a primitive type in the JSON string but got " + data['actorType']);
        }
        // ensure the json data is a string
        if (data['changeTime'] && !(typeof data['changeTime'] === 'string' || data['changeTime'] instanceof String)) {
            throw new Error("Expected the field `changeTime` to be a primitive type in the JSON string but got " + data['changeTime']);
        }
        if (data['changes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['changes'])) {
                throw new Error("Expected the field `changes` to be an array in the JSON data but got " + data['changes']);
            }
            // validate the optional field `changes` (array)
            for (const item of data['changes']) {
                GoogleAnalyticsAdminV1alphaChangeHistoryChange.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['userActorEmail'] && !(typeof data['userActorEmail'] === 'string' || data['userActorEmail'] instanceof String)) {
            throw new Error("Expected the field `userActorEmail` to be a primitive type in the JSON string but got " + data['userActorEmail']);
        }

        return true;
    }


}



/**
 * The type of actor that made this change.
 * @member {module:model/GoogleAnalyticsAdminV1alphaChangeHistoryEvent.ActorTypeEnum} actorType
 */
GoogleAnalyticsAdminV1alphaChangeHistoryEvent.prototype['actorType'] = undefined;

/**
 * Time when change was made.
 * @member {String} changeTime
 */
GoogleAnalyticsAdminV1alphaChangeHistoryEvent.prototype['changeTime'] = undefined;

/**
 * A list of changes made in this change history event that fit the filters specified in SearchChangeHistoryEventsRequest.
 * @member {Array.<module:model/GoogleAnalyticsAdminV1alphaChangeHistoryChange>} changes
 */
GoogleAnalyticsAdminV1alphaChangeHistoryEvent.prototype['changes'] = undefined;

/**
 * If true, then the list of changes returned was filtered, and does not represent all changes that occurred in this event.
 * @member {Boolean} changesFiltered
 */
GoogleAnalyticsAdminV1alphaChangeHistoryEvent.prototype['changesFiltered'] = undefined;

/**
 * ID of this change history event. This ID is unique across Google Analytics.
 * @member {String} id
 */
GoogleAnalyticsAdminV1alphaChangeHistoryEvent.prototype['id'] = undefined;

/**
 * Email address of the Google account that made the change. This will be a valid email address if the actor field is set to USER, and empty otherwise. Google accounts that have been deleted will cause an error.
 * @member {String} userActorEmail
 */
GoogleAnalyticsAdminV1alphaChangeHistoryEvent.prototype['userActorEmail'] = undefined;





/**
 * Allowed values for the <code>actorType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleAnalyticsAdminV1alphaChangeHistoryEvent['ActorTypeEnum'] = {

    /**
     * value: "ACTOR_TYPE_UNSPECIFIED"
     * @const
     */
    "ACTOR_TYPE_UNSPECIFIED": "ACTOR_TYPE_UNSPECIFIED",

    /**
     * value: "USER"
     * @const
     */
    "USER": "USER",

    /**
     * value: "SYSTEM"
     * @const
     */
    "SYSTEM": "SYSTEM",

    /**
     * value: "SUPPORT"
     * @const
     */
    "SUPPORT": "SUPPORT"
};



export default GoogleAnalyticsAdminV1alphaChangeHistoryEvent;

