/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data specific to iOS app streams.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData {
  public static final String SERIALIZED_NAME_BUNDLE_ID = "bundleId";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ID)
  private String bundleId;

  public static final String SERIALIZED_NAME_FIREBASE_APP_ID = "firebaseAppId";
  @SerializedName(SERIALIZED_NAME_FIREBASE_APP_ID)
  private String firebaseAppId;

  public GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData() {
  }

  public GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData(
     String firebaseAppId
  ) {
    this();
    this.firebaseAppId = firebaseAppId;
  }

  public GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData bundleId(String bundleId) {
    this.bundleId = bundleId;
    return this;
  }

  /**
   * Required. Immutable. The Apple App Store Bundle ID for the app Example: \&quot;com.example.myiosapp\&quot;
   * @return bundleId
   */
  @javax.annotation.Nullable
  public String getBundleId() {
    return bundleId;
  }

  public void setBundleId(String bundleId) {
    this.bundleId = bundleId;
  }


  /**
   * Output only. ID of the corresponding iOS app in Firebase, if any. This ID can change if the iOS app is deleted and recreated.
   * @return firebaseAppId
   */
  @javax.annotation.Nullable
  public String getFirebaseAppId() {
    return firebaseAppId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData googleAnalyticsAdminV1alphaDataStreamIosAppStreamData = (GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData) o;
    return Objects.equals(this.bundleId, googleAnalyticsAdminV1alphaDataStreamIosAppStreamData.bundleId) &&
        Objects.equals(this.firebaseAppId, googleAnalyticsAdminV1alphaDataStreamIosAppStreamData.firebaseAppId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundleId, firebaseAppId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData {\n");
    sb.append("    bundleId: ").append(toIndentedString(bundleId)).append("\n");
    sb.append("    firebaseAppId: ").append(toIndentedString(firebaseAppId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bundleId");
    openapiFields.add("firebaseAppId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bundleId") != null && !jsonObj.get("bundleId").isJsonNull()) && !jsonObj.get("bundleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundleId").toString()));
      }
      if ((jsonObj.get("firebaseAppId") != null && !jsonObj.get("firebaseAppId").isJsonNull()) && !jsonObj.get("firebaseAppId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firebaseAppId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firebaseAppId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData
   */
  public static GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaDataStreamIosAppStreamData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

