/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAccessDateRange;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAccessDimension;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAccessFilterExpression;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAccessMetric;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAccessOrderBy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request for a Data Access Record Report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaRunAccessReportRequest {
  public static final String SERIALIZED_NAME_DATE_RANGES = "dateRanges";
  @SerializedName(SERIALIZED_NAME_DATE_RANGES)
  private List<GoogleAnalyticsAdminV1alphaAccessDateRange> dateRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIMENSION_FILTER = "dimensionFilter";
  @SerializedName(SERIALIZED_NAME_DIMENSION_FILTER)
  private GoogleAnalyticsAdminV1alphaAccessFilterExpression dimensionFilter;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<GoogleAnalyticsAdminV1alphaAccessDimension> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPAND_GROUPS = "expandGroups";
  @SerializedName(SERIALIZED_NAME_EXPAND_GROUPS)
  private Boolean expandGroups;

  public static final String SERIALIZED_NAME_INCLUDE_ALL_USERS = "includeAllUsers";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ALL_USERS)
  private Boolean includeAllUsers;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private String limit;

  public static final String SERIALIZED_NAME_METRIC_FILTER = "metricFilter";
  @SerializedName(SERIALIZED_NAME_METRIC_FILTER)
  private GoogleAnalyticsAdminV1alphaAccessFilterExpression metricFilter;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<GoogleAnalyticsAdminV1alphaAccessMetric> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private String offset;

  public static final String SERIALIZED_NAME_ORDER_BYS = "orderBys";
  @SerializedName(SERIALIZED_NAME_ORDER_BYS)
  private List<GoogleAnalyticsAdminV1alphaAccessOrderBy> orderBys = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN_ENTITY_QUOTA = "returnEntityQuota";
  @SerializedName(SERIALIZED_NAME_RETURN_ENTITY_QUOTA)
  private Boolean returnEntityQuota;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest() {
  }

  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest dateRanges(List<GoogleAnalyticsAdminV1alphaAccessDateRange> dateRanges) {
    this.dateRanges = dateRanges;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest addDateRangesItem(GoogleAnalyticsAdminV1alphaAccessDateRange dateRangesItem) {
    if (this.dateRanges == null) {
      this.dateRanges = new ArrayList<>();
    }
    this.dateRanges.add(dateRangesItem);
    return this;
  }

  /**
   * Date ranges of access records to read. If multiple date ranges are requested, each response row will contain a zero based date range index. If two date ranges overlap, the access records for the overlapping days is included in the response rows for both date ranges. Requests are allowed up to 2 date ranges.
   * @return dateRanges
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1alphaAccessDateRange> getDateRanges() {
    return dateRanges;
  }

  public void setDateRanges(List<GoogleAnalyticsAdminV1alphaAccessDateRange> dateRanges) {
    this.dateRanges = dateRanges;
  }


  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest dimensionFilter(GoogleAnalyticsAdminV1alphaAccessFilterExpression dimensionFilter) {
    this.dimensionFilter = dimensionFilter;
    return this;
  }

  /**
   * Get dimensionFilter
   * @return dimensionFilter
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAccessFilterExpression getDimensionFilter() {
    return dimensionFilter;
  }

  public void setDimensionFilter(GoogleAnalyticsAdminV1alphaAccessFilterExpression dimensionFilter) {
    this.dimensionFilter = dimensionFilter;
  }


  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest dimensions(List<GoogleAnalyticsAdminV1alphaAccessDimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest addDimensionsItem(GoogleAnalyticsAdminV1alphaAccessDimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * The dimensions requested and displayed in the response. Requests are allowed up to 9 dimensions.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1alphaAccessDimension> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<GoogleAnalyticsAdminV1alphaAccessDimension> dimensions) {
    this.dimensions = dimensions;
  }


  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest expandGroups(Boolean expandGroups) {
    this.expandGroups = expandGroups;
    return this;
  }

  /**
   * Optional. Decides whether to return the users within user groups. This field works only when include_all_users is set to true. If true, it will return all users with access to the specified property or account. If false, only the users with direct access will be returned.
   * @return expandGroups
   */
  @javax.annotation.Nullable
  public Boolean getExpandGroups() {
    return expandGroups;
  }

  public void setExpandGroups(Boolean expandGroups) {
    this.expandGroups = expandGroups;
  }


  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest includeAllUsers(Boolean includeAllUsers) {
    this.includeAllUsers = includeAllUsers;
    return this;
  }

  /**
   * Optional. Determines whether to include users who have never made an API call in the response. If true, all users with access to the specified property or account are included in the response, regardless of whether they have made an API call or not. If false, only the users who have made an API call will be included.
   * @return includeAllUsers
   */
  @javax.annotation.Nullable
  public Boolean getIncludeAllUsers() {
    return includeAllUsers;
  }

  public void setIncludeAllUsers(Boolean includeAllUsers) {
    this.includeAllUsers = includeAllUsers;
  }


  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest limit(String limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 100,000 rows per request, no matter how many you ask for. &#x60;limit&#x60; must be positive. The API may return fewer rows than the requested &#x60;limit&#x60;, if there aren&#39;t as many remaining rows as the &#x60;limit&#x60;. For instance, there are fewer than 300 possible values for the dimension &#x60;country&#x60;, so when reporting on only &#x60;country&#x60;, you can&#39;t get more than 300 rows, even if you set &#x60;limit&#x60; to a higher value. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   * @return limit
   */
  @javax.annotation.Nullable
  public String getLimit() {
    return limit;
  }

  public void setLimit(String limit) {
    this.limit = limit;
  }


  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest metricFilter(GoogleAnalyticsAdminV1alphaAccessFilterExpression metricFilter) {
    this.metricFilter = metricFilter;
    return this;
  }

  /**
   * Get metricFilter
   * @return metricFilter
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAccessFilterExpression getMetricFilter() {
    return metricFilter;
  }

  public void setMetricFilter(GoogleAnalyticsAdminV1alphaAccessFilterExpression metricFilter) {
    this.metricFilter = metricFilter;
  }


  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest metrics(List<GoogleAnalyticsAdminV1alphaAccessMetric> metrics) {
    this.metrics = metrics;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest addMetricsItem(GoogleAnalyticsAdminV1alphaAccessMetric metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * The metrics requested and displayed in the response. Requests are allowed up to 10 metrics.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1alphaAccessMetric> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<GoogleAnalyticsAdminV1alphaAccessMetric> metrics) {
    this.metrics = metrics;
  }


  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest offset(String offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The row count of the start row. The first row is counted as row 0. If offset is unspecified, it is treated as 0. If offset is zero, then this method will return the first page of results with &#x60;limit&#x60; entries. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   * @return offset
   */
  @javax.annotation.Nullable
  public String getOffset() {
    return offset;
  }

  public void setOffset(String offset) {
    this.offset = offset;
  }


  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest orderBys(List<GoogleAnalyticsAdminV1alphaAccessOrderBy> orderBys) {
    this.orderBys = orderBys;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest addOrderBysItem(GoogleAnalyticsAdminV1alphaAccessOrderBy orderBysItem) {
    if (this.orderBys == null) {
      this.orderBys = new ArrayList<>();
    }
    this.orderBys.add(orderBysItem);
    return this;
  }

  /**
   * Specifies how rows are ordered in the response.
   * @return orderBys
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1alphaAccessOrderBy> getOrderBys() {
    return orderBys;
  }

  public void setOrderBys(List<GoogleAnalyticsAdminV1alphaAccessOrderBy> orderBys) {
    this.orderBys = orderBys;
  }


  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest returnEntityQuota(Boolean returnEntityQuota) {
    this.returnEntityQuota = returnEntityQuota;
    return this;
  }

  /**
   * Toggles whether to return the current state of this Analytics Property&#39;s quota. Quota is returned in [AccessQuota](#AccessQuota). For account-level requests, this field must be false.
   * @return returnEntityQuota
   */
  @javax.annotation.Nullable
  public Boolean getReturnEntityQuota() {
    return returnEntityQuota;
  }

  public void setReturnEntityQuota(Boolean returnEntityQuota) {
    this.returnEntityQuota = returnEntityQuota;
  }


  public GoogleAnalyticsAdminV1alphaRunAccessReportRequest timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * This request&#39;s time zone if specified. If unspecified, the property&#39;s time zone is used. The request&#39;s time zone is used to interpret the start &amp; end dates of the report. Formatted as strings from the IANA Time Zone database (https://www.iana.org/time-zones); for example \&quot;America/New_York\&quot; or \&quot;Asia/Tokyo\&quot;.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaRunAccessReportRequest googleAnalyticsAdminV1alphaRunAccessReportRequest = (GoogleAnalyticsAdminV1alphaRunAccessReportRequest) o;
    return Objects.equals(this.dateRanges, googleAnalyticsAdminV1alphaRunAccessReportRequest.dateRanges) &&
        Objects.equals(this.dimensionFilter, googleAnalyticsAdminV1alphaRunAccessReportRequest.dimensionFilter) &&
        Objects.equals(this.dimensions, googleAnalyticsAdminV1alphaRunAccessReportRequest.dimensions) &&
        Objects.equals(this.expandGroups, googleAnalyticsAdminV1alphaRunAccessReportRequest.expandGroups) &&
        Objects.equals(this.includeAllUsers, googleAnalyticsAdminV1alphaRunAccessReportRequest.includeAllUsers) &&
        Objects.equals(this.limit, googleAnalyticsAdminV1alphaRunAccessReportRequest.limit) &&
        Objects.equals(this.metricFilter, googleAnalyticsAdminV1alphaRunAccessReportRequest.metricFilter) &&
        Objects.equals(this.metrics, googleAnalyticsAdminV1alphaRunAccessReportRequest.metrics) &&
        Objects.equals(this.offset, googleAnalyticsAdminV1alphaRunAccessReportRequest.offset) &&
        Objects.equals(this.orderBys, googleAnalyticsAdminV1alphaRunAccessReportRequest.orderBys) &&
        Objects.equals(this.returnEntityQuota, googleAnalyticsAdminV1alphaRunAccessReportRequest.returnEntityQuota) &&
        Objects.equals(this.timeZone, googleAnalyticsAdminV1alphaRunAccessReportRequest.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateRanges, dimensionFilter, dimensions, expandGroups, includeAllUsers, limit, metricFilter, metrics, offset, orderBys, returnEntityQuota, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaRunAccessReportRequest {\n");
    sb.append("    dateRanges: ").append(toIndentedString(dateRanges)).append("\n");
    sb.append("    dimensionFilter: ").append(toIndentedString(dimensionFilter)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    expandGroups: ").append(toIndentedString(expandGroups)).append("\n");
    sb.append("    includeAllUsers: ").append(toIndentedString(includeAllUsers)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    metricFilter: ").append(toIndentedString(metricFilter)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    orderBys: ").append(toIndentedString(orderBys)).append("\n");
    sb.append("    returnEntityQuota: ").append(toIndentedString(returnEntityQuota)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateRanges");
    openapiFields.add("dimensionFilter");
    openapiFields.add("dimensions");
    openapiFields.add("expandGroups");
    openapiFields.add("includeAllUsers");
    openapiFields.add("limit");
    openapiFields.add("metricFilter");
    openapiFields.add("metrics");
    openapiFields.add("offset");
    openapiFields.add("orderBys");
    openapiFields.add("returnEntityQuota");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaRunAccessReportRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaRunAccessReportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaRunAccessReportRequest is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaRunAccessReportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaRunAccessReportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaRunAccessReportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dateRanges") != null && !jsonObj.get("dateRanges").isJsonNull()) {
        JsonArray jsonArraydateRanges = jsonObj.getAsJsonArray("dateRanges");
        if (jsonArraydateRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dateRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dateRanges` to be an array in the JSON string but got `%s`", jsonObj.get("dateRanges").toString()));
          }

          // validate the optional field `dateRanges` (array)
          for (int i = 0; i < jsonArraydateRanges.size(); i++) {
            GoogleAnalyticsAdminV1alphaAccessDateRange.validateJsonElement(jsonArraydateRanges.get(i));
          };
        }
      }
      // validate the optional field `dimensionFilter`
      if (jsonObj.get("dimensionFilter") != null && !jsonObj.get("dimensionFilter").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAccessFilterExpression.validateJsonElement(jsonObj.get("dimensionFilter"));
      }
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
        if (jsonArraydimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
          }

          // validate the optional field `dimensions` (array)
          for (int i = 0; i < jsonArraydimensions.size(); i++) {
            GoogleAnalyticsAdminV1alphaAccessDimension.validateJsonElement(jsonArraydimensions.get(i));
          };
        }
      }
      if ((jsonObj.get("limit") != null && !jsonObj.get("limit").isJsonNull()) && !jsonObj.get("limit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("limit").toString()));
      }
      // validate the optional field `metricFilter`
      if (jsonObj.get("metricFilter") != null && !jsonObj.get("metricFilter").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAccessFilterExpression.validateJsonElement(jsonObj.get("metricFilter"));
      }
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            GoogleAnalyticsAdminV1alphaAccessMetric.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("offset") != null && !jsonObj.get("offset").isJsonNull()) && !jsonObj.get("offset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offset").toString()));
      }
      if (jsonObj.get("orderBys") != null && !jsonObj.get("orderBys").isJsonNull()) {
        JsonArray jsonArrayorderBys = jsonObj.getAsJsonArray("orderBys");
        if (jsonArrayorderBys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderBys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderBys` to be an array in the JSON string but got `%s`", jsonObj.get("orderBys").toString()));
          }

          // validate the optional field `orderBys` (array)
          for (int i = 0; i < jsonArrayorderBys.size(); i++) {
            GoogleAnalyticsAdminV1alphaAccessOrderBy.validateJsonElement(jsonArrayorderBys.get(i));
          };
        }
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaRunAccessReportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaRunAccessReportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaRunAccessReportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaRunAccessReportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaRunAccessReportRequest>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaRunAccessReportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaRunAccessReportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaRunAccessReportRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaRunAccessReportRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaRunAccessReportRequest
   */
  public static GoogleAnalyticsAdminV1alphaRunAccessReportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaRunAccessReportRequest.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaRunAccessReportRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

