/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Event setting conditions to match an event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaEventMapping {
  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;

  public static final String SERIALIZED_NAME_MAX_EVENT_COUNT = "maxEventCount";
  @SerializedName(SERIALIZED_NAME_MAX_EVENT_COUNT)
  private String maxEventCount;

  public static final String SERIALIZED_NAME_MAX_EVENT_VALUE = "maxEventValue";
  @SerializedName(SERIALIZED_NAME_MAX_EVENT_VALUE)
  private Double maxEventValue;

  public static final String SERIALIZED_NAME_MIN_EVENT_COUNT = "minEventCount";
  @SerializedName(SERIALIZED_NAME_MIN_EVENT_COUNT)
  private String minEventCount;

  public static final String SERIALIZED_NAME_MIN_EVENT_VALUE = "minEventValue";
  @SerializedName(SERIALIZED_NAME_MIN_EVENT_VALUE)
  private Double minEventValue;

  public GoogleAnalyticsAdminV1alphaEventMapping() {
  }

  public GoogleAnalyticsAdminV1alphaEventMapping eventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Required. Name of the GA4 event. It must always be set. The max allowed display name length is 40 UTF-16 code units.
   * @return eventName
   */
  @javax.annotation.Nullable
  public String getEventName() {
    return eventName;
  }

  public void setEventName(String eventName) {
    this.eventName = eventName;
  }


  public GoogleAnalyticsAdminV1alphaEventMapping maxEventCount(String maxEventCount) {
    this.maxEventCount = maxEventCount;
    return this;
  }

  /**
   * The maximum number of times the event occurred. If not set, maximum event count won&#39;t be checked.
   * @return maxEventCount
   */
  @javax.annotation.Nullable
  public String getMaxEventCount() {
    return maxEventCount;
  }

  public void setMaxEventCount(String maxEventCount) {
    this.maxEventCount = maxEventCount;
  }


  public GoogleAnalyticsAdminV1alphaEventMapping maxEventValue(Double maxEventValue) {
    this.maxEventValue = maxEventValue;
    return this;
  }

  /**
   * The maximum revenue generated due to the event. Revenue currency will be defined at the property level. If not set, maximum event value won&#39;t be checked.
   * @return maxEventValue
   */
  @javax.annotation.Nullable
  public Double getMaxEventValue() {
    return maxEventValue;
  }

  public void setMaxEventValue(Double maxEventValue) {
    this.maxEventValue = maxEventValue;
  }


  public GoogleAnalyticsAdminV1alphaEventMapping minEventCount(String minEventCount) {
    this.minEventCount = minEventCount;
    return this;
  }

  /**
   * At least one of the following four min/max values must be set. The values set will be ANDed together to qualify an event. The minimum number of times the event occurred. If not set, minimum event count won&#39;t be checked.
   * @return minEventCount
   */
  @javax.annotation.Nullable
  public String getMinEventCount() {
    return minEventCount;
  }

  public void setMinEventCount(String minEventCount) {
    this.minEventCount = minEventCount;
  }


  public GoogleAnalyticsAdminV1alphaEventMapping minEventValue(Double minEventValue) {
    this.minEventValue = minEventValue;
    return this;
  }

  /**
   * The minimum revenue generated due to the event. Revenue currency will be defined at the property level. If not set, minimum event value won&#39;t be checked.
   * @return minEventValue
   */
  @javax.annotation.Nullable
  public Double getMinEventValue() {
    return minEventValue;
  }

  public void setMinEventValue(Double minEventValue) {
    this.minEventValue = minEventValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaEventMapping googleAnalyticsAdminV1alphaEventMapping = (GoogleAnalyticsAdminV1alphaEventMapping) o;
    return Objects.equals(this.eventName, googleAnalyticsAdminV1alphaEventMapping.eventName) &&
        Objects.equals(this.maxEventCount, googleAnalyticsAdminV1alphaEventMapping.maxEventCount) &&
        Objects.equals(this.maxEventValue, googleAnalyticsAdminV1alphaEventMapping.maxEventValue) &&
        Objects.equals(this.minEventCount, googleAnalyticsAdminV1alphaEventMapping.minEventCount) &&
        Objects.equals(this.minEventValue, googleAnalyticsAdminV1alphaEventMapping.minEventValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventName, maxEventCount, maxEventValue, minEventCount, minEventValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaEventMapping {\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    maxEventCount: ").append(toIndentedString(maxEventCount)).append("\n");
    sb.append("    maxEventValue: ").append(toIndentedString(maxEventValue)).append("\n");
    sb.append("    minEventCount: ").append(toIndentedString(minEventCount)).append("\n");
    sb.append("    minEventValue: ").append(toIndentedString(minEventValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventName");
    openapiFields.add("maxEventCount");
    openapiFields.add("maxEventValue");
    openapiFields.add("minEventCount");
    openapiFields.add("minEventValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaEventMapping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaEventMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaEventMapping is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaEventMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaEventMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaEventMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eventName") != null && !jsonObj.get("eventName").isJsonNull()) && !jsonObj.get("eventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventName").toString()));
      }
      if ((jsonObj.get("maxEventCount") != null && !jsonObj.get("maxEventCount").isJsonNull()) && !jsonObj.get("maxEventCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxEventCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxEventCount").toString()));
      }
      if ((jsonObj.get("minEventCount") != null && !jsonObj.get("minEventCount").isJsonNull()) && !jsonObj.get("minEventCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minEventCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minEventCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaEventMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaEventMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaEventMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaEventMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaEventMapping>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaEventMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaEventMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaEventMapping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaEventMapping
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaEventMapping
   */
  public static GoogleAnalyticsAdminV1alphaEventMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaEventMapping.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaEventMapping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

