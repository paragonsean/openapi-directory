/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAudienceEventFilter;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A logical expression of Audience dimension, metric, or event filters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaAudienceFilterExpression {
  public static final String SERIALIZED_NAME_AND_GROUP = "andGroup";
  @SerializedName(SERIALIZED_NAME_AND_GROUP)
  private GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList andGroup;

  public static final String SERIALIZED_NAME_DIMENSION_OR_METRIC_FILTER = "dimensionOrMetricFilter";
  @SerializedName(SERIALIZED_NAME_DIMENSION_OR_METRIC_FILTER)
  private GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter dimensionOrMetricFilter;

  public static final String SERIALIZED_NAME_EVENT_FILTER = "eventFilter";
  @SerializedName(SERIALIZED_NAME_EVENT_FILTER)
  private GoogleAnalyticsAdminV1alphaAudienceEventFilter eventFilter;

  public static final String SERIALIZED_NAME_NOT_EXPRESSION = "notExpression";
  @SerializedName(SERIALIZED_NAME_NOT_EXPRESSION)
  private GoogleAnalyticsAdminV1alphaAudienceFilterExpression notExpression;

  public static final String SERIALIZED_NAME_OR_GROUP = "orGroup";
  @SerializedName(SERIALIZED_NAME_OR_GROUP)
  private GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList orGroup;

  public GoogleAnalyticsAdminV1alphaAudienceFilterExpression() {
  }

  public GoogleAnalyticsAdminV1alphaAudienceFilterExpression andGroup(GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList andGroup) {
    this.andGroup = andGroup;
    return this;
  }

  /**
   * Get andGroup
   * @return andGroup
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList getAndGroup() {
    return andGroup;
  }

  public void setAndGroup(GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList andGroup) {
    this.andGroup = andGroup;
  }


  public GoogleAnalyticsAdminV1alphaAudienceFilterExpression dimensionOrMetricFilter(GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter dimensionOrMetricFilter) {
    this.dimensionOrMetricFilter = dimensionOrMetricFilter;
    return this;
  }

  /**
   * Get dimensionOrMetricFilter
   * @return dimensionOrMetricFilter
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter getDimensionOrMetricFilter() {
    return dimensionOrMetricFilter;
  }

  public void setDimensionOrMetricFilter(GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter dimensionOrMetricFilter) {
    this.dimensionOrMetricFilter = dimensionOrMetricFilter;
  }


  public GoogleAnalyticsAdminV1alphaAudienceFilterExpression eventFilter(GoogleAnalyticsAdminV1alphaAudienceEventFilter eventFilter) {
    this.eventFilter = eventFilter;
    return this;
  }

  /**
   * Get eventFilter
   * @return eventFilter
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAudienceEventFilter getEventFilter() {
    return eventFilter;
  }

  public void setEventFilter(GoogleAnalyticsAdminV1alphaAudienceEventFilter eventFilter) {
    this.eventFilter = eventFilter;
  }


  public GoogleAnalyticsAdminV1alphaAudienceFilterExpression notExpression(GoogleAnalyticsAdminV1alphaAudienceFilterExpression notExpression) {
    this.notExpression = notExpression;
    return this;
  }

  /**
   * Get notExpression
   * @return notExpression
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAudienceFilterExpression getNotExpression() {
    return notExpression;
  }

  public void setNotExpression(GoogleAnalyticsAdminV1alphaAudienceFilterExpression notExpression) {
    this.notExpression = notExpression;
  }


  public GoogleAnalyticsAdminV1alphaAudienceFilterExpression orGroup(GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList orGroup) {
    this.orGroup = orGroup;
    return this;
  }

  /**
   * Get orGroup
   * @return orGroup
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList getOrGroup() {
    return orGroup;
  }

  public void setOrGroup(GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList orGroup) {
    this.orGroup = orGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaAudienceFilterExpression googleAnalyticsAdminV1alphaAudienceFilterExpression = (GoogleAnalyticsAdminV1alphaAudienceFilterExpression) o;
    return Objects.equals(this.andGroup, googleAnalyticsAdminV1alphaAudienceFilterExpression.andGroup) &&
        Objects.equals(this.dimensionOrMetricFilter, googleAnalyticsAdminV1alphaAudienceFilterExpression.dimensionOrMetricFilter) &&
        Objects.equals(this.eventFilter, googleAnalyticsAdminV1alphaAudienceFilterExpression.eventFilter) &&
        Objects.equals(this.notExpression, googleAnalyticsAdminV1alphaAudienceFilterExpression.notExpression) &&
        Objects.equals(this.orGroup, googleAnalyticsAdminV1alphaAudienceFilterExpression.orGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(andGroup, dimensionOrMetricFilter, eventFilter, notExpression, orGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaAudienceFilterExpression {\n");
    sb.append("    andGroup: ").append(toIndentedString(andGroup)).append("\n");
    sb.append("    dimensionOrMetricFilter: ").append(toIndentedString(dimensionOrMetricFilter)).append("\n");
    sb.append("    eventFilter: ").append(toIndentedString(eventFilter)).append("\n");
    sb.append("    notExpression: ").append(toIndentedString(notExpression)).append("\n");
    sb.append("    orGroup: ").append(toIndentedString(orGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("andGroup");
    openapiFields.add("dimensionOrMetricFilter");
    openapiFields.add("eventFilter");
    openapiFields.add("notExpression");
    openapiFields.add("orGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaAudienceFilterExpression
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaAudienceFilterExpression.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaAudienceFilterExpression is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaAudienceFilterExpression.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaAudienceFilterExpression.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaAudienceFilterExpression` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `andGroup`
      if (jsonObj.get("andGroup") != null && !jsonObj.get("andGroup").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList.validateJsonElement(jsonObj.get("andGroup"));
      }
      // validate the optional field `dimensionOrMetricFilter`
      if (jsonObj.get("dimensionOrMetricFilter") != null && !jsonObj.get("dimensionOrMetricFilter").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter.validateJsonElement(jsonObj.get("dimensionOrMetricFilter"));
      }
      // validate the optional field `eventFilter`
      if (jsonObj.get("eventFilter") != null && !jsonObj.get("eventFilter").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAudienceEventFilter.validateJsonElement(jsonObj.get("eventFilter"));
      }
      // validate the optional field `notExpression`
      if (jsonObj.get("notExpression") != null && !jsonObj.get("notExpression").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAudienceFilterExpression.validateJsonElement(jsonObj.get("notExpression"));
      }
      // validate the optional field `orGroup`
      if (jsonObj.get("orGroup") != null && !jsonObj.get("orGroup").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList.validateJsonElement(jsonObj.get("orGroup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaAudienceFilterExpression.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaAudienceFilterExpression' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaAudienceFilterExpression> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaAudienceFilterExpression.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaAudienceFilterExpression>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaAudienceFilterExpression value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaAudienceFilterExpression read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaAudienceFilterExpression given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaAudienceFilterExpression
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaAudienceFilterExpression
   */
  public static GoogleAnalyticsAdminV1alphaAudienceFilterExpression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaAudienceFilterExpression.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaAudienceFilterExpression to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

