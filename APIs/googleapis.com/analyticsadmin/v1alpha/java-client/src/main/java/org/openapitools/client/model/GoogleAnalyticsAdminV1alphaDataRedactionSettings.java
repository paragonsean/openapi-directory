/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for client-side data redaction. Singleton resource under a Web Stream.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaDataRedactionSettings {
  public static final String SERIALIZED_NAME_EMAIL_REDACTION_ENABLED = "emailRedactionEnabled";
  @SerializedName(SERIALIZED_NAME_EMAIL_REDACTION_ENABLED)
  private Boolean emailRedactionEnabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUERY_PARAMETER_KEYS = "queryParameterKeys";
  @SerializedName(SERIALIZED_NAME_QUERY_PARAMETER_KEYS)
  private List<String> queryParameterKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY_PARAMETER_REDACTION_ENABLED = "queryParameterRedactionEnabled";
  @SerializedName(SERIALIZED_NAME_QUERY_PARAMETER_REDACTION_ENABLED)
  private Boolean queryParameterRedactionEnabled;

  public GoogleAnalyticsAdminV1alphaDataRedactionSettings() {
  }

  public GoogleAnalyticsAdminV1alphaDataRedactionSettings(
     String name
  ) {
    this();
    this.name = name;
  }

  public GoogleAnalyticsAdminV1alphaDataRedactionSettings emailRedactionEnabled(Boolean emailRedactionEnabled) {
    this.emailRedactionEnabled = emailRedactionEnabled;
    return this;
  }

  /**
   * If enabled, any event parameter or user property values that look like an email will be redacted.
   * @return emailRedactionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getEmailRedactionEnabled() {
    return emailRedactionEnabled;
  }

  public void setEmailRedactionEnabled(Boolean emailRedactionEnabled) {
    this.emailRedactionEnabled = emailRedactionEnabled;
  }


  /**
   * Output only. Name of this Data Redaction Settings resource. Format: properties/{property_id}/dataStreams/{data_stream}/dataRedactionSettings Example: \&quot;properties/1000/dataStreams/2000/dataRedactionSettings\&quot;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleAnalyticsAdminV1alphaDataRedactionSettings queryParameterKeys(List<String> queryParameterKeys) {
    this.queryParameterKeys = queryParameterKeys;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaDataRedactionSettings addQueryParameterKeysItem(String queryParameterKeysItem) {
    if (this.queryParameterKeys == null) {
      this.queryParameterKeys = new ArrayList<>();
    }
    this.queryParameterKeys.add(queryParameterKeysItem);
    return this;
  }

  /**
   * The query parameter keys to apply redaction logic to if present in the URL. Query parameter matching is case-insensitive. Must contain at least one element if query_parameter_replacement_enabled is true. Keys cannot contain commas.
   * @return queryParameterKeys
   */
  @javax.annotation.Nullable
  public List<String> getQueryParameterKeys() {
    return queryParameterKeys;
  }

  public void setQueryParameterKeys(List<String> queryParameterKeys) {
    this.queryParameterKeys = queryParameterKeys;
  }


  public GoogleAnalyticsAdminV1alphaDataRedactionSettings queryParameterRedactionEnabled(Boolean queryParameterRedactionEnabled) {
    this.queryParameterRedactionEnabled = queryParameterRedactionEnabled;
    return this;
  }

  /**
   * Query Parameter redaction removes the key and value portions of a query parameter if it is in the configured set of query parameters. If enabled, URL query replacement logic will be run for the Stream. Any query parameters defined in query_parameter_keys will be redacted.
   * @return queryParameterRedactionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getQueryParameterRedactionEnabled() {
    return queryParameterRedactionEnabled;
  }

  public void setQueryParameterRedactionEnabled(Boolean queryParameterRedactionEnabled) {
    this.queryParameterRedactionEnabled = queryParameterRedactionEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaDataRedactionSettings googleAnalyticsAdminV1alphaDataRedactionSettings = (GoogleAnalyticsAdminV1alphaDataRedactionSettings) o;
    return Objects.equals(this.emailRedactionEnabled, googleAnalyticsAdminV1alphaDataRedactionSettings.emailRedactionEnabled) &&
        Objects.equals(this.name, googleAnalyticsAdminV1alphaDataRedactionSettings.name) &&
        Objects.equals(this.queryParameterKeys, googleAnalyticsAdminV1alphaDataRedactionSettings.queryParameterKeys) &&
        Objects.equals(this.queryParameterRedactionEnabled, googleAnalyticsAdminV1alphaDataRedactionSettings.queryParameterRedactionEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailRedactionEnabled, name, queryParameterKeys, queryParameterRedactionEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaDataRedactionSettings {\n");
    sb.append("    emailRedactionEnabled: ").append(toIndentedString(emailRedactionEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    queryParameterKeys: ").append(toIndentedString(queryParameterKeys)).append("\n");
    sb.append("    queryParameterRedactionEnabled: ").append(toIndentedString(queryParameterRedactionEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("emailRedactionEnabled");
    openapiFields.add("name");
    openapiFields.add("queryParameterKeys");
    openapiFields.add("queryParameterRedactionEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaDataRedactionSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaDataRedactionSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaDataRedactionSettings is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaDataRedactionSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaDataRedactionSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaDataRedactionSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("queryParameterKeys") != null && !jsonObj.get("queryParameterKeys").isJsonNull() && !jsonObj.get("queryParameterKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryParameterKeys` to be an array in the JSON string but got `%s`", jsonObj.get("queryParameterKeys").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaDataRedactionSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaDataRedactionSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaDataRedactionSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaDataRedactionSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaDataRedactionSettings>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaDataRedactionSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaDataRedactionSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaDataRedactionSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaDataRedactionSettings
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaDataRedactionSettings
   */
  public static GoogleAnalyticsAdminV1alphaDataRedactionSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaDataRedactionSettings.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaDataRedactionSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

