/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaEventMapping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Conversion value settings for a postback window for SKAdNetwork conversion value schema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaConversionValues {
  /**
   * Required. A coarse grained conversion value. This value is not guaranteed to be unique.
   */
  @JsonAdapter(CoarseValueEnum.Adapter.class)
  public enum CoarseValueEnum {
    UNSPECIFIED("COARSE_VALUE_UNSPECIFIED"),
    
    LOW("COARSE_VALUE_LOW"),
    
    MEDIUM("COARSE_VALUE_MEDIUM"),
    
    HIGH("COARSE_VALUE_HIGH");

    private String value;

    CoarseValueEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CoarseValueEnum fromValue(String value) {
      for (CoarseValueEnum b : CoarseValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CoarseValueEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CoarseValueEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CoarseValueEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CoarseValueEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CoarseValueEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COARSE_VALUE = "coarseValue";
  @SerializedName(SERIALIZED_NAME_COARSE_VALUE)
  private CoarseValueEnum coarseValue;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EVENT_MAPPINGS = "eventMappings";
  @SerializedName(SERIALIZED_NAME_EVENT_MAPPINGS)
  private List<GoogleAnalyticsAdminV1alphaEventMapping> eventMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_FINE_VALUE = "fineValue";
  @SerializedName(SERIALIZED_NAME_FINE_VALUE)
  private Integer fineValue;

  public static final String SERIALIZED_NAME_LOCK_ENABLED = "lockEnabled";
  @SerializedName(SERIALIZED_NAME_LOCK_ENABLED)
  private Boolean lockEnabled;

  public GoogleAnalyticsAdminV1alphaConversionValues() {
  }

  public GoogleAnalyticsAdminV1alphaConversionValues coarseValue(CoarseValueEnum coarseValue) {
    this.coarseValue = coarseValue;
    return this;
  }

  /**
   * Required. A coarse grained conversion value. This value is not guaranteed to be unique.
   * @return coarseValue
   */
  @javax.annotation.Nullable
  public CoarseValueEnum getCoarseValue() {
    return coarseValue;
  }

  public void setCoarseValue(CoarseValueEnum coarseValue) {
    this.coarseValue = coarseValue;
  }


  public GoogleAnalyticsAdminV1alphaConversionValues displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name of the SKAdNetwork conversion value. The max allowed display name length is 50 UTF-16 code units.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleAnalyticsAdminV1alphaConversionValues eventMappings(List<GoogleAnalyticsAdminV1alphaEventMapping> eventMappings) {
    this.eventMappings = eventMappings;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaConversionValues addEventMappingsItem(GoogleAnalyticsAdminV1alphaEventMapping eventMappingsItem) {
    if (this.eventMappings == null) {
      this.eventMappings = new ArrayList<>();
    }
    this.eventMappings.add(eventMappingsItem);
    return this;
  }

  /**
   * Event conditions that must be met for this Conversion Value to be achieved. The conditions in this list are ANDed together. It must have minimum of 1 entry and maximum of 3 entries, if the postback window is enabled.
   * @return eventMappings
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1alphaEventMapping> getEventMappings() {
    return eventMappings;
  }

  public void setEventMappings(List<GoogleAnalyticsAdminV1alphaEventMapping> eventMappings) {
    this.eventMappings = eventMappings;
  }


  public GoogleAnalyticsAdminV1alphaConversionValues fineValue(Integer fineValue) {
    this.fineValue = fineValue;
    return this;
  }

  /**
   * The fine-grained conversion value. This is applicable only to the first postback window. Its valid values are [0,63], both inclusive. It must be set for postback window 1, and must not be set for postback window 2 &amp; 3. This value is not guaranteed to be unique. If the configuration for the first postback window is re-used for second or third postback windows this field has no effect.
   * @return fineValue
   */
  @javax.annotation.Nullable
  public Integer getFineValue() {
    return fineValue;
  }

  public void setFineValue(Integer fineValue) {
    this.fineValue = fineValue;
  }


  public GoogleAnalyticsAdminV1alphaConversionValues lockEnabled(Boolean lockEnabled) {
    this.lockEnabled = lockEnabled;
    return this;
  }

  /**
   * If true, the SDK should lock to this conversion value for the current postback window.
   * @return lockEnabled
   */
  @javax.annotation.Nullable
  public Boolean getLockEnabled() {
    return lockEnabled;
  }

  public void setLockEnabled(Boolean lockEnabled) {
    this.lockEnabled = lockEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaConversionValues googleAnalyticsAdminV1alphaConversionValues = (GoogleAnalyticsAdminV1alphaConversionValues) o;
    return Objects.equals(this.coarseValue, googleAnalyticsAdminV1alphaConversionValues.coarseValue) &&
        Objects.equals(this.displayName, googleAnalyticsAdminV1alphaConversionValues.displayName) &&
        Objects.equals(this.eventMappings, googleAnalyticsAdminV1alphaConversionValues.eventMappings) &&
        Objects.equals(this.fineValue, googleAnalyticsAdminV1alphaConversionValues.fineValue) &&
        Objects.equals(this.lockEnabled, googleAnalyticsAdminV1alphaConversionValues.lockEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coarseValue, displayName, eventMappings, fineValue, lockEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaConversionValues {\n");
    sb.append("    coarseValue: ").append(toIndentedString(coarseValue)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    eventMappings: ").append(toIndentedString(eventMappings)).append("\n");
    sb.append("    fineValue: ").append(toIndentedString(fineValue)).append("\n");
    sb.append("    lockEnabled: ").append(toIndentedString(lockEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coarseValue");
    openapiFields.add("displayName");
    openapiFields.add("eventMappings");
    openapiFields.add("fineValue");
    openapiFields.add("lockEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaConversionValues
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaConversionValues.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaConversionValues is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaConversionValues.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaConversionValues.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaConversionValues` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("coarseValue") != null && !jsonObj.get("coarseValue").isJsonNull()) && !jsonObj.get("coarseValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coarseValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coarseValue").toString()));
      }
      // validate the optional field `coarseValue`
      if (jsonObj.get("coarseValue") != null && !jsonObj.get("coarseValue").isJsonNull()) {
        CoarseValueEnum.validateJsonElement(jsonObj.get("coarseValue"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("eventMappings") != null && !jsonObj.get("eventMappings").isJsonNull()) {
        JsonArray jsonArrayeventMappings = jsonObj.getAsJsonArray("eventMappings");
        if (jsonArrayeventMappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("eventMappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `eventMappings` to be an array in the JSON string but got `%s`", jsonObj.get("eventMappings").toString()));
          }

          // validate the optional field `eventMappings` (array)
          for (int i = 0; i < jsonArrayeventMappings.size(); i++) {
            GoogleAnalyticsAdminV1alphaEventMapping.validateJsonElement(jsonArrayeventMappings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaConversionValues.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaConversionValues' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaConversionValues> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaConversionValues.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaConversionValues>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaConversionValues value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaConversionValues read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaConversionValues given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaConversionValues
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaConversionValues
   */
  public static GoogleAnalyticsAdminV1alphaConversionValues fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaConversionValues.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaConversionValues to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

