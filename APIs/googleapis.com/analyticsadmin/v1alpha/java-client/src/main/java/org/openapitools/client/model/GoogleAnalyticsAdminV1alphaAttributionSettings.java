/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The attribution settings used for a given property. This is a singleton resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaAttributionSettings {
  /**
   * Required. The lookback window configuration for acquisition conversion events. The default window size is 30 days.
   */
  @JsonAdapter(AcquisitionConversionEventLookbackWindowEnum.Adapter.class)
  public enum AcquisitionConversionEventLookbackWindowEnum {
    UNSPECIFIED("ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED"),
    
    _7_DAYS("ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_7_DAYS"),
    
    _30_DAYS("ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS");

    private String value;

    AcquisitionConversionEventLookbackWindowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AcquisitionConversionEventLookbackWindowEnum fromValue(String value) {
      for (AcquisitionConversionEventLookbackWindowEnum b : AcquisitionConversionEventLookbackWindowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AcquisitionConversionEventLookbackWindowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AcquisitionConversionEventLookbackWindowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AcquisitionConversionEventLookbackWindowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AcquisitionConversionEventLookbackWindowEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AcquisitionConversionEventLookbackWindowEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW = "acquisitionConversionEventLookbackWindow";
  @SerializedName(SERIALIZED_NAME_ACQUISITION_CONVERSION_EVENT_LOOKBACK_WINDOW)
  private AcquisitionConversionEventLookbackWindowEnum acquisitionConversionEventLookbackWindow;

  /**
   * Required. The Conversion Export Scope for data exported to linked Ads Accounts.
   */
  @JsonAdapter(AdsWebConversionDataExportScopeEnum.Adapter.class)
  public enum AdsWebConversionDataExportScopeEnum {
    ADS_WEB_CONVERSION_DATA_EXPORT_SCOPE_UNSPECIFIED("ADS_WEB_CONVERSION_DATA_EXPORT_SCOPE_UNSPECIFIED"),
    
    NOT_SELECTED_YET("NOT_SELECTED_YET"),
    
    PAID_AND_ORGANIC_CHANNELS("PAID_AND_ORGANIC_CHANNELS"),
    
    GOOGLE_PAID_CHANNELS("GOOGLE_PAID_CHANNELS");

    private String value;

    AdsWebConversionDataExportScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdsWebConversionDataExportScopeEnum fromValue(String value) {
      for (AdsWebConversionDataExportScopeEnum b : AdsWebConversionDataExportScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdsWebConversionDataExportScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdsWebConversionDataExportScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdsWebConversionDataExportScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdsWebConversionDataExportScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdsWebConversionDataExportScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADS_WEB_CONVERSION_DATA_EXPORT_SCOPE = "adsWebConversionDataExportScope";
  @SerializedName(SERIALIZED_NAME_ADS_WEB_CONVERSION_DATA_EXPORT_SCOPE)
  private AdsWebConversionDataExportScopeEnum adsWebConversionDataExportScope;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Required. The lookback window for all other, non-acquisition conversion events. The default window size is 90 days.
   */
  @JsonAdapter(OtherConversionEventLookbackWindowEnum.Adapter.class)
  public enum OtherConversionEventLookbackWindowEnum {
    UNSPECIFIED("OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_UNSPECIFIED"),
    
    _30_DAYS("OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_30_DAYS"),
    
    _60_DAYS("OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_60_DAYS"),
    
    _90_DAYS("OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW_90_DAYS");

    private String value;

    OtherConversionEventLookbackWindowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OtherConversionEventLookbackWindowEnum fromValue(String value) {
      for (OtherConversionEventLookbackWindowEnum b : OtherConversionEventLookbackWindowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OtherConversionEventLookbackWindowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OtherConversionEventLookbackWindowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OtherConversionEventLookbackWindowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OtherConversionEventLookbackWindowEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OtherConversionEventLookbackWindowEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW = "otherConversionEventLookbackWindow";
  @SerializedName(SERIALIZED_NAME_OTHER_CONVERSION_EVENT_LOOKBACK_WINDOW)
  private OtherConversionEventLookbackWindowEnum otherConversionEventLookbackWindow;

  /**
   * Required. The reporting attribution model used to calculate conversion credit in this property&#39;s reports. Changing the attribution model will apply to both historical and future data. These changes will be reflected in reports with conversion and revenue data. User and session data will be unaffected.
   */
  @JsonAdapter(ReportingAttributionModelEnum.Adapter.class)
  public enum ReportingAttributionModelEnum {
    REPORTING_ATTRIBUTION_MODEL_UNSPECIFIED("REPORTING_ATTRIBUTION_MODEL_UNSPECIFIED"),
    
    PAID_AND_ORGANIC_CHANNELS_DATA_DRIVEN("PAID_AND_ORGANIC_CHANNELS_DATA_DRIVEN"),
    
    PAID_AND_ORGANIC_CHANNELS_LAST_CLICK("PAID_AND_ORGANIC_CHANNELS_LAST_CLICK"),
    
    GOOGLE_PAID_CHANNELS_LAST_CLICK("GOOGLE_PAID_CHANNELS_LAST_CLICK");

    private String value;

    ReportingAttributionModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportingAttributionModelEnum fromValue(String value) {
      for (ReportingAttributionModelEnum b : ReportingAttributionModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReportingAttributionModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportingAttributionModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportingAttributionModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReportingAttributionModelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReportingAttributionModelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPORTING_ATTRIBUTION_MODEL = "reportingAttributionModel";
  @SerializedName(SERIALIZED_NAME_REPORTING_ATTRIBUTION_MODEL)
  private ReportingAttributionModelEnum reportingAttributionModel;

  public GoogleAnalyticsAdminV1alphaAttributionSettings() {
  }

  public GoogleAnalyticsAdminV1alphaAttributionSettings(
     String name
  ) {
    this();
    this.name = name;
  }

  public GoogleAnalyticsAdminV1alphaAttributionSettings acquisitionConversionEventLookbackWindow(AcquisitionConversionEventLookbackWindowEnum acquisitionConversionEventLookbackWindow) {
    this.acquisitionConversionEventLookbackWindow = acquisitionConversionEventLookbackWindow;
    return this;
  }

  /**
   * Required. The lookback window configuration for acquisition conversion events. The default window size is 30 days.
   * @return acquisitionConversionEventLookbackWindow
   */
  @javax.annotation.Nullable
  public AcquisitionConversionEventLookbackWindowEnum getAcquisitionConversionEventLookbackWindow() {
    return acquisitionConversionEventLookbackWindow;
  }

  public void setAcquisitionConversionEventLookbackWindow(AcquisitionConversionEventLookbackWindowEnum acquisitionConversionEventLookbackWindow) {
    this.acquisitionConversionEventLookbackWindow = acquisitionConversionEventLookbackWindow;
  }


  public GoogleAnalyticsAdminV1alphaAttributionSettings adsWebConversionDataExportScope(AdsWebConversionDataExportScopeEnum adsWebConversionDataExportScope) {
    this.adsWebConversionDataExportScope = adsWebConversionDataExportScope;
    return this;
  }

  /**
   * Required. The Conversion Export Scope for data exported to linked Ads Accounts.
   * @return adsWebConversionDataExportScope
   */
  @javax.annotation.Nullable
  public AdsWebConversionDataExportScopeEnum getAdsWebConversionDataExportScope() {
    return adsWebConversionDataExportScope;
  }

  public void setAdsWebConversionDataExportScope(AdsWebConversionDataExportScopeEnum adsWebConversionDataExportScope) {
    this.adsWebConversionDataExportScope = adsWebConversionDataExportScope;
  }


  /**
   * Output only. Resource name of this attribution settings resource. Format: properties/{property_id}/attributionSettings Example: \&quot;properties/1000/attributionSettings\&quot;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleAnalyticsAdminV1alphaAttributionSettings otherConversionEventLookbackWindow(OtherConversionEventLookbackWindowEnum otherConversionEventLookbackWindow) {
    this.otherConversionEventLookbackWindow = otherConversionEventLookbackWindow;
    return this;
  }

  /**
   * Required. The lookback window for all other, non-acquisition conversion events. The default window size is 90 days.
   * @return otherConversionEventLookbackWindow
   */
  @javax.annotation.Nullable
  public OtherConversionEventLookbackWindowEnum getOtherConversionEventLookbackWindow() {
    return otherConversionEventLookbackWindow;
  }

  public void setOtherConversionEventLookbackWindow(OtherConversionEventLookbackWindowEnum otherConversionEventLookbackWindow) {
    this.otherConversionEventLookbackWindow = otherConversionEventLookbackWindow;
  }


  public GoogleAnalyticsAdminV1alphaAttributionSettings reportingAttributionModel(ReportingAttributionModelEnum reportingAttributionModel) {
    this.reportingAttributionModel = reportingAttributionModel;
    return this;
  }

  /**
   * Required. The reporting attribution model used to calculate conversion credit in this property&#39;s reports. Changing the attribution model will apply to both historical and future data. These changes will be reflected in reports with conversion and revenue data. User and session data will be unaffected.
   * @return reportingAttributionModel
   */
  @javax.annotation.Nullable
  public ReportingAttributionModelEnum getReportingAttributionModel() {
    return reportingAttributionModel;
  }

  public void setReportingAttributionModel(ReportingAttributionModelEnum reportingAttributionModel) {
    this.reportingAttributionModel = reportingAttributionModel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaAttributionSettings googleAnalyticsAdminV1alphaAttributionSettings = (GoogleAnalyticsAdminV1alphaAttributionSettings) o;
    return Objects.equals(this.acquisitionConversionEventLookbackWindow, googleAnalyticsAdminV1alphaAttributionSettings.acquisitionConversionEventLookbackWindow) &&
        Objects.equals(this.adsWebConversionDataExportScope, googleAnalyticsAdminV1alphaAttributionSettings.adsWebConversionDataExportScope) &&
        Objects.equals(this.name, googleAnalyticsAdminV1alphaAttributionSettings.name) &&
        Objects.equals(this.otherConversionEventLookbackWindow, googleAnalyticsAdminV1alphaAttributionSettings.otherConversionEventLookbackWindow) &&
        Objects.equals(this.reportingAttributionModel, googleAnalyticsAdminV1alphaAttributionSettings.reportingAttributionModel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquisitionConversionEventLookbackWindow, adsWebConversionDataExportScope, name, otherConversionEventLookbackWindow, reportingAttributionModel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaAttributionSettings {\n");
    sb.append("    acquisitionConversionEventLookbackWindow: ").append(toIndentedString(acquisitionConversionEventLookbackWindow)).append("\n");
    sb.append("    adsWebConversionDataExportScope: ").append(toIndentedString(adsWebConversionDataExportScope)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    otherConversionEventLookbackWindow: ").append(toIndentedString(otherConversionEventLookbackWindow)).append("\n");
    sb.append("    reportingAttributionModel: ").append(toIndentedString(reportingAttributionModel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acquisitionConversionEventLookbackWindow");
    openapiFields.add("adsWebConversionDataExportScope");
    openapiFields.add("name");
    openapiFields.add("otherConversionEventLookbackWindow");
    openapiFields.add("reportingAttributionModel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaAttributionSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaAttributionSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaAttributionSettings is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaAttributionSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaAttributionSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaAttributionSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acquisitionConversionEventLookbackWindow") != null && !jsonObj.get("acquisitionConversionEventLookbackWindow").isJsonNull()) && !jsonObj.get("acquisitionConversionEventLookbackWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquisitionConversionEventLookbackWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquisitionConversionEventLookbackWindow").toString()));
      }
      // validate the optional field `acquisitionConversionEventLookbackWindow`
      if (jsonObj.get("acquisitionConversionEventLookbackWindow") != null && !jsonObj.get("acquisitionConversionEventLookbackWindow").isJsonNull()) {
        AcquisitionConversionEventLookbackWindowEnum.validateJsonElement(jsonObj.get("acquisitionConversionEventLookbackWindow"));
      }
      if ((jsonObj.get("adsWebConversionDataExportScope") != null && !jsonObj.get("adsWebConversionDataExportScope").isJsonNull()) && !jsonObj.get("adsWebConversionDataExportScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adsWebConversionDataExportScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adsWebConversionDataExportScope").toString()));
      }
      // validate the optional field `adsWebConversionDataExportScope`
      if (jsonObj.get("adsWebConversionDataExportScope") != null && !jsonObj.get("adsWebConversionDataExportScope").isJsonNull()) {
        AdsWebConversionDataExportScopeEnum.validateJsonElement(jsonObj.get("adsWebConversionDataExportScope"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("otherConversionEventLookbackWindow") != null && !jsonObj.get("otherConversionEventLookbackWindow").isJsonNull()) && !jsonObj.get("otherConversionEventLookbackWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherConversionEventLookbackWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otherConversionEventLookbackWindow").toString()));
      }
      // validate the optional field `otherConversionEventLookbackWindow`
      if (jsonObj.get("otherConversionEventLookbackWindow") != null && !jsonObj.get("otherConversionEventLookbackWindow").isJsonNull()) {
        OtherConversionEventLookbackWindowEnum.validateJsonElement(jsonObj.get("otherConversionEventLookbackWindow"));
      }
      if ((jsonObj.get("reportingAttributionModel") != null && !jsonObj.get("reportingAttributionModel").isJsonNull()) && !jsonObj.get("reportingAttributionModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportingAttributionModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportingAttributionModel").toString()));
      }
      // validate the optional field `reportingAttributionModel`
      if (jsonObj.get("reportingAttributionModel") != null && !jsonObj.get("reportingAttributionModel").isJsonNull()) {
        ReportingAttributionModelEnum.validateJsonElement(jsonObj.get("reportingAttributionModel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaAttributionSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaAttributionSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaAttributionSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaAttributionSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaAttributionSettings>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaAttributionSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaAttributionSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaAttributionSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaAttributionSettings
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaAttributionSettings
   */
  public static GoogleAnalyticsAdminV1alphaAttributionSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaAttributionSettings.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaAttributionSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

