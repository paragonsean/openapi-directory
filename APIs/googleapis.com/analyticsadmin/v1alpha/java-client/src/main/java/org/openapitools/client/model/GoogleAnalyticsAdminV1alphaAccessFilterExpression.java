/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAccessFilter;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAccessFilterExpressionList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Expresses dimension or metric filters. The fields in the same expression need to be either all dimensions or all metrics.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaAccessFilterExpression {
  public static final String SERIALIZED_NAME_ACCESS_FILTER = "accessFilter";
  @SerializedName(SERIALIZED_NAME_ACCESS_FILTER)
  private GoogleAnalyticsAdminV1alphaAccessFilter accessFilter;

  public static final String SERIALIZED_NAME_AND_GROUP = "andGroup";
  @SerializedName(SERIALIZED_NAME_AND_GROUP)
  private GoogleAnalyticsAdminV1alphaAccessFilterExpressionList andGroup;

  public static final String SERIALIZED_NAME_NOT_EXPRESSION = "notExpression";
  @SerializedName(SERIALIZED_NAME_NOT_EXPRESSION)
  private GoogleAnalyticsAdminV1alphaAccessFilterExpression notExpression;

  public static final String SERIALIZED_NAME_OR_GROUP = "orGroup";
  @SerializedName(SERIALIZED_NAME_OR_GROUP)
  private GoogleAnalyticsAdminV1alphaAccessFilterExpressionList orGroup;

  public GoogleAnalyticsAdminV1alphaAccessFilterExpression() {
  }

  public GoogleAnalyticsAdminV1alphaAccessFilterExpression accessFilter(GoogleAnalyticsAdminV1alphaAccessFilter accessFilter) {
    this.accessFilter = accessFilter;
    return this;
  }

  /**
   * Get accessFilter
   * @return accessFilter
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAccessFilter getAccessFilter() {
    return accessFilter;
  }

  public void setAccessFilter(GoogleAnalyticsAdminV1alphaAccessFilter accessFilter) {
    this.accessFilter = accessFilter;
  }


  public GoogleAnalyticsAdminV1alphaAccessFilterExpression andGroup(GoogleAnalyticsAdminV1alphaAccessFilterExpressionList andGroup) {
    this.andGroup = andGroup;
    return this;
  }

  /**
   * Get andGroup
   * @return andGroup
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAccessFilterExpressionList getAndGroup() {
    return andGroup;
  }

  public void setAndGroup(GoogleAnalyticsAdminV1alphaAccessFilterExpressionList andGroup) {
    this.andGroup = andGroup;
  }


  public GoogleAnalyticsAdminV1alphaAccessFilterExpression notExpression(GoogleAnalyticsAdminV1alphaAccessFilterExpression notExpression) {
    this.notExpression = notExpression;
    return this;
  }

  /**
   * Get notExpression
   * @return notExpression
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAccessFilterExpression getNotExpression() {
    return notExpression;
  }

  public void setNotExpression(GoogleAnalyticsAdminV1alphaAccessFilterExpression notExpression) {
    this.notExpression = notExpression;
  }


  public GoogleAnalyticsAdminV1alphaAccessFilterExpression orGroup(GoogleAnalyticsAdminV1alphaAccessFilterExpressionList orGroup) {
    this.orGroup = orGroup;
    return this;
  }

  /**
   * Get orGroup
   * @return orGroup
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAccessFilterExpressionList getOrGroup() {
    return orGroup;
  }

  public void setOrGroup(GoogleAnalyticsAdminV1alphaAccessFilterExpressionList orGroup) {
    this.orGroup = orGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaAccessFilterExpression googleAnalyticsAdminV1alphaAccessFilterExpression = (GoogleAnalyticsAdminV1alphaAccessFilterExpression) o;
    return Objects.equals(this.accessFilter, googleAnalyticsAdminV1alphaAccessFilterExpression.accessFilter) &&
        Objects.equals(this.andGroup, googleAnalyticsAdminV1alphaAccessFilterExpression.andGroup) &&
        Objects.equals(this.notExpression, googleAnalyticsAdminV1alphaAccessFilterExpression.notExpression) &&
        Objects.equals(this.orGroup, googleAnalyticsAdminV1alphaAccessFilterExpression.orGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessFilter, andGroup, notExpression, orGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaAccessFilterExpression {\n");
    sb.append("    accessFilter: ").append(toIndentedString(accessFilter)).append("\n");
    sb.append("    andGroup: ").append(toIndentedString(andGroup)).append("\n");
    sb.append("    notExpression: ").append(toIndentedString(notExpression)).append("\n");
    sb.append("    orGroup: ").append(toIndentedString(orGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessFilter");
    openapiFields.add("andGroup");
    openapiFields.add("notExpression");
    openapiFields.add("orGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaAccessFilterExpression
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaAccessFilterExpression.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaAccessFilterExpression is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaAccessFilterExpression.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaAccessFilterExpression.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaAccessFilterExpression` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessFilter`
      if (jsonObj.get("accessFilter") != null && !jsonObj.get("accessFilter").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAccessFilter.validateJsonElement(jsonObj.get("accessFilter"));
      }
      // validate the optional field `andGroup`
      if (jsonObj.get("andGroup") != null && !jsonObj.get("andGroup").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAccessFilterExpressionList.validateJsonElement(jsonObj.get("andGroup"));
      }
      // validate the optional field `notExpression`
      if (jsonObj.get("notExpression") != null && !jsonObj.get("notExpression").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAccessFilterExpression.validateJsonElement(jsonObj.get("notExpression"));
      }
      // validate the optional field `orGroup`
      if (jsonObj.get("orGroup") != null && !jsonObj.get("orGroup").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAccessFilterExpressionList.validateJsonElement(jsonObj.get("orGroup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaAccessFilterExpression.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaAccessFilterExpression' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaAccessFilterExpression> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaAccessFilterExpression.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaAccessFilterExpression>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaAccessFilterExpression value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaAccessFilterExpression read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaAccessFilterExpression given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaAccessFilterExpression
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaAccessFilterExpression
   */
  public static GoogleAnalyticsAdminV1alphaAccessFilterExpression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaAccessFilterExpression.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaAccessFilterExpression to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

