/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data specific to web streams.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaDataStreamWebStreamData {
  public static final String SERIALIZED_NAME_DEFAULT_URI = "defaultUri";
  @SerializedName(SERIALIZED_NAME_DEFAULT_URI)
  private String defaultUri;

  public static final String SERIALIZED_NAME_FIREBASE_APP_ID = "firebaseAppId";
  @SerializedName(SERIALIZED_NAME_FIREBASE_APP_ID)
  private String firebaseAppId;

  public static final String SERIALIZED_NAME_MEASUREMENT_ID = "measurementId";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_ID)
  private String measurementId;

  public GoogleAnalyticsAdminV1alphaDataStreamWebStreamData() {
  }

  public GoogleAnalyticsAdminV1alphaDataStreamWebStreamData(
     String firebaseAppId, 
     String measurementId
  ) {
    this();
    this.firebaseAppId = firebaseAppId;
    this.measurementId = measurementId;
  }

  public GoogleAnalyticsAdminV1alphaDataStreamWebStreamData defaultUri(String defaultUri) {
    this.defaultUri = defaultUri;
    return this;
  }

  /**
   * Domain name of the web app being measured, or empty. Example: \&quot;http://www.google.com\&quot;, \&quot;https://www.google.com\&quot;
   * @return defaultUri
   */
  @javax.annotation.Nullable
  public String getDefaultUri() {
    return defaultUri;
  }

  public void setDefaultUri(String defaultUri) {
    this.defaultUri = defaultUri;
  }


  /**
   * Output only. ID of the corresponding web app in Firebase, if any. This ID can change if the web app is deleted and recreated.
   * @return firebaseAppId
   */
  @javax.annotation.Nullable
  public String getFirebaseAppId() {
    return firebaseAppId;
  }



  /**
   * Output only. Analytics Measurement ID. Example: \&quot;G-1A2BCD345E\&quot;
   * @return measurementId
   */
  @javax.annotation.Nullable
  public String getMeasurementId() {
    return measurementId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaDataStreamWebStreamData googleAnalyticsAdminV1alphaDataStreamWebStreamData = (GoogleAnalyticsAdminV1alphaDataStreamWebStreamData) o;
    return Objects.equals(this.defaultUri, googleAnalyticsAdminV1alphaDataStreamWebStreamData.defaultUri) &&
        Objects.equals(this.firebaseAppId, googleAnalyticsAdminV1alphaDataStreamWebStreamData.firebaseAppId) &&
        Objects.equals(this.measurementId, googleAnalyticsAdminV1alphaDataStreamWebStreamData.measurementId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultUri, firebaseAppId, measurementId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaDataStreamWebStreamData {\n");
    sb.append("    defaultUri: ").append(toIndentedString(defaultUri)).append("\n");
    sb.append("    firebaseAppId: ").append(toIndentedString(firebaseAppId)).append("\n");
    sb.append("    measurementId: ").append(toIndentedString(measurementId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultUri");
    openapiFields.add("firebaseAppId");
    openapiFields.add("measurementId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaDataStreamWebStreamData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaDataStreamWebStreamData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaDataStreamWebStreamData is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaDataStreamWebStreamData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaDataStreamWebStreamData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaDataStreamWebStreamData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defaultUri") != null && !jsonObj.get("defaultUri").isJsonNull()) && !jsonObj.get("defaultUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultUri").toString()));
      }
      if ((jsonObj.get("firebaseAppId") != null && !jsonObj.get("firebaseAppId").isJsonNull()) && !jsonObj.get("firebaseAppId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firebaseAppId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firebaseAppId").toString()));
      }
      if ((jsonObj.get("measurementId") != null && !jsonObj.get("measurementId").isJsonNull()) && !jsonObj.get("measurementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaDataStreamWebStreamData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaDataStreamWebStreamData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaDataStreamWebStreamData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaDataStreamWebStreamData.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaDataStreamWebStreamData>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaDataStreamWebStreamData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaDataStreamWebStreamData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaDataStreamWebStreamData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaDataStreamWebStreamData
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaDataStreamWebStreamData
   */
  public static GoogleAnalyticsAdminV1alphaDataStreamWebStreamData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaDataStreamWebStreamData.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaDataStreamWebStreamData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

