/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaConversionEventDefaultConversionValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A conversion event in a Google Analytics property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaConversionEvent {
  /**
   * Optional. The method by which conversions will be counted across multiple events within a session. If this value is not provided, it will be set to &#x60;ONCE_PER_EVENT&#x60;.
   */
  @JsonAdapter(CountingMethodEnum.Adapter.class)
  public enum CountingMethodEnum {
    CONVERSION_COUNTING_METHOD_UNSPECIFIED("CONVERSION_COUNTING_METHOD_UNSPECIFIED"),
    
    ONCE_PER_EVENT("ONCE_PER_EVENT"),
    
    ONCE_PER_SESSION("ONCE_PER_SESSION");

    private String value;

    CountingMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CountingMethodEnum fromValue(String value) {
      for (CountingMethodEnum b : CountingMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CountingMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CountingMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CountingMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CountingMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CountingMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COUNTING_METHOD = "countingMethod";
  @SerializedName(SERIALIZED_NAME_COUNTING_METHOD)
  private CountingMethodEnum countingMethod;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CUSTOM = "custom";
  @SerializedName(SERIALIZED_NAME_CUSTOM)
  private Boolean custom;

  public static final String SERIALIZED_NAME_DEFAULT_CONVERSION_VALUE = "defaultConversionValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CONVERSION_VALUE)
  private GoogleAnalyticsAdminV1alphaConversionEventDefaultConversionValue defaultConversionValue;

  public static final String SERIALIZED_NAME_DELETABLE = "deletable";
  @SerializedName(SERIALIZED_NAME_DELETABLE)
  private Boolean deletable;

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public GoogleAnalyticsAdminV1alphaConversionEvent() {
  }

  public GoogleAnalyticsAdminV1alphaConversionEvent(
     String createTime, 
     Boolean custom, 
     Boolean deletable, 
     String name
  ) {
    this();
    this.createTime = createTime;
    this.custom = custom;
    this.deletable = deletable;
    this.name = name;
  }

  public GoogleAnalyticsAdminV1alphaConversionEvent countingMethod(CountingMethodEnum countingMethod) {
    this.countingMethod = countingMethod;
    return this;
  }

  /**
   * Optional. The method by which conversions will be counted across multiple events within a session. If this value is not provided, it will be set to &#x60;ONCE_PER_EVENT&#x60;.
   * @return countingMethod
   */
  @javax.annotation.Nullable
  public CountingMethodEnum getCountingMethod() {
    return countingMethod;
  }

  public void setCountingMethod(CountingMethodEnum countingMethod) {
    this.countingMethod = countingMethod;
  }


  /**
   * Output only. Time when this conversion event was created in the property.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. If set to true, this conversion event refers to a custom event. If set to false, this conversion event refers to a default event in GA. Default events typically have special meaning in GA. Default events are usually created for you by the GA system, but in some cases can be created by property admins. Custom events count towards the maximum number of custom conversion events that may be created per property.
   * @return custom
   */
  @javax.annotation.Nullable
  public Boolean getCustom() {
    return custom;
  }



  public GoogleAnalyticsAdminV1alphaConversionEvent defaultConversionValue(GoogleAnalyticsAdminV1alphaConversionEventDefaultConversionValue defaultConversionValue) {
    this.defaultConversionValue = defaultConversionValue;
    return this;
  }

  /**
   * Get defaultConversionValue
   * @return defaultConversionValue
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaConversionEventDefaultConversionValue getDefaultConversionValue() {
    return defaultConversionValue;
  }

  public void setDefaultConversionValue(GoogleAnalyticsAdminV1alphaConversionEventDefaultConversionValue defaultConversionValue) {
    this.defaultConversionValue = defaultConversionValue;
  }


  /**
   * Output only. If set, this event can currently be deleted with DeleteConversionEvent.
   * @return deletable
   */
  @javax.annotation.Nullable
  public Boolean getDeletable() {
    return deletable;
  }



  public GoogleAnalyticsAdminV1alphaConversionEvent eventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Immutable. The event name for this conversion event. Examples: &#39;click&#39;, &#39;purchase&#39;
   * @return eventName
   */
  @javax.annotation.Nullable
  public String getEventName() {
    return eventName;
  }

  public void setEventName(String eventName) {
    this.eventName = eventName;
  }


  /**
   * Output only. Resource name of this conversion event. Format: properties/{property}/conversionEvents/{conversion_event}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaConversionEvent googleAnalyticsAdminV1alphaConversionEvent = (GoogleAnalyticsAdminV1alphaConversionEvent) o;
    return Objects.equals(this.countingMethod, googleAnalyticsAdminV1alphaConversionEvent.countingMethod) &&
        Objects.equals(this.createTime, googleAnalyticsAdminV1alphaConversionEvent.createTime) &&
        Objects.equals(this.custom, googleAnalyticsAdminV1alphaConversionEvent.custom) &&
        Objects.equals(this.defaultConversionValue, googleAnalyticsAdminV1alphaConversionEvent.defaultConversionValue) &&
        Objects.equals(this.deletable, googleAnalyticsAdminV1alphaConversionEvent.deletable) &&
        Objects.equals(this.eventName, googleAnalyticsAdminV1alphaConversionEvent.eventName) &&
        Objects.equals(this.name, googleAnalyticsAdminV1alphaConversionEvent.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countingMethod, createTime, custom, defaultConversionValue, deletable, eventName, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaConversionEvent {\n");
    sb.append("    countingMethod: ").append(toIndentedString(countingMethod)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("    defaultConversionValue: ").append(toIndentedString(defaultConversionValue)).append("\n");
    sb.append("    deletable: ").append(toIndentedString(deletable)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countingMethod");
    openapiFields.add("createTime");
    openapiFields.add("custom");
    openapiFields.add("defaultConversionValue");
    openapiFields.add("deletable");
    openapiFields.add("eventName");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaConversionEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaConversionEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaConversionEvent is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaConversionEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaConversionEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaConversionEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("countingMethod") != null && !jsonObj.get("countingMethod").isJsonNull()) && !jsonObj.get("countingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countingMethod").toString()));
      }
      // validate the optional field `countingMethod`
      if (jsonObj.get("countingMethod") != null && !jsonObj.get("countingMethod").isJsonNull()) {
        CountingMethodEnum.validateJsonElement(jsonObj.get("countingMethod"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `defaultConversionValue`
      if (jsonObj.get("defaultConversionValue") != null && !jsonObj.get("defaultConversionValue").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaConversionEventDefaultConversionValue.validateJsonElement(jsonObj.get("defaultConversionValue"));
      }
      if ((jsonObj.get("eventName") != null && !jsonObj.get("eventName").isJsonNull()) && !jsonObj.get("eventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaConversionEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaConversionEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaConversionEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaConversionEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaConversionEvent>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaConversionEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaConversionEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaConversionEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaConversionEvent
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaConversionEvent
   */
  public static GoogleAnalyticsAdminV1alphaConversionEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaConversionEvent.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaConversionEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

