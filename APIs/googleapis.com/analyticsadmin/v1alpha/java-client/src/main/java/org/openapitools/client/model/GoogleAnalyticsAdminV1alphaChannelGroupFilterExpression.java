/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaChannelGroupFilter;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A logical expression of Channel Group dimension filters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression {
  public static final String SERIALIZED_NAME_AND_GROUP = "andGroup";
  @SerializedName(SERIALIZED_NAME_AND_GROUP)
  private GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList andGroup;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private GoogleAnalyticsAdminV1alphaChannelGroupFilter filter;

  public static final String SERIALIZED_NAME_NOT_EXPRESSION = "notExpression";
  @SerializedName(SERIALIZED_NAME_NOT_EXPRESSION)
  private GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression notExpression;

  public static final String SERIALIZED_NAME_OR_GROUP = "orGroup";
  @SerializedName(SERIALIZED_NAME_OR_GROUP)
  private GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList orGroup;

  public GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression() {
  }

  public GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression andGroup(GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList andGroup) {
    this.andGroup = andGroup;
    return this;
  }

  /**
   * Get andGroup
   * @return andGroup
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList getAndGroup() {
    return andGroup;
  }

  public void setAndGroup(GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList andGroup) {
    this.andGroup = andGroup;
  }


  public GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression filter(GoogleAnalyticsAdminV1alphaChannelGroupFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaChannelGroupFilter getFilter() {
    return filter;
  }

  public void setFilter(GoogleAnalyticsAdminV1alphaChannelGroupFilter filter) {
    this.filter = filter;
  }


  public GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression notExpression(GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression notExpression) {
    this.notExpression = notExpression;
    return this;
  }

  /**
   * Get notExpression
   * @return notExpression
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression getNotExpression() {
    return notExpression;
  }

  public void setNotExpression(GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression notExpression) {
    this.notExpression = notExpression;
  }


  public GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression orGroup(GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList orGroup) {
    this.orGroup = orGroup;
    return this;
  }

  /**
   * Get orGroup
   * @return orGroup
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList getOrGroup() {
    return orGroup;
  }

  public void setOrGroup(GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList orGroup) {
    this.orGroup = orGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression googleAnalyticsAdminV1alphaChannelGroupFilterExpression = (GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression) o;
    return Objects.equals(this.andGroup, googleAnalyticsAdminV1alphaChannelGroupFilterExpression.andGroup) &&
        Objects.equals(this.filter, googleAnalyticsAdminV1alphaChannelGroupFilterExpression.filter) &&
        Objects.equals(this.notExpression, googleAnalyticsAdminV1alphaChannelGroupFilterExpression.notExpression) &&
        Objects.equals(this.orGroup, googleAnalyticsAdminV1alphaChannelGroupFilterExpression.orGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(andGroup, filter, notExpression, orGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression {\n");
    sb.append("    andGroup: ").append(toIndentedString(andGroup)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    notExpression: ").append(toIndentedString(notExpression)).append("\n");
    sb.append("    orGroup: ").append(toIndentedString(orGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("andGroup");
    openapiFields.add("filter");
    openapiFields.add("notExpression");
    openapiFields.add("orGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `andGroup`
      if (jsonObj.get("andGroup") != null && !jsonObj.get("andGroup").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList.validateJsonElement(jsonObj.get("andGroup"));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaChannelGroupFilter.validateJsonElement(jsonObj.get("filter"));
      }
      // validate the optional field `notExpression`
      if (jsonObj.get("notExpression") != null && !jsonObj.get("notExpression").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.validateJsonElement(jsonObj.get("notExpression"));
      }
      // validate the optional field `orGroup`
      if (jsonObj.get("orGroup") != null && !jsonObj.get("orGroup").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaChannelGroupFilterExpressionList.validateJsonElement(jsonObj.get("orGroup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression
   */
  public static GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaChannelGroupFilterExpression to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

