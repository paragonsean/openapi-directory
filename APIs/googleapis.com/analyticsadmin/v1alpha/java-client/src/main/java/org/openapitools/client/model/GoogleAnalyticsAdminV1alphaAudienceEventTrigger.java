/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies an event to log when a user joins the Audience.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaAudienceEventTrigger {
  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;

  /**
   * Required. When to log the event.
   */
  @JsonAdapter(LogConditionEnum.Adapter.class)
  public enum LogConditionEnum {
    LOG_CONDITION_UNSPECIFIED("LOG_CONDITION_UNSPECIFIED"),
    
    AUDIENCE_JOINED("AUDIENCE_JOINED"),
    
    AUDIENCE_MEMBERSHIP_RENEWED("AUDIENCE_MEMBERSHIP_RENEWED");

    private String value;

    LogConditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogConditionEnum fromValue(String value) {
      for (LogConditionEnum b : LogConditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogConditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogConditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogConditionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogConditionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LogConditionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOG_CONDITION = "logCondition";
  @SerializedName(SERIALIZED_NAME_LOG_CONDITION)
  private LogConditionEnum logCondition;

  public GoogleAnalyticsAdminV1alphaAudienceEventTrigger() {
  }

  public GoogleAnalyticsAdminV1alphaAudienceEventTrigger eventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Required. The event name that will be logged.
   * @return eventName
   */
  @javax.annotation.Nullable
  public String getEventName() {
    return eventName;
  }

  public void setEventName(String eventName) {
    this.eventName = eventName;
  }


  public GoogleAnalyticsAdminV1alphaAudienceEventTrigger logCondition(LogConditionEnum logCondition) {
    this.logCondition = logCondition;
    return this;
  }

  /**
   * Required. When to log the event.
   * @return logCondition
   */
  @javax.annotation.Nullable
  public LogConditionEnum getLogCondition() {
    return logCondition;
  }

  public void setLogCondition(LogConditionEnum logCondition) {
    this.logCondition = logCondition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaAudienceEventTrigger googleAnalyticsAdminV1alphaAudienceEventTrigger = (GoogleAnalyticsAdminV1alphaAudienceEventTrigger) o;
    return Objects.equals(this.eventName, googleAnalyticsAdminV1alphaAudienceEventTrigger.eventName) &&
        Objects.equals(this.logCondition, googleAnalyticsAdminV1alphaAudienceEventTrigger.logCondition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventName, logCondition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaAudienceEventTrigger {\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    logCondition: ").append(toIndentedString(logCondition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventName");
    openapiFields.add("logCondition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaAudienceEventTrigger
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaAudienceEventTrigger.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaAudienceEventTrigger is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaAudienceEventTrigger.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaAudienceEventTrigger.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaAudienceEventTrigger` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eventName") != null && !jsonObj.get("eventName").isJsonNull()) && !jsonObj.get("eventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventName").toString()));
      }
      if ((jsonObj.get("logCondition") != null && !jsonObj.get("logCondition").isJsonNull()) && !jsonObj.get("logCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logCondition").toString()));
      }
      // validate the optional field `logCondition`
      if (jsonObj.get("logCondition") != null && !jsonObj.get("logCondition").isJsonNull()) {
        LogConditionEnum.validateJsonElement(jsonObj.get("logCondition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaAudienceEventTrigger.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaAudienceEventTrigger' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaAudienceEventTrigger> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaAudienceEventTrigger.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaAudienceEventTrigger>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaAudienceEventTrigger value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaAudienceEventTrigger read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaAudienceEventTrigger given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaAudienceEventTrigger
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaAudienceEventTrigger
   */
  public static GoogleAnalyticsAdminV1alphaAudienceEventTrigger fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaAudienceEventTrigger.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaAudienceEventTrigger to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

