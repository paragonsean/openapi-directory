/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a condition for when an Event Edit or Event Creation rule applies to an event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaMatchingCondition {
  /**
   * Required. The type of comparison to be applied to the value.
   */
  @JsonAdapter(ComparisonTypeEnum.Adapter.class)
  public enum ComparisonTypeEnum {
    COMPARISON_TYPE_UNSPECIFIED("COMPARISON_TYPE_UNSPECIFIED"),
    
    EQUALS("EQUALS"),
    
    EQUALS_CASE_INSENSITIVE("EQUALS_CASE_INSENSITIVE"),
    
    CONTAINS("CONTAINS"),
    
    CONTAINS_CASE_INSENSITIVE("CONTAINS_CASE_INSENSITIVE"),
    
    STARTS_WITH("STARTS_WITH"),
    
    STARTS_WITH_CASE_INSENSITIVE("STARTS_WITH_CASE_INSENSITIVE"),
    
    ENDS_WITH("ENDS_WITH"),
    
    ENDS_WITH_CASE_INSENSITIVE("ENDS_WITH_CASE_INSENSITIVE"),
    
    GREATER_THAN("GREATER_THAN"),
    
    GREATER_THAN_OR_EQUAL("GREATER_THAN_OR_EQUAL"),
    
    LESS_THAN("LESS_THAN"),
    
    LESS_THAN_OR_EQUAL("LESS_THAN_OR_EQUAL"),
    
    REGULAR_EXPRESSION("REGULAR_EXPRESSION"),
    
    REGULAR_EXPRESSION_CASE_INSENSITIVE("REGULAR_EXPRESSION_CASE_INSENSITIVE");

    private String value;

    ComparisonTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComparisonTypeEnum fromValue(String value) {
      for (ComparisonTypeEnum b : ComparisonTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComparisonTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComparisonTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComparisonTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComparisonTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComparisonTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPARISON_TYPE = "comparisonType";
  @SerializedName(SERIALIZED_NAME_COMPARISON_TYPE)
  private ComparisonTypeEnum comparisonType;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_NEGATED = "negated";
  @SerializedName(SERIALIZED_NAME_NEGATED)
  private Boolean negated;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public GoogleAnalyticsAdminV1alphaMatchingCondition() {
  }

  public GoogleAnalyticsAdminV1alphaMatchingCondition comparisonType(ComparisonTypeEnum comparisonType) {
    this.comparisonType = comparisonType;
    return this;
  }

  /**
   * Required. The type of comparison to be applied to the value.
   * @return comparisonType
   */
  @javax.annotation.Nullable
  public ComparisonTypeEnum getComparisonType() {
    return comparisonType;
  }

  public void setComparisonType(ComparisonTypeEnum comparisonType) {
    this.comparisonType = comparisonType;
  }


  public GoogleAnalyticsAdminV1alphaMatchingCondition field(String field) {
    this.field = field;
    return this;
  }

  /**
   * Required. The name of the field that is compared against for the condition. If &#39;event_name&#39; is specified this condition will apply to the name of the event. Otherwise the condition will apply to a parameter with the specified name. This value cannot contain spaces.
   * @return field
   */
  @javax.annotation.Nullable
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }


  public GoogleAnalyticsAdminV1alphaMatchingCondition negated(Boolean negated) {
    this.negated = negated;
    return this;
  }

  /**
   * Whether or not the result of the comparison should be negated. For example, if &#x60;negated&#x60; is true, then &#39;equals&#39; comparisons would function as &#39;not equals&#39;.
   * @return negated
   */
  @javax.annotation.Nullable
  public Boolean getNegated() {
    return negated;
  }

  public void setNegated(Boolean negated) {
    this.negated = negated;
  }


  public GoogleAnalyticsAdminV1alphaMatchingCondition value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Required. The value being compared against for this condition. The runtime implementation may perform type coercion of this value to evaluate this condition based on the type of the parameter value.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaMatchingCondition googleAnalyticsAdminV1alphaMatchingCondition = (GoogleAnalyticsAdminV1alphaMatchingCondition) o;
    return Objects.equals(this.comparisonType, googleAnalyticsAdminV1alphaMatchingCondition.comparisonType) &&
        Objects.equals(this.field, googleAnalyticsAdminV1alphaMatchingCondition.field) &&
        Objects.equals(this.negated, googleAnalyticsAdminV1alphaMatchingCondition.negated) &&
        Objects.equals(this.value, googleAnalyticsAdminV1alphaMatchingCondition.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comparisonType, field, negated, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaMatchingCondition {\n");
    sb.append("    comparisonType: ").append(toIndentedString(comparisonType)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    negated: ").append(toIndentedString(negated)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comparisonType");
    openapiFields.add("field");
    openapiFields.add("negated");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaMatchingCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaMatchingCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaMatchingCondition is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaMatchingCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaMatchingCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaMatchingCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comparisonType") != null && !jsonObj.get("comparisonType").isJsonNull()) && !jsonObj.get("comparisonType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comparisonType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comparisonType").toString()));
      }
      // validate the optional field `comparisonType`
      if (jsonObj.get("comparisonType") != null && !jsonObj.get("comparisonType").isJsonNull()) {
        ComparisonTypeEnum.validateJsonElement(jsonObj.get("comparisonType"));
      }
      if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaMatchingCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaMatchingCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaMatchingCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaMatchingCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaMatchingCondition>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaMatchingCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaMatchingCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaMatchingCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaMatchingCondition
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaMatchingCondition
   */
  public static GoogleAnalyticsAdminV1alphaMatchingCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaMatchingCondition.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaMatchingCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

