/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A definition for a calculated metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaCalculatedMetric {
  public static final String SERIALIZED_NAME_CALCULATED_METRIC_ID = "calculatedMetricId";
  @SerializedName(SERIALIZED_NAME_CALCULATED_METRIC_ID)
  private String calculatedMetricId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FORMULA = "formula";
  @SerializedName(SERIALIZED_NAME_FORMULA)
  private String formula;

  public static final String SERIALIZED_NAME_INVALID_METRIC_REFERENCE = "invalidMetricReference";
  @SerializedName(SERIALIZED_NAME_INVALID_METRIC_REFERENCE)
  private Boolean invalidMetricReference;

  /**
   * Required. The type for the calculated metric&#39;s value.
   */
  @JsonAdapter(MetricUnitEnum.Adapter.class)
  public enum MetricUnitEnum {
    METRIC_UNIT_UNSPECIFIED("METRIC_UNIT_UNSPECIFIED"),
    
    STANDARD("STANDARD"),
    
    CURRENCY("CURRENCY"),
    
    FEET("FEET"),
    
    MILES("MILES"),
    
    METERS("METERS"),
    
    KILOMETERS("KILOMETERS"),
    
    MILLISECONDS("MILLISECONDS"),
    
    SECONDS("SECONDS"),
    
    MINUTES("MINUTES"),
    
    HOURS("HOURS");

    private String value;

    MetricUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricUnitEnum fromValue(String value) {
      for (MetricUnitEnum b : MetricUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetricUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METRIC_UNIT = "metricUnit";
  @SerializedName(SERIALIZED_NAME_METRIC_UNIT)
  private MetricUnitEnum metricUnit;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets restrictedMetricType
   */
  @JsonAdapter(RestrictedMetricTypeEnum.Adapter.class)
  public enum RestrictedMetricTypeEnum {
    RESTRICTED_METRIC_TYPE_UNSPECIFIED("RESTRICTED_METRIC_TYPE_UNSPECIFIED"),
    
    COST_DATA("COST_DATA"),
    
    REVENUE_DATA("REVENUE_DATA");

    private String value;

    RestrictedMetricTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestrictedMetricTypeEnum fromValue(String value) {
      for (RestrictedMetricTypeEnum b : RestrictedMetricTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RestrictedMetricTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestrictedMetricTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestrictedMetricTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RestrictedMetricTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RestrictedMetricTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESTRICTED_METRIC_TYPE = "restrictedMetricType";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_METRIC_TYPE)
  private List<RestrictedMetricTypeEnum> restrictedMetricType = new ArrayList<>();

  public GoogleAnalyticsAdminV1alphaCalculatedMetric() {
  }

  public GoogleAnalyticsAdminV1alphaCalculatedMetric(
     String calculatedMetricId, 
     Boolean invalidMetricReference, 
     String name, 
     List<RestrictedMetricTypeEnum> restrictedMetricType
  ) {
    this();
    this.calculatedMetricId = calculatedMetricId;
    this.invalidMetricReference = invalidMetricReference;
    this.name = name;
    this.restrictedMetricType = restrictedMetricType;
  }

  /**
   * Output only. The ID to use for the calculated metric. In the UI, this is referred to as the \&quot;API name.\&quot; The calculated_metric_id is used when referencing this calculated metric from external APIs. For example, \&quot;calcMetric:{calculated_metric_id}\&quot;.
   * @return calculatedMetricId
   */
  @javax.annotation.Nullable
  public String getCalculatedMetricId() {
    return calculatedMetricId;
  }



  public GoogleAnalyticsAdminV1alphaCalculatedMetric description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Description for this calculated metric. Max length of 4096 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleAnalyticsAdminV1alphaCalculatedMetric displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. Display name for this calculated metric as shown in the Google Analytics UI. Max length 82 characters.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleAnalyticsAdminV1alphaCalculatedMetric formula(String formula) {
    this.formula = formula;
    return this;
  }

  /**
   * Required. The calculated metric&#39;s definition. Maximum number of unique referenced custom metrics is 5. Formulas supports the following operations: + (addition), - (subtraction), - (negative), * (multiplication), / (division), () (parenthesis). Any valid real numbers are acceptable that fit in a Long (64bit integer) or a Double (64 bit floating point number). Example formula: \&quot;( customEvent:parameter_name + cartPurchaseQuantity ) / 2.0\&quot;
   * @return formula
   */
  @javax.annotation.Nullable
  public String getFormula() {
    return formula;
  }

  public void setFormula(String formula) {
    this.formula = formula;
  }


  /**
   * Output only. If true, this calculated metric has a invalid metric reference. Anything using a calculated metric with invalid_metric_reference set to true may fail, produce warnings, or produce unexpected results.
   * @return invalidMetricReference
   */
  @javax.annotation.Nullable
  public Boolean getInvalidMetricReference() {
    return invalidMetricReference;
  }



  public GoogleAnalyticsAdminV1alphaCalculatedMetric metricUnit(MetricUnitEnum metricUnit) {
    this.metricUnit = metricUnit;
    return this;
  }

  /**
   * Required. The type for the calculated metric&#39;s value.
   * @return metricUnit
   */
  @javax.annotation.Nullable
  public MetricUnitEnum getMetricUnit() {
    return metricUnit;
  }

  public void setMetricUnit(MetricUnitEnum metricUnit) {
    this.metricUnit = metricUnit;
  }


  /**
   * Output only. Resource name for this CalculatedMetric. Format: &#39;properties/{property_id}/calculatedMetrics/{calculated_metric_id}&#39;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. Types of restricted data that this metric contains.
   * @return restrictedMetricType
   */
  @javax.annotation.Nullable
  public List<RestrictedMetricTypeEnum> getRestrictedMetricType() {
    return restrictedMetricType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaCalculatedMetric googleAnalyticsAdminV1alphaCalculatedMetric = (GoogleAnalyticsAdminV1alphaCalculatedMetric) o;
    return Objects.equals(this.calculatedMetricId, googleAnalyticsAdminV1alphaCalculatedMetric.calculatedMetricId) &&
        Objects.equals(this.description, googleAnalyticsAdminV1alphaCalculatedMetric.description) &&
        Objects.equals(this.displayName, googleAnalyticsAdminV1alphaCalculatedMetric.displayName) &&
        Objects.equals(this.formula, googleAnalyticsAdminV1alphaCalculatedMetric.formula) &&
        Objects.equals(this.invalidMetricReference, googleAnalyticsAdminV1alphaCalculatedMetric.invalidMetricReference) &&
        Objects.equals(this.metricUnit, googleAnalyticsAdminV1alphaCalculatedMetric.metricUnit) &&
        Objects.equals(this.name, googleAnalyticsAdminV1alphaCalculatedMetric.name) &&
        Objects.equals(this.restrictedMetricType, googleAnalyticsAdminV1alphaCalculatedMetric.restrictedMetricType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculatedMetricId, description, displayName, formula, invalidMetricReference, metricUnit, name, restrictedMetricType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaCalculatedMetric {\n");
    sb.append("    calculatedMetricId: ").append(toIndentedString(calculatedMetricId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    formula: ").append(toIndentedString(formula)).append("\n");
    sb.append("    invalidMetricReference: ").append(toIndentedString(invalidMetricReference)).append("\n");
    sb.append("    metricUnit: ").append(toIndentedString(metricUnit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    restrictedMetricType: ").append(toIndentedString(restrictedMetricType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calculatedMetricId");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("formula");
    openapiFields.add("invalidMetricReference");
    openapiFields.add("metricUnit");
    openapiFields.add("name");
    openapiFields.add("restrictedMetricType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaCalculatedMetric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaCalculatedMetric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaCalculatedMetric is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaCalculatedMetric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaCalculatedMetric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaCalculatedMetric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("calculatedMetricId") != null && !jsonObj.get("calculatedMetricId").isJsonNull()) && !jsonObj.get("calculatedMetricId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calculatedMetricId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calculatedMetricId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("formula") != null && !jsonObj.get("formula").isJsonNull()) && !jsonObj.get("formula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formula").toString()));
      }
      if ((jsonObj.get("metricUnit") != null && !jsonObj.get("metricUnit").isJsonNull()) && !jsonObj.get("metricUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricUnit").toString()));
      }
      // validate the optional field `metricUnit`
      if (jsonObj.get("metricUnit") != null && !jsonObj.get("metricUnit").isJsonNull()) {
        MetricUnitEnum.validateJsonElement(jsonObj.get("metricUnit"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("restrictedMetricType") != null && !jsonObj.get("restrictedMetricType").isJsonNull() && !jsonObj.get("restrictedMetricType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictedMetricType` to be an array in the JSON string but got `%s`", jsonObj.get("restrictedMetricType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaCalculatedMetric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaCalculatedMetric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaCalculatedMetric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaCalculatedMetric.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaCalculatedMetric>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaCalculatedMetric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaCalculatedMetric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaCalculatedMetric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaCalculatedMetric
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaCalculatedMetric
   */
  public static GoogleAnalyticsAdminV1alphaCalculatedMetric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaCalculatedMetric.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaCalculatedMetric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

