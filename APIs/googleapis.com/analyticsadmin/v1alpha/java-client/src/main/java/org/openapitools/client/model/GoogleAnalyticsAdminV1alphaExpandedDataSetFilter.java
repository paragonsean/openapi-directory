/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaExpandedDataSetFilterInListFilter;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaExpandedDataSetFilterStringFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A specific filter for a single dimension
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaExpandedDataSetFilter {
  public static final String SERIALIZED_NAME_FIELD_NAME = "fieldName";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  public static final String SERIALIZED_NAME_IN_LIST_FILTER = "inListFilter";
  @SerializedName(SERIALIZED_NAME_IN_LIST_FILTER)
  private GoogleAnalyticsAdminV1alphaExpandedDataSetFilterInListFilter inListFilter;

  public static final String SERIALIZED_NAME_STRING_FILTER = "stringFilter";
  @SerializedName(SERIALIZED_NAME_STRING_FILTER)
  private GoogleAnalyticsAdminV1alphaExpandedDataSetFilterStringFilter stringFilter;

  public GoogleAnalyticsAdminV1alphaExpandedDataSetFilter() {
  }

  public GoogleAnalyticsAdminV1alphaExpandedDataSetFilter fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  /**
   * Required. The dimension name to filter.
   * @return fieldName
   */
  @javax.annotation.Nullable
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }


  public GoogleAnalyticsAdminV1alphaExpandedDataSetFilter inListFilter(GoogleAnalyticsAdminV1alphaExpandedDataSetFilterInListFilter inListFilter) {
    this.inListFilter = inListFilter;
    return this;
  }

  /**
   * Get inListFilter
   * @return inListFilter
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaExpandedDataSetFilterInListFilter getInListFilter() {
    return inListFilter;
  }

  public void setInListFilter(GoogleAnalyticsAdminV1alphaExpandedDataSetFilterInListFilter inListFilter) {
    this.inListFilter = inListFilter;
  }


  public GoogleAnalyticsAdminV1alphaExpandedDataSetFilter stringFilter(GoogleAnalyticsAdminV1alphaExpandedDataSetFilterStringFilter stringFilter) {
    this.stringFilter = stringFilter;
    return this;
  }

  /**
   * Get stringFilter
   * @return stringFilter
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaExpandedDataSetFilterStringFilter getStringFilter() {
    return stringFilter;
  }

  public void setStringFilter(GoogleAnalyticsAdminV1alphaExpandedDataSetFilterStringFilter stringFilter) {
    this.stringFilter = stringFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaExpandedDataSetFilter googleAnalyticsAdminV1alphaExpandedDataSetFilter = (GoogleAnalyticsAdminV1alphaExpandedDataSetFilter) o;
    return Objects.equals(this.fieldName, googleAnalyticsAdminV1alphaExpandedDataSetFilter.fieldName) &&
        Objects.equals(this.inListFilter, googleAnalyticsAdminV1alphaExpandedDataSetFilter.inListFilter) &&
        Objects.equals(this.stringFilter, googleAnalyticsAdminV1alphaExpandedDataSetFilter.stringFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldName, inListFilter, stringFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaExpandedDataSetFilter {\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    inListFilter: ").append(toIndentedString(inListFilter)).append("\n");
    sb.append("    stringFilter: ").append(toIndentedString(stringFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fieldName");
    openapiFields.add("inListFilter");
    openapiFields.add("stringFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaExpandedDataSetFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaExpandedDataSetFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaExpandedDataSetFilter is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaExpandedDataSetFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaExpandedDataSetFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaExpandedDataSetFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fieldName") != null && !jsonObj.get("fieldName").isJsonNull()) && !jsonObj.get("fieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldName").toString()));
      }
      // validate the optional field `inListFilter`
      if (jsonObj.get("inListFilter") != null && !jsonObj.get("inListFilter").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaExpandedDataSetFilterInListFilter.validateJsonElement(jsonObj.get("inListFilter"));
      }
      // validate the optional field `stringFilter`
      if (jsonObj.get("stringFilter") != null && !jsonObj.get("stringFilter").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaExpandedDataSetFilterStringFilter.validateJsonElement(jsonObj.get("stringFilter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaExpandedDataSetFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaExpandedDataSetFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaExpandedDataSetFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaExpandedDataSetFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaExpandedDataSetFilter>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaExpandedDataSetFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaExpandedDataSetFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaExpandedDataSetFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaExpandedDataSetFilter
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaExpandedDataSetFilter
   */
  public static GoogleAnalyticsAdminV1alphaExpandedDataSetFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaExpandedDataSetFilter.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaExpandedDataSetFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

