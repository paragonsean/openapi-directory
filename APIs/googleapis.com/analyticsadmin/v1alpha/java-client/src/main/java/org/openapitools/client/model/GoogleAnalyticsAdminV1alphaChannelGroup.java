/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaGroupingRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A resource message representing a Channel Group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaChannelGroup {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_GROUPING_RULE = "groupingRule";
  @SerializedName(SERIALIZED_NAME_GROUPING_RULE)
  private List<GoogleAnalyticsAdminV1alphaGroupingRule> groupingRule = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SYSTEM_DEFINED = "systemDefined";
  @SerializedName(SERIALIZED_NAME_SYSTEM_DEFINED)
  private Boolean systemDefined;

  public GoogleAnalyticsAdminV1alphaChannelGroup() {
  }

  public GoogleAnalyticsAdminV1alphaChannelGroup(
     String name, 
     Boolean systemDefined
  ) {
    this();
    this.name = name;
    this.systemDefined = systemDefined;
  }

  public GoogleAnalyticsAdminV1alphaChannelGroup description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the Channel Group. Max length of 256 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleAnalyticsAdminV1alphaChannelGroup displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The display name of the Channel Group. Max length of 80 characters.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleAnalyticsAdminV1alphaChannelGroup groupingRule(List<GoogleAnalyticsAdminV1alphaGroupingRule> groupingRule) {
    this.groupingRule = groupingRule;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaChannelGroup addGroupingRuleItem(GoogleAnalyticsAdminV1alphaGroupingRule groupingRuleItem) {
    if (this.groupingRule == null) {
      this.groupingRule = new ArrayList<>();
    }
    this.groupingRule.add(groupingRuleItem);
    return this;
  }

  /**
   * Required. The grouping rules of channels. Maximum number of rules is 50.
   * @return groupingRule
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1alphaGroupingRule> getGroupingRule() {
    return groupingRule;
  }

  public void setGroupingRule(List<GoogleAnalyticsAdminV1alphaGroupingRule> groupingRule) {
    this.groupingRule = groupingRule;
  }


  /**
   * Output only. The resource name for this Channel Group resource. Format: properties/{property}/channelGroups/{channel_group}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. If true, then this channel group is the Default Channel Group predefined by Google Analytics. Display name and grouping rules cannot be updated for this channel group.
   * @return systemDefined
   */
  @javax.annotation.Nullable
  public Boolean getSystemDefined() {
    return systemDefined;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaChannelGroup googleAnalyticsAdminV1alphaChannelGroup = (GoogleAnalyticsAdminV1alphaChannelGroup) o;
    return Objects.equals(this.description, googleAnalyticsAdminV1alphaChannelGroup.description) &&
        Objects.equals(this.displayName, googleAnalyticsAdminV1alphaChannelGroup.displayName) &&
        Objects.equals(this.groupingRule, googleAnalyticsAdminV1alphaChannelGroup.groupingRule) &&
        Objects.equals(this.name, googleAnalyticsAdminV1alphaChannelGroup.name) &&
        Objects.equals(this.systemDefined, googleAnalyticsAdminV1alphaChannelGroup.systemDefined);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, groupingRule, name, systemDefined);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaChannelGroup {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    groupingRule: ").append(toIndentedString(groupingRule)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    systemDefined: ").append(toIndentedString(systemDefined)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("groupingRule");
    openapiFields.add("name");
    openapiFields.add("systemDefined");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaChannelGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaChannelGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaChannelGroup is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaChannelGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaChannelGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaChannelGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("groupingRule") != null && !jsonObj.get("groupingRule").isJsonNull()) {
        JsonArray jsonArraygroupingRule = jsonObj.getAsJsonArray("groupingRule");
        if (jsonArraygroupingRule != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupingRule").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupingRule` to be an array in the JSON string but got `%s`", jsonObj.get("groupingRule").toString()));
          }

          // validate the optional field `groupingRule` (array)
          for (int i = 0; i < jsonArraygroupingRule.size(); i++) {
            GoogleAnalyticsAdminV1alphaGroupingRule.validateJsonElement(jsonArraygroupingRule.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaChannelGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaChannelGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaChannelGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaChannelGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaChannelGroup>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaChannelGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaChannelGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaChannelGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaChannelGroup
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaChannelGroup
   */
  public static GoogleAnalyticsAdminV1alphaChannelGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaChannelGroup.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaChannelGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

