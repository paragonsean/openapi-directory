/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaConnectedSiteTag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for CreateConnectedSiteTag RPC.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest {
  public static final String SERIALIZED_NAME_CONNECTED_SITE_TAG = "connectedSiteTag";
  @SerializedName(SERIALIZED_NAME_CONNECTED_SITE_TAG)
  private GoogleAnalyticsAdminV1alphaConnectedSiteTag connectedSiteTag;

  public static final String SERIALIZED_NAME_PROPERTY = "property";
  @SerializedName(SERIALIZED_NAME_PROPERTY)
  private String property;

  public GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest() {
  }

  public GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest connectedSiteTag(GoogleAnalyticsAdminV1alphaConnectedSiteTag connectedSiteTag) {
    this.connectedSiteTag = connectedSiteTag;
    return this;
  }

  /**
   * Get connectedSiteTag
   * @return connectedSiteTag
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaConnectedSiteTag getConnectedSiteTag() {
    return connectedSiteTag;
  }

  public void setConnectedSiteTag(GoogleAnalyticsAdminV1alphaConnectedSiteTag connectedSiteTag) {
    this.connectedSiteTag = connectedSiteTag;
  }


  public GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest property(String property) {
    this.property = property;
    return this;
  }

  /**
   * The Universal Analytics property to create connected site tags for. This API does not support GA4 properties. Format: properties/{universalAnalyticsPropertyId} Example: properties/1234
   * @return property
   */
  @javax.annotation.Nullable
  public String getProperty() {
    return property;
  }

  public void setProperty(String property) {
    this.property = property;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest googleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest = (GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest) o;
    return Objects.equals(this.connectedSiteTag, googleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest.connectedSiteTag) &&
        Objects.equals(this.property, googleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest.property);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectedSiteTag, property);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest {\n");
    sb.append("    connectedSiteTag: ").append(toIndentedString(connectedSiteTag)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectedSiteTag");
    openapiFields.add("property");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `connectedSiteTag`
      if (jsonObj.get("connectedSiteTag") != null && !jsonObj.get("connectedSiteTag").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaConnectedSiteTag.validateJsonElement(jsonObj.get("connectedSiteTag"));
      }
      if ((jsonObj.get("property") != null && !jsonObj.get("property").isJsonNull()) && !jsonObj.get("property").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `property` to be a primitive type in the JSON string but got `%s`", jsonObj.get("property").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest
   */
  public static GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

