/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAudienceSequenceFilter;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAudienceSimpleFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A clause for defining either a simple or sequence filter. A filter can be inclusive (For example, users satisfying the filter clause are included in the Audience) or exclusive (For example, users satisfying the filter clause are excluded from the Audience).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaAudienceFilterClause {
  /**
   * Required. Specifies whether this is an include or exclude filter clause.
   */
  @JsonAdapter(ClauseTypeEnum.Adapter.class)
  public enum ClauseTypeEnum {
    AUDIENCE_CLAUSE_TYPE_UNSPECIFIED("AUDIENCE_CLAUSE_TYPE_UNSPECIFIED"),
    
    INCLUDE("INCLUDE"),
    
    EXCLUDE("EXCLUDE");

    private String value;

    ClauseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClauseTypeEnum fromValue(String value) {
      for (ClauseTypeEnum b : ClauseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClauseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClauseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClauseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClauseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClauseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLAUSE_TYPE = "clauseType";
  @SerializedName(SERIALIZED_NAME_CLAUSE_TYPE)
  private ClauseTypeEnum clauseType;

  public static final String SERIALIZED_NAME_SEQUENCE_FILTER = "sequenceFilter";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_FILTER)
  private GoogleAnalyticsAdminV1alphaAudienceSequenceFilter sequenceFilter;

  public static final String SERIALIZED_NAME_SIMPLE_FILTER = "simpleFilter";
  @SerializedName(SERIALIZED_NAME_SIMPLE_FILTER)
  private GoogleAnalyticsAdminV1alphaAudienceSimpleFilter simpleFilter;

  public GoogleAnalyticsAdminV1alphaAudienceFilterClause() {
  }

  public GoogleAnalyticsAdminV1alphaAudienceFilterClause clauseType(ClauseTypeEnum clauseType) {
    this.clauseType = clauseType;
    return this;
  }

  /**
   * Required. Specifies whether this is an include or exclude filter clause.
   * @return clauseType
   */
  @javax.annotation.Nullable
  public ClauseTypeEnum getClauseType() {
    return clauseType;
  }

  public void setClauseType(ClauseTypeEnum clauseType) {
    this.clauseType = clauseType;
  }


  public GoogleAnalyticsAdminV1alphaAudienceFilterClause sequenceFilter(GoogleAnalyticsAdminV1alphaAudienceSequenceFilter sequenceFilter) {
    this.sequenceFilter = sequenceFilter;
    return this;
  }

  /**
   * Get sequenceFilter
   * @return sequenceFilter
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAudienceSequenceFilter getSequenceFilter() {
    return sequenceFilter;
  }

  public void setSequenceFilter(GoogleAnalyticsAdminV1alphaAudienceSequenceFilter sequenceFilter) {
    this.sequenceFilter = sequenceFilter;
  }


  public GoogleAnalyticsAdminV1alphaAudienceFilterClause simpleFilter(GoogleAnalyticsAdminV1alphaAudienceSimpleFilter simpleFilter) {
    this.simpleFilter = simpleFilter;
    return this;
  }

  /**
   * Get simpleFilter
   * @return simpleFilter
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAudienceSimpleFilter getSimpleFilter() {
    return simpleFilter;
  }

  public void setSimpleFilter(GoogleAnalyticsAdminV1alphaAudienceSimpleFilter simpleFilter) {
    this.simpleFilter = simpleFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaAudienceFilterClause googleAnalyticsAdminV1alphaAudienceFilterClause = (GoogleAnalyticsAdminV1alphaAudienceFilterClause) o;
    return Objects.equals(this.clauseType, googleAnalyticsAdminV1alphaAudienceFilterClause.clauseType) &&
        Objects.equals(this.sequenceFilter, googleAnalyticsAdminV1alphaAudienceFilterClause.sequenceFilter) &&
        Objects.equals(this.simpleFilter, googleAnalyticsAdminV1alphaAudienceFilterClause.simpleFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clauseType, sequenceFilter, simpleFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaAudienceFilterClause {\n");
    sb.append("    clauseType: ").append(toIndentedString(clauseType)).append("\n");
    sb.append("    sequenceFilter: ").append(toIndentedString(sequenceFilter)).append("\n");
    sb.append("    simpleFilter: ").append(toIndentedString(simpleFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clauseType");
    openapiFields.add("sequenceFilter");
    openapiFields.add("simpleFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaAudienceFilterClause
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaAudienceFilterClause.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaAudienceFilterClause is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaAudienceFilterClause.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaAudienceFilterClause.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaAudienceFilterClause` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clauseType") != null && !jsonObj.get("clauseType").isJsonNull()) && !jsonObj.get("clauseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clauseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clauseType").toString()));
      }
      // validate the optional field `clauseType`
      if (jsonObj.get("clauseType") != null && !jsonObj.get("clauseType").isJsonNull()) {
        ClauseTypeEnum.validateJsonElement(jsonObj.get("clauseType"));
      }
      // validate the optional field `sequenceFilter`
      if (jsonObj.get("sequenceFilter") != null && !jsonObj.get("sequenceFilter").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.validateJsonElement(jsonObj.get("sequenceFilter"));
      }
      // validate the optional field `simpleFilter`
      if (jsonObj.get("simpleFilter") != null && !jsonObj.get("simpleFilter").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAudienceSimpleFilter.validateJsonElement(jsonObj.get("simpleFilter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaAudienceFilterClause.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaAudienceFilterClause' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaAudienceFilterClause> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaAudienceFilterClause.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaAudienceFilterClause>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaAudienceFilterClause value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaAudienceFilterClause read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaAudienceFilterClause given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaAudienceFilterClause
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaAudienceFilterClause
   */
  public static GoogleAnalyticsAdminV1alphaAudienceFilterClause fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaAudienceFilterClause.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaAudienceFilterClause to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

