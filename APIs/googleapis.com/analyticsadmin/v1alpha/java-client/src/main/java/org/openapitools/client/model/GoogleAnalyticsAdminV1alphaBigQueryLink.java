/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A link between a GA4 Property and BigQuery project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaBigQueryLink {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DAILY_EXPORT_ENABLED = "dailyExportEnabled";
  @SerializedName(SERIALIZED_NAME_DAILY_EXPORT_ENABLED)
  private Boolean dailyExportEnabled;

  public static final String SERIALIZED_NAME_EXCLUDED_EVENTS = "excludedEvents";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_EVENTS)
  private List<String> excludedEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPORT_STREAMS = "exportStreams";
  @SerializedName(SERIALIZED_NAME_EXPORT_STREAMS)
  private List<String> exportStreams = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRESH_DAILY_EXPORT_ENABLED = "freshDailyExportEnabled";
  @SerializedName(SERIALIZED_NAME_FRESH_DAILY_EXPORT_ENABLED)
  private Boolean freshDailyExportEnabled;

  public static final String SERIALIZED_NAME_INCLUDE_ADVERTISING_ID = "includeAdvertisingId";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ADVERTISING_ID)
  private Boolean includeAdvertisingId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private String project;

  public static final String SERIALIZED_NAME_STREAMING_EXPORT_ENABLED = "streamingExportEnabled";
  @SerializedName(SERIALIZED_NAME_STREAMING_EXPORT_ENABLED)
  private Boolean streamingExportEnabled;

  public GoogleAnalyticsAdminV1alphaBigQueryLink() {
  }

  public GoogleAnalyticsAdminV1alphaBigQueryLink(
     String createTime, 
     String name
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
  }

  /**
   * Output only. Time when the link was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GoogleAnalyticsAdminV1alphaBigQueryLink dailyExportEnabled(Boolean dailyExportEnabled) {
    this.dailyExportEnabled = dailyExportEnabled;
    return this;
  }

  /**
   * If set true, enables daily data export to the linked Google Cloud project.
   * @return dailyExportEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDailyExportEnabled() {
    return dailyExportEnabled;
  }

  public void setDailyExportEnabled(Boolean dailyExportEnabled) {
    this.dailyExportEnabled = dailyExportEnabled;
  }


  public GoogleAnalyticsAdminV1alphaBigQueryLink excludedEvents(List<String> excludedEvents) {
    this.excludedEvents = excludedEvents;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaBigQueryLink addExcludedEventsItem(String excludedEventsItem) {
    if (this.excludedEvents == null) {
      this.excludedEvents = new ArrayList<>();
    }
    this.excludedEvents.add(excludedEventsItem);
    return this;
  }

  /**
   * The list of event names that will be excluded from exports.
   * @return excludedEvents
   */
  @javax.annotation.Nullable
  public List<String> getExcludedEvents() {
    return excludedEvents;
  }

  public void setExcludedEvents(List<String> excludedEvents) {
    this.excludedEvents = excludedEvents;
  }


  public GoogleAnalyticsAdminV1alphaBigQueryLink exportStreams(List<String> exportStreams) {
    this.exportStreams = exportStreams;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaBigQueryLink addExportStreamsItem(String exportStreamsItem) {
    if (this.exportStreams == null) {
      this.exportStreams = new ArrayList<>();
    }
    this.exportStreams.add(exportStreamsItem);
    return this;
  }

  /**
   * The list of streams under the parent property for which data will be exported. Format: properties/{property_id}/dataStreams/{stream_id} Example: [&#39;properties/1000/dataStreams/2000&#39;]
   * @return exportStreams
   */
  @javax.annotation.Nullable
  public List<String> getExportStreams() {
    return exportStreams;
  }

  public void setExportStreams(List<String> exportStreams) {
    this.exportStreams = exportStreams;
  }


  public GoogleAnalyticsAdminV1alphaBigQueryLink freshDailyExportEnabled(Boolean freshDailyExportEnabled) {
    this.freshDailyExportEnabled = freshDailyExportEnabled;
    return this;
  }

  /**
   * If set true, enables fresh daily export to the linked Google Cloud project.
   * @return freshDailyExportEnabled
   */
  @javax.annotation.Nullable
  public Boolean getFreshDailyExportEnabled() {
    return freshDailyExportEnabled;
  }

  public void setFreshDailyExportEnabled(Boolean freshDailyExportEnabled) {
    this.freshDailyExportEnabled = freshDailyExportEnabled;
  }


  public GoogleAnalyticsAdminV1alphaBigQueryLink includeAdvertisingId(Boolean includeAdvertisingId) {
    this.includeAdvertisingId = includeAdvertisingId;
    return this;
  }

  /**
   * If set true, exported data will include advertising identifiers for mobile app streams.
   * @return includeAdvertisingId
   */
  @javax.annotation.Nullable
  public Boolean getIncludeAdvertisingId() {
    return includeAdvertisingId;
  }

  public void setIncludeAdvertisingId(Boolean includeAdvertisingId) {
    this.includeAdvertisingId = includeAdvertisingId;
  }


  /**
   * Output only. Resource name of this BigQuery link. Format: &#39;properties/{property_id}/bigQueryLinks/{bigquery_link_id}&#39; Format: &#39;properties/1234/bigQueryLinks/abc567&#39;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleAnalyticsAdminV1alphaBigQueryLink project(String project) {
    this.project = project;
    return this;
  }

  /**
   * Immutable. The linked Google Cloud project. When creating a BigQueryLink, you may provide this resource name using either a project number or project ID. Once this resource has been created, the returned project will always have a project that contains a project number. Format: &#39;projects/{project number}&#39; Example: &#39;projects/1234&#39;
   * @return project
   */
  @javax.annotation.Nullable
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }


  public GoogleAnalyticsAdminV1alphaBigQueryLink streamingExportEnabled(Boolean streamingExportEnabled) {
    this.streamingExportEnabled = streamingExportEnabled;
    return this;
  }

  /**
   * If set true, enables streaming export to the linked Google Cloud project.
   * @return streamingExportEnabled
   */
  @javax.annotation.Nullable
  public Boolean getStreamingExportEnabled() {
    return streamingExportEnabled;
  }

  public void setStreamingExportEnabled(Boolean streamingExportEnabled) {
    this.streamingExportEnabled = streamingExportEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaBigQueryLink googleAnalyticsAdminV1alphaBigQueryLink = (GoogleAnalyticsAdminV1alphaBigQueryLink) o;
    return Objects.equals(this.createTime, googleAnalyticsAdminV1alphaBigQueryLink.createTime) &&
        Objects.equals(this.dailyExportEnabled, googleAnalyticsAdminV1alphaBigQueryLink.dailyExportEnabled) &&
        Objects.equals(this.excludedEvents, googleAnalyticsAdminV1alphaBigQueryLink.excludedEvents) &&
        Objects.equals(this.exportStreams, googleAnalyticsAdminV1alphaBigQueryLink.exportStreams) &&
        Objects.equals(this.freshDailyExportEnabled, googleAnalyticsAdminV1alphaBigQueryLink.freshDailyExportEnabled) &&
        Objects.equals(this.includeAdvertisingId, googleAnalyticsAdminV1alphaBigQueryLink.includeAdvertisingId) &&
        Objects.equals(this.name, googleAnalyticsAdminV1alphaBigQueryLink.name) &&
        Objects.equals(this.project, googleAnalyticsAdminV1alphaBigQueryLink.project) &&
        Objects.equals(this.streamingExportEnabled, googleAnalyticsAdminV1alphaBigQueryLink.streamingExportEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, dailyExportEnabled, excludedEvents, exportStreams, freshDailyExportEnabled, includeAdvertisingId, name, project, streamingExportEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaBigQueryLink {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    dailyExportEnabled: ").append(toIndentedString(dailyExportEnabled)).append("\n");
    sb.append("    excludedEvents: ").append(toIndentedString(excludedEvents)).append("\n");
    sb.append("    exportStreams: ").append(toIndentedString(exportStreams)).append("\n");
    sb.append("    freshDailyExportEnabled: ").append(toIndentedString(freshDailyExportEnabled)).append("\n");
    sb.append("    includeAdvertisingId: ").append(toIndentedString(includeAdvertisingId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    streamingExportEnabled: ").append(toIndentedString(streamingExportEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("dailyExportEnabled");
    openapiFields.add("excludedEvents");
    openapiFields.add("exportStreams");
    openapiFields.add("freshDailyExportEnabled");
    openapiFields.add("includeAdvertisingId");
    openapiFields.add("name");
    openapiFields.add("project");
    openapiFields.add("streamingExportEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaBigQueryLink
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaBigQueryLink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaBigQueryLink is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaBigQueryLink.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaBigQueryLink.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaBigQueryLink` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedEvents") != null && !jsonObj.get("excludedEvents").isJsonNull() && !jsonObj.get("excludedEvents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedEvents` to be an array in the JSON string but got `%s`", jsonObj.get("excludedEvents").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exportStreams") != null && !jsonObj.get("exportStreams").isJsonNull() && !jsonObj.get("exportStreams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exportStreams` to be an array in the JSON string but got `%s`", jsonObj.get("exportStreams").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) && !jsonObj.get("project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaBigQueryLink.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaBigQueryLink' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaBigQueryLink> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaBigQueryLink.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaBigQueryLink>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaBigQueryLink value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaBigQueryLink read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaBigQueryLink given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaBigQueryLink
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaBigQueryLink
   */
  public static GoogleAnalyticsAdminV1alphaBigQueryLink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaBigQueryLink.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaBigQueryLink to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

