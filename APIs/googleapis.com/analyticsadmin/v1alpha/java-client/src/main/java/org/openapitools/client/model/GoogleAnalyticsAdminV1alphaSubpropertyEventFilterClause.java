/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A clause for defining a filter. A filter may be inclusive (events satisfying the filter clause are included in the subproperty&#39;s data) or exclusive (events satisfying the filter clause are excluded from the subproperty&#39;s data).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause {
  /**
   * Required. The type for the filter clause.
   */
  @JsonAdapter(FilterClauseTypeEnum.Adapter.class)
  public enum FilterClauseTypeEnum {
    FILTER_CLAUSE_TYPE_UNSPECIFIED("FILTER_CLAUSE_TYPE_UNSPECIFIED"),
    
    INCLUDE("INCLUDE"),
    
    EXCLUDE("EXCLUDE");

    private String value;

    FilterClauseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FilterClauseTypeEnum fromValue(String value) {
      for (FilterClauseTypeEnum b : FilterClauseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FilterClauseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FilterClauseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FilterClauseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FilterClauseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FilterClauseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILTER_CLAUSE_TYPE = "filterClauseType";
  @SerializedName(SERIALIZED_NAME_FILTER_CLAUSE_TYPE)
  private FilterClauseTypeEnum filterClauseType;

  public static final String SERIALIZED_NAME_FILTER_EXPRESSION = "filterExpression";
  @SerializedName(SERIALIZED_NAME_FILTER_EXPRESSION)
  private GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression filterExpression;

  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause() {
  }

  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause filterClauseType(FilterClauseTypeEnum filterClauseType) {
    this.filterClauseType = filterClauseType;
    return this;
  }

  /**
   * Required. The type for the filter clause.
   * @return filterClauseType
   */
  @javax.annotation.Nullable
  public FilterClauseTypeEnum getFilterClauseType() {
    return filterClauseType;
  }

  public void setFilterClauseType(FilterClauseTypeEnum filterClauseType) {
    this.filterClauseType = filterClauseType;
  }


  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause filterExpression(GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression filterExpression) {
    this.filterExpression = filterExpression;
    return this;
  }

  /**
   * Get filterExpression
   * @return filterExpression
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression getFilterExpression() {
    return filterExpression;
  }

  public void setFilterExpression(GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression filterExpression) {
    this.filterExpression = filterExpression;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause googleAnalyticsAdminV1alphaSubpropertyEventFilterClause = (GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause) o;
    return Objects.equals(this.filterClauseType, googleAnalyticsAdminV1alphaSubpropertyEventFilterClause.filterClauseType) &&
        Objects.equals(this.filterExpression, googleAnalyticsAdminV1alphaSubpropertyEventFilterClause.filterExpression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterClauseType, filterExpression);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause {\n");
    sb.append("    filterClauseType: ").append(toIndentedString(filterClauseType)).append("\n");
    sb.append("    filterExpression: ").append(toIndentedString(filterExpression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filterClauseType");
    openapiFields.add("filterExpression");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("filterClauseType") != null && !jsonObj.get("filterClauseType").isJsonNull()) && !jsonObj.get("filterClauseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterClauseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filterClauseType").toString()));
      }
      // validate the optional field `filterClauseType`
      if (jsonObj.get("filterClauseType") != null && !jsonObj.get("filterClauseType").isJsonNull()) {
        FilterClauseTypeEnum.validateJsonElement(jsonObj.get("filterClauseType"));
      }
      // validate the optional field `filterExpression`
      if (jsonObj.get("filterExpression") != null && !jsonObj.get("filterExpression").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.validateJsonElement(jsonObj.get("filterExpression"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause
   */
  public static GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

