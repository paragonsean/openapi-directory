/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaSubpropertyEventFilterCondition;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A logical expression of Subproperty event filters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression {
  public static final String SERIALIZED_NAME_FILTER_CONDITION = "filterCondition";
  @SerializedName(SERIALIZED_NAME_FILTER_CONDITION)
  private GoogleAnalyticsAdminV1alphaSubpropertyEventFilterCondition filterCondition;

  public static final String SERIALIZED_NAME_NOT_EXPRESSION = "notExpression";
  @SerializedName(SERIALIZED_NAME_NOT_EXPRESSION)
  private GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression notExpression;

  public static final String SERIALIZED_NAME_OR_GROUP = "orGroup";
  @SerializedName(SERIALIZED_NAME_OR_GROUP)
  private GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList orGroup;

  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression() {
  }

  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression filterCondition(GoogleAnalyticsAdminV1alphaSubpropertyEventFilterCondition filterCondition) {
    this.filterCondition = filterCondition;
    return this;
  }

  /**
   * Get filterCondition
   * @return filterCondition
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilterCondition getFilterCondition() {
    return filterCondition;
  }

  public void setFilterCondition(GoogleAnalyticsAdminV1alphaSubpropertyEventFilterCondition filterCondition) {
    this.filterCondition = filterCondition;
  }


  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression notExpression(GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression notExpression) {
    this.notExpression = notExpression;
    return this;
  }

  /**
   * Get notExpression
   * @return notExpression
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression getNotExpression() {
    return notExpression;
  }

  public void setNotExpression(GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression notExpression) {
    this.notExpression = notExpression;
  }


  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression orGroup(GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList orGroup) {
    this.orGroup = orGroup;
    return this;
  }

  /**
   * Get orGroup
   * @return orGroup
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList getOrGroup() {
    return orGroup;
  }

  public void setOrGroup(GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList orGroup) {
    this.orGroup = orGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression googleAnalyticsAdminV1alphaSubpropertyEventFilterExpression = (GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression) o;
    return Objects.equals(this.filterCondition, googleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.filterCondition) &&
        Objects.equals(this.notExpression, googleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.notExpression) &&
        Objects.equals(this.orGroup, googleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.orGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterCondition, notExpression, orGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression {\n");
    sb.append("    filterCondition: ").append(toIndentedString(filterCondition)).append("\n");
    sb.append("    notExpression: ").append(toIndentedString(notExpression)).append("\n");
    sb.append("    orGroup: ").append(toIndentedString(orGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filterCondition");
    openapiFields.add("notExpression");
    openapiFields.add("orGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `filterCondition`
      if (jsonObj.get("filterCondition") != null && !jsonObj.get("filterCondition").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaSubpropertyEventFilterCondition.validateJsonElement(jsonObj.get("filterCondition"));
      }
      // validate the optional field `notExpression`
      if (jsonObj.get("notExpression") != null && !jsonObj.get("notExpression").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.validateJsonElement(jsonObj.get("notExpression"));
      }
      // validate the optional field `orGroup`
      if (jsonObj.get("orGroup") != null && !jsonObj.get("orGroup").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpressionList.validateJsonElement(jsonObj.get("orGroup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression
   */
  public static GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaSubpropertyEventFilterExpression to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

