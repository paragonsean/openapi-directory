/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaProperty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for CreateRollupProperty RPC.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest {
  public static final String SERIALIZED_NAME_ROLLUP_PROPERTY = "rollupProperty";
  @SerializedName(SERIALIZED_NAME_ROLLUP_PROPERTY)
  private GoogleAnalyticsAdminV1alphaProperty rollupProperty;

  public static final String SERIALIZED_NAME_SOURCE_PROPERTIES = "sourceProperties";
  @SerializedName(SERIALIZED_NAME_SOURCE_PROPERTIES)
  private List<String> sourceProperties = new ArrayList<>();

  public GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest() {
  }

  public GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest rollupProperty(GoogleAnalyticsAdminV1alphaProperty rollupProperty) {
    this.rollupProperty = rollupProperty;
    return this;
  }

  /**
   * Get rollupProperty
   * @return rollupProperty
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaProperty getRollupProperty() {
    return rollupProperty;
  }

  public void setRollupProperty(GoogleAnalyticsAdminV1alphaProperty rollupProperty) {
    this.rollupProperty = rollupProperty;
  }


  public GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest sourceProperties(List<String> sourceProperties) {
    this.sourceProperties = sourceProperties;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest addSourcePropertiesItem(String sourcePropertiesItem) {
    if (this.sourceProperties == null) {
      this.sourceProperties = new ArrayList<>();
    }
    this.sourceProperties.add(sourcePropertiesItem);
    return this;
  }

  /**
   * Optional. The resource names of properties that will be sources to the created roll-up property.
   * @return sourceProperties
   */
  @javax.annotation.Nullable
  public List<String> getSourceProperties() {
    return sourceProperties;
  }

  public void setSourceProperties(List<String> sourceProperties) {
    this.sourceProperties = sourceProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest googleAnalyticsAdminV1alphaCreateRollupPropertyRequest = (GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest) o;
    return Objects.equals(this.rollupProperty, googleAnalyticsAdminV1alphaCreateRollupPropertyRequest.rollupProperty) &&
        Objects.equals(this.sourceProperties, googleAnalyticsAdminV1alphaCreateRollupPropertyRequest.sourceProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rollupProperty, sourceProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest {\n");
    sb.append("    rollupProperty: ").append(toIndentedString(rollupProperty)).append("\n");
    sb.append("    sourceProperties: ").append(toIndentedString(sourceProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rollupProperty");
    openapiFields.add("sourceProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `rollupProperty`
      if (jsonObj.get("rollupProperty") != null && !jsonObj.get("rollupProperty").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaProperty.validateJsonElement(jsonObj.get("rollupProperty"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceProperties") != null && !jsonObj.get("sourceProperties").isJsonNull() && !jsonObj.get("sourceProperties").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceProperties` to be an array in the JSON string but got `%s`", jsonObj.get("sourceProperties").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest
   */
  public static GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaCreateRollupPropertyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

