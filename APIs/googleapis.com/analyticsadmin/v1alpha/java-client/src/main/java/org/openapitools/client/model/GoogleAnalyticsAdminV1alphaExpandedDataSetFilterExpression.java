/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaExpandedDataSetFilter;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpressionList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A logical expression of EnhancedDataSet dimension filters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression {
  public static final String SERIALIZED_NAME_AND_GROUP = "andGroup";
  @SerializedName(SERIALIZED_NAME_AND_GROUP)
  private GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpressionList andGroup;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private GoogleAnalyticsAdminV1alphaExpandedDataSetFilter filter;

  public static final String SERIALIZED_NAME_NOT_EXPRESSION = "notExpression";
  @SerializedName(SERIALIZED_NAME_NOT_EXPRESSION)
  private GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression notExpression;

  public GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression() {
  }

  public GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression andGroup(GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpressionList andGroup) {
    this.andGroup = andGroup;
    return this;
  }

  /**
   * Get andGroup
   * @return andGroup
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpressionList getAndGroup() {
    return andGroup;
  }

  public void setAndGroup(GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpressionList andGroup) {
    this.andGroup = andGroup;
  }


  public GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression filter(GoogleAnalyticsAdminV1alphaExpandedDataSetFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaExpandedDataSetFilter getFilter() {
    return filter;
  }

  public void setFilter(GoogleAnalyticsAdminV1alphaExpandedDataSetFilter filter) {
    this.filter = filter;
  }


  public GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression notExpression(GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression notExpression) {
    this.notExpression = notExpression;
    return this;
  }

  /**
   * Get notExpression
   * @return notExpression
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression getNotExpression() {
    return notExpression;
  }

  public void setNotExpression(GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression notExpression) {
    this.notExpression = notExpression;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression googleAnalyticsAdminV1alphaExpandedDataSetFilterExpression = (GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression) o;
    return Objects.equals(this.andGroup, googleAnalyticsAdminV1alphaExpandedDataSetFilterExpression.andGroup) &&
        Objects.equals(this.filter, googleAnalyticsAdminV1alphaExpandedDataSetFilterExpression.filter) &&
        Objects.equals(this.notExpression, googleAnalyticsAdminV1alphaExpandedDataSetFilterExpression.notExpression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(andGroup, filter, notExpression);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression {\n");
    sb.append("    andGroup: ").append(toIndentedString(andGroup)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    notExpression: ").append(toIndentedString(notExpression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("andGroup");
    openapiFields.add("filter");
    openapiFields.add("notExpression");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `andGroup`
      if (jsonObj.get("andGroup") != null && !jsonObj.get("andGroup").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpressionList.validateJsonElement(jsonObj.get("andGroup"));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaExpandedDataSetFilter.validateJsonElement(jsonObj.get("filter"));
      }
      // validate the optional field `notExpression`
      if (jsonObj.get("notExpression") != null && !jsonObj.get("notExpression").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression.validateJsonElement(jsonObj.get("notExpression"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression
   */
  public static GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

