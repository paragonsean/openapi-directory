/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaProperty;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaRollupPropertySourceLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for CreateRollupProperty RPC.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse {
  public static final String SERIALIZED_NAME_ROLLUP_PROPERTY = "rollupProperty";
  @SerializedName(SERIALIZED_NAME_ROLLUP_PROPERTY)
  private GoogleAnalyticsAdminV1alphaProperty rollupProperty;

  public static final String SERIALIZED_NAME_ROLLUP_PROPERTY_SOURCE_LINKS = "rollupPropertySourceLinks";
  @SerializedName(SERIALIZED_NAME_ROLLUP_PROPERTY_SOURCE_LINKS)
  private List<GoogleAnalyticsAdminV1alphaRollupPropertySourceLink> rollupPropertySourceLinks = new ArrayList<>();

  public GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse() {
  }

  public GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse rollupProperty(GoogleAnalyticsAdminV1alphaProperty rollupProperty) {
    this.rollupProperty = rollupProperty;
    return this;
  }

  /**
   * Get rollupProperty
   * @return rollupProperty
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaProperty getRollupProperty() {
    return rollupProperty;
  }

  public void setRollupProperty(GoogleAnalyticsAdminV1alphaProperty rollupProperty) {
    this.rollupProperty = rollupProperty;
  }


  public GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse rollupPropertySourceLinks(List<GoogleAnalyticsAdminV1alphaRollupPropertySourceLink> rollupPropertySourceLinks) {
    this.rollupPropertySourceLinks = rollupPropertySourceLinks;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse addRollupPropertySourceLinksItem(GoogleAnalyticsAdminV1alphaRollupPropertySourceLink rollupPropertySourceLinksItem) {
    if (this.rollupPropertySourceLinks == null) {
      this.rollupPropertySourceLinks = new ArrayList<>();
    }
    this.rollupPropertySourceLinks.add(rollupPropertySourceLinksItem);
    return this;
  }

  /**
   * The created roll-up property source links.
   * @return rollupPropertySourceLinks
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1alphaRollupPropertySourceLink> getRollupPropertySourceLinks() {
    return rollupPropertySourceLinks;
  }

  public void setRollupPropertySourceLinks(List<GoogleAnalyticsAdminV1alphaRollupPropertySourceLink> rollupPropertySourceLinks) {
    this.rollupPropertySourceLinks = rollupPropertySourceLinks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse googleAnalyticsAdminV1alphaCreateRollupPropertyResponse = (GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse) o;
    return Objects.equals(this.rollupProperty, googleAnalyticsAdminV1alphaCreateRollupPropertyResponse.rollupProperty) &&
        Objects.equals(this.rollupPropertySourceLinks, googleAnalyticsAdminV1alphaCreateRollupPropertyResponse.rollupPropertySourceLinks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rollupProperty, rollupPropertySourceLinks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse {\n");
    sb.append("    rollupProperty: ").append(toIndentedString(rollupProperty)).append("\n");
    sb.append("    rollupPropertySourceLinks: ").append(toIndentedString(rollupPropertySourceLinks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rollupProperty");
    openapiFields.add("rollupPropertySourceLinks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `rollupProperty`
      if (jsonObj.get("rollupProperty") != null && !jsonObj.get("rollupProperty").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaProperty.validateJsonElement(jsonObj.get("rollupProperty"));
      }
      if (jsonObj.get("rollupPropertySourceLinks") != null && !jsonObj.get("rollupPropertySourceLinks").isJsonNull()) {
        JsonArray jsonArrayrollupPropertySourceLinks = jsonObj.getAsJsonArray("rollupPropertySourceLinks");
        if (jsonArrayrollupPropertySourceLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rollupPropertySourceLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rollupPropertySourceLinks` to be an array in the JSON string but got `%s`", jsonObj.get("rollupPropertySourceLinks").toString()));
          }

          // validate the optional field `rollupPropertySourceLinks` (array)
          for (int i = 0; i < jsonArrayrollupPropertySourceLinks.size(); i++) {
            GoogleAnalyticsAdminV1alphaRollupPropertySourceLink.validateJsonElement(jsonArrayrollupPropertySourceLinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse
   */
  public static GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaCreateRollupPropertyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

