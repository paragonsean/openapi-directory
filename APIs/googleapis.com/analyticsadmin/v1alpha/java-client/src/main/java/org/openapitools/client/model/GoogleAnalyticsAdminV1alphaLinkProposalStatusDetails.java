/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Status information for a link proposal.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails {
  /**
   * Output only. The source of this proposal.
   */
  @JsonAdapter(LinkProposalInitiatingProductEnum.Adapter.class)
  public enum LinkProposalInitiatingProductEnum {
    LINK_PROPOSAL_INITIATING_PRODUCT_UNSPECIFIED("LINK_PROPOSAL_INITIATING_PRODUCT_UNSPECIFIED"),
    
    GOOGLE_ANALYTICS("GOOGLE_ANALYTICS"),
    
    LINKED_PRODUCT("LINKED_PRODUCT");

    private String value;

    LinkProposalInitiatingProductEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LinkProposalInitiatingProductEnum fromValue(String value) {
      for (LinkProposalInitiatingProductEnum b : LinkProposalInitiatingProductEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LinkProposalInitiatingProductEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinkProposalInitiatingProductEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinkProposalInitiatingProductEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LinkProposalInitiatingProductEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LinkProposalInitiatingProductEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINK_PROPOSAL_INITIATING_PRODUCT = "linkProposalInitiatingProduct";
  @SerializedName(SERIALIZED_NAME_LINK_PROPOSAL_INITIATING_PRODUCT)
  private LinkProposalInitiatingProductEnum linkProposalInitiatingProduct;

  /**
   * Output only. The state of this proposal.
   */
  @JsonAdapter(LinkProposalStateEnum.Adapter.class)
  public enum LinkProposalStateEnum {
    LINK_PROPOSAL_STATE_UNSPECIFIED("LINK_PROPOSAL_STATE_UNSPECIFIED"),
    
    AWAITING_REVIEW_FROM_GOOGLE_ANALYTICS("AWAITING_REVIEW_FROM_GOOGLE_ANALYTICS"),
    
    AWAITING_REVIEW_FROM_LINKED_PRODUCT("AWAITING_REVIEW_FROM_LINKED_PRODUCT"),
    
    WITHDRAWN("WITHDRAWN"),
    
    DECLINED("DECLINED"),
    
    EXPIRED("EXPIRED"),
    
    OBSOLETE("OBSOLETE");

    private String value;

    LinkProposalStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LinkProposalStateEnum fromValue(String value) {
      for (LinkProposalStateEnum b : LinkProposalStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LinkProposalStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinkProposalStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinkProposalStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LinkProposalStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LinkProposalStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINK_PROPOSAL_STATE = "linkProposalState";
  @SerializedName(SERIALIZED_NAME_LINK_PROPOSAL_STATE)
  private LinkProposalStateEnum linkProposalState;

  public static final String SERIALIZED_NAME_REQUESTOR_EMAIL = "requestorEmail";
  @SerializedName(SERIALIZED_NAME_REQUESTOR_EMAIL)
  private String requestorEmail;

  public GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails() {
  }

  public GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails(
     LinkProposalInitiatingProductEnum linkProposalInitiatingProduct, 
     LinkProposalStateEnum linkProposalState, 
     String requestorEmail
  ) {
    this();
    this.linkProposalInitiatingProduct = linkProposalInitiatingProduct;
    this.linkProposalState = linkProposalState;
    this.requestorEmail = requestorEmail;
  }

  /**
   * Output only. The source of this proposal.
   * @return linkProposalInitiatingProduct
   */
  @javax.annotation.Nullable
  public LinkProposalInitiatingProductEnum getLinkProposalInitiatingProduct() {
    return linkProposalInitiatingProduct;
  }



  /**
   * Output only. The state of this proposal.
   * @return linkProposalState
   */
  @javax.annotation.Nullable
  public LinkProposalStateEnum getLinkProposalState() {
    return linkProposalState;
  }



  /**
   * Output only. The email address of the user that proposed this linkage.
   * @return requestorEmail
   */
  @javax.annotation.Nullable
  public String getRequestorEmail() {
    return requestorEmail;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails googleAnalyticsAdminV1alphaLinkProposalStatusDetails = (GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails) o;
    return Objects.equals(this.linkProposalInitiatingProduct, googleAnalyticsAdminV1alphaLinkProposalStatusDetails.linkProposalInitiatingProduct) &&
        Objects.equals(this.linkProposalState, googleAnalyticsAdminV1alphaLinkProposalStatusDetails.linkProposalState) &&
        Objects.equals(this.requestorEmail, googleAnalyticsAdminV1alphaLinkProposalStatusDetails.requestorEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(linkProposalInitiatingProduct, linkProposalState, requestorEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails {\n");
    sb.append("    linkProposalInitiatingProduct: ").append(toIndentedString(linkProposalInitiatingProduct)).append("\n");
    sb.append("    linkProposalState: ").append(toIndentedString(linkProposalState)).append("\n");
    sb.append("    requestorEmail: ").append(toIndentedString(requestorEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("linkProposalInitiatingProduct");
    openapiFields.add("linkProposalState");
    openapiFields.add("requestorEmail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("linkProposalInitiatingProduct") != null && !jsonObj.get("linkProposalInitiatingProduct").isJsonNull()) && !jsonObj.get("linkProposalInitiatingProduct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkProposalInitiatingProduct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkProposalInitiatingProduct").toString()));
      }
      // validate the optional field `linkProposalInitiatingProduct`
      if (jsonObj.get("linkProposalInitiatingProduct") != null && !jsonObj.get("linkProposalInitiatingProduct").isJsonNull()) {
        LinkProposalInitiatingProductEnum.validateJsonElement(jsonObj.get("linkProposalInitiatingProduct"));
      }
      if ((jsonObj.get("linkProposalState") != null && !jsonObj.get("linkProposalState").isJsonNull()) && !jsonObj.get("linkProposalState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkProposalState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkProposalState").toString()));
      }
      // validate the optional field `linkProposalState`
      if (jsonObj.get("linkProposalState") != null && !jsonObj.get("linkProposalState").isJsonNull()) {
        LinkProposalStateEnum.validateJsonElement(jsonObj.get("linkProposalState"));
      }
      if ((jsonObj.get("requestorEmail") != null && !jsonObj.get("requestorEmail").isJsonNull()) && !jsonObj.get("requestorEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestorEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestorEmail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails
   */
  public static GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

