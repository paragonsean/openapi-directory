/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines filters that must occur in a specific order for the user to be a member of the Audience.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaAudienceSequenceFilter {
  /**
   * Required. Immutable. Specifies the scope for this filter.
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    UNSPECIFIED("AUDIENCE_FILTER_SCOPE_UNSPECIFIED"),
    
    WITHIN_SAME_EVENT("AUDIENCE_FILTER_SCOPE_WITHIN_SAME_EVENT"),
    
    WITHIN_SAME_SESSION("AUDIENCE_FILTER_SCOPE_WITHIN_SAME_SESSION"),
    
    ACROSS_ALL_SESSIONS("AUDIENCE_FILTER_SCOPE_ACROSS_ALL_SESSIONS");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private ScopeEnum scope;

  public static final String SERIALIZED_NAME_SEQUENCE_MAXIMUM_DURATION = "sequenceMaximumDuration";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_MAXIMUM_DURATION)
  private String sequenceMaximumDuration;

  public static final String SERIALIZED_NAME_SEQUENCE_STEPS = "sequenceSteps";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_STEPS)
  private List<GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep> sequenceSteps = new ArrayList<>();

  public GoogleAnalyticsAdminV1alphaAudienceSequenceFilter() {
  }

  public GoogleAnalyticsAdminV1alphaAudienceSequenceFilter scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Required. Immutable. Specifies the scope for this filter.
   * @return scope
   */
  @javax.annotation.Nullable
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }


  public GoogleAnalyticsAdminV1alphaAudienceSequenceFilter sequenceMaximumDuration(String sequenceMaximumDuration) {
    this.sequenceMaximumDuration = sequenceMaximumDuration;
    return this;
  }

  /**
   * Optional. Defines the time period in which the whole sequence must occur.
   * @return sequenceMaximumDuration
   */
  @javax.annotation.Nullable
  public String getSequenceMaximumDuration() {
    return sequenceMaximumDuration;
  }

  public void setSequenceMaximumDuration(String sequenceMaximumDuration) {
    this.sequenceMaximumDuration = sequenceMaximumDuration;
  }


  public GoogleAnalyticsAdminV1alphaAudienceSequenceFilter sequenceSteps(List<GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep> sequenceSteps) {
    this.sequenceSteps = sequenceSteps;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaAudienceSequenceFilter addSequenceStepsItem(GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep sequenceStepsItem) {
    if (this.sequenceSteps == null) {
      this.sequenceSteps = new ArrayList<>();
    }
    this.sequenceSteps.add(sequenceStepsItem);
    return this;
  }

  /**
   * Required. An ordered sequence of steps. A user must complete each step in order to join the sequence filter.
   * @return sequenceSteps
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep> getSequenceSteps() {
    return sequenceSteps;
  }

  public void setSequenceSteps(List<GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep> sequenceSteps) {
    this.sequenceSteps = sequenceSteps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaAudienceSequenceFilter googleAnalyticsAdminV1alphaAudienceSequenceFilter = (GoogleAnalyticsAdminV1alphaAudienceSequenceFilter) o;
    return Objects.equals(this.scope, googleAnalyticsAdminV1alphaAudienceSequenceFilter.scope) &&
        Objects.equals(this.sequenceMaximumDuration, googleAnalyticsAdminV1alphaAudienceSequenceFilter.sequenceMaximumDuration) &&
        Objects.equals(this.sequenceSteps, googleAnalyticsAdminV1alphaAudienceSequenceFilter.sequenceSteps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scope, sequenceMaximumDuration, sequenceSteps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaAudienceSequenceFilter {\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    sequenceMaximumDuration: ").append(toIndentedString(sequenceMaximumDuration)).append("\n");
    sb.append("    sequenceSteps: ").append(toIndentedString(sequenceSteps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scope");
    openapiFields.add("sequenceMaximumDuration");
    openapiFields.add("sequenceSteps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaAudienceSequenceFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaAudienceSequenceFilter is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaAudienceSequenceFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      // validate the optional field `scope`
      if (jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) {
        ScopeEnum.validateJsonElement(jsonObj.get("scope"));
      }
      if ((jsonObj.get("sequenceMaximumDuration") != null && !jsonObj.get("sequenceMaximumDuration").isJsonNull()) && !jsonObj.get("sequenceMaximumDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sequenceMaximumDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sequenceMaximumDuration").toString()));
      }
      if (jsonObj.get("sequenceSteps") != null && !jsonObj.get("sequenceSteps").isJsonNull()) {
        JsonArray jsonArraysequenceSteps = jsonObj.getAsJsonArray("sequenceSteps");
        if (jsonArraysequenceSteps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sequenceSteps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sequenceSteps` to be an array in the JSON string but got `%s`", jsonObj.get("sequenceSteps").toString()));
          }

          // validate the optional field `sequenceSteps` (array)
          for (int i = 0; i < jsonArraysequenceSteps.size(); i++) {
            GoogleAnalyticsAdminV1alphaAudienceSequenceFilterAudienceSequenceStep.validateJsonElement(jsonArraysequenceSteps.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaAudienceSequenceFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaAudienceSequenceFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaAudienceSequenceFilter>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaAudienceSequenceFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaAudienceSequenceFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaAudienceSequenceFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaAudienceSequenceFilter
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaAudienceSequenceFilter
   */
  public static GoogleAnalyticsAdminV1alphaAudienceSequenceFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaAudienceSequenceFilter.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaAudienceSequenceFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

