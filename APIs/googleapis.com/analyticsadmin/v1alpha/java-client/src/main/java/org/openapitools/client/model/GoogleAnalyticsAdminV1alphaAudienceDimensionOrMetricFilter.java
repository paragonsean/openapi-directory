/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterBetweenFilter;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterNumericFilter;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterStringFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A specific filter for a single dimension or metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter {
  public static final String SERIALIZED_NAME_AT_ANY_POINT_IN_TIME = "atAnyPointInTime";
  @SerializedName(SERIALIZED_NAME_AT_ANY_POINT_IN_TIME)
  private Boolean atAnyPointInTime;

  public static final String SERIALIZED_NAME_BETWEEN_FILTER = "betweenFilter";
  @SerializedName(SERIALIZED_NAME_BETWEEN_FILTER)
  private GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterBetweenFilter betweenFilter;

  public static final String SERIALIZED_NAME_FIELD_NAME = "fieldName";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  public static final String SERIALIZED_NAME_IN_ANY_N_DAY_PERIOD = "inAnyNDayPeriod";
  @SerializedName(SERIALIZED_NAME_IN_ANY_N_DAY_PERIOD)
  private Integer inAnyNDayPeriod;

  public static final String SERIALIZED_NAME_IN_LIST_FILTER = "inListFilter";
  @SerializedName(SERIALIZED_NAME_IN_LIST_FILTER)
  private GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter inListFilter;

  public static final String SERIALIZED_NAME_NUMERIC_FILTER = "numericFilter";
  @SerializedName(SERIALIZED_NAME_NUMERIC_FILTER)
  private GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterNumericFilter numericFilter;

  public static final String SERIALIZED_NAME_STRING_FILTER = "stringFilter";
  @SerializedName(SERIALIZED_NAME_STRING_FILTER)
  private GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterStringFilter stringFilter;

  public GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter() {
  }

  public GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter atAnyPointInTime(Boolean atAnyPointInTime) {
    this.atAnyPointInTime = atAnyPointInTime;
    return this;
  }

  /**
   * Optional. Indicates whether this filter needs dynamic evaluation or not. If set to true, users join the Audience if they ever met the condition (static evaluation). If unset or set to false, user evaluation for an Audience is dynamic; users are added to an Audience when they meet the conditions and then removed when they no longer meet them. This can only be set when Audience scope is ACROSS_ALL_SESSIONS.
   * @return atAnyPointInTime
   */
  @javax.annotation.Nullable
  public Boolean getAtAnyPointInTime() {
    return atAnyPointInTime;
  }

  public void setAtAnyPointInTime(Boolean atAnyPointInTime) {
    this.atAnyPointInTime = atAnyPointInTime;
  }


  public GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter betweenFilter(GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterBetweenFilter betweenFilter) {
    this.betweenFilter = betweenFilter;
    return this;
  }

  /**
   * Get betweenFilter
   * @return betweenFilter
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterBetweenFilter getBetweenFilter() {
    return betweenFilter;
  }

  public void setBetweenFilter(GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterBetweenFilter betweenFilter) {
    this.betweenFilter = betweenFilter;
  }


  public GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  /**
   * Required. Immutable. The dimension name or metric name to filter. If the field name refers to a custom dimension or metric, a scope prefix will be added to the front of the custom dimensions or metric name. For more on scope prefixes or custom dimensions/metrics, reference the [Google Analytics Data API documentation] (https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#custom_dimensions).
   * @return fieldName
   */
  @javax.annotation.Nullable
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }


  public GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter inAnyNDayPeriod(Integer inAnyNDayPeriod) {
    this.inAnyNDayPeriod = inAnyNDayPeriod;
    return this;
  }

  /**
   * Optional. If set, specifies the time window for which to evaluate data in number of days. If not set, then audience data is evaluated against lifetime data (For example, infinite time window). For example, if set to 1 day, only the current day&#39;s data is evaluated. The reference point is the current day when at_any_point_in_time is unset or false. It can only be set when Audience scope is ACROSS_ALL_SESSIONS and cannot be greater than 60 days.
   * @return inAnyNDayPeriod
   */
  @javax.annotation.Nullable
  public Integer getInAnyNDayPeriod() {
    return inAnyNDayPeriod;
  }

  public void setInAnyNDayPeriod(Integer inAnyNDayPeriod) {
    this.inAnyNDayPeriod = inAnyNDayPeriod;
  }


  public GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter inListFilter(GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter inListFilter) {
    this.inListFilter = inListFilter;
    return this;
  }

  /**
   * Get inListFilter
   * @return inListFilter
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter getInListFilter() {
    return inListFilter;
  }

  public void setInListFilter(GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter inListFilter) {
    this.inListFilter = inListFilter;
  }


  public GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter numericFilter(GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterNumericFilter numericFilter) {
    this.numericFilter = numericFilter;
    return this;
  }

  /**
   * Get numericFilter
   * @return numericFilter
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterNumericFilter getNumericFilter() {
    return numericFilter;
  }

  public void setNumericFilter(GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterNumericFilter numericFilter) {
    this.numericFilter = numericFilter;
  }


  public GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter stringFilter(GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterStringFilter stringFilter) {
    this.stringFilter = stringFilter;
    return this;
  }

  /**
   * Get stringFilter
   * @return stringFilter
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterStringFilter getStringFilter() {
    return stringFilter;
  }

  public void setStringFilter(GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterStringFilter stringFilter) {
    this.stringFilter = stringFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter googleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter = (GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter) o;
    return Objects.equals(this.atAnyPointInTime, googleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter.atAnyPointInTime) &&
        Objects.equals(this.betweenFilter, googleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter.betweenFilter) &&
        Objects.equals(this.fieldName, googleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter.fieldName) &&
        Objects.equals(this.inAnyNDayPeriod, googleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter.inAnyNDayPeriod) &&
        Objects.equals(this.inListFilter, googleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter.inListFilter) &&
        Objects.equals(this.numericFilter, googleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter.numericFilter) &&
        Objects.equals(this.stringFilter, googleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter.stringFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atAnyPointInTime, betweenFilter, fieldName, inAnyNDayPeriod, inListFilter, numericFilter, stringFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter {\n");
    sb.append("    atAnyPointInTime: ").append(toIndentedString(atAnyPointInTime)).append("\n");
    sb.append("    betweenFilter: ").append(toIndentedString(betweenFilter)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    inAnyNDayPeriod: ").append(toIndentedString(inAnyNDayPeriod)).append("\n");
    sb.append("    inListFilter: ").append(toIndentedString(inListFilter)).append("\n");
    sb.append("    numericFilter: ").append(toIndentedString(numericFilter)).append("\n");
    sb.append("    stringFilter: ").append(toIndentedString(stringFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("atAnyPointInTime");
    openapiFields.add("betweenFilter");
    openapiFields.add("fieldName");
    openapiFields.add("inAnyNDayPeriod");
    openapiFields.add("inListFilter");
    openapiFields.add("numericFilter");
    openapiFields.add("stringFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `betweenFilter`
      if (jsonObj.get("betweenFilter") != null && !jsonObj.get("betweenFilter").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterBetweenFilter.validateJsonElement(jsonObj.get("betweenFilter"));
      }
      if ((jsonObj.get("fieldName") != null && !jsonObj.get("fieldName").isJsonNull()) && !jsonObj.get("fieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldName").toString()));
      }
      // validate the optional field `inListFilter`
      if (jsonObj.get("inListFilter") != null && !jsonObj.get("inListFilter").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterInListFilter.validateJsonElement(jsonObj.get("inListFilter"));
      }
      // validate the optional field `numericFilter`
      if (jsonObj.get("numericFilter") != null && !jsonObj.get("numericFilter").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterNumericFilter.validateJsonElement(jsonObj.get("numericFilter"));
      }
      // validate the optional field `stringFilter`
      if (jsonObj.get("stringFilter") != null && !jsonObj.get("stringFilter").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilterStringFilter.validateJsonElement(jsonObj.get("stringFilter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter
   */
  public static GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

