/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAccessDimensionHeader;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAccessMetricHeader;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAccessQuota;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaAccessRow;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The customized Data Access Record Report response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaRunAccessReportResponse {
  public static final String SERIALIZED_NAME_DIMENSION_HEADERS = "dimensionHeaders";
  @SerializedName(SERIALIZED_NAME_DIMENSION_HEADERS)
  private List<GoogleAnalyticsAdminV1alphaAccessDimensionHeader> dimensionHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRIC_HEADERS = "metricHeaders";
  @SerializedName(SERIALIZED_NAME_METRIC_HEADERS)
  private List<GoogleAnalyticsAdminV1alphaAccessMetricHeader> metricHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUOTA = "quota";
  @SerializedName(SERIALIZED_NAME_QUOTA)
  private GoogleAnalyticsAdminV1alphaAccessQuota quota;

  public static final String SERIALIZED_NAME_ROW_COUNT = "rowCount";
  @SerializedName(SERIALIZED_NAME_ROW_COUNT)
  private Integer rowCount;

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<GoogleAnalyticsAdminV1alphaAccessRow> rows = new ArrayList<>();

  public GoogleAnalyticsAdminV1alphaRunAccessReportResponse() {
  }

  public GoogleAnalyticsAdminV1alphaRunAccessReportResponse dimensionHeaders(List<GoogleAnalyticsAdminV1alphaAccessDimensionHeader> dimensionHeaders) {
    this.dimensionHeaders = dimensionHeaders;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaRunAccessReportResponse addDimensionHeadersItem(GoogleAnalyticsAdminV1alphaAccessDimensionHeader dimensionHeadersItem) {
    if (this.dimensionHeaders == null) {
      this.dimensionHeaders = new ArrayList<>();
    }
    this.dimensionHeaders.add(dimensionHeadersItem);
    return this;
  }

  /**
   * The header for a column in the report that corresponds to a specific dimension. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows.
   * @return dimensionHeaders
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1alphaAccessDimensionHeader> getDimensionHeaders() {
    return dimensionHeaders;
  }

  public void setDimensionHeaders(List<GoogleAnalyticsAdminV1alphaAccessDimensionHeader> dimensionHeaders) {
    this.dimensionHeaders = dimensionHeaders;
  }


  public GoogleAnalyticsAdminV1alphaRunAccessReportResponse metricHeaders(List<GoogleAnalyticsAdminV1alphaAccessMetricHeader> metricHeaders) {
    this.metricHeaders = metricHeaders;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaRunAccessReportResponse addMetricHeadersItem(GoogleAnalyticsAdminV1alphaAccessMetricHeader metricHeadersItem) {
    if (this.metricHeaders == null) {
      this.metricHeaders = new ArrayList<>();
    }
    this.metricHeaders.add(metricHeadersItem);
    return this;
  }

  /**
   * The header for a column in the report that corresponds to a specific metric. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows.
   * @return metricHeaders
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1alphaAccessMetricHeader> getMetricHeaders() {
    return metricHeaders;
  }

  public void setMetricHeaders(List<GoogleAnalyticsAdminV1alphaAccessMetricHeader> metricHeaders) {
    this.metricHeaders = metricHeaders;
  }


  public GoogleAnalyticsAdminV1alphaRunAccessReportResponse quota(GoogleAnalyticsAdminV1alphaAccessQuota quota) {
    this.quota = quota;
    return this;
  }

  /**
   * Get quota
   * @return quota
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaAccessQuota getQuota() {
    return quota;
  }

  public void setQuota(GoogleAnalyticsAdminV1alphaAccessQuota quota) {
    this.quota = quota;
  }


  public GoogleAnalyticsAdminV1alphaRunAccessReportResponse rowCount(Integer rowCount) {
    this.rowCount = rowCount;
    return this;
  }

  /**
   * The total number of rows in the query result. &#x60;rowCount&#x60; is independent of the number of rows returned in the response, the &#x60;limit&#x60; request parameter, and the &#x60;offset&#x60; request parameter. For example if a query returns 175 rows and includes &#x60;limit&#x60; of 50 in the API request, the response will contain &#x60;rowCount&#x60; of 175 but only 50 rows. To learn more about this pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   * @return rowCount
   */
  @javax.annotation.Nullable
  public Integer getRowCount() {
    return rowCount;
  }

  public void setRowCount(Integer rowCount) {
    this.rowCount = rowCount;
  }


  public GoogleAnalyticsAdminV1alphaRunAccessReportResponse rows(List<GoogleAnalyticsAdminV1alphaAccessRow> rows) {
    this.rows = rows;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaRunAccessReportResponse addRowsItem(GoogleAnalyticsAdminV1alphaAccessRow rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * Rows of dimension value combinations and metric values in the report.
   * @return rows
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1alphaAccessRow> getRows() {
    return rows;
  }

  public void setRows(List<GoogleAnalyticsAdminV1alphaAccessRow> rows) {
    this.rows = rows;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaRunAccessReportResponse googleAnalyticsAdminV1alphaRunAccessReportResponse = (GoogleAnalyticsAdminV1alphaRunAccessReportResponse) o;
    return Objects.equals(this.dimensionHeaders, googleAnalyticsAdminV1alphaRunAccessReportResponse.dimensionHeaders) &&
        Objects.equals(this.metricHeaders, googleAnalyticsAdminV1alphaRunAccessReportResponse.metricHeaders) &&
        Objects.equals(this.quota, googleAnalyticsAdminV1alphaRunAccessReportResponse.quota) &&
        Objects.equals(this.rowCount, googleAnalyticsAdminV1alphaRunAccessReportResponse.rowCount) &&
        Objects.equals(this.rows, googleAnalyticsAdminV1alphaRunAccessReportResponse.rows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensionHeaders, metricHeaders, quota, rowCount, rows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaRunAccessReportResponse {\n");
    sb.append("    dimensionHeaders: ").append(toIndentedString(dimensionHeaders)).append("\n");
    sb.append("    metricHeaders: ").append(toIndentedString(metricHeaders)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    rowCount: ").append(toIndentedString(rowCount)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimensionHeaders");
    openapiFields.add("metricHeaders");
    openapiFields.add("quota");
    openapiFields.add("rowCount");
    openapiFields.add("rows");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaRunAccessReportResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaRunAccessReportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaRunAccessReportResponse is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaRunAccessReportResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaRunAccessReportResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaRunAccessReportResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dimensionHeaders") != null && !jsonObj.get("dimensionHeaders").isJsonNull()) {
        JsonArray jsonArraydimensionHeaders = jsonObj.getAsJsonArray("dimensionHeaders");
        if (jsonArraydimensionHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensionHeaders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensionHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("dimensionHeaders").toString()));
          }

          // validate the optional field `dimensionHeaders` (array)
          for (int i = 0; i < jsonArraydimensionHeaders.size(); i++) {
            GoogleAnalyticsAdminV1alphaAccessDimensionHeader.validateJsonElement(jsonArraydimensionHeaders.get(i));
          };
        }
      }
      if (jsonObj.get("metricHeaders") != null && !jsonObj.get("metricHeaders").isJsonNull()) {
        JsonArray jsonArraymetricHeaders = jsonObj.getAsJsonArray("metricHeaders");
        if (jsonArraymetricHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metricHeaders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metricHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("metricHeaders").toString()));
          }

          // validate the optional field `metricHeaders` (array)
          for (int i = 0; i < jsonArraymetricHeaders.size(); i++) {
            GoogleAnalyticsAdminV1alphaAccessMetricHeader.validateJsonElement(jsonArraymetricHeaders.get(i));
          };
        }
      }
      // validate the optional field `quota`
      if (jsonObj.get("quota") != null && !jsonObj.get("quota").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaAccessQuota.validateJsonElement(jsonObj.get("quota"));
      }
      if (jsonObj.get("rows") != null && !jsonObj.get("rows").isJsonNull()) {
        JsonArray jsonArrayrows = jsonObj.getAsJsonArray("rows");
        if (jsonArrayrows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rows` to be an array in the JSON string but got `%s`", jsonObj.get("rows").toString()));
          }

          // validate the optional field `rows` (array)
          for (int i = 0; i < jsonArrayrows.size(); i++) {
            GoogleAnalyticsAdminV1alphaAccessRow.validateJsonElement(jsonArrayrows.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaRunAccessReportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaRunAccessReportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaRunAccessReportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaRunAccessReportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaRunAccessReportResponse>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaRunAccessReportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaRunAccessReportResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaRunAccessReportResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaRunAccessReportResponse
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaRunAccessReportResponse
   */
  public static GoogleAnalyticsAdminV1alphaRunAccessReportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaRunAccessReportResponse.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaRunAccessReportResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

