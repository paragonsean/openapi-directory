/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A resource message representing a GA4 ExpandedDataSet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaExpandedDataSet {
  public static final String SERIALIZED_NAME_DATA_COLLECTION_START_TIME = "dataCollectionStartTime";
  @SerializedName(SERIALIZED_NAME_DATA_COLLECTION_START_TIME)
  private String dataCollectionStartTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DIMENSION_FILTER_EXPRESSION = "dimensionFilterExpression";
  @SerializedName(SERIALIZED_NAME_DIMENSION_FILTER_EXPRESSION)
  private GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression dimensionFilterExpression;

  public static final String SERIALIZED_NAME_DIMENSION_NAMES = "dimensionNames";
  @SerializedName(SERIALIZED_NAME_DIMENSION_NAMES)
  private List<String> dimensionNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_METRIC_NAMES = "metricNames";
  @SerializedName(SERIALIZED_NAME_METRIC_NAMES)
  private List<String> metricNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public GoogleAnalyticsAdminV1alphaExpandedDataSet() {
  }

  public GoogleAnalyticsAdminV1alphaExpandedDataSet(
     String dataCollectionStartTime, 
     String name
  ) {
    this();
    this.dataCollectionStartTime = dataCollectionStartTime;
    this.name = name;
  }

  /**
   * Output only. Time when expanded data set began (or will begin) collecing data.
   * @return dataCollectionStartTime
   */
  @javax.annotation.Nullable
  public String getDataCollectionStartTime() {
    return dataCollectionStartTime;
  }



  public GoogleAnalyticsAdminV1alphaExpandedDataSet description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. The description of the ExpandedDataSet. Max 50 chars.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleAnalyticsAdminV1alphaExpandedDataSet dimensionFilterExpression(GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression dimensionFilterExpression) {
    this.dimensionFilterExpression = dimensionFilterExpression;
    return this;
  }

  /**
   * Get dimensionFilterExpression
   * @return dimensionFilterExpression
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression getDimensionFilterExpression() {
    return dimensionFilterExpression;
  }

  public void setDimensionFilterExpression(GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression dimensionFilterExpression) {
    this.dimensionFilterExpression = dimensionFilterExpression;
  }


  public GoogleAnalyticsAdminV1alphaExpandedDataSet dimensionNames(List<String> dimensionNames) {
    this.dimensionNames = dimensionNames;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaExpandedDataSet addDimensionNamesItem(String dimensionNamesItem) {
    if (this.dimensionNames == null) {
      this.dimensionNames = new ArrayList<>();
    }
    this.dimensionNames.add(dimensionNamesItem);
    return this;
  }

  /**
   * Immutable. The list of dimensions included in the ExpandedDataSet. See the [API Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#dimensions) for the list of dimension names.
   * @return dimensionNames
   */
  @javax.annotation.Nullable
  public List<String> getDimensionNames() {
    return dimensionNames;
  }

  public void setDimensionNames(List<String> dimensionNames) {
    this.dimensionNames = dimensionNames;
  }


  public GoogleAnalyticsAdminV1alphaExpandedDataSet displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The display name of the ExpandedDataSet. Max 200 chars.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleAnalyticsAdminV1alphaExpandedDataSet metricNames(List<String> metricNames) {
    this.metricNames = metricNames;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaExpandedDataSet addMetricNamesItem(String metricNamesItem) {
    if (this.metricNames == null) {
      this.metricNames = new ArrayList<>();
    }
    this.metricNames.add(metricNamesItem);
    return this;
  }

  /**
   * Immutable. The list of metrics included in the ExpandedDataSet. See the [API Metrics](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#metrics) for the list of dimension names.
   * @return metricNames
   */
  @javax.annotation.Nullable
  public List<String> getMetricNames() {
    return metricNames;
  }

  public void setMetricNames(List<String> metricNames) {
    this.metricNames = metricNames;
  }


  /**
   * Output only. The resource name for this ExpandedDataSet resource. Format: properties/{property_id}/expandedDataSets/{expanded_data_set}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaExpandedDataSet googleAnalyticsAdminV1alphaExpandedDataSet = (GoogleAnalyticsAdminV1alphaExpandedDataSet) o;
    return Objects.equals(this.dataCollectionStartTime, googleAnalyticsAdminV1alphaExpandedDataSet.dataCollectionStartTime) &&
        Objects.equals(this.description, googleAnalyticsAdminV1alphaExpandedDataSet.description) &&
        Objects.equals(this.dimensionFilterExpression, googleAnalyticsAdminV1alphaExpandedDataSet.dimensionFilterExpression) &&
        Objects.equals(this.dimensionNames, googleAnalyticsAdminV1alphaExpandedDataSet.dimensionNames) &&
        Objects.equals(this.displayName, googleAnalyticsAdminV1alphaExpandedDataSet.displayName) &&
        Objects.equals(this.metricNames, googleAnalyticsAdminV1alphaExpandedDataSet.metricNames) &&
        Objects.equals(this.name, googleAnalyticsAdminV1alphaExpandedDataSet.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataCollectionStartTime, description, dimensionFilterExpression, dimensionNames, displayName, metricNames, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaExpandedDataSet {\n");
    sb.append("    dataCollectionStartTime: ").append(toIndentedString(dataCollectionStartTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dimensionFilterExpression: ").append(toIndentedString(dimensionFilterExpression)).append("\n");
    sb.append("    dimensionNames: ").append(toIndentedString(dimensionNames)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    metricNames: ").append(toIndentedString(metricNames)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataCollectionStartTime");
    openapiFields.add("description");
    openapiFields.add("dimensionFilterExpression");
    openapiFields.add("dimensionNames");
    openapiFields.add("displayName");
    openapiFields.add("metricNames");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaExpandedDataSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaExpandedDataSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaExpandedDataSet is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaExpandedDataSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaExpandedDataSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaExpandedDataSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataCollectionStartTime") != null && !jsonObj.get("dataCollectionStartTime").isJsonNull()) && !jsonObj.get("dataCollectionStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataCollectionStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataCollectionStartTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `dimensionFilterExpression`
      if (jsonObj.get("dimensionFilterExpression") != null && !jsonObj.get("dimensionFilterExpression").isJsonNull()) {
        GoogleAnalyticsAdminV1alphaExpandedDataSetFilterExpression.validateJsonElement(jsonObj.get("dimensionFilterExpression"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dimensionNames") != null && !jsonObj.get("dimensionNames").isJsonNull() && !jsonObj.get("dimensionNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimensionNames` to be an array in the JSON string but got `%s`", jsonObj.get("dimensionNames").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metricNames") != null && !jsonObj.get("metricNames").isJsonNull() && !jsonObj.get("metricNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricNames` to be an array in the JSON string but got `%s`", jsonObj.get("metricNames").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaExpandedDataSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaExpandedDataSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaExpandedDataSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaExpandedDataSet.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaExpandedDataSet>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaExpandedDataSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaExpandedDataSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaExpandedDataSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaExpandedDataSet
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaExpandedDataSet
   */
  public static GoogleAnalyticsAdminV1alphaExpandedDataSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaExpandedDataSet.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaExpandedDataSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

