/*
 * Google Analytics Admin API
 * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A resource message representing a GA4 Subproperty event filter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:35.760040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsAdminV1alphaSubpropertyEventFilter {
  public static final String SERIALIZED_NAME_APPLY_TO_PROPERTY = "applyToProperty";
  @SerializedName(SERIALIZED_NAME_APPLY_TO_PROPERTY)
  private String applyToProperty;

  public static final String SERIALIZED_NAME_FILTER_CLAUSES = "filterClauses";
  @SerializedName(SERIALIZED_NAME_FILTER_CLAUSES)
  private List<GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause> filterClauses = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilter() {
  }

  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilter(
     String name
  ) {
    this();
    this.name = name;
  }

  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilter applyToProperty(String applyToProperty) {
    this.applyToProperty = applyToProperty;
    return this;
  }

  /**
   * Immutable. Resource name of the Subproperty that uses this filter.
   * @return applyToProperty
   */
  @javax.annotation.Nullable
  public String getApplyToProperty() {
    return applyToProperty;
  }

  public void setApplyToProperty(String applyToProperty) {
    this.applyToProperty = applyToProperty;
  }


  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilter filterClauses(List<GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause> filterClauses) {
    this.filterClauses = filterClauses;
    return this;
  }

  public GoogleAnalyticsAdminV1alphaSubpropertyEventFilter addFilterClausesItem(GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause filterClausesItem) {
    if (this.filterClauses == null) {
      this.filterClauses = new ArrayList<>();
    }
    this.filterClauses.add(filterClausesItem);
    return this;
  }

  /**
   * Required. Unordered list. Filter clauses that define the SubpropertyEventFilter. All clauses are AND&#39;ed together to determine what data is sent to the subproperty.
   * @return filterClauses
   */
  @javax.annotation.Nullable
  public List<GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause> getFilterClauses() {
    return filterClauses;
  }

  public void setFilterClauses(List<GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause> filterClauses) {
    this.filterClauses = filterClauses;
  }


  /**
   * Output only. Format: properties/{ordinary_property_id}/subpropertyEventFilters/{sub_property_event_filter} Example: properties/1234/subpropertyEventFilters/5678
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsAdminV1alphaSubpropertyEventFilter googleAnalyticsAdminV1alphaSubpropertyEventFilter = (GoogleAnalyticsAdminV1alphaSubpropertyEventFilter) o;
    return Objects.equals(this.applyToProperty, googleAnalyticsAdminV1alphaSubpropertyEventFilter.applyToProperty) &&
        Objects.equals(this.filterClauses, googleAnalyticsAdminV1alphaSubpropertyEventFilter.filterClauses) &&
        Objects.equals(this.name, googleAnalyticsAdminV1alphaSubpropertyEventFilter.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyToProperty, filterClauses, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsAdminV1alphaSubpropertyEventFilter {\n");
    sb.append("    applyToProperty: ").append(toIndentedString(applyToProperty)).append("\n");
    sb.append("    filterClauses: ").append(toIndentedString(filterClauses)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applyToProperty");
    openapiFields.add("filterClauses");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsAdminV1alphaSubpropertyEventFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsAdminV1alphaSubpropertyEventFilter is not found in the empty JSON string", GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsAdminV1alphaSubpropertyEventFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("applyToProperty") != null && !jsonObj.get("applyToProperty").isJsonNull()) && !jsonObj.get("applyToProperty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applyToProperty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applyToProperty").toString()));
      }
      if (jsonObj.get("filterClauses") != null && !jsonObj.get("filterClauses").isJsonNull()) {
        JsonArray jsonArrayfilterClauses = jsonObj.getAsJsonArray("filterClauses");
        if (jsonArrayfilterClauses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filterClauses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filterClauses` to be an array in the JSON string but got `%s`", jsonObj.get("filterClauses").toString()));
          }

          // validate the optional field `filterClauses` (array)
          for (int i = 0; i < jsonArrayfilterClauses.size(); i++) {
            GoogleAnalyticsAdminV1alphaSubpropertyEventFilterClause.validateJsonElement(jsonArrayfilterClauses.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsAdminV1alphaSubpropertyEventFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsAdminV1alphaSubpropertyEventFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsAdminV1alphaSubpropertyEventFilter>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsAdminV1alphaSubpropertyEventFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsAdminV1alphaSubpropertyEventFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsAdminV1alphaSubpropertyEventFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsAdminV1alphaSubpropertyEventFilter
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsAdminV1alphaSubpropertyEventFilter
   */
  public static GoogleAnalyticsAdminV1alphaSubpropertyEventFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsAdminV1alphaSubpropertyEventFilter.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsAdminV1alphaSubpropertyEventFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

