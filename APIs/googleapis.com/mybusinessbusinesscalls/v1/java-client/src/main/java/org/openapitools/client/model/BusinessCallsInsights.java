/*
 * My Business Business Calls API
 * The My Business Business Calls API manages business calls information of a location on Google and collect insights like the number of missed calls to their location. Additional information about Business calls can be found at https://support.google.com/business/answer/9688285?p=call_history. If the Google Business Profile links to a Google Ads account and call history is turned on, calls that last longer than a specific time, and that can be attributed to an ad interaction, will show in the linked Google Ads account under the \"Calls from Ads\" conversion. If smart bidding and call conversions are used in the optimization strategy, there could be a change in ad spend. Learn more about smart bidding. To view and perform actions on a location's calls, you need to be a `OWNER`, `CO_OWNER` or `MANAGER` of the location. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AggregateMetrics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Insights for calls made to a location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:37.076723-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BusinessCallsInsights {
  public static final String SERIALIZED_NAME_AGGREGATE_METRICS = "aggregateMetrics";
  @SerializedName(SERIALIZED_NAME_AGGREGATE_METRICS)
  private AggregateMetrics aggregateMetrics;

  /**
   * The metric for which the value applies.
   */
  @JsonAdapter(MetricTypeEnum.Adapter.class)
  public enum MetricTypeEnum {
    METRIC_TYPE_UNSPECIFIED("METRIC_TYPE_UNSPECIFIED"),
    
    AGGREGATE_COUNT("AGGREGATE_COUNT");

    private String value;

    MetricTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricTypeEnum fromValue(String value) {
      for (MetricTypeEnum b : MetricTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetricTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METRIC_TYPE = "metricType";
  @SerializedName(SERIALIZED_NAME_METRIC_TYPE)
  private MetricTypeEnum metricType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public BusinessCallsInsights() {
  }

  public BusinessCallsInsights aggregateMetrics(AggregateMetrics aggregateMetrics) {
    this.aggregateMetrics = aggregateMetrics;
    return this;
  }

  /**
   * Get aggregateMetrics
   * @return aggregateMetrics
   */
  @javax.annotation.Nullable
  public AggregateMetrics getAggregateMetrics() {
    return aggregateMetrics;
  }

  public void setAggregateMetrics(AggregateMetrics aggregateMetrics) {
    this.aggregateMetrics = aggregateMetrics;
  }


  public BusinessCallsInsights metricType(MetricTypeEnum metricType) {
    this.metricType = metricType;
    return this;
  }

  /**
   * The metric for which the value applies.
   * @return metricType
   */
  @javax.annotation.Nullable
  public MetricTypeEnum getMetricType() {
    return metricType;
  }

  public void setMetricType(MetricTypeEnum metricType) {
    this.metricType = metricType;
  }


  public BusinessCallsInsights name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The resource name of the calls insights. Format: locations/{location}/businesscallsinsights
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessCallsInsights businessCallsInsights = (BusinessCallsInsights) o;
    return Objects.equals(this.aggregateMetrics, businessCallsInsights.aggregateMetrics) &&
        Objects.equals(this.metricType, businessCallsInsights.metricType) &&
        Objects.equals(this.name, businessCallsInsights.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregateMetrics, metricType, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessCallsInsights {\n");
    sb.append("    aggregateMetrics: ").append(toIndentedString(aggregateMetrics)).append("\n");
    sb.append("    metricType: ").append(toIndentedString(metricType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregateMetrics");
    openapiFields.add("metricType");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BusinessCallsInsights
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BusinessCallsInsights.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessCallsInsights is not found in the empty JSON string", BusinessCallsInsights.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BusinessCallsInsights.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BusinessCallsInsights` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aggregateMetrics`
      if (jsonObj.get("aggregateMetrics") != null && !jsonObj.get("aggregateMetrics").isJsonNull()) {
        AggregateMetrics.validateJsonElement(jsonObj.get("aggregateMetrics"));
      }
      if ((jsonObj.get("metricType") != null && !jsonObj.get("metricType").isJsonNull()) && !jsonObj.get("metricType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricType").toString()));
      }
      // validate the optional field `metricType`
      if (jsonObj.get("metricType") != null && !jsonObj.get("metricType").isJsonNull()) {
        MetricTypeEnum.validateJsonElement(jsonObj.get("metricType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessCallsInsights.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessCallsInsights' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessCallsInsights> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessCallsInsights.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessCallsInsights>() {
           @Override
           public void write(JsonWriter out, BusinessCallsInsights value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessCallsInsights read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BusinessCallsInsights given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BusinessCallsInsights
   * @throws IOException if the JSON string is invalid with respect to BusinessCallsInsights
   */
  public static BusinessCallsInsights fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessCallsInsights.class);
  }

  /**
   * Convert an instance of BusinessCallsInsights to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

