/**
 * My Business Business Calls API
 * The My Business Business Calls API manages business calls information of a location on Google and collect insights like the number of missed calls to their location. Additional information about Business calls can be found at https://support.google.com/business/answer/9688285?p=call_history. If the Google Business Profile links to a Google Ads account and call history is turned on, calls that last longer than a specific time, and that can be attributed to an ad interaction, will show in the linked Google Ads account under the \"Calls from Ads\" conversion. If smart bidding and call conversions are used in the optimization strategy, there could be a change in ad spend. Learn more about smart bidding. To view and perform actions on a location's calls, you need to be a `OWNER`, `CO_OWNER` or `MANAGER` of the location. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregateMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregateMetrics::OAIAggregateMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregateMetrics::OAIAggregateMetrics() {
    this->initializeModel();
}

OAIAggregateMetrics::~OAIAggregateMetrics() {}

void OAIAggregateMetrics::initializeModel() {

    m_answered_calls_count_isSet = false;
    m_answered_calls_count_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_hourly_metrics_isSet = false;
    m_hourly_metrics_isValid = false;

    m_missed_calls_count_isSet = false;
    m_missed_calls_count_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_weekday_metrics_isSet = false;
    m_weekday_metrics_isValid = false;
}

void OAIAggregateMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregateMetrics::fromJsonObject(QJsonObject json) {

    m_answered_calls_count_isValid = ::OpenAPI::fromJsonValue(m_answered_calls_count, json[QString("answeredCallsCount")]);
    m_answered_calls_count_isSet = !json[QString("answeredCallsCount")].isNull() && m_answered_calls_count_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_hourly_metrics_isValid = ::OpenAPI::fromJsonValue(m_hourly_metrics, json[QString("hourlyMetrics")]);
    m_hourly_metrics_isSet = !json[QString("hourlyMetrics")].isNull() && m_hourly_metrics_isValid;

    m_missed_calls_count_isValid = ::OpenAPI::fromJsonValue(m_missed_calls_count, json[QString("missedCallsCount")]);
    m_missed_calls_count_isSet = !json[QString("missedCallsCount")].isNull() && m_missed_calls_count_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_weekday_metrics_isValid = ::OpenAPI::fromJsonValue(m_weekday_metrics, json[QString("weekdayMetrics")]);
    m_weekday_metrics_isSet = !json[QString("weekdayMetrics")].isNull() && m_weekday_metrics_isValid;
}

QString OAIAggregateMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregateMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_answered_calls_count_isSet) {
        obj.insert(QString("answeredCallsCount"), ::OpenAPI::toJsonValue(m_answered_calls_count));
    }
    if (m_end_date.isSet()) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_hourly_metrics.size() > 0) {
        obj.insert(QString("hourlyMetrics"), ::OpenAPI::toJsonValue(m_hourly_metrics));
    }
    if (m_missed_calls_count_isSet) {
        obj.insert(QString("missedCallsCount"), ::OpenAPI::toJsonValue(m_missed_calls_count));
    }
    if (m_start_date.isSet()) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_weekday_metrics.size() > 0) {
        obj.insert(QString("weekdayMetrics"), ::OpenAPI::toJsonValue(m_weekday_metrics));
    }
    return obj;
}

qint32 OAIAggregateMetrics::getAnsweredCallsCount() const {
    return m_answered_calls_count;
}
void OAIAggregateMetrics::setAnsweredCallsCount(const qint32 &answered_calls_count) {
    m_answered_calls_count = answered_calls_count;
    m_answered_calls_count_isSet = true;
}

bool OAIAggregateMetrics::is_answered_calls_count_Set() const{
    return m_answered_calls_count_isSet;
}

bool OAIAggregateMetrics::is_answered_calls_count_Valid() const{
    return m_answered_calls_count_isValid;
}

OAIDate OAIAggregateMetrics::getEndDate() const {
    return m_end_date;
}
void OAIAggregateMetrics::setEndDate(const OAIDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIAggregateMetrics::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIAggregateMetrics::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QList<OAIHourlyMetrics> OAIAggregateMetrics::getHourlyMetrics() const {
    return m_hourly_metrics;
}
void OAIAggregateMetrics::setHourlyMetrics(const QList<OAIHourlyMetrics> &hourly_metrics) {
    m_hourly_metrics = hourly_metrics;
    m_hourly_metrics_isSet = true;
}

bool OAIAggregateMetrics::is_hourly_metrics_Set() const{
    return m_hourly_metrics_isSet;
}

bool OAIAggregateMetrics::is_hourly_metrics_Valid() const{
    return m_hourly_metrics_isValid;
}

qint32 OAIAggregateMetrics::getMissedCallsCount() const {
    return m_missed_calls_count;
}
void OAIAggregateMetrics::setMissedCallsCount(const qint32 &missed_calls_count) {
    m_missed_calls_count = missed_calls_count;
    m_missed_calls_count_isSet = true;
}

bool OAIAggregateMetrics::is_missed_calls_count_Set() const{
    return m_missed_calls_count_isSet;
}

bool OAIAggregateMetrics::is_missed_calls_count_Valid() const{
    return m_missed_calls_count_isValid;
}

OAIDate OAIAggregateMetrics::getStartDate() const {
    return m_start_date;
}
void OAIAggregateMetrics::setStartDate(const OAIDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIAggregateMetrics::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIAggregateMetrics::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QList<OAIWeekDayMetrics> OAIAggregateMetrics::getWeekdayMetrics() const {
    return m_weekday_metrics;
}
void OAIAggregateMetrics::setWeekdayMetrics(const QList<OAIWeekDayMetrics> &weekday_metrics) {
    m_weekday_metrics = weekday_metrics;
    m_weekday_metrics_isSet = true;
}

bool OAIAggregateMetrics::is_weekday_metrics_Set() const{
    return m_weekday_metrics_isSet;
}

bool OAIAggregateMetrics::is_weekday_metrics_Valid() const{
    return m_weekday_metrics_isValid;
}

bool OAIAggregateMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answered_calls_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hourly_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_missed_calls_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekday_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregateMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
