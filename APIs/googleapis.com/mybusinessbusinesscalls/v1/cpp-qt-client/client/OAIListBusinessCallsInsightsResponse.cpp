/**
 * My Business Business Calls API
 * The My Business Business Calls API manages business calls information of a location on Google and collect insights like the number of missed calls to their location. Additional information about Business calls can be found at https://support.google.com/business/answer/9688285?p=call_history. If the Google Business Profile links to a Google Ads account and call history is turned on, calls that last longer than a specific time, and that can be attributed to an ad interaction, will show in the linked Google Ads account under the \"Calls from Ads\" conversion. If smart bidding and call conversions are used in the optimization strategy, there could be a change in ad spend. Learn more about smart bidding. To view and perform actions on a location's calls, you need to be a `OWNER`, `CO_OWNER` or `MANAGER` of the location. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListBusinessCallsInsightsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListBusinessCallsInsightsResponse::OAIListBusinessCallsInsightsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListBusinessCallsInsightsResponse::OAIListBusinessCallsInsightsResponse() {
    this->initializeModel();
}

OAIListBusinessCallsInsightsResponse::~OAIListBusinessCallsInsightsResponse() {}

void OAIListBusinessCallsInsightsResponse::initializeModel() {

    m_business_calls_insights_isSet = false;
    m_business_calls_insights_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListBusinessCallsInsightsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListBusinessCallsInsightsResponse::fromJsonObject(QJsonObject json) {

    m_business_calls_insights_isValid = ::OpenAPI::fromJsonValue(m_business_calls_insights, json[QString("businessCallsInsights")]);
    m_business_calls_insights_isSet = !json[QString("businessCallsInsights")].isNull() && m_business_calls_insights_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListBusinessCallsInsightsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListBusinessCallsInsightsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_business_calls_insights.size() > 0) {
        obj.insert(QString("businessCallsInsights"), ::OpenAPI::toJsonValue(m_business_calls_insights));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIBusinessCallsInsights> OAIListBusinessCallsInsightsResponse::getBusinessCallsInsights() const {
    return m_business_calls_insights;
}
void OAIListBusinessCallsInsightsResponse::setBusinessCallsInsights(const QList<OAIBusinessCallsInsights> &business_calls_insights) {
    m_business_calls_insights = business_calls_insights;
    m_business_calls_insights_isSet = true;
}

bool OAIListBusinessCallsInsightsResponse::is_business_calls_insights_Set() const{
    return m_business_calls_insights_isSet;
}

bool OAIListBusinessCallsInsightsResponse::is_business_calls_insights_Valid() const{
    return m_business_calls_insights_isValid;
}

QString OAIListBusinessCallsInsightsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListBusinessCallsInsightsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListBusinessCallsInsightsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListBusinessCallsInsightsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListBusinessCallsInsightsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_calls_insights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListBusinessCallsInsightsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
