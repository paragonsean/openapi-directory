/**
 * My Business Business Calls API
 * The My Business Business Calls API manages business calls information of a location on Google and collect insights like the number of missed calls to their location. Additional information about Business calls can be found at https://support.google.com/business/answer/9688285?p=call_history. If the Google Business Profile links to a Google Ads account and call history is turned on, calls that last longer than a specific time, and that can be attributed to an ad interaction, will show in the linked Google Ads account under the \"Calls from Ads\" conversion. If smart bidding and call conversions are used in the optimization strategy, there could be a change in ad spend. Learn more about smart bidding. To view and perform actions on a location's calls, you need to be a `OWNER`, `CO_OWNER` or `MANAGER` of the location. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBusinessCallsInsights.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBusinessCallsInsights::OAIBusinessCallsInsights(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBusinessCallsInsights::OAIBusinessCallsInsights() {
    this->initializeModel();
}

OAIBusinessCallsInsights::~OAIBusinessCallsInsights() {}

void OAIBusinessCallsInsights::initializeModel() {

    m_aggregate_metrics_isSet = false;
    m_aggregate_metrics_isValid = false;

    m_metric_type_isSet = false;
    m_metric_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIBusinessCallsInsights::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBusinessCallsInsights::fromJsonObject(QJsonObject json) {

    m_aggregate_metrics_isValid = ::OpenAPI::fromJsonValue(m_aggregate_metrics, json[QString("aggregateMetrics")]);
    m_aggregate_metrics_isSet = !json[QString("aggregateMetrics")].isNull() && m_aggregate_metrics_isValid;

    m_metric_type_isValid = ::OpenAPI::fromJsonValue(m_metric_type, json[QString("metricType")]);
    m_metric_type_isSet = !json[QString("metricType")].isNull() && m_metric_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIBusinessCallsInsights::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBusinessCallsInsights::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregate_metrics.isSet()) {
        obj.insert(QString("aggregateMetrics"), ::OpenAPI::toJsonValue(m_aggregate_metrics));
    }
    if (m_metric_type_isSet) {
        obj.insert(QString("metricType"), ::OpenAPI::toJsonValue(m_metric_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIAggregateMetrics OAIBusinessCallsInsights::getAggregateMetrics() const {
    return m_aggregate_metrics;
}
void OAIBusinessCallsInsights::setAggregateMetrics(const OAIAggregateMetrics &aggregate_metrics) {
    m_aggregate_metrics = aggregate_metrics;
    m_aggregate_metrics_isSet = true;
}

bool OAIBusinessCallsInsights::is_aggregate_metrics_Set() const{
    return m_aggregate_metrics_isSet;
}

bool OAIBusinessCallsInsights::is_aggregate_metrics_Valid() const{
    return m_aggregate_metrics_isValid;
}

QString OAIBusinessCallsInsights::getMetricType() const {
    return m_metric_type;
}
void OAIBusinessCallsInsights::setMetricType(const QString &metric_type) {
    m_metric_type = metric_type;
    m_metric_type_isSet = true;
}

bool OAIBusinessCallsInsights::is_metric_type_Set() const{
    return m_metric_type_isSet;
}

bool OAIBusinessCallsInsights::is_metric_type_Valid() const{
    return m_metric_type_isValid;
}

QString OAIBusinessCallsInsights::getName() const {
    return m_name;
}
void OAIBusinessCallsInsights::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBusinessCallsInsights::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBusinessCallsInsights::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIBusinessCallsInsights::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregate_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBusinessCallsInsights::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
