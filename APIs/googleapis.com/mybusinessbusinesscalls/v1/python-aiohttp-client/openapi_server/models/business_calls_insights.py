# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregate_metrics import AggregateMetrics
from openapi_server import util


class BusinessCallsInsights(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregate_metrics: AggregateMetrics=None, metric_type: str=None, name: str=None):
        """BusinessCallsInsights - a model defined in OpenAPI

        :param aggregate_metrics: The aggregate_metrics of this BusinessCallsInsights.
        :param metric_type: The metric_type of this BusinessCallsInsights.
        :param name: The name of this BusinessCallsInsights.
        """
        self.openapi_types = {
            'aggregate_metrics': AggregateMetrics,
            'metric_type': str,
            'name': str
        }

        self.attribute_map = {
            'aggregate_metrics': 'aggregateMetrics',
            'metric_type': 'metricType',
            'name': 'name'
        }

        self._aggregate_metrics = aggregate_metrics
        self._metric_type = metric_type
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BusinessCallsInsights':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BusinessCallsInsights of this BusinessCallsInsights.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregate_metrics(self):
        """Gets the aggregate_metrics of this BusinessCallsInsights.


        :return: The aggregate_metrics of this BusinessCallsInsights.
        :rtype: AggregateMetrics
        """
        return self._aggregate_metrics

    @aggregate_metrics.setter
    def aggregate_metrics(self, aggregate_metrics):
        """Sets the aggregate_metrics of this BusinessCallsInsights.


        :param aggregate_metrics: The aggregate_metrics of this BusinessCallsInsights.
        :type aggregate_metrics: AggregateMetrics
        """

        self._aggregate_metrics = aggregate_metrics

    @property
    def metric_type(self):
        """Gets the metric_type of this BusinessCallsInsights.

        The metric for which the value applies.

        :return: The metric_type of this BusinessCallsInsights.
        :rtype: str
        """
        return self._metric_type

    @metric_type.setter
    def metric_type(self, metric_type):
        """Sets the metric_type of this BusinessCallsInsights.

        The metric for which the value applies.

        :param metric_type: The metric_type of this BusinessCallsInsights.
        :type metric_type: str
        """
        allowed_values = ["METRIC_TYPE_UNSPECIFIED", "AGGREGATE_COUNT"]  # noqa: E501
        if metric_type not in allowed_values:
            raise ValueError(
                "Invalid value for `metric_type` ({0}), must be one of {1}"
                .format(metric_type, allowed_values)
            )

        self._metric_type = metric_type

    @property
    def name(self):
        """Gets the name of this BusinessCallsInsights.

        Required. The resource name of the calls insights. Format: locations/{location}/businesscallsinsights

        :return: The name of this BusinessCallsInsights.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BusinessCallsInsights.

        Required. The resource name of the calls insights. Format: locations/{location}/businesscallsinsights

        :param name: The name of this BusinessCallsInsights.
        :type name: str
        """

        self._name = name
