# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hourly_metrics import HourlyMetrics
from openapi_server.models.model_date import ModelDate
from openapi_server.models.week_day_metrics import WeekDayMetrics
from openapi_server import util


class AggregateMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answered_calls_count: int=None, end_date: ModelDate=None, hourly_metrics: List[HourlyMetrics]=None, missed_calls_count: int=None, start_date: ModelDate=None, weekday_metrics: List[WeekDayMetrics]=None):
        """AggregateMetrics - a model defined in OpenAPI

        :param answered_calls_count: The answered_calls_count of this AggregateMetrics.
        :param end_date: The end_date of this AggregateMetrics.
        :param hourly_metrics: The hourly_metrics of this AggregateMetrics.
        :param missed_calls_count: The missed_calls_count of this AggregateMetrics.
        :param start_date: The start_date of this AggregateMetrics.
        :param weekday_metrics: The weekday_metrics of this AggregateMetrics.
        """
        self.openapi_types = {
            'answered_calls_count': int,
            'end_date': ModelDate,
            'hourly_metrics': List[HourlyMetrics],
            'missed_calls_count': int,
            'start_date': ModelDate,
            'weekday_metrics': List[WeekDayMetrics]
        }

        self.attribute_map = {
            'answered_calls_count': 'answeredCallsCount',
            'end_date': 'endDate',
            'hourly_metrics': 'hourlyMetrics',
            'missed_calls_count': 'missedCallsCount',
            'start_date': 'startDate',
            'weekday_metrics': 'weekdayMetrics'
        }

        self._answered_calls_count = answered_calls_count
        self._end_date = end_date
        self._hourly_metrics = hourly_metrics
        self._missed_calls_count = missed_calls_count
        self._start_date = start_date
        self._weekday_metrics = weekday_metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregateMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregateMetrics of this AggregateMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answered_calls_count(self):
        """Gets the answered_calls_count of this AggregateMetrics.

        Total count of answered calls.

        :return: The answered_calls_count of this AggregateMetrics.
        :rtype: int
        """
        return self._answered_calls_count

    @answered_calls_count.setter
    def answered_calls_count(self, answered_calls_count):
        """Sets the answered_calls_count of this AggregateMetrics.

        Total count of answered calls.

        :param answered_calls_count: The answered_calls_count of this AggregateMetrics.
        :type answered_calls_count: int
        """

        self._answered_calls_count = answered_calls_count

    @property
    def end_date(self):
        """Gets the end_date of this AggregateMetrics.


        :return: The end_date of this AggregateMetrics.
        :rtype: ModelDate
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this AggregateMetrics.


        :param end_date: The end_date of this AggregateMetrics.
        :type end_date: ModelDate
        """

        self._end_date = end_date

    @property
    def hourly_metrics(self):
        """Gets the hourly_metrics of this AggregateMetrics.

        A list of metrics by hour of day.

        :return: The hourly_metrics of this AggregateMetrics.
        :rtype: List[HourlyMetrics]
        """
        return self._hourly_metrics

    @hourly_metrics.setter
    def hourly_metrics(self, hourly_metrics):
        """Sets the hourly_metrics of this AggregateMetrics.

        A list of metrics by hour of day.

        :param hourly_metrics: The hourly_metrics of this AggregateMetrics.
        :type hourly_metrics: List[HourlyMetrics]
        """

        self._hourly_metrics = hourly_metrics

    @property
    def missed_calls_count(self):
        """Gets the missed_calls_count of this AggregateMetrics.

        Total count of missed calls.

        :return: The missed_calls_count of this AggregateMetrics.
        :rtype: int
        """
        return self._missed_calls_count

    @missed_calls_count.setter
    def missed_calls_count(self, missed_calls_count):
        """Sets the missed_calls_count of this AggregateMetrics.

        Total count of missed calls.

        :param missed_calls_count: The missed_calls_count of this AggregateMetrics.
        :type missed_calls_count: int
        """

        self._missed_calls_count = missed_calls_count

    @property
    def start_date(self):
        """Gets the start_date of this AggregateMetrics.


        :return: The start_date of this AggregateMetrics.
        :rtype: ModelDate
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this AggregateMetrics.


        :param start_date: The start_date of this AggregateMetrics.
        :type start_date: ModelDate
        """

        self._start_date = start_date

    @property
    def weekday_metrics(self):
        """Gets the weekday_metrics of this AggregateMetrics.

        A list of metrics by day of week.

        :return: The weekday_metrics of this AggregateMetrics.
        :rtype: List[WeekDayMetrics]
        """
        return self._weekday_metrics

    @weekday_metrics.setter
    def weekday_metrics(self, weekday_metrics):
        """Sets the weekday_metrics of this AggregateMetrics.

        A list of metrics by day of week.

        :param weekday_metrics: The weekday_metrics of this AggregateMetrics.
        :type weekday_metrics: List[WeekDayMetrics]
        """

        self._weekday_metrics = weekday_metrics
