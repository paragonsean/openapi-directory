# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BusinessCallsSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calls_state: str=None, consent_time: str=None, name: str=None):
        """BusinessCallsSettings - a model defined in OpenAPI

        :param calls_state: The calls_state of this BusinessCallsSettings.
        :param consent_time: The consent_time of this BusinessCallsSettings.
        :param name: The name of this BusinessCallsSettings.
        """
        self.openapi_types = {
            'calls_state': str,
            'consent_time': str,
            'name': str
        }

        self.attribute_map = {
            'calls_state': 'callsState',
            'consent_time': 'consentTime',
            'name': 'name'
        }

        self._calls_state = calls_state
        self._consent_time = consent_time
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BusinessCallsSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BusinessCallsSettings of this BusinessCallsSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calls_state(self):
        """Gets the calls_state of this BusinessCallsSettings.

        Required. The state of this location's enrollment in Business calls.

        :return: The calls_state of this BusinessCallsSettings.
        :rtype: str
        """
        return self._calls_state

    @calls_state.setter
    def calls_state(self, calls_state):
        """Sets the calls_state of this BusinessCallsSettings.

        Required. The state of this location's enrollment in Business calls.

        :param calls_state: The calls_state of this BusinessCallsSettings.
        :type calls_state: str
        """
        allowed_values = ["CALLS_STATE_UNSPECIFIED", "ENABLED", "DISABLED"]  # noqa: E501
        if calls_state not in allowed_values:
            raise ValueError(
                "Invalid value for `calls_state` ({0}), must be one of {1}"
                .format(calls_state, allowed_values)
            )

        self._calls_state = calls_state

    @property
    def consent_time(self):
        """Gets the consent_time of this BusinessCallsSettings.

        Input only. Time when the end user provided consent to the API user to enable business calls.

        :return: The consent_time of this BusinessCallsSettings.
        :rtype: str
        """
        return self._consent_time

    @consent_time.setter
    def consent_time(self, consent_time):
        """Sets the consent_time of this BusinessCallsSettings.

        Input only. Time when the end user provided consent to the API user to enable business calls.

        :param consent_time: The consent_time of this BusinessCallsSettings.
        :type consent_time: str
        """

        self._consent_time = consent_time

    @property
    def name(self):
        """Gets the name of this BusinessCallsSettings.

        Required. The resource name of the calls settings. Format: locations/{location}/businesscallssettings

        :return: The name of this BusinessCallsSettings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BusinessCallsSettings.

        Required. The resource name of the calls settings. Format: locations/{location}/businesscallssettings

        :param name: The name of this BusinessCallsSettings.
        :type name: str
        """

        self._name = name
