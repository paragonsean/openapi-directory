/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudDataplexV1SchemaSchemaField model module.
 * @module model/GoogleCloudDataplexV1SchemaSchemaField
 * @version v1
 */
class GoogleCloudDataplexV1SchemaSchemaField {
    /**
     * Constructs a new <code>GoogleCloudDataplexV1SchemaSchemaField</code>.
     * Represents a column field within a table schema.
     * @alias module:model/GoogleCloudDataplexV1SchemaSchemaField
     */
    constructor() { 
        
        GoogleCloudDataplexV1SchemaSchemaField.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDataplexV1SchemaSchemaField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDataplexV1SchemaSchemaField} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDataplexV1SchemaSchemaField} The populated <code>GoogleCloudDataplexV1SchemaSchemaField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDataplexV1SchemaSchemaField();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [GoogleCloudDataplexV1SchemaSchemaField]);
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDataplexV1SchemaSchemaField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDataplexV1SchemaSchemaField</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                GoogleCloudDataplexV1SchemaSchemaField.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Optional. User friendly field description. Must be less than or equal to 1024 characters.
 * @member {String} description
 */
GoogleCloudDataplexV1SchemaSchemaField.prototype['description'] = undefined;

/**
 * Optional. Any nested field for complex types.
 * @member {Array.<module:model/GoogleCloudDataplexV1SchemaSchemaField>} fields
 */
GoogleCloudDataplexV1SchemaSchemaField.prototype['fields'] = undefined;

/**
 * Required. Additional field semantics.
 * @member {module:model/GoogleCloudDataplexV1SchemaSchemaField.ModeEnum} mode
 */
GoogleCloudDataplexV1SchemaSchemaField.prototype['mode'] = undefined;

/**
 * Required. The name of the field. Must contain only letters, numbers and underscores, with a maximum length of 767 characters, and must begin with a letter or underscore.
 * @member {String} name
 */
GoogleCloudDataplexV1SchemaSchemaField.prototype['name'] = undefined;

/**
 * Required. The type of field.
 * @member {module:model/GoogleCloudDataplexV1SchemaSchemaField.TypeEnum} type
 */
GoogleCloudDataplexV1SchemaSchemaField.prototype['type'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDataplexV1SchemaSchemaField['ModeEnum'] = {

    /**
     * value: "MODE_UNSPECIFIED"
     * @const
     */
    "MODE_UNSPECIFIED": "MODE_UNSPECIFIED",

    /**
     * value: "REQUIRED"
     * @const
     */
    "REQUIRED": "REQUIRED",

    /**
     * value: "NULLABLE"
     * @const
     */
    "NULLABLE": "NULLABLE",

    /**
     * value: "REPEATED"
     * @const
     */
    "REPEATED": "REPEATED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDataplexV1SchemaSchemaField['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "BOOLEAN"
     * @const
     */
    "BOOLEAN": "BOOLEAN",

    /**
     * value: "BYTE"
     * @const
     */
    "BYTE": "BYTE",

    /**
     * value: "INT16"
     * @const
     */
    "INT16": "INT16",

    /**
     * value: "INT32"
     * @const
     */
    "INT32": "INT32",

    /**
     * value: "INT64"
     * @const
     */
    "INT64": "INT64",

    /**
     * value: "FLOAT"
     * @const
     */
    "FLOAT": "FLOAT",

    /**
     * value: "DOUBLE"
     * @const
     */
    "DOUBLE": "DOUBLE",

    /**
     * value: "DECIMAL"
     * @const
     */
    "DECIMAL": "DECIMAL",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "BINARY"
     * @const
     */
    "BINARY": "BINARY",

    /**
     * value: "TIMESTAMP"
     * @const
     */
    "TIMESTAMP": "TIMESTAMP",

    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",

    /**
     * value: "TIME"
     * @const
     */
    "TIME": "TIME",

    /**
     * value: "RECORD"
     * @const
     */
    "RECORD": "RECORD",

    /**
     * value: "NULL"
     * @const
     */
    "NULL": "NULL"
};



export default GoogleCloudDataplexV1SchemaSchemaField;

