/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudDataplexV1ActionIncompatibleDataSchema model module.
 * @module model/GoogleCloudDataplexV1ActionIncompatibleDataSchema
 * @version v1
 */
class GoogleCloudDataplexV1ActionIncompatibleDataSchema {
    /**
     * Constructs a new <code>GoogleCloudDataplexV1ActionIncompatibleDataSchema</code>.
     * Action details for incompatible schemas detected by discovery.
     * @alias module:model/GoogleCloudDataplexV1ActionIncompatibleDataSchema
     */
    constructor() { 
        
        GoogleCloudDataplexV1ActionIncompatibleDataSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDataplexV1ActionIncompatibleDataSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDataplexV1ActionIncompatibleDataSchema} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDataplexV1ActionIncompatibleDataSchema} The populated <code>GoogleCloudDataplexV1ActionIncompatibleDataSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDataplexV1ActionIncompatibleDataSchema();

            if (data.hasOwnProperty('existingSchema')) {
                obj['existingSchema'] = ApiClient.convertToType(data['existingSchema'], 'String');
            }
            if (data.hasOwnProperty('newSchema')) {
                obj['newSchema'] = ApiClient.convertToType(data['newSchema'], 'String');
            }
            if (data.hasOwnProperty('sampledDataLocations')) {
                obj['sampledDataLocations'] = ApiClient.convertToType(data['sampledDataLocations'], ['String']);
            }
            if (data.hasOwnProperty('schemaChange')) {
                obj['schemaChange'] = ApiClient.convertToType(data['schemaChange'], 'String');
            }
            if (data.hasOwnProperty('table')) {
                obj['table'] = ApiClient.convertToType(data['table'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDataplexV1ActionIncompatibleDataSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDataplexV1ActionIncompatibleDataSchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['existingSchema'] && !(typeof data['existingSchema'] === 'string' || data['existingSchema'] instanceof String)) {
            throw new Error("Expected the field `existingSchema` to be a primitive type in the JSON string but got " + data['existingSchema']);
        }
        // ensure the json data is a string
        if (data['newSchema'] && !(typeof data['newSchema'] === 'string' || data['newSchema'] instanceof String)) {
            throw new Error("Expected the field `newSchema` to be a primitive type in the JSON string but got " + data['newSchema']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sampledDataLocations'])) {
            throw new Error("Expected the field `sampledDataLocations` to be an array in the JSON data but got " + data['sampledDataLocations']);
        }
        // ensure the json data is a string
        if (data['schemaChange'] && !(typeof data['schemaChange'] === 'string' || data['schemaChange'] instanceof String)) {
            throw new Error("Expected the field `schemaChange` to be a primitive type in the JSON string but got " + data['schemaChange']);
        }
        // ensure the json data is a string
        if (data['table'] && !(typeof data['table'] === 'string' || data['table'] instanceof String)) {
            throw new Error("Expected the field `table` to be a primitive type in the JSON string but got " + data['table']);
        }

        return true;
    }


}



/**
 * The existing and expected schema of the table. The schema is provided as a JSON formatted structure listing columns and data types.
 * @member {String} existingSchema
 */
GoogleCloudDataplexV1ActionIncompatibleDataSchema.prototype['existingSchema'] = undefined;

/**
 * The new and incompatible schema within the table. The schema is provided as a JSON formatted structured listing columns and data types.
 * @member {String} newSchema
 */
GoogleCloudDataplexV1ActionIncompatibleDataSchema.prototype['newSchema'] = undefined;

/**
 * The list of data locations sampled and used for format/schema inference.
 * @member {Array.<String>} sampledDataLocations
 */
GoogleCloudDataplexV1ActionIncompatibleDataSchema.prototype['sampledDataLocations'] = undefined;

/**
 * Whether the action relates to a schema that is incompatible or modified.
 * @member {module:model/GoogleCloudDataplexV1ActionIncompatibleDataSchema.SchemaChangeEnum} schemaChange
 */
GoogleCloudDataplexV1ActionIncompatibleDataSchema.prototype['schemaChange'] = undefined;

/**
 * The name of the table containing invalid data.
 * @member {String} table
 */
GoogleCloudDataplexV1ActionIncompatibleDataSchema.prototype['table'] = undefined;





/**
 * Allowed values for the <code>schemaChange</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDataplexV1ActionIncompatibleDataSchema['SchemaChangeEnum'] = {

    /**
     * value: "SCHEMA_CHANGE_UNSPECIFIED"
     * @const
     */
    "SCHEMA_CHANGE_UNSPECIFIED": "SCHEMA_CHANGE_UNSPECIFIED",

    /**
     * value: "INCOMPATIBLE"
     * @const
     */
    "INCOMPATIBLE": "INCOMPATIBLE",

    /**
     * value: "MODIFIED"
     * @const
     */
    "MODIFIED": "MODIFIED"
};



export default GoogleCloudDataplexV1ActionIncompatibleDataSchema;

