/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDataplexV1TaskInfrastructureSpec from './GoogleCloudDataplexV1TaskInfrastructureSpec';

/**
 * The GoogleCloudDataplexV1TaskSparkTaskConfig model module.
 * @module model/GoogleCloudDataplexV1TaskSparkTaskConfig
 * @version v1
 */
class GoogleCloudDataplexV1TaskSparkTaskConfig {
    /**
     * Constructs a new <code>GoogleCloudDataplexV1TaskSparkTaskConfig</code>.
     * User-specified config for running a Spark task.
     * @alias module:model/GoogleCloudDataplexV1TaskSparkTaskConfig
     */
    constructor() { 
        
        GoogleCloudDataplexV1TaskSparkTaskConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDataplexV1TaskSparkTaskConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDataplexV1TaskSparkTaskConfig} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDataplexV1TaskSparkTaskConfig} The populated <code>GoogleCloudDataplexV1TaskSparkTaskConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDataplexV1TaskSparkTaskConfig();

            if (data.hasOwnProperty('archiveUris')) {
                obj['archiveUris'] = ApiClient.convertToType(data['archiveUris'], ['String']);
            }
            if (data.hasOwnProperty('fileUris')) {
                obj['fileUris'] = ApiClient.convertToType(data['fileUris'], ['String']);
            }
            if (data.hasOwnProperty('infrastructureSpec')) {
                obj['infrastructureSpec'] = GoogleCloudDataplexV1TaskInfrastructureSpec.constructFromObject(data['infrastructureSpec']);
            }
            if (data.hasOwnProperty('mainClass')) {
                obj['mainClass'] = ApiClient.convertToType(data['mainClass'], 'String');
            }
            if (data.hasOwnProperty('mainJarFileUri')) {
                obj['mainJarFileUri'] = ApiClient.convertToType(data['mainJarFileUri'], 'String');
            }
            if (data.hasOwnProperty('pythonScriptFile')) {
                obj['pythonScriptFile'] = ApiClient.convertToType(data['pythonScriptFile'], 'String');
            }
            if (data.hasOwnProperty('sqlScript')) {
                obj['sqlScript'] = ApiClient.convertToType(data['sqlScript'], 'String');
            }
            if (data.hasOwnProperty('sqlScriptFile')) {
                obj['sqlScriptFile'] = ApiClient.convertToType(data['sqlScriptFile'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDataplexV1TaskSparkTaskConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDataplexV1TaskSparkTaskConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['archiveUris'])) {
            throw new Error("Expected the field `archiveUris` to be an array in the JSON data but got " + data['archiveUris']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fileUris'])) {
            throw new Error("Expected the field `fileUris` to be an array in the JSON data but got " + data['fileUris']);
        }
        // validate the optional field `infrastructureSpec`
        if (data['infrastructureSpec']) { // data not null
          GoogleCloudDataplexV1TaskInfrastructureSpec.validateJSON(data['infrastructureSpec']);
        }
        // ensure the json data is a string
        if (data['mainClass'] && !(typeof data['mainClass'] === 'string' || data['mainClass'] instanceof String)) {
            throw new Error("Expected the field `mainClass` to be a primitive type in the JSON string but got " + data['mainClass']);
        }
        // ensure the json data is a string
        if (data['mainJarFileUri'] && !(typeof data['mainJarFileUri'] === 'string' || data['mainJarFileUri'] instanceof String)) {
            throw new Error("Expected the field `mainJarFileUri` to be a primitive type in the JSON string but got " + data['mainJarFileUri']);
        }
        // ensure the json data is a string
        if (data['pythonScriptFile'] && !(typeof data['pythonScriptFile'] === 'string' || data['pythonScriptFile'] instanceof String)) {
            throw new Error("Expected the field `pythonScriptFile` to be a primitive type in the JSON string but got " + data['pythonScriptFile']);
        }
        // ensure the json data is a string
        if (data['sqlScript'] && !(typeof data['sqlScript'] === 'string' || data['sqlScript'] instanceof String)) {
            throw new Error("Expected the field `sqlScript` to be a primitive type in the JSON string but got " + data['sqlScript']);
        }
        // ensure the json data is a string
        if (data['sqlScriptFile'] && !(typeof data['sqlScriptFile'] === 'string' || data['sqlScriptFile'] instanceof String)) {
            throw new Error("Expected the field `sqlScriptFile` to be a primitive type in the JSON string but got " + data['sqlScriptFile']);
        }

        return true;
    }


}



/**
 * Optional. Cloud Storage URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
 * @member {Array.<String>} archiveUris
 */
GoogleCloudDataplexV1TaskSparkTaskConfig.prototype['archiveUris'] = undefined;

/**
 * Optional. Cloud Storage URIs of files to be placed in the working directory of each executor.
 * @member {Array.<String>} fileUris
 */
GoogleCloudDataplexV1TaskSparkTaskConfig.prototype['fileUris'] = undefined;

/**
 * @member {module:model/GoogleCloudDataplexV1TaskInfrastructureSpec} infrastructureSpec
 */
GoogleCloudDataplexV1TaskSparkTaskConfig.prototype['infrastructureSpec'] = undefined;

/**
 * The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris. The execution args are passed in as a sequence of named process arguments (--key=value).
 * @member {String} mainClass
 */
GoogleCloudDataplexV1TaskSparkTaskConfig.prototype['mainClass'] = undefined;

/**
 * The Cloud Storage URI of the jar file that contains the main class. The execution args are passed in as a sequence of named process arguments (--key=value).
 * @member {String} mainJarFileUri
 */
GoogleCloudDataplexV1TaskSparkTaskConfig.prototype['mainJarFileUri'] = undefined;

/**
 * The Gcloud Storage URI of the main Python file to use as the driver. Must be a .py file. The execution args are passed in as a sequence of named process arguments (--key=value).
 * @member {String} pythonScriptFile
 */
GoogleCloudDataplexV1TaskSparkTaskConfig.prototype['pythonScriptFile'] = undefined;

/**
 * The query text. The execution args are used to declare a set of script variables (set key=\"value\";).
 * @member {String} sqlScript
 */
GoogleCloudDataplexV1TaskSparkTaskConfig.prototype['sqlScript'] = undefined;

/**
 * A reference to a query file. This can be the Cloud Storage URI of the query file or it can the path to a SqlScript Content. The execution args are used to declare a set of script variables (set key=\"value\";).
 * @member {String} sqlScriptFile
 */
GoogleCloudDataplexV1TaskSparkTaskConfig.prototype['sqlScriptFile'] = undefined;






export default GoogleCloudDataplexV1TaskSparkTaskConfig;

