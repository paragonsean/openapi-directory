# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dataplex_v1_schema_partition_field import GoogleCloudDataplexV1SchemaPartitionField
from openapi_server.models.google_cloud_dataplex_v1_schema_schema_field import GoogleCloudDataplexV1SchemaSchemaField
from openapi_server import util


class GoogleCloudDataplexV1Schema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: List[GoogleCloudDataplexV1SchemaSchemaField]=None, partition_fields: List[GoogleCloudDataplexV1SchemaPartitionField]=None, partition_style: str=None, user_managed: bool=None):
        """GoogleCloudDataplexV1Schema - a model defined in OpenAPI

        :param fields: The fields of this GoogleCloudDataplexV1Schema.
        :param partition_fields: The partition_fields of this GoogleCloudDataplexV1Schema.
        :param partition_style: The partition_style of this GoogleCloudDataplexV1Schema.
        :param user_managed: The user_managed of this GoogleCloudDataplexV1Schema.
        """
        self.openapi_types = {
            'fields': List[GoogleCloudDataplexV1SchemaSchemaField],
            'partition_fields': List[GoogleCloudDataplexV1SchemaPartitionField],
            'partition_style': str,
            'user_managed': bool
        }

        self.attribute_map = {
            'fields': 'fields',
            'partition_fields': 'partitionFields',
            'partition_style': 'partitionStyle',
            'user_managed': 'userManaged'
        }

        self._fields = fields
        self._partition_fields = partition_fields
        self._partition_style = partition_style
        self._user_managed = user_managed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1Schema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1Schema of this GoogleCloudDataplexV1Schema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this GoogleCloudDataplexV1Schema.

        Optional. The sequence of fields describing data in table entities. Note: BigQuery SchemaFields are immutable.

        :return: The fields of this GoogleCloudDataplexV1Schema.
        :rtype: List[GoogleCloudDataplexV1SchemaSchemaField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this GoogleCloudDataplexV1Schema.

        Optional. The sequence of fields describing data in table entities. Note: BigQuery SchemaFields are immutable.

        :param fields: The fields of this GoogleCloudDataplexV1Schema.
        :type fields: List[GoogleCloudDataplexV1SchemaSchemaField]
        """

        self._fields = fields

    @property
    def partition_fields(self):
        """Gets the partition_fields of this GoogleCloudDataplexV1Schema.

        Optional. The sequence of fields describing the partition structure in entities. If this field is empty, there are no partitions within the data.

        :return: The partition_fields of this GoogleCloudDataplexV1Schema.
        :rtype: List[GoogleCloudDataplexV1SchemaPartitionField]
        """
        return self._partition_fields

    @partition_fields.setter
    def partition_fields(self, partition_fields):
        """Sets the partition_fields of this GoogleCloudDataplexV1Schema.

        Optional. The sequence of fields describing the partition structure in entities. If this field is empty, there are no partitions within the data.

        :param partition_fields: The partition_fields of this GoogleCloudDataplexV1Schema.
        :type partition_fields: List[GoogleCloudDataplexV1SchemaPartitionField]
        """

        self._partition_fields = partition_fields

    @property
    def partition_style(self):
        """Gets the partition_style of this GoogleCloudDataplexV1Schema.

        Optional. The structure of paths containing partition data within the entity.

        :return: The partition_style of this GoogleCloudDataplexV1Schema.
        :rtype: str
        """
        return self._partition_style

    @partition_style.setter
    def partition_style(self, partition_style):
        """Sets the partition_style of this GoogleCloudDataplexV1Schema.

        Optional. The structure of paths containing partition data within the entity.

        :param partition_style: The partition_style of this GoogleCloudDataplexV1Schema.
        :type partition_style: str
        """
        allowed_values = ["PARTITION_STYLE_UNSPECIFIED", "HIVE_COMPATIBLE"]  # noqa: E501
        if partition_style not in allowed_values:
            raise ValueError(
                "Invalid value for `partition_style` ({0}), must be one of {1}"
                .format(partition_style, allowed_values)
            )

        self._partition_style = partition_style

    @property
    def user_managed(self):
        """Gets the user_managed of this GoogleCloudDataplexV1Schema.

        Required. Set to true if user-managed or false if managed by Dataplex. The default is false (managed by Dataplex). Set to falseto enable Dataplex discovery to update the schema. including new data discovery, schema inference, and schema evolution. Users retain the ability to input and edit the schema. Dataplex treats schema input by the user as though produced by a previous Dataplex discovery operation, and it will evolve the schema and take action based on that treatment. Set to true to fully manage the entity schema. This setting guarantees that Dataplex will not change schema fields.

        :return: The user_managed of this GoogleCloudDataplexV1Schema.
        :rtype: bool
        """
        return self._user_managed

    @user_managed.setter
    def user_managed(self, user_managed):
        """Sets the user_managed of this GoogleCloudDataplexV1Schema.

        Required. Set to true if user-managed or false if managed by Dataplex. The default is false (managed by Dataplex). Set to falseto enable Dataplex discovery to update the schema. including new data discovery, schema inference, and schema evolution. Users retain the ability to input and edit the schema. Dataplex treats schema input by the user as though produced by a previous Dataplex discovery operation, and it will evolve the schema and take action based on that treatment. Set to true to fully manage the entity schema. This setting guarantees that Dataplex will not change schema fields.

        :param user_managed: The user_managed of this GoogleCloudDataplexV1Schema.
        :type user_managed: bool
        """

        self._user_managed = user_managed
