# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1ContentNotebook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kernel_type: str=None):
        """GoogleCloudDataplexV1ContentNotebook - a model defined in OpenAPI

        :param kernel_type: The kernel_type of this GoogleCloudDataplexV1ContentNotebook.
        """
        self.openapi_types = {
            'kernel_type': str
        }

        self.attribute_map = {
            'kernel_type': 'kernelType'
        }

        self._kernel_type = kernel_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1ContentNotebook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1ContentNotebook of this GoogleCloudDataplexV1ContentNotebook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kernel_type(self):
        """Gets the kernel_type of this GoogleCloudDataplexV1ContentNotebook.

        Required. Kernel Type of the notebook.

        :return: The kernel_type of this GoogleCloudDataplexV1ContentNotebook.
        :rtype: str
        """
        return self._kernel_type

    @kernel_type.setter
    def kernel_type(self, kernel_type):
        """Sets the kernel_type of this GoogleCloudDataplexV1ContentNotebook.

        Required. Kernel Type of the notebook.

        :param kernel_type: The kernel_type of this GoogleCloudDataplexV1ContentNotebook.
        :type kernel_type: str
        """
        allowed_values = ["KERNEL_TYPE_UNSPECIFIED", "PYTHON3"]  # noqa: E501
        if kernel_type not in allowed_values:
            raise ValueError(
                "Invalid value for `kernel_type` ({0}), must be one of {1}"
                .format(kernel_type, allowed_values)
            )

        self._kernel_type = kernel_type
