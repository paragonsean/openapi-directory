# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1JobEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, execution_trigger: str=None, job_id: str=None, message: str=None, retries: int=None, service: str=None, service_job: str=None, start_time: str=None, state: str=None, type: str=None):
        """GoogleCloudDataplexV1JobEvent - a model defined in OpenAPI

        :param end_time: The end_time of this GoogleCloudDataplexV1JobEvent.
        :param execution_trigger: The execution_trigger of this GoogleCloudDataplexV1JobEvent.
        :param job_id: The job_id of this GoogleCloudDataplexV1JobEvent.
        :param message: The message of this GoogleCloudDataplexV1JobEvent.
        :param retries: The retries of this GoogleCloudDataplexV1JobEvent.
        :param service: The service of this GoogleCloudDataplexV1JobEvent.
        :param service_job: The service_job of this GoogleCloudDataplexV1JobEvent.
        :param start_time: The start_time of this GoogleCloudDataplexV1JobEvent.
        :param state: The state of this GoogleCloudDataplexV1JobEvent.
        :param type: The type of this GoogleCloudDataplexV1JobEvent.
        """
        self.openapi_types = {
            'end_time': str,
            'execution_trigger': str,
            'job_id': str,
            'message': str,
            'retries': int,
            'service': str,
            'service_job': str,
            'start_time': str,
            'state': str,
            'type': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'execution_trigger': 'executionTrigger',
            'job_id': 'jobId',
            'message': 'message',
            'retries': 'retries',
            'service': 'service',
            'service_job': 'serviceJob',
            'start_time': 'startTime',
            'state': 'state',
            'type': 'type'
        }

        self._end_time = end_time
        self._execution_trigger = execution_trigger
        self._job_id = job_id
        self._message = message
        self._retries = retries
        self._service = service
        self._service_job = service_job
        self._start_time = start_time
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1JobEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1JobEvent of this GoogleCloudDataplexV1JobEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this GoogleCloudDataplexV1JobEvent.

        The time when the job ended running.

        :return: The end_time of this GoogleCloudDataplexV1JobEvent.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GoogleCloudDataplexV1JobEvent.

        The time when the job ended running.

        :param end_time: The end_time of this GoogleCloudDataplexV1JobEvent.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def execution_trigger(self):
        """Gets the execution_trigger of this GoogleCloudDataplexV1JobEvent.

        Job execution trigger.

        :return: The execution_trigger of this GoogleCloudDataplexV1JobEvent.
        :rtype: str
        """
        return self._execution_trigger

    @execution_trigger.setter
    def execution_trigger(self, execution_trigger):
        """Sets the execution_trigger of this GoogleCloudDataplexV1JobEvent.

        Job execution trigger.

        :param execution_trigger: The execution_trigger of this GoogleCloudDataplexV1JobEvent.
        :type execution_trigger: str
        """
        allowed_values = ["EXECUTION_TRIGGER_UNSPECIFIED", "TASK_CONFIG", "RUN_REQUEST"]  # noqa: E501
        if execution_trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_trigger` ({0}), must be one of {1}"
                .format(execution_trigger, allowed_values)
            )

        self._execution_trigger = execution_trigger

    @property
    def job_id(self):
        """Gets the job_id of this GoogleCloudDataplexV1JobEvent.

        The unique id identifying the job.

        :return: The job_id of this GoogleCloudDataplexV1JobEvent.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this GoogleCloudDataplexV1JobEvent.

        The unique id identifying the job.

        :param job_id: The job_id of this GoogleCloudDataplexV1JobEvent.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def message(self):
        """Gets the message of this GoogleCloudDataplexV1JobEvent.

        The log message.

        :return: The message of this GoogleCloudDataplexV1JobEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GoogleCloudDataplexV1JobEvent.

        The log message.

        :param message: The message of this GoogleCloudDataplexV1JobEvent.
        :type message: str
        """

        self._message = message

    @property
    def retries(self):
        """Gets the retries of this GoogleCloudDataplexV1JobEvent.

        The number of retries.

        :return: The retries of this GoogleCloudDataplexV1JobEvent.
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this GoogleCloudDataplexV1JobEvent.

        The number of retries.

        :param retries: The retries of this GoogleCloudDataplexV1JobEvent.
        :type retries: int
        """

        self._retries = retries

    @property
    def service(self):
        """Gets the service of this GoogleCloudDataplexV1JobEvent.

        The service used to execute the job.

        :return: The service of this GoogleCloudDataplexV1JobEvent.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this GoogleCloudDataplexV1JobEvent.

        The service used to execute the job.

        :param service: The service of this GoogleCloudDataplexV1JobEvent.
        :type service: str
        """
        allowed_values = ["SERVICE_UNSPECIFIED", "DATAPROC"]  # noqa: E501
        if service not in allowed_values:
            raise ValueError(
                "Invalid value for `service` ({0}), must be one of {1}"
                .format(service, allowed_values)
            )

        self._service = service

    @property
    def service_job(self):
        """Gets the service_job of this GoogleCloudDataplexV1JobEvent.

        The reference to the job within the service.

        :return: The service_job of this GoogleCloudDataplexV1JobEvent.
        :rtype: str
        """
        return self._service_job

    @service_job.setter
    def service_job(self, service_job):
        """Sets the service_job of this GoogleCloudDataplexV1JobEvent.

        The reference to the job within the service.

        :param service_job: The service_job of this GoogleCloudDataplexV1JobEvent.
        :type service_job: str
        """

        self._service_job = service_job

    @property
    def start_time(self):
        """Gets the start_time of this GoogleCloudDataplexV1JobEvent.

        The time when the job started running.

        :return: The start_time of this GoogleCloudDataplexV1JobEvent.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleCloudDataplexV1JobEvent.

        The time when the job started running.

        :param start_time: The start_time of this GoogleCloudDataplexV1JobEvent.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this GoogleCloudDataplexV1JobEvent.

        The job state on completion.

        :return: The state of this GoogleCloudDataplexV1JobEvent.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudDataplexV1JobEvent.

        The job state on completion.

        :param state: The state of this GoogleCloudDataplexV1JobEvent.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "SUCCEEDED", "FAILED", "CANCELLED", "ABORTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this GoogleCloudDataplexV1JobEvent.

        The type of the job.

        :return: The type of this GoogleCloudDataplexV1JobEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudDataplexV1JobEvent.

        The type of the job.

        :param type: The type of this GoogleCloudDataplexV1JobEvent.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "SPARK", "NOTEBOOK"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
