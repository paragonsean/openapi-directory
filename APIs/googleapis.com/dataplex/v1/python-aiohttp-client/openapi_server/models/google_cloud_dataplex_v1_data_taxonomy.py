# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1DataTaxonomy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_count: int=None, class_count: int=None, create_time: str=None, description: str=None, display_name: str=None, etag: str=None, labels: Dict[str, str]=None, name: str=None, uid: str=None, update_time: str=None):
        """GoogleCloudDataplexV1DataTaxonomy - a model defined in OpenAPI

        :param attribute_count: The attribute_count of this GoogleCloudDataplexV1DataTaxonomy.
        :param class_count: The class_count of this GoogleCloudDataplexV1DataTaxonomy.
        :param create_time: The create_time of this GoogleCloudDataplexV1DataTaxonomy.
        :param description: The description of this GoogleCloudDataplexV1DataTaxonomy.
        :param display_name: The display_name of this GoogleCloudDataplexV1DataTaxonomy.
        :param etag: The etag of this GoogleCloudDataplexV1DataTaxonomy.
        :param labels: The labels of this GoogleCloudDataplexV1DataTaxonomy.
        :param name: The name of this GoogleCloudDataplexV1DataTaxonomy.
        :param uid: The uid of this GoogleCloudDataplexV1DataTaxonomy.
        :param update_time: The update_time of this GoogleCloudDataplexV1DataTaxonomy.
        """
        self.openapi_types = {
            'attribute_count': int,
            'class_count': int,
            'create_time': str,
            'description': str,
            'display_name': str,
            'etag': str,
            'labels': Dict[str, str],
            'name': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'attribute_count': 'attributeCount',
            'class_count': 'classCount',
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'etag': 'etag',
            'labels': 'labels',
            'name': 'name',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._attribute_count = attribute_count
        self._class_count = class_count
        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._etag = etag
        self._labels = labels
        self._name = name
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1DataTaxonomy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1DataTaxonomy of this GoogleCloudDataplexV1DataTaxonomy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_count(self):
        """Gets the attribute_count of this GoogleCloudDataplexV1DataTaxonomy.

        Output only. The number of attributes in the DataTaxonomy.

        :return: The attribute_count of this GoogleCloudDataplexV1DataTaxonomy.
        :rtype: int
        """
        return self._attribute_count

    @attribute_count.setter
    def attribute_count(self, attribute_count):
        """Sets the attribute_count of this GoogleCloudDataplexV1DataTaxonomy.

        Output only. The number of attributes in the DataTaxonomy.

        :param attribute_count: The attribute_count of this GoogleCloudDataplexV1DataTaxonomy.
        :type attribute_count: int
        """

        self._attribute_count = attribute_count

    @property
    def class_count(self):
        """Gets the class_count of this GoogleCloudDataplexV1DataTaxonomy.

        Output only. The number of classes in the DataTaxonomy.

        :return: The class_count of this GoogleCloudDataplexV1DataTaxonomy.
        :rtype: int
        """
        return self._class_count

    @class_count.setter
    def class_count(self, class_count):
        """Sets the class_count of this GoogleCloudDataplexV1DataTaxonomy.

        Output only. The number of classes in the DataTaxonomy.

        :param class_count: The class_count of this GoogleCloudDataplexV1DataTaxonomy.
        :type class_count: int
        """

        self._class_count = class_count

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudDataplexV1DataTaxonomy.

        Output only. The time when the DataTaxonomy was created.

        :return: The create_time of this GoogleCloudDataplexV1DataTaxonomy.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudDataplexV1DataTaxonomy.

        Output only. The time when the DataTaxonomy was created.

        :param create_time: The create_time of this GoogleCloudDataplexV1DataTaxonomy.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this GoogleCloudDataplexV1DataTaxonomy.

        Optional. Description of the DataTaxonomy.

        :return: The description of this GoogleCloudDataplexV1DataTaxonomy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudDataplexV1DataTaxonomy.

        Optional. Description of the DataTaxonomy.

        :param description: The description of this GoogleCloudDataplexV1DataTaxonomy.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDataplexV1DataTaxonomy.

        Optional. User friendly display name.

        :return: The display_name of this GoogleCloudDataplexV1DataTaxonomy.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDataplexV1DataTaxonomy.

        Optional. User friendly display name.

        :param display_name: The display_name of this GoogleCloudDataplexV1DataTaxonomy.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudDataplexV1DataTaxonomy.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this GoogleCloudDataplexV1DataTaxonomy.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudDataplexV1DataTaxonomy.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this GoogleCloudDataplexV1DataTaxonomy.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudDataplexV1DataTaxonomy.

        Optional. User-defined labels for the DataTaxonomy.

        :return: The labels of this GoogleCloudDataplexV1DataTaxonomy.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudDataplexV1DataTaxonomy.

        Optional. User-defined labels for the DataTaxonomy.

        :param labels: The labels of this GoogleCloudDataplexV1DataTaxonomy.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this GoogleCloudDataplexV1DataTaxonomy.

        Output only. The relative resource name of the DataTaxonomy, of the form: projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}.

        :return: The name of this GoogleCloudDataplexV1DataTaxonomy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDataplexV1DataTaxonomy.

        Output only. The relative resource name of the DataTaxonomy, of the form: projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}.

        :param name: The name of this GoogleCloudDataplexV1DataTaxonomy.
        :type name: str
        """

        self._name = name

    @property
    def uid(self):
        """Gets the uid of this GoogleCloudDataplexV1DataTaxonomy.

        Output only. System generated globally unique ID for the dataTaxonomy. This ID will be different if the DataTaxonomy is deleted and re-created with the same name.

        :return: The uid of this GoogleCloudDataplexV1DataTaxonomy.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GoogleCloudDataplexV1DataTaxonomy.

        Output only. System generated globally unique ID for the dataTaxonomy. This ID will be different if the DataTaxonomy is deleted and re-created with the same name.

        :param uid: The uid of this GoogleCloudDataplexV1DataTaxonomy.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudDataplexV1DataTaxonomy.

        Output only. The time when the DataTaxonomy was last updated.

        :return: The update_time of this GoogleCloudDataplexV1DataTaxonomy.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudDataplexV1DataTaxonomy.

        Output only. The time when the DataTaxonomy was last updated.

        :param update_time: The update_time of this GoogleCloudDataplexV1DataTaxonomy.
        :type update_time: str
        """

        self._update_time = update_time
