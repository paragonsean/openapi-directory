# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1AssetResourceStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, managed_access_identity: str=None, message: str=None, state: str=None, update_time: str=None):
        """GoogleCloudDataplexV1AssetResourceStatus - a model defined in OpenAPI

        :param managed_access_identity: The managed_access_identity of this GoogleCloudDataplexV1AssetResourceStatus.
        :param message: The message of this GoogleCloudDataplexV1AssetResourceStatus.
        :param state: The state of this GoogleCloudDataplexV1AssetResourceStatus.
        :param update_time: The update_time of this GoogleCloudDataplexV1AssetResourceStatus.
        """
        self.openapi_types = {
            'managed_access_identity': str,
            'message': str,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'managed_access_identity': 'managedAccessIdentity',
            'message': 'message',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._managed_access_identity = managed_access_identity
        self._message = message
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1AssetResourceStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1AssetResourceStatus of this GoogleCloudDataplexV1AssetResourceStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def managed_access_identity(self):
        """Gets the managed_access_identity of this GoogleCloudDataplexV1AssetResourceStatus.

        Output only. Service account associated with the BigQuery Connection.

        :return: The managed_access_identity of this GoogleCloudDataplexV1AssetResourceStatus.
        :rtype: str
        """
        return self._managed_access_identity

    @managed_access_identity.setter
    def managed_access_identity(self, managed_access_identity):
        """Sets the managed_access_identity of this GoogleCloudDataplexV1AssetResourceStatus.

        Output only. Service account associated with the BigQuery Connection.

        :param managed_access_identity: The managed_access_identity of this GoogleCloudDataplexV1AssetResourceStatus.
        :type managed_access_identity: str
        """

        self._managed_access_identity = managed_access_identity

    @property
    def message(self):
        """Gets the message of this GoogleCloudDataplexV1AssetResourceStatus.

        Additional information about the current state.

        :return: The message of this GoogleCloudDataplexV1AssetResourceStatus.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GoogleCloudDataplexV1AssetResourceStatus.

        Additional information about the current state.

        :param message: The message of this GoogleCloudDataplexV1AssetResourceStatus.
        :type message: str
        """

        self._message = message

    @property
    def state(self):
        """Gets the state of this GoogleCloudDataplexV1AssetResourceStatus.

        The current state of the managed resource.

        :return: The state of this GoogleCloudDataplexV1AssetResourceStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudDataplexV1AssetResourceStatus.

        The current state of the managed resource.

        :param state: The state of this GoogleCloudDataplexV1AssetResourceStatus.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "READY", "ERROR"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudDataplexV1AssetResourceStatus.

        Last update time of the status.

        :return: The update_time of this GoogleCloudDataplexV1AssetResourceStatus.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudDataplexV1AssetResourceStatus.

        Last update time of the status.

        :param update_time: The update_time of this GoogleCloudDataplexV1AssetResourceStatus.
        :type update_time: str
        """

        self._update_time = update_time
