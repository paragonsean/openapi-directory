# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1ActionInvalidDataPartition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expected_structure: str=None):
        """GoogleCloudDataplexV1ActionInvalidDataPartition - a model defined in OpenAPI

        :param expected_structure: The expected_structure of this GoogleCloudDataplexV1ActionInvalidDataPartition.
        """
        self.openapi_types = {
            'expected_structure': str
        }

        self.attribute_map = {
            'expected_structure': 'expectedStructure'
        }

        self._expected_structure = expected_structure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1ActionInvalidDataPartition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1ActionInvalidDataPartition of this GoogleCloudDataplexV1ActionInvalidDataPartition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected_structure(self):
        """Gets the expected_structure of this GoogleCloudDataplexV1ActionInvalidDataPartition.

        The issue type of InvalidDataPartition.

        :return: The expected_structure of this GoogleCloudDataplexV1ActionInvalidDataPartition.
        :rtype: str
        """
        return self._expected_structure

    @expected_structure.setter
    def expected_structure(self, expected_structure):
        """Sets the expected_structure of this GoogleCloudDataplexV1ActionInvalidDataPartition.

        The issue type of InvalidDataPartition.

        :param expected_structure: The expected_structure of this GoogleCloudDataplexV1ActionInvalidDataPartition.
        :type expected_structure: str
        """
        allowed_values = ["PARTITION_STRUCTURE_UNSPECIFIED", "CONSISTENT_KEYS", "HIVE_STYLE_KEYS"]  # noqa: E501
        if expected_structure not in allowed_values:
            raise ValueError(
                "Invalid value for `expected_structure` ({0}), must be one of {1}"
                .format(expected_structure, allowed_values)
            )

        self._expected_structure = expected_structure
