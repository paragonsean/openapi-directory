# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1TaskExecutionSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args: Dict[str, str]=None, kms_key: str=None, max_job_execution_lifetime: str=None, project: str=None, service_account: str=None):
        """GoogleCloudDataplexV1TaskExecutionSpec - a model defined in OpenAPI

        :param args: The args of this GoogleCloudDataplexV1TaskExecutionSpec.
        :param kms_key: The kms_key of this GoogleCloudDataplexV1TaskExecutionSpec.
        :param max_job_execution_lifetime: The max_job_execution_lifetime of this GoogleCloudDataplexV1TaskExecutionSpec.
        :param project: The project of this GoogleCloudDataplexV1TaskExecutionSpec.
        :param service_account: The service_account of this GoogleCloudDataplexV1TaskExecutionSpec.
        """
        self.openapi_types = {
            'args': Dict[str, str],
            'kms_key': str,
            'max_job_execution_lifetime': str,
            'project': str,
            'service_account': str
        }

        self.attribute_map = {
            'args': 'args',
            'kms_key': 'kmsKey',
            'max_job_execution_lifetime': 'maxJobExecutionLifetime',
            'project': 'project',
            'service_account': 'serviceAccount'
        }

        self._args = args
        self._kms_key = kms_key
        self._max_job_execution_lifetime = max_job_execution_lifetime
        self._project = project
        self._service_account = service_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1TaskExecutionSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1TaskExecutionSpec of this GoogleCloudDataplexV1TaskExecutionSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self):
        """Gets the args of this GoogleCloudDataplexV1TaskExecutionSpec.

        Optional. The arguments to pass to the task. The args can use placeholders of the format ${placeholder} as part of key/value string. These will be interpolated before passing the args to the driver. Currently supported placeholders: - ${task_id} - ${job_time} To pass positional args, set the key as TASK_ARGS. The value should be a comma-separated string of all the positional arguments. To use a delimiter other than comma, refer to https://cloud.google.com/sdk/gcloud/reference/topic/escaping. In case of other keys being present in the args, then TASK_ARGS will be passed as the last argument.

        :return: The args of this GoogleCloudDataplexV1TaskExecutionSpec.
        :rtype: Dict[str, str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this GoogleCloudDataplexV1TaskExecutionSpec.

        Optional. The arguments to pass to the task. The args can use placeholders of the format ${placeholder} as part of key/value string. These will be interpolated before passing the args to the driver. Currently supported placeholders: - ${task_id} - ${job_time} To pass positional args, set the key as TASK_ARGS. The value should be a comma-separated string of all the positional arguments. To use a delimiter other than comma, refer to https://cloud.google.com/sdk/gcloud/reference/topic/escaping. In case of other keys being present in the args, then TASK_ARGS will be passed as the last argument.

        :param args: The args of this GoogleCloudDataplexV1TaskExecutionSpec.
        :type args: Dict[str, str]
        """

        self._args = args

    @property
    def kms_key(self):
        """Gets the kms_key of this GoogleCloudDataplexV1TaskExecutionSpec.

        Optional. The Cloud KMS key to use for encryption, of the form: projects/{project_number}/locations/{location_id}/keyRings/{key-ring-name}/cryptoKeys/{key-name}.

        :return: The kms_key of this GoogleCloudDataplexV1TaskExecutionSpec.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this GoogleCloudDataplexV1TaskExecutionSpec.

        Optional. The Cloud KMS key to use for encryption, of the form: projects/{project_number}/locations/{location_id}/keyRings/{key-ring-name}/cryptoKeys/{key-name}.

        :param kms_key: The kms_key of this GoogleCloudDataplexV1TaskExecutionSpec.
        :type kms_key: str
        """

        self._kms_key = kms_key

    @property
    def max_job_execution_lifetime(self):
        """Gets the max_job_execution_lifetime of this GoogleCloudDataplexV1TaskExecutionSpec.

        Optional. The maximum duration after which the job execution is expired.

        :return: The max_job_execution_lifetime of this GoogleCloudDataplexV1TaskExecutionSpec.
        :rtype: str
        """
        return self._max_job_execution_lifetime

    @max_job_execution_lifetime.setter
    def max_job_execution_lifetime(self, max_job_execution_lifetime):
        """Sets the max_job_execution_lifetime of this GoogleCloudDataplexV1TaskExecutionSpec.

        Optional. The maximum duration after which the job execution is expired.

        :param max_job_execution_lifetime: The max_job_execution_lifetime of this GoogleCloudDataplexV1TaskExecutionSpec.
        :type max_job_execution_lifetime: str
        """

        self._max_job_execution_lifetime = max_job_execution_lifetime

    @property
    def project(self):
        """Gets the project of this GoogleCloudDataplexV1TaskExecutionSpec.

        Optional. The project in which jobs are run. By default, the project containing the Lake is used. If a project is provided, the ExecutionSpec.service_account must belong to this project.

        :return: The project of this GoogleCloudDataplexV1TaskExecutionSpec.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this GoogleCloudDataplexV1TaskExecutionSpec.

        Optional. The project in which jobs are run. By default, the project containing the Lake is used. If a project is provided, the ExecutionSpec.service_account must belong to this project.

        :param project: The project of this GoogleCloudDataplexV1TaskExecutionSpec.
        :type project: str
        """

        self._project = project

    @property
    def service_account(self):
        """Gets the service_account of this GoogleCloudDataplexV1TaskExecutionSpec.

        Required. Service account to use to execute a task. If not provided, the default Compute service account for the project is used.

        :return: The service_account of this GoogleCloudDataplexV1TaskExecutionSpec.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this GoogleCloudDataplexV1TaskExecutionSpec.

        Required. Service account to use to execute a task. If not provided, the default Compute service account for the project is used.

        :param service_account: The service_account of this GoogleCloudDataplexV1TaskExecutionSpec.
        :type service_account: str
        """

        self._service_account = service_account
