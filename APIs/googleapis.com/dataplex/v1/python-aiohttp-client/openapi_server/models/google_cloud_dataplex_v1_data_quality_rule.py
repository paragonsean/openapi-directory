# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dataplex_v1_data_quality_rule_range_expectation import GoogleCloudDataplexV1DataQualityRuleRangeExpectation
from openapi_server.models.google_cloud_dataplex_v1_data_quality_rule_regex_expectation import GoogleCloudDataplexV1DataQualityRuleRegexExpectation
from openapi_server.models.google_cloud_dataplex_v1_data_quality_rule_row_condition_expectation import GoogleCloudDataplexV1DataQualityRuleRowConditionExpectation
from openapi_server.models.google_cloud_dataplex_v1_data_quality_rule_set_expectation import GoogleCloudDataplexV1DataQualityRuleSetExpectation
from openapi_server.models.google_cloud_dataplex_v1_data_quality_rule_statistic_range_expectation import GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation
from openapi_server.models.google_cloud_dataplex_v1_data_quality_rule_table_condition_expectation import GoogleCloudDataplexV1DataQualityRuleTableConditionExpectation
from openapi_server import util


class GoogleCloudDataplexV1DataQualityRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column: str=None, description: str=None, dimension: str=None, ignore_null: bool=None, name: str=None, non_null_expectation: object=None, range_expectation: GoogleCloudDataplexV1DataQualityRuleRangeExpectation=None, regex_expectation: GoogleCloudDataplexV1DataQualityRuleRegexExpectation=None, row_condition_expectation: GoogleCloudDataplexV1DataQualityRuleRowConditionExpectation=None, set_expectation: GoogleCloudDataplexV1DataQualityRuleSetExpectation=None, statistic_range_expectation: GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation=None, table_condition_expectation: GoogleCloudDataplexV1DataQualityRuleTableConditionExpectation=None, threshold: float=None, uniqueness_expectation: object=None):
        """GoogleCloudDataplexV1DataQualityRule - a model defined in OpenAPI

        :param column: The column of this GoogleCloudDataplexV1DataQualityRule.
        :param description: The description of this GoogleCloudDataplexV1DataQualityRule.
        :param dimension: The dimension of this GoogleCloudDataplexV1DataQualityRule.
        :param ignore_null: The ignore_null of this GoogleCloudDataplexV1DataQualityRule.
        :param name: The name of this GoogleCloudDataplexV1DataQualityRule.
        :param non_null_expectation: The non_null_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :param range_expectation: The range_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :param regex_expectation: The regex_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :param row_condition_expectation: The row_condition_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :param set_expectation: The set_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :param statistic_range_expectation: The statistic_range_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :param table_condition_expectation: The table_condition_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :param threshold: The threshold of this GoogleCloudDataplexV1DataQualityRule.
        :param uniqueness_expectation: The uniqueness_expectation of this GoogleCloudDataplexV1DataQualityRule.
        """
        self.openapi_types = {
            'column': str,
            'description': str,
            'dimension': str,
            'ignore_null': bool,
            'name': str,
            'non_null_expectation': object,
            'range_expectation': GoogleCloudDataplexV1DataQualityRuleRangeExpectation,
            'regex_expectation': GoogleCloudDataplexV1DataQualityRuleRegexExpectation,
            'row_condition_expectation': GoogleCloudDataplexV1DataQualityRuleRowConditionExpectation,
            'set_expectation': GoogleCloudDataplexV1DataQualityRuleSetExpectation,
            'statistic_range_expectation': GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation,
            'table_condition_expectation': GoogleCloudDataplexV1DataQualityRuleTableConditionExpectation,
            'threshold': float,
            'uniqueness_expectation': object
        }

        self.attribute_map = {
            'column': 'column',
            'description': 'description',
            'dimension': 'dimension',
            'ignore_null': 'ignoreNull',
            'name': 'name',
            'non_null_expectation': 'nonNullExpectation',
            'range_expectation': 'rangeExpectation',
            'regex_expectation': 'regexExpectation',
            'row_condition_expectation': 'rowConditionExpectation',
            'set_expectation': 'setExpectation',
            'statistic_range_expectation': 'statisticRangeExpectation',
            'table_condition_expectation': 'tableConditionExpectation',
            'threshold': 'threshold',
            'uniqueness_expectation': 'uniquenessExpectation'
        }

        self._column = column
        self._description = description
        self._dimension = dimension
        self._ignore_null = ignore_null
        self._name = name
        self._non_null_expectation = non_null_expectation
        self._range_expectation = range_expectation
        self._regex_expectation = regex_expectation
        self._row_condition_expectation = row_condition_expectation
        self._set_expectation = set_expectation
        self._statistic_range_expectation = statistic_range_expectation
        self._table_condition_expectation = table_condition_expectation
        self._threshold = threshold
        self._uniqueness_expectation = uniqueness_expectation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1DataQualityRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1DataQualityRule of this GoogleCloudDataplexV1DataQualityRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column(self):
        """Gets the column of this GoogleCloudDataplexV1DataQualityRule.

        Optional. The unnested column which this rule is evaluated against.

        :return: The column of this GoogleCloudDataplexV1DataQualityRule.
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this GoogleCloudDataplexV1DataQualityRule.

        Optional. The unnested column which this rule is evaluated against.

        :param column: The column of this GoogleCloudDataplexV1DataQualityRule.
        :type column: str
        """

        self._column = column

    @property
    def description(self):
        """Gets the description of this GoogleCloudDataplexV1DataQualityRule.

        Optional. Description of the rule. The maximum length is 1,024 characters.

        :return: The description of this GoogleCloudDataplexV1DataQualityRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudDataplexV1DataQualityRule.

        Optional. Description of the rule. The maximum length is 1,024 characters.

        :param description: The description of this GoogleCloudDataplexV1DataQualityRule.
        :type description: str
        """

        self._description = description

    @property
    def dimension(self):
        """Gets the dimension of this GoogleCloudDataplexV1DataQualityRule.

        Required. The dimension a rule belongs to. Results are also aggregated at the dimension level. Supported dimensions are \"COMPLETENESS\", \"ACCURACY\", \"CONSISTENCY\", \"VALIDITY\", \"UNIQUENESS\", \"INTEGRITY\"

        :return: The dimension of this GoogleCloudDataplexV1DataQualityRule.
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this GoogleCloudDataplexV1DataQualityRule.

        Required. The dimension a rule belongs to. Results are also aggregated at the dimension level. Supported dimensions are \"COMPLETENESS\", \"ACCURACY\", \"CONSISTENCY\", \"VALIDITY\", \"UNIQUENESS\", \"INTEGRITY\"

        :param dimension: The dimension of this GoogleCloudDataplexV1DataQualityRule.
        :type dimension: str
        """

        self._dimension = dimension

    @property
    def ignore_null(self):
        """Gets the ignore_null of this GoogleCloudDataplexV1DataQualityRule.

        Optional. Rows with null values will automatically fail a rule, unless ignore_null is true. In that case, such null rows are trivially considered passing.This field is only valid for the following type of rules: RangeExpectation RegexExpectation SetExpectation UniquenessExpectation

        :return: The ignore_null of this GoogleCloudDataplexV1DataQualityRule.
        :rtype: bool
        """
        return self._ignore_null

    @ignore_null.setter
    def ignore_null(self, ignore_null):
        """Sets the ignore_null of this GoogleCloudDataplexV1DataQualityRule.

        Optional. Rows with null values will automatically fail a rule, unless ignore_null is true. In that case, such null rows are trivially considered passing.This field is only valid for the following type of rules: RangeExpectation RegexExpectation SetExpectation UniquenessExpectation

        :param ignore_null: The ignore_null of this GoogleCloudDataplexV1DataQualityRule.
        :type ignore_null: bool
        """

        self._ignore_null = ignore_null

    @property
    def name(self):
        """Gets the name of this GoogleCloudDataplexV1DataQualityRule.

        Optional. A mutable name for the rule. The name must contain only letters (a-z, A-Z), numbers (0-9), or hyphens (-). The maximum length is 63 characters. Must start with a letter. Must end with a number or a letter.

        :return: The name of this GoogleCloudDataplexV1DataQualityRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDataplexV1DataQualityRule.

        Optional. A mutable name for the rule. The name must contain only letters (a-z, A-Z), numbers (0-9), or hyphens (-). The maximum length is 63 characters. Must start with a letter. Must end with a number or a letter.

        :param name: The name of this GoogleCloudDataplexV1DataQualityRule.
        :type name: str
        """

        self._name = name

    @property
    def non_null_expectation(self):
        """Gets the non_null_expectation of this GoogleCloudDataplexV1DataQualityRule.

        Evaluates whether each column value is null.

        :return: The non_null_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :rtype: object
        """
        return self._non_null_expectation

    @non_null_expectation.setter
    def non_null_expectation(self, non_null_expectation):
        """Sets the non_null_expectation of this GoogleCloudDataplexV1DataQualityRule.

        Evaluates whether each column value is null.

        :param non_null_expectation: The non_null_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :type non_null_expectation: object
        """

        self._non_null_expectation = non_null_expectation

    @property
    def range_expectation(self):
        """Gets the range_expectation of this GoogleCloudDataplexV1DataQualityRule.


        :return: The range_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :rtype: GoogleCloudDataplexV1DataQualityRuleRangeExpectation
        """
        return self._range_expectation

    @range_expectation.setter
    def range_expectation(self, range_expectation):
        """Sets the range_expectation of this GoogleCloudDataplexV1DataQualityRule.


        :param range_expectation: The range_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :type range_expectation: GoogleCloudDataplexV1DataQualityRuleRangeExpectation
        """

        self._range_expectation = range_expectation

    @property
    def regex_expectation(self):
        """Gets the regex_expectation of this GoogleCloudDataplexV1DataQualityRule.


        :return: The regex_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :rtype: GoogleCloudDataplexV1DataQualityRuleRegexExpectation
        """
        return self._regex_expectation

    @regex_expectation.setter
    def regex_expectation(self, regex_expectation):
        """Sets the regex_expectation of this GoogleCloudDataplexV1DataQualityRule.


        :param regex_expectation: The regex_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :type regex_expectation: GoogleCloudDataplexV1DataQualityRuleRegexExpectation
        """

        self._regex_expectation = regex_expectation

    @property
    def row_condition_expectation(self):
        """Gets the row_condition_expectation of this GoogleCloudDataplexV1DataQualityRule.


        :return: The row_condition_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :rtype: GoogleCloudDataplexV1DataQualityRuleRowConditionExpectation
        """
        return self._row_condition_expectation

    @row_condition_expectation.setter
    def row_condition_expectation(self, row_condition_expectation):
        """Sets the row_condition_expectation of this GoogleCloudDataplexV1DataQualityRule.


        :param row_condition_expectation: The row_condition_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :type row_condition_expectation: GoogleCloudDataplexV1DataQualityRuleRowConditionExpectation
        """

        self._row_condition_expectation = row_condition_expectation

    @property
    def set_expectation(self):
        """Gets the set_expectation of this GoogleCloudDataplexV1DataQualityRule.


        :return: The set_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :rtype: GoogleCloudDataplexV1DataQualityRuleSetExpectation
        """
        return self._set_expectation

    @set_expectation.setter
    def set_expectation(self, set_expectation):
        """Sets the set_expectation of this GoogleCloudDataplexV1DataQualityRule.


        :param set_expectation: The set_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :type set_expectation: GoogleCloudDataplexV1DataQualityRuleSetExpectation
        """

        self._set_expectation = set_expectation

    @property
    def statistic_range_expectation(self):
        """Gets the statistic_range_expectation of this GoogleCloudDataplexV1DataQualityRule.


        :return: The statistic_range_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :rtype: GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation
        """
        return self._statistic_range_expectation

    @statistic_range_expectation.setter
    def statistic_range_expectation(self, statistic_range_expectation):
        """Sets the statistic_range_expectation of this GoogleCloudDataplexV1DataQualityRule.


        :param statistic_range_expectation: The statistic_range_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :type statistic_range_expectation: GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation
        """

        self._statistic_range_expectation = statistic_range_expectation

    @property
    def table_condition_expectation(self):
        """Gets the table_condition_expectation of this GoogleCloudDataplexV1DataQualityRule.


        :return: The table_condition_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :rtype: GoogleCloudDataplexV1DataQualityRuleTableConditionExpectation
        """
        return self._table_condition_expectation

    @table_condition_expectation.setter
    def table_condition_expectation(self, table_condition_expectation):
        """Sets the table_condition_expectation of this GoogleCloudDataplexV1DataQualityRule.


        :param table_condition_expectation: The table_condition_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :type table_condition_expectation: GoogleCloudDataplexV1DataQualityRuleTableConditionExpectation
        """

        self._table_condition_expectation = table_condition_expectation

    @property
    def threshold(self):
        """Gets the threshold of this GoogleCloudDataplexV1DataQualityRule.

        Optional. The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of 0.0, 1.0.0 indicates default value (i.e. 1.0).This field is only valid for row-level type rules.

        :return: The threshold of this GoogleCloudDataplexV1DataQualityRule.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this GoogleCloudDataplexV1DataQualityRule.

        Optional. The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of 0.0, 1.0.0 indicates default value (i.e. 1.0).This field is only valid for row-level type rules.

        :param threshold: The threshold of this GoogleCloudDataplexV1DataQualityRule.
        :type threshold: float
        """

        self._threshold = threshold

    @property
    def uniqueness_expectation(self):
        """Gets the uniqueness_expectation of this GoogleCloudDataplexV1DataQualityRule.

        Evaluates whether the column has duplicates.

        :return: The uniqueness_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :rtype: object
        """
        return self._uniqueness_expectation

    @uniqueness_expectation.setter
    def uniqueness_expectation(self, uniqueness_expectation):
        """Sets the uniqueness_expectation of this GoogleCloudDataplexV1DataQualityRule.

        Evaluates whether the column has duplicates.

        :param uniqueness_expectation: The uniqueness_expectation of this GoogleCloudDataplexV1DataQualityRule.
        :type uniqueness_expectation: object
        """

        self._uniqueness_expectation = uniqueness_expectation
