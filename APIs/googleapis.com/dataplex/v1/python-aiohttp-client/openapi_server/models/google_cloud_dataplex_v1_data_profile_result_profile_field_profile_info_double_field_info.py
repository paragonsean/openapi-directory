# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average: float=None, max: float=None, min: float=None, quartiles: List[float]=None, standard_deviation: float=None):
        """GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo - a model defined in OpenAPI

        :param average: The average of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        :param max: The max of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        :param min: The min of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        :param quartiles: The quartiles of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        :param standard_deviation: The standard_deviation of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        """
        self.openapi_types = {
            'average': float,
            'max': float,
            'min': float,
            'quartiles': List[float],
            'standard_deviation': float
        }

        self.attribute_map = {
            'average': 'average',
            'max': 'max',
            'min': 'min',
            'quartiles': 'quartiles',
            'standard_deviation': 'standardDeviation'
        }

        self._average = average
        self._max = max
        self._min = min
        self._quartiles = quartiles
        self._standard_deviation = standard_deviation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average(self):
        """Gets the average of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.

        Average of non-null values in the scanned data. NaN, if the field has a NaN.

        :return: The average of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.

        Average of non-null values in the scanned data. NaN, if the field has a NaN.

        :param average: The average of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        :type average: float
        """

        self._average = average

    @property
    def max(self):
        """Gets the max of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.

        Maximum of non-null values in the scanned data. NaN, if the field has a NaN.

        :return: The max of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.

        Maximum of non-null values in the scanned data. NaN, if the field has a NaN.

        :param max: The max of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        :type max: float
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.

        Minimum of non-null values in the scanned data. NaN, if the field has a NaN.

        :return: The min of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.

        Minimum of non-null values in the scanned data. NaN, if the field has a NaN.

        :param min: The min of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        :type min: float
        """

        self._min = min

    @property
    def quartiles(self):
        """Gets the quartiles of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.

        A quartile divides the number of data points into four parts, or quarters, of more-or-less equal size. Three main quartiles used are: The first quartile (Q1) splits off the lowest 25% of data from the highest 75%. It is also known as the lower or 25th empirical quartile, as 25% of the data is below this point. The second quartile (Q2) is the median of a data set. So, 50% of the data lies below this point. The third quartile (Q3) splits off the highest 25% of data from the lowest 75%. It is known as the upper or 75th empirical quartile, as 75% of the data lies below this point. Here, the quartiles is provided as an ordered list of quartile values for the scanned data, occurring in order Q1, median, Q3.

        :return: The quartiles of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        :rtype: List[float]
        """
        return self._quartiles

    @quartiles.setter
    def quartiles(self, quartiles):
        """Sets the quartiles of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.

        A quartile divides the number of data points into four parts, or quarters, of more-or-less equal size. Three main quartiles used are: The first quartile (Q1) splits off the lowest 25% of data from the highest 75%. It is also known as the lower or 25th empirical quartile, as 25% of the data is below this point. The second quartile (Q2) is the median of a data set. So, 50% of the data lies below this point. The third quartile (Q3) splits off the highest 25% of data from the lowest 75%. It is known as the upper or 75th empirical quartile, as 75% of the data lies below this point. Here, the quartiles is provided as an ordered list of quartile values for the scanned data, occurring in order Q1, median, Q3.

        :param quartiles: The quartiles of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        :type quartiles: List[float]
        """

        self._quartiles = quartiles

    @property
    def standard_deviation(self):
        """Gets the standard_deviation of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.

        Standard deviation of non-null values in the scanned data. NaN, if the field has a NaN.

        :return: The standard_deviation of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        :rtype: float
        """
        return self._standard_deviation

    @standard_deviation.setter
    def standard_deviation(self, standard_deviation):
        """Sets the standard_deviation of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.

        Standard deviation of non-null values in the scanned data. NaN, if the field has a NaN.

        :param standard_deviation: The standard_deviation of this GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo.
        :type standard_deviation: float
        """

        self._standard_deviation = standard_deviation
