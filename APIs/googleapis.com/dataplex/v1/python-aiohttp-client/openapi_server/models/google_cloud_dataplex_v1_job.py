# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dataplex_v1_task_execution_spec import GoogleCloudDataplexV1TaskExecutionSpec
from openapi_server import util


class GoogleCloudDataplexV1Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, execution_spec: GoogleCloudDataplexV1TaskExecutionSpec=None, labels: Dict[str, str]=None, message: str=None, name: str=None, retry_count: int=None, service: str=None, service_job: str=None, start_time: str=None, state: str=None, trigger: str=None, uid: str=None):
        """GoogleCloudDataplexV1Job - a model defined in OpenAPI

        :param end_time: The end_time of this GoogleCloudDataplexV1Job.
        :param execution_spec: The execution_spec of this GoogleCloudDataplexV1Job.
        :param labels: The labels of this GoogleCloudDataplexV1Job.
        :param message: The message of this GoogleCloudDataplexV1Job.
        :param name: The name of this GoogleCloudDataplexV1Job.
        :param retry_count: The retry_count of this GoogleCloudDataplexV1Job.
        :param service: The service of this GoogleCloudDataplexV1Job.
        :param service_job: The service_job of this GoogleCloudDataplexV1Job.
        :param start_time: The start_time of this GoogleCloudDataplexV1Job.
        :param state: The state of this GoogleCloudDataplexV1Job.
        :param trigger: The trigger of this GoogleCloudDataplexV1Job.
        :param uid: The uid of this GoogleCloudDataplexV1Job.
        """
        self.openapi_types = {
            'end_time': str,
            'execution_spec': GoogleCloudDataplexV1TaskExecutionSpec,
            'labels': Dict[str, str],
            'message': str,
            'name': str,
            'retry_count': int,
            'service': str,
            'service_job': str,
            'start_time': str,
            'state': str,
            'trigger': str,
            'uid': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'execution_spec': 'executionSpec',
            'labels': 'labels',
            'message': 'message',
            'name': 'name',
            'retry_count': 'retryCount',
            'service': 'service',
            'service_job': 'serviceJob',
            'start_time': 'startTime',
            'state': 'state',
            'trigger': 'trigger',
            'uid': 'uid'
        }

        self._end_time = end_time
        self._execution_spec = execution_spec
        self._labels = labels
        self._message = message
        self._name = name
        self._retry_count = retry_count
        self._service = service
        self._service_job = service_job
        self._start_time = start_time
        self._state = state
        self._trigger = trigger
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1Job of this GoogleCloudDataplexV1Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this GoogleCloudDataplexV1Job.

        Output only. The time when the job ended.

        :return: The end_time of this GoogleCloudDataplexV1Job.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GoogleCloudDataplexV1Job.

        Output only. The time when the job ended.

        :param end_time: The end_time of this GoogleCloudDataplexV1Job.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def execution_spec(self):
        """Gets the execution_spec of this GoogleCloudDataplexV1Job.


        :return: The execution_spec of this GoogleCloudDataplexV1Job.
        :rtype: GoogleCloudDataplexV1TaskExecutionSpec
        """
        return self._execution_spec

    @execution_spec.setter
    def execution_spec(self, execution_spec):
        """Sets the execution_spec of this GoogleCloudDataplexV1Job.


        :param execution_spec: The execution_spec of this GoogleCloudDataplexV1Job.
        :type execution_spec: GoogleCloudDataplexV1TaskExecutionSpec
        """

        self._execution_spec = execution_spec

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudDataplexV1Job.

        Output only. User-defined labels for the task.

        :return: The labels of this GoogleCloudDataplexV1Job.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudDataplexV1Job.

        Output only. User-defined labels for the task.

        :param labels: The labels of this GoogleCloudDataplexV1Job.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def message(self):
        """Gets the message of this GoogleCloudDataplexV1Job.

        Output only. Additional information about the current state.

        :return: The message of this GoogleCloudDataplexV1Job.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GoogleCloudDataplexV1Job.

        Output only. Additional information about the current state.

        :param message: The message of this GoogleCloudDataplexV1Job.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this GoogleCloudDataplexV1Job.

        Output only. The relative resource name of the job, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/tasks/{task_id}/jobs/{job_id}.

        :return: The name of this GoogleCloudDataplexV1Job.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDataplexV1Job.

        Output only. The relative resource name of the job, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/tasks/{task_id}/jobs/{job_id}.

        :param name: The name of this GoogleCloudDataplexV1Job.
        :type name: str
        """

        self._name = name

    @property
    def retry_count(self):
        """Gets the retry_count of this GoogleCloudDataplexV1Job.

        Output only. The number of times the job has been retried (excluding the initial attempt).

        :return: The retry_count of this GoogleCloudDataplexV1Job.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this GoogleCloudDataplexV1Job.

        Output only. The number of times the job has been retried (excluding the initial attempt).

        :param retry_count: The retry_count of this GoogleCloudDataplexV1Job.
        :type retry_count: int
        """

        self._retry_count = retry_count

    @property
    def service(self):
        """Gets the service of this GoogleCloudDataplexV1Job.

        Output only. The underlying service running a job.

        :return: The service of this GoogleCloudDataplexV1Job.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this GoogleCloudDataplexV1Job.

        Output only. The underlying service running a job.

        :param service: The service of this GoogleCloudDataplexV1Job.
        :type service: str
        """
        allowed_values = ["SERVICE_UNSPECIFIED", "DATAPROC"]  # noqa: E501
        if service not in allowed_values:
            raise ValueError(
                "Invalid value for `service` ({0}), must be one of {1}"
                .format(service, allowed_values)
            )

        self._service = service

    @property
    def service_job(self):
        """Gets the service_job of this GoogleCloudDataplexV1Job.

        Output only. The full resource name for the job run under a particular service.

        :return: The service_job of this GoogleCloudDataplexV1Job.
        :rtype: str
        """
        return self._service_job

    @service_job.setter
    def service_job(self, service_job):
        """Sets the service_job of this GoogleCloudDataplexV1Job.

        Output only. The full resource name for the job run under a particular service.

        :param service_job: The service_job of this GoogleCloudDataplexV1Job.
        :type service_job: str
        """

        self._service_job = service_job

    @property
    def start_time(self):
        """Gets the start_time of this GoogleCloudDataplexV1Job.

        Output only. The time when the job was started.

        :return: The start_time of this GoogleCloudDataplexV1Job.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleCloudDataplexV1Job.

        Output only. The time when the job was started.

        :param start_time: The start_time of this GoogleCloudDataplexV1Job.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this GoogleCloudDataplexV1Job.

        Output only. Execution state for the job.

        :return: The state of this GoogleCloudDataplexV1Job.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudDataplexV1Job.

        Output only. Execution state for the job.

        :param state: The state of this GoogleCloudDataplexV1Job.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "RUNNING", "CANCELLING", "CANCELLED", "SUCCEEDED", "FAILED", "ABORTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def trigger(self):
        """Gets the trigger of this GoogleCloudDataplexV1Job.

        Output only. Job execution trigger.

        :return: The trigger of this GoogleCloudDataplexV1Job.
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this GoogleCloudDataplexV1Job.

        Output only. Job execution trigger.

        :param trigger: The trigger of this GoogleCloudDataplexV1Job.
        :type trigger: str
        """
        allowed_values = ["TRIGGER_UNSPECIFIED", "TASK_CONFIG", "RUN_REQUEST"]  # noqa: E501
        if trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger` ({0}), must be one of {1}"
                .format(trigger, allowed_values)
            )

        self._trigger = trigger

    @property
    def uid(self):
        """Gets the uid of this GoogleCloudDataplexV1Job.

        Output only. System generated globally unique ID for the job.

        :return: The uid of this GoogleCloudDataplexV1Job.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GoogleCloudDataplexV1Job.

        Output only. System generated globally unique ID for the job.

        :param uid: The uid of this GoogleCloudDataplexV1Job.
        :type uid: str
        """

        self._uid = uid
