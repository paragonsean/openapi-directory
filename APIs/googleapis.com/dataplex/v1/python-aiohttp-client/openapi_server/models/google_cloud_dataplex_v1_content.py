# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dataplex_v1_content_notebook import GoogleCloudDataplexV1ContentNotebook
from openapi_server.models.google_cloud_dataplex_v1_content_sql_script import GoogleCloudDataplexV1ContentSqlScript
from openapi_server import util


class GoogleCloudDataplexV1Content(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, data_text: str=None, description: str=None, labels: Dict[str, str]=None, name: str=None, notebook: GoogleCloudDataplexV1ContentNotebook=None, path: str=None, sql_script: GoogleCloudDataplexV1ContentSqlScript=None, uid: str=None, update_time: str=None):
        """GoogleCloudDataplexV1Content - a model defined in OpenAPI

        :param create_time: The create_time of this GoogleCloudDataplexV1Content.
        :param data_text: The data_text of this GoogleCloudDataplexV1Content.
        :param description: The description of this GoogleCloudDataplexV1Content.
        :param labels: The labels of this GoogleCloudDataplexV1Content.
        :param name: The name of this GoogleCloudDataplexV1Content.
        :param notebook: The notebook of this GoogleCloudDataplexV1Content.
        :param path: The path of this GoogleCloudDataplexV1Content.
        :param sql_script: The sql_script of this GoogleCloudDataplexV1Content.
        :param uid: The uid of this GoogleCloudDataplexV1Content.
        :param update_time: The update_time of this GoogleCloudDataplexV1Content.
        """
        self.openapi_types = {
            'create_time': str,
            'data_text': str,
            'description': str,
            'labels': Dict[str, str],
            'name': str,
            'notebook': GoogleCloudDataplexV1ContentNotebook,
            'path': str,
            'sql_script': GoogleCloudDataplexV1ContentSqlScript,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'data_text': 'dataText',
            'description': 'description',
            'labels': 'labels',
            'name': 'name',
            'notebook': 'notebook',
            'path': 'path',
            'sql_script': 'sqlScript',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._data_text = data_text
        self._description = description
        self._labels = labels
        self._name = name
        self._notebook = notebook
        self._path = path
        self._sql_script = sql_script
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1Content':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1Content of this GoogleCloudDataplexV1Content.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudDataplexV1Content.

        Output only. Content creation time.

        :return: The create_time of this GoogleCloudDataplexV1Content.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudDataplexV1Content.

        Output only. Content creation time.

        :param create_time: The create_time of this GoogleCloudDataplexV1Content.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def data_text(self):
        """Gets the data_text of this GoogleCloudDataplexV1Content.

        Required. Content data in string format.

        :return: The data_text of this GoogleCloudDataplexV1Content.
        :rtype: str
        """
        return self._data_text

    @data_text.setter
    def data_text(self, data_text):
        """Sets the data_text of this GoogleCloudDataplexV1Content.

        Required. Content data in string format.

        :param data_text: The data_text of this GoogleCloudDataplexV1Content.
        :type data_text: str
        """

        self._data_text = data_text

    @property
    def description(self):
        """Gets the description of this GoogleCloudDataplexV1Content.

        Optional. Description of the content.

        :return: The description of this GoogleCloudDataplexV1Content.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudDataplexV1Content.

        Optional. Description of the content.

        :param description: The description of this GoogleCloudDataplexV1Content.
        :type description: str
        """

        self._description = description

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudDataplexV1Content.

        Optional. User defined labels for the content.

        :return: The labels of this GoogleCloudDataplexV1Content.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudDataplexV1Content.

        Optional. User defined labels for the content.

        :param labels: The labels of this GoogleCloudDataplexV1Content.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this GoogleCloudDataplexV1Content.

        Output only. The relative resource name of the content, of the form: projects/{project_id}/locations/{location_id}/lakes/{lake_id}/content/{content_id}

        :return: The name of this GoogleCloudDataplexV1Content.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDataplexV1Content.

        Output only. The relative resource name of the content, of the form: projects/{project_id}/locations/{location_id}/lakes/{lake_id}/content/{content_id}

        :param name: The name of this GoogleCloudDataplexV1Content.
        :type name: str
        """

        self._name = name

    @property
    def notebook(self):
        """Gets the notebook of this GoogleCloudDataplexV1Content.


        :return: The notebook of this GoogleCloudDataplexV1Content.
        :rtype: GoogleCloudDataplexV1ContentNotebook
        """
        return self._notebook

    @notebook.setter
    def notebook(self, notebook):
        """Sets the notebook of this GoogleCloudDataplexV1Content.


        :param notebook: The notebook of this GoogleCloudDataplexV1Content.
        :type notebook: GoogleCloudDataplexV1ContentNotebook
        """

        self._notebook = notebook

    @property
    def path(self):
        """Gets the path of this GoogleCloudDataplexV1Content.

        Required. The path for the Content file, represented as directory structure. Unique within a lake. Limited to alphanumerics, hyphens, underscores, dots and slashes.

        :return: The path of this GoogleCloudDataplexV1Content.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this GoogleCloudDataplexV1Content.

        Required. The path for the Content file, represented as directory structure. Unique within a lake. Limited to alphanumerics, hyphens, underscores, dots and slashes.

        :param path: The path of this GoogleCloudDataplexV1Content.
        :type path: str
        """

        self._path = path

    @property
    def sql_script(self):
        """Gets the sql_script of this GoogleCloudDataplexV1Content.


        :return: The sql_script of this GoogleCloudDataplexV1Content.
        :rtype: GoogleCloudDataplexV1ContentSqlScript
        """
        return self._sql_script

    @sql_script.setter
    def sql_script(self, sql_script):
        """Sets the sql_script of this GoogleCloudDataplexV1Content.


        :param sql_script: The sql_script of this GoogleCloudDataplexV1Content.
        :type sql_script: GoogleCloudDataplexV1ContentSqlScript
        """

        self._sql_script = sql_script

    @property
    def uid(self):
        """Gets the uid of this GoogleCloudDataplexV1Content.

        Output only. System generated globally unique ID for the content. This ID will be different if the content is deleted and re-created with the same name.

        :return: The uid of this GoogleCloudDataplexV1Content.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GoogleCloudDataplexV1Content.

        Output only. System generated globally unique ID for the content. This ID will be different if the content is deleted and re-created with the same name.

        :param uid: The uid of this GoogleCloudDataplexV1Content.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudDataplexV1Content.

        Output only. The time when the content was last updated.

        :return: The update_time of this GoogleCloudDataplexV1Content.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudDataplexV1Content.

        Output only. The time when the content was last updated.

        :param update_time: The update_time of this GoogleCloudDataplexV1Content.
        :type update_time: str
        """

        self._update_time = update_time
