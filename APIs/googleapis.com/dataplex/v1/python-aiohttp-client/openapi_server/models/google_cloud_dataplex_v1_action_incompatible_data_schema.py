# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1ActionIncompatibleDataSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, existing_schema: str=None, new_schema: str=None, sampled_data_locations: List[str]=None, schema_change: str=None, table: str=None):
        """GoogleCloudDataplexV1ActionIncompatibleDataSchema - a model defined in OpenAPI

        :param existing_schema: The existing_schema of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        :param new_schema: The new_schema of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        :param sampled_data_locations: The sampled_data_locations of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        :param schema_change: The schema_change of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        :param table: The table of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        """
        self.openapi_types = {
            'existing_schema': str,
            'new_schema': str,
            'sampled_data_locations': List[str],
            'schema_change': str,
            'table': str
        }

        self.attribute_map = {
            'existing_schema': 'existingSchema',
            'new_schema': 'newSchema',
            'sampled_data_locations': 'sampledDataLocations',
            'schema_change': 'schemaChange',
            'table': 'table'
        }

        self._existing_schema = existing_schema
        self._new_schema = new_schema
        self._sampled_data_locations = sampled_data_locations
        self._schema_change = schema_change
        self._table = table

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1ActionIncompatibleDataSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1ActionIncompatibleDataSchema of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def existing_schema(self):
        """Gets the existing_schema of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.

        The existing and expected schema of the table. The schema is provided as a JSON formatted structure listing columns and data types.

        :return: The existing_schema of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        :rtype: str
        """
        return self._existing_schema

    @existing_schema.setter
    def existing_schema(self, existing_schema):
        """Sets the existing_schema of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.

        The existing and expected schema of the table. The schema is provided as a JSON formatted structure listing columns and data types.

        :param existing_schema: The existing_schema of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        :type existing_schema: str
        """

        self._existing_schema = existing_schema

    @property
    def new_schema(self):
        """Gets the new_schema of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.

        The new and incompatible schema within the table. The schema is provided as a JSON formatted structured listing columns and data types.

        :return: The new_schema of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        :rtype: str
        """
        return self._new_schema

    @new_schema.setter
    def new_schema(self, new_schema):
        """Sets the new_schema of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.

        The new and incompatible schema within the table. The schema is provided as a JSON formatted structured listing columns and data types.

        :param new_schema: The new_schema of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        :type new_schema: str
        """

        self._new_schema = new_schema

    @property
    def sampled_data_locations(self):
        """Gets the sampled_data_locations of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.

        The list of data locations sampled and used for format/schema inference.

        :return: The sampled_data_locations of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        :rtype: List[str]
        """
        return self._sampled_data_locations

    @sampled_data_locations.setter
    def sampled_data_locations(self, sampled_data_locations):
        """Sets the sampled_data_locations of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.

        The list of data locations sampled and used for format/schema inference.

        :param sampled_data_locations: The sampled_data_locations of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        :type sampled_data_locations: List[str]
        """

        self._sampled_data_locations = sampled_data_locations

    @property
    def schema_change(self):
        """Gets the schema_change of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.

        Whether the action relates to a schema that is incompatible or modified.

        :return: The schema_change of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        :rtype: str
        """
        return self._schema_change

    @schema_change.setter
    def schema_change(self, schema_change):
        """Sets the schema_change of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.

        Whether the action relates to a schema that is incompatible or modified.

        :param schema_change: The schema_change of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        :type schema_change: str
        """
        allowed_values = ["SCHEMA_CHANGE_UNSPECIFIED", "INCOMPATIBLE", "MODIFIED"]  # noqa: E501
        if schema_change not in allowed_values:
            raise ValueError(
                "Invalid value for `schema_change` ({0}), must be one of {1}"
                .format(schema_change, allowed_values)
            )

        self._schema_change = schema_change

    @property
    def table(self):
        """Gets the table of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.

        The name of the table containing invalid data.

        :return: The table of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.

        The name of the table containing invalid data.

        :param table: The table of this GoogleCloudDataplexV1ActionIncompatibleDataSchema.
        :type table: str
        """

        self._table = table
