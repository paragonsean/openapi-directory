# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1ContentSqlScript(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, engine: str=None):
        """GoogleCloudDataplexV1ContentSqlScript - a model defined in OpenAPI

        :param engine: The engine of this GoogleCloudDataplexV1ContentSqlScript.
        """
        self.openapi_types = {
            'engine': str
        }

        self.attribute_map = {
            'engine': 'engine'
        }

        self._engine = engine

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1ContentSqlScript':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1ContentSqlScript of this GoogleCloudDataplexV1ContentSqlScript.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def engine(self):
        """Gets the engine of this GoogleCloudDataplexV1ContentSqlScript.

        Required. Query Engine to be used for the Sql Query.

        :return: The engine of this GoogleCloudDataplexV1ContentSqlScript.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this GoogleCloudDataplexV1ContentSqlScript.

        Required. Query Engine to be used for the Sql Query.

        :param engine: The engine of this GoogleCloudDataplexV1ContentSqlScript.
        :type engine: str
        """
        allowed_values = ["QUERY_ENGINE_UNSPECIFIED", "SPARK"]  # noqa: E501
        if engine not in allowed_values:
            raise ValueError(
                "Invalid value for `engine` ({0}), must be one of {1}"
                .format(engine, allowed_values)
            )

        self._engine = engine
