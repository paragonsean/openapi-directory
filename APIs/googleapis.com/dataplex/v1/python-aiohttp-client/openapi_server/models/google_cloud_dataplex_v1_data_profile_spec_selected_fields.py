# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1DataProfileSpecSelectedFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_names: List[str]=None):
        """GoogleCloudDataplexV1DataProfileSpecSelectedFields - a model defined in OpenAPI

        :param field_names: The field_names of this GoogleCloudDataplexV1DataProfileSpecSelectedFields.
        """
        self.openapi_types = {
            'field_names': List[str]
        }

        self.attribute_map = {
            'field_names': 'fieldNames'
        }

        self._field_names = field_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1DataProfileSpecSelectedFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1DataProfileSpecSelectedFields of this GoogleCloudDataplexV1DataProfileSpecSelectedFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_names(self):
        """Gets the field_names of this GoogleCloudDataplexV1DataProfileSpecSelectedFields.

        Optional. Expected input is a list of fully qualified names of fields as in the schema.Only top-level field names for nested fields are supported. For instance, if 'x' is of nested field type, listing 'x' is supported but 'x.y.z' is not supported. Here 'y' and 'y.z' are nested fields of 'x'.

        :return: The field_names of this GoogleCloudDataplexV1DataProfileSpecSelectedFields.
        :rtype: List[str]
        """
        return self._field_names

    @field_names.setter
    def field_names(self, field_names):
        """Sets the field_names of this GoogleCloudDataplexV1DataProfileSpecSelectedFields.

        Optional. Expected input is a list of fully qualified names of fields as in the schema.Only top-level field names for nested fields are supported. For instance, if 'x' is of nested field type, listing 'x' is supported but 'x.y.z' is not supported. Here 'y' and 'y.z' are nested fields of 'x'.

        :param field_names: The field_names of this GoogleCloudDataplexV1DataProfileSpecSelectedFields.
        :type field_names: List[str]
        """

        self._field_names = field_names
