# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dataplex_v1_data_scan_event_data_profile_applied_configs import GoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs
from openapi_server.models.google_cloud_dataplex_v1_data_scan_event_data_profile_result import GoogleCloudDataplexV1DataScanEventDataProfileResult
from openapi_server.models.google_cloud_dataplex_v1_data_scan_event_data_quality_applied_configs import GoogleCloudDataplexV1DataScanEventDataQualityAppliedConfigs
from openapi_server.models.google_cloud_dataplex_v1_data_scan_event_data_quality_result import GoogleCloudDataplexV1DataScanEventDataQualityResult
from openapi_server.models.google_cloud_dataplex_v1_data_scan_event_post_scan_actions_result import GoogleCloudDataplexV1DataScanEventPostScanActionsResult
from openapi_server import util


class GoogleCloudDataplexV1DataScanEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, data_profile: GoogleCloudDataplexV1DataScanEventDataProfileResult=None, data_profile_configs: GoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs=None, data_quality: GoogleCloudDataplexV1DataScanEventDataQualityResult=None, data_quality_configs: GoogleCloudDataplexV1DataScanEventDataQualityAppliedConfigs=None, data_source: str=None, end_time: str=None, job_id: str=None, message: str=None, post_scan_actions_result: GoogleCloudDataplexV1DataScanEventPostScanActionsResult=None, scope: str=None, spec_version: str=None, start_time: str=None, state: str=None, trigger: str=None, type: str=None):
        """GoogleCloudDataplexV1DataScanEvent - a model defined in OpenAPI

        :param create_time: The create_time of this GoogleCloudDataplexV1DataScanEvent.
        :param data_profile: The data_profile of this GoogleCloudDataplexV1DataScanEvent.
        :param data_profile_configs: The data_profile_configs of this GoogleCloudDataplexV1DataScanEvent.
        :param data_quality: The data_quality of this GoogleCloudDataplexV1DataScanEvent.
        :param data_quality_configs: The data_quality_configs of this GoogleCloudDataplexV1DataScanEvent.
        :param data_source: The data_source of this GoogleCloudDataplexV1DataScanEvent.
        :param end_time: The end_time of this GoogleCloudDataplexV1DataScanEvent.
        :param job_id: The job_id of this GoogleCloudDataplexV1DataScanEvent.
        :param message: The message of this GoogleCloudDataplexV1DataScanEvent.
        :param post_scan_actions_result: The post_scan_actions_result of this GoogleCloudDataplexV1DataScanEvent.
        :param scope: The scope of this GoogleCloudDataplexV1DataScanEvent.
        :param spec_version: The spec_version of this GoogleCloudDataplexV1DataScanEvent.
        :param start_time: The start_time of this GoogleCloudDataplexV1DataScanEvent.
        :param state: The state of this GoogleCloudDataplexV1DataScanEvent.
        :param trigger: The trigger of this GoogleCloudDataplexV1DataScanEvent.
        :param type: The type of this GoogleCloudDataplexV1DataScanEvent.
        """
        self.openapi_types = {
            'create_time': str,
            'data_profile': GoogleCloudDataplexV1DataScanEventDataProfileResult,
            'data_profile_configs': GoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs,
            'data_quality': GoogleCloudDataplexV1DataScanEventDataQualityResult,
            'data_quality_configs': GoogleCloudDataplexV1DataScanEventDataQualityAppliedConfigs,
            'data_source': str,
            'end_time': str,
            'job_id': str,
            'message': str,
            'post_scan_actions_result': GoogleCloudDataplexV1DataScanEventPostScanActionsResult,
            'scope': str,
            'spec_version': str,
            'start_time': str,
            'state': str,
            'trigger': str,
            'type': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'data_profile': 'dataProfile',
            'data_profile_configs': 'dataProfileConfigs',
            'data_quality': 'dataQuality',
            'data_quality_configs': 'dataQualityConfigs',
            'data_source': 'dataSource',
            'end_time': 'endTime',
            'job_id': 'jobId',
            'message': 'message',
            'post_scan_actions_result': 'postScanActionsResult',
            'scope': 'scope',
            'spec_version': 'specVersion',
            'start_time': 'startTime',
            'state': 'state',
            'trigger': 'trigger',
            'type': 'type'
        }

        self._create_time = create_time
        self._data_profile = data_profile
        self._data_profile_configs = data_profile_configs
        self._data_quality = data_quality
        self._data_quality_configs = data_quality_configs
        self._data_source = data_source
        self._end_time = end_time
        self._job_id = job_id
        self._message = message
        self._post_scan_actions_result = post_scan_actions_result
        self._scope = scope
        self._spec_version = spec_version
        self._start_time = start_time
        self._state = state
        self._trigger = trigger
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1DataScanEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1DataScanEvent of this GoogleCloudDataplexV1DataScanEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudDataplexV1DataScanEvent.

        The time when the data scan job was created.

        :return: The create_time of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudDataplexV1DataScanEvent.

        The time when the data scan job was created.

        :param create_time: The create_time of this GoogleCloudDataplexV1DataScanEvent.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def data_profile(self):
        """Gets the data_profile of this GoogleCloudDataplexV1DataScanEvent.


        :return: The data_profile of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: GoogleCloudDataplexV1DataScanEventDataProfileResult
        """
        return self._data_profile

    @data_profile.setter
    def data_profile(self, data_profile):
        """Sets the data_profile of this GoogleCloudDataplexV1DataScanEvent.


        :param data_profile: The data_profile of this GoogleCloudDataplexV1DataScanEvent.
        :type data_profile: GoogleCloudDataplexV1DataScanEventDataProfileResult
        """

        self._data_profile = data_profile

    @property
    def data_profile_configs(self):
        """Gets the data_profile_configs of this GoogleCloudDataplexV1DataScanEvent.


        :return: The data_profile_configs of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: GoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs
        """
        return self._data_profile_configs

    @data_profile_configs.setter
    def data_profile_configs(self, data_profile_configs):
        """Sets the data_profile_configs of this GoogleCloudDataplexV1DataScanEvent.


        :param data_profile_configs: The data_profile_configs of this GoogleCloudDataplexV1DataScanEvent.
        :type data_profile_configs: GoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs
        """

        self._data_profile_configs = data_profile_configs

    @property
    def data_quality(self):
        """Gets the data_quality of this GoogleCloudDataplexV1DataScanEvent.


        :return: The data_quality of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: GoogleCloudDataplexV1DataScanEventDataQualityResult
        """
        return self._data_quality

    @data_quality.setter
    def data_quality(self, data_quality):
        """Sets the data_quality of this GoogleCloudDataplexV1DataScanEvent.


        :param data_quality: The data_quality of this GoogleCloudDataplexV1DataScanEvent.
        :type data_quality: GoogleCloudDataplexV1DataScanEventDataQualityResult
        """

        self._data_quality = data_quality

    @property
    def data_quality_configs(self):
        """Gets the data_quality_configs of this GoogleCloudDataplexV1DataScanEvent.


        :return: The data_quality_configs of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: GoogleCloudDataplexV1DataScanEventDataQualityAppliedConfigs
        """
        return self._data_quality_configs

    @data_quality_configs.setter
    def data_quality_configs(self, data_quality_configs):
        """Sets the data_quality_configs of this GoogleCloudDataplexV1DataScanEvent.


        :param data_quality_configs: The data_quality_configs of this GoogleCloudDataplexV1DataScanEvent.
        :type data_quality_configs: GoogleCloudDataplexV1DataScanEventDataQualityAppliedConfigs
        """

        self._data_quality_configs = data_quality_configs

    @property
    def data_source(self):
        """Gets the data_source of this GoogleCloudDataplexV1DataScanEvent.

        The data source of the data scan

        :return: The data_source of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this GoogleCloudDataplexV1DataScanEvent.

        The data source of the data scan

        :param data_source: The data_source of this GoogleCloudDataplexV1DataScanEvent.
        :type data_source: str
        """

        self._data_source = data_source

    @property
    def end_time(self):
        """Gets the end_time of this GoogleCloudDataplexV1DataScanEvent.

        The time when the data scan job finished.

        :return: The end_time of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GoogleCloudDataplexV1DataScanEvent.

        The time when the data scan job finished.

        :param end_time: The end_time of this GoogleCloudDataplexV1DataScanEvent.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def job_id(self):
        """Gets the job_id of this GoogleCloudDataplexV1DataScanEvent.

        The identifier of the specific data scan job this log entry is for.

        :return: The job_id of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this GoogleCloudDataplexV1DataScanEvent.

        The identifier of the specific data scan job this log entry is for.

        :param job_id: The job_id of this GoogleCloudDataplexV1DataScanEvent.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def message(self):
        """Gets the message of this GoogleCloudDataplexV1DataScanEvent.

        The message describing the data scan job event.

        :return: The message of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GoogleCloudDataplexV1DataScanEvent.

        The message describing the data scan job event.

        :param message: The message of this GoogleCloudDataplexV1DataScanEvent.
        :type message: str
        """

        self._message = message

    @property
    def post_scan_actions_result(self):
        """Gets the post_scan_actions_result of this GoogleCloudDataplexV1DataScanEvent.


        :return: The post_scan_actions_result of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: GoogleCloudDataplexV1DataScanEventPostScanActionsResult
        """
        return self._post_scan_actions_result

    @post_scan_actions_result.setter
    def post_scan_actions_result(self, post_scan_actions_result):
        """Sets the post_scan_actions_result of this GoogleCloudDataplexV1DataScanEvent.


        :param post_scan_actions_result: The post_scan_actions_result of this GoogleCloudDataplexV1DataScanEvent.
        :type post_scan_actions_result: GoogleCloudDataplexV1DataScanEventPostScanActionsResult
        """

        self._post_scan_actions_result = post_scan_actions_result

    @property
    def scope(self):
        """Gets the scope of this GoogleCloudDataplexV1DataScanEvent.

        The scope of the data scan (e.g. full, incremental).

        :return: The scope of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this GoogleCloudDataplexV1DataScanEvent.

        The scope of the data scan (e.g. full, incremental).

        :param scope: The scope of this GoogleCloudDataplexV1DataScanEvent.
        :type scope: str
        """
        allowed_values = ["SCOPE_UNSPECIFIED", "FULL", "INCREMENTAL"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def spec_version(self):
        """Gets the spec_version of this GoogleCloudDataplexV1DataScanEvent.

        A version identifier of the spec which was used to execute this job.

        :return: The spec_version of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: str
        """
        return self._spec_version

    @spec_version.setter
    def spec_version(self, spec_version):
        """Sets the spec_version of this GoogleCloudDataplexV1DataScanEvent.

        A version identifier of the spec which was used to execute this job.

        :param spec_version: The spec_version of this GoogleCloudDataplexV1DataScanEvent.
        :type spec_version: str
        """

        self._spec_version = spec_version

    @property
    def start_time(self):
        """Gets the start_time of this GoogleCloudDataplexV1DataScanEvent.

        The time when the data scan job started to run.

        :return: The start_time of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleCloudDataplexV1DataScanEvent.

        The time when the data scan job started to run.

        :param start_time: The start_time of this GoogleCloudDataplexV1DataScanEvent.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this GoogleCloudDataplexV1DataScanEvent.

        The status of the data scan job.

        :return: The state of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudDataplexV1DataScanEvent.

        The status of the data scan job.

        :param state: The state of this GoogleCloudDataplexV1DataScanEvent.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "STARTED", "SUCCEEDED", "FAILED", "CANCELLED", "CREATED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def trigger(self):
        """Gets the trigger of this GoogleCloudDataplexV1DataScanEvent.

        The trigger type of the data scan job.

        :return: The trigger of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this GoogleCloudDataplexV1DataScanEvent.

        The trigger type of the data scan job.

        :param trigger: The trigger of this GoogleCloudDataplexV1DataScanEvent.
        :type trigger: str
        """
        allowed_values = ["TRIGGER_UNSPECIFIED", "ON_DEMAND", "SCHEDULE"]  # noqa: E501
        if trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger` ({0}), must be one of {1}"
                .format(trigger, allowed_values)
            )

        self._trigger = trigger

    @property
    def type(self):
        """Gets the type of this GoogleCloudDataplexV1DataScanEvent.

        The type of the data scan.

        :return: The type of this GoogleCloudDataplexV1DataScanEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudDataplexV1DataScanEvent.

        The type of the data scan.

        :param type: The type of this GoogleCloudDataplexV1DataScanEvent.
        :type type: str
        """
        allowed_values = ["SCAN_TYPE_UNSPECIFIED", "DATA_PROFILE", "DATA_QUALITY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
