# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network: str=None, network_tags: List[str]=None, sub_network: str=None):
        """GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork - a model defined in OpenAPI

        :param network: The network of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.
        :param network_tags: The network_tags of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.
        :param sub_network: The sub_network of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.
        """
        self.openapi_types = {
            'network': str,
            'network_tags': List[str],
            'sub_network': str
        }

        self.attribute_map = {
            'network': 'network',
            'network_tags': 'networkTags',
            'sub_network': 'subNetwork'
        }

        self._network = network
        self._network_tags = network_tags
        self._sub_network = sub_network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network(self):
        """Gets the network of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.

        Optional. The Cloud VPC network in which the job is run. By default, the Cloud VPC network named Default within the project is used.

        :return: The network of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.

        Optional. The Cloud VPC network in which the job is run. By default, the Cloud VPC network named Default within the project is used.

        :param network: The network of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.
        :type network: str
        """

        self._network = network

    @property
    def network_tags(self):
        """Gets the network_tags of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.

        Optional. List of network tags to apply to the job.

        :return: The network_tags of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.
        :rtype: List[str]
        """
        return self._network_tags

    @network_tags.setter
    def network_tags(self, network_tags):
        """Sets the network_tags of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.

        Optional. List of network tags to apply to the job.

        :param network_tags: The network_tags of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.
        :type network_tags: List[str]
        """

        self._network_tags = network_tags

    @property
    def sub_network(self):
        """Gets the sub_network of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.

        Optional. The Cloud VPC sub-network in which the job is run.

        :return: The sub_network of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.
        :rtype: str
        """
        return self._sub_network

    @sub_network.setter
    def sub_network(self, sub_network):
        """Sets the sub_network of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.

        Optional. The Cloud VPC sub-network in which the job is run.

        :param sub_network: The sub_network of this GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork.
        :type sub_network: str
        """

        self._sub_network = sub_network
