# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1DataQualityScanRuleResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column: str=None, data_source: str=None, evaluated_row_count: str=None, evalution_type: str=None, job_id: str=None, null_row_count: str=None, passed_row_count: str=None, result: str=None, rule_dimension: str=None, rule_name: str=None, rule_type: str=None, threshold_percent: float=None):
        """GoogleCloudDataplexV1DataQualityScanRuleResult - a model defined in OpenAPI

        :param column: The column of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :param data_source: The data_source of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :param evaluated_row_count: The evaluated_row_count of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :param evalution_type: The evalution_type of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :param job_id: The job_id of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :param null_row_count: The null_row_count of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :param passed_row_count: The passed_row_count of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :param result: The result of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :param rule_dimension: The rule_dimension of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :param rule_name: The rule_name of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :param rule_type: The rule_type of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :param threshold_percent: The threshold_percent of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        """
        self.openapi_types = {
            'column': str,
            'data_source': str,
            'evaluated_row_count': str,
            'evalution_type': str,
            'job_id': str,
            'null_row_count': str,
            'passed_row_count': str,
            'result': str,
            'rule_dimension': str,
            'rule_name': str,
            'rule_type': str,
            'threshold_percent': float
        }

        self.attribute_map = {
            'column': 'column',
            'data_source': 'dataSource',
            'evaluated_row_count': 'evaluatedRowCount',
            'evalution_type': 'evalutionType',
            'job_id': 'jobId',
            'null_row_count': 'nullRowCount',
            'passed_row_count': 'passedRowCount',
            'result': 'result',
            'rule_dimension': 'ruleDimension',
            'rule_name': 'ruleName',
            'rule_type': 'ruleType',
            'threshold_percent': 'thresholdPercent'
        }

        self._column = column
        self._data_source = data_source
        self._evaluated_row_count = evaluated_row_count
        self._evalution_type = evalution_type
        self._job_id = job_id
        self._null_row_count = null_row_count
        self._passed_row_count = passed_row_count
        self._result = result
        self._rule_dimension = rule_dimension
        self._rule_name = rule_name
        self._rule_type = rule_type
        self._threshold_percent = threshold_percent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1DataQualityScanRuleResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1DataQualityScanRuleResult of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column(self):
        """Gets the column of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The column which this rule is evaluated against.

        :return: The column of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The column which this rule is evaluated against.

        :param column: The column of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :type column: str
        """

        self._column = column

    @property
    def data_source(self):
        """Gets the data_source of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The data source of the data scan (e.g. BigQuery table name).

        :return: The data_source of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The data source of the data scan (e.g. BigQuery table name).

        :param data_source: The data_source of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :type data_source: str
        """

        self._data_source = data_source

    @property
    def evaluated_row_count(self):
        """Gets the evaluated_row_count of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The number of rows evaluated against the data quality rule. This field is only valid for rules of PER_ROW evaluation type.

        :return: The evaluated_row_count of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :rtype: str
        """
        return self._evaluated_row_count

    @evaluated_row_count.setter
    def evaluated_row_count(self, evaluated_row_count):
        """Sets the evaluated_row_count of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The number of rows evaluated against the data quality rule. This field is only valid for rules of PER_ROW evaluation type.

        :param evaluated_row_count: The evaluated_row_count of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :type evaluated_row_count: str
        """

        self._evaluated_row_count = evaluated_row_count

    @property
    def evalution_type(self):
        """Gets the evalution_type of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The evaluation type of the data quality rule.

        :return: The evalution_type of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :rtype: str
        """
        return self._evalution_type

    @evalution_type.setter
    def evalution_type(self, evalution_type):
        """Sets the evalution_type of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The evaluation type of the data quality rule.

        :param evalution_type: The evalution_type of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :type evalution_type: str
        """
        allowed_values = ["EVALUATION_TYPE_UNSPECIFIED", "PER_ROW", "AGGREGATE"]  # noqa: E501
        if evalution_type not in allowed_values:
            raise ValueError(
                "Invalid value for `evalution_type` ({0}), must be one of {1}"
                .format(evalution_type, allowed_values)
            )

        self._evalution_type = evalution_type

    @property
    def job_id(self):
        """Gets the job_id of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        Identifier of the specific data scan job this log entry is for.

        :return: The job_id of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        Identifier of the specific data scan job this log entry is for.

        :param job_id: The job_id of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def null_row_count(self):
        """Gets the null_row_count of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The number of rows with null values in the specified column.

        :return: The null_row_count of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :rtype: str
        """
        return self._null_row_count

    @null_row_count.setter
    def null_row_count(self, null_row_count):
        """Sets the null_row_count of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The number of rows with null values in the specified column.

        :param null_row_count: The null_row_count of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :type null_row_count: str
        """

        self._null_row_count = null_row_count

    @property
    def passed_row_count(self):
        """Gets the passed_row_count of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The number of rows which passed a rule evaluation. This field is only valid for rules of PER_ROW evaluation type.

        :return: The passed_row_count of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :rtype: str
        """
        return self._passed_row_count

    @passed_row_count.setter
    def passed_row_count(self, passed_row_count):
        """Sets the passed_row_count of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The number of rows which passed a rule evaluation. This field is only valid for rules of PER_ROW evaluation type.

        :param passed_row_count: The passed_row_count of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :type passed_row_count: str
        """

        self._passed_row_count = passed_row_count

    @property
    def result(self):
        """Gets the result of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The result of the data quality rule.

        :return: The result of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The result of the data quality rule.

        :param result: The result of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :type result: str
        """
        allowed_values = ["RESULT_UNSPECIFIED", "PASSED", "FAILED"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def rule_dimension(self):
        """Gets the rule_dimension of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The dimension of the data quality rule.

        :return: The rule_dimension of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :rtype: str
        """
        return self._rule_dimension

    @rule_dimension.setter
    def rule_dimension(self, rule_dimension):
        """Sets the rule_dimension of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The dimension of the data quality rule.

        :param rule_dimension: The rule_dimension of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :type rule_dimension: str
        """

        self._rule_dimension = rule_dimension

    @property
    def rule_name(self):
        """Gets the rule_name of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The name of the data quality rule.

        :return: The rule_name of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The name of the data quality rule.

        :param rule_name: The rule_name of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :type rule_name: str
        """

        self._rule_name = rule_name

    @property
    def rule_type(self):
        """Gets the rule_type of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The type of the data quality rule.

        :return: The rule_type of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :rtype: str
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The type of the data quality rule.

        :param rule_type: The rule_type of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :type rule_type: str
        """
        allowed_values = ["RULE_TYPE_UNSPECIFIED", "NON_NULL_EXPECTATION", "RANGE_EXPECTATION", "REGEX_EXPECTATION", "ROW_CONDITION_EXPECTATION", "SET_EXPECTATION", "STATISTIC_RANGE_EXPECTATION", "TABLE_CONDITION_EXPECTATION", "UNIQUENESS_EXPECTATION"]  # noqa: E501
        if rule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_type` ({0}), must be one of {1}"
                .format(rule_type, allowed_values)
            )

        self._rule_type = rule_type

    @property
    def threshold_percent(self):
        """Gets the threshold_percent of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The passing threshold (0.0, 100.0) of the data quality rule.

        :return: The threshold_percent of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :rtype: float
        """
        return self._threshold_percent

    @threshold_percent.setter
    def threshold_percent(self, threshold_percent):
        """Sets the threshold_percent of this GoogleCloudDataplexV1DataQualityScanRuleResult.

        The passing threshold (0.0, 100.0) of the data quality rule.

        :param threshold_percent: The threshold_percent of this GoogleCloudDataplexV1DataQualityScanRuleResult.
        :type threshold_percent: float
        """

        self._threshold_percent = threshold_percent
