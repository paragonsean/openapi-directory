# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1SchemaSchemaField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, fields: List[GoogleCloudDataplexV1SchemaSchemaField]=None, mode: str=None, name: str=None, type: str=None):
        """GoogleCloudDataplexV1SchemaSchemaField - a model defined in OpenAPI

        :param description: The description of this GoogleCloudDataplexV1SchemaSchemaField.
        :param fields: The fields of this GoogleCloudDataplexV1SchemaSchemaField.
        :param mode: The mode of this GoogleCloudDataplexV1SchemaSchemaField.
        :param name: The name of this GoogleCloudDataplexV1SchemaSchemaField.
        :param type: The type of this GoogleCloudDataplexV1SchemaSchemaField.
        """
        self.openapi_types = {
            'description': str,
            'fields': List[GoogleCloudDataplexV1SchemaSchemaField],
            'mode': str,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'fields': 'fields',
            'mode': 'mode',
            'name': 'name',
            'type': 'type'
        }

        self._description = description
        self._fields = fields
        self._mode = mode
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1SchemaSchemaField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1SchemaSchemaField of this GoogleCloudDataplexV1SchemaSchemaField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this GoogleCloudDataplexV1SchemaSchemaField.

        Optional. User friendly field description. Must be less than or equal to 1024 characters.

        :return: The description of this GoogleCloudDataplexV1SchemaSchemaField.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudDataplexV1SchemaSchemaField.

        Optional. User friendly field description. Must be less than or equal to 1024 characters.

        :param description: The description of this GoogleCloudDataplexV1SchemaSchemaField.
        :type description: str
        """

        self._description = description

    @property
    def fields(self):
        """Gets the fields of this GoogleCloudDataplexV1SchemaSchemaField.

        Optional. Any nested field for complex types.

        :return: The fields of this GoogleCloudDataplexV1SchemaSchemaField.
        :rtype: List[GoogleCloudDataplexV1SchemaSchemaField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this GoogleCloudDataplexV1SchemaSchemaField.

        Optional. Any nested field for complex types.

        :param fields: The fields of this GoogleCloudDataplexV1SchemaSchemaField.
        :type fields: List[GoogleCloudDataplexV1SchemaSchemaField]
        """

        self._fields = fields

    @property
    def mode(self):
        """Gets the mode of this GoogleCloudDataplexV1SchemaSchemaField.

        Required. Additional field semantics.

        :return: The mode of this GoogleCloudDataplexV1SchemaSchemaField.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this GoogleCloudDataplexV1SchemaSchemaField.

        Required. Additional field semantics.

        :param mode: The mode of this GoogleCloudDataplexV1SchemaSchemaField.
        :type mode: str
        """
        allowed_values = ["MODE_UNSPECIFIED", "REQUIRED", "NULLABLE", "REPEATED"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this GoogleCloudDataplexV1SchemaSchemaField.

        Required. The name of the field. Must contain only letters, numbers and underscores, with a maximum length of 767 characters, and must begin with a letter or underscore.

        :return: The name of this GoogleCloudDataplexV1SchemaSchemaField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDataplexV1SchemaSchemaField.

        Required. The name of the field. Must contain only letters, numbers and underscores, with a maximum length of 767 characters, and must begin with a letter or underscore.

        :param name: The name of this GoogleCloudDataplexV1SchemaSchemaField.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this GoogleCloudDataplexV1SchemaSchemaField.

        Required. The type of field.

        :return: The type of this GoogleCloudDataplexV1SchemaSchemaField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudDataplexV1SchemaSchemaField.

        Required. The type of field.

        :param type: The type of this GoogleCloudDataplexV1SchemaSchemaField.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "BOOLEAN", "BYTE", "INT16", "INT32", "INT64", "FLOAT", "DOUBLE", "DECIMAL", "STRING", "BINARY", "TIMESTAMP", "DATE", "TIME", "RECORD", "NULL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
