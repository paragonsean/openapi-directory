# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1DataQualityRuleRangeExpectation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_value: str=None, min_value: str=None, strict_max_enabled: bool=None, strict_min_enabled: bool=None):
        """GoogleCloudDataplexV1DataQualityRuleRangeExpectation - a model defined in OpenAPI

        :param max_value: The max_value of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.
        :param min_value: The min_value of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.
        :param strict_max_enabled: The strict_max_enabled of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.
        :param strict_min_enabled: The strict_min_enabled of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.
        """
        self.openapi_types = {
            'max_value': str,
            'min_value': str,
            'strict_max_enabled': bool,
            'strict_min_enabled': bool
        }

        self.attribute_map = {
            'max_value': 'maxValue',
            'min_value': 'minValue',
            'strict_max_enabled': 'strictMaxEnabled',
            'strict_min_enabled': 'strictMinEnabled'
        }

        self._max_value = max_value
        self._min_value = min_value
        self._strict_max_enabled = strict_max_enabled
        self._strict_min_enabled = strict_min_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1DataQualityRuleRangeExpectation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1DataQualityRuleRangeExpectation of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_value(self):
        """Gets the max_value of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.

        Optional. The maximum column value allowed for a row to pass this validation. At least one of min_value and max_value need to be provided.

        :return: The max_value of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.
        :rtype: str
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.

        Optional. The maximum column value allowed for a row to pass this validation. At least one of min_value and max_value need to be provided.

        :param max_value: The max_value of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.
        :type max_value: str
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.

        Optional. The minimum column value allowed for a row to pass this validation. At least one of min_value and max_value need to be provided.

        :return: The min_value of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.
        :rtype: str
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.

        Optional. The minimum column value allowed for a row to pass this validation. At least one of min_value and max_value need to be provided.

        :param min_value: The min_value of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.
        :type min_value: str
        """

        self._min_value = min_value

    @property
    def strict_max_enabled(self):
        """Gets the strict_max_enabled of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.

        Optional. Whether each value needs to be strictly lesser than ('<') the maximum, or if equality is allowed.Only relevant if a max_value has been defined. Default = false.

        :return: The strict_max_enabled of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.
        :rtype: bool
        """
        return self._strict_max_enabled

    @strict_max_enabled.setter
    def strict_max_enabled(self, strict_max_enabled):
        """Sets the strict_max_enabled of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.

        Optional. Whether each value needs to be strictly lesser than ('<') the maximum, or if equality is allowed.Only relevant if a max_value has been defined. Default = false.

        :param strict_max_enabled: The strict_max_enabled of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.
        :type strict_max_enabled: bool
        """

        self._strict_max_enabled = strict_max_enabled

    @property
    def strict_min_enabled(self):
        """Gets the strict_min_enabled of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.

        Optional. Whether each value needs to be strictly greater than ('>') the minimum, or if equality is allowed.Only relevant if a min_value has been defined. Default = false.

        :return: The strict_min_enabled of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.
        :rtype: bool
        """
        return self._strict_min_enabled

    @strict_min_enabled.setter
    def strict_min_enabled(self, strict_min_enabled):
        """Sets the strict_min_enabled of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.

        Optional. Whether each value needs to be strictly greater than ('>') the minimum, or if equality is allowed.Only relevant if a min_value has been defined. Default = false.

        :param strict_min_enabled: The strict_min_enabled of this GoogleCloudDataplexV1DataQualityRuleRangeExpectation.
        :type strict_min_enabled: bool
        """

        self._strict_min_enabled = strict_min_enabled
