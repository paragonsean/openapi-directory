# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dataplex_v1_action_failed_security_policy_apply import GoogleCloudDataplexV1ActionFailedSecurityPolicyApply
from openapi_server.models.google_cloud_dataplex_v1_action_incompatible_data_schema import GoogleCloudDataplexV1ActionIncompatibleDataSchema
from openapi_server.models.google_cloud_dataplex_v1_action_invalid_data_format import GoogleCloudDataplexV1ActionInvalidDataFormat
from openapi_server.models.google_cloud_dataplex_v1_action_invalid_data_partition import GoogleCloudDataplexV1ActionInvalidDataPartition
from openapi_server import util


class GoogleCloudDataplexV1Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset: str=None, category: str=None, data_locations: List[str]=None, detect_time: str=None, failed_security_policy_apply: GoogleCloudDataplexV1ActionFailedSecurityPolicyApply=None, incompatible_data_schema: GoogleCloudDataplexV1ActionIncompatibleDataSchema=None, invalid_data_format: GoogleCloudDataplexV1ActionInvalidDataFormat=None, invalid_data_organization: object=None, invalid_data_partition: GoogleCloudDataplexV1ActionInvalidDataPartition=None, issue: str=None, lake: str=None, missing_data: object=None, missing_resource: object=None, name: str=None, unauthorized_resource: object=None, zone: str=None):
        """GoogleCloudDataplexV1Action - a model defined in OpenAPI

        :param asset: The asset of this GoogleCloudDataplexV1Action.
        :param category: The category of this GoogleCloudDataplexV1Action.
        :param data_locations: The data_locations of this GoogleCloudDataplexV1Action.
        :param detect_time: The detect_time of this GoogleCloudDataplexV1Action.
        :param failed_security_policy_apply: The failed_security_policy_apply of this GoogleCloudDataplexV1Action.
        :param incompatible_data_schema: The incompatible_data_schema of this GoogleCloudDataplexV1Action.
        :param invalid_data_format: The invalid_data_format of this GoogleCloudDataplexV1Action.
        :param invalid_data_organization: The invalid_data_organization of this GoogleCloudDataplexV1Action.
        :param invalid_data_partition: The invalid_data_partition of this GoogleCloudDataplexV1Action.
        :param issue: The issue of this GoogleCloudDataplexV1Action.
        :param lake: The lake of this GoogleCloudDataplexV1Action.
        :param missing_data: The missing_data of this GoogleCloudDataplexV1Action.
        :param missing_resource: The missing_resource of this GoogleCloudDataplexV1Action.
        :param name: The name of this GoogleCloudDataplexV1Action.
        :param unauthorized_resource: The unauthorized_resource of this GoogleCloudDataplexV1Action.
        :param zone: The zone of this GoogleCloudDataplexV1Action.
        """
        self.openapi_types = {
            'asset': str,
            'category': str,
            'data_locations': List[str],
            'detect_time': str,
            'failed_security_policy_apply': GoogleCloudDataplexV1ActionFailedSecurityPolicyApply,
            'incompatible_data_schema': GoogleCloudDataplexV1ActionIncompatibleDataSchema,
            'invalid_data_format': GoogleCloudDataplexV1ActionInvalidDataFormat,
            'invalid_data_organization': object,
            'invalid_data_partition': GoogleCloudDataplexV1ActionInvalidDataPartition,
            'issue': str,
            'lake': str,
            'missing_data': object,
            'missing_resource': object,
            'name': str,
            'unauthorized_resource': object,
            'zone': str
        }

        self.attribute_map = {
            'asset': 'asset',
            'category': 'category',
            'data_locations': 'dataLocations',
            'detect_time': 'detectTime',
            'failed_security_policy_apply': 'failedSecurityPolicyApply',
            'incompatible_data_schema': 'incompatibleDataSchema',
            'invalid_data_format': 'invalidDataFormat',
            'invalid_data_organization': 'invalidDataOrganization',
            'invalid_data_partition': 'invalidDataPartition',
            'issue': 'issue',
            'lake': 'lake',
            'missing_data': 'missingData',
            'missing_resource': 'missingResource',
            'name': 'name',
            'unauthorized_resource': 'unauthorizedResource',
            'zone': 'zone'
        }

        self._asset = asset
        self._category = category
        self._data_locations = data_locations
        self._detect_time = detect_time
        self._failed_security_policy_apply = failed_security_policy_apply
        self._incompatible_data_schema = incompatible_data_schema
        self._invalid_data_format = invalid_data_format
        self._invalid_data_organization = invalid_data_organization
        self._invalid_data_partition = invalid_data_partition
        self._issue = issue
        self._lake = lake
        self._missing_data = missing_data
        self._missing_resource = missing_resource
        self._name = name
        self._unauthorized_resource = unauthorized_resource
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1Action of this GoogleCloudDataplexV1Action.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset(self):
        """Gets the asset of this GoogleCloudDataplexV1Action.

        Output only. The relative resource name of the asset, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/assets/{asset_id}.

        :return: The asset of this GoogleCloudDataplexV1Action.
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this GoogleCloudDataplexV1Action.

        Output only. The relative resource name of the asset, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/assets/{asset_id}.

        :param asset: The asset of this GoogleCloudDataplexV1Action.
        :type asset: str
        """

        self._asset = asset

    @property
    def category(self):
        """Gets the category of this GoogleCloudDataplexV1Action.

        The category of issue associated with the action.

        :return: The category of this GoogleCloudDataplexV1Action.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this GoogleCloudDataplexV1Action.

        The category of issue associated with the action.

        :param category: The category of this GoogleCloudDataplexV1Action.
        :type category: str
        """
        allowed_values = ["CATEGORY_UNSPECIFIED", "RESOURCE_MANAGEMENT", "SECURITY_POLICY", "DATA_DISCOVERY"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def data_locations(self):
        """Gets the data_locations of this GoogleCloudDataplexV1Action.

        The list of data locations associated with this action. Cloud Storage locations are represented as URI paths(E.g. gs://bucket/table1/year=2020/month=Jan/). BigQuery locations refer to resource names(E.g. bigquery.googleapis.com/projects/project-id/datasets/dataset-id).

        :return: The data_locations of this GoogleCloudDataplexV1Action.
        :rtype: List[str]
        """
        return self._data_locations

    @data_locations.setter
    def data_locations(self, data_locations):
        """Sets the data_locations of this GoogleCloudDataplexV1Action.

        The list of data locations associated with this action. Cloud Storage locations are represented as URI paths(E.g. gs://bucket/table1/year=2020/month=Jan/). BigQuery locations refer to resource names(E.g. bigquery.googleapis.com/projects/project-id/datasets/dataset-id).

        :param data_locations: The data_locations of this GoogleCloudDataplexV1Action.
        :type data_locations: List[str]
        """

        self._data_locations = data_locations

    @property
    def detect_time(self):
        """Gets the detect_time of this GoogleCloudDataplexV1Action.

        The time that the issue was detected.

        :return: The detect_time of this GoogleCloudDataplexV1Action.
        :rtype: str
        """
        return self._detect_time

    @detect_time.setter
    def detect_time(self, detect_time):
        """Sets the detect_time of this GoogleCloudDataplexV1Action.

        The time that the issue was detected.

        :param detect_time: The detect_time of this GoogleCloudDataplexV1Action.
        :type detect_time: str
        """

        self._detect_time = detect_time

    @property
    def failed_security_policy_apply(self):
        """Gets the failed_security_policy_apply of this GoogleCloudDataplexV1Action.


        :return: The failed_security_policy_apply of this GoogleCloudDataplexV1Action.
        :rtype: GoogleCloudDataplexV1ActionFailedSecurityPolicyApply
        """
        return self._failed_security_policy_apply

    @failed_security_policy_apply.setter
    def failed_security_policy_apply(self, failed_security_policy_apply):
        """Sets the failed_security_policy_apply of this GoogleCloudDataplexV1Action.


        :param failed_security_policy_apply: The failed_security_policy_apply of this GoogleCloudDataplexV1Action.
        :type failed_security_policy_apply: GoogleCloudDataplexV1ActionFailedSecurityPolicyApply
        """

        self._failed_security_policy_apply = failed_security_policy_apply

    @property
    def incompatible_data_schema(self):
        """Gets the incompatible_data_schema of this GoogleCloudDataplexV1Action.


        :return: The incompatible_data_schema of this GoogleCloudDataplexV1Action.
        :rtype: GoogleCloudDataplexV1ActionIncompatibleDataSchema
        """
        return self._incompatible_data_schema

    @incompatible_data_schema.setter
    def incompatible_data_schema(self, incompatible_data_schema):
        """Sets the incompatible_data_schema of this GoogleCloudDataplexV1Action.


        :param incompatible_data_schema: The incompatible_data_schema of this GoogleCloudDataplexV1Action.
        :type incompatible_data_schema: GoogleCloudDataplexV1ActionIncompatibleDataSchema
        """

        self._incompatible_data_schema = incompatible_data_schema

    @property
    def invalid_data_format(self):
        """Gets the invalid_data_format of this GoogleCloudDataplexV1Action.


        :return: The invalid_data_format of this GoogleCloudDataplexV1Action.
        :rtype: GoogleCloudDataplexV1ActionInvalidDataFormat
        """
        return self._invalid_data_format

    @invalid_data_format.setter
    def invalid_data_format(self, invalid_data_format):
        """Sets the invalid_data_format of this GoogleCloudDataplexV1Action.


        :param invalid_data_format: The invalid_data_format of this GoogleCloudDataplexV1Action.
        :type invalid_data_format: GoogleCloudDataplexV1ActionInvalidDataFormat
        """

        self._invalid_data_format = invalid_data_format

    @property
    def invalid_data_organization(self):
        """Gets the invalid_data_organization of this GoogleCloudDataplexV1Action.

        Action details for invalid data arrangement.

        :return: The invalid_data_organization of this GoogleCloudDataplexV1Action.
        :rtype: object
        """
        return self._invalid_data_organization

    @invalid_data_organization.setter
    def invalid_data_organization(self, invalid_data_organization):
        """Sets the invalid_data_organization of this GoogleCloudDataplexV1Action.

        Action details for invalid data arrangement.

        :param invalid_data_organization: The invalid_data_organization of this GoogleCloudDataplexV1Action.
        :type invalid_data_organization: object
        """

        self._invalid_data_organization = invalid_data_organization

    @property
    def invalid_data_partition(self):
        """Gets the invalid_data_partition of this GoogleCloudDataplexV1Action.


        :return: The invalid_data_partition of this GoogleCloudDataplexV1Action.
        :rtype: GoogleCloudDataplexV1ActionInvalidDataPartition
        """
        return self._invalid_data_partition

    @invalid_data_partition.setter
    def invalid_data_partition(self, invalid_data_partition):
        """Sets the invalid_data_partition of this GoogleCloudDataplexV1Action.


        :param invalid_data_partition: The invalid_data_partition of this GoogleCloudDataplexV1Action.
        :type invalid_data_partition: GoogleCloudDataplexV1ActionInvalidDataPartition
        """

        self._invalid_data_partition = invalid_data_partition

    @property
    def issue(self):
        """Gets the issue of this GoogleCloudDataplexV1Action.

        Detailed description of the issue requiring action.

        :return: The issue of this GoogleCloudDataplexV1Action.
        :rtype: str
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this GoogleCloudDataplexV1Action.

        Detailed description of the issue requiring action.

        :param issue: The issue of this GoogleCloudDataplexV1Action.
        :type issue: str
        """

        self._issue = issue

    @property
    def lake(self):
        """Gets the lake of this GoogleCloudDataplexV1Action.

        Output only. The relative resource name of the lake, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}.

        :return: The lake of this GoogleCloudDataplexV1Action.
        :rtype: str
        """
        return self._lake

    @lake.setter
    def lake(self, lake):
        """Sets the lake of this GoogleCloudDataplexV1Action.

        Output only. The relative resource name of the lake, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}.

        :param lake: The lake of this GoogleCloudDataplexV1Action.
        :type lake: str
        """

        self._lake = lake

    @property
    def missing_data(self):
        """Gets the missing_data of this GoogleCloudDataplexV1Action.

        Action details for absence of data detected by discovery.

        :return: The missing_data of this GoogleCloudDataplexV1Action.
        :rtype: object
        """
        return self._missing_data

    @missing_data.setter
    def missing_data(self, missing_data):
        """Sets the missing_data of this GoogleCloudDataplexV1Action.

        Action details for absence of data detected by discovery.

        :param missing_data: The missing_data of this GoogleCloudDataplexV1Action.
        :type missing_data: object
        """

        self._missing_data = missing_data

    @property
    def missing_resource(self):
        """Gets the missing_resource of this GoogleCloudDataplexV1Action.

        Action details for resource references in assets that cannot be located.

        :return: The missing_resource of this GoogleCloudDataplexV1Action.
        :rtype: object
        """
        return self._missing_resource

    @missing_resource.setter
    def missing_resource(self, missing_resource):
        """Sets the missing_resource of this GoogleCloudDataplexV1Action.

        Action details for resource references in assets that cannot be located.

        :param missing_resource: The missing_resource of this GoogleCloudDataplexV1Action.
        :type missing_resource: object
        """

        self._missing_resource = missing_resource

    @property
    def name(self):
        """Gets the name of this GoogleCloudDataplexV1Action.

        Output only. The relative resource name of the action, of the form: projects/{project}/locations/{location}/lakes/{lake}/actions/{action} projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/actions/{action} projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/assets/{asset}/actions/{action}.

        :return: The name of this GoogleCloudDataplexV1Action.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDataplexV1Action.

        Output only. The relative resource name of the action, of the form: projects/{project}/locations/{location}/lakes/{lake}/actions/{action} projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/actions/{action} projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/assets/{asset}/actions/{action}.

        :param name: The name of this GoogleCloudDataplexV1Action.
        :type name: str
        """

        self._name = name

    @property
    def unauthorized_resource(self):
        """Gets the unauthorized_resource of this GoogleCloudDataplexV1Action.

        Action details for unauthorized resource issues raised to indicate that the service account associated with the lake instance is not authorized to access or manage the resource associated with an asset.

        :return: The unauthorized_resource of this GoogleCloudDataplexV1Action.
        :rtype: object
        """
        return self._unauthorized_resource

    @unauthorized_resource.setter
    def unauthorized_resource(self, unauthorized_resource):
        """Sets the unauthorized_resource of this GoogleCloudDataplexV1Action.

        Action details for unauthorized resource issues raised to indicate that the service account associated with the lake instance is not authorized to access or manage the resource associated with an asset.

        :param unauthorized_resource: The unauthorized_resource of this GoogleCloudDataplexV1Action.
        :type unauthorized_resource: object
        """

        self._unauthorized_resource = unauthorized_resource

    @property
    def zone(self):
        """Gets the zone of this GoogleCloudDataplexV1Action.

        Output only. The relative resource name of the zone, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}.

        :return: The zone of this GoogleCloudDataplexV1Action.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this GoogleCloudDataplexV1Action.

        Output only. The relative resource name of the zone, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}.

        :param zone: The zone of this GoogleCloudDataplexV1Action.
        :type zone: str
        """

        self._zone = zone
