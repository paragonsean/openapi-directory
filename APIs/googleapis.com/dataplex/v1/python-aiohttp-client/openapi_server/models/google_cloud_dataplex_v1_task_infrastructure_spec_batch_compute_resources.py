# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, executors_count: int=None, max_executors_count: int=None):
        """GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources - a model defined in OpenAPI

        :param executors_count: The executors_count of this GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources.
        :param max_executors_count: The max_executors_count of this GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources.
        """
        self.openapi_types = {
            'executors_count': int,
            'max_executors_count': int
        }

        self.attribute_map = {
            'executors_count': 'executorsCount',
            'max_executors_count': 'maxExecutorsCount'
        }

        self._executors_count = executors_count
        self._max_executors_count = max_executors_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources of this GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def executors_count(self):
        """Gets the executors_count of this GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources.

        Optional. Total number of job executors. Executor Count should be between 2 and 100. Default=2

        :return: The executors_count of this GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources.
        :rtype: int
        """
        return self._executors_count

    @executors_count.setter
    def executors_count(self, executors_count):
        """Sets the executors_count of this GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources.

        Optional. Total number of job executors. Executor Count should be between 2 and 100. Default=2

        :param executors_count: The executors_count of this GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources.
        :type executors_count: int
        """

        self._executors_count = executors_count

    @property
    def max_executors_count(self):
        """Gets the max_executors_count of this GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources.

        Optional. Max configurable executors. If max_executors_count > executors_count, then auto-scaling is enabled. Max Executor Count should be between 2 and 1000. Default=1000

        :return: The max_executors_count of this GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources.
        :rtype: int
        """
        return self._max_executors_count

    @max_executors_count.setter
    def max_executors_count(self, max_executors_count):
        """Sets the max_executors_count of this GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources.

        Optional. Max configurable executors. If max_executors_count > executors_count, then auto-scaling is enabled. Max Executor Count should be between 2 and 1000. Default=1000

        :param max_executors_count: The max_executors_count of this GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources.
        :type max_executors_count: int
        """

        self._max_executors_count = max_executors_count
