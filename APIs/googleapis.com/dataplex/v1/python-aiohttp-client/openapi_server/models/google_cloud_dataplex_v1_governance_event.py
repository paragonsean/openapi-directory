# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dataplex_v1_governance_event_entity import GoogleCloudDataplexV1GovernanceEventEntity
from openapi_server import util


class GoogleCloudDataplexV1GovernanceEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity: GoogleCloudDataplexV1GovernanceEventEntity=None, event_type: str=None, message: str=None):
        """GoogleCloudDataplexV1GovernanceEvent - a model defined in OpenAPI

        :param entity: The entity of this GoogleCloudDataplexV1GovernanceEvent.
        :param event_type: The event_type of this GoogleCloudDataplexV1GovernanceEvent.
        :param message: The message of this GoogleCloudDataplexV1GovernanceEvent.
        """
        self.openapi_types = {
            'entity': GoogleCloudDataplexV1GovernanceEventEntity,
            'event_type': str,
            'message': str
        }

        self.attribute_map = {
            'entity': 'entity',
            'event_type': 'eventType',
            'message': 'message'
        }

        self._entity = entity
        self._event_type = event_type
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1GovernanceEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1GovernanceEvent of this GoogleCloudDataplexV1GovernanceEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity(self):
        """Gets the entity of this GoogleCloudDataplexV1GovernanceEvent.


        :return: The entity of this GoogleCloudDataplexV1GovernanceEvent.
        :rtype: GoogleCloudDataplexV1GovernanceEventEntity
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this GoogleCloudDataplexV1GovernanceEvent.


        :param entity: The entity of this GoogleCloudDataplexV1GovernanceEvent.
        :type entity: GoogleCloudDataplexV1GovernanceEventEntity
        """

        self._entity = entity

    @property
    def event_type(self):
        """Gets the event_type of this GoogleCloudDataplexV1GovernanceEvent.

        The type of the event.

        :return: The event_type of this GoogleCloudDataplexV1GovernanceEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this GoogleCloudDataplexV1GovernanceEvent.

        The type of the event.

        :param event_type: The event_type of this GoogleCloudDataplexV1GovernanceEvent.
        :type event_type: str
        """
        allowed_values = ["EVENT_TYPE_UNSPECIFIED", "RESOURCE_IAM_POLICY_UPDATE", "BIGQUERY_TABLE_CREATE", "BIGQUERY_TABLE_UPDATE", "BIGQUERY_TABLE_DELETE", "BIGQUERY_CONNECTION_CREATE", "BIGQUERY_CONNECTION_UPDATE", "BIGQUERY_CONNECTION_DELETE", "BIGQUERY_TAXONOMY_CREATE", "BIGQUERY_POLICY_TAG_CREATE", "BIGQUERY_POLICY_TAG_DELETE", "BIGQUERY_POLICY_TAG_SET_IAM_POLICY", "ACCESS_POLICY_UPDATE", "GOVERNANCE_RULE_MATCHED_RESOURCES", "GOVERNANCE_RULE_SEARCH_LIMIT_EXCEEDS", "GOVERNANCE_RULE_ERRORS", "GOVERNANCE_RULE_PROCESSING"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def message(self):
        """Gets the message of this GoogleCloudDataplexV1GovernanceEvent.

        The log message.

        :return: The message of this GoogleCloudDataplexV1GovernanceEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GoogleCloudDataplexV1GovernanceEvent.

        The log message.

        :param message: The message of this GoogleCloudDataplexV1GovernanceEvent.
        :type message: str
        """

        self._message = message
