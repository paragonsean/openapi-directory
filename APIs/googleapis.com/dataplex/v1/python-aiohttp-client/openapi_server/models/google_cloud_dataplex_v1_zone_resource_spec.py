# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDataplexV1ZoneResourceSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location_type: str=None):
        """GoogleCloudDataplexV1ZoneResourceSpec - a model defined in OpenAPI

        :param location_type: The location_type of this GoogleCloudDataplexV1ZoneResourceSpec.
        """
        self.openapi_types = {
            'location_type': str
        }

        self.attribute_map = {
            'location_type': 'locationType'
        }

        self._location_type = location_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1ZoneResourceSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1ZoneResourceSpec of this GoogleCloudDataplexV1ZoneResourceSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_type(self):
        """Gets the location_type of this GoogleCloudDataplexV1ZoneResourceSpec.

        Required. Immutable. The location type of the resources that are allowed to be attached to the assets within this zone.

        :return: The location_type of this GoogleCloudDataplexV1ZoneResourceSpec.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this GoogleCloudDataplexV1ZoneResourceSpec.

        Required. Immutable. The location type of the resources that are allowed to be attached to the assets within this zone.

        :param location_type: The location_type of this GoogleCloudDataplexV1ZoneResourceSpec.
        :type location_type: str
        """
        allowed_values = ["LOCATION_TYPE_UNSPECIFIED", "SINGLE_REGION", "MULTI_REGION"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"
                .format(location_type, allowed_values)
            )

        self._location_type = location_type
