# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dataplex_v1_storage_format_csv_options import GoogleCloudDataplexV1StorageFormatCsvOptions
from openapi_server.models.google_cloud_dataplex_v1_storage_format_iceberg_options import GoogleCloudDataplexV1StorageFormatIcebergOptions
from openapi_server.models.google_cloud_dataplex_v1_storage_format_json_options import GoogleCloudDataplexV1StorageFormatJsonOptions
from openapi_server import util


class GoogleCloudDataplexV1StorageFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compression_format: str=None, csv: GoogleCloudDataplexV1StorageFormatCsvOptions=None, format: str=None, iceberg: GoogleCloudDataplexV1StorageFormatIcebergOptions=None, _json: GoogleCloudDataplexV1StorageFormatJsonOptions=None, mime_type: str=None):
        """GoogleCloudDataplexV1StorageFormat - a model defined in OpenAPI

        :param compression_format: The compression_format of this GoogleCloudDataplexV1StorageFormat.
        :param csv: The csv of this GoogleCloudDataplexV1StorageFormat.
        :param format: The format of this GoogleCloudDataplexV1StorageFormat.
        :param iceberg: The iceberg of this GoogleCloudDataplexV1StorageFormat.
        :param _json: The _json of this GoogleCloudDataplexV1StorageFormat.
        :param mime_type: The mime_type of this GoogleCloudDataplexV1StorageFormat.
        """
        self.openapi_types = {
            'compression_format': str,
            'csv': GoogleCloudDataplexV1StorageFormatCsvOptions,
            'format': str,
            'iceberg': GoogleCloudDataplexV1StorageFormatIcebergOptions,
            '_json': GoogleCloudDataplexV1StorageFormatJsonOptions,
            'mime_type': str
        }

        self.attribute_map = {
            'compression_format': 'compressionFormat',
            'csv': 'csv',
            'format': 'format',
            'iceberg': 'iceberg',
            '_json': 'json',
            'mime_type': 'mimeType'
        }

        self._compression_format = compression_format
        self._csv = csv
        self._format = format
        self._iceberg = iceberg
        self.__json = _json
        self._mime_type = mime_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1StorageFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1StorageFormat of this GoogleCloudDataplexV1StorageFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compression_format(self):
        """Gets the compression_format of this GoogleCloudDataplexV1StorageFormat.

        Optional. The compression type associated with the stored data. If unspecified, the data is uncompressed.

        :return: The compression_format of this GoogleCloudDataplexV1StorageFormat.
        :rtype: str
        """
        return self._compression_format

    @compression_format.setter
    def compression_format(self, compression_format):
        """Sets the compression_format of this GoogleCloudDataplexV1StorageFormat.

        Optional. The compression type associated with the stored data. If unspecified, the data is uncompressed.

        :param compression_format: The compression_format of this GoogleCloudDataplexV1StorageFormat.
        :type compression_format: str
        """
        allowed_values = ["COMPRESSION_FORMAT_UNSPECIFIED", "GZIP", "BZIP2"]  # noqa: E501
        if compression_format not in allowed_values:
            raise ValueError(
                "Invalid value for `compression_format` ({0}), must be one of {1}"
                .format(compression_format, allowed_values)
            )

        self._compression_format = compression_format

    @property
    def csv(self):
        """Gets the csv of this GoogleCloudDataplexV1StorageFormat.


        :return: The csv of this GoogleCloudDataplexV1StorageFormat.
        :rtype: GoogleCloudDataplexV1StorageFormatCsvOptions
        """
        return self._csv

    @csv.setter
    def csv(self, csv):
        """Sets the csv of this GoogleCloudDataplexV1StorageFormat.


        :param csv: The csv of this GoogleCloudDataplexV1StorageFormat.
        :type csv: GoogleCloudDataplexV1StorageFormatCsvOptions
        """

        self._csv = csv

    @property
    def format(self):
        """Gets the format of this GoogleCloudDataplexV1StorageFormat.

        Output only. The data format associated with the stored data, which represents content type values. The value is inferred from mime type.

        :return: The format of this GoogleCloudDataplexV1StorageFormat.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this GoogleCloudDataplexV1StorageFormat.

        Output only. The data format associated with the stored data, which represents content type values. The value is inferred from mime type.

        :param format: The format of this GoogleCloudDataplexV1StorageFormat.
        :type format: str
        """
        allowed_values = ["FORMAT_UNSPECIFIED", "PARQUET", "AVRO", "ORC", "CSV", "JSON", "IMAGE", "AUDIO", "VIDEO", "TEXT", "TFRECORD", "OTHER", "UNKNOWN"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def iceberg(self):
        """Gets the iceberg of this GoogleCloudDataplexV1StorageFormat.


        :return: The iceberg of this GoogleCloudDataplexV1StorageFormat.
        :rtype: GoogleCloudDataplexV1StorageFormatIcebergOptions
        """
        return self._iceberg

    @iceberg.setter
    def iceberg(self, iceberg):
        """Sets the iceberg of this GoogleCloudDataplexV1StorageFormat.


        :param iceberg: The iceberg of this GoogleCloudDataplexV1StorageFormat.
        :type iceberg: GoogleCloudDataplexV1StorageFormatIcebergOptions
        """

        self._iceberg = iceberg

    @property
    def _json(self):
        """Gets the _json of this GoogleCloudDataplexV1StorageFormat.


        :return: The _json of this GoogleCloudDataplexV1StorageFormat.
        :rtype: GoogleCloudDataplexV1StorageFormatJsonOptions
        """
        return self.__json

    @_json.setter
    def _json(self, _json):
        """Sets the _json of this GoogleCloudDataplexV1StorageFormat.


        :param _json: The _json of this GoogleCloudDataplexV1StorageFormat.
        :type _json: GoogleCloudDataplexV1StorageFormatJsonOptions
        """

        self.__json = _json

    @property
    def mime_type(self):
        """Gets the mime_type of this GoogleCloudDataplexV1StorageFormat.

        Required. The mime type descriptor for the data. Must match the pattern {type}/{subtype}. Supported values: application/x-parquet application/x-avro application/x-orc application/x-tfrecord application/x-parquet+iceberg application/x-avro+iceberg application/x-orc+iceberg application/json application/{subtypes} text/csv text/ image/{image subtype} video/{video subtype} audio/{audio subtype}

        :return: The mime_type of this GoogleCloudDataplexV1StorageFormat.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this GoogleCloudDataplexV1StorageFormat.

        Required. The mime type descriptor for the data. Must match the pattern {type}/{subtype}. Supported values: application/x-parquet application/x-avro application/x-orc application/x-tfrecord application/x-parquet+iceberg application/x-avro+iceberg application/x-orc+iceberg application/json application/{subtypes} text/csv text/ image/{image subtype} video/{video subtype} audio/{audio subtype}

        :param mime_type: The mime_type of this GoogleCloudDataplexV1StorageFormat.
        :type mime_type: str
        """

        self._mime_type = mime_type
