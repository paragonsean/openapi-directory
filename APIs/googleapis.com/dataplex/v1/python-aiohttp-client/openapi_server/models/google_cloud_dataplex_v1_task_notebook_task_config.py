# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dataplex_v1_task_infrastructure_spec import GoogleCloudDataplexV1TaskInfrastructureSpec
from openapi_server import util


class GoogleCloudDataplexV1TaskNotebookTaskConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_uris: List[str]=None, file_uris: List[str]=None, infrastructure_spec: GoogleCloudDataplexV1TaskInfrastructureSpec=None, notebook: str=None):
        """GoogleCloudDataplexV1TaskNotebookTaskConfig - a model defined in OpenAPI

        :param archive_uris: The archive_uris of this GoogleCloudDataplexV1TaskNotebookTaskConfig.
        :param file_uris: The file_uris of this GoogleCloudDataplexV1TaskNotebookTaskConfig.
        :param infrastructure_spec: The infrastructure_spec of this GoogleCloudDataplexV1TaskNotebookTaskConfig.
        :param notebook: The notebook of this GoogleCloudDataplexV1TaskNotebookTaskConfig.
        """
        self.openapi_types = {
            'archive_uris': List[str],
            'file_uris': List[str],
            'infrastructure_spec': GoogleCloudDataplexV1TaskInfrastructureSpec,
            'notebook': str
        }

        self.attribute_map = {
            'archive_uris': 'archiveUris',
            'file_uris': 'fileUris',
            'infrastructure_spec': 'infrastructureSpec',
            'notebook': 'notebook'
        }

        self._archive_uris = archive_uris
        self._file_uris = file_uris
        self._infrastructure_spec = infrastructure_spec
        self._notebook = notebook

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDataplexV1TaskNotebookTaskConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDataplexV1TaskNotebookTaskConfig of this GoogleCloudDataplexV1TaskNotebookTaskConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_uris(self):
        """Gets the archive_uris of this GoogleCloudDataplexV1TaskNotebookTaskConfig.

        Optional. Cloud Storage URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.

        :return: The archive_uris of this GoogleCloudDataplexV1TaskNotebookTaskConfig.
        :rtype: List[str]
        """
        return self._archive_uris

    @archive_uris.setter
    def archive_uris(self, archive_uris):
        """Sets the archive_uris of this GoogleCloudDataplexV1TaskNotebookTaskConfig.

        Optional. Cloud Storage URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.

        :param archive_uris: The archive_uris of this GoogleCloudDataplexV1TaskNotebookTaskConfig.
        :type archive_uris: List[str]
        """

        self._archive_uris = archive_uris

    @property
    def file_uris(self):
        """Gets the file_uris of this GoogleCloudDataplexV1TaskNotebookTaskConfig.

        Optional. Cloud Storage URIs of files to be placed in the working directory of each executor.

        :return: The file_uris of this GoogleCloudDataplexV1TaskNotebookTaskConfig.
        :rtype: List[str]
        """
        return self._file_uris

    @file_uris.setter
    def file_uris(self, file_uris):
        """Sets the file_uris of this GoogleCloudDataplexV1TaskNotebookTaskConfig.

        Optional. Cloud Storage URIs of files to be placed in the working directory of each executor.

        :param file_uris: The file_uris of this GoogleCloudDataplexV1TaskNotebookTaskConfig.
        :type file_uris: List[str]
        """

        self._file_uris = file_uris

    @property
    def infrastructure_spec(self):
        """Gets the infrastructure_spec of this GoogleCloudDataplexV1TaskNotebookTaskConfig.


        :return: The infrastructure_spec of this GoogleCloudDataplexV1TaskNotebookTaskConfig.
        :rtype: GoogleCloudDataplexV1TaskInfrastructureSpec
        """
        return self._infrastructure_spec

    @infrastructure_spec.setter
    def infrastructure_spec(self, infrastructure_spec):
        """Sets the infrastructure_spec of this GoogleCloudDataplexV1TaskNotebookTaskConfig.


        :param infrastructure_spec: The infrastructure_spec of this GoogleCloudDataplexV1TaskNotebookTaskConfig.
        :type infrastructure_spec: GoogleCloudDataplexV1TaskInfrastructureSpec
        """

        self._infrastructure_spec = infrastructure_spec

    @property
    def notebook(self):
        """Gets the notebook of this GoogleCloudDataplexV1TaskNotebookTaskConfig.

        Required. Path to input notebook. This can be the Cloud Storage URI of the notebook file or the path to a Notebook Content. The execution args are accessible as environment variables (TASK_key=value).

        :return: The notebook of this GoogleCloudDataplexV1TaskNotebookTaskConfig.
        :rtype: str
        """
        return self._notebook

    @notebook.setter
    def notebook(self, notebook):
        """Sets the notebook of this GoogleCloudDataplexV1TaskNotebookTaskConfig.

        Required. Path to input notebook. This can be the Cloud Storage URI of the notebook file or the path to a Notebook Content. The execution args are accessible as environment variables (TASK_key=value).

        :param notebook: The notebook of this GoogleCloudDataplexV1TaskNotebookTaskConfig.
        :type notebook: str
        """

        self._notebook = notebook
