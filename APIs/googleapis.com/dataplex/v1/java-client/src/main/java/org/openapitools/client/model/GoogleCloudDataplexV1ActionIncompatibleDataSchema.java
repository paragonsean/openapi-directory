/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Action details for incompatible schemas detected by discovery.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1ActionIncompatibleDataSchema {
  public static final String SERIALIZED_NAME_EXISTING_SCHEMA = "existingSchema";
  @SerializedName(SERIALIZED_NAME_EXISTING_SCHEMA)
  private String existingSchema;

  public static final String SERIALIZED_NAME_NEW_SCHEMA = "newSchema";
  @SerializedName(SERIALIZED_NAME_NEW_SCHEMA)
  private String newSchema;

  public static final String SERIALIZED_NAME_SAMPLED_DATA_LOCATIONS = "sampledDataLocations";
  @SerializedName(SERIALIZED_NAME_SAMPLED_DATA_LOCATIONS)
  private List<String> sampledDataLocations = new ArrayList<>();

  /**
   * Whether the action relates to a schema that is incompatible or modified.
   */
  @JsonAdapter(SchemaChangeEnum.Adapter.class)
  public enum SchemaChangeEnum {
    SCHEMA_CHANGE_UNSPECIFIED("SCHEMA_CHANGE_UNSPECIFIED"),
    
    INCOMPATIBLE("INCOMPATIBLE"),
    
    MODIFIED("MODIFIED");

    private String value;

    SchemaChangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchemaChangeEnum fromValue(String value) {
      for (SchemaChangeEnum b : SchemaChangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SchemaChangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemaChangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemaChangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SchemaChangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SchemaChangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEMA_CHANGE = "schemaChange";
  @SerializedName(SERIALIZED_NAME_SCHEMA_CHANGE)
  private SchemaChangeEnum schemaChange;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private String table;

  public GoogleCloudDataplexV1ActionIncompatibleDataSchema() {
  }

  public GoogleCloudDataplexV1ActionIncompatibleDataSchema existingSchema(String existingSchema) {
    this.existingSchema = existingSchema;
    return this;
  }

  /**
   * The existing and expected schema of the table. The schema is provided as a JSON formatted structure listing columns and data types.
   * @return existingSchema
   */
  @javax.annotation.Nullable
  public String getExistingSchema() {
    return existingSchema;
  }

  public void setExistingSchema(String existingSchema) {
    this.existingSchema = existingSchema;
  }


  public GoogleCloudDataplexV1ActionIncompatibleDataSchema newSchema(String newSchema) {
    this.newSchema = newSchema;
    return this;
  }

  /**
   * The new and incompatible schema within the table. The schema is provided as a JSON formatted structured listing columns and data types.
   * @return newSchema
   */
  @javax.annotation.Nullable
  public String getNewSchema() {
    return newSchema;
  }

  public void setNewSchema(String newSchema) {
    this.newSchema = newSchema;
  }


  public GoogleCloudDataplexV1ActionIncompatibleDataSchema sampledDataLocations(List<String> sampledDataLocations) {
    this.sampledDataLocations = sampledDataLocations;
    return this;
  }

  public GoogleCloudDataplexV1ActionIncompatibleDataSchema addSampledDataLocationsItem(String sampledDataLocationsItem) {
    if (this.sampledDataLocations == null) {
      this.sampledDataLocations = new ArrayList<>();
    }
    this.sampledDataLocations.add(sampledDataLocationsItem);
    return this;
  }

  /**
   * The list of data locations sampled and used for format/schema inference.
   * @return sampledDataLocations
   */
  @javax.annotation.Nullable
  public List<String> getSampledDataLocations() {
    return sampledDataLocations;
  }

  public void setSampledDataLocations(List<String> sampledDataLocations) {
    this.sampledDataLocations = sampledDataLocations;
  }


  public GoogleCloudDataplexV1ActionIncompatibleDataSchema schemaChange(SchemaChangeEnum schemaChange) {
    this.schemaChange = schemaChange;
    return this;
  }

  /**
   * Whether the action relates to a schema that is incompatible or modified.
   * @return schemaChange
   */
  @javax.annotation.Nullable
  public SchemaChangeEnum getSchemaChange() {
    return schemaChange;
  }

  public void setSchemaChange(SchemaChangeEnum schemaChange) {
    this.schemaChange = schemaChange;
  }


  public GoogleCloudDataplexV1ActionIncompatibleDataSchema table(String table) {
    this.table = table;
    return this;
  }

  /**
   * The name of the table containing invalid data.
   * @return table
   */
  @javax.annotation.Nullable
  public String getTable() {
    return table;
  }

  public void setTable(String table) {
    this.table = table;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1ActionIncompatibleDataSchema googleCloudDataplexV1ActionIncompatibleDataSchema = (GoogleCloudDataplexV1ActionIncompatibleDataSchema) o;
    return Objects.equals(this.existingSchema, googleCloudDataplexV1ActionIncompatibleDataSchema.existingSchema) &&
        Objects.equals(this.newSchema, googleCloudDataplexV1ActionIncompatibleDataSchema.newSchema) &&
        Objects.equals(this.sampledDataLocations, googleCloudDataplexV1ActionIncompatibleDataSchema.sampledDataLocations) &&
        Objects.equals(this.schemaChange, googleCloudDataplexV1ActionIncompatibleDataSchema.schemaChange) &&
        Objects.equals(this.table, googleCloudDataplexV1ActionIncompatibleDataSchema.table);
  }

  @Override
  public int hashCode() {
    return Objects.hash(existingSchema, newSchema, sampledDataLocations, schemaChange, table);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1ActionIncompatibleDataSchema {\n");
    sb.append("    existingSchema: ").append(toIndentedString(existingSchema)).append("\n");
    sb.append("    newSchema: ").append(toIndentedString(newSchema)).append("\n");
    sb.append("    sampledDataLocations: ").append(toIndentedString(sampledDataLocations)).append("\n");
    sb.append("    schemaChange: ").append(toIndentedString(schemaChange)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("existingSchema");
    openapiFields.add("newSchema");
    openapiFields.add("sampledDataLocations");
    openapiFields.add("schemaChange");
    openapiFields.add("table");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1ActionIncompatibleDataSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1ActionIncompatibleDataSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1ActionIncompatibleDataSchema is not found in the empty JSON string", GoogleCloudDataplexV1ActionIncompatibleDataSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1ActionIncompatibleDataSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1ActionIncompatibleDataSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("existingSchema") != null && !jsonObj.get("existingSchema").isJsonNull()) && !jsonObj.get("existingSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `existingSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("existingSchema").toString()));
      }
      if ((jsonObj.get("newSchema") != null && !jsonObj.get("newSchema").isJsonNull()) && !jsonObj.get("newSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newSchema").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sampledDataLocations") != null && !jsonObj.get("sampledDataLocations").isJsonNull() && !jsonObj.get("sampledDataLocations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampledDataLocations` to be an array in the JSON string but got `%s`", jsonObj.get("sampledDataLocations").toString()));
      }
      if ((jsonObj.get("schemaChange") != null && !jsonObj.get("schemaChange").isJsonNull()) && !jsonObj.get("schemaChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaChange").toString()));
      }
      // validate the optional field `schemaChange`
      if (jsonObj.get("schemaChange") != null && !jsonObj.get("schemaChange").isJsonNull()) {
        SchemaChangeEnum.validateJsonElement(jsonObj.get("schemaChange"));
      }
      if ((jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) && !jsonObj.get("table").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1ActionIncompatibleDataSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1ActionIncompatibleDataSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1ActionIncompatibleDataSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1ActionIncompatibleDataSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1ActionIncompatibleDataSchema>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1ActionIncompatibleDataSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1ActionIncompatibleDataSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1ActionIncompatibleDataSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1ActionIncompatibleDataSchema
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1ActionIncompatibleDataSchema
   */
  public static GoogleCloudDataplexV1ActionIncompatibleDataSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1ActionIncompatibleDataSchema.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1ActionIncompatibleDataSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

