/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDataplexV1DataQualityRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataQualityRuleResult provides a more detailed, per-rule view of the results.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1DataQualityRuleResult {
  public static final String SERIALIZED_NAME_EVALUATED_COUNT = "evaluatedCount";
  @SerializedName(SERIALIZED_NAME_EVALUATED_COUNT)
  private String evaluatedCount;

  public static final String SERIALIZED_NAME_FAILING_ROWS_QUERY = "failingRowsQuery";
  @SerializedName(SERIALIZED_NAME_FAILING_ROWS_QUERY)
  private String failingRowsQuery;

  public static final String SERIALIZED_NAME_NULL_COUNT = "nullCount";
  @SerializedName(SERIALIZED_NAME_NULL_COUNT)
  private String nullCount;

  public static final String SERIALIZED_NAME_PASS_RATIO = "passRatio";
  @SerializedName(SERIALIZED_NAME_PASS_RATIO)
  private Double passRatio;

  public static final String SERIALIZED_NAME_PASSED = "passed";
  @SerializedName(SERIALIZED_NAME_PASSED)
  private Boolean passed;

  public static final String SERIALIZED_NAME_PASSED_COUNT = "passedCount";
  @SerializedName(SERIALIZED_NAME_PASSED_COUNT)
  private String passedCount;

  public static final String SERIALIZED_NAME_RULE = "rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  private GoogleCloudDataplexV1DataQualityRule rule;

  public GoogleCloudDataplexV1DataQualityRuleResult() {
  }

  public GoogleCloudDataplexV1DataQualityRuleResult evaluatedCount(String evaluatedCount) {
    this.evaluatedCount = evaluatedCount;
    return this;
  }

  /**
   * The number of rows a rule was evaluated against.This field is only valid for row-level type rules.Evaluated count can be configured to either include all rows (default) - with null rows automatically failing rule evaluation, or exclude null rows from the evaluated_count, by setting ignore_nulls &#x3D; true.
   * @return evaluatedCount
   */
  @javax.annotation.Nullable
  public String getEvaluatedCount() {
    return evaluatedCount;
  }

  public void setEvaluatedCount(String evaluatedCount) {
    this.evaluatedCount = evaluatedCount;
  }


  public GoogleCloudDataplexV1DataQualityRuleResult failingRowsQuery(String failingRowsQuery) {
    this.failingRowsQuery = failingRowsQuery;
    return this;
  }

  /**
   * The query to find rows that did not pass this rule.This field is only valid for row-level type rules.
   * @return failingRowsQuery
   */
  @javax.annotation.Nullable
  public String getFailingRowsQuery() {
    return failingRowsQuery;
  }

  public void setFailingRowsQuery(String failingRowsQuery) {
    this.failingRowsQuery = failingRowsQuery;
  }


  public GoogleCloudDataplexV1DataQualityRuleResult nullCount(String nullCount) {
    this.nullCount = nullCount;
    return this;
  }

  /**
   * The number of rows with null values in the specified column.
   * @return nullCount
   */
  @javax.annotation.Nullable
  public String getNullCount() {
    return nullCount;
  }

  public void setNullCount(String nullCount) {
    this.nullCount = nullCount;
  }


  public GoogleCloudDataplexV1DataQualityRuleResult passRatio(Double passRatio) {
    this.passRatio = passRatio;
    return this;
  }

  /**
   * The ratio of passed_count / evaluated_count.This field is only valid for row-level type rules.
   * @return passRatio
   */
  @javax.annotation.Nullable
  public Double getPassRatio() {
    return passRatio;
  }

  public void setPassRatio(Double passRatio) {
    this.passRatio = passRatio;
  }


  public GoogleCloudDataplexV1DataQualityRuleResult passed(Boolean passed) {
    this.passed = passed;
    return this;
  }

  /**
   * Whether the rule passed or failed.
   * @return passed
   */
  @javax.annotation.Nullable
  public Boolean getPassed() {
    return passed;
  }

  public void setPassed(Boolean passed) {
    this.passed = passed;
  }


  public GoogleCloudDataplexV1DataQualityRuleResult passedCount(String passedCount) {
    this.passedCount = passedCount;
    return this;
  }

  /**
   * The number of rows which passed a rule evaluation.This field is only valid for row-level type rules.
   * @return passedCount
   */
  @javax.annotation.Nullable
  public String getPassedCount() {
    return passedCount;
  }

  public void setPassedCount(String passedCount) {
    this.passedCount = passedCount;
  }


  public GoogleCloudDataplexV1DataQualityRuleResult rule(GoogleCloudDataplexV1DataQualityRule rule) {
    this.rule = rule;
    return this;
  }

  /**
   * Get rule
   * @return rule
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1DataQualityRule getRule() {
    return rule;
  }

  public void setRule(GoogleCloudDataplexV1DataQualityRule rule) {
    this.rule = rule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1DataQualityRuleResult googleCloudDataplexV1DataQualityRuleResult = (GoogleCloudDataplexV1DataQualityRuleResult) o;
    return Objects.equals(this.evaluatedCount, googleCloudDataplexV1DataQualityRuleResult.evaluatedCount) &&
        Objects.equals(this.failingRowsQuery, googleCloudDataplexV1DataQualityRuleResult.failingRowsQuery) &&
        Objects.equals(this.nullCount, googleCloudDataplexV1DataQualityRuleResult.nullCount) &&
        Objects.equals(this.passRatio, googleCloudDataplexV1DataQualityRuleResult.passRatio) &&
        Objects.equals(this.passed, googleCloudDataplexV1DataQualityRuleResult.passed) &&
        Objects.equals(this.passedCount, googleCloudDataplexV1DataQualityRuleResult.passedCount) &&
        Objects.equals(this.rule, googleCloudDataplexV1DataQualityRuleResult.rule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evaluatedCount, failingRowsQuery, nullCount, passRatio, passed, passedCount, rule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1DataQualityRuleResult {\n");
    sb.append("    evaluatedCount: ").append(toIndentedString(evaluatedCount)).append("\n");
    sb.append("    failingRowsQuery: ").append(toIndentedString(failingRowsQuery)).append("\n");
    sb.append("    nullCount: ").append(toIndentedString(nullCount)).append("\n");
    sb.append("    passRatio: ").append(toIndentedString(passRatio)).append("\n");
    sb.append("    passed: ").append(toIndentedString(passed)).append("\n");
    sb.append("    passedCount: ").append(toIndentedString(passedCount)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("evaluatedCount");
    openapiFields.add("failingRowsQuery");
    openapiFields.add("nullCount");
    openapiFields.add("passRatio");
    openapiFields.add("passed");
    openapiFields.add("passedCount");
    openapiFields.add("rule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1DataQualityRuleResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1DataQualityRuleResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1DataQualityRuleResult is not found in the empty JSON string", GoogleCloudDataplexV1DataQualityRuleResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1DataQualityRuleResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1DataQualityRuleResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("evaluatedCount") != null && !jsonObj.get("evaluatedCount").isJsonNull()) && !jsonObj.get("evaluatedCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluatedCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluatedCount").toString()));
      }
      if ((jsonObj.get("failingRowsQuery") != null && !jsonObj.get("failingRowsQuery").isJsonNull()) && !jsonObj.get("failingRowsQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failingRowsQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failingRowsQuery").toString()));
      }
      if ((jsonObj.get("nullCount") != null && !jsonObj.get("nullCount").isJsonNull()) && !jsonObj.get("nullCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nullCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nullCount").toString()));
      }
      if ((jsonObj.get("passedCount") != null && !jsonObj.get("passedCount").isJsonNull()) && !jsonObj.get("passedCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passedCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passedCount").toString()));
      }
      // validate the optional field `rule`
      if (jsonObj.get("rule") != null && !jsonObj.get("rule").isJsonNull()) {
        GoogleCloudDataplexV1DataQualityRule.validateJsonElement(jsonObj.get("rule"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1DataQualityRuleResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1DataQualityRuleResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1DataQualityRuleResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1DataQualityRuleResult.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1DataQualityRuleResult>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1DataQualityRuleResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1DataQualityRuleResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1DataQualityRuleResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1DataQualityRuleResult
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1DataQualityRuleResult
   */
  public static GoogleCloudDataplexV1DataQualityRuleResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1DataQualityRuleResult.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1DataQualityRuleResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

