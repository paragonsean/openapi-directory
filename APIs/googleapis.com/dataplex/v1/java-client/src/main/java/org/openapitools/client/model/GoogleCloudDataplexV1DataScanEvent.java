/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs;
import org.openapitools.client.model.GoogleCloudDataplexV1DataScanEventDataProfileResult;
import org.openapitools.client.model.GoogleCloudDataplexV1DataScanEventDataQualityAppliedConfigs;
import org.openapitools.client.model.GoogleCloudDataplexV1DataScanEventDataQualityResult;
import org.openapitools.client.model.GoogleCloudDataplexV1DataScanEventPostScanActionsResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * These messages contain information about the execution of a datascan. The monitored resource is &#39;DataScan&#39; Next ID: 13
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1DataScanEvent {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DATA_PROFILE = "dataProfile";
  @SerializedName(SERIALIZED_NAME_DATA_PROFILE)
  private GoogleCloudDataplexV1DataScanEventDataProfileResult dataProfile;

  public static final String SERIALIZED_NAME_DATA_PROFILE_CONFIGS = "dataProfileConfigs";
  @SerializedName(SERIALIZED_NAME_DATA_PROFILE_CONFIGS)
  private GoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs dataProfileConfigs;

  public static final String SERIALIZED_NAME_DATA_QUALITY = "dataQuality";
  @SerializedName(SERIALIZED_NAME_DATA_QUALITY)
  private GoogleCloudDataplexV1DataScanEventDataQualityResult dataQuality;

  public static final String SERIALIZED_NAME_DATA_QUALITY_CONFIGS = "dataQualityConfigs";
  @SerializedName(SERIALIZED_NAME_DATA_QUALITY_CONFIGS)
  private GoogleCloudDataplexV1DataScanEventDataQualityAppliedConfigs dataQualityConfigs;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "dataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private String dataSource;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_POST_SCAN_ACTIONS_RESULT = "postScanActionsResult";
  @SerializedName(SERIALIZED_NAME_POST_SCAN_ACTIONS_RESULT)
  private GoogleCloudDataplexV1DataScanEventPostScanActionsResult postScanActionsResult;

  /**
   * The scope of the data scan (e.g. full, incremental).
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    SCOPE_UNSPECIFIED("SCOPE_UNSPECIFIED"),
    
    FULL("FULL"),
    
    INCREMENTAL("INCREMENTAL");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private ScopeEnum scope;

  public static final String SERIALIZED_NAME_SPEC_VERSION = "specVersion";
  @SerializedName(SERIALIZED_NAME_SPEC_VERSION)
  private String specVersion;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * The status of the data scan job.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    STARTED("STARTED"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    CANCELLED("CANCELLED"),
    
    CREATED("CREATED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * The trigger type of the data scan job.
   */
  @JsonAdapter(TriggerEnum.Adapter.class)
  public enum TriggerEnum {
    TRIGGER_UNSPECIFIED("TRIGGER_UNSPECIFIED"),
    
    ON_DEMAND("ON_DEMAND"),
    
    SCHEDULE("SCHEDULE");

    private String value;

    TriggerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerEnum fromValue(String value) {
      for (TriggerEnum b : TriggerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriggerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriggerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TriggerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private TriggerEnum trigger;

  /**
   * The type of the data scan.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SCAN_TYPE_UNSPECIFIED("SCAN_TYPE_UNSPECIFIED"),
    
    DATA_PROFILE("DATA_PROFILE"),
    
    DATA_QUALITY("DATA_QUALITY");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public GoogleCloudDataplexV1DataScanEvent() {
  }

  public GoogleCloudDataplexV1DataScanEvent createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * The time when the data scan job was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public GoogleCloudDataplexV1DataScanEvent dataProfile(GoogleCloudDataplexV1DataScanEventDataProfileResult dataProfile) {
    this.dataProfile = dataProfile;
    return this;
  }

  /**
   * Get dataProfile
   * @return dataProfile
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1DataScanEventDataProfileResult getDataProfile() {
    return dataProfile;
  }

  public void setDataProfile(GoogleCloudDataplexV1DataScanEventDataProfileResult dataProfile) {
    this.dataProfile = dataProfile;
  }


  public GoogleCloudDataplexV1DataScanEvent dataProfileConfigs(GoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs dataProfileConfigs) {
    this.dataProfileConfigs = dataProfileConfigs;
    return this;
  }

  /**
   * Get dataProfileConfigs
   * @return dataProfileConfigs
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs getDataProfileConfigs() {
    return dataProfileConfigs;
  }

  public void setDataProfileConfigs(GoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs dataProfileConfigs) {
    this.dataProfileConfigs = dataProfileConfigs;
  }


  public GoogleCloudDataplexV1DataScanEvent dataQuality(GoogleCloudDataplexV1DataScanEventDataQualityResult dataQuality) {
    this.dataQuality = dataQuality;
    return this;
  }

  /**
   * Get dataQuality
   * @return dataQuality
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1DataScanEventDataQualityResult getDataQuality() {
    return dataQuality;
  }

  public void setDataQuality(GoogleCloudDataplexV1DataScanEventDataQualityResult dataQuality) {
    this.dataQuality = dataQuality;
  }


  public GoogleCloudDataplexV1DataScanEvent dataQualityConfigs(GoogleCloudDataplexV1DataScanEventDataQualityAppliedConfigs dataQualityConfigs) {
    this.dataQualityConfigs = dataQualityConfigs;
    return this;
  }

  /**
   * Get dataQualityConfigs
   * @return dataQualityConfigs
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1DataScanEventDataQualityAppliedConfigs getDataQualityConfigs() {
    return dataQualityConfigs;
  }

  public void setDataQualityConfigs(GoogleCloudDataplexV1DataScanEventDataQualityAppliedConfigs dataQualityConfigs) {
    this.dataQualityConfigs = dataQualityConfigs;
  }


  public GoogleCloudDataplexV1DataScanEvent dataSource(String dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * The data source of the data scan
   * @return dataSource
   */
  @javax.annotation.Nullable
  public String getDataSource() {
    return dataSource;
  }

  public void setDataSource(String dataSource) {
    this.dataSource = dataSource;
  }


  public GoogleCloudDataplexV1DataScanEvent endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The time when the data scan job finished.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public GoogleCloudDataplexV1DataScanEvent jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * The identifier of the specific data scan job this log entry is for.
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public GoogleCloudDataplexV1DataScanEvent message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The message describing the data scan job event.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public GoogleCloudDataplexV1DataScanEvent postScanActionsResult(GoogleCloudDataplexV1DataScanEventPostScanActionsResult postScanActionsResult) {
    this.postScanActionsResult = postScanActionsResult;
    return this;
  }

  /**
   * Get postScanActionsResult
   * @return postScanActionsResult
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1DataScanEventPostScanActionsResult getPostScanActionsResult() {
    return postScanActionsResult;
  }

  public void setPostScanActionsResult(GoogleCloudDataplexV1DataScanEventPostScanActionsResult postScanActionsResult) {
    this.postScanActionsResult = postScanActionsResult;
  }


  public GoogleCloudDataplexV1DataScanEvent scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

  /**
   * The scope of the data scan (e.g. full, incremental).
   * @return scope
   */
  @javax.annotation.Nullable
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }


  public GoogleCloudDataplexV1DataScanEvent specVersion(String specVersion) {
    this.specVersion = specVersion;
    return this;
  }

  /**
   * A version identifier of the spec which was used to execute this job.
   * @return specVersion
   */
  @javax.annotation.Nullable
  public String getSpecVersion() {
    return specVersion;
  }

  public void setSpecVersion(String specVersion) {
    this.specVersion = specVersion;
  }


  public GoogleCloudDataplexV1DataScanEvent startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time when the data scan job started to run.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public GoogleCloudDataplexV1DataScanEvent state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The status of the data scan job.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GoogleCloudDataplexV1DataScanEvent trigger(TriggerEnum trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * The trigger type of the data scan job.
   * @return trigger
   */
  @javax.annotation.Nullable
  public TriggerEnum getTrigger() {
    return trigger;
  }

  public void setTrigger(TriggerEnum trigger) {
    this.trigger = trigger;
  }


  public GoogleCloudDataplexV1DataScanEvent type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the data scan.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1DataScanEvent googleCloudDataplexV1DataScanEvent = (GoogleCloudDataplexV1DataScanEvent) o;
    return Objects.equals(this.createTime, googleCloudDataplexV1DataScanEvent.createTime) &&
        Objects.equals(this.dataProfile, googleCloudDataplexV1DataScanEvent.dataProfile) &&
        Objects.equals(this.dataProfileConfigs, googleCloudDataplexV1DataScanEvent.dataProfileConfigs) &&
        Objects.equals(this.dataQuality, googleCloudDataplexV1DataScanEvent.dataQuality) &&
        Objects.equals(this.dataQualityConfigs, googleCloudDataplexV1DataScanEvent.dataQualityConfigs) &&
        Objects.equals(this.dataSource, googleCloudDataplexV1DataScanEvent.dataSource) &&
        Objects.equals(this.endTime, googleCloudDataplexV1DataScanEvent.endTime) &&
        Objects.equals(this.jobId, googleCloudDataplexV1DataScanEvent.jobId) &&
        Objects.equals(this.message, googleCloudDataplexV1DataScanEvent.message) &&
        Objects.equals(this.postScanActionsResult, googleCloudDataplexV1DataScanEvent.postScanActionsResult) &&
        Objects.equals(this.scope, googleCloudDataplexV1DataScanEvent.scope) &&
        Objects.equals(this.specVersion, googleCloudDataplexV1DataScanEvent.specVersion) &&
        Objects.equals(this.startTime, googleCloudDataplexV1DataScanEvent.startTime) &&
        Objects.equals(this.state, googleCloudDataplexV1DataScanEvent.state) &&
        Objects.equals(this.trigger, googleCloudDataplexV1DataScanEvent.trigger) &&
        Objects.equals(this.type, googleCloudDataplexV1DataScanEvent.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, dataProfile, dataProfileConfigs, dataQuality, dataQualityConfigs, dataSource, endTime, jobId, message, postScanActionsResult, scope, specVersion, startTime, state, trigger, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1DataScanEvent {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    dataProfile: ").append(toIndentedString(dataProfile)).append("\n");
    sb.append("    dataProfileConfigs: ").append(toIndentedString(dataProfileConfigs)).append("\n");
    sb.append("    dataQuality: ").append(toIndentedString(dataQuality)).append("\n");
    sb.append("    dataQualityConfigs: ").append(toIndentedString(dataQualityConfigs)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    postScanActionsResult: ").append(toIndentedString(postScanActionsResult)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    specVersion: ").append(toIndentedString(specVersion)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("dataProfile");
    openapiFields.add("dataProfileConfigs");
    openapiFields.add("dataQuality");
    openapiFields.add("dataQualityConfigs");
    openapiFields.add("dataSource");
    openapiFields.add("endTime");
    openapiFields.add("jobId");
    openapiFields.add("message");
    openapiFields.add("postScanActionsResult");
    openapiFields.add("scope");
    openapiFields.add("specVersion");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("trigger");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1DataScanEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1DataScanEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1DataScanEvent is not found in the empty JSON string", GoogleCloudDataplexV1DataScanEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1DataScanEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1DataScanEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `dataProfile`
      if (jsonObj.get("dataProfile") != null && !jsonObj.get("dataProfile").isJsonNull()) {
        GoogleCloudDataplexV1DataScanEventDataProfileResult.validateJsonElement(jsonObj.get("dataProfile"));
      }
      // validate the optional field `dataProfileConfigs`
      if (jsonObj.get("dataProfileConfigs") != null && !jsonObj.get("dataProfileConfigs").isJsonNull()) {
        GoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs.validateJsonElement(jsonObj.get("dataProfileConfigs"));
      }
      // validate the optional field `dataQuality`
      if (jsonObj.get("dataQuality") != null && !jsonObj.get("dataQuality").isJsonNull()) {
        GoogleCloudDataplexV1DataScanEventDataQualityResult.validateJsonElement(jsonObj.get("dataQuality"));
      }
      // validate the optional field `dataQualityConfigs`
      if (jsonObj.get("dataQualityConfigs") != null && !jsonObj.get("dataQualityConfigs").isJsonNull()) {
        GoogleCloudDataplexV1DataScanEventDataQualityAppliedConfigs.validateJsonElement(jsonObj.get("dataQualityConfigs"));
      }
      if ((jsonObj.get("dataSource") != null && !jsonObj.get("dataSource").isJsonNull()) && !jsonObj.get("dataSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSource").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `postScanActionsResult`
      if (jsonObj.get("postScanActionsResult") != null && !jsonObj.get("postScanActionsResult").isJsonNull()) {
        GoogleCloudDataplexV1DataScanEventPostScanActionsResult.validateJsonElement(jsonObj.get("postScanActionsResult"));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      // validate the optional field `scope`
      if (jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) {
        ScopeEnum.validateJsonElement(jsonObj.get("scope"));
      }
      if ((jsonObj.get("specVersion") != null && !jsonObj.get("specVersion").isJsonNull()) && !jsonObj.get("specVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specVersion").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) && !jsonObj.get("trigger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger").toString()));
      }
      // validate the optional field `trigger`
      if (jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) {
        TriggerEnum.validateJsonElement(jsonObj.get("trigger"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1DataScanEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1DataScanEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1DataScanEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1DataScanEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1DataScanEvent>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1DataScanEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1DataScanEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1DataScanEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1DataScanEvent
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1DataScanEvent
   */
  public static GoogleCloudDataplexV1DataScanEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1DataScanEvent.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1DataScanEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

