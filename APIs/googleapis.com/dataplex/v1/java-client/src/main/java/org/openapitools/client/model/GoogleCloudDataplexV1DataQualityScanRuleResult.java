/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the result of a data quality rule for data quality scan. The monitored resource is &#39;DataScan&#39;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1DataQualityScanRuleResult {
  public static final String SERIALIZED_NAME_COLUMN = "column";
  @SerializedName(SERIALIZED_NAME_COLUMN)
  private String column;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "dataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private String dataSource;

  public static final String SERIALIZED_NAME_EVALUATED_ROW_COUNT = "evaluatedRowCount";
  @SerializedName(SERIALIZED_NAME_EVALUATED_ROW_COUNT)
  private String evaluatedRowCount;

  /**
   * The evaluation type of the data quality rule.
   */
  @JsonAdapter(EvalutionTypeEnum.Adapter.class)
  public enum EvalutionTypeEnum {
    EVALUATION_TYPE_UNSPECIFIED("EVALUATION_TYPE_UNSPECIFIED"),
    
    PER_ROW("PER_ROW"),
    
    AGGREGATE("AGGREGATE");

    private String value;

    EvalutionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EvalutionTypeEnum fromValue(String value) {
      for (EvalutionTypeEnum b : EvalutionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EvalutionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EvalutionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EvalutionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EvalutionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EvalutionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVALUTION_TYPE = "evalutionType";
  @SerializedName(SERIALIZED_NAME_EVALUTION_TYPE)
  private EvalutionTypeEnum evalutionType;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_NULL_ROW_COUNT = "nullRowCount";
  @SerializedName(SERIALIZED_NAME_NULL_ROW_COUNT)
  private String nullRowCount;

  public static final String SERIALIZED_NAME_PASSED_ROW_COUNT = "passedRowCount";
  @SerializedName(SERIALIZED_NAME_PASSED_ROW_COUNT)
  private String passedRowCount;

  /**
   * The result of the data quality rule.
   */
  @JsonAdapter(ResultEnum.Adapter.class)
  public enum ResultEnum {
    RESULT_UNSPECIFIED("RESULT_UNSPECIFIED"),
    
    PASSED("PASSED"),
    
    FAILED("FAILED");

    private String value;

    ResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultEnum fromValue(String value) {
      for (ResultEnum b : ResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private ResultEnum result;

  public static final String SERIALIZED_NAME_RULE_DIMENSION = "ruleDimension";
  @SerializedName(SERIALIZED_NAME_RULE_DIMENSION)
  private String ruleDimension;

  public static final String SERIALIZED_NAME_RULE_NAME = "ruleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  /**
   * The type of the data quality rule.
   */
  @JsonAdapter(RuleTypeEnum.Adapter.class)
  public enum RuleTypeEnum {
    RULE_TYPE_UNSPECIFIED("RULE_TYPE_UNSPECIFIED"),
    
    NON_NULL_EXPECTATION("NON_NULL_EXPECTATION"),
    
    RANGE_EXPECTATION("RANGE_EXPECTATION"),
    
    REGEX_EXPECTATION("REGEX_EXPECTATION"),
    
    ROW_CONDITION_EXPECTATION("ROW_CONDITION_EXPECTATION"),
    
    SET_EXPECTATION("SET_EXPECTATION"),
    
    STATISTIC_RANGE_EXPECTATION("STATISTIC_RANGE_EXPECTATION"),
    
    TABLE_CONDITION_EXPECTATION("TABLE_CONDITION_EXPECTATION"),
    
    UNIQUENESS_EXPECTATION("UNIQUENESS_EXPECTATION");

    private String value;

    RuleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RuleTypeEnum fromValue(String value) {
      for (RuleTypeEnum b : RuleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RuleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RuleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RuleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RULE_TYPE = "ruleType";
  @SerializedName(SERIALIZED_NAME_RULE_TYPE)
  private RuleTypeEnum ruleType;

  public static final String SERIALIZED_NAME_THRESHOLD_PERCENT = "thresholdPercent";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_PERCENT)
  private Double thresholdPercent;

  public GoogleCloudDataplexV1DataQualityScanRuleResult() {
  }

  public GoogleCloudDataplexV1DataQualityScanRuleResult column(String column) {
    this.column = column;
    return this;
  }

  /**
   * The column which this rule is evaluated against.
   * @return column
   */
  @javax.annotation.Nullable
  public String getColumn() {
    return column;
  }

  public void setColumn(String column) {
    this.column = column;
  }


  public GoogleCloudDataplexV1DataQualityScanRuleResult dataSource(String dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * The data source of the data scan (e.g. BigQuery table name).
   * @return dataSource
   */
  @javax.annotation.Nullable
  public String getDataSource() {
    return dataSource;
  }

  public void setDataSource(String dataSource) {
    this.dataSource = dataSource;
  }


  public GoogleCloudDataplexV1DataQualityScanRuleResult evaluatedRowCount(String evaluatedRowCount) {
    this.evaluatedRowCount = evaluatedRowCount;
    return this;
  }

  /**
   * The number of rows evaluated against the data quality rule. This field is only valid for rules of PER_ROW evaluation type.
   * @return evaluatedRowCount
   */
  @javax.annotation.Nullable
  public String getEvaluatedRowCount() {
    return evaluatedRowCount;
  }

  public void setEvaluatedRowCount(String evaluatedRowCount) {
    this.evaluatedRowCount = evaluatedRowCount;
  }


  public GoogleCloudDataplexV1DataQualityScanRuleResult evalutionType(EvalutionTypeEnum evalutionType) {
    this.evalutionType = evalutionType;
    return this;
  }

  /**
   * The evaluation type of the data quality rule.
   * @return evalutionType
   */
  @javax.annotation.Nullable
  public EvalutionTypeEnum getEvalutionType() {
    return evalutionType;
  }

  public void setEvalutionType(EvalutionTypeEnum evalutionType) {
    this.evalutionType = evalutionType;
  }


  public GoogleCloudDataplexV1DataQualityScanRuleResult jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Identifier of the specific data scan job this log entry is for.
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public GoogleCloudDataplexV1DataQualityScanRuleResult nullRowCount(String nullRowCount) {
    this.nullRowCount = nullRowCount;
    return this;
  }

  /**
   * The number of rows with null values in the specified column.
   * @return nullRowCount
   */
  @javax.annotation.Nullable
  public String getNullRowCount() {
    return nullRowCount;
  }

  public void setNullRowCount(String nullRowCount) {
    this.nullRowCount = nullRowCount;
  }


  public GoogleCloudDataplexV1DataQualityScanRuleResult passedRowCount(String passedRowCount) {
    this.passedRowCount = passedRowCount;
    return this;
  }

  /**
   * The number of rows which passed a rule evaluation. This field is only valid for rules of PER_ROW evaluation type.
   * @return passedRowCount
   */
  @javax.annotation.Nullable
  public String getPassedRowCount() {
    return passedRowCount;
  }

  public void setPassedRowCount(String passedRowCount) {
    this.passedRowCount = passedRowCount;
  }


  public GoogleCloudDataplexV1DataQualityScanRuleResult result(ResultEnum result) {
    this.result = result;
    return this;
  }

  /**
   * The result of the data quality rule.
   * @return result
   */
  @javax.annotation.Nullable
  public ResultEnum getResult() {
    return result;
  }

  public void setResult(ResultEnum result) {
    this.result = result;
  }


  public GoogleCloudDataplexV1DataQualityScanRuleResult ruleDimension(String ruleDimension) {
    this.ruleDimension = ruleDimension;
    return this;
  }

  /**
   * The dimension of the data quality rule.
   * @return ruleDimension
   */
  @javax.annotation.Nullable
  public String getRuleDimension() {
    return ruleDimension;
  }

  public void setRuleDimension(String ruleDimension) {
    this.ruleDimension = ruleDimension;
  }


  public GoogleCloudDataplexV1DataQualityScanRuleResult ruleName(String ruleName) {
    this.ruleName = ruleName;
    return this;
  }

  /**
   * The name of the data quality rule.
   * @return ruleName
   */
  @javax.annotation.Nullable
  public String getRuleName() {
    return ruleName;
  }

  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }


  public GoogleCloudDataplexV1DataQualityScanRuleResult ruleType(RuleTypeEnum ruleType) {
    this.ruleType = ruleType;
    return this;
  }

  /**
   * The type of the data quality rule.
   * @return ruleType
   */
  @javax.annotation.Nullable
  public RuleTypeEnum getRuleType() {
    return ruleType;
  }

  public void setRuleType(RuleTypeEnum ruleType) {
    this.ruleType = ruleType;
  }


  public GoogleCloudDataplexV1DataQualityScanRuleResult thresholdPercent(Double thresholdPercent) {
    this.thresholdPercent = thresholdPercent;
    return this;
  }

  /**
   * The passing threshold (0.0, 100.0) of the data quality rule.
   * @return thresholdPercent
   */
  @javax.annotation.Nullable
  public Double getThresholdPercent() {
    return thresholdPercent;
  }

  public void setThresholdPercent(Double thresholdPercent) {
    this.thresholdPercent = thresholdPercent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1DataQualityScanRuleResult googleCloudDataplexV1DataQualityScanRuleResult = (GoogleCloudDataplexV1DataQualityScanRuleResult) o;
    return Objects.equals(this.column, googleCloudDataplexV1DataQualityScanRuleResult.column) &&
        Objects.equals(this.dataSource, googleCloudDataplexV1DataQualityScanRuleResult.dataSource) &&
        Objects.equals(this.evaluatedRowCount, googleCloudDataplexV1DataQualityScanRuleResult.evaluatedRowCount) &&
        Objects.equals(this.evalutionType, googleCloudDataplexV1DataQualityScanRuleResult.evalutionType) &&
        Objects.equals(this.jobId, googleCloudDataplexV1DataQualityScanRuleResult.jobId) &&
        Objects.equals(this.nullRowCount, googleCloudDataplexV1DataQualityScanRuleResult.nullRowCount) &&
        Objects.equals(this.passedRowCount, googleCloudDataplexV1DataQualityScanRuleResult.passedRowCount) &&
        Objects.equals(this.result, googleCloudDataplexV1DataQualityScanRuleResult.result) &&
        Objects.equals(this.ruleDimension, googleCloudDataplexV1DataQualityScanRuleResult.ruleDimension) &&
        Objects.equals(this.ruleName, googleCloudDataplexV1DataQualityScanRuleResult.ruleName) &&
        Objects.equals(this.ruleType, googleCloudDataplexV1DataQualityScanRuleResult.ruleType) &&
        Objects.equals(this.thresholdPercent, googleCloudDataplexV1DataQualityScanRuleResult.thresholdPercent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(column, dataSource, evaluatedRowCount, evalutionType, jobId, nullRowCount, passedRowCount, result, ruleDimension, ruleName, ruleType, thresholdPercent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1DataQualityScanRuleResult {\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    evaluatedRowCount: ").append(toIndentedString(evaluatedRowCount)).append("\n");
    sb.append("    evalutionType: ").append(toIndentedString(evalutionType)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    nullRowCount: ").append(toIndentedString(nullRowCount)).append("\n");
    sb.append("    passedRowCount: ").append(toIndentedString(passedRowCount)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    ruleDimension: ").append(toIndentedString(ruleDimension)).append("\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    ruleType: ").append(toIndentedString(ruleType)).append("\n");
    sb.append("    thresholdPercent: ").append(toIndentedString(thresholdPercent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("column");
    openapiFields.add("dataSource");
    openapiFields.add("evaluatedRowCount");
    openapiFields.add("evalutionType");
    openapiFields.add("jobId");
    openapiFields.add("nullRowCount");
    openapiFields.add("passedRowCount");
    openapiFields.add("result");
    openapiFields.add("ruleDimension");
    openapiFields.add("ruleName");
    openapiFields.add("ruleType");
    openapiFields.add("thresholdPercent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1DataQualityScanRuleResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1DataQualityScanRuleResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1DataQualityScanRuleResult is not found in the empty JSON string", GoogleCloudDataplexV1DataQualityScanRuleResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1DataQualityScanRuleResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1DataQualityScanRuleResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("column") != null && !jsonObj.get("column").isJsonNull()) && !jsonObj.get("column").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `column` to be a primitive type in the JSON string but got `%s`", jsonObj.get("column").toString()));
      }
      if ((jsonObj.get("dataSource") != null && !jsonObj.get("dataSource").isJsonNull()) && !jsonObj.get("dataSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSource").toString()));
      }
      if ((jsonObj.get("evaluatedRowCount") != null && !jsonObj.get("evaluatedRowCount").isJsonNull()) && !jsonObj.get("evaluatedRowCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluatedRowCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluatedRowCount").toString()));
      }
      if ((jsonObj.get("evalutionType") != null && !jsonObj.get("evalutionType").isJsonNull()) && !jsonObj.get("evalutionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evalutionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evalutionType").toString()));
      }
      // validate the optional field `evalutionType`
      if (jsonObj.get("evalutionType") != null && !jsonObj.get("evalutionType").isJsonNull()) {
        EvalutionTypeEnum.validateJsonElement(jsonObj.get("evalutionType"));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("nullRowCount") != null && !jsonObj.get("nullRowCount").isJsonNull()) && !jsonObj.get("nullRowCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nullRowCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nullRowCount").toString()));
      }
      if ((jsonObj.get("passedRowCount") != null && !jsonObj.get("passedRowCount").isJsonNull()) && !jsonObj.get("passedRowCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passedRowCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passedRowCount").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        ResultEnum.validateJsonElement(jsonObj.get("result"));
      }
      if ((jsonObj.get("ruleDimension") != null && !jsonObj.get("ruleDimension").isJsonNull()) && !jsonObj.get("ruleDimension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleDimension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleDimension").toString()));
      }
      if ((jsonObj.get("ruleName") != null && !jsonObj.get("ruleName").isJsonNull()) && !jsonObj.get("ruleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleName").toString()));
      }
      if ((jsonObj.get("ruleType") != null && !jsonObj.get("ruleType").isJsonNull()) && !jsonObj.get("ruleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleType").toString()));
      }
      // validate the optional field `ruleType`
      if (jsonObj.get("ruleType") != null && !jsonObj.get("ruleType").isJsonNull()) {
        RuleTypeEnum.validateJsonElement(jsonObj.get("ruleType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1DataQualityScanRuleResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1DataQualityScanRuleResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1DataQualityScanRuleResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1DataQualityScanRuleResult.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1DataQualityScanRuleResult>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1DataQualityScanRuleResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1DataQualityScanRuleResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1DataQualityScanRuleResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1DataQualityScanRuleResult
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1DataQualityScanRuleResult
   */
  public static GoogleCloudDataplexV1DataQualityScanRuleResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1DataQualityScanRuleResult.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1DataQualityScanRuleResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

