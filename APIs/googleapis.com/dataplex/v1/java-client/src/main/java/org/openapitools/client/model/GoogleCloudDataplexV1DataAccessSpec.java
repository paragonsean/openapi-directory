/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataAccessSpec holds the access control configuration to be enforced on data stored within resources (eg: rows, columns in BigQuery Tables). When associated with data, the data is only accessible to principals explicitly granted access through the DataAccessSpec. Principals with access to the containing resource are not implicitly granted access.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1DataAccessSpec {
  public static final String SERIALIZED_NAME_READERS = "readers";
  @SerializedName(SERIALIZED_NAME_READERS)
  private List<String> readers = new ArrayList<>();

  public GoogleCloudDataplexV1DataAccessSpec() {
  }

  public GoogleCloudDataplexV1DataAccessSpec readers(List<String> readers) {
    this.readers = readers;
    return this;
  }

  public GoogleCloudDataplexV1DataAccessSpec addReadersItem(String readersItem) {
    if (this.readers == null) {
      this.readers = new ArrayList<>();
    }
    this.readers.add(readersItem);
    return this;
  }

  /**
   * Optional. The format of strings follows the pattern followed by IAM in the bindings. user:{email}, serviceAccount:{email} group:{email}. The set of principals to be granted reader role on data stored within resources.
   * @return readers
   */
  @javax.annotation.Nullable
  public List<String> getReaders() {
    return readers;
  }

  public void setReaders(List<String> readers) {
    this.readers = readers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1DataAccessSpec googleCloudDataplexV1DataAccessSpec = (GoogleCloudDataplexV1DataAccessSpec) o;
    return Objects.equals(this.readers, googleCloudDataplexV1DataAccessSpec.readers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(readers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1DataAccessSpec {\n");
    sb.append("    readers: ").append(toIndentedString(readers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("readers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1DataAccessSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1DataAccessSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1DataAccessSpec is not found in the empty JSON string", GoogleCloudDataplexV1DataAccessSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1DataAccessSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1DataAccessSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("readers") != null && !jsonObj.get("readers").isJsonNull() && !jsonObj.get("readers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `readers` to be an array in the JSON string but got `%s`", jsonObj.get("readers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1DataAccessSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1DataAccessSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1DataAccessSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1DataAccessSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1DataAccessSpec>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1DataAccessSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1DataAccessSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1DataAccessSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1DataAccessSpec
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1DataAccessSpec
   */
  public static GoogleCloudDataplexV1DataAccessSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1DataAccessSpec.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1DataAccessSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

