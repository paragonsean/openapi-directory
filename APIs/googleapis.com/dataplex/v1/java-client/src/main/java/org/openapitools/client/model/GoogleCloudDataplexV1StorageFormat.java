/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDataplexV1StorageFormatCsvOptions;
import org.openapitools.client.model.GoogleCloudDataplexV1StorageFormatIcebergOptions;
import org.openapitools.client.model.GoogleCloudDataplexV1StorageFormatJsonOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the format of the data within its storage location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1StorageFormat {
  /**
   * Optional. The compression type associated with the stored data. If unspecified, the data is uncompressed.
   */
  @JsonAdapter(CompressionFormatEnum.Adapter.class)
  public enum CompressionFormatEnum {
    COMPRESSION_FORMAT_UNSPECIFIED("COMPRESSION_FORMAT_UNSPECIFIED"),
    
    GZIP("GZIP"),
    
    BZIP2("BZIP2");

    private String value;

    CompressionFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompressionFormatEnum fromValue(String value) {
      for (CompressionFormatEnum b : CompressionFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompressionFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompressionFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompressionFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompressionFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompressionFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPRESSION_FORMAT = "compressionFormat";
  @SerializedName(SERIALIZED_NAME_COMPRESSION_FORMAT)
  private CompressionFormatEnum compressionFormat;

  public static final String SERIALIZED_NAME_CSV = "csv";
  @SerializedName(SERIALIZED_NAME_CSV)
  private GoogleCloudDataplexV1StorageFormatCsvOptions csv;

  /**
   * Output only. The data format associated with the stored data, which represents content type values. The value is inferred from mime type.
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    FORMAT_UNSPECIFIED("FORMAT_UNSPECIFIED"),
    
    PARQUET("PARQUET"),
    
    AVRO("AVRO"),
    
    ORC("ORC"),
    
    CSV("CSV"),
    
    JSON("JSON"),
    
    IMAGE("IMAGE"),
    
    AUDIO("AUDIO"),
    
    VIDEO("VIDEO"),
    
    TEXT("TEXT"),
    
    TFRECORD("TFRECORD"),
    
    OTHER("OTHER"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  public static final String SERIALIZED_NAME_ICEBERG = "iceberg";
  @SerializedName(SERIALIZED_NAME_ICEBERG)
  private GoogleCloudDataplexV1StorageFormatIcebergOptions iceberg;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private GoogleCloudDataplexV1StorageFormatJsonOptions json;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public GoogleCloudDataplexV1StorageFormat() {
  }

  public GoogleCloudDataplexV1StorageFormat(
     FormatEnum format
  ) {
    this();
    this.format = format;
  }

  public GoogleCloudDataplexV1StorageFormat compressionFormat(CompressionFormatEnum compressionFormat) {
    this.compressionFormat = compressionFormat;
    return this;
  }

  /**
   * Optional. The compression type associated with the stored data. If unspecified, the data is uncompressed.
   * @return compressionFormat
   */
  @javax.annotation.Nullable
  public CompressionFormatEnum getCompressionFormat() {
    return compressionFormat;
  }

  public void setCompressionFormat(CompressionFormatEnum compressionFormat) {
    this.compressionFormat = compressionFormat;
  }


  public GoogleCloudDataplexV1StorageFormat csv(GoogleCloudDataplexV1StorageFormatCsvOptions csv) {
    this.csv = csv;
    return this;
  }

  /**
   * Get csv
   * @return csv
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1StorageFormatCsvOptions getCsv() {
    return csv;
  }

  public void setCsv(GoogleCloudDataplexV1StorageFormatCsvOptions csv) {
    this.csv = csv;
  }


  /**
   * Output only. The data format associated with the stored data, which represents content type values. The value is inferred from mime type.
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }



  public GoogleCloudDataplexV1StorageFormat iceberg(GoogleCloudDataplexV1StorageFormatIcebergOptions iceberg) {
    this.iceberg = iceberg;
    return this;
  }

  /**
   * Get iceberg
   * @return iceberg
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1StorageFormatIcebergOptions getIceberg() {
    return iceberg;
  }

  public void setIceberg(GoogleCloudDataplexV1StorageFormatIcebergOptions iceberg) {
    this.iceberg = iceberg;
  }


  public GoogleCloudDataplexV1StorageFormat json(GoogleCloudDataplexV1StorageFormatJsonOptions json) {
    this.json = json;
    return this;
  }

  /**
   * Get json
   * @return json
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1StorageFormatJsonOptions getJson() {
    return json;
  }

  public void setJson(GoogleCloudDataplexV1StorageFormatJsonOptions json) {
    this.json = json;
  }


  public GoogleCloudDataplexV1StorageFormat mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * Required. The mime type descriptor for the data. Must match the pattern {type}/{subtype}. Supported values: application/x-parquet application/x-avro application/x-orc application/x-tfrecord application/x-parquet+iceberg application/x-avro+iceberg application/x-orc+iceberg application/json application/{subtypes} text/csv text/ image/{image subtype} video/{video subtype} audio/{audio subtype}
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1StorageFormat googleCloudDataplexV1StorageFormat = (GoogleCloudDataplexV1StorageFormat) o;
    return Objects.equals(this.compressionFormat, googleCloudDataplexV1StorageFormat.compressionFormat) &&
        Objects.equals(this.csv, googleCloudDataplexV1StorageFormat.csv) &&
        Objects.equals(this.format, googleCloudDataplexV1StorageFormat.format) &&
        Objects.equals(this.iceberg, googleCloudDataplexV1StorageFormat.iceberg) &&
        Objects.equals(this.json, googleCloudDataplexV1StorageFormat.json) &&
        Objects.equals(this.mimeType, googleCloudDataplexV1StorageFormat.mimeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compressionFormat, csv, format, iceberg, json, mimeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1StorageFormat {\n");
    sb.append("    compressionFormat: ").append(toIndentedString(compressionFormat)).append("\n");
    sb.append("    csv: ").append(toIndentedString(csv)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    iceberg: ").append(toIndentedString(iceberg)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compressionFormat");
    openapiFields.add("csv");
    openapiFields.add("format");
    openapiFields.add("iceberg");
    openapiFields.add("json");
    openapiFields.add("mimeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1StorageFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1StorageFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1StorageFormat is not found in the empty JSON string", GoogleCloudDataplexV1StorageFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1StorageFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1StorageFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("compressionFormat") != null && !jsonObj.get("compressionFormat").isJsonNull()) && !jsonObj.get("compressionFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compressionFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compressionFormat").toString()));
      }
      // validate the optional field `compressionFormat`
      if (jsonObj.get("compressionFormat") != null && !jsonObj.get("compressionFormat").isJsonNull()) {
        CompressionFormatEnum.validateJsonElement(jsonObj.get("compressionFormat"));
      }
      // validate the optional field `csv`
      if (jsonObj.get("csv") != null && !jsonObj.get("csv").isJsonNull()) {
        GoogleCloudDataplexV1StorageFormatCsvOptions.validateJsonElement(jsonObj.get("csv"));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      // validate the optional field `iceberg`
      if (jsonObj.get("iceberg") != null && !jsonObj.get("iceberg").isJsonNull()) {
        GoogleCloudDataplexV1StorageFormatIcebergOptions.validateJsonElement(jsonObj.get("iceberg"));
      }
      // validate the optional field `json`
      if (jsonObj.get("json") != null && !jsonObj.get("json").isJsonNull()) {
        GoogleCloudDataplexV1StorageFormatJsonOptions.validateJsonElement(jsonObj.get("json"));
      }
      if ((jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1StorageFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1StorageFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1StorageFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1StorageFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1StorageFormat>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1StorageFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1StorageFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1StorageFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1StorageFormat
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1StorageFormat
   */
  public static GoogleCloudDataplexV1StorageFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1StorageFormat.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1StorageFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

