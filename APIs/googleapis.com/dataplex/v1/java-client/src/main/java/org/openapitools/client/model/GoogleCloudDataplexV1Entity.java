/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDataplexV1EntityCompatibilityStatus;
import org.openapitools.client.model.GoogleCloudDataplexV1Schema;
import org.openapitools.client.model.GoogleCloudDataplexV1StorageAccess;
import org.openapitools.client.model.GoogleCloudDataplexV1StorageFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents tables and fileset metadata contained within a zone.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1Entity {
  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private GoogleCloudDataplexV1StorageAccess access;

  public static final String SERIALIZED_NAME_ASSET = "asset";
  @SerializedName(SERIALIZED_NAME_ASSET)
  private String asset;

  public static final String SERIALIZED_NAME_CATALOG_ENTRY = "catalogEntry";
  @SerializedName(SERIALIZED_NAME_CATALOG_ENTRY)
  private String catalogEntry;

  public static final String SERIALIZED_NAME_COMPATIBILITY = "compatibility";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY)
  private GoogleCloudDataplexV1EntityCompatibilityStatus compatibility;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DATA_PATH = "dataPath";
  @SerializedName(SERIALIZED_NAME_DATA_PATH)
  private String dataPath;

  public static final String SERIALIZED_NAME_DATA_PATH_PATTERN = "dataPathPattern";
  @SerializedName(SERIALIZED_NAME_DATA_PATH_PATTERN)
  private String dataPathPattern;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private GoogleCloudDataplexV1StorageFormat format;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private GoogleCloudDataplexV1Schema schema;

  /**
   * Required. Immutable. Identifies the storage system of the entity data.
   */
  @JsonAdapter(SystemEnum.Adapter.class)
  public enum SystemEnum {
    STORAGE_SYSTEM_UNSPECIFIED("STORAGE_SYSTEM_UNSPECIFIED"),
    
    CLOUD_STORAGE("CLOUD_STORAGE"),
    
    BIGQUERY("BIGQUERY");

    private String value;

    SystemEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SystemEnum fromValue(String value) {
      for (SystemEnum b : SystemEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SystemEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SystemEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SystemEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SystemEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SystemEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYSTEM = "system";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private SystemEnum system;

  /**
   * Required. Immutable. The type of entity.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    TABLE("TABLE"),
    
    FILESET("FILESET");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GoogleCloudDataplexV1Entity() {
  }

  public GoogleCloudDataplexV1Entity(
     String catalogEntry, 
     String createTime, 
     String name, 
     String uid, 
     String updateTime
  ) {
    this();
    this.catalogEntry = catalogEntry;
    this.createTime = createTime;
    this.name = name;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  public GoogleCloudDataplexV1Entity access(GoogleCloudDataplexV1StorageAccess access) {
    this.access = access;
    return this;
  }

  /**
   * Get access
   * @return access
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1StorageAccess getAccess() {
    return access;
  }

  public void setAccess(GoogleCloudDataplexV1StorageAccess access) {
    this.access = access;
  }


  public GoogleCloudDataplexV1Entity asset(String asset) {
    this.asset = asset;
    return this;
  }

  /**
   * Required. Immutable. The ID of the asset associated with the storage location containing the entity data. The entity must be with in the same zone with the asset.
   * @return asset
   */
  @javax.annotation.Nullable
  public String getAsset() {
    return asset;
  }

  public void setAsset(String asset) {
    this.asset = asset;
  }


  /**
   * Output only. The name of the associated Data Catalog entry.
   * @return catalogEntry
   */
  @javax.annotation.Nullable
  public String getCatalogEntry() {
    return catalogEntry;
  }



  public GoogleCloudDataplexV1Entity compatibility(GoogleCloudDataplexV1EntityCompatibilityStatus compatibility) {
    this.compatibility = compatibility;
    return this;
  }

  /**
   * Get compatibility
   * @return compatibility
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1EntityCompatibilityStatus getCompatibility() {
    return compatibility;
  }

  public void setCompatibility(GoogleCloudDataplexV1EntityCompatibilityStatus compatibility) {
    this.compatibility = compatibility;
  }


  /**
   * Output only. The time when the entity was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GoogleCloudDataplexV1Entity dataPath(String dataPath) {
    this.dataPath = dataPath;
    return this;
  }

  /**
   * Required. Immutable. The storage path of the entity data. For Cloud Storage data, this is the fully-qualified path to the entity, such as gs://bucket/path/to/data. For BigQuery data, this is the name of the table resource, such as projects/project_id/datasets/dataset_id/tables/table_id.
   * @return dataPath
   */
  @javax.annotation.Nullable
  public String getDataPath() {
    return dataPath;
  }

  public void setDataPath(String dataPath) {
    this.dataPath = dataPath;
  }


  public GoogleCloudDataplexV1Entity dataPathPattern(String dataPathPattern) {
    this.dataPathPattern = dataPathPattern;
    return this;
  }

  /**
   * Optional. The set of items within the data path constituting the data in the entity, represented as a glob path. Example: gs://bucket/path/to/data/_**_/_*.csv.
   * @return dataPathPattern
   */
  @javax.annotation.Nullable
  public String getDataPathPattern() {
    return dataPathPattern;
  }

  public void setDataPathPattern(String dataPathPattern) {
    this.dataPathPattern = dataPathPattern;
  }


  public GoogleCloudDataplexV1Entity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. User friendly longer description text. Must be shorter than or equal to 1024 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudDataplexV1Entity displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. Display name must be shorter than or equal to 256 characters.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDataplexV1Entity etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. The etag associated with the entity, which can be retrieved with a GetEntity request. Required for update and delete requests.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public GoogleCloudDataplexV1Entity format(GoogleCloudDataplexV1StorageFormat format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1StorageFormat getFormat() {
    return format;
  }

  public void setFormat(GoogleCloudDataplexV1StorageFormat format) {
    this.format = format;
  }


  public GoogleCloudDataplexV1Entity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. A user-provided entity ID. It is mutable, and will be used as the published table name. Specifying a new ID in an update entity request will override the existing value. The ID must contain only letters (a-z, A-Z), numbers (0-9), and underscores, and consist of 256 or fewer characters.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  /**
   * Output only. The resource name of the entity, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/entities/{id}.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleCloudDataplexV1Entity schema(GoogleCloudDataplexV1Schema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1Schema getSchema() {
    return schema;
  }

  public void setSchema(GoogleCloudDataplexV1Schema schema) {
    this.schema = schema;
  }


  public GoogleCloudDataplexV1Entity system(SystemEnum system) {
    this.system = system;
    return this;
  }

  /**
   * Required. Immutable. Identifies the storage system of the entity data.
   * @return system
   */
  @javax.annotation.Nullable
  public SystemEnum getSystem() {
    return system;
  }

  public void setSystem(SystemEnum system) {
    this.system = system;
  }


  public GoogleCloudDataplexV1Entity type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Required. Immutable. The type of entity.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Output only. System generated unique ID for the Entity. This ID will be different if the Entity is deleted and re-created with the same name.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The time when the entity was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1Entity googleCloudDataplexV1Entity = (GoogleCloudDataplexV1Entity) o;
    return Objects.equals(this.access, googleCloudDataplexV1Entity.access) &&
        Objects.equals(this.asset, googleCloudDataplexV1Entity.asset) &&
        Objects.equals(this.catalogEntry, googleCloudDataplexV1Entity.catalogEntry) &&
        Objects.equals(this.compatibility, googleCloudDataplexV1Entity.compatibility) &&
        Objects.equals(this.createTime, googleCloudDataplexV1Entity.createTime) &&
        Objects.equals(this.dataPath, googleCloudDataplexV1Entity.dataPath) &&
        Objects.equals(this.dataPathPattern, googleCloudDataplexV1Entity.dataPathPattern) &&
        Objects.equals(this.description, googleCloudDataplexV1Entity.description) &&
        Objects.equals(this.displayName, googleCloudDataplexV1Entity.displayName) &&
        Objects.equals(this.etag, googleCloudDataplexV1Entity.etag) &&
        Objects.equals(this.format, googleCloudDataplexV1Entity.format) &&
        Objects.equals(this.id, googleCloudDataplexV1Entity.id) &&
        Objects.equals(this.name, googleCloudDataplexV1Entity.name) &&
        Objects.equals(this.schema, googleCloudDataplexV1Entity.schema) &&
        Objects.equals(this.system, googleCloudDataplexV1Entity.system) &&
        Objects.equals(this.type, googleCloudDataplexV1Entity.type) &&
        Objects.equals(this.uid, googleCloudDataplexV1Entity.uid) &&
        Objects.equals(this.updateTime, googleCloudDataplexV1Entity.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, asset, catalogEntry, compatibility, createTime, dataPath, dataPathPattern, description, displayName, etag, format, id, name, schema, system, type, uid, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1Entity {\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
    sb.append("    catalogEntry: ").append(toIndentedString(catalogEntry)).append("\n");
    sb.append("    compatibility: ").append(toIndentedString(compatibility)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    dataPath: ").append(toIndentedString(dataPath)).append("\n");
    sb.append("    dataPathPattern: ").append(toIndentedString(dataPathPattern)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access");
    openapiFields.add("asset");
    openapiFields.add("catalogEntry");
    openapiFields.add("compatibility");
    openapiFields.add("createTime");
    openapiFields.add("dataPath");
    openapiFields.add("dataPathPattern");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("etag");
    openapiFields.add("format");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("schema");
    openapiFields.add("system");
    openapiFields.add("type");
    openapiFields.add("uid");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1Entity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1Entity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1Entity is not found in the empty JSON string", GoogleCloudDataplexV1Entity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1Entity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1Entity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `access`
      if (jsonObj.get("access") != null && !jsonObj.get("access").isJsonNull()) {
        GoogleCloudDataplexV1StorageAccess.validateJsonElement(jsonObj.get("access"));
      }
      if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull()) && !jsonObj.get("asset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset").toString()));
      }
      if ((jsonObj.get("catalogEntry") != null && !jsonObj.get("catalogEntry").isJsonNull()) && !jsonObj.get("catalogEntry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalogEntry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalogEntry").toString()));
      }
      // validate the optional field `compatibility`
      if (jsonObj.get("compatibility") != null && !jsonObj.get("compatibility").isJsonNull()) {
        GoogleCloudDataplexV1EntityCompatibilityStatus.validateJsonElement(jsonObj.get("compatibility"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("dataPath") != null && !jsonObj.get("dataPath").isJsonNull()) && !jsonObj.get("dataPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPath").toString()));
      }
      if ((jsonObj.get("dataPathPattern") != null && !jsonObj.get("dataPathPattern").isJsonNull()) && !jsonObj.get("dataPathPattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPathPattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPathPattern").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        GoogleCloudDataplexV1StorageFormat.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `schema`
      if (jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) {
        GoogleCloudDataplexV1Schema.validateJsonElement(jsonObj.get("schema"));
      }
      if ((jsonObj.get("system") != null && !jsonObj.get("system").isJsonNull()) && !jsonObj.get("system").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `system` to be a primitive type in the JSON string but got `%s`", jsonObj.get("system").toString()));
      }
      // validate the optional field `system`
      if (jsonObj.get("system") != null && !jsonObj.get("system").isJsonNull()) {
        SystemEnum.validateJsonElement(jsonObj.get("system"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1Entity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1Entity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1Entity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1Entity.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1Entity>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1Entity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1Entity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1Entity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1Entity
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1Entity
   */
  public static GoogleCloudDataplexV1Entity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1Entity.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1Entity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

