/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDataplexV1SessionEventQueryDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * These messages contain information about sessions within an environment. The monitored resource is &#39;Environment&#39;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1SessionEvent {
  public static final String SERIALIZED_NAME_EVENT_SUCCEEDED = "eventSucceeded";
  @SerializedName(SERIALIZED_NAME_EVENT_SUCCEEDED)
  private Boolean eventSucceeded;

  public static final String SERIALIZED_NAME_FAST_STARTUP_ENABLED = "fastStartupEnabled";
  @SerializedName(SERIALIZED_NAME_FAST_STARTUP_ENABLED)
  private Boolean fastStartupEnabled;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private GoogleCloudDataplexV1SessionEventQueryDetail query;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  /**
   * The type of the event.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EVENT_TYPE_UNSPECIFIED("EVENT_TYPE_UNSPECIFIED"),
    
    START("START"),
    
    STOP("STOP"),
    
    QUERY("QUERY"),
    
    CREATE("CREATE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNASSIGNED_DURATION = "unassignedDuration";
  @SerializedName(SERIALIZED_NAME_UNASSIGNED_DURATION)
  private String unassignedDuration;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public GoogleCloudDataplexV1SessionEvent() {
  }

  public GoogleCloudDataplexV1SessionEvent eventSucceeded(Boolean eventSucceeded) {
    this.eventSucceeded = eventSucceeded;
    return this;
  }

  /**
   * The status of the event.
   * @return eventSucceeded
   */
  @javax.annotation.Nullable
  public Boolean getEventSucceeded() {
    return eventSucceeded;
  }

  public void setEventSucceeded(Boolean eventSucceeded) {
    this.eventSucceeded = eventSucceeded;
  }


  public GoogleCloudDataplexV1SessionEvent fastStartupEnabled(Boolean fastStartupEnabled) {
    this.fastStartupEnabled = fastStartupEnabled;
    return this;
  }

  /**
   * If the session is associated with an environment with fast startup enabled, and was created before being assigned to a user.
   * @return fastStartupEnabled
   */
  @javax.annotation.Nullable
  public Boolean getFastStartupEnabled() {
    return fastStartupEnabled;
  }

  public void setFastStartupEnabled(Boolean fastStartupEnabled) {
    this.fastStartupEnabled = fastStartupEnabled;
  }


  public GoogleCloudDataplexV1SessionEvent message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The log message.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public GoogleCloudDataplexV1SessionEvent query(GoogleCloudDataplexV1SessionEventQueryDetail query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1SessionEventQueryDetail getQuery() {
    return query;
  }

  public void setQuery(GoogleCloudDataplexV1SessionEventQueryDetail query) {
    this.query = query;
  }


  public GoogleCloudDataplexV1SessionEvent sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Unique identifier for the session.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public GoogleCloudDataplexV1SessionEvent type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the event.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public GoogleCloudDataplexV1SessionEvent unassignedDuration(String unassignedDuration) {
    this.unassignedDuration = unassignedDuration;
    return this;
  }

  /**
   * The idle duration of a warm pooled session before it is assigned to user.
   * @return unassignedDuration
   */
  @javax.annotation.Nullable
  public String getUnassignedDuration() {
    return unassignedDuration;
  }

  public void setUnassignedDuration(String unassignedDuration) {
    this.unassignedDuration = unassignedDuration;
  }


  public GoogleCloudDataplexV1SessionEvent userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The information about the user that created the session. It will be the email address of the user.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1SessionEvent googleCloudDataplexV1SessionEvent = (GoogleCloudDataplexV1SessionEvent) o;
    return Objects.equals(this.eventSucceeded, googleCloudDataplexV1SessionEvent.eventSucceeded) &&
        Objects.equals(this.fastStartupEnabled, googleCloudDataplexV1SessionEvent.fastStartupEnabled) &&
        Objects.equals(this.message, googleCloudDataplexV1SessionEvent.message) &&
        Objects.equals(this.query, googleCloudDataplexV1SessionEvent.query) &&
        Objects.equals(this.sessionId, googleCloudDataplexV1SessionEvent.sessionId) &&
        Objects.equals(this.type, googleCloudDataplexV1SessionEvent.type) &&
        Objects.equals(this.unassignedDuration, googleCloudDataplexV1SessionEvent.unassignedDuration) &&
        Objects.equals(this.userId, googleCloudDataplexV1SessionEvent.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventSucceeded, fastStartupEnabled, message, query, sessionId, type, unassignedDuration, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1SessionEvent {\n");
    sb.append("    eventSucceeded: ").append(toIndentedString(eventSucceeded)).append("\n");
    sb.append("    fastStartupEnabled: ").append(toIndentedString(fastStartupEnabled)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unassignedDuration: ").append(toIndentedString(unassignedDuration)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventSucceeded");
    openapiFields.add("fastStartupEnabled");
    openapiFields.add("message");
    openapiFields.add("query");
    openapiFields.add("sessionId");
    openapiFields.add("type");
    openapiFields.add("unassignedDuration");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1SessionEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1SessionEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1SessionEvent is not found in the empty JSON string", GoogleCloudDataplexV1SessionEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1SessionEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1SessionEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `query`
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        GoogleCloudDataplexV1SessionEventQueryDetail.validateJsonElement(jsonObj.get("query"));
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("unassignedDuration") != null && !jsonObj.get("unassignedDuration").isJsonNull()) && !jsonObj.get("unassignedDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unassignedDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unassignedDuration").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1SessionEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1SessionEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1SessionEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1SessionEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1SessionEvent>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1SessionEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1SessionEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1SessionEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1SessionEvent
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1SessionEvent
   */
  public static GoogleCloudDataplexV1SessionEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1SessionEvent.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1SessionEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

