/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Action details for invalid or unsupported data files detected by discovery.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1ActionInvalidDataFormat {
  public static final String SERIALIZED_NAME_EXPECTED_FORMAT = "expectedFormat";
  @SerializedName(SERIALIZED_NAME_EXPECTED_FORMAT)
  private String expectedFormat;

  public static final String SERIALIZED_NAME_NEW_FORMAT = "newFormat";
  @SerializedName(SERIALIZED_NAME_NEW_FORMAT)
  private String newFormat;

  public static final String SERIALIZED_NAME_SAMPLED_DATA_LOCATIONS = "sampledDataLocations";
  @SerializedName(SERIALIZED_NAME_SAMPLED_DATA_LOCATIONS)
  private List<String> sampledDataLocations = new ArrayList<>();

  public GoogleCloudDataplexV1ActionInvalidDataFormat() {
  }

  public GoogleCloudDataplexV1ActionInvalidDataFormat expectedFormat(String expectedFormat) {
    this.expectedFormat = expectedFormat;
    return this;
  }

  /**
   * The expected data format of the entity.
   * @return expectedFormat
   */
  @javax.annotation.Nullable
  public String getExpectedFormat() {
    return expectedFormat;
  }

  public void setExpectedFormat(String expectedFormat) {
    this.expectedFormat = expectedFormat;
  }


  public GoogleCloudDataplexV1ActionInvalidDataFormat newFormat(String newFormat) {
    this.newFormat = newFormat;
    return this;
  }

  /**
   * The new unexpected data format within the entity.
   * @return newFormat
   */
  @javax.annotation.Nullable
  public String getNewFormat() {
    return newFormat;
  }

  public void setNewFormat(String newFormat) {
    this.newFormat = newFormat;
  }


  public GoogleCloudDataplexV1ActionInvalidDataFormat sampledDataLocations(List<String> sampledDataLocations) {
    this.sampledDataLocations = sampledDataLocations;
    return this;
  }

  public GoogleCloudDataplexV1ActionInvalidDataFormat addSampledDataLocationsItem(String sampledDataLocationsItem) {
    if (this.sampledDataLocations == null) {
      this.sampledDataLocations = new ArrayList<>();
    }
    this.sampledDataLocations.add(sampledDataLocationsItem);
    return this;
  }

  /**
   * The list of data locations sampled and used for format/schema inference.
   * @return sampledDataLocations
   */
  @javax.annotation.Nullable
  public List<String> getSampledDataLocations() {
    return sampledDataLocations;
  }

  public void setSampledDataLocations(List<String> sampledDataLocations) {
    this.sampledDataLocations = sampledDataLocations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1ActionInvalidDataFormat googleCloudDataplexV1ActionInvalidDataFormat = (GoogleCloudDataplexV1ActionInvalidDataFormat) o;
    return Objects.equals(this.expectedFormat, googleCloudDataplexV1ActionInvalidDataFormat.expectedFormat) &&
        Objects.equals(this.newFormat, googleCloudDataplexV1ActionInvalidDataFormat.newFormat) &&
        Objects.equals(this.sampledDataLocations, googleCloudDataplexV1ActionInvalidDataFormat.sampledDataLocations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expectedFormat, newFormat, sampledDataLocations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1ActionInvalidDataFormat {\n");
    sb.append("    expectedFormat: ").append(toIndentedString(expectedFormat)).append("\n");
    sb.append("    newFormat: ").append(toIndentedString(newFormat)).append("\n");
    sb.append("    sampledDataLocations: ").append(toIndentedString(sampledDataLocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expectedFormat");
    openapiFields.add("newFormat");
    openapiFields.add("sampledDataLocations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1ActionInvalidDataFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1ActionInvalidDataFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1ActionInvalidDataFormat is not found in the empty JSON string", GoogleCloudDataplexV1ActionInvalidDataFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1ActionInvalidDataFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1ActionInvalidDataFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expectedFormat") != null && !jsonObj.get("expectedFormat").isJsonNull()) && !jsonObj.get("expectedFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectedFormat").toString()));
      }
      if ((jsonObj.get("newFormat") != null && !jsonObj.get("newFormat").isJsonNull()) && !jsonObj.get("newFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newFormat").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sampledDataLocations") != null && !jsonObj.get("sampledDataLocations").isJsonNull() && !jsonObj.get("sampledDataLocations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampledDataLocations` to be an array in the JSON string but got `%s`", jsonObj.get("sampledDataLocations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1ActionInvalidDataFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1ActionInvalidDataFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1ActionInvalidDataFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1ActionInvalidDataFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1ActionInvalidDataFormat>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1ActionInvalidDataFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1ActionInvalidDataFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1ActionInvalidDataFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1ActionInvalidDataFormat
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1ActionInvalidDataFormat
   */
  public static GoogleCloudDataplexV1ActionInvalidDataFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1ActionInvalidDataFormat.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1ActionInvalidDataFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

