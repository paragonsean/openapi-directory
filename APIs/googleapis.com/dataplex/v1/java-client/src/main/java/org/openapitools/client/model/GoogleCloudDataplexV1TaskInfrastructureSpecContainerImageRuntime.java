/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container Image Runtime Configuration used with Batch execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime {
  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_JAVA_JARS = "javaJars";
  @SerializedName(SERIALIZED_NAME_JAVA_JARS)
  private List<String> javaJars = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_PYTHON_PACKAGES = "pythonPackages";
  @SerializedName(SERIALIZED_NAME_PYTHON_PACKAGES)
  private List<String> pythonPackages = new ArrayList<>();

  public GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime() {
  }

  public GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Optional. Container image to use.
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime javaJars(List<String> javaJars) {
    this.javaJars = javaJars;
    return this;
  }

  public GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime addJavaJarsItem(String javaJarsItem) {
    if (this.javaJars == null) {
      this.javaJars = new ArrayList<>();
    }
    this.javaJars.add(javaJarsItem);
    return this;
  }

  /**
   * Optional. A list of Java JARS to add to the classpath. Valid input includes Cloud Storage URIs to Jar binaries. For example, gs://bucket-name/my/path/to/file.jar
   * @return javaJars
   */
  @javax.annotation.Nullable
  public List<String> getJavaJars() {
    return javaJars;
  }

  public void setJavaJars(List<String> javaJars) {
    this.javaJars = javaJars;
  }


  public GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Optional. Override to common configuration of open source components installed on the Dataproc cluster. The properties to set on daemon config files. Property keys are specified in prefix:property format, for example core:hadoop.tmp.dir. For more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  public GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime pythonPackages(List<String> pythonPackages) {
    this.pythonPackages = pythonPackages;
    return this;
  }

  public GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime addPythonPackagesItem(String pythonPackagesItem) {
    if (this.pythonPackages == null) {
      this.pythonPackages = new ArrayList<>();
    }
    this.pythonPackages.add(pythonPackagesItem);
    return this;
  }

  /**
   * Optional. A list of python packages to be installed. Valid formats include Cloud Storage URI to a PIP installable library. For example, gs://bucket-name/my/path/to/lib.tar.gz
   * @return pythonPackages
   */
  @javax.annotation.Nullable
  public List<String> getPythonPackages() {
    return pythonPackages;
  }

  public void setPythonPackages(List<String> pythonPackages) {
    this.pythonPackages = pythonPackages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime googleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime = (GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime) o;
    return Objects.equals(this.image, googleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime.image) &&
        Objects.equals(this.javaJars, googleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime.javaJars) &&
        Objects.equals(this.properties, googleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime.properties) &&
        Objects.equals(this.pythonPackages, googleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime.pythonPackages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, javaJars, properties, pythonPackages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime {\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    javaJars: ").append(toIndentedString(javaJars)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    pythonPackages: ").append(toIndentedString(pythonPackages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("image");
    openapiFields.add("javaJars");
    openapiFields.add("properties");
    openapiFields.add("pythonPackages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime is not found in the empty JSON string", GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("javaJars") != null && !jsonObj.get("javaJars").isJsonNull() && !jsonObj.get("javaJars").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `javaJars` to be an array in the JSON string but got `%s`", jsonObj.get("javaJars").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pythonPackages") != null && !jsonObj.get("pythonPackages").isJsonNull() && !jsonObj.get("pythonPackages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pythonPackages` to be an array in the JSON string but got `%s`", jsonObj.get("pythonPackages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime
   */
  public static GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

