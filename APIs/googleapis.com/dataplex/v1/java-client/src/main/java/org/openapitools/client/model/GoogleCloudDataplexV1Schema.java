/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDataplexV1SchemaPartitionField;
import org.openapitools.client.model.GoogleCloudDataplexV1SchemaSchemaField;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Schema information describing the structure and layout of the data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1Schema {
  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<GoogleCloudDataplexV1SchemaSchemaField> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARTITION_FIELDS = "partitionFields";
  @SerializedName(SERIALIZED_NAME_PARTITION_FIELDS)
  private List<GoogleCloudDataplexV1SchemaPartitionField> partitionFields = new ArrayList<>();

  /**
   * Optional. The structure of paths containing partition data within the entity.
   */
  @JsonAdapter(PartitionStyleEnum.Adapter.class)
  public enum PartitionStyleEnum {
    PARTITION_STYLE_UNSPECIFIED("PARTITION_STYLE_UNSPECIFIED"),
    
    HIVE_COMPATIBLE("HIVE_COMPATIBLE");

    private String value;

    PartitionStyleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PartitionStyleEnum fromValue(String value) {
      for (PartitionStyleEnum b : PartitionStyleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PartitionStyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PartitionStyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PartitionStyleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PartitionStyleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PartitionStyleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PARTITION_STYLE = "partitionStyle";
  @SerializedName(SERIALIZED_NAME_PARTITION_STYLE)
  private PartitionStyleEnum partitionStyle;

  public static final String SERIALIZED_NAME_USER_MANAGED = "userManaged";
  @SerializedName(SERIALIZED_NAME_USER_MANAGED)
  private Boolean userManaged;

  public GoogleCloudDataplexV1Schema() {
  }

  public GoogleCloudDataplexV1Schema fields(List<GoogleCloudDataplexV1SchemaSchemaField> fields) {
    this.fields = fields;
    return this;
  }

  public GoogleCloudDataplexV1Schema addFieldsItem(GoogleCloudDataplexV1SchemaSchemaField fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * Optional. The sequence of fields describing data in table entities. Note: BigQuery SchemaFields are immutable.
   * @return fields
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDataplexV1SchemaSchemaField> getFields() {
    return fields;
  }

  public void setFields(List<GoogleCloudDataplexV1SchemaSchemaField> fields) {
    this.fields = fields;
  }


  public GoogleCloudDataplexV1Schema partitionFields(List<GoogleCloudDataplexV1SchemaPartitionField> partitionFields) {
    this.partitionFields = partitionFields;
    return this;
  }

  public GoogleCloudDataplexV1Schema addPartitionFieldsItem(GoogleCloudDataplexV1SchemaPartitionField partitionFieldsItem) {
    if (this.partitionFields == null) {
      this.partitionFields = new ArrayList<>();
    }
    this.partitionFields.add(partitionFieldsItem);
    return this;
  }

  /**
   * Optional. The sequence of fields describing the partition structure in entities. If this field is empty, there are no partitions within the data.
   * @return partitionFields
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDataplexV1SchemaPartitionField> getPartitionFields() {
    return partitionFields;
  }

  public void setPartitionFields(List<GoogleCloudDataplexV1SchemaPartitionField> partitionFields) {
    this.partitionFields = partitionFields;
  }


  public GoogleCloudDataplexV1Schema partitionStyle(PartitionStyleEnum partitionStyle) {
    this.partitionStyle = partitionStyle;
    return this;
  }

  /**
   * Optional. The structure of paths containing partition data within the entity.
   * @return partitionStyle
   */
  @javax.annotation.Nullable
  public PartitionStyleEnum getPartitionStyle() {
    return partitionStyle;
  }

  public void setPartitionStyle(PartitionStyleEnum partitionStyle) {
    this.partitionStyle = partitionStyle;
  }


  public GoogleCloudDataplexV1Schema userManaged(Boolean userManaged) {
    this.userManaged = userManaged;
    return this;
  }

  /**
   * Required. Set to true if user-managed or false if managed by Dataplex. The default is false (managed by Dataplex). Set to falseto enable Dataplex discovery to update the schema. including new data discovery, schema inference, and schema evolution. Users retain the ability to input and edit the schema. Dataplex treats schema input by the user as though produced by a previous Dataplex discovery operation, and it will evolve the schema and take action based on that treatment. Set to true to fully manage the entity schema. This setting guarantees that Dataplex will not change schema fields.
   * @return userManaged
   */
  @javax.annotation.Nullable
  public Boolean getUserManaged() {
    return userManaged;
  }

  public void setUserManaged(Boolean userManaged) {
    this.userManaged = userManaged;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1Schema googleCloudDataplexV1Schema = (GoogleCloudDataplexV1Schema) o;
    return Objects.equals(this.fields, googleCloudDataplexV1Schema.fields) &&
        Objects.equals(this.partitionFields, googleCloudDataplexV1Schema.partitionFields) &&
        Objects.equals(this.partitionStyle, googleCloudDataplexV1Schema.partitionStyle) &&
        Objects.equals(this.userManaged, googleCloudDataplexV1Schema.userManaged);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fields, partitionFields, partitionStyle, userManaged);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1Schema {\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    partitionFields: ").append(toIndentedString(partitionFields)).append("\n");
    sb.append("    partitionStyle: ").append(toIndentedString(partitionStyle)).append("\n");
    sb.append("    userManaged: ").append(toIndentedString(userManaged)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fields");
    openapiFields.add("partitionFields");
    openapiFields.add("partitionStyle");
    openapiFields.add("userManaged");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1Schema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1Schema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1Schema is not found in the empty JSON string", GoogleCloudDataplexV1Schema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1Schema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1Schema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
          }

          // validate the optional field `fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            GoogleCloudDataplexV1SchemaSchemaField.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
      if (jsonObj.get("partitionFields") != null && !jsonObj.get("partitionFields").isJsonNull()) {
        JsonArray jsonArraypartitionFields = jsonObj.getAsJsonArray("partitionFields");
        if (jsonArraypartitionFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("partitionFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `partitionFields` to be an array in the JSON string but got `%s`", jsonObj.get("partitionFields").toString()));
          }

          // validate the optional field `partitionFields` (array)
          for (int i = 0; i < jsonArraypartitionFields.size(); i++) {
            GoogleCloudDataplexV1SchemaPartitionField.validateJsonElement(jsonArraypartitionFields.get(i));
          };
        }
      }
      if ((jsonObj.get("partitionStyle") != null && !jsonObj.get("partitionStyle").isJsonNull()) && !jsonObj.get("partitionStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partitionStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partitionStyle").toString()));
      }
      // validate the optional field `partitionStyle`
      if (jsonObj.get("partitionStyle") != null && !jsonObj.get("partitionStyle").isJsonNull()) {
        PartitionStyleEnum.validateJsonElement(jsonObj.get("partitionStyle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1Schema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1Schema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1Schema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1Schema.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1Schema>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1Schema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1Schema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1Schema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1Schema
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1Schema
   */
  public static GoogleCloudDataplexV1Schema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1Schema.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1Schema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

