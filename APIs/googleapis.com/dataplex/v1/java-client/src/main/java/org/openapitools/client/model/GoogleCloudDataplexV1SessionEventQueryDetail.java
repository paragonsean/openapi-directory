/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Execution details of the query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1SessionEventQueryDetail {
  public static final String SERIALIZED_NAME_DATA_PROCESSED_BYTES = "dataProcessedBytes";
  @SerializedName(SERIALIZED_NAME_DATA_PROCESSED_BYTES)
  private String dataProcessedBytes;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  /**
   * Query Execution engine.
   */
  @JsonAdapter(EngineEnum.Adapter.class)
  public enum EngineEnum {
    ENGINE_UNSPECIFIED("ENGINE_UNSPECIFIED"),
    
    SPARK_SQL("SPARK_SQL"),
    
    BIGQUERY("BIGQUERY");

    private String value;

    EngineEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EngineEnum fromValue(String value) {
      for (EngineEnum b : EngineEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EngineEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EngineEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EngineEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EngineEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EngineEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private EngineEnum engine;

  public static final String SERIALIZED_NAME_QUERY_ID = "queryId";
  @SerializedName(SERIALIZED_NAME_QUERY_ID)
  private String queryId;

  public static final String SERIALIZED_NAME_QUERY_TEXT = "queryText";
  @SerializedName(SERIALIZED_NAME_QUERY_TEXT)
  private String queryText;

  public static final String SERIALIZED_NAME_RESULT_SIZE_BYTES = "resultSizeBytes";
  @SerializedName(SERIALIZED_NAME_RESULT_SIZE_BYTES)
  private String resultSizeBytes;

  public GoogleCloudDataplexV1SessionEventQueryDetail() {
  }

  public GoogleCloudDataplexV1SessionEventQueryDetail dataProcessedBytes(String dataProcessedBytes) {
    this.dataProcessedBytes = dataProcessedBytes;
    return this;
  }

  /**
   * The data processed by the query.
   * @return dataProcessedBytes
   */
  @javax.annotation.Nullable
  public String getDataProcessedBytes() {
    return dataProcessedBytes;
  }

  public void setDataProcessedBytes(String dataProcessedBytes) {
    this.dataProcessedBytes = dataProcessedBytes;
  }


  public GoogleCloudDataplexV1SessionEventQueryDetail duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Time taken for execution of the query.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public GoogleCloudDataplexV1SessionEventQueryDetail engine(EngineEnum engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Query Execution engine.
   * @return engine
   */
  @javax.annotation.Nullable
  public EngineEnum getEngine() {
    return engine;
  }

  public void setEngine(EngineEnum engine) {
    this.engine = engine;
  }


  public GoogleCloudDataplexV1SessionEventQueryDetail queryId(String queryId) {
    this.queryId = queryId;
    return this;
  }

  /**
   * The unique Query id identifying the query.
   * @return queryId
   */
  @javax.annotation.Nullable
  public String getQueryId() {
    return queryId;
  }

  public void setQueryId(String queryId) {
    this.queryId = queryId;
  }


  public GoogleCloudDataplexV1SessionEventQueryDetail queryText(String queryText) {
    this.queryText = queryText;
    return this;
  }

  /**
   * The query text executed.
   * @return queryText
   */
  @javax.annotation.Nullable
  public String getQueryText() {
    return queryText;
  }

  public void setQueryText(String queryText) {
    this.queryText = queryText;
  }


  public GoogleCloudDataplexV1SessionEventQueryDetail resultSizeBytes(String resultSizeBytes) {
    this.resultSizeBytes = resultSizeBytes;
    return this;
  }

  /**
   * The size of results the query produced.
   * @return resultSizeBytes
   */
  @javax.annotation.Nullable
  public String getResultSizeBytes() {
    return resultSizeBytes;
  }

  public void setResultSizeBytes(String resultSizeBytes) {
    this.resultSizeBytes = resultSizeBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1SessionEventQueryDetail googleCloudDataplexV1SessionEventQueryDetail = (GoogleCloudDataplexV1SessionEventQueryDetail) o;
    return Objects.equals(this.dataProcessedBytes, googleCloudDataplexV1SessionEventQueryDetail.dataProcessedBytes) &&
        Objects.equals(this.duration, googleCloudDataplexV1SessionEventQueryDetail.duration) &&
        Objects.equals(this.engine, googleCloudDataplexV1SessionEventQueryDetail.engine) &&
        Objects.equals(this.queryId, googleCloudDataplexV1SessionEventQueryDetail.queryId) &&
        Objects.equals(this.queryText, googleCloudDataplexV1SessionEventQueryDetail.queryText) &&
        Objects.equals(this.resultSizeBytes, googleCloudDataplexV1SessionEventQueryDetail.resultSizeBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataProcessedBytes, duration, engine, queryId, queryText, resultSizeBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1SessionEventQueryDetail {\n");
    sb.append("    dataProcessedBytes: ").append(toIndentedString(dataProcessedBytes)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    queryText: ").append(toIndentedString(queryText)).append("\n");
    sb.append("    resultSizeBytes: ").append(toIndentedString(resultSizeBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataProcessedBytes");
    openapiFields.add("duration");
    openapiFields.add("engine");
    openapiFields.add("queryId");
    openapiFields.add("queryText");
    openapiFields.add("resultSizeBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1SessionEventQueryDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1SessionEventQueryDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1SessionEventQueryDetail is not found in the empty JSON string", GoogleCloudDataplexV1SessionEventQueryDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1SessionEventQueryDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1SessionEventQueryDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataProcessedBytes") != null && !jsonObj.get("dataProcessedBytes").isJsonNull()) && !jsonObj.get("dataProcessedBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataProcessedBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataProcessedBytes").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) && !jsonObj.get("engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine").toString()));
      }
      // validate the optional field `engine`
      if (jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) {
        EngineEnum.validateJsonElement(jsonObj.get("engine"));
      }
      if ((jsonObj.get("queryId") != null && !jsonObj.get("queryId").isJsonNull()) && !jsonObj.get("queryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryId").toString()));
      }
      if ((jsonObj.get("queryText") != null && !jsonObj.get("queryText").isJsonNull()) && !jsonObj.get("queryText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryText").toString()));
      }
      if ((jsonObj.get("resultSizeBytes") != null && !jsonObj.get("resultSizeBytes").isJsonNull()) && !jsonObj.get("resultSizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultSizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultSizeBytes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1SessionEventQueryDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1SessionEventQueryDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1SessionEventQueryDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1SessionEventQueryDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1SessionEventQueryDetail>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1SessionEventQueryDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1SessionEventQueryDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1SessionEventQueryDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1SessionEventQueryDetail
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1SessionEventQueryDetail
   */
  public static GoogleCloudDataplexV1SessionEventQueryDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1SessionEventQueryDetail.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1SessionEventQueryDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

