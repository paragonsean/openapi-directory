/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Evaluates whether the column aggregate statistic lies between a specified range.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation {
  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private String maxValue;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private String minValue;

  /**
   * Optional. The aggregate metric to evaluate.
   */
  @JsonAdapter(StatisticEnum.Adapter.class)
  public enum StatisticEnum {
    STATISTIC_UNDEFINED("STATISTIC_UNDEFINED"),
    
    MEAN("MEAN"),
    
    MIN("MIN"),
    
    MAX("MAX");

    private String value;

    StatisticEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatisticEnum fromValue(String value) {
      for (StatisticEnum b : StatisticEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatisticEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatisticEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatisticEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatisticEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatisticEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATISTIC = "statistic";
  @SerializedName(SERIALIZED_NAME_STATISTIC)
  private StatisticEnum statistic;

  public static final String SERIALIZED_NAME_STRICT_MAX_ENABLED = "strictMaxEnabled";
  @SerializedName(SERIALIZED_NAME_STRICT_MAX_ENABLED)
  private Boolean strictMaxEnabled;

  public static final String SERIALIZED_NAME_STRICT_MIN_ENABLED = "strictMinEnabled";
  @SerializedName(SERIALIZED_NAME_STRICT_MIN_ENABLED)
  private Boolean strictMinEnabled;

  public GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation() {
  }

  public GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation maxValue(String maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * Optional. The maximum column statistic value allowed for a row to pass this validation.At least one of min_value and max_value need to be provided.
   * @return maxValue
   */
  @javax.annotation.Nullable
  public String getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(String maxValue) {
    this.maxValue = maxValue;
  }


  public GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation minValue(String minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * Optional. The minimum column statistic value allowed for a row to pass this validation.At least one of min_value and max_value need to be provided.
   * @return minValue
   */
  @javax.annotation.Nullable
  public String getMinValue() {
    return minValue;
  }

  public void setMinValue(String minValue) {
    this.minValue = minValue;
  }


  public GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation statistic(StatisticEnum statistic) {
    this.statistic = statistic;
    return this;
  }

  /**
   * Optional. The aggregate metric to evaluate.
   * @return statistic
   */
  @javax.annotation.Nullable
  public StatisticEnum getStatistic() {
    return statistic;
  }

  public void setStatistic(StatisticEnum statistic) {
    this.statistic = statistic;
  }


  public GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation strictMaxEnabled(Boolean strictMaxEnabled) {
    this.strictMaxEnabled = strictMaxEnabled;
    return this;
  }

  /**
   * Optional. Whether column statistic needs to be strictly lesser than (&#39;&lt;&#39;) the maximum, or if equality is allowed.Only relevant if a max_value has been defined. Default &#x3D; false.
   * @return strictMaxEnabled
   */
  @javax.annotation.Nullable
  public Boolean getStrictMaxEnabled() {
    return strictMaxEnabled;
  }

  public void setStrictMaxEnabled(Boolean strictMaxEnabled) {
    this.strictMaxEnabled = strictMaxEnabled;
  }


  public GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation strictMinEnabled(Boolean strictMinEnabled) {
    this.strictMinEnabled = strictMinEnabled;
    return this;
  }

  /**
   * Optional. Whether column statistic needs to be strictly greater than (&#39;&gt;&#39;) the minimum, or if equality is allowed.Only relevant if a min_value has been defined. Default &#x3D; false.
   * @return strictMinEnabled
   */
  @javax.annotation.Nullable
  public Boolean getStrictMinEnabled() {
    return strictMinEnabled;
  }

  public void setStrictMinEnabled(Boolean strictMinEnabled) {
    this.strictMinEnabled = strictMinEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation googleCloudDataplexV1DataQualityRuleStatisticRangeExpectation = (GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation) o;
    return Objects.equals(this.maxValue, googleCloudDataplexV1DataQualityRuleStatisticRangeExpectation.maxValue) &&
        Objects.equals(this.minValue, googleCloudDataplexV1DataQualityRuleStatisticRangeExpectation.minValue) &&
        Objects.equals(this.statistic, googleCloudDataplexV1DataQualityRuleStatisticRangeExpectation.statistic) &&
        Objects.equals(this.strictMaxEnabled, googleCloudDataplexV1DataQualityRuleStatisticRangeExpectation.strictMaxEnabled) &&
        Objects.equals(this.strictMinEnabled, googleCloudDataplexV1DataQualityRuleStatisticRangeExpectation.strictMinEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxValue, minValue, statistic, strictMaxEnabled, strictMinEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation {\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    statistic: ").append(toIndentedString(statistic)).append("\n");
    sb.append("    strictMaxEnabled: ").append(toIndentedString(strictMaxEnabled)).append("\n");
    sb.append("    strictMinEnabled: ").append(toIndentedString(strictMinEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxValue");
    openapiFields.add("minValue");
    openapiFields.add("statistic");
    openapiFields.add("strictMaxEnabled");
    openapiFields.add("strictMinEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation is not found in the empty JSON string", GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("maxValue") != null && !jsonObj.get("maxValue").isJsonNull()) && !jsonObj.get("maxValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxValue").toString()));
      }
      if ((jsonObj.get("minValue") != null && !jsonObj.get("minValue").isJsonNull()) && !jsonObj.get("minValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minValue").toString()));
      }
      if ((jsonObj.get("statistic") != null && !jsonObj.get("statistic").isJsonNull()) && !jsonObj.get("statistic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statistic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statistic").toString()));
      }
      // validate the optional field `statistic`
      if (jsonObj.get("statistic") != null && !jsonObj.get("statistic").isJsonNull()) {
        StatisticEnum.validateJsonElement(jsonObj.get("statistic"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation
   */
  public static GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

