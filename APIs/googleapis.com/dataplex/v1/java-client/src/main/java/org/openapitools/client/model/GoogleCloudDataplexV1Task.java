/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudDataplexV1TaskExecutionSpec;
import org.openapitools.client.model.GoogleCloudDataplexV1TaskExecutionStatus;
import org.openapitools.client.model.GoogleCloudDataplexV1TaskNotebookTaskConfig;
import org.openapitools.client.model.GoogleCloudDataplexV1TaskSparkTaskConfig;
import org.openapitools.client.model.GoogleCloudDataplexV1TaskTriggerSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A task represents a user-visible job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1Task {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXECUTION_SPEC = "executionSpec";
  @SerializedName(SERIALIZED_NAME_EXECUTION_SPEC)
  private GoogleCloudDataplexV1TaskExecutionSpec executionSpec;

  public static final String SERIALIZED_NAME_EXECUTION_STATUS = "executionStatus";
  @SerializedName(SERIALIZED_NAME_EXECUTION_STATUS)
  private GoogleCloudDataplexV1TaskExecutionStatus executionStatus;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTEBOOK = "notebook";
  @SerializedName(SERIALIZED_NAME_NOTEBOOK)
  private GoogleCloudDataplexV1TaskNotebookTaskConfig notebook;

  public static final String SERIALIZED_NAME_SPARK = "spark";
  @SerializedName(SERIALIZED_NAME_SPARK)
  private GoogleCloudDataplexV1TaskSparkTaskConfig spark;

  /**
   * Output only. Current state of the task.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    CREATING("CREATING"),
    
    DELETING("DELETING"),
    
    ACTION_REQUIRED("ACTION_REQUIRED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TRIGGER_SPEC = "triggerSpec";
  @SerializedName(SERIALIZED_NAME_TRIGGER_SPEC)
  private GoogleCloudDataplexV1TaskTriggerSpec triggerSpec;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GoogleCloudDataplexV1Task() {
  }

  public GoogleCloudDataplexV1Task(
     String createTime, 
     String name, 
     StateEnum state, 
     String uid, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
    this.state = state;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The time when the task was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GoogleCloudDataplexV1Task description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Description of the task.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudDataplexV1Task displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. User friendly display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDataplexV1Task executionSpec(GoogleCloudDataplexV1TaskExecutionSpec executionSpec) {
    this.executionSpec = executionSpec;
    return this;
  }

  /**
   * Get executionSpec
   * @return executionSpec
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1TaskExecutionSpec getExecutionSpec() {
    return executionSpec;
  }

  public void setExecutionSpec(GoogleCloudDataplexV1TaskExecutionSpec executionSpec) {
    this.executionSpec = executionSpec;
  }


  public GoogleCloudDataplexV1Task executionStatus(GoogleCloudDataplexV1TaskExecutionStatus executionStatus) {
    this.executionStatus = executionStatus;
    return this;
  }

  /**
   * Get executionStatus
   * @return executionStatus
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1TaskExecutionStatus getExecutionStatus() {
    return executionStatus;
  }

  public void setExecutionStatus(GoogleCloudDataplexV1TaskExecutionStatus executionStatus) {
    this.executionStatus = executionStatus;
  }


  public GoogleCloudDataplexV1Task labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public GoogleCloudDataplexV1Task putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. User-defined labels for the task.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. The relative resource name of the task, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/ tasks/{task_id}.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleCloudDataplexV1Task notebook(GoogleCloudDataplexV1TaskNotebookTaskConfig notebook) {
    this.notebook = notebook;
    return this;
  }

  /**
   * Get notebook
   * @return notebook
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1TaskNotebookTaskConfig getNotebook() {
    return notebook;
  }

  public void setNotebook(GoogleCloudDataplexV1TaskNotebookTaskConfig notebook) {
    this.notebook = notebook;
  }


  public GoogleCloudDataplexV1Task spark(GoogleCloudDataplexV1TaskSparkTaskConfig spark) {
    this.spark = spark;
    return this;
  }

  /**
   * Get spark
   * @return spark
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1TaskSparkTaskConfig getSpark() {
    return spark;
  }

  public void setSpark(GoogleCloudDataplexV1TaskSparkTaskConfig spark) {
    this.spark = spark;
  }


  /**
   * Output only. Current state of the task.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public GoogleCloudDataplexV1Task triggerSpec(GoogleCloudDataplexV1TaskTriggerSpec triggerSpec) {
    this.triggerSpec = triggerSpec;
    return this;
  }

  /**
   * Get triggerSpec
   * @return triggerSpec
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1TaskTriggerSpec getTriggerSpec() {
    return triggerSpec;
  }

  public void setTriggerSpec(GoogleCloudDataplexV1TaskTriggerSpec triggerSpec) {
    this.triggerSpec = triggerSpec;
  }


  /**
   * Output only. System generated globally unique ID for the task. This ID will be different if the task is deleted and re-created with the same name.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The time when the task was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1Task googleCloudDataplexV1Task = (GoogleCloudDataplexV1Task) o;
    return Objects.equals(this.createTime, googleCloudDataplexV1Task.createTime) &&
        Objects.equals(this.description, googleCloudDataplexV1Task.description) &&
        Objects.equals(this.displayName, googleCloudDataplexV1Task.displayName) &&
        Objects.equals(this.executionSpec, googleCloudDataplexV1Task.executionSpec) &&
        Objects.equals(this.executionStatus, googleCloudDataplexV1Task.executionStatus) &&
        Objects.equals(this.labels, googleCloudDataplexV1Task.labels) &&
        Objects.equals(this.name, googleCloudDataplexV1Task.name) &&
        Objects.equals(this.notebook, googleCloudDataplexV1Task.notebook) &&
        Objects.equals(this.spark, googleCloudDataplexV1Task.spark) &&
        Objects.equals(this.state, googleCloudDataplexV1Task.state) &&
        Objects.equals(this.triggerSpec, googleCloudDataplexV1Task.triggerSpec) &&
        Objects.equals(this.uid, googleCloudDataplexV1Task.uid) &&
        Objects.equals(this.updateTime, googleCloudDataplexV1Task.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, displayName, executionSpec, executionStatus, labels, name, notebook, spark, state, triggerSpec, uid, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1Task {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    executionSpec: ").append(toIndentedString(executionSpec)).append("\n");
    sb.append("    executionStatus: ").append(toIndentedString(executionStatus)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notebook: ").append(toIndentedString(notebook)).append("\n");
    sb.append("    spark: ").append(toIndentedString(spark)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    triggerSpec: ").append(toIndentedString(triggerSpec)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("executionSpec");
    openapiFields.add("executionStatus");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("notebook");
    openapiFields.add("spark");
    openapiFields.add("state");
    openapiFields.add("triggerSpec");
    openapiFields.add("uid");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1Task
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1Task.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1Task is not found in the empty JSON string", GoogleCloudDataplexV1Task.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1Task.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1Task` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `executionSpec`
      if (jsonObj.get("executionSpec") != null && !jsonObj.get("executionSpec").isJsonNull()) {
        GoogleCloudDataplexV1TaskExecutionSpec.validateJsonElement(jsonObj.get("executionSpec"));
      }
      // validate the optional field `executionStatus`
      if (jsonObj.get("executionStatus") != null && !jsonObj.get("executionStatus").isJsonNull()) {
        GoogleCloudDataplexV1TaskExecutionStatus.validateJsonElement(jsonObj.get("executionStatus"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `notebook`
      if (jsonObj.get("notebook") != null && !jsonObj.get("notebook").isJsonNull()) {
        GoogleCloudDataplexV1TaskNotebookTaskConfig.validateJsonElement(jsonObj.get("notebook"));
      }
      // validate the optional field `spark`
      if (jsonObj.get("spark") != null && !jsonObj.get("spark").isJsonNull()) {
        GoogleCloudDataplexV1TaskSparkTaskConfig.validateJsonElement(jsonObj.get("spark"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `triggerSpec`
      if (jsonObj.get("triggerSpec") != null && !jsonObj.get("triggerSpec").isJsonNull()) {
        GoogleCloudDataplexV1TaskTriggerSpec.validateJsonElement(jsonObj.get("triggerSpec"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1Task.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1Task' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1Task> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1Task.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1Task>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1Task value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1Task read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1Task given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1Task
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1Task
   */
  public static GoogleCloudDataplexV1Task fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1Task.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1Task to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

