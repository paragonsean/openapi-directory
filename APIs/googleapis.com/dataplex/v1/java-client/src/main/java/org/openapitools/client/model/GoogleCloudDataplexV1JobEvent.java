/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The payload associated with Job logs that contains events describing jobs that have run within a Lake.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1JobEvent {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  /**
   * Job execution trigger.
   */
  @JsonAdapter(ExecutionTriggerEnum.Adapter.class)
  public enum ExecutionTriggerEnum {
    EXECUTION_TRIGGER_UNSPECIFIED("EXECUTION_TRIGGER_UNSPECIFIED"),
    
    TASK_CONFIG("TASK_CONFIG"),
    
    RUN_REQUEST("RUN_REQUEST");

    private String value;

    ExecutionTriggerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExecutionTriggerEnum fromValue(String value) {
      for (ExecutionTriggerEnum b : ExecutionTriggerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExecutionTriggerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecutionTriggerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExecutionTriggerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExecutionTriggerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExecutionTriggerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXECUTION_TRIGGER = "executionTrigger";
  @SerializedName(SERIALIZED_NAME_EXECUTION_TRIGGER)
  private ExecutionTriggerEnum executionTrigger;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RETRIES = "retries";
  @SerializedName(SERIALIZED_NAME_RETRIES)
  private Integer retries;

  /**
   * The service used to execute the job.
   */
  @JsonAdapter(ServiceEnum.Adapter.class)
  public enum ServiceEnum {
    SERVICE_UNSPECIFIED("SERVICE_UNSPECIFIED"),
    
    DATAPROC("DATAPROC");

    private String value;

    ServiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceEnum fromValue(String value) {
      for (ServiceEnum b : ServiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private ServiceEnum service;

  public static final String SERIALIZED_NAME_SERVICE_JOB = "serviceJob";
  @SerializedName(SERIALIZED_NAME_SERVICE_JOB)
  private String serviceJob;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * The job state on completion.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    CANCELLED("CANCELLED"),
    
    ABORTED("ABORTED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * The type of the job.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    SPARK("SPARK"),
    
    NOTEBOOK("NOTEBOOK");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public GoogleCloudDataplexV1JobEvent() {
  }

  public GoogleCloudDataplexV1JobEvent endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The time when the job ended running.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public GoogleCloudDataplexV1JobEvent executionTrigger(ExecutionTriggerEnum executionTrigger) {
    this.executionTrigger = executionTrigger;
    return this;
  }

  /**
   * Job execution trigger.
   * @return executionTrigger
   */
  @javax.annotation.Nullable
  public ExecutionTriggerEnum getExecutionTrigger() {
    return executionTrigger;
  }

  public void setExecutionTrigger(ExecutionTriggerEnum executionTrigger) {
    this.executionTrigger = executionTrigger;
  }


  public GoogleCloudDataplexV1JobEvent jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * The unique id identifying the job.
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public GoogleCloudDataplexV1JobEvent message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The log message.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public GoogleCloudDataplexV1JobEvent retries(Integer retries) {
    this.retries = retries;
    return this;
  }

  /**
   * The number of retries.
   * @return retries
   */
  @javax.annotation.Nullable
  public Integer getRetries() {
    return retries;
  }

  public void setRetries(Integer retries) {
    this.retries = retries;
  }


  public GoogleCloudDataplexV1JobEvent service(ServiceEnum service) {
    this.service = service;
    return this;
  }

  /**
   * The service used to execute the job.
   * @return service
   */
  @javax.annotation.Nullable
  public ServiceEnum getService() {
    return service;
  }

  public void setService(ServiceEnum service) {
    this.service = service;
  }


  public GoogleCloudDataplexV1JobEvent serviceJob(String serviceJob) {
    this.serviceJob = serviceJob;
    return this;
  }

  /**
   * The reference to the job within the service.
   * @return serviceJob
   */
  @javax.annotation.Nullable
  public String getServiceJob() {
    return serviceJob;
  }

  public void setServiceJob(String serviceJob) {
    this.serviceJob = serviceJob;
  }


  public GoogleCloudDataplexV1JobEvent startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time when the job started running.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public GoogleCloudDataplexV1JobEvent state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The job state on completion.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GoogleCloudDataplexV1JobEvent type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the job.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1JobEvent googleCloudDataplexV1JobEvent = (GoogleCloudDataplexV1JobEvent) o;
    return Objects.equals(this.endTime, googleCloudDataplexV1JobEvent.endTime) &&
        Objects.equals(this.executionTrigger, googleCloudDataplexV1JobEvent.executionTrigger) &&
        Objects.equals(this.jobId, googleCloudDataplexV1JobEvent.jobId) &&
        Objects.equals(this.message, googleCloudDataplexV1JobEvent.message) &&
        Objects.equals(this.retries, googleCloudDataplexV1JobEvent.retries) &&
        Objects.equals(this.service, googleCloudDataplexV1JobEvent.service) &&
        Objects.equals(this.serviceJob, googleCloudDataplexV1JobEvent.serviceJob) &&
        Objects.equals(this.startTime, googleCloudDataplexV1JobEvent.startTime) &&
        Objects.equals(this.state, googleCloudDataplexV1JobEvent.state) &&
        Objects.equals(this.type, googleCloudDataplexV1JobEvent.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, executionTrigger, jobId, message, retries, service, serviceJob, startTime, state, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1JobEvent {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    executionTrigger: ").append(toIndentedString(executionTrigger)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    retries: ").append(toIndentedString(retries)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    serviceJob: ").append(toIndentedString(serviceJob)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("executionTrigger");
    openapiFields.add("jobId");
    openapiFields.add("message");
    openapiFields.add("retries");
    openapiFields.add("service");
    openapiFields.add("serviceJob");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1JobEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1JobEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1JobEvent is not found in the empty JSON string", GoogleCloudDataplexV1JobEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1JobEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1JobEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("executionTrigger") != null && !jsonObj.get("executionTrigger").isJsonNull()) && !jsonObj.get("executionTrigger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionTrigger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionTrigger").toString()));
      }
      // validate the optional field `executionTrigger`
      if (jsonObj.get("executionTrigger") != null && !jsonObj.get("executionTrigger").isJsonNull()) {
        ExecutionTriggerEnum.validateJsonElement(jsonObj.get("executionTrigger"));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
      // validate the optional field `service`
      if (jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) {
        ServiceEnum.validateJsonElement(jsonObj.get("service"));
      }
      if ((jsonObj.get("serviceJob") != null && !jsonObj.get("serviceJob").isJsonNull()) && !jsonObj.get("serviceJob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceJob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceJob").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1JobEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1JobEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1JobEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1JobEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1JobEvent>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1JobEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1JobEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1JobEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1JobEvent
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1JobEvent
   */
  public static GoogleCloudDataplexV1JobEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1JobEvent.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1JobEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

