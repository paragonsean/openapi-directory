/*
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDataplexV1GovernanceEventEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payload associated with Governance related log events.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:09.858800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDataplexV1GovernanceEvent {
  public static final String SERIALIZED_NAME_ENTITY = "entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private GoogleCloudDataplexV1GovernanceEventEntity entity;

  /**
   * The type of the event.
   */
  @JsonAdapter(EventTypeEnum.Adapter.class)
  public enum EventTypeEnum {
    EVENT_TYPE_UNSPECIFIED("EVENT_TYPE_UNSPECIFIED"),
    
    RESOURCE_IAM_POLICY_UPDATE("RESOURCE_IAM_POLICY_UPDATE"),
    
    BIGQUERY_TABLE_CREATE("BIGQUERY_TABLE_CREATE"),
    
    BIGQUERY_TABLE_UPDATE("BIGQUERY_TABLE_UPDATE"),
    
    BIGQUERY_TABLE_DELETE("BIGQUERY_TABLE_DELETE"),
    
    BIGQUERY_CONNECTION_CREATE("BIGQUERY_CONNECTION_CREATE"),
    
    BIGQUERY_CONNECTION_UPDATE("BIGQUERY_CONNECTION_UPDATE"),
    
    BIGQUERY_CONNECTION_DELETE("BIGQUERY_CONNECTION_DELETE"),
    
    BIGQUERY_TAXONOMY_CREATE("BIGQUERY_TAXONOMY_CREATE"),
    
    BIGQUERY_POLICY_TAG_CREATE("BIGQUERY_POLICY_TAG_CREATE"),
    
    BIGQUERY_POLICY_TAG_DELETE("BIGQUERY_POLICY_TAG_DELETE"),
    
    BIGQUERY_POLICY_TAG_SET_IAM_POLICY("BIGQUERY_POLICY_TAG_SET_IAM_POLICY"),
    
    ACCESS_POLICY_UPDATE("ACCESS_POLICY_UPDATE"),
    
    GOVERNANCE_RULE_MATCHED_RESOURCES("GOVERNANCE_RULE_MATCHED_RESOURCES"),
    
    GOVERNANCE_RULE_SEARCH_LIMIT_EXCEEDS("GOVERNANCE_RULE_SEARCH_LIMIT_EXCEEDS"),
    
    GOVERNANCE_RULE_ERRORS("GOVERNANCE_RULE_ERRORS"),
    
    GOVERNANCE_RULE_PROCESSING("GOVERNANCE_RULE_PROCESSING");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private EventTypeEnum eventType;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public GoogleCloudDataplexV1GovernanceEvent() {
  }

  public GoogleCloudDataplexV1GovernanceEvent entity(GoogleCloudDataplexV1GovernanceEventEntity entity) {
    this.entity = entity;
    return this;
  }

  /**
   * Get entity
   * @return entity
   */
  @javax.annotation.Nullable
  public GoogleCloudDataplexV1GovernanceEventEntity getEntity() {
    return entity;
  }

  public void setEntity(GoogleCloudDataplexV1GovernanceEventEntity entity) {
    this.entity = entity;
  }


  public GoogleCloudDataplexV1GovernanceEvent eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * The type of the event.
   * @return eventType
   */
  @javax.annotation.Nullable
  public EventTypeEnum getEventType() {
    return eventType;
  }

  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }


  public GoogleCloudDataplexV1GovernanceEvent message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The log message.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDataplexV1GovernanceEvent googleCloudDataplexV1GovernanceEvent = (GoogleCloudDataplexV1GovernanceEvent) o;
    return Objects.equals(this.entity, googleCloudDataplexV1GovernanceEvent.entity) &&
        Objects.equals(this.eventType, googleCloudDataplexV1GovernanceEvent.eventType) &&
        Objects.equals(this.message, googleCloudDataplexV1GovernanceEvent.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entity, eventType, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDataplexV1GovernanceEvent {\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entity");
    openapiFields.add("eventType");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDataplexV1GovernanceEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDataplexV1GovernanceEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDataplexV1GovernanceEvent is not found in the empty JSON string", GoogleCloudDataplexV1GovernanceEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDataplexV1GovernanceEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDataplexV1GovernanceEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `entity`
      if (jsonObj.get("entity") != null && !jsonObj.get("entity").isJsonNull()) {
        GoogleCloudDataplexV1GovernanceEventEntity.validateJsonElement(jsonObj.get("entity"));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      // validate the optional field `eventType`
      if (jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) {
        EventTypeEnum.validateJsonElement(jsonObj.get("eventType"));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDataplexV1GovernanceEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDataplexV1GovernanceEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDataplexV1GovernanceEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDataplexV1GovernanceEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDataplexV1GovernanceEvent>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDataplexV1GovernanceEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDataplexV1GovernanceEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDataplexV1GovernanceEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDataplexV1GovernanceEvent
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDataplexV1GovernanceEvent
   */
  public static GoogleCloudDataplexV1GovernanceEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDataplexV1GovernanceEvent.class);
  }

  /**
   * Convert an instance of GoogleCloudDataplexV1GovernanceEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

