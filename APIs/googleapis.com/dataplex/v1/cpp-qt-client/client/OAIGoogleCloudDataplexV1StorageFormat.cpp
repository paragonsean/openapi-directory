/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1StorageFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1StorageFormat::OAIGoogleCloudDataplexV1StorageFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1StorageFormat::OAIGoogleCloudDataplexV1StorageFormat() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1StorageFormat::~OAIGoogleCloudDataplexV1StorageFormat() {}

void OAIGoogleCloudDataplexV1StorageFormat::initializeModel() {

    m_compression_format_isSet = false;
    m_compression_format_isValid = false;

    m_csv_isSet = false;
    m_csv_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_iceberg_isSet = false;
    m_iceberg_isValid = false;

    m_json_isSet = false;
    m_json_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;
}

void OAIGoogleCloudDataplexV1StorageFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1StorageFormat::fromJsonObject(QJsonObject json) {

    m_compression_format_isValid = ::OpenAPI::fromJsonValue(m_compression_format, json[QString("compressionFormat")]);
    m_compression_format_isSet = !json[QString("compressionFormat")].isNull() && m_compression_format_isValid;

    m_csv_isValid = ::OpenAPI::fromJsonValue(m_csv, json[QString("csv")]);
    m_csv_isSet = !json[QString("csv")].isNull() && m_csv_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_iceberg_isValid = ::OpenAPI::fromJsonValue(m_iceberg, json[QString("iceberg")]);
    m_iceberg_isSet = !json[QString("iceberg")].isNull() && m_iceberg_isValid;

    m_json_isValid = ::OpenAPI::fromJsonValue(m_json, json[QString("json")]);
    m_json_isSet = !json[QString("json")].isNull() && m_json_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;
}

QString OAIGoogleCloudDataplexV1StorageFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1StorageFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_compression_format_isSet) {
        obj.insert(QString("compressionFormat"), ::OpenAPI::toJsonValue(m_compression_format));
    }
    if (m_csv.isSet()) {
        obj.insert(QString("csv"), ::OpenAPI::toJsonValue(m_csv));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_iceberg.isSet()) {
        obj.insert(QString("iceberg"), ::OpenAPI::toJsonValue(m_iceberg));
    }
    if (m_json.isSet()) {
        obj.insert(QString("json"), ::OpenAPI::toJsonValue(m_json));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    return obj;
}

QString OAIGoogleCloudDataplexV1StorageFormat::getCompressionFormat() const {
    return m_compression_format;
}
void OAIGoogleCloudDataplexV1StorageFormat::setCompressionFormat(const QString &compression_format) {
    m_compression_format = compression_format;
    m_compression_format_isSet = true;
}

bool OAIGoogleCloudDataplexV1StorageFormat::is_compression_format_Set() const{
    return m_compression_format_isSet;
}

bool OAIGoogleCloudDataplexV1StorageFormat::is_compression_format_Valid() const{
    return m_compression_format_isValid;
}

OAIGoogleCloudDataplexV1StorageFormatCsvOptions OAIGoogleCloudDataplexV1StorageFormat::getCsv() const {
    return m_csv;
}
void OAIGoogleCloudDataplexV1StorageFormat::setCsv(const OAIGoogleCloudDataplexV1StorageFormatCsvOptions &csv) {
    m_csv = csv;
    m_csv_isSet = true;
}

bool OAIGoogleCloudDataplexV1StorageFormat::is_csv_Set() const{
    return m_csv_isSet;
}

bool OAIGoogleCloudDataplexV1StorageFormat::is_csv_Valid() const{
    return m_csv_isValid;
}

QString OAIGoogleCloudDataplexV1StorageFormat::getFormat() const {
    return m_format;
}
void OAIGoogleCloudDataplexV1StorageFormat::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIGoogleCloudDataplexV1StorageFormat::is_format_Set() const{
    return m_format_isSet;
}

bool OAIGoogleCloudDataplexV1StorageFormat::is_format_Valid() const{
    return m_format_isValid;
}

OAIGoogleCloudDataplexV1StorageFormatIcebergOptions OAIGoogleCloudDataplexV1StorageFormat::getIceberg() const {
    return m_iceberg;
}
void OAIGoogleCloudDataplexV1StorageFormat::setIceberg(const OAIGoogleCloudDataplexV1StorageFormatIcebergOptions &iceberg) {
    m_iceberg = iceberg;
    m_iceberg_isSet = true;
}

bool OAIGoogleCloudDataplexV1StorageFormat::is_iceberg_Set() const{
    return m_iceberg_isSet;
}

bool OAIGoogleCloudDataplexV1StorageFormat::is_iceberg_Valid() const{
    return m_iceberg_isValid;
}

OAIGoogleCloudDataplexV1StorageFormatJsonOptions OAIGoogleCloudDataplexV1StorageFormat::getJson() const {
    return m_json;
}
void OAIGoogleCloudDataplexV1StorageFormat::setJson(const OAIGoogleCloudDataplexV1StorageFormatJsonOptions &json) {
    m_json = json;
    m_json_isSet = true;
}

bool OAIGoogleCloudDataplexV1StorageFormat::is_json_Set() const{
    return m_json_isSet;
}

bool OAIGoogleCloudDataplexV1StorageFormat::is_json_Valid() const{
    return m_json_isValid;
}

QString OAIGoogleCloudDataplexV1StorageFormat::getMimeType() const {
    return m_mime_type;
}
void OAIGoogleCloudDataplexV1StorageFormat::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIGoogleCloudDataplexV1StorageFormat::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIGoogleCloudDataplexV1StorageFormat::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

bool OAIGoogleCloudDataplexV1StorageFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compression_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_csv.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iceberg.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_json.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1StorageFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
