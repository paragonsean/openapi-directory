/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1DataQualityResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1DataQualityResult::OAIGoogleCloudDataplexV1DataQualityResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1DataQualityResult::OAIGoogleCloudDataplexV1DataQualityResult() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1DataQualityResult::~OAIGoogleCloudDataplexV1DataQualityResult() {}

void OAIGoogleCloudDataplexV1DataQualityResult::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_passed_isSet = false;
    m_passed_isValid = false;

    m_post_scan_actions_result_isSet = false;
    m_post_scan_actions_result_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_scanned_data_isSet = false;
    m_scanned_data_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIGoogleCloudDataplexV1DataQualityResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1DataQualityResult::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_passed_isValid = ::OpenAPI::fromJsonValue(m_passed, json[QString("passed")]);
    m_passed_isSet = !json[QString("passed")].isNull() && m_passed_isValid;

    m_post_scan_actions_result_isValid = ::OpenAPI::fromJsonValue(m_post_scan_actions_result, json[QString("postScanActionsResult")]);
    m_post_scan_actions_result_isSet = !json[QString("postScanActionsResult")].isNull() && m_post_scan_actions_result_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_scanned_data_isValid = ::OpenAPI::fromJsonValue(m_scanned_data, json[QString("scannedData")]);
    m_scanned_data_isSet = !json[QString("scannedData")].isNull() && m_scanned_data_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAIGoogleCloudDataplexV1DataQualityResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1DataQualityResult::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_passed_isSet) {
        obj.insert(QString("passed"), ::OpenAPI::toJsonValue(m_passed));
    }
    if (m_post_scan_actions_result.isSet()) {
        obj.insert(QString("postScanActionsResult"), ::OpenAPI::toJsonValue(m_post_scan_actions_result));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_scanned_data.isSet()) {
        obj.insert(QString("scannedData"), ::OpenAPI::toJsonValue(m_scanned_data));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

QList<OAIGoogleCloudDataplexV1DataQualityColumnResult> OAIGoogleCloudDataplexV1DataQualityResult::getColumns() const {
    return m_columns;
}
void OAIGoogleCloudDataplexV1DataQualityResult::setColumns(const QList<OAIGoogleCloudDataplexV1DataQualityColumnResult> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_columns_Valid() const{
    return m_columns_isValid;
}

QList<OAIGoogleCloudDataplexV1DataQualityDimensionResult> OAIGoogleCloudDataplexV1DataQualityResult::getDimensions() const {
    return m_dimensions;
}
void OAIGoogleCloudDataplexV1DataQualityResult::setDimensions(const QList<OAIGoogleCloudDataplexV1DataQualityDimensionResult> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::isPassed() const {
    return m_passed;
}
void OAIGoogleCloudDataplexV1DataQualityResult::setPassed(const bool &passed) {
    m_passed = passed;
    m_passed_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_passed_Set() const{
    return m_passed_isSet;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_passed_Valid() const{
    return m_passed_isValid;
}

OAIGoogleCloudDataplexV1DataQualityResultPostScanActionsResult OAIGoogleCloudDataplexV1DataQualityResult::getPostScanActionsResult() const {
    return m_post_scan_actions_result;
}
void OAIGoogleCloudDataplexV1DataQualityResult::setPostScanActionsResult(const OAIGoogleCloudDataplexV1DataQualityResultPostScanActionsResult &post_scan_actions_result) {
    m_post_scan_actions_result = post_scan_actions_result;
    m_post_scan_actions_result_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_post_scan_actions_result_Set() const{
    return m_post_scan_actions_result_isSet;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_post_scan_actions_result_Valid() const{
    return m_post_scan_actions_result_isValid;
}

QString OAIGoogleCloudDataplexV1DataQualityResult::getRowCount() const {
    return m_row_count;
}
void OAIGoogleCloudDataplexV1DataQualityResult::setRowCount(const QString &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_row_count_Valid() const{
    return m_row_count_isValid;
}

QList<OAIGoogleCloudDataplexV1DataQualityRuleResult> OAIGoogleCloudDataplexV1DataQualityResult::getRules() const {
    return m_rules;
}
void OAIGoogleCloudDataplexV1DataQualityResult::setRules(const QList<OAIGoogleCloudDataplexV1DataQualityRuleResult> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_rules_Valid() const{
    return m_rules_isValid;
}

OAIGoogleCloudDataplexV1ScannedData OAIGoogleCloudDataplexV1DataQualityResult::getScannedData() const {
    return m_scanned_data;
}
void OAIGoogleCloudDataplexV1DataQualityResult::setScannedData(const OAIGoogleCloudDataplexV1ScannedData &scanned_data) {
    m_scanned_data = scanned_data;
    m_scanned_data_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_scanned_data_Set() const{
    return m_scanned_data_isSet;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_scanned_data_Valid() const{
    return m_scanned_data_isValid;
}

float OAIGoogleCloudDataplexV1DataQualityResult::getScore() const {
    return m_score;
}
void OAIGoogleCloudDataplexV1DataQualityResult::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_score_Set() const{
    return m_score_isSet;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_passed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_scan_actions_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scanned_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1DataQualityResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
