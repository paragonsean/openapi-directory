/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1SchemaSchemaField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1SchemaSchemaField::OAIGoogleCloudDataplexV1SchemaSchemaField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1SchemaSchemaField::OAIGoogleCloudDataplexV1SchemaSchemaField() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1SchemaSchemaField::~OAIGoogleCloudDataplexV1SchemaSchemaField() {}

void OAIGoogleCloudDataplexV1SchemaSchemaField::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudDataplexV1SchemaSchemaField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1SchemaSchemaField::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudDataplexV1SchemaSchemaField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1SchemaSchemaField::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGoogleCloudDataplexV1SchemaSchemaField::getDescription() const {
    return m_description;
}
void OAIGoogleCloudDataplexV1SchemaSchemaField::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudDataplexV1SchemaSchemaField::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudDataplexV1SchemaSchemaField::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIGoogleCloudDataplexV1SchemaSchemaField> OAIGoogleCloudDataplexV1SchemaSchemaField::getFields() const {
    return m_fields;
}
void OAIGoogleCloudDataplexV1SchemaSchemaField::setFields(const QList<OAIGoogleCloudDataplexV1SchemaSchemaField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIGoogleCloudDataplexV1SchemaSchemaField::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIGoogleCloudDataplexV1SchemaSchemaField::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIGoogleCloudDataplexV1SchemaSchemaField::getMode() const {
    return m_mode;
}
void OAIGoogleCloudDataplexV1SchemaSchemaField::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIGoogleCloudDataplexV1SchemaSchemaField::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIGoogleCloudDataplexV1SchemaSchemaField::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIGoogleCloudDataplexV1SchemaSchemaField::getName() const {
    return m_name;
}
void OAIGoogleCloudDataplexV1SchemaSchemaField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudDataplexV1SchemaSchemaField::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudDataplexV1SchemaSchemaField::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudDataplexV1SchemaSchemaField::getType() const {
    return m_type;
}
void OAIGoogleCloudDataplexV1SchemaSchemaField::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudDataplexV1SchemaSchemaField::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudDataplexV1SchemaSchemaField::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudDataplexV1SchemaSchemaField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1SchemaSchemaField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
