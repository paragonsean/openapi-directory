/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1Action.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1Action::OAIGoogleCloudDataplexV1Action(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1Action::OAIGoogleCloudDataplexV1Action() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1Action::~OAIGoogleCloudDataplexV1Action() {}

void OAIGoogleCloudDataplexV1Action::initializeModel() {

    m_asset_isSet = false;
    m_asset_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_data_locations_isSet = false;
    m_data_locations_isValid = false;

    m_detect_time_isSet = false;
    m_detect_time_isValid = false;

    m_failed_security_policy_apply_isSet = false;
    m_failed_security_policy_apply_isValid = false;

    m_incompatible_data_schema_isSet = false;
    m_incompatible_data_schema_isValid = false;

    m_invalid_data_format_isSet = false;
    m_invalid_data_format_isValid = false;

    m_invalid_data_organization_isSet = false;
    m_invalid_data_organization_isValid = false;

    m_invalid_data_partition_isSet = false;
    m_invalid_data_partition_isValid = false;

    m_issue_isSet = false;
    m_issue_isValid = false;

    m_lake_isSet = false;
    m_lake_isValid = false;

    m_missing_data_isSet = false;
    m_missing_data_isValid = false;

    m_missing_resource_isSet = false;
    m_missing_resource_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_unauthorized_resource_isSet = false;
    m_unauthorized_resource_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIGoogleCloudDataplexV1Action::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1Action::fromJsonObject(QJsonObject json) {

    m_asset_isValid = ::OpenAPI::fromJsonValue(m_asset, json[QString("asset")]);
    m_asset_isSet = !json[QString("asset")].isNull() && m_asset_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_data_locations_isValid = ::OpenAPI::fromJsonValue(m_data_locations, json[QString("dataLocations")]);
    m_data_locations_isSet = !json[QString("dataLocations")].isNull() && m_data_locations_isValid;

    m_detect_time_isValid = ::OpenAPI::fromJsonValue(m_detect_time, json[QString("detectTime")]);
    m_detect_time_isSet = !json[QString("detectTime")].isNull() && m_detect_time_isValid;

    m_failed_security_policy_apply_isValid = ::OpenAPI::fromJsonValue(m_failed_security_policy_apply, json[QString("failedSecurityPolicyApply")]);
    m_failed_security_policy_apply_isSet = !json[QString("failedSecurityPolicyApply")].isNull() && m_failed_security_policy_apply_isValid;

    m_incompatible_data_schema_isValid = ::OpenAPI::fromJsonValue(m_incompatible_data_schema, json[QString("incompatibleDataSchema")]);
    m_incompatible_data_schema_isSet = !json[QString("incompatibleDataSchema")].isNull() && m_incompatible_data_schema_isValid;

    m_invalid_data_format_isValid = ::OpenAPI::fromJsonValue(m_invalid_data_format, json[QString("invalidDataFormat")]);
    m_invalid_data_format_isSet = !json[QString("invalidDataFormat")].isNull() && m_invalid_data_format_isValid;

    m_invalid_data_organization_isValid = ::OpenAPI::fromJsonValue(m_invalid_data_organization, json[QString("invalidDataOrganization")]);
    m_invalid_data_organization_isSet = !json[QString("invalidDataOrganization")].isNull() && m_invalid_data_organization_isValid;

    m_invalid_data_partition_isValid = ::OpenAPI::fromJsonValue(m_invalid_data_partition, json[QString("invalidDataPartition")]);
    m_invalid_data_partition_isSet = !json[QString("invalidDataPartition")].isNull() && m_invalid_data_partition_isValid;

    m_issue_isValid = ::OpenAPI::fromJsonValue(m_issue, json[QString("issue")]);
    m_issue_isSet = !json[QString("issue")].isNull() && m_issue_isValid;

    m_lake_isValid = ::OpenAPI::fromJsonValue(m_lake, json[QString("lake")]);
    m_lake_isSet = !json[QString("lake")].isNull() && m_lake_isValid;

    m_missing_data_isValid = ::OpenAPI::fromJsonValue(m_missing_data, json[QString("missingData")]);
    m_missing_data_isSet = !json[QString("missingData")].isNull() && m_missing_data_isValid;

    m_missing_resource_isValid = ::OpenAPI::fromJsonValue(m_missing_resource, json[QString("missingResource")]);
    m_missing_resource_isSet = !json[QString("missingResource")].isNull() && m_missing_resource_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_unauthorized_resource_isValid = ::OpenAPI::fromJsonValue(m_unauthorized_resource, json[QString("unauthorizedResource")]);
    m_unauthorized_resource_isSet = !json[QString("unauthorizedResource")].isNull() && m_unauthorized_resource_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIGoogleCloudDataplexV1Action::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1Action::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_isSet) {
        obj.insert(QString("asset"), ::OpenAPI::toJsonValue(m_asset));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_data_locations.size() > 0) {
        obj.insert(QString("dataLocations"), ::OpenAPI::toJsonValue(m_data_locations));
    }
    if (m_detect_time_isSet) {
        obj.insert(QString("detectTime"), ::OpenAPI::toJsonValue(m_detect_time));
    }
    if (m_failed_security_policy_apply.isSet()) {
        obj.insert(QString("failedSecurityPolicyApply"), ::OpenAPI::toJsonValue(m_failed_security_policy_apply));
    }
    if (m_incompatible_data_schema.isSet()) {
        obj.insert(QString("incompatibleDataSchema"), ::OpenAPI::toJsonValue(m_incompatible_data_schema));
    }
    if (m_invalid_data_format.isSet()) {
        obj.insert(QString("invalidDataFormat"), ::OpenAPI::toJsonValue(m_invalid_data_format));
    }
    if (m_invalid_data_organization_isSet) {
        obj.insert(QString("invalidDataOrganization"), ::OpenAPI::toJsonValue(m_invalid_data_organization));
    }
    if (m_invalid_data_partition.isSet()) {
        obj.insert(QString("invalidDataPartition"), ::OpenAPI::toJsonValue(m_invalid_data_partition));
    }
    if (m_issue_isSet) {
        obj.insert(QString("issue"), ::OpenAPI::toJsonValue(m_issue));
    }
    if (m_lake_isSet) {
        obj.insert(QString("lake"), ::OpenAPI::toJsonValue(m_lake));
    }
    if (m_missing_data_isSet) {
        obj.insert(QString("missingData"), ::OpenAPI::toJsonValue(m_missing_data));
    }
    if (m_missing_resource_isSet) {
        obj.insert(QString("missingResource"), ::OpenAPI::toJsonValue(m_missing_resource));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_unauthorized_resource_isSet) {
        obj.insert(QString("unauthorizedResource"), ::OpenAPI::toJsonValue(m_unauthorized_resource));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAIGoogleCloudDataplexV1Action::getAsset() const {
    return m_asset;
}
void OAIGoogleCloudDataplexV1Action::setAsset(const QString &asset) {
    m_asset = asset;
    m_asset_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_asset_Set() const{
    return m_asset_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_asset_Valid() const{
    return m_asset_isValid;
}

QString OAIGoogleCloudDataplexV1Action::getCategory() const {
    return m_category;
}
void OAIGoogleCloudDataplexV1Action::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_category_Set() const{
    return m_category_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_category_Valid() const{
    return m_category_isValid;
}

QList<QString> OAIGoogleCloudDataplexV1Action::getDataLocations() const {
    return m_data_locations;
}
void OAIGoogleCloudDataplexV1Action::setDataLocations(const QList<QString> &data_locations) {
    m_data_locations = data_locations;
    m_data_locations_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_data_locations_Set() const{
    return m_data_locations_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_data_locations_Valid() const{
    return m_data_locations_isValid;
}

QString OAIGoogleCloudDataplexV1Action::getDetectTime() const {
    return m_detect_time;
}
void OAIGoogleCloudDataplexV1Action::setDetectTime(const QString &detect_time) {
    m_detect_time = detect_time;
    m_detect_time_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_detect_time_Set() const{
    return m_detect_time_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_detect_time_Valid() const{
    return m_detect_time_isValid;
}

OAIGoogleCloudDataplexV1ActionFailedSecurityPolicyApply OAIGoogleCloudDataplexV1Action::getFailedSecurityPolicyApply() const {
    return m_failed_security_policy_apply;
}
void OAIGoogleCloudDataplexV1Action::setFailedSecurityPolicyApply(const OAIGoogleCloudDataplexV1ActionFailedSecurityPolicyApply &failed_security_policy_apply) {
    m_failed_security_policy_apply = failed_security_policy_apply;
    m_failed_security_policy_apply_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_failed_security_policy_apply_Set() const{
    return m_failed_security_policy_apply_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_failed_security_policy_apply_Valid() const{
    return m_failed_security_policy_apply_isValid;
}

OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema OAIGoogleCloudDataplexV1Action::getIncompatibleDataSchema() const {
    return m_incompatible_data_schema;
}
void OAIGoogleCloudDataplexV1Action::setIncompatibleDataSchema(const OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema &incompatible_data_schema) {
    m_incompatible_data_schema = incompatible_data_schema;
    m_incompatible_data_schema_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_incompatible_data_schema_Set() const{
    return m_incompatible_data_schema_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_incompatible_data_schema_Valid() const{
    return m_incompatible_data_schema_isValid;
}

OAIGoogleCloudDataplexV1ActionInvalidDataFormat OAIGoogleCloudDataplexV1Action::getInvalidDataFormat() const {
    return m_invalid_data_format;
}
void OAIGoogleCloudDataplexV1Action::setInvalidDataFormat(const OAIGoogleCloudDataplexV1ActionInvalidDataFormat &invalid_data_format) {
    m_invalid_data_format = invalid_data_format;
    m_invalid_data_format_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_invalid_data_format_Set() const{
    return m_invalid_data_format_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_invalid_data_format_Valid() const{
    return m_invalid_data_format_isValid;
}

OAIObject OAIGoogleCloudDataplexV1Action::getInvalidDataOrganization() const {
    return m_invalid_data_organization;
}
void OAIGoogleCloudDataplexV1Action::setInvalidDataOrganization(const OAIObject &invalid_data_organization) {
    m_invalid_data_organization = invalid_data_organization;
    m_invalid_data_organization_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_invalid_data_organization_Set() const{
    return m_invalid_data_organization_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_invalid_data_organization_Valid() const{
    return m_invalid_data_organization_isValid;
}

OAIGoogleCloudDataplexV1ActionInvalidDataPartition OAIGoogleCloudDataplexV1Action::getInvalidDataPartition() const {
    return m_invalid_data_partition;
}
void OAIGoogleCloudDataplexV1Action::setInvalidDataPartition(const OAIGoogleCloudDataplexV1ActionInvalidDataPartition &invalid_data_partition) {
    m_invalid_data_partition = invalid_data_partition;
    m_invalid_data_partition_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_invalid_data_partition_Set() const{
    return m_invalid_data_partition_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_invalid_data_partition_Valid() const{
    return m_invalid_data_partition_isValid;
}

QString OAIGoogleCloudDataplexV1Action::getIssue() const {
    return m_issue;
}
void OAIGoogleCloudDataplexV1Action::setIssue(const QString &issue) {
    m_issue = issue;
    m_issue_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_issue_Set() const{
    return m_issue_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_issue_Valid() const{
    return m_issue_isValid;
}

QString OAIGoogleCloudDataplexV1Action::getLake() const {
    return m_lake;
}
void OAIGoogleCloudDataplexV1Action::setLake(const QString &lake) {
    m_lake = lake;
    m_lake_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_lake_Set() const{
    return m_lake_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_lake_Valid() const{
    return m_lake_isValid;
}

OAIObject OAIGoogleCloudDataplexV1Action::getMissingData() const {
    return m_missing_data;
}
void OAIGoogleCloudDataplexV1Action::setMissingData(const OAIObject &missing_data) {
    m_missing_data = missing_data;
    m_missing_data_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_missing_data_Set() const{
    return m_missing_data_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_missing_data_Valid() const{
    return m_missing_data_isValid;
}

OAIObject OAIGoogleCloudDataplexV1Action::getMissingResource() const {
    return m_missing_resource;
}
void OAIGoogleCloudDataplexV1Action::setMissingResource(const OAIObject &missing_resource) {
    m_missing_resource = missing_resource;
    m_missing_resource_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_missing_resource_Set() const{
    return m_missing_resource_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_missing_resource_Valid() const{
    return m_missing_resource_isValid;
}

QString OAIGoogleCloudDataplexV1Action::getName() const {
    return m_name;
}
void OAIGoogleCloudDataplexV1Action::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIGoogleCloudDataplexV1Action::getUnauthorizedResource() const {
    return m_unauthorized_resource;
}
void OAIGoogleCloudDataplexV1Action::setUnauthorizedResource(const OAIObject &unauthorized_resource) {
    m_unauthorized_resource = unauthorized_resource;
    m_unauthorized_resource_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_unauthorized_resource_Set() const{
    return m_unauthorized_resource_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_unauthorized_resource_Valid() const{
    return m_unauthorized_resource_isValid;
}

QString OAIGoogleCloudDataplexV1Action::getZone() const {
    return m_zone;
}
void OAIGoogleCloudDataplexV1Action::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIGoogleCloudDataplexV1Action::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIGoogleCloudDataplexV1Action::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIGoogleCloudDataplexV1Action::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detect_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_security_policy_apply.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_incompatible_data_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_data_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_data_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_data_partition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lake_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unauthorized_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1Action::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
