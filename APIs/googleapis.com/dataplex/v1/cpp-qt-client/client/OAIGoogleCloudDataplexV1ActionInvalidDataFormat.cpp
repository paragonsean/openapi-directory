/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1ActionInvalidDataFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1ActionInvalidDataFormat::OAIGoogleCloudDataplexV1ActionInvalidDataFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1ActionInvalidDataFormat::OAIGoogleCloudDataplexV1ActionInvalidDataFormat() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1ActionInvalidDataFormat::~OAIGoogleCloudDataplexV1ActionInvalidDataFormat() {}

void OAIGoogleCloudDataplexV1ActionInvalidDataFormat::initializeModel() {

    m_expected_format_isSet = false;
    m_expected_format_isValid = false;

    m_new_format_isSet = false;
    m_new_format_isValid = false;

    m_sampled_data_locations_isSet = false;
    m_sampled_data_locations_isValid = false;
}

void OAIGoogleCloudDataplexV1ActionInvalidDataFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1ActionInvalidDataFormat::fromJsonObject(QJsonObject json) {

    m_expected_format_isValid = ::OpenAPI::fromJsonValue(m_expected_format, json[QString("expectedFormat")]);
    m_expected_format_isSet = !json[QString("expectedFormat")].isNull() && m_expected_format_isValid;

    m_new_format_isValid = ::OpenAPI::fromJsonValue(m_new_format, json[QString("newFormat")]);
    m_new_format_isSet = !json[QString("newFormat")].isNull() && m_new_format_isValid;

    m_sampled_data_locations_isValid = ::OpenAPI::fromJsonValue(m_sampled_data_locations, json[QString("sampledDataLocations")]);
    m_sampled_data_locations_isSet = !json[QString("sampledDataLocations")].isNull() && m_sampled_data_locations_isValid;
}

QString OAIGoogleCloudDataplexV1ActionInvalidDataFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1ActionInvalidDataFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_expected_format_isSet) {
        obj.insert(QString("expectedFormat"), ::OpenAPI::toJsonValue(m_expected_format));
    }
    if (m_new_format_isSet) {
        obj.insert(QString("newFormat"), ::OpenAPI::toJsonValue(m_new_format));
    }
    if (m_sampled_data_locations.size() > 0) {
        obj.insert(QString("sampledDataLocations"), ::OpenAPI::toJsonValue(m_sampled_data_locations));
    }
    return obj;
}

QString OAIGoogleCloudDataplexV1ActionInvalidDataFormat::getExpectedFormat() const {
    return m_expected_format;
}
void OAIGoogleCloudDataplexV1ActionInvalidDataFormat::setExpectedFormat(const QString &expected_format) {
    m_expected_format = expected_format;
    m_expected_format_isSet = true;
}

bool OAIGoogleCloudDataplexV1ActionInvalidDataFormat::is_expected_format_Set() const{
    return m_expected_format_isSet;
}

bool OAIGoogleCloudDataplexV1ActionInvalidDataFormat::is_expected_format_Valid() const{
    return m_expected_format_isValid;
}

QString OAIGoogleCloudDataplexV1ActionInvalidDataFormat::getNewFormat() const {
    return m_new_format;
}
void OAIGoogleCloudDataplexV1ActionInvalidDataFormat::setNewFormat(const QString &new_format) {
    m_new_format = new_format;
    m_new_format_isSet = true;
}

bool OAIGoogleCloudDataplexV1ActionInvalidDataFormat::is_new_format_Set() const{
    return m_new_format_isSet;
}

bool OAIGoogleCloudDataplexV1ActionInvalidDataFormat::is_new_format_Valid() const{
    return m_new_format_isValid;
}

QList<QString> OAIGoogleCloudDataplexV1ActionInvalidDataFormat::getSampledDataLocations() const {
    return m_sampled_data_locations;
}
void OAIGoogleCloudDataplexV1ActionInvalidDataFormat::setSampledDataLocations(const QList<QString> &sampled_data_locations) {
    m_sampled_data_locations = sampled_data_locations;
    m_sampled_data_locations_isSet = true;
}

bool OAIGoogleCloudDataplexV1ActionInvalidDataFormat::is_sampled_data_locations_Set() const{
    return m_sampled_data_locations_isSet;
}

bool OAIGoogleCloudDataplexV1ActionInvalidDataFormat::is_sampled_data_locations_Valid() const{
    return m_sampled_data_locations_isValid;
}

bool OAIGoogleCloudDataplexV1ActionInvalidDataFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expected_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampled_data_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1ActionInvalidDataFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
