/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::~OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs() {}

void OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::initializeModel() {

    m_column_filter_applied_isSet = false;
    m_column_filter_applied_isValid = false;

    m_row_filter_applied_isSet = false;
    m_row_filter_applied_isValid = false;

    m_sampling_percent_isSet = false;
    m_sampling_percent_isValid = false;
}

void OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::fromJsonObject(QJsonObject json) {

    m_column_filter_applied_isValid = ::OpenAPI::fromJsonValue(m_column_filter_applied, json[QString("columnFilterApplied")]);
    m_column_filter_applied_isSet = !json[QString("columnFilterApplied")].isNull() && m_column_filter_applied_isValid;

    m_row_filter_applied_isValid = ::OpenAPI::fromJsonValue(m_row_filter_applied, json[QString("rowFilterApplied")]);
    m_row_filter_applied_isSet = !json[QString("rowFilterApplied")].isNull() && m_row_filter_applied_isValid;

    m_sampling_percent_isValid = ::OpenAPI::fromJsonValue(m_sampling_percent, json[QString("samplingPercent")]);
    m_sampling_percent_isSet = !json[QString("samplingPercent")].isNull() && m_sampling_percent_isValid;
}

QString OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::asJsonObject() const {
    QJsonObject obj;
    if (m_column_filter_applied_isSet) {
        obj.insert(QString("columnFilterApplied"), ::OpenAPI::toJsonValue(m_column_filter_applied));
    }
    if (m_row_filter_applied_isSet) {
        obj.insert(QString("rowFilterApplied"), ::OpenAPI::toJsonValue(m_row_filter_applied));
    }
    if (m_sampling_percent_isSet) {
        obj.insert(QString("samplingPercent"), ::OpenAPI::toJsonValue(m_sampling_percent));
    }
    return obj;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::isColumnFilterApplied() const {
    return m_column_filter_applied;
}
void OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::setColumnFilterApplied(const bool &column_filter_applied) {
    m_column_filter_applied = column_filter_applied;
    m_column_filter_applied_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::is_column_filter_applied_Set() const{
    return m_column_filter_applied_isSet;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::is_column_filter_applied_Valid() const{
    return m_column_filter_applied_isValid;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::isRowFilterApplied() const {
    return m_row_filter_applied;
}
void OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::setRowFilterApplied(const bool &row_filter_applied) {
    m_row_filter_applied = row_filter_applied;
    m_row_filter_applied_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::is_row_filter_applied_Set() const{
    return m_row_filter_applied_isSet;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::is_row_filter_applied_Valid() const{
    return m_row_filter_applied_isValid;
}

float OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::getSamplingPercent() const {
    return m_sampling_percent;
}
void OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::setSamplingPercent(const float &sampling_percent) {
    m_sampling_percent = sampling_percent;
    m_sampling_percent_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::is_sampling_percent_Set() const{
    return m_sampling_percent_isSet;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::is_sampling_percent_Valid() const{
    return m_sampling_percent_isValid;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_filter_applied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_filter_applied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_percent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataProfileAppliedConfigs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
