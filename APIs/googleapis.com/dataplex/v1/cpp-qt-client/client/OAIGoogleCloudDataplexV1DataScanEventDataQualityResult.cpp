/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1DataScanEventDataQualityResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::OAIGoogleCloudDataplexV1DataScanEventDataQualityResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::OAIGoogleCloudDataplexV1DataScanEventDataQualityResult() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::~OAIGoogleCloudDataplexV1DataScanEventDataQualityResult() {}

void OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::initializeModel() {

    m_column_score_isSet = false;
    m_column_score_isValid = false;

    m_dimension_passed_isSet = false;
    m_dimension_passed_isValid = false;

    m_dimension_score_isSet = false;
    m_dimension_score_isValid = false;

    m_passed_isSet = false;
    m_passed_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::fromJsonObject(QJsonObject json) {

    m_column_score_isValid = ::OpenAPI::fromJsonValue(m_column_score, json[QString("columnScore")]);
    m_column_score_isSet = !json[QString("columnScore")].isNull() && m_column_score_isValid;

    m_dimension_passed_isValid = ::OpenAPI::fromJsonValue(m_dimension_passed, json[QString("dimensionPassed")]);
    m_dimension_passed_isSet = !json[QString("dimensionPassed")].isNull() && m_dimension_passed_isValid;

    m_dimension_score_isValid = ::OpenAPI::fromJsonValue(m_dimension_score, json[QString("dimensionScore")]);
    m_dimension_score_isSet = !json[QString("dimensionScore")].isNull() && m_dimension_score_isValid;

    m_passed_isValid = ::OpenAPI::fromJsonValue(m_passed, json[QString("passed")]);
    m_passed_isSet = !json[QString("passed")].isNull() && m_passed_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::asJsonObject() const {
    QJsonObject obj;
    if (m_column_score.size() > 0) {
        obj.insert(QString("columnScore"), ::OpenAPI::toJsonValue(m_column_score));
    }
    if (m_dimension_passed.size() > 0) {
        obj.insert(QString("dimensionPassed"), ::OpenAPI::toJsonValue(m_dimension_passed));
    }
    if (m_dimension_score.size() > 0) {
        obj.insert(QString("dimensionScore"), ::OpenAPI::toJsonValue(m_dimension_score));
    }
    if (m_passed_isSet) {
        obj.insert(QString("passed"), ::OpenAPI::toJsonValue(m_passed));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

QMap<QString, float> OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::getColumnScore() const {
    return m_column_score;
}
void OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::setColumnScore(const QMap<QString, float> &column_score) {
    m_column_score = column_score;
    m_column_score_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::is_column_score_Set() const{
    return m_column_score_isSet;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::is_column_score_Valid() const{
    return m_column_score_isValid;
}

QMap<QString, bool> OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::getDimensionPassed() const {
    return m_dimension_passed;
}
void OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::setDimensionPassed(const QMap<QString, bool> &dimension_passed) {
    m_dimension_passed = dimension_passed;
    m_dimension_passed_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::is_dimension_passed_Set() const{
    return m_dimension_passed_isSet;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::is_dimension_passed_Valid() const{
    return m_dimension_passed_isValid;
}

QMap<QString, float> OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::getDimensionScore() const {
    return m_dimension_score;
}
void OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::setDimensionScore(const QMap<QString, float> &dimension_score) {
    m_dimension_score = dimension_score;
    m_dimension_score_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::is_dimension_score_Set() const{
    return m_dimension_score_isSet;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::is_dimension_score_Valid() const{
    return m_dimension_score_isValid;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::isPassed() const {
    return m_passed;
}
void OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::setPassed(const bool &passed) {
    m_passed = passed;
    m_passed_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::is_passed_Set() const{
    return m_passed_isSet;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::is_passed_Valid() const{
    return m_passed_isValid;
}

QString OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::getRowCount() const {
    return m_row_count;
}
void OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::setRowCount(const QString &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::is_row_count_Valid() const{
    return m_row_count_isValid;
}

float OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::getScore() const {
    return m_score;
}
void OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::is_score_Set() const{
    return m_score_isSet;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_score.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_passed.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_score.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_passed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1DataScanEventDataQualityResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
