/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::~OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse() {}

void OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::initializeModel() {

    m_data_taxonomies_isSet = false;
    m_data_taxonomies_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_unreachable_locations_isSet = false;
    m_unreachable_locations_isValid = false;
}

void OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::fromJsonObject(QJsonObject json) {

    m_data_taxonomies_isValid = ::OpenAPI::fromJsonValue(m_data_taxonomies, json[QString("dataTaxonomies")]);
    m_data_taxonomies_isSet = !json[QString("dataTaxonomies")].isNull() && m_data_taxonomies_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_unreachable_locations_isValid = ::OpenAPI::fromJsonValue(m_unreachable_locations, json[QString("unreachableLocations")]);
    m_unreachable_locations_isSet = !json[QString("unreachableLocations")].isNull() && m_unreachable_locations_isValid;
}

QString OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data_taxonomies.size() > 0) {
        obj.insert(QString("dataTaxonomies"), ::OpenAPI::toJsonValue(m_data_taxonomies));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_unreachable_locations.size() > 0) {
        obj.insert(QString("unreachableLocations"), ::OpenAPI::toJsonValue(m_unreachable_locations));
    }
    return obj;
}

QList<OAIGoogleCloudDataplexV1DataTaxonomy> OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::getDataTaxonomies() const {
    return m_data_taxonomies;
}
void OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::setDataTaxonomies(const QList<OAIGoogleCloudDataplexV1DataTaxonomy> &data_taxonomies) {
    m_data_taxonomies = data_taxonomies;
    m_data_taxonomies_isSet = true;
}

bool OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::is_data_taxonomies_Set() const{
    return m_data_taxonomies_isSet;
}

bool OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::is_data_taxonomies_Valid() const{
    return m_data_taxonomies_isValid;
}

QString OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<QString> OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::getUnreachableLocations() const {
    return m_unreachable_locations;
}
void OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::setUnreachableLocations(const QList<QString> &unreachable_locations) {
    m_unreachable_locations = unreachable_locations;
    m_unreachable_locations_isSet = true;
}

bool OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::is_unreachable_locations_Set() const{
    return m_unreachable_locations_isSet;
}

bool OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::is_unreachable_locations_Valid() const{
    return m_unreachable_locations_isValid;
}

bool OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_taxonomies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unreachable_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1ListDataTaxonomiesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
