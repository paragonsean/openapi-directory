/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1SessionEventQueryDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1SessionEventQueryDetail::OAIGoogleCloudDataplexV1SessionEventQueryDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1SessionEventQueryDetail::OAIGoogleCloudDataplexV1SessionEventQueryDetail() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1SessionEventQueryDetail::~OAIGoogleCloudDataplexV1SessionEventQueryDetail() {}

void OAIGoogleCloudDataplexV1SessionEventQueryDetail::initializeModel() {

    m_data_processed_bytes_isSet = false;
    m_data_processed_bytes_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_query_text_isSet = false;
    m_query_text_isValid = false;

    m_result_size_bytes_isSet = false;
    m_result_size_bytes_isValid = false;
}

void OAIGoogleCloudDataplexV1SessionEventQueryDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1SessionEventQueryDetail::fromJsonObject(QJsonObject json) {

    m_data_processed_bytes_isValid = ::OpenAPI::fromJsonValue(m_data_processed_bytes, json[QString("dataProcessedBytes")]);
    m_data_processed_bytes_isSet = !json[QString("dataProcessedBytes")].isNull() && m_data_processed_bytes_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("queryId")]);
    m_query_id_isSet = !json[QString("queryId")].isNull() && m_query_id_isValid;

    m_query_text_isValid = ::OpenAPI::fromJsonValue(m_query_text, json[QString("queryText")]);
    m_query_text_isSet = !json[QString("queryText")].isNull() && m_query_text_isValid;

    m_result_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_result_size_bytes, json[QString("resultSizeBytes")]);
    m_result_size_bytes_isSet = !json[QString("resultSizeBytes")].isNull() && m_result_size_bytes_isValid;
}

QString OAIGoogleCloudDataplexV1SessionEventQueryDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1SessionEventQueryDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_data_processed_bytes_isSet) {
        obj.insert(QString("dataProcessedBytes"), ::OpenAPI::toJsonValue(m_data_processed_bytes));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_engine_isSet) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_query_id_isSet) {
        obj.insert(QString("queryId"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_query_text_isSet) {
        obj.insert(QString("queryText"), ::OpenAPI::toJsonValue(m_query_text));
    }
    if (m_result_size_bytes_isSet) {
        obj.insert(QString("resultSizeBytes"), ::OpenAPI::toJsonValue(m_result_size_bytes));
    }
    return obj;
}

QString OAIGoogleCloudDataplexV1SessionEventQueryDetail::getDataProcessedBytes() const {
    return m_data_processed_bytes;
}
void OAIGoogleCloudDataplexV1SessionEventQueryDetail::setDataProcessedBytes(const QString &data_processed_bytes) {
    m_data_processed_bytes = data_processed_bytes;
    m_data_processed_bytes_isSet = true;
}

bool OAIGoogleCloudDataplexV1SessionEventQueryDetail::is_data_processed_bytes_Set() const{
    return m_data_processed_bytes_isSet;
}

bool OAIGoogleCloudDataplexV1SessionEventQueryDetail::is_data_processed_bytes_Valid() const{
    return m_data_processed_bytes_isValid;
}

QString OAIGoogleCloudDataplexV1SessionEventQueryDetail::getDuration() const {
    return m_duration;
}
void OAIGoogleCloudDataplexV1SessionEventQueryDetail::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIGoogleCloudDataplexV1SessionEventQueryDetail::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIGoogleCloudDataplexV1SessionEventQueryDetail::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIGoogleCloudDataplexV1SessionEventQueryDetail::getEngine() const {
    return m_engine;
}
void OAIGoogleCloudDataplexV1SessionEventQueryDetail::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIGoogleCloudDataplexV1SessionEventQueryDetail::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIGoogleCloudDataplexV1SessionEventQueryDetail::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIGoogleCloudDataplexV1SessionEventQueryDetail::getQueryId() const {
    return m_query_id;
}
void OAIGoogleCloudDataplexV1SessionEventQueryDetail::setQueryId(const QString &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAIGoogleCloudDataplexV1SessionEventQueryDetail::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAIGoogleCloudDataplexV1SessionEventQueryDetail::is_query_id_Valid() const{
    return m_query_id_isValid;
}

QString OAIGoogleCloudDataplexV1SessionEventQueryDetail::getQueryText() const {
    return m_query_text;
}
void OAIGoogleCloudDataplexV1SessionEventQueryDetail::setQueryText(const QString &query_text) {
    m_query_text = query_text;
    m_query_text_isSet = true;
}

bool OAIGoogleCloudDataplexV1SessionEventQueryDetail::is_query_text_Set() const{
    return m_query_text_isSet;
}

bool OAIGoogleCloudDataplexV1SessionEventQueryDetail::is_query_text_Valid() const{
    return m_query_text_isValid;
}

QString OAIGoogleCloudDataplexV1SessionEventQueryDetail::getResultSizeBytes() const {
    return m_result_size_bytes;
}
void OAIGoogleCloudDataplexV1SessionEventQueryDetail::setResultSizeBytes(const QString &result_size_bytes) {
    m_result_size_bytes = result_size_bytes;
    m_result_size_bytes_isSet = true;
}

bool OAIGoogleCloudDataplexV1SessionEventQueryDetail::is_result_size_bytes_Set() const{
    return m_result_size_bytes_isSet;
}

bool OAIGoogleCloudDataplexV1SessionEventQueryDetail::is_result_size_bytes_Valid() const{
    return m_result_size_bytes_isValid;
}

bool OAIGoogleCloudDataplexV1SessionEventQueryDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_processed_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1SessionEventQueryDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
