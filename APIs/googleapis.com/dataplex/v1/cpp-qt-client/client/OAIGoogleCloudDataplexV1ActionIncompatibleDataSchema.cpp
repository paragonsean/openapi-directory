/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::~OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema() {}

void OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::initializeModel() {

    m_existing_schema_isSet = false;
    m_existing_schema_isValid = false;

    m_new_schema_isSet = false;
    m_new_schema_isValid = false;

    m_sampled_data_locations_isSet = false;
    m_sampled_data_locations_isValid = false;

    m_schema_change_isSet = false;
    m_schema_change_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;
}

void OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::fromJsonObject(QJsonObject json) {

    m_existing_schema_isValid = ::OpenAPI::fromJsonValue(m_existing_schema, json[QString("existingSchema")]);
    m_existing_schema_isSet = !json[QString("existingSchema")].isNull() && m_existing_schema_isValid;

    m_new_schema_isValid = ::OpenAPI::fromJsonValue(m_new_schema, json[QString("newSchema")]);
    m_new_schema_isSet = !json[QString("newSchema")].isNull() && m_new_schema_isValid;

    m_sampled_data_locations_isValid = ::OpenAPI::fromJsonValue(m_sampled_data_locations, json[QString("sampledDataLocations")]);
    m_sampled_data_locations_isSet = !json[QString("sampledDataLocations")].isNull() && m_sampled_data_locations_isValid;

    m_schema_change_isValid = ::OpenAPI::fromJsonValue(m_schema_change, json[QString("schemaChange")]);
    m_schema_change_isSet = !json[QString("schemaChange")].isNull() && m_schema_change_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;
}

QString OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_existing_schema_isSet) {
        obj.insert(QString("existingSchema"), ::OpenAPI::toJsonValue(m_existing_schema));
    }
    if (m_new_schema_isSet) {
        obj.insert(QString("newSchema"), ::OpenAPI::toJsonValue(m_new_schema));
    }
    if (m_sampled_data_locations.size() > 0) {
        obj.insert(QString("sampledDataLocations"), ::OpenAPI::toJsonValue(m_sampled_data_locations));
    }
    if (m_schema_change_isSet) {
        obj.insert(QString("schemaChange"), ::OpenAPI::toJsonValue(m_schema_change));
    }
    if (m_table_isSet) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    return obj;
}

QString OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::getExistingSchema() const {
    return m_existing_schema;
}
void OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::setExistingSchema(const QString &existing_schema) {
    m_existing_schema = existing_schema;
    m_existing_schema_isSet = true;
}

bool OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::is_existing_schema_Set() const{
    return m_existing_schema_isSet;
}

bool OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::is_existing_schema_Valid() const{
    return m_existing_schema_isValid;
}

QString OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::getNewSchema() const {
    return m_new_schema;
}
void OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::setNewSchema(const QString &new_schema) {
    m_new_schema = new_schema;
    m_new_schema_isSet = true;
}

bool OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::is_new_schema_Set() const{
    return m_new_schema_isSet;
}

bool OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::is_new_schema_Valid() const{
    return m_new_schema_isValid;
}

QList<QString> OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::getSampledDataLocations() const {
    return m_sampled_data_locations;
}
void OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::setSampledDataLocations(const QList<QString> &sampled_data_locations) {
    m_sampled_data_locations = sampled_data_locations;
    m_sampled_data_locations_isSet = true;
}

bool OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::is_sampled_data_locations_Set() const{
    return m_sampled_data_locations_isSet;
}

bool OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::is_sampled_data_locations_Valid() const{
    return m_sampled_data_locations_isValid;
}

QString OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::getSchemaChange() const {
    return m_schema_change;
}
void OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::setSchemaChange(const QString &schema_change) {
    m_schema_change = schema_change;
    m_schema_change_isSet = true;
}

bool OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::is_schema_change_Set() const{
    return m_schema_change_isSet;
}

bool OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::is_schema_change_Valid() const{
    return m_schema_change_isValid;
}

QString OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::getTable() const {
    return m_table;
}
void OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::setTable(const QString &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::is_table_Set() const{
    return m_table_isSet;
}

bool OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::is_table_Valid() const{
    return m_table_isValid;
}

bool OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_existing_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampled_data_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1ActionIncompatibleDataSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
