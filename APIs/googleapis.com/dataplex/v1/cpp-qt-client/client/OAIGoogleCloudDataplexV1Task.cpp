/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1Task.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1Task::OAIGoogleCloudDataplexV1Task(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1Task::OAIGoogleCloudDataplexV1Task() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1Task::~OAIGoogleCloudDataplexV1Task() {}

void OAIGoogleCloudDataplexV1Task::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_execution_spec_isSet = false;
    m_execution_spec_isValid = false;

    m_execution_status_isSet = false;
    m_execution_status_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notebook_isSet = false;
    m_notebook_isValid = false;

    m_spark_isSet = false;
    m_spark_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_trigger_spec_isSet = false;
    m_trigger_spec_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudDataplexV1Task::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1Task::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_execution_spec_isValid = ::OpenAPI::fromJsonValue(m_execution_spec, json[QString("executionSpec")]);
    m_execution_spec_isSet = !json[QString("executionSpec")].isNull() && m_execution_spec_isValid;

    m_execution_status_isValid = ::OpenAPI::fromJsonValue(m_execution_status, json[QString("executionStatus")]);
    m_execution_status_isSet = !json[QString("executionStatus")].isNull() && m_execution_status_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notebook_isValid = ::OpenAPI::fromJsonValue(m_notebook, json[QString("notebook")]);
    m_notebook_isSet = !json[QString("notebook")].isNull() && m_notebook_isValid;

    m_spark_isValid = ::OpenAPI::fromJsonValue(m_spark, json[QString("spark")]);
    m_spark_isSet = !json[QString("spark")].isNull() && m_spark_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_trigger_spec_isValid = ::OpenAPI::fromJsonValue(m_trigger_spec, json[QString("triggerSpec")]);
    m_trigger_spec_isSet = !json[QString("triggerSpec")].isNull() && m_trigger_spec_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudDataplexV1Task::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1Task::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_execution_spec.isSet()) {
        obj.insert(QString("executionSpec"), ::OpenAPI::toJsonValue(m_execution_spec));
    }
    if (m_execution_status.isSet()) {
        obj.insert(QString("executionStatus"), ::OpenAPI::toJsonValue(m_execution_status));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notebook.isSet()) {
        obj.insert(QString("notebook"), ::OpenAPI::toJsonValue(m_notebook));
    }
    if (m_spark.isSet()) {
        obj.insert(QString("spark"), ::OpenAPI::toJsonValue(m_spark));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_trigger_spec.isSet()) {
        obj.insert(QString("triggerSpec"), ::OpenAPI::toJsonValue(m_trigger_spec));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIGoogleCloudDataplexV1Task::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudDataplexV1Task::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudDataplexV1Task::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudDataplexV1Task::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudDataplexV1Task::getDescription() const {
    return m_description;
}
void OAIGoogleCloudDataplexV1Task::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudDataplexV1Task::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudDataplexV1Task::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleCloudDataplexV1Task::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudDataplexV1Task::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudDataplexV1Task::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudDataplexV1Task::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGoogleCloudDataplexV1TaskExecutionSpec OAIGoogleCloudDataplexV1Task::getExecutionSpec() const {
    return m_execution_spec;
}
void OAIGoogleCloudDataplexV1Task::setExecutionSpec(const OAIGoogleCloudDataplexV1TaskExecutionSpec &execution_spec) {
    m_execution_spec = execution_spec;
    m_execution_spec_isSet = true;
}

bool OAIGoogleCloudDataplexV1Task::is_execution_spec_Set() const{
    return m_execution_spec_isSet;
}

bool OAIGoogleCloudDataplexV1Task::is_execution_spec_Valid() const{
    return m_execution_spec_isValid;
}

OAIGoogleCloudDataplexV1TaskExecutionStatus OAIGoogleCloudDataplexV1Task::getExecutionStatus() const {
    return m_execution_status;
}
void OAIGoogleCloudDataplexV1Task::setExecutionStatus(const OAIGoogleCloudDataplexV1TaskExecutionStatus &execution_status) {
    m_execution_status = execution_status;
    m_execution_status_isSet = true;
}

bool OAIGoogleCloudDataplexV1Task::is_execution_status_Set() const{
    return m_execution_status_isSet;
}

bool OAIGoogleCloudDataplexV1Task::is_execution_status_Valid() const{
    return m_execution_status_isValid;
}

QMap<QString, QString> OAIGoogleCloudDataplexV1Task::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudDataplexV1Task::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudDataplexV1Task::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudDataplexV1Task::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGoogleCloudDataplexV1Task::getName() const {
    return m_name;
}
void OAIGoogleCloudDataplexV1Task::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudDataplexV1Task::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudDataplexV1Task::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleCloudDataplexV1TaskNotebookTaskConfig OAIGoogleCloudDataplexV1Task::getNotebook() const {
    return m_notebook;
}
void OAIGoogleCloudDataplexV1Task::setNotebook(const OAIGoogleCloudDataplexV1TaskNotebookTaskConfig &notebook) {
    m_notebook = notebook;
    m_notebook_isSet = true;
}

bool OAIGoogleCloudDataplexV1Task::is_notebook_Set() const{
    return m_notebook_isSet;
}

bool OAIGoogleCloudDataplexV1Task::is_notebook_Valid() const{
    return m_notebook_isValid;
}

OAIGoogleCloudDataplexV1TaskSparkTaskConfig OAIGoogleCloudDataplexV1Task::getSpark() const {
    return m_spark;
}
void OAIGoogleCloudDataplexV1Task::setSpark(const OAIGoogleCloudDataplexV1TaskSparkTaskConfig &spark) {
    m_spark = spark;
    m_spark_isSet = true;
}

bool OAIGoogleCloudDataplexV1Task::is_spark_Set() const{
    return m_spark_isSet;
}

bool OAIGoogleCloudDataplexV1Task::is_spark_Valid() const{
    return m_spark_isValid;
}

QString OAIGoogleCloudDataplexV1Task::getState() const {
    return m_state;
}
void OAIGoogleCloudDataplexV1Task::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudDataplexV1Task::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudDataplexV1Task::is_state_Valid() const{
    return m_state_isValid;
}

OAIGoogleCloudDataplexV1TaskTriggerSpec OAIGoogleCloudDataplexV1Task::getTriggerSpec() const {
    return m_trigger_spec;
}
void OAIGoogleCloudDataplexV1Task::setTriggerSpec(const OAIGoogleCloudDataplexV1TaskTriggerSpec &trigger_spec) {
    m_trigger_spec = trigger_spec;
    m_trigger_spec_isSet = true;
}

bool OAIGoogleCloudDataplexV1Task::is_trigger_spec_Set() const{
    return m_trigger_spec_isSet;
}

bool OAIGoogleCloudDataplexV1Task::is_trigger_spec_Valid() const{
    return m_trigger_spec_isValid;
}

QString OAIGoogleCloudDataplexV1Task::getUid() const {
    return m_uid;
}
void OAIGoogleCloudDataplexV1Task::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIGoogleCloudDataplexV1Task::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIGoogleCloudDataplexV1Task::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIGoogleCloudDataplexV1Task::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudDataplexV1Task::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudDataplexV1Task::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudDataplexV1Task::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudDataplexV1Task::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notebook.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1Task::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
