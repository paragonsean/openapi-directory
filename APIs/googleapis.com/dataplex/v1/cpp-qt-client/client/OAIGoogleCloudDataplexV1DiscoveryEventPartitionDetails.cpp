/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::~OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails() {}

void OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::initializeModel() {

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_sampled_data_locations_isSet = false;
    m_sampled_data_locations_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::fromJsonObject(QJsonObject json) {

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_partition_isValid = ::OpenAPI::fromJsonValue(m_partition, json[QString("partition")]);
    m_partition_isSet = !json[QString("partition")].isNull() && m_partition_isValid;

    m_sampled_data_locations_isValid = ::OpenAPI::fromJsonValue(m_sampled_data_locations, json[QString("sampledDataLocations")]);
    m_sampled_data_locations_isSet = !json[QString("sampledDataLocations")].isNull() && m_sampled_data_locations_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_partition_isSet) {
        obj.insert(QString("partition"), ::OpenAPI::toJsonValue(m_partition));
    }
    if (m_sampled_data_locations.size() > 0) {
        obj.insert(QString("sampledDataLocations"), ::OpenAPI::toJsonValue(m_sampled_data_locations));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::getEntity() const {
    return m_entity;
}
void OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::setEntity(const QString &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::is_entity_Valid() const{
    return m_entity_isValid;
}

QString OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::getPartition() const {
    return m_partition;
}
void OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::setPartition(const QString &partition) {
    m_partition = partition;
    m_partition_isSet = true;
}

bool OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::is_partition_Valid() const{
    return m_partition_isValid;
}

QList<QString> OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::getSampledDataLocations() const {
    return m_sampled_data_locations;
}
void OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::setSampledDataLocations(const QList<QString> &sampled_data_locations) {
    m_sampled_data_locations = sampled_data_locations;
    m_sampled_data_locations_isSet = true;
}

bool OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::is_sampled_data_locations_Set() const{
    return m_sampled_data_locations_isSet;
}

bool OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::is_sampled_data_locations_Valid() const{
    return m_sampled_data_locations_isValid;
}

QString OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::getType() const {
    return m_type;
}
void OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampled_data_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
