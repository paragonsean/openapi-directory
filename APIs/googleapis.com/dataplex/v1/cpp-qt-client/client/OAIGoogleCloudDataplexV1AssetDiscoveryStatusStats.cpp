/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::~OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats() {}

void OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::initializeModel() {

    m_data_items_isSet = false;
    m_data_items_isValid = false;

    m_data_size_isSet = false;
    m_data_size_isValid = false;

    m_filesets_isSet = false;
    m_filesets_isValid = false;

    m_tables_isSet = false;
    m_tables_isValid = false;
}

void OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::fromJsonObject(QJsonObject json) {

    m_data_items_isValid = ::OpenAPI::fromJsonValue(m_data_items, json[QString("dataItems")]);
    m_data_items_isSet = !json[QString("dataItems")].isNull() && m_data_items_isValid;

    m_data_size_isValid = ::OpenAPI::fromJsonValue(m_data_size, json[QString("dataSize")]);
    m_data_size_isSet = !json[QString("dataSize")].isNull() && m_data_size_isValid;

    m_filesets_isValid = ::OpenAPI::fromJsonValue(m_filesets, json[QString("filesets")]);
    m_filesets_isSet = !json[QString("filesets")].isNull() && m_filesets_isValid;

    m_tables_isValid = ::OpenAPI::fromJsonValue(m_tables, json[QString("tables")]);
    m_tables_isSet = !json[QString("tables")].isNull() && m_tables_isValid;
}

QString OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::asJsonObject() const {
    QJsonObject obj;
    if (m_data_items_isSet) {
        obj.insert(QString("dataItems"), ::OpenAPI::toJsonValue(m_data_items));
    }
    if (m_data_size_isSet) {
        obj.insert(QString("dataSize"), ::OpenAPI::toJsonValue(m_data_size));
    }
    if (m_filesets_isSet) {
        obj.insert(QString("filesets"), ::OpenAPI::toJsonValue(m_filesets));
    }
    if (m_tables_isSet) {
        obj.insert(QString("tables"), ::OpenAPI::toJsonValue(m_tables));
    }
    return obj;
}

QString OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::getDataItems() const {
    return m_data_items;
}
void OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::setDataItems(const QString &data_items) {
    m_data_items = data_items;
    m_data_items_isSet = true;
}

bool OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::is_data_items_Set() const{
    return m_data_items_isSet;
}

bool OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::is_data_items_Valid() const{
    return m_data_items_isValid;
}

QString OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::getDataSize() const {
    return m_data_size;
}
void OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::setDataSize(const QString &data_size) {
    m_data_size = data_size;
    m_data_size_isSet = true;
}

bool OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::is_data_size_Set() const{
    return m_data_size_isSet;
}

bool OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::is_data_size_Valid() const{
    return m_data_size_isValid;
}

QString OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::getFilesets() const {
    return m_filesets;
}
void OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::setFilesets(const QString &filesets) {
    m_filesets = filesets;
    m_filesets_isSet = true;
}

bool OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::is_filesets_Set() const{
    return m_filesets_isSet;
}

bool OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::is_filesets_Valid() const{
    return m_filesets_isValid;
}

QString OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::getTables() const {
    return m_tables;
}
void OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::setTables(const QString &tables) {
    m_tables = tables;
    m_tables_isSet = true;
}

bool OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::is_tables_Set() const{
    return m_tables_isSet;
}

bool OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::is_tables_Valid() const{
    return m_tables_isValid;
}

bool OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filesets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1AssetDiscoveryStatusStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
