/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1DiscoveryEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1DiscoveryEvent::OAIGoogleCloudDataplexV1DiscoveryEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1DiscoveryEvent::OAIGoogleCloudDataplexV1DiscoveryEvent() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1DiscoveryEvent::~OAIGoogleCloudDataplexV1DiscoveryEvent() {}

void OAIGoogleCloudDataplexV1DiscoveryEvent::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_data_location_isSet = false;
    m_data_location_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_lake_id_isSet = false;
    m_lake_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_zone_id_isSet = false;
    m_zone_id_isValid = false;
}

void OAIGoogleCloudDataplexV1DiscoveryEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1DiscoveryEvent::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("assetId")]);
    m_asset_id_isSet = !json[QString("assetId")].isNull() && m_asset_id_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_data_location_isValid = ::OpenAPI::fromJsonValue(m_data_location, json[QString("dataLocation")]);
    m_data_location_isSet = !json[QString("dataLocation")].isNull() && m_data_location_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_lake_id_isValid = ::OpenAPI::fromJsonValue(m_lake_id, json[QString("lakeId")]);
    m_lake_id_isSet = !json[QString("lakeId")].isNull() && m_lake_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_partition_isValid = ::OpenAPI::fromJsonValue(m_partition, json[QString("partition")]);
    m_partition_isSet = !json[QString("partition")].isNull() && m_partition_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_zone_id_isValid = ::OpenAPI::fromJsonValue(m_zone_id, json[QString("zoneId")]);
    m_zone_id_isSet = !json[QString("zoneId")].isNull() && m_zone_id_isValid;
}

QString OAIGoogleCloudDataplexV1DiscoveryEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1DiscoveryEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_asset_id_isSet) {
        obj.insert(QString("assetId"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_data_location_isSet) {
        obj.insert(QString("dataLocation"), ::OpenAPI::toJsonValue(m_data_location));
    }
    if (m_entity.isSet()) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_lake_id_isSet) {
        obj.insert(QString("lakeId"), ::OpenAPI::toJsonValue(m_lake_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_partition.isSet()) {
        obj.insert(QString("partition"), ::OpenAPI::toJsonValue(m_partition));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_zone_id_isSet) {
        obj.insert(QString("zoneId"), ::OpenAPI::toJsonValue(m_zone_id));
    }
    return obj;
}

OAIGoogleCloudDataplexV1DiscoveryEventActionDetails OAIGoogleCloudDataplexV1DiscoveryEvent::getAction() const {
    return m_action;
}
void OAIGoogleCloudDataplexV1DiscoveryEvent::setAction(const OAIGoogleCloudDataplexV1DiscoveryEventActionDetails &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_action_Set() const{
    return m_action_isSet;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIGoogleCloudDataplexV1DiscoveryEvent::getAssetId() const {
    return m_asset_id;
}
void OAIGoogleCloudDataplexV1DiscoveryEvent::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

OAIGoogleCloudDataplexV1DiscoveryEventConfigDetails OAIGoogleCloudDataplexV1DiscoveryEvent::getConfig() const {
    return m_config;
}
void OAIGoogleCloudDataplexV1DiscoveryEvent::setConfig(const OAIGoogleCloudDataplexV1DiscoveryEventConfigDetails &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_config_Set() const{
    return m_config_isSet;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIGoogleCloudDataplexV1DiscoveryEvent::getDataLocation() const {
    return m_data_location;
}
void OAIGoogleCloudDataplexV1DiscoveryEvent::setDataLocation(const QString &data_location) {
    m_data_location = data_location;
    m_data_location_isSet = true;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_data_location_Set() const{
    return m_data_location_isSet;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_data_location_Valid() const{
    return m_data_location_isValid;
}

OAIGoogleCloudDataplexV1DiscoveryEventEntityDetails OAIGoogleCloudDataplexV1DiscoveryEvent::getEntity() const {
    return m_entity;
}
void OAIGoogleCloudDataplexV1DiscoveryEvent::setEntity(const OAIGoogleCloudDataplexV1DiscoveryEventEntityDetails &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_entity_Valid() const{
    return m_entity_isValid;
}

QString OAIGoogleCloudDataplexV1DiscoveryEvent::getLakeId() const {
    return m_lake_id;
}
void OAIGoogleCloudDataplexV1DiscoveryEvent::setLakeId(const QString &lake_id) {
    m_lake_id = lake_id;
    m_lake_id_isSet = true;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_lake_id_Set() const{
    return m_lake_id_isSet;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_lake_id_Valid() const{
    return m_lake_id_isValid;
}

QString OAIGoogleCloudDataplexV1DiscoveryEvent::getMessage() const {
    return m_message;
}
void OAIGoogleCloudDataplexV1DiscoveryEvent::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_message_Valid() const{
    return m_message_isValid;
}

OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails OAIGoogleCloudDataplexV1DiscoveryEvent::getPartition() const {
    return m_partition;
}
void OAIGoogleCloudDataplexV1DiscoveryEvent::setPartition(const OAIGoogleCloudDataplexV1DiscoveryEventPartitionDetails &partition) {
    m_partition = partition;
    m_partition_isSet = true;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_partition_Valid() const{
    return m_partition_isValid;
}

QString OAIGoogleCloudDataplexV1DiscoveryEvent::getType() const {
    return m_type;
}
void OAIGoogleCloudDataplexV1DiscoveryEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGoogleCloudDataplexV1DiscoveryEvent::getZoneId() const {
    return m_zone_id;
}
void OAIGoogleCloudDataplexV1DiscoveryEvent::setZoneId(const QString &zone_id) {
    m_zone_id = zone_id;
    m_zone_id_isSet = true;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_zone_id_Set() const{
    return m_zone_id_isSet;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::is_zone_id_Valid() const{
    return m_zone_id_isValid;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lake_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1DiscoveryEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
