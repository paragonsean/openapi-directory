/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1AssetDiscoverySpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1AssetDiscoverySpec::OAIGoogleCloudDataplexV1AssetDiscoverySpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1AssetDiscoverySpec::OAIGoogleCloudDataplexV1AssetDiscoverySpec() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1AssetDiscoverySpec::~OAIGoogleCloudDataplexV1AssetDiscoverySpec() {}

void OAIGoogleCloudDataplexV1AssetDiscoverySpec::initializeModel() {

    m_csv_options_isSet = false;
    m_csv_options_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_exclude_patterns_isSet = false;
    m_exclude_patterns_isValid = false;

    m_include_patterns_isSet = false;
    m_include_patterns_isValid = false;

    m_json_options_isSet = false;
    m_json_options_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;
}

void OAIGoogleCloudDataplexV1AssetDiscoverySpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1AssetDiscoverySpec::fromJsonObject(QJsonObject json) {

    m_csv_options_isValid = ::OpenAPI::fromJsonValue(m_csv_options, json[QString("csvOptions")]);
    m_csv_options_isSet = !json[QString("csvOptions")].isNull() && m_csv_options_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_exclude_patterns_isValid = ::OpenAPI::fromJsonValue(m_exclude_patterns, json[QString("excludePatterns")]);
    m_exclude_patterns_isSet = !json[QString("excludePatterns")].isNull() && m_exclude_patterns_isValid;

    m_include_patterns_isValid = ::OpenAPI::fromJsonValue(m_include_patterns, json[QString("includePatterns")]);
    m_include_patterns_isSet = !json[QString("includePatterns")].isNull() && m_include_patterns_isValid;

    m_json_options_isValid = ::OpenAPI::fromJsonValue(m_json_options, json[QString("jsonOptions")]);
    m_json_options_isSet = !json[QString("jsonOptions")].isNull() && m_json_options_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;
}

QString OAIGoogleCloudDataplexV1AssetDiscoverySpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1AssetDiscoverySpec::asJsonObject() const {
    QJsonObject obj;
    if (m_csv_options.isSet()) {
        obj.insert(QString("csvOptions"), ::OpenAPI::toJsonValue(m_csv_options));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_exclude_patterns.size() > 0) {
        obj.insert(QString("excludePatterns"), ::OpenAPI::toJsonValue(m_exclude_patterns));
    }
    if (m_include_patterns.size() > 0) {
        obj.insert(QString("includePatterns"), ::OpenAPI::toJsonValue(m_include_patterns));
    }
    if (m_json_options.isSet()) {
        obj.insert(QString("jsonOptions"), ::OpenAPI::toJsonValue(m_json_options));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    return obj;
}

OAIGoogleCloudDataplexV1AssetDiscoverySpecCsvOptions OAIGoogleCloudDataplexV1AssetDiscoverySpec::getCsvOptions() const {
    return m_csv_options;
}
void OAIGoogleCloudDataplexV1AssetDiscoverySpec::setCsvOptions(const OAIGoogleCloudDataplexV1AssetDiscoverySpecCsvOptions &csv_options) {
    m_csv_options = csv_options;
    m_csv_options_isSet = true;
}

bool OAIGoogleCloudDataplexV1AssetDiscoverySpec::is_csv_options_Set() const{
    return m_csv_options_isSet;
}

bool OAIGoogleCloudDataplexV1AssetDiscoverySpec::is_csv_options_Valid() const{
    return m_csv_options_isValid;
}

bool OAIGoogleCloudDataplexV1AssetDiscoverySpec::isEnabled() const {
    return m_enabled;
}
void OAIGoogleCloudDataplexV1AssetDiscoverySpec::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIGoogleCloudDataplexV1AssetDiscoverySpec::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIGoogleCloudDataplexV1AssetDiscoverySpec::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<QString> OAIGoogleCloudDataplexV1AssetDiscoverySpec::getExcludePatterns() const {
    return m_exclude_patterns;
}
void OAIGoogleCloudDataplexV1AssetDiscoverySpec::setExcludePatterns(const QList<QString> &exclude_patterns) {
    m_exclude_patterns = exclude_patterns;
    m_exclude_patterns_isSet = true;
}

bool OAIGoogleCloudDataplexV1AssetDiscoverySpec::is_exclude_patterns_Set() const{
    return m_exclude_patterns_isSet;
}

bool OAIGoogleCloudDataplexV1AssetDiscoverySpec::is_exclude_patterns_Valid() const{
    return m_exclude_patterns_isValid;
}

QList<QString> OAIGoogleCloudDataplexV1AssetDiscoverySpec::getIncludePatterns() const {
    return m_include_patterns;
}
void OAIGoogleCloudDataplexV1AssetDiscoverySpec::setIncludePatterns(const QList<QString> &include_patterns) {
    m_include_patterns = include_patterns;
    m_include_patterns_isSet = true;
}

bool OAIGoogleCloudDataplexV1AssetDiscoverySpec::is_include_patterns_Set() const{
    return m_include_patterns_isSet;
}

bool OAIGoogleCloudDataplexV1AssetDiscoverySpec::is_include_patterns_Valid() const{
    return m_include_patterns_isValid;
}

OAIGoogleCloudDataplexV1AssetDiscoverySpecJsonOptions OAIGoogleCloudDataplexV1AssetDiscoverySpec::getJsonOptions() const {
    return m_json_options;
}
void OAIGoogleCloudDataplexV1AssetDiscoverySpec::setJsonOptions(const OAIGoogleCloudDataplexV1AssetDiscoverySpecJsonOptions &json_options) {
    m_json_options = json_options;
    m_json_options_isSet = true;
}

bool OAIGoogleCloudDataplexV1AssetDiscoverySpec::is_json_options_Set() const{
    return m_json_options_isSet;
}

bool OAIGoogleCloudDataplexV1AssetDiscoverySpec::is_json_options_Valid() const{
    return m_json_options_isValid;
}

QString OAIGoogleCloudDataplexV1AssetDiscoverySpec::getSchedule() const {
    return m_schedule;
}
void OAIGoogleCloudDataplexV1AssetDiscoverySpec::setSchedule(const QString &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIGoogleCloudDataplexV1AssetDiscoverySpec::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIGoogleCloudDataplexV1AssetDiscoverySpec::is_schedule_Valid() const{
    return m_schedule_isValid;
}

bool OAIGoogleCloudDataplexV1AssetDiscoverySpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_csv_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_patterns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_patterns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1AssetDiscoverySpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
