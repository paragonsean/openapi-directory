/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::~OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec() {}

void OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::initializeModel() {

    m_compute_isSet = false;
    m_compute_isValid = false;

    m_os_image_isSet = false;
    m_os_image_isValid = false;
}

void OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::fromJsonObject(QJsonObject json) {

    m_compute_isValid = ::OpenAPI::fromJsonValue(m_compute, json[QString("compute")]);
    m_compute_isSet = !json[QString("compute")].isNull() && m_compute_isValid;

    m_os_image_isValid = ::OpenAPI::fromJsonValue(m_os_image, json[QString("osImage")]);
    m_os_image_isSet = !json[QString("osImage")].isNull() && m_os_image_isValid;
}

QString OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_compute.isSet()) {
        obj.insert(QString("compute"), ::OpenAPI::toJsonValue(m_compute));
    }
    if (m_os_image.isSet()) {
        obj.insert(QString("osImage"), ::OpenAPI::toJsonValue(m_os_image));
    }
    return obj;
}

OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::getCompute() const {
    return m_compute;
}
void OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::setCompute(const OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources &compute) {
    m_compute = compute;
    m_compute_isSet = true;
}

bool OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::is_compute_Set() const{
    return m_compute_isSet;
}

bool OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::is_compute_Valid() const{
    return m_compute_isValid;
}

OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecOsImageRuntime OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::getOsImage() const {
    return m_os_image;
}
void OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::setOsImage(const OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecOsImageRuntime &os_image) {
    m_os_image = os_image;
    m_os_image_isSet = true;
}

bool OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::is_os_image_Set() const{
    return m_os_image_isSet;
}

bool OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::is_os_image_Valid() const{
    return m_os_image_isValid;
}

bool OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_image.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
