/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::~OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility() {}

void OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::initializeModel() {

    m_compatible_isSet = false;
    m_compatible_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::fromJsonObject(QJsonObject json) {

    m_compatible_isValid = ::OpenAPI::fromJsonValue(m_compatible, json[QString("compatible")]);
    m_compatible_isSet = !json[QString("compatible")].isNull() && m_compatible_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::asJsonObject() const {
    QJsonObject obj;
    if (m_compatible_isSet) {
        obj.insert(QString("compatible"), ::OpenAPI::toJsonValue(m_compatible));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

bool OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::isCompatible() const {
    return m_compatible;
}
void OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::setCompatible(const bool &compatible) {
    m_compatible = compatible;
    m_compatible_isSet = true;
}

bool OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::is_compatible_Set() const{
    return m_compatible_isSet;
}

bool OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::is_compatible_Valid() const{
    return m_compatible_isValid;
}

QString OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::getReason() const {
    return m_reason;
}
void OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compatible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1EntityCompatibilityStatusCompatibility::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
