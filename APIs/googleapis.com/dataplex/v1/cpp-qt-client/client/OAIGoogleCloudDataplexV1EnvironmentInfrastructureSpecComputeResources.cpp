/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::~OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources() {}

void OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::initializeModel() {

    m_disk_size_gb_isSet = false;
    m_disk_size_gb_isValid = false;

    m_max_node_count_isSet = false;
    m_max_node_count_isValid = false;

    m_node_count_isSet = false;
    m_node_count_isValid = false;
}

void OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::fromJsonObject(QJsonObject json) {

    m_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gb, json[QString("diskSizeGb")]);
    m_disk_size_gb_isSet = !json[QString("diskSizeGb")].isNull() && m_disk_size_gb_isValid;

    m_max_node_count_isValid = ::OpenAPI::fromJsonValue(m_max_node_count, json[QString("maxNodeCount")]);
    m_max_node_count_isSet = !json[QString("maxNodeCount")].isNull() && m_max_node_count_isValid;

    m_node_count_isValid = ::OpenAPI::fromJsonValue(m_node_count, json[QString("nodeCount")]);
    m_node_count_isSet = !json[QString("nodeCount")].isNull() && m_node_count_isValid;
}

QString OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_size_gb_isSet) {
        obj.insert(QString("diskSizeGb"), ::OpenAPI::toJsonValue(m_disk_size_gb));
    }
    if (m_max_node_count_isSet) {
        obj.insert(QString("maxNodeCount"), ::OpenAPI::toJsonValue(m_max_node_count));
    }
    if (m_node_count_isSet) {
        obj.insert(QString("nodeCount"), ::OpenAPI::toJsonValue(m_node_count));
    }
    return obj;
}

qint32 OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::getDiskSizeGb() const {
    return m_disk_size_gb;
}
void OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::setDiskSizeGb(const qint32 &disk_size_gb) {
    m_disk_size_gb = disk_size_gb;
    m_disk_size_gb_isSet = true;
}

bool OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::is_disk_size_gb_Set() const{
    return m_disk_size_gb_isSet;
}

bool OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::is_disk_size_gb_Valid() const{
    return m_disk_size_gb_isValid;
}

qint32 OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::getMaxNodeCount() const {
    return m_max_node_count;
}
void OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::setMaxNodeCount(const qint32 &max_node_count) {
    m_max_node_count = max_node_count;
    m_max_node_count_isSet = true;
}

bool OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::is_max_node_count_Set() const{
    return m_max_node_count_isSet;
}

bool OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::is_max_node_count_Valid() const{
    return m_max_node_count_isValid;
}

qint32 OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::getNodeCount() const {
    return m_node_count;
}
void OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::setNodeCount(const qint32 &node_count) {
    m_node_count = node_count;
    m_node_count_isSet = true;
}

bool OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::is_node_count_Set() const{
    return m_node_count_isSet;
}

bool OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::is_node_count_Valid() const{
    return m_node_count_isValid;
}

bool OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
