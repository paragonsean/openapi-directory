/**
 * Cloud Dataplex API
 * Dataplex API is used to manage the lifecycle of data lakes.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDataplexV1StorageFormatCsvOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDataplexV1StorageFormatCsvOptions::OAIGoogleCloudDataplexV1StorageFormatCsvOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDataplexV1StorageFormatCsvOptions::OAIGoogleCloudDataplexV1StorageFormatCsvOptions() {
    this->initializeModel();
}

OAIGoogleCloudDataplexV1StorageFormatCsvOptions::~OAIGoogleCloudDataplexV1StorageFormatCsvOptions() {}

void OAIGoogleCloudDataplexV1StorageFormatCsvOptions::initializeModel() {

    m_delimiter_isSet = false;
    m_delimiter_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_header_rows_isSet = false;
    m_header_rows_isValid = false;

    m_quote_isSet = false;
    m_quote_isValid = false;
}

void OAIGoogleCloudDataplexV1StorageFormatCsvOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDataplexV1StorageFormatCsvOptions::fromJsonObject(QJsonObject json) {

    m_delimiter_isValid = ::OpenAPI::fromJsonValue(m_delimiter, json[QString("delimiter")]);
    m_delimiter_isSet = !json[QString("delimiter")].isNull() && m_delimiter_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_header_rows_isValid = ::OpenAPI::fromJsonValue(m_header_rows, json[QString("headerRows")]);
    m_header_rows_isSet = !json[QString("headerRows")].isNull() && m_header_rows_isValid;

    m_quote_isValid = ::OpenAPI::fromJsonValue(m_quote, json[QString("quote")]);
    m_quote_isSet = !json[QString("quote")].isNull() && m_quote_isValid;
}

QString OAIGoogleCloudDataplexV1StorageFormatCsvOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDataplexV1StorageFormatCsvOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_delimiter_isSet) {
        obj.insert(QString("delimiter"), ::OpenAPI::toJsonValue(m_delimiter));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_header_rows_isSet) {
        obj.insert(QString("headerRows"), ::OpenAPI::toJsonValue(m_header_rows));
    }
    if (m_quote_isSet) {
        obj.insert(QString("quote"), ::OpenAPI::toJsonValue(m_quote));
    }
    return obj;
}

QString OAIGoogleCloudDataplexV1StorageFormatCsvOptions::getDelimiter() const {
    return m_delimiter;
}
void OAIGoogleCloudDataplexV1StorageFormatCsvOptions::setDelimiter(const QString &delimiter) {
    m_delimiter = delimiter;
    m_delimiter_isSet = true;
}

bool OAIGoogleCloudDataplexV1StorageFormatCsvOptions::is_delimiter_Set() const{
    return m_delimiter_isSet;
}

bool OAIGoogleCloudDataplexV1StorageFormatCsvOptions::is_delimiter_Valid() const{
    return m_delimiter_isValid;
}

QString OAIGoogleCloudDataplexV1StorageFormatCsvOptions::getEncoding() const {
    return m_encoding;
}
void OAIGoogleCloudDataplexV1StorageFormatCsvOptions::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIGoogleCloudDataplexV1StorageFormatCsvOptions::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIGoogleCloudDataplexV1StorageFormatCsvOptions::is_encoding_Valid() const{
    return m_encoding_isValid;
}

qint32 OAIGoogleCloudDataplexV1StorageFormatCsvOptions::getHeaderRows() const {
    return m_header_rows;
}
void OAIGoogleCloudDataplexV1StorageFormatCsvOptions::setHeaderRows(const qint32 &header_rows) {
    m_header_rows = header_rows;
    m_header_rows_isSet = true;
}

bool OAIGoogleCloudDataplexV1StorageFormatCsvOptions::is_header_rows_Set() const{
    return m_header_rows_isSet;
}

bool OAIGoogleCloudDataplexV1StorageFormatCsvOptions::is_header_rows_Valid() const{
    return m_header_rows_isValid;
}

QString OAIGoogleCloudDataplexV1StorageFormatCsvOptions::getQuote() const {
    return m_quote;
}
void OAIGoogleCloudDataplexV1StorageFormatCsvOptions::setQuote(const QString &quote) {
    m_quote = quote;
    m_quote_isSet = true;
}

bool OAIGoogleCloudDataplexV1StorageFormatCsvOptions::is_quote_Set() const{
    return m_quote_isSet;
}

bool OAIGoogleCloudDataplexV1StorageFormatCsvOptions::is_quote_Valid() const{
    return m_quote_isValid;
}

bool OAIGoogleCloudDataplexV1StorageFormatCsvOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDataplexV1StorageFormatCsvOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
