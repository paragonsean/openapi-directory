/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudDataprocApi);
  }
}(this, function(expect, CloudDataprocApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudDataprocApi.GceClusterConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GceClusterConfig', function() {
    it('should create an instance of GceClusterConfig', function() {
      // uncomment below and update the code to test GceClusterConfig
      //var instance = new CloudDataprocApi.GceClusterConfig();
      //expect(instance).to.be.a(CloudDataprocApi.GceClusterConfig);
    });

    it('should have the property confidentialInstanceConfig (base name: "confidentialInstanceConfig")', function() {
      // uncomment below and update the code to test the property confidentialInstanceConfig
      //var instance = new CloudDataprocApi.GceClusterConfig();
      //expect(instance).to.be();
    });

    it('should have the property internalIpOnly (base name: "internalIpOnly")', function() {
      // uncomment below and update the code to test the property internalIpOnly
      //var instance = new CloudDataprocApi.GceClusterConfig();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new CloudDataprocApi.GceClusterConfig();
      //expect(instance).to.be();
    });

    it('should have the property networkUri (base name: "networkUri")', function() {
      // uncomment below and update the code to test the property networkUri
      //var instance = new CloudDataprocApi.GceClusterConfig();
      //expect(instance).to.be();
    });

    it('should have the property nodeGroupAffinity (base name: "nodeGroupAffinity")', function() {
      // uncomment below and update the code to test the property nodeGroupAffinity
      //var instance = new CloudDataprocApi.GceClusterConfig();
      //expect(instance).to.be();
    });

    it('should have the property privateIpv6GoogleAccess (base name: "privateIpv6GoogleAccess")', function() {
      // uncomment below and update the code to test the property privateIpv6GoogleAccess
      //var instance = new CloudDataprocApi.GceClusterConfig();
      //expect(instance).to.be();
    });

    it('should have the property reservationAffinity (base name: "reservationAffinity")', function() {
      // uncomment below and update the code to test the property reservationAffinity
      //var instance = new CloudDataprocApi.GceClusterConfig();
      //expect(instance).to.be();
    });

    it('should have the property serviceAccount (base name: "serviceAccount")', function() {
      // uncomment below and update the code to test the property serviceAccount
      //var instance = new CloudDataprocApi.GceClusterConfig();
      //expect(instance).to.be();
    });

    it('should have the property serviceAccountScopes (base name: "serviceAccountScopes")', function() {
      // uncomment below and update the code to test the property serviceAccountScopes
      //var instance = new CloudDataprocApi.GceClusterConfig();
      //expect(instance).to.be();
    });

    it('should have the property shieldedInstanceConfig (base name: "shieldedInstanceConfig")', function() {
      // uncomment below and update the code to test the property shieldedInstanceConfig
      //var instance = new CloudDataprocApi.GceClusterConfig();
      //expect(instance).to.be();
    });

    it('should have the property subnetworkUri (base name: "subnetworkUri")', function() {
      // uncomment below and update the code to test the property subnetworkUri
      //var instance = new CloudDataprocApi.GceClusterConfig();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new CloudDataprocApi.GceClusterConfig();
      //expect(instance).to.be();
    });

    it('should have the property zoneUri (base name: "zoneUri")', function() {
      // uncomment below and update the code to test the property zoneUri
      //var instance = new CloudDataprocApi.GceClusterConfig();
      //expect(instance).to.be();
    });

  });

}));
