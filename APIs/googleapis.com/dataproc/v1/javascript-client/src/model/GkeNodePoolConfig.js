/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GkeNodeConfig from './GkeNodeConfig';
import GkeNodePoolAutoscalingConfig from './GkeNodePoolAutoscalingConfig';

/**
 * The GkeNodePoolConfig model module.
 * @module model/GkeNodePoolConfig
 * @version v1
 */
class GkeNodePoolConfig {
    /**
     * Constructs a new <code>GkeNodePoolConfig</code>.
     * The configuration of a GKE node pool used by a Dataproc-on-GKE cluster (https://cloud.google.com/dataproc/docs/concepts/jobs/dataproc-gke#create-a-dataproc-on-gke-cluster).
     * @alias module:model/GkeNodePoolConfig
     */
    constructor() { 
        
        GkeNodePoolConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GkeNodePoolConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GkeNodePoolConfig} obj Optional instance to populate.
     * @return {module:model/GkeNodePoolConfig} The populated <code>GkeNodePoolConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GkeNodePoolConfig();

            if (data.hasOwnProperty('autoscaling')) {
                obj['autoscaling'] = GkeNodePoolAutoscalingConfig.constructFromObject(data['autoscaling']);
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = GkeNodeConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GkeNodePoolConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GkeNodePoolConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `autoscaling`
        if (data['autoscaling']) { // data not null
          GkeNodePoolAutoscalingConfig.validateJSON(data['autoscaling']);
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          GkeNodeConfig.validateJSON(data['config']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['locations'])) {
            throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
        }

        return true;
    }


}



/**
 * @member {module:model/GkeNodePoolAutoscalingConfig} autoscaling
 */
GkeNodePoolConfig.prototype['autoscaling'] = undefined;

/**
 * @member {module:model/GkeNodeConfig} config
 */
GkeNodePoolConfig.prototype['config'] = undefined;

/**
 * Optional. The list of Compute Engine zones (https://cloud.google.com/compute/docs/zones#available) where node pool nodes associated with a Dataproc on GKE virtual cluster will be located.Note: All node pools associated with a virtual cluster must be located in the same region as the virtual cluster, and they must be located in the same zone within that region.If a location is not specified during node pool creation, Dataproc on GKE will choose the zone.
 * @member {Array.<String>} locations
 */
GkeNodePoolConfig.prototype['locations'] = undefined;






export default GkeNodePoolConfig;

