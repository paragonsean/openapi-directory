/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RepositoryConfig from './RepositoryConfig';

/**
 * The RuntimeConfig model module.
 * @module model/RuntimeConfig
 * @version v1
 */
class RuntimeConfig {
    /**
     * Constructs a new <code>RuntimeConfig</code>.
     * Runtime configuration for a workload.
     * @alias module:model/RuntimeConfig
     */
    constructor() { 
        
        RuntimeConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RuntimeConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuntimeConfig} obj Optional instance to populate.
     * @return {module:model/RuntimeConfig} The populated <code>RuntimeConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuntimeConfig();

            if (data.hasOwnProperty('containerImage')) {
                obj['containerImage'] = ApiClient.convertToType(data['containerImage'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('repositoryConfig')) {
                obj['repositoryConfig'] = RepositoryConfig.constructFromObject(data['repositoryConfig']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RuntimeConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RuntimeConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['containerImage'] && !(typeof data['containerImage'] === 'string' || data['containerImage'] instanceof String)) {
            throw new Error("Expected the field `containerImage` to be a primitive type in the JSON string but got " + data['containerImage']);
        }
        // validate the optional field `repositoryConfig`
        if (data['repositoryConfig']) { // data not null
          RepositoryConfig.validateJSON(data['repositoryConfig']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * Optional. Optional custom container image for the job runtime environment. If not specified, a default container image will be used.
 * @member {String} containerImage
 */
RuntimeConfig.prototype['containerImage'] = undefined;

/**
 * Optional. A mapping of property names to values, which are used to configure workload execution.
 * @member {Object.<String, String>} properties
 */
RuntimeConfig.prototype['properties'] = undefined;

/**
 * @member {module:model/RepositoryConfig} repositoryConfig
 */
RuntimeConfig.prototype['repositoryConfig'] = undefined;

/**
 * Optional. Version of the batch runtime.
 * @member {String} version
 */
RuntimeConfig.prototype['version'] = undefined;






export default RuntimeConfig;

