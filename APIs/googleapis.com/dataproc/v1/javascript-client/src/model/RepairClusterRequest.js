/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodePool from './NodePool';

/**
 * The RepairClusterRequest model module.
 * @module model/RepairClusterRequest
 * @version v1
 */
class RepairClusterRequest {
    /**
     * Constructs a new <code>RepairClusterRequest</code>.
     * A request to repair a cluster.
     * @alias module:model/RepairClusterRequest
     */
    constructor() { 
        
        RepairClusterRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RepairClusterRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepairClusterRequest} obj Optional instance to populate.
     * @return {module:model/RepairClusterRequest} The populated <code>RepairClusterRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepairClusterRequest();

            if (data.hasOwnProperty('clusterUuid')) {
                obj['clusterUuid'] = ApiClient.convertToType(data['clusterUuid'], 'String');
            }
            if (data.hasOwnProperty('gracefulDecommissionTimeout')) {
                obj['gracefulDecommissionTimeout'] = ApiClient.convertToType(data['gracefulDecommissionTimeout'], 'String');
            }
            if (data.hasOwnProperty('nodePools')) {
                obj['nodePools'] = ApiClient.convertToType(data['nodePools'], [NodePool]);
            }
            if (data.hasOwnProperty('parentOperationId')) {
                obj['parentOperationId'] = ApiClient.convertToType(data['parentOperationId'], 'String');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepairClusterRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepairClusterRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clusterUuid'] && !(typeof data['clusterUuid'] === 'string' || data['clusterUuid'] instanceof String)) {
            throw new Error("Expected the field `clusterUuid` to be a primitive type in the JSON string but got " + data['clusterUuid']);
        }
        // ensure the json data is a string
        if (data['gracefulDecommissionTimeout'] && !(typeof data['gracefulDecommissionTimeout'] === 'string' || data['gracefulDecommissionTimeout'] instanceof String)) {
            throw new Error("Expected the field `gracefulDecommissionTimeout` to be a primitive type in the JSON string but got " + data['gracefulDecommissionTimeout']);
        }
        if (data['nodePools']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nodePools'])) {
                throw new Error("Expected the field `nodePools` to be an array in the JSON data but got " + data['nodePools']);
            }
            // validate the optional field `nodePools` (array)
            for (const item of data['nodePools']) {
                NodePool.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['parentOperationId'] && !(typeof data['parentOperationId'] === 'string' || data['parentOperationId'] instanceof String)) {
            throw new Error("Expected the field `parentOperationId` to be a primitive type in the JSON string but got " + data['parentOperationId']);
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }

        return true;
    }


}



/**
 * Optional. Specifying the cluster_uuid means the RPC will fail (with error NOT_FOUND) if a cluster with the specified UUID does not exist.
 * @member {String} clusterUuid
 */
RepairClusterRequest.prototype['clusterUuid'] = undefined;

/**
 * Optional. Timeout for graceful YARN decommissioning. Graceful decommissioning facilitates the removal of cluster nodes without interrupting jobs in progress. The timeout specifies the amount of time to wait for jobs finish before forcefully removing nodes. The default timeout is 0 for forceful decommissioning, and the maximum timeout period is 1 day. (see JSON Mappingâ€”Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).graceful_decommission_timeout is supported in Dataproc image versions 1.2+.
 * @member {String} gracefulDecommissionTimeout
 */
RepairClusterRequest.prototype['gracefulDecommissionTimeout'] = undefined;

/**
 * Optional. Node pools and corresponding repair action to be taken. All node pools should be unique in this request. i.e. Multiple entries for the same node pool id are not allowed.
 * @member {Array.<module:model/NodePool>} nodePools
 */
RepairClusterRequest.prototype['nodePools'] = undefined;

/**
 * Optional. operation id of the parent operation sending the repair request
 * @member {String} parentOperationId
 */
RepairClusterRequest.prototype['parentOperationId'] = undefined;

/**
 * Optional. A unique ID used to identify the request. If the server receives two RepairClusterRequests with the same ID, the second request is ignored, and the first google.longrunning.Operation created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
 * @member {String} requestId
 */
RepairClusterRequest.prototype['requestId'] = undefined;






export default RepairClusterRequest;

