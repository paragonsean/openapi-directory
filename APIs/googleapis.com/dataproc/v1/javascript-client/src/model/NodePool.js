/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodePool model module.
 * @module model/NodePool
 * @version v1
 */
class NodePool {
    /**
     * Constructs a new <code>NodePool</code>.
     * indicating a list of workers of same type
     * @alias module:model/NodePool
     */
    constructor() { 
        
        NodePool.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodePool</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodePool} obj Optional instance to populate.
     * @return {module:model/NodePool} The populated <code>NodePool</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodePool();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('instanceNames')) {
                obj['instanceNames'] = ApiClient.convertToType(data['instanceNames'], ['String']);
            }
            if (data.hasOwnProperty('repairAction')) {
                obj['repairAction'] = ApiClient.convertToType(data['repairAction'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodePool</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodePool</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['instanceNames'])) {
            throw new Error("Expected the field `instanceNames` to be an array in the JSON data but got " + data['instanceNames']);
        }
        // ensure the json data is a string
        if (data['repairAction'] && !(typeof data['repairAction'] === 'string' || data['repairAction'] instanceof String)) {
            throw new Error("Expected the field `repairAction` to be a primitive type in the JSON string but got " + data['repairAction']);
        }

        return true;
    }


}



/**
 * Required. A unique id of the node pool. Primary and Secondary workers can be specified using special reserved ids PRIMARY_WORKER_POOL and SECONDARY_WORKER_POOL respectively. Aux node pools can be referenced using corresponding pool id.
 * @member {String} id
 */
NodePool.prototype['id'] = undefined;

/**
 * Name of instances to be repaired. These instances must belong to specified node pool.
 * @member {Array.<String>} instanceNames
 */
NodePool.prototype['instanceNames'] = undefined;

/**
 * Required. Repair action to take on specified resources of the node pool.
 * @member {module:model/NodePool.RepairActionEnum} repairAction
 */
NodePool.prototype['repairAction'] = undefined;





/**
 * Allowed values for the <code>repairAction</code> property.
 * @enum {String}
 * @readonly
 */
NodePool['RepairActionEnum'] = {

    /**
     * value: "REPAIR_ACTION_UNSPECIFIED"
     * @const
     */
    "REPAIR_ACTION_UNSPECIFIED": "REPAIR_ACTION_UNSPECIFIED",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE"
};



export default NodePool;

