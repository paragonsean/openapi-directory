/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClusterOperation from './ClusterOperation';
import WorkflowGraph from './WorkflowGraph';

/**
 * The WorkflowMetadata model module.
 * @module model/WorkflowMetadata
 * @version v1
 */
class WorkflowMetadata {
    /**
     * Constructs a new <code>WorkflowMetadata</code>.
     * A Dataproc workflow template resource.
     * @alias module:model/WorkflowMetadata
     */
    constructor() { 
        
        WorkflowMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkflowMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowMetadata} obj Optional instance to populate.
     * @return {module:model/WorkflowMetadata} The populated <code>WorkflowMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowMetadata();

            if (data.hasOwnProperty('clusterName')) {
                obj['clusterName'] = ApiClient.convertToType(data['clusterName'], 'String');
            }
            if (data.hasOwnProperty('clusterUuid')) {
                obj['clusterUuid'] = ApiClient.convertToType(data['clusterUuid'], 'String');
            }
            if (data.hasOwnProperty('createCluster')) {
                obj['createCluster'] = ClusterOperation.constructFromObject(data['createCluster']);
            }
            if (data.hasOwnProperty('dagEndTime')) {
                obj['dagEndTime'] = ApiClient.convertToType(data['dagEndTime'], 'String');
            }
            if (data.hasOwnProperty('dagStartTime')) {
                obj['dagStartTime'] = ApiClient.convertToType(data['dagStartTime'], 'String');
            }
            if (data.hasOwnProperty('dagTimeout')) {
                obj['dagTimeout'] = ApiClient.convertToType(data['dagTimeout'], 'String');
            }
            if (data.hasOwnProperty('deleteCluster')) {
                obj['deleteCluster'] = ClusterOperation.constructFromObject(data['deleteCluster']);
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('graph')) {
                obj['graph'] = WorkflowGraph.constructFromObject(data['graph']);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': 'String'});
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clusterName'] && !(typeof data['clusterName'] === 'string' || data['clusterName'] instanceof String)) {
            throw new Error("Expected the field `clusterName` to be a primitive type in the JSON string but got " + data['clusterName']);
        }
        // ensure the json data is a string
        if (data['clusterUuid'] && !(typeof data['clusterUuid'] === 'string' || data['clusterUuid'] instanceof String)) {
            throw new Error("Expected the field `clusterUuid` to be a primitive type in the JSON string but got " + data['clusterUuid']);
        }
        // validate the optional field `createCluster`
        if (data['createCluster']) { // data not null
          ClusterOperation.validateJSON(data['createCluster']);
        }
        // ensure the json data is a string
        if (data['dagEndTime'] && !(typeof data['dagEndTime'] === 'string' || data['dagEndTime'] instanceof String)) {
            throw new Error("Expected the field `dagEndTime` to be a primitive type in the JSON string but got " + data['dagEndTime']);
        }
        // ensure the json data is a string
        if (data['dagStartTime'] && !(typeof data['dagStartTime'] === 'string' || data['dagStartTime'] instanceof String)) {
            throw new Error("Expected the field `dagStartTime` to be a primitive type in the JSON string but got " + data['dagStartTime']);
        }
        // ensure the json data is a string
        if (data['dagTimeout'] && !(typeof data['dagTimeout'] === 'string' || data['dagTimeout'] instanceof String)) {
            throw new Error("Expected the field `dagTimeout` to be a primitive type in the JSON string but got " + data['dagTimeout']);
        }
        // validate the optional field `deleteCluster`
        if (data['deleteCluster']) { // data not null
          ClusterOperation.validateJSON(data['deleteCluster']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // validate the optional field `graph`
        if (data['graph']) { // data not null
          WorkflowGraph.validateJSON(data['graph']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['template'] && !(typeof data['template'] === 'string' || data['template'] instanceof String)) {
            throw new Error("Expected the field `template` to be a primitive type in the JSON string but got " + data['template']);
        }

        return true;
    }


}



/**
 * Output only. The name of the target cluster.
 * @member {String} clusterName
 */
WorkflowMetadata.prototype['clusterName'] = undefined;

/**
 * Output only. The UUID of target cluster.
 * @member {String} clusterUuid
 */
WorkflowMetadata.prototype['clusterUuid'] = undefined;

/**
 * @member {module:model/ClusterOperation} createCluster
 */
WorkflowMetadata.prototype['createCluster'] = undefined;

/**
 * Output only. DAG end time, only set for workflows with dag_timeout when DAG ends.
 * @member {String} dagEndTime
 */
WorkflowMetadata.prototype['dagEndTime'] = undefined;

/**
 * Output only. DAG start time, only set for workflows with dag_timeout when DAG begins.
 * @member {String} dagStartTime
 */
WorkflowMetadata.prototype['dagStartTime'] = undefined;

/**
 * Output only. The timeout duration for the DAG of jobs, expressed in seconds (see JSON representation of duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).
 * @member {String} dagTimeout
 */
WorkflowMetadata.prototype['dagTimeout'] = undefined;

/**
 * @member {module:model/ClusterOperation} deleteCluster
 */
WorkflowMetadata.prototype['deleteCluster'] = undefined;

/**
 * Output only. Workflow end time.
 * @member {String} endTime
 */
WorkflowMetadata.prototype['endTime'] = undefined;

/**
 * @member {module:model/WorkflowGraph} graph
 */
WorkflowMetadata.prototype['graph'] = undefined;

/**
 * Map from parameter names to values that were used for those parameters.
 * @member {Object.<String, String>} parameters
 */
WorkflowMetadata.prototype['parameters'] = undefined;

/**
 * Output only. Workflow start time.
 * @member {String} startTime
 */
WorkflowMetadata.prototype['startTime'] = undefined;

/**
 * Output only. The workflow state.
 * @member {module:model/WorkflowMetadata.StateEnum} state
 */
WorkflowMetadata.prototype['state'] = undefined;

/**
 * Output only. The resource name of the workflow template as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
 * @member {String} template
 */
WorkflowMetadata.prototype['template'] = undefined;

/**
 * Output only. The version of template at the time of workflow instantiation.
 * @member {Number} version
 */
WorkflowMetadata.prototype['version'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowMetadata['StateEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "DONE"
     * @const
     */
    "DONE": "DONE"
};



export default WorkflowMetadata;

