/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClusterConfig from './ClusterConfig';
import ClusterMetrics from './ClusterMetrics';
import ClusterStatus from './ClusterStatus';
import VirtualClusterConfig from './VirtualClusterConfig';

/**
 * The Cluster model module.
 * @module model/Cluster
 * @version v1
 */
class Cluster {
    /**
     * Constructs a new <code>Cluster</code>.
     * Describes the identifying information, config, and status of a Dataproc cluster
     * @alias module:model/Cluster
     */
    constructor() { 
        
        Cluster.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Cluster</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cluster} obj Optional instance to populate.
     * @return {module:model/Cluster} The populated <code>Cluster</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cluster();

            if (data.hasOwnProperty('clusterName')) {
                obj['clusterName'] = ApiClient.convertToType(data['clusterName'], 'String');
            }
            if (data.hasOwnProperty('clusterUuid')) {
                obj['clusterUuid'] = ApiClient.convertToType(data['clusterUuid'], 'String');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ClusterConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ClusterMetrics.constructFromObject(data['metrics']);
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ClusterStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('statusHistory')) {
                obj['statusHistory'] = ApiClient.convertToType(data['statusHistory'], [ClusterStatus]);
            }
            if (data.hasOwnProperty('virtualClusterConfig')) {
                obj['virtualClusterConfig'] = VirtualClusterConfig.constructFromObject(data['virtualClusterConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cluster</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cluster</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clusterName'] && !(typeof data['clusterName'] === 'string' || data['clusterName'] instanceof String)) {
            throw new Error("Expected the field `clusterName` to be a primitive type in the JSON string but got " + data['clusterName']);
        }
        // ensure the json data is a string
        if (data['clusterUuid'] && !(typeof data['clusterUuid'] === 'string' || data['clusterUuid'] instanceof String)) {
            throw new Error("Expected the field `clusterUuid` to be a primitive type in the JSON string but got " + data['clusterUuid']);
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          ClusterConfig.validateJSON(data['config']);
        }
        // validate the optional field `metrics`
        if (data['metrics']) { // data not null
          ClusterMetrics.validateJSON(data['metrics']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ClusterStatus.validateJSON(data['status']);
        }
        if (data['statusHistory']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statusHistory'])) {
                throw new Error("Expected the field `statusHistory` to be an array in the JSON data but got " + data['statusHistory']);
            }
            // validate the optional field `statusHistory` (array)
            for (const item of data['statusHistory']) {
                ClusterStatus.validateJSON(item);
            };
        }
        // validate the optional field `virtualClusterConfig`
        if (data['virtualClusterConfig']) { // data not null
          VirtualClusterConfig.validateJSON(data['virtualClusterConfig']);
        }

        return true;
    }


}



/**
 * Required. The cluster name, which must be unique within a project. The name must start with a lowercase letter, and can contain up to 51 lowercase letters, numbers, and hyphens. It cannot end with a hyphen. The name of a deleted cluster can be reused.
 * @member {String} clusterName
 */
Cluster.prototype['clusterName'] = undefined;

/**
 * Output only. A cluster UUID (Unique Universal Identifier). Dataproc generates this value when it creates the cluster.
 * @member {String} clusterUuid
 */
Cluster.prototype['clusterUuid'] = undefined;

/**
 * @member {module:model/ClusterConfig} config
 */
Cluster.prototype['config'] = undefined;

/**
 * Optional. The labels to associate with this cluster. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
 * @member {Object.<String, String>} labels
 */
Cluster.prototype['labels'] = undefined;

/**
 * @member {module:model/ClusterMetrics} metrics
 */
Cluster.prototype['metrics'] = undefined;

/**
 * Required. The Google Cloud Platform project ID that the cluster belongs to.
 * @member {String} projectId
 */
Cluster.prototype['projectId'] = undefined;

/**
 * @member {module:model/ClusterStatus} status
 */
Cluster.prototype['status'] = undefined;

/**
 * Output only. The previous cluster status.
 * @member {Array.<module:model/ClusterStatus>} statusHistory
 */
Cluster.prototype['statusHistory'] = undefined;

/**
 * @member {module:model/VirtualClusterConfig} virtualClusterConfig
 */
Cluster.prototype['virtualClusterConfig'] = undefined;






export default Cluster;

