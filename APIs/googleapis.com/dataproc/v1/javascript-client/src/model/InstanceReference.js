/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InstanceReference model module.
 * @module model/InstanceReference
 * @version v1
 */
class InstanceReference {
    /**
     * Constructs a new <code>InstanceReference</code>.
     * A reference to a Compute Engine instance.
     * @alias module:model/InstanceReference
     */
    constructor() { 
        
        InstanceReference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstanceReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstanceReference} obj Optional instance to populate.
     * @return {module:model/InstanceReference} The populated <code>InstanceReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstanceReference();

            if (data.hasOwnProperty('instanceId')) {
                obj['instanceId'] = ApiClient.convertToType(data['instanceId'], 'String');
            }
            if (data.hasOwnProperty('instanceName')) {
                obj['instanceName'] = ApiClient.convertToType(data['instanceName'], 'String');
            }
            if (data.hasOwnProperty('publicEciesKey')) {
                obj['publicEciesKey'] = ApiClient.convertToType(data['publicEciesKey'], 'String');
            }
            if (data.hasOwnProperty('publicKey')) {
                obj['publicKey'] = ApiClient.convertToType(data['publicKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstanceReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstanceReference</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['instanceId'] && !(typeof data['instanceId'] === 'string' || data['instanceId'] instanceof String)) {
            throw new Error("Expected the field `instanceId` to be a primitive type in the JSON string but got " + data['instanceId']);
        }
        // ensure the json data is a string
        if (data['instanceName'] && !(typeof data['instanceName'] === 'string' || data['instanceName'] instanceof String)) {
            throw new Error("Expected the field `instanceName` to be a primitive type in the JSON string but got " + data['instanceName']);
        }
        // ensure the json data is a string
        if (data['publicEciesKey'] && !(typeof data['publicEciesKey'] === 'string' || data['publicEciesKey'] instanceof String)) {
            throw new Error("Expected the field `publicEciesKey` to be a primitive type in the JSON string but got " + data['publicEciesKey']);
        }
        // ensure the json data is a string
        if (data['publicKey'] && !(typeof data['publicKey'] === 'string' || data['publicKey'] instanceof String)) {
            throw new Error("Expected the field `publicKey` to be a primitive type in the JSON string but got " + data['publicKey']);
        }

        return true;
    }


}



/**
 * The unique identifier of the Compute Engine instance.
 * @member {String} instanceId
 */
InstanceReference.prototype['instanceId'] = undefined;

/**
 * The user-friendly name of the Compute Engine instance.
 * @member {String} instanceName
 */
InstanceReference.prototype['instanceName'] = undefined;

/**
 * The public ECIES key used for sharing data with this instance.
 * @member {String} publicEciesKey
 */
InstanceReference.prototype['publicEciesKey'] = undefined;

/**
 * The public RSA key used for sharing data with this instance.
 * @member {String} publicKey
 */
InstanceReference.prototype['publicKey'] = undefined;






export default InstanceReference;

