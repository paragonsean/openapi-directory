/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AnalyzeOperationMetadata model module.
 * @module model/AnalyzeOperationMetadata
 * @version v1
 */
class AnalyzeOperationMetadata {
    /**
     * Constructs a new <code>AnalyzeOperationMetadata</code>.
     * Metadata describing the Analyze operation.
     * @alias module:model/AnalyzeOperationMetadata
     */
    constructor() { 
        
        AnalyzeOperationMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnalyzeOperationMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnalyzeOperationMetadata} obj Optional instance to populate.
     * @return {module:model/AnalyzeOperationMetadata} The populated <code>AnalyzeOperationMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalyzeOperationMetadata();

            if (data.hasOwnProperty('analyzedWorkloadName')) {
                obj['analyzedWorkloadName'] = ApiClient.convertToType(data['analyzedWorkloadName'], 'String');
            }
            if (data.hasOwnProperty('analyzedWorkloadType')) {
                obj['analyzedWorkloadType'] = ApiClient.convertToType(data['analyzedWorkloadType'], 'String');
            }
            if (data.hasOwnProperty('analyzedWorkloadUuid')) {
                obj['analyzedWorkloadUuid'] = ApiClient.convertToType(data['analyzedWorkloadUuid'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('doneTime')) {
                obj['doneTime'] = ApiClient.convertToType(data['doneTime'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnalyzeOperationMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnalyzeOperationMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['analyzedWorkloadName'] && !(typeof data['analyzedWorkloadName'] === 'string' || data['analyzedWorkloadName'] instanceof String)) {
            throw new Error("Expected the field `analyzedWorkloadName` to be a primitive type in the JSON string but got " + data['analyzedWorkloadName']);
        }
        // ensure the json data is a string
        if (data['analyzedWorkloadType'] && !(typeof data['analyzedWorkloadType'] === 'string' || data['analyzedWorkloadType'] instanceof String)) {
            throw new Error("Expected the field `analyzedWorkloadType` to be a primitive type in the JSON string but got " + data['analyzedWorkloadType']);
        }
        // ensure the json data is a string
        if (data['analyzedWorkloadUuid'] && !(typeof data['analyzedWorkloadUuid'] === 'string' || data['analyzedWorkloadUuid'] instanceof String)) {
            throw new Error("Expected the field `analyzedWorkloadUuid` to be a primitive type in the JSON string but got " + data['analyzedWorkloadUuid']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['doneTime'] && !(typeof data['doneTime'] === 'string' || data['doneTime'] instanceof String)) {
            throw new Error("Expected the field `doneTime` to be a primitive type in the JSON string but got " + data['doneTime']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['warnings'])) {
            throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
        }

        return true;
    }


}



/**
 * Output only. name of the workload being analyzed.
 * @member {String} analyzedWorkloadName
 */
AnalyzeOperationMetadata.prototype['analyzedWorkloadName'] = undefined;

/**
 * Output only. Type of the workload being analyzed.
 * @member {module:model/AnalyzeOperationMetadata.AnalyzedWorkloadTypeEnum} analyzedWorkloadType
 */
AnalyzeOperationMetadata.prototype['analyzedWorkloadType'] = undefined;

/**
 * Output only. unique identifier of the workload typically generated by control plane. E.g. batch uuid.
 * @member {String} analyzedWorkloadUuid
 */
AnalyzeOperationMetadata.prototype['analyzedWorkloadUuid'] = undefined;

/**
 * Output only. The time when the operation was created.
 * @member {String} createTime
 */
AnalyzeOperationMetadata.prototype['createTime'] = undefined;

/**
 * Output only. Short description of the operation.
 * @member {String} description
 */
AnalyzeOperationMetadata.prototype['description'] = undefined;

/**
 * Output only. The time when the operation finished.
 * @member {String} doneTime
 */
AnalyzeOperationMetadata.prototype['doneTime'] = undefined;

/**
 * Output only. Labels associated with the operation.
 * @member {Object.<String, String>} labels
 */
AnalyzeOperationMetadata.prototype['labels'] = undefined;

/**
 * Output only. Warnings encountered during operation execution.
 * @member {Array.<String>} warnings
 */
AnalyzeOperationMetadata.prototype['warnings'] = undefined;





/**
 * Allowed values for the <code>analyzedWorkloadType</code> property.
 * @enum {String}
 * @readonly
 */
AnalyzeOperationMetadata['AnalyzedWorkloadTypeEnum'] = {

    /**
     * value: "WORKLOAD_TYPE_UNSPECIFIED"
     * @const
     */
    "WORKLOAD_TYPE_UNSPECIFIED": "WORKLOAD_TYPE_UNSPECIFIED",

    /**
     * value: "BATCH"
     * @const
     */
    "BATCH": "BATCH"
};



export default AnalyzeOperationMetadata;

