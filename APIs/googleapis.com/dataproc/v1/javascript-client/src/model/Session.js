/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnvironmentConfig from './EnvironmentConfig';
import JupyterConfig from './JupyterConfig';
import RuntimeConfig from './RuntimeConfig';
import RuntimeInfo from './RuntimeInfo';
import SessionStateHistory from './SessionStateHistory';

/**
 * The Session model module.
 * @module model/Session
 * @version v1
 */
class Session {
    /**
     * Constructs a new <code>Session</code>.
     * A representation of a session.
     * @alias module:model/Session
     */
    constructor() { 
        
        Session.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Session</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Session} obj Optional instance to populate.
     * @return {module:model/Session} The populated <code>Session</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Session();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = ApiClient.convertToType(data['creator'], 'String');
            }
            if (data.hasOwnProperty('environmentConfig')) {
                obj['environmentConfig'] = EnvironmentConfig.constructFromObject(data['environmentConfig']);
            }
            if (data.hasOwnProperty('jupyterSession')) {
                obj['jupyterSession'] = JupyterConfig.constructFromObject(data['jupyterSession']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('runtimeConfig')) {
                obj['runtimeConfig'] = RuntimeConfig.constructFromObject(data['runtimeConfig']);
            }
            if (data.hasOwnProperty('runtimeInfo')) {
                obj['runtimeInfo'] = RuntimeInfo.constructFromObject(data['runtimeInfo']);
            }
            if (data.hasOwnProperty('sessionTemplate')) {
                obj['sessionTemplate'] = ApiClient.convertToType(data['sessionTemplate'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateHistory')) {
                obj['stateHistory'] = ApiClient.convertToType(data['stateHistory'], [SessionStateHistory]);
            }
            if (data.hasOwnProperty('stateMessage')) {
                obj['stateMessage'] = ApiClient.convertToType(data['stateMessage'], 'String');
            }
            if (data.hasOwnProperty('stateTime')) {
                obj['stateTime'] = ApiClient.convertToType(data['stateTime'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Session</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Session</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['creator'] && !(typeof data['creator'] === 'string' || data['creator'] instanceof String)) {
            throw new Error("Expected the field `creator` to be a primitive type in the JSON string but got " + data['creator']);
        }
        // validate the optional field `environmentConfig`
        if (data['environmentConfig']) { // data not null
          EnvironmentConfig.validateJSON(data['environmentConfig']);
        }
        // validate the optional field `jupyterSession`
        if (data['jupyterSession']) { // data not null
          JupyterConfig.validateJSON(data['jupyterSession']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `runtimeConfig`
        if (data['runtimeConfig']) { // data not null
          RuntimeConfig.validateJSON(data['runtimeConfig']);
        }
        // validate the optional field `runtimeInfo`
        if (data['runtimeInfo']) { // data not null
          RuntimeInfo.validateJSON(data['runtimeInfo']);
        }
        // ensure the json data is a string
        if (data['sessionTemplate'] && !(typeof data['sessionTemplate'] === 'string' || data['sessionTemplate'] instanceof String)) {
            throw new Error("Expected the field `sessionTemplate` to be a primitive type in the JSON string but got " + data['sessionTemplate']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['stateHistory']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stateHistory'])) {
                throw new Error("Expected the field `stateHistory` to be an array in the JSON data but got " + data['stateHistory']);
            }
            // validate the optional field `stateHistory` (array)
            for (const item of data['stateHistory']) {
                SessionStateHistory.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['stateMessage'] && !(typeof data['stateMessage'] === 'string' || data['stateMessage'] instanceof String)) {
            throw new Error("Expected the field `stateMessage` to be a primitive type in the JSON string but got " + data['stateMessage']);
        }
        // ensure the json data is a string
        if (data['stateTime'] && !(typeof data['stateTime'] === 'string' || data['stateTime'] instanceof String)) {
            throw new Error("Expected the field `stateTime` to be a primitive type in the JSON string but got " + data['stateTime']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}



/**
 * Output only. The time when the session was created.
 * @member {String} createTime
 */
Session.prototype['createTime'] = undefined;

/**
 * Output only. The email address of the user who created the session.
 * @member {String} creator
 */
Session.prototype['creator'] = undefined;

/**
 * @member {module:model/EnvironmentConfig} environmentConfig
 */
Session.prototype['environmentConfig'] = undefined;

/**
 * @member {module:model/JupyterConfig} jupyterSession
 */
Session.prototype['jupyterSession'] = undefined;

/**
 * Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
 * @member {Object.<String, String>} labels
 */
Session.prototype['labels'] = undefined;

/**
 * Required. The resource name of the session.
 * @member {String} name
 */
Session.prototype['name'] = undefined;

/**
 * @member {module:model/RuntimeConfig} runtimeConfig
 */
Session.prototype['runtimeConfig'] = undefined;

/**
 * @member {module:model/RuntimeInfo} runtimeInfo
 */
Session.prototype['runtimeInfo'] = undefined;

/**
 * Optional. The session template used by the session.Only resource names, including project ID and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id] * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template must be in the same project and Dataproc region as the session.
 * @member {String} sessionTemplate
 */
Session.prototype['sessionTemplate'] = undefined;

/**
 * Output only. A state of the session.
 * @member {module:model/Session.StateEnum} state
 */
Session.prototype['state'] = undefined;

/**
 * Output only. Historical state information for the session.
 * @member {Array.<module:model/SessionStateHistory>} stateHistory
 */
Session.prototype['stateHistory'] = undefined;

/**
 * Output only. Session state details, such as the failure description if the state is FAILED.
 * @member {String} stateMessage
 */
Session.prototype['stateMessage'] = undefined;

/**
 * Output only. The time when the session entered the current state.
 * @member {String} stateTime
 */
Session.prototype['stateTime'] = undefined;

/**
 * Optional. The email address of the user who owns the session.
 * @member {String} user
 */
Session.prototype['user'] = undefined;

/**
 * Output only. A session UUID (Unique Universal Identifier). The service generates this value when it creates the session.
 * @member {String} uuid
 */
Session.prototype['uuid'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Session['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "TERMINATING"
     * @const
     */
    "TERMINATING": "TERMINATING",

    /**
     * value: "TERMINATED"
     * @const
     */
    "TERMINATED": "TERMINATED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default Session;

