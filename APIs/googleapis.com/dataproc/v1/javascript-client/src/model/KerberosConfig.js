/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KerberosConfig model module.
 * @module model/KerberosConfig
 * @version v1
 */
class KerberosConfig {
    /**
     * Constructs a new <code>KerberosConfig</code>.
     * Specifies Kerberos related configuration.
     * @alias module:model/KerberosConfig
     */
    constructor() { 
        
        KerberosConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KerberosConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KerberosConfig} obj Optional instance to populate.
     * @return {module:model/KerberosConfig} The populated <code>KerberosConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KerberosConfig();

            if (data.hasOwnProperty('crossRealmTrustAdminServer')) {
                obj['crossRealmTrustAdminServer'] = ApiClient.convertToType(data['crossRealmTrustAdminServer'], 'String');
            }
            if (data.hasOwnProperty('crossRealmTrustKdc')) {
                obj['crossRealmTrustKdc'] = ApiClient.convertToType(data['crossRealmTrustKdc'], 'String');
            }
            if (data.hasOwnProperty('crossRealmTrustRealm')) {
                obj['crossRealmTrustRealm'] = ApiClient.convertToType(data['crossRealmTrustRealm'], 'String');
            }
            if (data.hasOwnProperty('crossRealmTrustSharedPasswordUri')) {
                obj['crossRealmTrustSharedPasswordUri'] = ApiClient.convertToType(data['crossRealmTrustSharedPasswordUri'], 'String');
            }
            if (data.hasOwnProperty('enableKerberos')) {
                obj['enableKerberos'] = ApiClient.convertToType(data['enableKerberos'], 'Boolean');
            }
            if (data.hasOwnProperty('kdcDbKeyUri')) {
                obj['kdcDbKeyUri'] = ApiClient.convertToType(data['kdcDbKeyUri'], 'String');
            }
            if (data.hasOwnProperty('keyPasswordUri')) {
                obj['keyPasswordUri'] = ApiClient.convertToType(data['keyPasswordUri'], 'String');
            }
            if (data.hasOwnProperty('keystorePasswordUri')) {
                obj['keystorePasswordUri'] = ApiClient.convertToType(data['keystorePasswordUri'], 'String');
            }
            if (data.hasOwnProperty('keystoreUri')) {
                obj['keystoreUri'] = ApiClient.convertToType(data['keystoreUri'], 'String');
            }
            if (data.hasOwnProperty('kmsKeyUri')) {
                obj['kmsKeyUri'] = ApiClient.convertToType(data['kmsKeyUri'], 'String');
            }
            if (data.hasOwnProperty('realm')) {
                obj['realm'] = ApiClient.convertToType(data['realm'], 'String');
            }
            if (data.hasOwnProperty('rootPrincipalPasswordUri')) {
                obj['rootPrincipalPasswordUri'] = ApiClient.convertToType(data['rootPrincipalPasswordUri'], 'String');
            }
            if (data.hasOwnProperty('tgtLifetimeHours')) {
                obj['tgtLifetimeHours'] = ApiClient.convertToType(data['tgtLifetimeHours'], 'Number');
            }
            if (data.hasOwnProperty('truststorePasswordUri')) {
                obj['truststorePasswordUri'] = ApiClient.convertToType(data['truststorePasswordUri'], 'String');
            }
            if (data.hasOwnProperty('truststoreUri')) {
                obj['truststoreUri'] = ApiClient.convertToType(data['truststoreUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KerberosConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KerberosConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['crossRealmTrustAdminServer'] && !(typeof data['crossRealmTrustAdminServer'] === 'string' || data['crossRealmTrustAdminServer'] instanceof String)) {
            throw new Error("Expected the field `crossRealmTrustAdminServer` to be a primitive type in the JSON string but got " + data['crossRealmTrustAdminServer']);
        }
        // ensure the json data is a string
        if (data['crossRealmTrustKdc'] && !(typeof data['crossRealmTrustKdc'] === 'string' || data['crossRealmTrustKdc'] instanceof String)) {
            throw new Error("Expected the field `crossRealmTrustKdc` to be a primitive type in the JSON string but got " + data['crossRealmTrustKdc']);
        }
        // ensure the json data is a string
        if (data['crossRealmTrustRealm'] && !(typeof data['crossRealmTrustRealm'] === 'string' || data['crossRealmTrustRealm'] instanceof String)) {
            throw new Error("Expected the field `crossRealmTrustRealm` to be a primitive type in the JSON string but got " + data['crossRealmTrustRealm']);
        }
        // ensure the json data is a string
        if (data['crossRealmTrustSharedPasswordUri'] && !(typeof data['crossRealmTrustSharedPasswordUri'] === 'string' || data['crossRealmTrustSharedPasswordUri'] instanceof String)) {
            throw new Error("Expected the field `crossRealmTrustSharedPasswordUri` to be a primitive type in the JSON string but got " + data['crossRealmTrustSharedPasswordUri']);
        }
        // ensure the json data is a string
        if (data['kdcDbKeyUri'] && !(typeof data['kdcDbKeyUri'] === 'string' || data['kdcDbKeyUri'] instanceof String)) {
            throw new Error("Expected the field `kdcDbKeyUri` to be a primitive type in the JSON string but got " + data['kdcDbKeyUri']);
        }
        // ensure the json data is a string
        if (data['keyPasswordUri'] && !(typeof data['keyPasswordUri'] === 'string' || data['keyPasswordUri'] instanceof String)) {
            throw new Error("Expected the field `keyPasswordUri` to be a primitive type in the JSON string but got " + data['keyPasswordUri']);
        }
        // ensure the json data is a string
        if (data['keystorePasswordUri'] && !(typeof data['keystorePasswordUri'] === 'string' || data['keystorePasswordUri'] instanceof String)) {
            throw new Error("Expected the field `keystorePasswordUri` to be a primitive type in the JSON string but got " + data['keystorePasswordUri']);
        }
        // ensure the json data is a string
        if (data['keystoreUri'] && !(typeof data['keystoreUri'] === 'string' || data['keystoreUri'] instanceof String)) {
            throw new Error("Expected the field `keystoreUri` to be a primitive type in the JSON string but got " + data['keystoreUri']);
        }
        // ensure the json data is a string
        if (data['kmsKeyUri'] && !(typeof data['kmsKeyUri'] === 'string' || data['kmsKeyUri'] instanceof String)) {
            throw new Error("Expected the field `kmsKeyUri` to be a primitive type in the JSON string but got " + data['kmsKeyUri']);
        }
        // ensure the json data is a string
        if (data['realm'] && !(typeof data['realm'] === 'string' || data['realm'] instanceof String)) {
            throw new Error("Expected the field `realm` to be a primitive type in the JSON string but got " + data['realm']);
        }
        // ensure the json data is a string
        if (data['rootPrincipalPasswordUri'] && !(typeof data['rootPrincipalPasswordUri'] === 'string' || data['rootPrincipalPasswordUri'] instanceof String)) {
            throw new Error("Expected the field `rootPrincipalPasswordUri` to be a primitive type in the JSON string but got " + data['rootPrincipalPasswordUri']);
        }
        // ensure the json data is a string
        if (data['truststorePasswordUri'] && !(typeof data['truststorePasswordUri'] === 'string' || data['truststorePasswordUri'] instanceof String)) {
            throw new Error("Expected the field `truststorePasswordUri` to be a primitive type in the JSON string but got " + data['truststorePasswordUri']);
        }
        // ensure the json data is a string
        if (data['truststoreUri'] && !(typeof data['truststoreUri'] === 'string' || data['truststoreUri'] instanceof String)) {
            throw new Error("Expected the field `truststoreUri` to be a primitive type in the JSON string but got " + data['truststoreUri']);
        }

        return true;
    }


}



/**
 * Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
 * @member {String} crossRealmTrustAdminServer
 */
KerberosConfig.prototype['crossRealmTrustAdminServer'] = undefined;

/**
 * Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.
 * @member {String} crossRealmTrustKdc
 */
KerberosConfig.prototype['crossRealmTrustKdc'] = undefined;

/**
 * Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.
 * @member {String} crossRealmTrustRealm
 */
KerberosConfig.prototype['crossRealmTrustRealm'] = undefined;

/**
 * Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.
 * @member {String} crossRealmTrustSharedPasswordUri
 */
KerberosConfig.prototype['crossRealmTrustSharedPasswordUri'] = undefined;

/**
 * Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.
 * @member {Boolean} enableKerberos
 */
KerberosConfig.prototype['enableKerberos'] = undefined;

/**
 * Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.
 * @member {String} kdcDbKeyUri
 */
KerberosConfig.prototype['kdcDbKeyUri'] = undefined;

/**
 * Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.
 * @member {String} keyPasswordUri
 */
KerberosConfig.prototype['keyPasswordUri'] = undefined;

/**
 * Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.
 * @member {String} keystorePasswordUri
 */
KerberosConfig.prototype['keystorePasswordUri'] = undefined;

/**
 * Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
 * @member {String} keystoreUri
 */
KerberosConfig.prototype['keystoreUri'] = undefined;

/**
 * Optional. The URI of the KMS key used to encrypt sensitive files.
 * @member {String} kmsKeyUri
 */
KerberosConfig.prototype['kmsKeyUri'] = undefined;

/**
 * Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.
 * @member {String} realm
 */
KerberosConfig.prototype['realm'] = undefined;

/**
 * Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.
 * @member {String} rootPrincipalPasswordUri
 */
KerberosConfig.prototype['rootPrincipalPasswordUri'] = undefined;

/**
 * Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.
 * @member {Number} tgtLifetimeHours
 */
KerberosConfig.prototype['tgtLifetimeHours'] = undefined;

/**
 * Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.
 * @member {String} truststorePasswordUri
 */
KerberosConfig.prototype['truststorePasswordUri'] = undefined;

/**
 * Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.
 * @member {String} truststoreUri
 */
KerberosConfig.prototype['truststoreUri'] = undefined;






export default KerberosConfig;

