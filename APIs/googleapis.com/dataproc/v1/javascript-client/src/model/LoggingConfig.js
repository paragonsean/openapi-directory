/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LoggingConfig model module.
 * @module model/LoggingConfig
 * @version v1
 */
class LoggingConfig {
    /**
     * Constructs a new <code>LoggingConfig</code>.
     * The runtime logging config of the job.
     * @alias module:model/LoggingConfig
     */
    constructor() { 
        
        LoggingConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoggingConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoggingConfig} obj Optional instance to populate.
     * @return {module:model/LoggingConfig} The populated <code>LoggingConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoggingConfig();

            if (data.hasOwnProperty('driverLogLevels')) {
                obj['driverLogLevels'] = ApiClient.convertToType(data['driverLogLevels'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoggingConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoggingConfig</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The per-package log levels for the driver. This can include \"root\" package name to configure rootLogger. Examples: - 'com.google = FATAL' - 'root = INFO' - 'org.apache = DEBUG'
 * @member {Object.<String, module:model/LoggingConfig.InnerEnum>} driverLogLevels
 */
LoggingConfig.prototype['driverLogLevels'] = undefined;





/**
 * Allowed values for the <code>inner</code> property.
 * @enum {String}
 * @readonly
 */
LoggingConfig['InnerEnum'] = {

    /**
     * value: "LEVEL_UNSPECIFIED"
     * @const
     */
    "LEVEL_UNSPECIFIED": "LEVEL_UNSPECIFIED",

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",

    /**
     * value: "TRACE"
     * @const
     */
    "TRACE": "TRACE",

    /**
     * value: "DEBUG"
     * @const
     */
    "DEBUG": "DEBUG",

    /**
     * value: "INFO"
     * @const
     */
    "INFO": "INFO",

    /**
     * value: "WARN"
     * @const
     */
    "WARN": "WARN",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "FATAL"
     * @const
     */
    "FATAL": "FATAL",

    /**
     * value: "false"
     * @const
     */
    "false": "false"
};



export default LoggingConfig;

