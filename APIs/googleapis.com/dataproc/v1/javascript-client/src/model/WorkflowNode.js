/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WorkflowNode model module.
 * @module model/WorkflowNode
 * @version v1
 */
class WorkflowNode {
    /**
     * Constructs a new <code>WorkflowNode</code>.
     * The workflow node.
     * @alias module:model/WorkflowNode
     */
    constructor() { 
        
        WorkflowNode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkflowNode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowNode} obj Optional instance to populate.
     * @return {module:model/WorkflowNode} The populated <code>WorkflowNode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowNode();

            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('jobId')) {
                obj['jobId'] = ApiClient.convertToType(data['jobId'], 'String');
            }
            if (data.hasOwnProperty('prerequisiteStepIds')) {
                obj['prerequisiteStepIds'] = ApiClient.convertToType(data['prerequisiteStepIds'], ['String']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stepId')) {
                obj['stepId'] = ApiClient.convertToType(data['stepId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowNode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowNode</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['jobId'] && !(typeof data['jobId'] === 'string' || data['jobId'] instanceof String)) {
            throw new Error("Expected the field `jobId` to be a primitive type in the JSON string but got " + data['jobId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['prerequisiteStepIds'])) {
            throw new Error("Expected the field `prerequisiteStepIds` to be an array in the JSON data but got " + data['prerequisiteStepIds']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stepId'] && !(typeof data['stepId'] === 'string' || data['stepId'] instanceof String)) {
            throw new Error("Expected the field `stepId` to be a primitive type in the JSON string but got " + data['stepId']);
        }

        return true;
    }


}



/**
 * Output only. The error detail.
 * @member {String} error
 */
WorkflowNode.prototype['error'] = undefined;

/**
 * Output only. The job id; populated after the node enters RUNNING state.
 * @member {String} jobId
 */
WorkflowNode.prototype['jobId'] = undefined;

/**
 * Output only. Node's prerequisite nodes.
 * @member {Array.<String>} prerequisiteStepIds
 */
WorkflowNode.prototype['prerequisiteStepIds'] = undefined;

/**
 * Output only. The node state.
 * @member {module:model/WorkflowNode.StateEnum} state
 */
WorkflowNode.prototype['state'] = undefined;

/**
 * Output only. The name of the node.
 * @member {String} stepId
 */
WorkflowNode.prototype['stepId'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowNode['StateEnum'] = {

    /**
     * value: "NODE_STATE_UNSPECIFIED"
     * @const
     */
    "NODE_STATE_UNSPECIFIED": "NODE_STATE_UNSPECIFIED",

    /**
     * value: "BLOCKED"
     * @const
     */
    "BLOCKED": "BLOCKED",

    /**
     * value: "RUNNABLE"
     * @const
     */
    "RUNNABLE": "RUNNABLE",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "COMPLETED"
     * @const
     */
    "COMPLETED": "COMPLETED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default WorkflowNode;

