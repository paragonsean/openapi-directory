/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfidentialInstanceConfig from './ConfidentialInstanceConfig';
import NodeGroupAffinity from './NodeGroupAffinity';
import ReservationAffinity from './ReservationAffinity';
import ShieldedInstanceConfig from './ShieldedInstanceConfig';

/**
 * The GceClusterConfig model module.
 * @module model/GceClusterConfig
 * @version v1
 */
class GceClusterConfig {
    /**
     * Constructs a new <code>GceClusterConfig</code>.
     * Common config settings for resources of Compute Engine cluster instances, applicable to all instances in the cluster.
     * @alias module:model/GceClusterConfig
     */
    constructor() { 
        
        GceClusterConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GceClusterConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GceClusterConfig} obj Optional instance to populate.
     * @return {module:model/GceClusterConfig} The populated <code>GceClusterConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GceClusterConfig();

            if (data.hasOwnProperty('confidentialInstanceConfig')) {
                obj['confidentialInstanceConfig'] = ConfidentialInstanceConfig.constructFromObject(data['confidentialInstanceConfig']);
            }
            if (data.hasOwnProperty('internalIpOnly')) {
                obj['internalIpOnly'] = ApiClient.convertToType(data['internalIpOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('networkUri')) {
                obj['networkUri'] = ApiClient.convertToType(data['networkUri'], 'String');
            }
            if (data.hasOwnProperty('nodeGroupAffinity')) {
                obj['nodeGroupAffinity'] = NodeGroupAffinity.constructFromObject(data['nodeGroupAffinity']);
            }
            if (data.hasOwnProperty('privateIpv6GoogleAccess')) {
                obj['privateIpv6GoogleAccess'] = ApiClient.convertToType(data['privateIpv6GoogleAccess'], 'String');
            }
            if (data.hasOwnProperty('reservationAffinity')) {
                obj['reservationAffinity'] = ReservationAffinity.constructFromObject(data['reservationAffinity']);
            }
            if (data.hasOwnProperty('serviceAccount')) {
                obj['serviceAccount'] = ApiClient.convertToType(data['serviceAccount'], 'String');
            }
            if (data.hasOwnProperty('serviceAccountScopes')) {
                obj['serviceAccountScopes'] = ApiClient.convertToType(data['serviceAccountScopes'], ['String']);
            }
            if (data.hasOwnProperty('shieldedInstanceConfig')) {
                obj['shieldedInstanceConfig'] = ShieldedInstanceConfig.constructFromObject(data['shieldedInstanceConfig']);
            }
            if (data.hasOwnProperty('subnetworkUri')) {
                obj['subnetworkUri'] = ApiClient.convertToType(data['subnetworkUri'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('zoneUri')) {
                obj['zoneUri'] = ApiClient.convertToType(data['zoneUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GceClusterConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GceClusterConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `confidentialInstanceConfig`
        if (data['confidentialInstanceConfig']) { // data not null
          ConfidentialInstanceConfig.validateJSON(data['confidentialInstanceConfig']);
        }
        // ensure the json data is a string
        if (data['networkUri'] && !(typeof data['networkUri'] === 'string' || data['networkUri'] instanceof String)) {
            throw new Error("Expected the field `networkUri` to be a primitive type in the JSON string but got " + data['networkUri']);
        }
        // validate the optional field `nodeGroupAffinity`
        if (data['nodeGroupAffinity']) { // data not null
          NodeGroupAffinity.validateJSON(data['nodeGroupAffinity']);
        }
        // ensure the json data is a string
        if (data['privateIpv6GoogleAccess'] && !(typeof data['privateIpv6GoogleAccess'] === 'string' || data['privateIpv6GoogleAccess'] instanceof String)) {
            throw new Error("Expected the field `privateIpv6GoogleAccess` to be a primitive type in the JSON string but got " + data['privateIpv6GoogleAccess']);
        }
        // validate the optional field `reservationAffinity`
        if (data['reservationAffinity']) { // data not null
          ReservationAffinity.validateJSON(data['reservationAffinity']);
        }
        // ensure the json data is a string
        if (data['serviceAccount'] && !(typeof data['serviceAccount'] === 'string' || data['serviceAccount'] instanceof String)) {
            throw new Error("Expected the field `serviceAccount` to be a primitive type in the JSON string but got " + data['serviceAccount']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['serviceAccountScopes'])) {
            throw new Error("Expected the field `serviceAccountScopes` to be an array in the JSON data but got " + data['serviceAccountScopes']);
        }
        // validate the optional field `shieldedInstanceConfig`
        if (data['shieldedInstanceConfig']) { // data not null
          ShieldedInstanceConfig.validateJSON(data['shieldedInstanceConfig']);
        }
        // ensure the json data is a string
        if (data['subnetworkUri'] && !(typeof data['subnetworkUri'] === 'string' || data['subnetworkUri'] instanceof String)) {
            throw new Error("Expected the field `subnetworkUri` to be a primitive type in the JSON string but got " + data['subnetworkUri']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['zoneUri'] && !(typeof data['zoneUri'] === 'string' || data['zoneUri'] instanceof String)) {
            throw new Error("Expected the field `zoneUri` to be a primitive type in the JSON string but got " + data['zoneUri']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConfidentialInstanceConfig} confidentialInstanceConfig
 */
GceClusterConfig.prototype['confidentialInstanceConfig'] = undefined;

/**
 * Optional. If true, all instances in the cluster will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This internal_ip_only restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses.
 * @member {Boolean} internalIpOnly
 */
GceClusterConfig.prototype['internalIpOnly'] = undefined;

/**
 * Optional. The Compute Engine metadata entries to add to all instances (see Project and instance metadata (https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
 * @member {Object.<String, String>} metadata
 */
GceClusterConfig.prototype['metadata'] = undefined;

/**
 * Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither network_uri nor subnetwork_uri is specified, the \"default\" network of the project is used, if it exists. Cannot be a \"Custom Subnet Network\" (see Using Subnetworks (https://cloud.google.com/compute/docs/subnetworks) for more information).A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default projects/[project_id]/global/networks/default default
 * @member {String} networkUri
 */
GceClusterConfig.prototype['networkUri'] = undefined;

/**
 * @member {module:model/NodeGroupAffinity} nodeGroupAffinity
 */
GceClusterConfig.prototype['nodeGroupAffinity'] = undefined;

/**
 * Optional. The type of IPv6 access for a cluster.
 * @member {module:model/GceClusterConfig.PrivateIpv6GoogleAccessEnum} privateIpv6GoogleAccess
 */
GceClusterConfig.prototype['privateIpv6GoogleAccess'] = undefined;

/**
 * @member {module:model/ReservationAffinity} reservationAffinity
 */
GceClusterConfig.prototype['reservationAffinity'] = undefined;

/**
 * Optional. The Dataproc service account (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/service-accounts#service_accounts_in_dataproc) (also see VM Data Plane identity (https://cloud.google.com/dataproc/docs/concepts/iam/dataproc-principals#vm_service_account_data_plane_identity)) used by Dataproc cluster VM instances to access Google Cloud Platform services.If not specified, the Compute Engine default service account (https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
 * @member {String} serviceAccount
 */
GceClusterConfig.prototype['serviceAccount'] = undefined;

/**
 * Optional. The URIs of service account scopes to be included in Compute Engine instances. The following base set of scopes is always included: https://www.googleapis.com/auth/cloud.useraccounts.readonly https://www.googleapis.com/auth/devstorage.read_write https://www.googleapis.com/auth/logging.writeIf no scopes are specified, the following defaults are also provided: https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/bigtable.admin.table https://www.googleapis.com/auth/bigtable.data https://www.googleapis.com/auth/devstorage.full_control
 * @member {Array.<String>} serviceAccountScopes
 */
GceClusterConfig.prototype['serviceAccountScopes'] = undefined;

/**
 * @member {module:model/ShieldedInstanceConfig} shieldedInstanceConfig
 */
GceClusterConfig.prototype['shieldedInstanceConfig'] = undefined;

/**
 * Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/regions/[region]/subnetworks/sub0 projects/[project_id]/regions/[region]/subnetworks/sub0 sub0
 * @member {String} subnetworkUri
 */
GceClusterConfig.prototype['subnetworkUri'] = undefined;

/**
 * The Compute Engine tags to add to all instances (see Tagging instances (https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
 * @member {Array.<String>} tags
 */
GceClusterConfig.prototype['tags'] = undefined;

/**
 * Optional. The Compute Engine zone where the Dataproc cluster will be located. If omitted, the service will pick a zone in the cluster's Compute Engine region. On a get request, zone will always be present.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone] projects/[project_id]/zones/[zone] [zone]
 * @member {String} zoneUri
 */
GceClusterConfig.prototype['zoneUri'] = undefined;





/**
 * Allowed values for the <code>privateIpv6GoogleAccess</code> property.
 * @enum {String}
 * @readonly
 */
GceClusterConfig['PrivateIpv6GoogleAccessEnum'] = {

    /**
     * value: "PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED"
     * @const
     */
    "PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED": "PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED",

    /**
     * value: "INHERIT_FROM_SUBNETWORK"
     * @const
     */
    "INHERIT_FROM_SUBNETWORK": "INHERIT_FROM_SUBNETWORK",

    /**
     * value: "OUTBOUND"
     * @const
     */
    "OUTBOUND": "OUTBOUND",

    /**
     * value: "BIDIRECTIONAL"
     * @const
     */
    "BIDIRECTIONAL": "BIDIRECTIONAL"
};



export default GceClusterConfig;

