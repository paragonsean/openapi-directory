/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SparkHistoryServerConfig from './SparkHistoryServerConfig';

/**
 * The PeripheralsConfig model module.
 * @module model/PeripheralsConfig
 * @version v1
 */
class PeripheralsConfig {
    /**
     * Constructs a new <code>PeripheralsConfig</code>.
     * Auxiliary services configuration for a workload.
     * @alias module:model/PeripheralsConfig
     */
    constructor() { 
        
        PeripheralsConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PeripheralsConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PeripheralsConfig} obj Optional instance to populate.
     * @return {module:model/PeripheralsConfig} The populated <code>PeripheralsConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PeripheralsConfig();

            if (data.hasOwnProperty('metastoreService')) {
                obj['metastoreService'] = ApiClient.convertToType(data['metastoreService'], 'String');
            }
            if (data.hasOwnProperty('sparkHistoryServerConfig')) {
                obj['sparkHistoryServerConfig'] = SparkHistoryServerConfig.constructFromObject(data['sparkHistoryServerConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PeripheralsConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PeripheralsConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['metastoreService'] && !(typeof data['metastoreService'] === 'string' || data['metastoreService'] instanceof String)) {
            throw new Error("Expected the field `metastoreService` to be a primitive type in the JSON string but got " + data['metastoreService']);
        }
        // validate the optional field `sparkHistoryServerConfig`
        if (data['sparkHistoryServerConfig']) { // data not null
          SparkHistoryServerConfig.validateJSON(data['sparkHistoryServerConfig']);
        }

        return true;
    }


}



/**
 * Optional. Resource name of an existing Dataproc Metastore service.Example: projects/[project_id]/locations/[region]/services/[service_id]
 * @member {String} metastoreService
 */
PeripheralsConfig.prototype['metastoreService'] = undefined;

/**
 * @member {module:model/SparkHistoryServerConfig} sparkHistoryServerConfig
 */
PeripheralsConfig.prototype['sparkHistoryServerConfig'] = undefined;






export default PeripheralsConfig;

