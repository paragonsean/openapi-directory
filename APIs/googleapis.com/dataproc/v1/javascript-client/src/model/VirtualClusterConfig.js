/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuxiliaryServicesConfig from './AuxiliaryServicesConfig';
import KubernetesClusterConfig from './KubernetesClusterConfig';

/**
 * The VirtualClusterConfig model module.
 * @module model/VirtualClusterConfig
 * @version v1
 */
class VirtualClusterConfig {
    /**
     * Constructs a new <code>VirtualClusterConfig</code>.
     * The Dataproc cluster config for a cluster that does not directly control the underlying compute resources, such as a Dataproc-on-GKE cluster (https://cloud.google.com/dataproc/docs/guides/dpgke/dataproc-gke-overview).
     * @alias module:model/VirtualClusterConfig
     */
    constructor() { 
        
        VirtualClusterConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualClusterConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualClusterConfig} obj Optional instance to populate.
     * @return {module:model/VirtualClusterConfig} The populated <code>VirtualClusterConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualClusterConfig();

            if (data.hasOwnProperty('auxiliaryServicesConfig')) {
                obj['auxiliaryServicesConfig'] = AuxiliaryServicesConfig.constructFromObject(data['auxiliaryServicesConfig']);
            }
            if (data.hasOwnProperty('kubernetesClusterConfig')) {
                obj['kubernetesClusterConfig'] = KubernetesClusterConfig.constructFromObject(data['kubernetesClusterConfig']);
            }
            if (data.hasOwnProperty('stagingBucket')) {
                obj['stagingBucket'] = ApiClient.convertToType(data['stagingBucket'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualClusterConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualClusterConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `auxiliaryServicesConfig`
        if (data['auxiliaryServicesConfig']) { // data not null
          AuxiliaryServicesConfig.validateJSON(data['auxiliaryServicesConfig']);
        }
        // validate the optional field `kubernetesClusterConfig`
        if (data['kubernetesClusterConfig']) { // data not null
          KubernetesClusterConfig.validateJSON(data['kubernetesClusterConfig']);
        }
        // ensure the json data is a string
        if (data['stagingBucket'] && !(typeof data['stagingBucket'] === 'string' || data['stagingBucket'] instanceof String)) {
            throw new Error("Expected the field `stagingBucket` to be a primitive type in the JSON string but got " + data['stagingBucket']);
        }

        return true;
    }


}



/**
 * @member {module:model/AuxiliaryServicesConfig} auxiliaryServicesConfig
 */
VirtualClusterConfig.prototype['auxiliaryServicesConfig'] = undefined;

/**
 * @member {module:model/KubernetesClusterConfig} kubernetesClusterConfig
 */
VirtualClusterConfig.prototype['kubernetesClusterConfig'] = undefined;

/**
 * Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
 * @member {String} stagingBucket
 */
VirtualClusterConfig.prototype['stagingBucket'] = undefined;






export default VirtualClusterConfig;

