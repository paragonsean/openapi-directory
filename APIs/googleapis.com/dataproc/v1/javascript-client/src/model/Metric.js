/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Metric model module.
 * @module model/Metric
 * @version v1
 */
class Metric {
    /**
     * Constructs a new <code>Metric</code>.
     * A Dataproc custom metric.
     * @alias module:model/Metric
     */
    constructor() { 
        
        Metric.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Metric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metric} obj Optional instance to populate.
     * @return {module:model/Metric} The populated <code>Metric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metric();

            if (data.hasOwnProperty('metricOverrides')) {
                obj['metricOverrides'] = ApiClient.convertToType(data['metricOverrides'], ['String']);
            }
            if (data.hasOwnProperty('metricSource')) {
                obj['metricSource'] = ApiClient.convertToType(data['metricSource'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metric</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['metricOverrides'])) {
            throw new Error("Expected the field `metricOverrides` to be an array in the JSON data but got " + data['metricOverrides']);
        }
        // ensure the json data is a string
        if (data['metricSource'] && !(typeof data['metricSource'] === 'string' || data['metricSource'] instanceof String)) {
            throw new Error("Expected the field `metricSource` to be a primitive type in the JSON string but got " + data['metricSource']);
        }

        return true;
    }


}



/**
 * Optional. Specify one or more Custom metrics (https://cloud.google.com/dataproc/docs/guides/dataproc-metrics#custom_metrics) to collect for the metric course (for the SPARK metric source (any Spark metric (https://spark.apache.org/docs/latest/monitoring.html#metrics) can be specified).Provide metrics in the following format: METRIC_SOURCE: INSTANCE:GROUP:METRIC Use camelcase as appropriate.Examples: yarn:ResourceManager:QueueMetrics:AppsCompleted spark:driver:DAGScheduler:job.allJobs sparkHistoryServer:JVM:Memory:NonHeapMemoryUsage.committed hiveserver2:JVM:Memory:NonHeapMemoryUsage.used Notes: Only the specified overridden metrics are collected for the metric source. For example, if one or more spark:executive metrics are listed as metric overrides, other SPARK metrics are not collected. The collection of the metrics for other enabled custom metric sources is unaffected. For example, if both SPARK andd YARN metric sources are enabled, and overrides are provided for Spark metrics only, all YARN metrics are collected.
 * @member {Array.<String>} metricOverrides
 */
Metric.prototype['metricOverrides'] = undefined;

/**
 * Required. A standard set of metrics is collected unless metricOverrides are specified for the metric source (see Custom metrics (https://cloud.google.com/dataproc/docs/guides/dataproc-metrics#custom_metrics) for more information).
 * @member {module:model/Metric.MetricSourceEnum} metricSource
 */
Metric.prototype['metricSource'] = undefined;





/**
 * Allowed values for the <code>metricSource</code> property.
 * @enum {String}
 * @readonly
 */
Metric['MetricSourceEnum'] = {

    /**
     * value: "METRIC_SOURCE_UNSPECIFIED"
     * @const
     */
    "METRIC_SOURCE_UNSPECIFIED": "METRIC_SOURCE_UNSPECIFIED",

    /**
     * value: "MONITORING_AGENT_DEFAULTS"
     * @const
     */
    "MONITORING_AGENT_DEFAULTS": "MONITORING_AGENT_DEFAULTS",

    /**
     * value: "HDFS"
     * @const
     */
    "HDFS": "HDFS",

    /**
     * value: "SPARK"
     * @const
     */
    "SPARK": "SPARK",

    /**
     * value: "YARN"
     * @const
     */
    "YARN": "YARN",

    /**
     * value: "SPARK_HISTORY_SERVER"
     * @const
     */
    "SPARK_HISTORY_SERVER": "SPARK_HISTORY_SERVER",

    /**
     * value: "HIVESERVER2"
     * @const
     */
    "HIVESERVER2": "HIVESERVER2",

    /**
     * value: "HIVEMETASTORE"
     * @const
     */
    "HIVEMETASTORE": "HIVEMETASTORE",

    /**
     * value: "FLINK"
     * @const
     */
    "FLINK": "FLINK"
};



export default Metric;

