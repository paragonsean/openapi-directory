/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstanceGroupConfig from './InstanceGroupConfig';

/**
 * The NodeGroup model module.
 * @module model/NodeGroup
 * @version v1
 */
class NodeGroup {
    /**
     * Constructs a new <code>NodeGroup</code>.
     * Dataproc Node Group. The Dataproc NodeGroup resource is not related to the Dataproc NodeGroupAffinity resource.
     * @alias module:model/NodeGroup
     */
    constructor() { 
        
        NodeGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeGroup} obj Optional instance to populate.
     * @return {module:model/NodeGroup} The populated <code>NodeGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeGroup();

            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nodeGroupConfig')) {
                obj['nodeGroupConfig'] = InstanceGroupConfig.constructFromObject(data['nodeGroupConfig']);
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeGroup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `nodeGroupConfig`
        if (data['nodeGroupConfig']) { // data not null
          InstanceGroupConfig.validateJSON(data['nodeGroupConfig']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['roles'])) {
            throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
        }

        return true;
    }


}



/**
 * Optional. Node group labels. Label keys must consist of from 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values can be empty. If specified, they must consist of from 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). The node group must have no more than 32 labelsn.
 * @member {Object.<String, String>} labels
 */
NodeGroup.prototype['labels'] = undefined;

/**
 * The Node group resource name (https://aip.dev/122).
 * @member {String} name
 */
NodeGroup.prototype['name'] = undefined;

/**
 * @member {module:model/InstanceGroupConfig} nodeGroupConfig
 */
NodeGroup.prototype['nodeGroupConfig'] = undefined;

/**
 * Required. Node group roles.
 * @member {Array.<module:model/NodeGroup.RolesEnum>} roles
 */
NodeGroup.prototype['roles'] = undefined;





/**
 * Allowed values for the <code>roles</code> property.
 * @enum {String}
 * @readonly
 */
NodeGroup['RolesEnum'] = {

    /**
     * value: "ROLE_UNSPECIFIED"
     * @const
     */
    "ROLE_UNSPECIFIED": "ROLE_UNSPECIFIED",

    /**
     * value: "DRIVER"
     * @const
     */
    "DRIVER": "DRIVER"
};



export default NodeGroup;

