/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SoftwareConfig model module.
 * @module model/SoftwareConfig
 * @version v1
 */
class SoftwareConfig {
    /**
     * Constructs a new <code>SoftwareConfig</code>.
     * Specifies the selection and config of software inside the cluster.
     * @alias module:model/SoftwareConfig
     */
    constructor() { 
        
        SoftwareConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SoftwareConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SoftwareConfig} obj Optional instance to populate.
     * @return {module:model/SoftwareConfig} The populated <code>SoftwareConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SoftwareConfig();

            if (data.hasOwnProperty('imageVersion')) {
                obj['imageVersion'] = ApiClient.convertToType(data['imageVersion'], 'String');
            }
            if (data.hasOwnProperty('optionalComponents')) {
                obj['optionalComponents'] = ApiClient.convertToType(data['optionalComponents'], ['String']);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SoftwareConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SoftwareConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['imageVersion'] && !(typeof data['imageVersion'] === 'string' || data['imageVersion'] instanceof String)) {
            throw new Error("Expected the field `imageVersion` to be a primitive type in the JSON string but got " + data['imageVersion']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['optionalComponents'])) {
            throw new Error("Expected the field `optionalComponents` to be an array in the JSON data but got " + data['optionalComponents']);
        }

        return true;
    }


}



/**
 * Optional. The version of software inside the cluster. It must be one of the supported Dataproc Versions (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#supported_dataproc_versions), such as \"1.2\" (including a subminor version, such as \"1.2.29\"), or the \"preview\" version (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#other_versions). If unspecified, it defaults to the latest Debian version.
 * @member {String} imageVersion
 */
SoftwareConfig.prototype['imageVersion'] = undefined;

/**
 * Optional. The set of components to activate on the cluster.
 * @member {Array.<module:model/SoftwareConfig.OptionalComponentsEnum>} optionalComponents
 */
SoftwareConfig.prototype['optionalComponents'] = undefined;

/**
 * Optional. The properties to set on daemon config files.Property keys are specified in prefix:property format, for example core:hadoop.tmp.dir. The following are supported prefixes and their mappings: capacity-scheduler: capacity-scheduler.xml core: core-site.xml distcp: distcp-default.xml hdfs: hdfs-site.xml hive: hive-site.xml mapred: mapred-site.xml pig: pig.properties spark: spark-defaults.conf yarn: yarn-site.xmlFor more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).
 * @member {Object.<String, String>} properties
 */
SoftwareConfig.prototype['properties'] = undefined;





/**
 * Allowed values for the <code>optionalComponents</code> property.
 * @enum {String}
 * @readonly
 */
SoftwareConfig['OptionalComponentsEnum'] = {

    /**
     * value: "COMPONENT_UNSPECIFIED"
     * @const
     */
    "COMPONENT_UNSPECIFIED": "COMPONENT_UNSPECIFIED",

    /**
     * value: "ANACONDA"
     * @const
     */
    "ANACONDA": "ANACONDA",

    /**
     * value: "DOCKER"
     * @const
     */
    "DOCKER": "DOCKER",

    /**
     * value: "DRUID"
     * @const
     */
    "DRUID": "DRUID",

    /**
     * value: "FLINK"
     * @const
     */
    "FLINK": "FLINK",

    /**
     * value: "HBASE"
     * @const
     */
    "HBASE": "HBASE",

    /**
     * value: "HIVE_WEBHCAT"
     * @const
     */
    "HIVE_WEBHCAT": "HIVE_WEBHCAT",

    /**
     * value: "HUDI"
     * @const
     */
    "HUDI": "HUDI",

    /**
     * value: "JUPYTER"
     * @const
     */
    "JUPYTER": "JUPYTER",

    /**
     * value: "PRESTO"
     * @const
     */
    "PRESTO": "PRESTO",

    /**
     * value: "TRINO"
     * @const
     */
    "TRINO": "TRINO",

    /**
     * value: "RANGER"
     * @const
     */
    "RANGER": "RANGER",

    /**
     * value: "SOLR"
     * @const
     */
    "SOLR": "SOLR",

    /**
     * value: "ZEPPELIN"
     * @const
     */
    "ZEPPELIN": "ZEPPELIN",

    /**
     * value: "ZOOKEEPER"
     * @const
     */
    "ZOOKEEPER": "ZOOKEEPER"
};



export default SoftwareConfig;

