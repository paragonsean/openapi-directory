/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UsageMetrics from './UsageMetrics';
import UsageSnapshot from './UsageSnapshot';

/**
 * The RuntimeInfo model module.
 * @module model/RuntimeInfo
 * @version v1
 */
class RuntimeInfo {
    /**
     * Constructs a new <code>RuntimeInfo</code>.
     * Runtime information about workload execution.
     * @alias module:model/RuntimeInfo
     */
    constructor() { 
        
        RuntimeInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RuntimeInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuntimeInfo} obj Optional instance to populate.
     * @return {module:model/RuntimeInfo} The populated <code>RuntimeInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuntimeInfo();

            if (data.hasOwnProperty('approximateUsage')) {
                obj['approximateUsage'] = UsageMetrics.constructFromObject(data['approximateUsage']);
            }
            if (data.hasOwnProperty('currentUsage')) {
                obj['currentUsage'] = UsageSnapshot.constructFromObject(data['currentUsage']);
            }
            if (data.hasOwnProperty('diagnosticOutputUri')) {
                obj['diagnosticOutputUri'] = ApiClient.convertToType(data['diagnosticOutputUri'], 'String');
            }
            if (data.hasOwnProperty('endpoints')) {
                obj['endpoints'] = ApiClient.convertToType(data['endpoints'], {'String': 'String'});
            }
            if (data.hasOwnProperty('outputUri')) {
                obj['outputUri'] = ApiClient.convertToType(data['outputUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RuntimeInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RuntimeInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `approximateUsage`
        if (data['approximateUsage']) { // data not null
          UsageMetrics.validateJSON(data['approximateUsage']);
        }
        // validate the optional field `currentUsage`
        if (data['currentUsage']) { // data not null
          UsageSnapshot.validateJSON(data['currentUsage']);
        }
        // ensure the json data is a string
        if (data['diagnosticOutputUri'] && !(typeof data['diagnosticOutputUri'] === 'string' || data['diagnosticOutputUri'] instanceof String)) {
            throw new Error("Expected the field `diagnosticOutputUri` to be a primitive type in the JSON string but got " + data['diagnosticOutputUri']);
        }
        // ensure the json data is a string
        if (data['outputUri'] && !(typeof data['outputUri'] === 'string' || data['outputUri'] instanceof String)) {
            throw new Error("Expected the field `outputUri` to be a primitive type in the JSON string but got " + data['outputUri']);
        }

        return true;
    }


}



/**
 * @member {module:model/UsageMetrics} approximateUsage
 */
RuntimeInfo.prototype['approximateUsage'] = undefined;

/**
 * @member {module:model/UsageSnapshot} currentUsage
 */
RuntimeInfo.prototype['currentUsage'] = undefined;

/**
 * Output only. A URI pointing to the location of the diagnostics tarball.
 * @member {String} diagnosticOutputUri
 */
RuntimeInfo.prototype['diagnosticOutputUri'] = undefined;

/**
 * Output only. Map of remote access endpoints (such as web interfaces and APIs) to their URIs.
 * @member {Object.<String, String>} endpoints
 */
RuntimeInfo.prototype['endpoints'] = undefined;

/**
 * Output only. A URI pointing to the location of the stdout and stderr of the workload.
 * @member {String} outputUri
 */
RuntimeInfo.prototype['outputUri'] = undefined;






export default RuntimeInfo;

