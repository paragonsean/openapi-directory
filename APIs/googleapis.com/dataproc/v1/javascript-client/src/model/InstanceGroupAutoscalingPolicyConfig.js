/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InstanceGroupAutoscalingPolicyConfig model module.
 * @module model/InstanceGroupAutoscalingPolicyConfig
 * @version v1
 */
class InstanceGroupAutoscalingPolicyConfig {
    /**
     * Constructs a new <code>InstanceGroupAutoscalingPolicyConfig</code>.
     * Configuration for the size bounds of an instance group, including its proportional size to other groups.
     * @alias module:model/InstanceGroupAutoscalingPolicyConfig
     */
    constructor() { 
        
        InstanceGroupAutoscalingPolicyConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstanceGroupAutoscalingPolicyConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstanceGroupAutoscalingPolicyConfig} obj Optional instance to populate.
     * @return {module:model/InstanceGroupAutoscalingPolicyConfig} The populated <code>InstanceGroupAutoscalingPolicyConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstanceGroupAutoscalingPolicyConfig();

            if (data.hasOwnProperty('maxInstances')) {
                obj['maxInstances'] = ApiClient.convertToType(data['maxInstances'], 'Number');
            }
            if (data.hasOwnProperty('minInstances')) {
                obj['minInstances'] = ApiClient.convertToType(data['minInstances'], 'Number');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstanceGroupAutoscalingPolicyConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstanceGroupAutoscalingPolicyConfig</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Required. Maximum number of instances for this group. Required for primary workers. Note that by default, clusters will not use secondary workers. Required for secondary workers if the minimum secondary instances is set.Primary workers - Bounds: [min_instances, ). Secondary workers - Bounds: [min_instances, ). Default: 0.
 * @member {Number} maxInstances
 */
InstanceGroupAutoscalingPolicyConfig.prototype['maxInstances'] = undefined;

/**
 * Optional. Minimum number of instances for this group.Primary workers - Bounds: 2, max_instances. Default: 2. Secondary workers - Bounds: 0, max_instances. Default: 0.
 * @member {Number} minInstances
 */
InstanceGroupAutoscalingPolicyConfig.prototype['minInstances'] = undefined;

/**
 * Optional. Weight for the instance group, which is used to determine the fraction of total workers in the cluster from this instance group. For example, if primary workers have weight 2, and secondary workers have weight 1, the cluster will have approximately 2 primary workers for each secondary worker.The cluster may not reach the specified balance if constrained by min/max bounds or other autoscaling settings. For example, if max_instances for secondary workers is 0, then only primary workers will be added. The cluster can also be out of balance when created.If weight is not set on any instance group, the cluster will default to equal weight for all groups: the cluster will attempt to maintain an equal number of workers in each group within the configured size bounds for each group. If weight is set for one group only, the cluster will default to zero weight on the unset group. For example if weight is set only on primary workers, the cluster will use primary workers only and no secondary workers.
 * @member {Number} weight
 */
InstanceGroupAutoscalingPolicyConfig.prototype['weight'] = undefined;






export default InstanceGroupAutoscalingPolicyConfig;

