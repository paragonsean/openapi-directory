/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnvironmentConfig from './EnvironmentConfig';
import JupyterConfig from './JupyterConfig';
import RuntimeConfig from './RuntimeConfig';

/**
 * The SessionTemplate model module.
 * @module model/SessionTemplate
 * @version v1
 */
class SessionTemplate {
    /**
     * Constructs a new <code>SessionTemplate</code>.
     * A representation of a session template.
     * @alias module:model/SessionTemplate
     */
    constructor() { 
        
        SessionTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SessionTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SessionTemplate} obj Optional instance to populate.
     * @return {module:model/SessionTemplate} The populated <code>SessionTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SessionTemplate();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = ApiClient.convertToType(data['creator'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('environmentConfig')) {
                obj['environmentConfig'] = EnvironmentConfig.constructFromObject(data['environmentConfig']);
            }
            if (data.hasOwnProperty('jupyterSession')) {
                obj['jupyterSession'] = JupyterConfig.constructFromObject(data['jupyterSession']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('runtimeConfig')) {
                obj['runtimeConfig'] = RuntimeConfig.constructFromObject(data['runtimeConfig']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SessionTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SessionTemplate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['creator'] && !(typeof data['creator'] === 'string' || data['creator'] instanceof String)) {
            throw new Error("Expected the field `creator` to be a primitive type in the JSON string but got " + data['creator']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `environmentConfig`
        if (data['environmentConfig']) { // data not null
          EnvironmentConfig.validateJSON(data['environmentConfig']);
        }
        // validate the optional field `jupyterSession`
        if (data['jupyterSession']) { // data not null
          JupyterConfig.validateJSON(data['jupyterSession']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `runtimeConfig`
        if (data['runtimeConfig']) { // data not null
          RuntimeConfig.validateJSON(data['runtimeConfig']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}



/**
 * Output only. The time when the template was created.
 * @member {String} createTime
 */
SessionTemplate.prototype['createTime'] = undefined;

/**
 * Output only. The email address of the user who created the template.
 * @member {String} creator
 */
SessionTemplate.prototype['creator'] = undefined;

/**
 * Optional. Brief description of the template.
 * @member {String} description
 */
SessionTemplate.prototype['description'] = undefined;

/**
 * @member {module:model/EnvironmentConfig} environmentConfig
 */
SessionTemplate.prototype['environmentConfig'] = undefined;

/**
 * @member {module:model/JupyterConfig} jupyterSession
 */
SessionTemplate.prototype['jupyterSession'] = undefined;

/**
 * Optional. Labels to associate with sessions created using this template. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values can be empty, but, if present, must contain 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
 * @member {Object.<String, String>} labels
 */
SessionTemplate.prototype['labels'] = undefined;

/**
 * Required. The resource name of the session template.
 * @member {String} name
 */
SessionTemplate.prototype['name'] = undefined;

/**
 * @member {module:model/RuntimeConfig} runtimeConfig
 */
SessionTemplate.prototype['runtimeConfig'] = undefined;

/**
 * Output only. The time the template was last updated.
 * @member {String} updateTime
 */
SessionTemplate.prototype['updateTime'] = undefined;

/**
 * Output only. A session template UUID (Unique Universal Identifier). The service generates this value when it creates the session template.
 * @member {String} uuid
 */
SessionTemplate.prototype['uuid'] = undefined;






export default SessionTemplate;

