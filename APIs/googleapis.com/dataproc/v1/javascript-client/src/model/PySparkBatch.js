/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PySparkBatch model module.
 * @module model/PySparkBatch
 * @version v1
 */
class PySparkBatch {
    /**
     * Constructs a new <code>PySparkBatch</code>.
     * A configuration for running an Apache PySpark (https://spark.apache.org/docs/latest/api/python/getting_started/quickstart.html) batch workload.
     * @alias module:model/PySparkBatch
     */
    constructor() { 
        
        PySparkBatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PySparkBatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PySparkBatch} obj Optional instance to populate.
     * @return {module:model/PySparkBatch} The populated <code>PySparkBatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PySparkBatch();

            if (data.hasOwnProperty('archiveUris')) {
                obj['archiveUris'] = ApiClient.convertToType(data['archiveUris'], ['String']);
            }
            if (data.hasOwnProperty('args')) {
                obj['args'] = ApiClient.convertToType(data['args'], ['String']);
            }
            if (data.hasOwnProperty('fileUris')) {
                obj['fileUris'] = ApiClient.convertToType(data['fileUris'], ['String']);
            }
            if (data.hasOwnProperty('jarFileUris')) {
                obj['jarFileUris'] = ApiClient.convertToType(data['jarFileUris'], ['String']);
            }
            if (data.hasOwnProperty('mainPythonFileUri')) {
                obj['mainPythonFileUri'] = ApiClient.convertToType(data['mainPythonFileUri'], 'String');
            }
            if (data.hasOwnProperty('pythonFileUris')) {
                obj['pythonFileUris'] = ApiClient.convertToType(data['pythonFileUris'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PySparkBatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PySparkBatch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['archiveUris'])) {
            throw new Error("Expected the field `archiveUris` to be an array in the JSON data but got " + data['archiveUris']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['args'])) {
            throw new Error("Expected the field `args` to be an array in the JSON data but got " + data['args']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fileUris'])) {
            throw new Error("Expected the field `fileUris` to be an array in the JSON data but got " + data['fileUris']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['jarFileUris'])) {
            throw new Error("Expected the field `jarFileUris` to be an array in the JSON data but got " + data['jarFileUris']);
        }
        // ensure the json data is a string
        if (data['mainPythonFileUri'] && !(typeof data['mainPythonFileUri'] === 'string' || data['mainPythonFileUri'] instanceof String)) {
            throw new Error("Expected the field `mainPythonFileUri` to be a primitive type in the JSON string but got " + data['mainPythonFileUri']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pythonFileUris'])) {
            throw new Error("Expected the field `pythonFileUris` to be an array in the JSON data but got " + data['pythonFileUris']);
        }

        return true;
    }


}



/**
 * Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
 * @member {Array.<String>} archiveUris
 */
PySparkBatch.prototype['archiveUris'] = undefined;

/**
 * Optional. The arguments to pass to the driver. Do not include arguments that can be set as batch properties, such as --conf, since a collision can occur that causes an incorrect batch submission.
 * @member {Array.<String>} args
 */
PySparkBatch.prototype['args'] = undefined;

/**
 * Optional. HCFS URIs of files to be placed in the working directory of each executor.
 * @member {Array.<String>} fileUris
 */
PySparkBatch.prototype['fileUris'] = undefined;

/**
 * Optional. HCFS URIs of jar files to add to the classpath of the Spark driver and tasks.
 * @member {Array.<String>} jarFileUris
 */
PySparkBatch.prototype['jarFileUris'] = undefined;

/**
 * Required. The HCFS URI of the main Python file to use as the Spark driver. Must be a .py file.
 * @member {String} mainPythonFileUri
 */
PySparkBatch.prototype['mainPythonFileUri'] = undefined;

/**
 * Optional. HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.
 * @member {Array.<String>} pythonFileUris
 */
PySparkBatch.prototype['pythonFileUris'] = undefined;






export default PySparkBatch;

