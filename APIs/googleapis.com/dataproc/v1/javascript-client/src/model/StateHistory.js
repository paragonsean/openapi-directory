/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StateHistory model module.
 * @module model/StateHistory
 * @version v1
 */
class StateHistory {
    /**
     * Constructs a new <code>StateHistory</code>.
     * Historical state information.
     * @alias module:model/StateHistory
     */
    constructor() { 
        
        StateHistory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StateHistory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StateHistory} obj Optional instance to populate.
     * @return {module:model/StateHistory} The populated <code>StateHistory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StateHistory();

            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateMessage')) {
                obj['stateMessage'] = ApiClient.convertToType(data['stateMessage'], 'String');
            }
            if (data.hasOwnProperty('stateStartTime')) {
                obj['stateStartTime'] = ApiClient.convertToType(data['stateStartTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StateHistory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StateHistory</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateMessage'] && !(typeof data['stateMessage'] === 'string' || data['stateMessage'] instanceof String)) {
            throw new Error("Expected the field `stateMessage` to be a primitive type in the JSON string but got " + data['stateMessage']);
        }
        // ensure the json data is a string
        if (data['stateStartTime'] && !(typeof data['stateStartTime'] === 'string' || data['stateStartTime'] instanceof String)) {
            throw new Error("Expected the field `stateStartTime` to be a primitive type in the JSON string but got " + data['stateStartTime']);
        }

        return true;
    }


}



/**
 * Output only. The state of the batch at this point in history.
 * @member {module:model/StateHistory.StateEnum} state
 */
StateHistory.prototype['state'] = undefined;

/**
 * Output only. Details about the state at this point in history.
 * @member {String} stateMessage
 */
StateHistory.prototype['stateMessage'] = undefined;

/**
 * Output only. The time when the batch entered the historical state.
 * @member {String} stateStartTime
 */
StateHistory.prototype['stateStartTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
StateHistory['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "CANCELLING"
     * @const
     */
    "CANCELLING": "CANCELLING",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default StateHistory;

