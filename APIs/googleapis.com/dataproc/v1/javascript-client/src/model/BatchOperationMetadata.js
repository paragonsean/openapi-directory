/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BatchOperationMetadata model module.
 * @module model/BatchOperationMetadata
 * @version v1
 */
class BatchOperationMetadata {
    /**
     * Constructs a new <code>BatchOperationMetadata</code>.
     * Metadata describing the Batch operation.
     * @alias module:model/BatchOperationMetadata
     */
    constructor() { 
        
        BatchOperationMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BatchOperationMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchOperationMetadata} obj Optional instance to populate.
     * @return {module:model/BatchOperationMetadata} The populated <code>BatchOperationMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchOperationMetadata();

            if (data.hasOwnProperty('batch')) {
                obj['batch'] = ApiClient.convertToType(data['batch'], 'String');
            }
            if (data.hasOwnProperty('batchUuid')) {
                obj['batchUuid'] = ApiClient.convertToType(data['batchUuid'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('doneTime')) {
                obj['doneTime'] = ApiClient.convertToType(data['doneTime'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('operationType')) {
                obj['operationType'] = ApiClient.convertToType(data['operationType'], 'String');
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchOperationMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchOperationMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['batch'] && !(typeof data['batch'] === 'string' || data['batch'] instanceof String)) {
            throw new Error("Expected the field `batch` to be a primitive type in the JSON string but got " + data['batch']);
        }
        // ensure the json data is a string
        if (data['batchUuid'] && !(typeof data['batchUuid'] === 'string' || data['batchUuid'] instanceof String)) {
            throw new Error("Expected the field `batchUuid` to be a primitive type in the JSON string but got " + data['batchUuid']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['doneTime'] && !(typeof data['doneTime'] === 'string' || data['doneTime'] instanceof String)) {
            throw new Error("Expected the field `doneTime` to be a primitive type in the JSON string but got " + data['doneTime']);
        }
        // ensure the json data is a string
        if (data['operationType'] && !(typeof data['operationType'] === 'string' || data['operationType'] instanceof String)) {
            throw new Error("Expected the field `operationType` to be a primitive type in the JSON string but got " + data['operationType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['warnings'])) {
            throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
        }

        return true;
    }


}



/**
 * Name of the batch for the operation.
 * @member {String} batch
 */
BatchOperationMetadata.prototype['batch'] = undefined;

/**
 * Batch UUID for the operation.
 * @member {String} batchUuid
 */
BatchOperationMetadata.prototype['batchUuid'] = undefined;

/**
 * The time when the operation was created.
 * @member {String} createTime
 */
BatchOperationMetadata.prototype['createTime'] = undefined;

/**
 * Short description of the operation.
 * @member {String} description
 */
BatchOperationMetadata.prototype['description'] = undefined;

/**
 * The time when the operation finished.
 * @member {String} doneTime
 */
BatchOperationMetadata.prototype['doneTime'] = undefined;

/**
 * Labels associated with the operation.
 * @member {Object.<String, String>} labels
 */
BatchOperationMetadata.prototype['labels'] = undefined;

/**
 * The operation type.
 * @member {module:model/BatchOperationMetadata.OperationTypeEnum} operationType
 */
BatchOperationMetadata.prototype['operationType'] = undefined;

/**
 * Warnings encountered during operation execution.
 * @member {Array.<String>} warnings
 */
BatchOperationMetadata.prototype['warnings'] = undefined;





/**
 * Allowed values for the <code>operationType</code> property.
 * @enum {String}
 * @readonly
 */
BatchOperationMetadata['OperationTypeEnum'] = {

    /**
     * value: "BATCH_OPERATION_TYPE_UNSPECIFIED"
     * @const
     */
    "BATCH_OPERATION_TYPE_UNSPECIFIED": "BATCH_OPERATION_TYPE_UNSPECIFIED",

    /**
     * value: "BATCH"
     * @const
     */
    "BATCH": "BATCH"
};



export default BatchOperationMetadata;

