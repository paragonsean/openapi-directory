/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutoscalingConfig from './AutoscalingConfig';
import AuxiliaryNodeGroup from './AuxiliaryNodeGroup';
import DataprocMetricConfig from './DataprocMetricConfig';
import EncryptionConfig from './EncryptionConfig';
import EndpointConfig from './EndpointConfig';
import GceClusterConfig from './GceClusterConfig';
import GkeClusterConfig from './GkeClusterConfig';
import InstanceGroupConfig from './InstanceGroupConfig';
import LifecycleConfig from './LifecycleConfig';
import MetastoreConfig from './MetastoreConfig';
import NodeInitializationAction from './NodeInitializationAction';
import SecurityConfig from './SecurityConfig';
import SoftwareConfig from './SoftwareConfig';

/**
 * The ClusterConfig model module.
 * @module model/ClusterConfig
 * @version v1
 */
class ClusterConfig {
    /**
     * Constructs a new <code>ClusterConfig</code>.
     * The cluster config.
     * @alias module:model/ClusterConfig
     */
    constructor() { 
        
        ClusterConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClusterConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterConfig} obj Optional instance to populate.
     * @return {module:model/ClusterConfig} The populated <code>ClusterConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterConfig();

            if (data.hasOwnProperty('autoscalingConfig')) {
                obj['autoscalingConfig'] = AutoscalingConfig.constructFromObject(data['autoscalingConfig']);
            }
            if (data.hasOwnProperty('auxiliaryNodeGroups')) {
                obj['auxiliaryNodeGroups'] = ApiClient.convertToType(data['auxiliaryNodeGroups'], [AuxiliaryNodeGroup]);
            }
            if (data.hasOwnProperty('configBucket')) {
                obj['configBucket'] = ApiClient.convertToType(data['configBucket'], 'String');
            }
            if (data.hasOwnProperty('dataprocMetricConfig')) {
                obj['dataprocMetricConfig'] = DataprocMetricConfig.constructFromObject(data['dataprocMetricConfig']);
            }
            if (data.hasOwnProperty('encryptionConfig')) {
                obj['encryptionConfig'] = EncryptionConfig.constructFromObject(data['encryptionConfig']);
            }
            if (data.hasOwnProperty('endpointConfig')) {
                obj['endpointConfig'] = EndpointConfig.constructFromObject(data['endpointConfig']);
            }
            if (data.hasOwnProperty('gceClusterConfig')) {
                obj['gceClusterConfig'] = GceClusterConfig.constructFromObject(data['gceClusterConfig']);
            }
            if (data.hasOwnProperty('gkeClusterConfig')) {
                obj['gkeClusterConfig'] = GkeClusterConfig.constructFromObject(data['gkeClusterConfig']);
            }
            if (data.hasOwnProperty('initializationActions')) {
                obj['initializationActions'] = ApiClient.convertToType(data['initializationActions'], [NodeInitializationAction]);
            }
            if (data.hasOwnProperty('lifecycleConfig')) {
                obj['lifecycleConfig'] = LifecycleConfig.constructFromObject(data['lifecycleConfig']);
            }
            if (data.hasOwnProperty('masterConfig')) {
                obj['masterConfig'] = InstanceGroupConfig.constructFromObject(data['masterConfig']);
            }
            if (data.hasOwnProperty('metastoreConfig')) {
                obj['metastoreConfig'] = MetastoreConfig.constructFromObject(data['metastoreConfig']);
            }
            if (data.hasOwnProperty('secondaryWorkerConfig')) {
                obj['secondaryWorkerConfig'] = InstanceGroupConfig.constructFromObject(data['secondaryWorkerConfig']);
            }
            if (data.hasOwnProperty('securityConfig')) {
                obj['securityConfig'] = SecurityConfig.constructFromObject(data['securityConfig']);
            }
            if (data.hasOwnProperty('softwareConfig')) {
                obj['softwareConfig'] = SoftwareConfig.constructFromObject(data['softwareConfig']);
            }
            if (data.hasOwnProperty('tempBucket')) {
                obj['tempBucket'] = ApiClient.convertToType(data['tempBucket'], 'String');
            }
            if (data.hasOwnProperty('workerConfig')) {
                obj['workerConfig'] = InstanceGroupConfig.constructFromObject(data['workerConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `autoscalingConfig`
        if (data['autoscalingConfig']) { // data not null
          AutoscalingConfig.validateJSON(data['autoscalingConfig']);
        }
        if (data['auxiliaryNodeGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['auxiliaryNodeGroups'])) {
                throw new Error("Expected the field `auxiliaryNodeGroups` to be an array in the JSON data but got " + data['auxiliaryNodeGroups']);
            }
            // validate the optional field `auxiliaryNodeGroups` (array)
            for (const item of data['auxiliaryNodeGroups']) {
                AuxiliaryNodeGroup.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['configBucket'] && !(typeof data['configBucket'] === 'string' || data['configBucket'] instanceof String)) {
            throw new Error("Expected the field `configBucket` to be a primitive type in the JSON string but got " + data['configBucket']);
        }
        // validate the optional field `dataprocMetricConfig`
        if (data['dataprocMetricConfig']) { // data not null
          DataprocMetricConfig.validateJSON(data['dataprocMetricConfig']);
        }
        // validate the optional field `encryptionConfig`
        if (data['encryptionConfig']) { // data not null
          EncryptionConfig.validateJSON(data['encryptionConfig']);
        }
        // validate the optional field `endpointConfig`
        if (data['endpointConfig']) { // data not null
          EndpointConfig.validateJSON(data['endpointConfig']);
        }
        // validate the optional field `gceClusterConfig`
        if (data['gceClusterConfig']) { // data not null
          GceClusterConfig.validateJSON(data['gceClusterConfig']);
        }
        // validate the optional field `gkeClusterConfig`
        if (data['gkeClusterConfig']) { // data not null
          GkeClusterConfig.validateJSON(data['gkeClusterConfig']);
        }
        if (data['initializationActions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['initializationActions'])) {
                throw new Error("Expected the field `initializationActions` to be an array in the JSON data but got " + data['initializationActions']);
            }
            // validate the optional field `initializationActions` (array)
            for (const item of data['initializationActions']) {
                NodeInitializationAction.validateJSON(item);
            };
        }
        // validate the optional field `lifecycleConfig`
        if (data['lifecycleConfig']) { // data not null
          LifecycleConfig.validateJSON(data['lifecycleConfig']);
        }
        // validate the optional field `masterConfig`
        if (data['masterConfig']) { // data not null
          InstanceGroupConfig.validateJSON(data['masterConfig']);
        }
        // validate the optional field `metastoreConfig`
        if (data['metastoreConfig']) { // data not null
          MetastoreConfig.validateJSON(data['metastoreConfig']);
        }
        // validate the optional field `secondaryWorkerConfig`
        if (data['secondaryWorkerConfig']) { // data not null
          InstanceGroupConfig.validateJSON(data['secondaryWorkerConfig']);
        }
        // validate the optional field `securityConfig`
        if (data['securityConfig']) { // data not null
          SecurityConfig.validateJSON(data['securityConfig']);
        }
        // validate the optional field `softwareConfig`
        if (data['softwareConfig']) { // data not null
          SoftwareConfig.validateJSON(data['softwareConfig']);
        }
        // ensure the json data is a string
        if (data['tempBucket'] && !(typeof data['tempBucket'] === 'string' || data['tempBucket'] instanceof String)) {
            throw new Error("Expected the field `tempBucket` to be a primitive type in the JSON string but got " + data['tempBucket']);
        }
        // validate the optional field `workerConfig`
        if (data['workerConfig']) { // data not null
          InstanceGroupConfig.validateJSON(data['workerConfig']);
        }

        return true;
    }


}



/**
 * @member {module:model/AutoscalingConfig} autoscalingConfig
 */
ClusterConfig.prototype['autoscalingConfig'] = undefined;

/**
 * Optional. The node group settings.
 * @member {Array.<module:model/AuxiliaryNodeGroup>} auxiliaryNodeGroups
 */
ClusterConfig.prototype['auxiliaryNodeGroups'] = undefined;

/**
 * Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
 * @member {String} configBucket
 */
ClusterConfig.prototype['configBucket'] = undefined;

/**
 * @member {module:model/DataprocMetricConfig} dataprocMetricConfig
 */
ClusterConfig.prototype['dataprocMetricConfig'] = undefined;

/**
 * @member {module:model/EncryptionConfig} encryptionConfig
 */
ClusterConfig.prototype['encryptionConfig'] = undefined;

/**
 * @member {module:model/EndpointConfig} endpointConfig
 */
ClusterConfig.prototype['endpointConfig'] = undefined;

/**
 * @member {module:model/GceClusterConfig} gceClusterConfig
 */
ClusterConfig.prototype['gceClusterConfig'] = undefined;

/**
 * @member {module:model/GkeClusterConfig} gkeClusterConfig
 */
ClusterConfig.prototype['gkeClusterConfig'] = undefined;

/**
 * Optional. Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if [[ \"${ROLE}\" == 'Master' ]]; then ... master specific actions ... else ... worker specific actions ... fi 
 * @member {Array.<module:model/NodeInitializationAction>} initializationActions
 */
ClusterConfig.prototype['initializationActions'] = undefined;

/**
 * @member {module:model/LifecycleConfig} lifecycleConfig
 */
ClusterConfig.prototype['lifecycleConfig'] = undefined;

/**
 * @member {module:model/InstanceGroupConfig} masterConfig
 */
ClusterConfig.prototype['masterConfig'] = undefined;

/**
 * @member {module:model/MetastoreConfig} metastoreConfig
 */
ClusterConfig.prototype['metastoreConfig'] = undefined;

/**
 * @member {module:model/InstanceGroupConfig} secondaryWorkerConfig
 */
ClusterConfig.prototype['secondaryWorkerConfig'] = undefined;

/**
 * @member {module:model/SecurityConfig} securityConfig
 */
ClusterConfig.prototype['securityConfig'] = undefined;

/**
 * @member {module:model/SoftwareConfig} softwareConfig
 */
ClusterConfig.prototype['softwareConfig'] = undefined;

/**
 * Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
 * @member {String} tempBucket
 */
ClusterConfig.prototype['tempBucket'] = undefined;

/**
 * @member {module:model/InstanceGroupConfig} workerConfig
 */
ClusterConfig.prototype['workerConfig'] = undefined;






export default ClusterConfig;

