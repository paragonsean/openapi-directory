/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClusterConfig from './ClusterConfig';

/**
 * The ManagedCluster model module.
 * @module model/ManagedCluster
 * @version v1
 */
class ManagedCluster {
    /**
     * Constructs a new <code>ManagedCluster</code>.
     * Cluster that is managed by the workflow.
     * @alias module:model/ManagedCluster
     */
    constructor() { 
        
        ManagedCluster.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManagedCluster</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagedCluster} obj Optional instance to populate.
     * @return {module:model/ManagedCluster} The populated <code>ManagedCluster</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagedCluster();

            if (data.hasOwnProperty('clusterName')) {
                obj['clusterName'] = ApiClient.convertToType(data['clusterName'], 'String');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ClusterConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagedCluster</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagedCluster</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clusterName'] && !(typeof data['clusterName'] === 'string' || data['clusterName'] instanceof String)) {
            throw new Error("Expected the field `clusterName` to be a primitive type in the JSON string but got " + data['clusterName']);
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          ClusterConfig.validateJSON(data['config']);
        }

        return true;
    }


}



/**
 * Required. The cluster name prefix. A unique cluster name will be formed by appending a random suffix.The name must contain only lower-case letters (a-z), numbers (0-9), and hyphens (-). Must begin with a letter. Cannot begin or end with hyphen. Must consist of between 2 and 35 characters.
 * @member {String} clusterName
 */
ManagedCluster.prototype['clusterName'] = undefined;

/**
 * @member {module:model/ClusterConfig} config
 */
ManagedCluster.prototype['config'] = undefined;

/**
 * Optional. The labels to associate with this cluster.Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62}Label values must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}\\p{N}_-{0,63}No more than 32 labels can be associated with a given cluster.
 * @member {Object.<String, String>} labels
 */
ManagedCluster.prototype['labels'] = undefined;






export default ManagedCluster;

