/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Interval from './Interval';

/**
 * The DiagnoseClusterRequest model module.
 * @module model/DiagnoseClusterRequest
 * @version v1
 */
class DiagnoseClusterRequest {
    /**
     * Constructs a new <code>DiagnoseClusterRequest</code>.
     * A request to collect cluster diagnostic information.
     * @alias module:model/DiagnoseClusterRequest
     */
    constructor() { 
        
        DiagnoseClusterRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiagnoseClusterRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiagnoseClusterRequest} obj Optional instance to populate.
     * @return {module:model/DiagnoseClusterRequest} The populated <code>DiagnoseClusterRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiagnoseClusterRequest();

            if (data.hasOwnProperty('diagnosisInterval')) {
                obj['diagnosisInterval'] = Interval.constructFromObject(data['diagnosisInterval']);
            }
            if (data.hasOwnProperty('job')) {
                obj['job'] = ApiClient.convertToType(data['job'], 'String');
            }
            if (data.hasOwnProperty('jobs')) {
                obj['jobs'] = ApiClient.convertToType(data['jobs'], ['String']);
            }
            if (data.hasOwnProperty('tarballAccess')) {
                obj['tarballAccess'] = ApiClient.convertToType(data['tarballAccess'], 'String');
            }
            if (data.hasOwnProperty('tarballGcsDir')) {
                obj['tarballGcsDir'] = ApiClient.convertToType(data['tarballGcsDir'], 'String');
            }
            if (data.hasOwnProperty('yarnApplicationId')) {
                obj['yarnApplicationId'] = ApiClient.convertToType(data['yarnApplicationId'], 'String');
            }
            if (data.hasOwnProperty('yarnApplicationIds')) {
                obj['yarnApplicationIds'] = ApiClient.convertToType(data['yarnApplicationIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiagnoseClusterRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiagnoseClusterRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `diagnosisInterval`
        if (data['diagnosisInterval']) { // data not null
          Interval.validateJSON(data['diagnosisInterval']);
        }
        // ensure the json data is a string
        if (data['job'] && !(typeof data['job'] === 'string' || data['job'] instanceof String)) {
            throw new Error("Expected the field `job` to be a primitive type in the JSON string but got " + data['job']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['jobs'])) {
            throw new Error("Expected the field `jobs` to be an array in the JSON data but got " + data['jobs']);
        }
        // ensure the json data is a string
        if (data['tarballAccess'] && !(typeof data['tarballAccess'] === 'string' || data['tarballAccess'] instanceof String)) {
            throw new Error("Expected the field `tarballAccess` to be a primitive type in the JSON string but got " + data['tarballAccess']);
        }
        // ensure the json data is a string
        if (data['tarballGcsDir'] && !(typeof data['tarballGcsDir'] === 'string' || data['tarballGcsDir'] instanceof String)) {
            throw new Error("Expected the field `tarballGcsDir` to be a primitive type in the JSON string but got " + data['tarballGcsDir']);
        }
        // ensure the json data is a string
        if (data['yarnApplicationId'] && !(typeof data['yarnApplicationId'] === 'string' || data['yarnApplicationId'] instanceof String)) {
            throw new Error("Expected the field `yarnApplicationId` to be a primitive type in the JSON string but got " + data['yarnApplicationId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['yarnApplicationIds'])) {
            throw new Error("Expected the field `yarnApplicationIds` to be an array in the JSON data but got " + data['yarnApplicationIds']);
        }

        return true;
    }


}



/**
 * @member {module:model/Interval} diagnosisInterval
 */
DiagnoseClusterRequest.prototype['diagnosisInterval'] = undefined;

/**
 * Optional. DEPRECATED Specifies the job on which diagnosis is to be performed. Format: projects/{project}/regions/{region}/jobs/{job}
 * @member {String} job
 */
DiagnoseClusterRequest.prototype['job'] = undefined;

/**
 * Optional. Specifies a list of jobs on which diagnosis is to be performed. Format: projects/{project}/regions/{region}/jobs/{job}
 * @member {Array.<String>} jobs
 */
DiagnoseClusterRequest.prototype['jobs'] = undefined;

/**
 * Optional. (Optional) The access type to the diagnostic tarball. If not specified, falls back to default access of the bucket
 * @member {module:model/DiagnoseClusterRequest.TarballAccessEnum} tarballAccess
 */
DiagnoseClusterRequest.prototype['tarballAccess'] = undefined;

/**
 * Optional. (Optional) The output Cloud Storage directory for the diagnostic tarball. If not specified, a task-specific directory in the cluster's staging bucket will be used.
 * @member {String} tarballGcsDir
 */
DiagnoseClusterRequest.prototype['tarballGcsDir'] = undefined;

/**
 * Optional. DEPRECATED Specifies the yarn application on which diagnosis is to be performed.
 * @member {String} yarnApplicationId
 */
DiagnoseClusterRequest.prototype['yarnApplicationId'] = undefined;

/**
 * Optional. Specifies a list of yarn applications on which diagnosis is to be performed.
 * @member {Array.<String>} yarnApplicationIds
 */
DiagnoseClusterRequest.prototype['yarnApplicationIds'] = undefined;





/**
 * Allowed values for the <code>tarballAccess</code> property.
 * @enum {String}
 * @readonly
 */
DiagnoseClusterRequest['TarballAccessEnum'] = {

    /**
     * value: "TARBALL_ACCESS_UNSPECIFIED"
     * @const
     */
    "TARBALL_ACCESS_UNSPECIFIED": "TARBALL_ACCESS_UNSPECIFIED",

    /**
     * value: "GOOGLE_CLOUD_SUPPORT"
     * @const
     */
    "GOOGLE_CLOUD_SUPPORT": "GOOGLE_CLOUD_SUPPORT",

    /**
     * value: "GOOGLE_DATAPROC_DIAGNOSE"
     * @const
     */
    "GOOGLE_DATAPROC_DIAGNOSE": "GOOGLE_DATAPROC_DIAGNOSE"
};



export default DiagnoseClusterRequest;

