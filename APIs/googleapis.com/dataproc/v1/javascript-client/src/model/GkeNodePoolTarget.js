/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GkeNodePoolConfig from './GkeNodePoolConfig';

/**
 * The GkeNodePoolTarget model module.
 * @module model/GkeNodePoolTarget
 * @version v1
 */
class GkeNodePoolTarget {
    /**
     * Constructs a new <code>GkeNodePoolTarget</code>.
     * GKE node pools that Dataproc workloads run on.
     * @alias module:model/GkeNodePoolTarget
     */
    constructor() { 
        
        GkeNodePoolTarget.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GkeNodePoolTarget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GkeNodePoolTarget} obj Optional instance to populate.
     * @return {module:model/GkeNodePoolTarget} The populated <code>GkeNodePoolTarget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GkeNodePoolTarget();

            if (data.hasOwnProperty('nodePool')) {
                obj['nodePool'] = ApiClient.convertToType(data['nodePool'], 'String');
            }
            if (data.hasOwnProperty('nodePoolConfig')) {
                obj['nodePoolConfig'] = GkeNodePoolConfig.constructFromObject(data['nodePoolConfig']);
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GkeNodePoolTarget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GkeNodePoolTarget</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['nodePool'] && !(typeof data['nodePool'] === 'string' || data['nodePool'] instanceof String)) {
            throw new Error("Expected the field `nodePool` to be a primitive type in the JSON string but got " + data['nodePool']);
        }
        // validate the optional field `nodePoolConfig`
        if (data['nodePoolConfig']) { // data not null
          GkeNodePoolConfig.validateJSON(data['nodePoolConfig']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['roles'])) {
            throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
        }

        return true;
    }


}



/**
 * Required. The target GKE node pool. Format: 'projects/{project}/locations/{location}/clusters/{cluster}/nodePools/{node_pool}'
 * @member {String} nodePool
 */
GkeNodePoolTarget.prototype['nodePool'] = undefined;

/**
 * @member {module:model/GkeNodePoolConfig} nodePoolConfig
 */
GkeNodePoolTarget.prototype['nodePoolConfig'] = undefined;

/**
 * Required. The roles associated with the GKE node pool.
 * @member {Array.<module:model/GkeNodePoolTarget.RolesEnum>} roles
 */
GkeNodePoolTarget.prototype['roles'] = undefined;





/**
 * Allowed values for the <code>roles</code> property.
 * @enum {String}
 * @readonly
 */
GkeNodePoolTarget['RolesEnum'] = {

    /**
     * value: "ROLE_UNSPECIFIED"
     * @const
     */
    "ROLE_UNSPECIFIED": "ROLE_UNSPECIFIED",

    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT",

    /**
     * value: "CONTROLLER"
     * @const
     */
    "CONTROLLER": "CONTROLLER",

    /**
     * value: "SPARK_DRIVER"
     * @const
     */
    "SPARK_DRIVER": "SPARK_DRIVER",

    /**
     * value: "SPARK_EXECUTOR"
     * @const
     */
    "SPARK_EXECUTOR": "SPARK_EXECUTOR"
};



export default GkeNodePoolTarget;

