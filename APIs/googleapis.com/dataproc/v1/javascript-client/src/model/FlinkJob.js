/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoggingConfig from './LoggingConfig';

/**
 * The FlinkJob model module.
 * @module model/FlinkJob
 * @version v1
 */
class FlinkJob {
    /**
     * Constructs a new <code>FlinkJob</code>.
     * A Dataproc job for running Apache Flink applications on YARN.
     * @alias module:model/FlinkJob
     */
    constructor() { 
        
        FlinkJob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FlinkJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FlinkJob} obj Optional instance to populate.
     * @return {module:model/FlinkJob} The populated <code>FlinkJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FlinkJob();

            if (data.hasOwnProperty('args')) {
                obj['args'] = ApiClient.convertToType(data['args'], ['String']);
            }
            if (data.hasOwnProperty('jarFileUris')) {
                obj['jarFileUris'] = ApiClient.convertToType(data['jarFileUris'], ['String']);
            }
            if (data.hasOwnProperty('loggingConfig')) {
                obj['loggingConfig'] = LoggingConfig.constructFromObject(data['loggingConfig']);
            }
            if (data.hasOwnProperty('mainClass')) {
                obj['mainClass'] = ApiClient.convertToType(data['mainClass'], 'String');
            }
            if (data.hasOwnProperty('mainJarFileUri')) {
                obj['mainJarFileUri'] = ApiClient.convertToType(data['mainJarFileUri'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('savepointUri')) {
                obj['savepointUri'] = ApiClient.convertToType(data['savepointUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FlinkJob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FlinkJob</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['args'])) {
            throw new Error("Expected the field `args` to be an array in the JSON data but got " + data['args']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['jarFileUris'])) {
            throw new Error("Expected the field `jarFileUris` to be an array in the JSON data but got " + data['jarFileUris']);
        }
        // validate the optional field `loggingConfig`
        if (data['loggingConfig']) { // data not null
          LoggingConfig.validateJSON(data['loggingConfig']);
        }
        // ensure the json data is a string
        if (data['mainClass'] && !(typeof data['mainClass'] === 'string' || data['mainClass'] instanceof String)) {
            throw new Error("Expected the field `mainClass` to be a primitive type in the JSON string but got " + data['mainClass']);
        }
        // ensure the json data is a string
        if (data['mainJarFileUri'] && !(typeof data['mainJarFileUri'] === 'string' || data['mainJarFileUri'] instanceof String)) {
            throw new Error("Expected the field `mainJarFileUri` to be a primitive type in the JSON string but got " + data['mainJarFileUri']);
        }
        // ensure the json data is a string
        if (data['savepointUri'] && !(typeof data['savepointUri'] === 'string' || data['savepointUri'] instanceof String)) {
            throw new Error("Expected the field `savepointUri` to be a primitive type in the JSON string but got " + data['savepointUri']);
        }

        return true;
    }


}



/**
 * Optional. The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision might occur that causes an incorrect job submission.
 * @member {Array.<String>} args
 */
FlinkJob.prototype['args'] = undefined;

/**
 * Optional. HCFS URIs of jar files to add to the CLASSPATHs of the Flink driver and tasks.
 * @member {Array.<String>} jarFileUris
 */
FlinkJob.prototype['jarFileUris'] = undefined;

/**
 * @member {module:model/LoggingConfig} loggingConfig
 */
FlinkJob.prototype['loggingConfig'] = undefined;

/**
 * The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jarFileUris.
 * @member {String} mainClass
 */
FlinkJob.prototype['mainClass'] = undefined;

/**
 * The HCFS URI of the jar file that contains the main class.
 * @member {String} mainJarFileUri
 */
FlinkJob.prototype['mainJarFileUri'] = undefined;

/**
 * Optional. A mapping of property names to values, used to configure Flink. Properties that conflict with values set by the Dataproc API might beoverwritten. Can include properties set in/etc/flink/conf/flink-defaults.conf and classes in user code.
 * @member {Object.<String, String>} properties
 */
FlinkJob.prototype['properties'] = undefined;

/**
 * Optional. HCFS URI of the savepoint, which contains the last saved progress for starting the current job.
 * @member {String} savepointUri
 */
FlinkJob.prototype['savepointUri'] = undefined;






export default FlinkJob;

