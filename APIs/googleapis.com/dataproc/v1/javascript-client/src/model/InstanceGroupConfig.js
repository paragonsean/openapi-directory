/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcceleratorConfig from './AcceleratorConfig';
import DiskConfig from './DiskConfig';
import InstanceFlexibilityPolicy from './InstanceFlexibilityPolicy';
import InstanceReference from './InstanceReference';
import ManagedGroupConfig from './ManagedGroupConfig';
import StartupConfig from './StartupConfig';

/**
 * The InstanceGroupConfig model module.
 * @module model/InstanceGroupConfig
 * @version v1
 */
class InstanceGroupConfig {
    /**
     * Constructs a new <code>InstanceGroupConfig</code>.
     * The config settings for Compute Engine resources in an instance group, such as a master or worker group.
     * @alias module:model/InstanceGroupConfig
     */
    constructor() { 
        
        InstanceGroupConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstanceGroupConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstanceGroupConfig} obj Optional instance to populate.
     * @return {module:model/InstanceGroupConfig} The populated <code>InstanceGroupConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstanceGroupConfig();

            if (data.hasOwnProperty('accelerators')) {
                obj['accelerators'] = ApiClient.convertToType(data['accelerators'], [AcceleratorConfig]);
            }
            if (data.hasOwnProperty('diskConfig')) {
                obj['diskConfig'] = DiskConfig.constructFromObject(data['diskConfig']);
            }
            if (data.hasOwnProperty('imageUri')) {
                obj['imageUri'] = ApiClient.convertToType(data['imageUri'], 'String');
            }
            if (data.hasOwnProperty('instanceFlexibilityPolicy')) {
                obj['instanceFlexibilityPolicy'] = InstanceFlexibilityPolicy.constructFromObject(data['instanceFlexibilityPolicy']);
            }
            if (data.hasOwnProperty('instanceNames')) {
                obj['instanceNames'] = ApiClient.convertToType(data['instanceNames'], ['String']);
            }
            if (data.hasOwnProperty('instanceReferences')) {
                obj['instanceReferences'] = ApiClient.convertToType(data['instanceReferences'], [InstanceReference]);
            }
            if (data.hasOwnProperty('isPreemptible')) {
                obj['isPreemptible'] = ApiClient.convertToType(data['isPreemptible'], 'Boolean');
            }
            if (data.hasOwnProperty('machineTypeUri')) {
                obj['machineTypeUri'] = ApiClient.convertToType(data['machineTypeUri'], 'String');
            }
            if (data.hasOwnProperty('managedGroupConfig')) {
                obj['managedGroupConfig'] = ManagedGroupConfig.constructFromObject(data['managedGroupConfig']);
            }
            if (data.hasOwnProperty('minCpuPlatform')) {
                obj['minCpuPlatform'] = ApiClient.convertToType(data['minCpuPlatform'], 'String');
            }
            if (data.hasOwnProperty('minNumInstances')) {
                obj['minNumInstances'] = ApiClient.convertToType(data['minNumInstances'], 'Number');
            }
            if (data.hasOwnProperty('numInstances')) {
                obj['numInstances'] = ApiClient.convertToType(data['numInstances'], 'Number');
            }
            if (data.hasOwnProperty('preemptibility')) {
                obj['preemptibility'] = ApiClient.convertToType(data['preemptibility'], 'String');
            }
            if (data.hasOwnProperty('startupConfig')) {
                obj['startupConfig'] = StartupConfig.constructFromObject(data['startupConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstanceGroupConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstanceGroupConfig</code>.
     */
    static validateJSON(data) {
        if (data['accelerators']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accelerators'])) {
                throw new Error("Expected the field `accelerators` to be an array in the JSON data but got " + data['accelerators']);
            }
            // validate the optional field `accelerators` (array)
            for (const item of data['accelerators']) {
                AcceleratorConfig.validateJSON(item);
            };
        }
        // validate the optional field `diskConfig`
        if (data['diskConfig']) { // data not null
          DiskConfig.validateJSON(data['diskConfig']);
        }
        // ensure the json data is a string
        if (data['imageUri'] && !(typeof data['imageUri'] === 'string' || data['imageUri'] instanceof String)) {
            throw new Error("Expected the field `imageUri` to be a primitive type in the JSON string but got " + data['imageUri']);
        }
        // validate the optional field `instanceFlexibilityPolicy`
        if (data['instanceFlexibilityPolicy']) { // data not null
          InstanceFlexibilityPolicy.validateJSON(data['instanceFlexibilityPolicy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['instanceNames'])) {
            throw new Error("Expected the field `instanceNames` to be an array in the JSON data but got " + data['instanceNames']);
        }
        if (data['instanceReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instanceReferences'])) {
                throw new Error("Expected the field `instanceReferences` to be an array in the JSON data but got " + data['instanceReferences']);
            }
            // validate the optional field `instanceReferences` (array)
            for (const item of data['instanceReferences']) {
                InstanceReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['machineTypeUri'] && !(typeof data['machineTypeUri'] === 'string' || data['machineTypeUri'] instanceof String)) {
            throw new Error("Expected the field `machineTypeUri` to be a primitive type in the JSON string but got " + data['machineTypeUri']);
        }
        // validate the optional field `managedGroupConfig`
        if (data['managedGroupConfig']) { // data not null
          ManagedGroupConfig.validateJSON(data['managedGroupConfig']);
        }
        // ensure the json data is a string
        if (data['minCpuPlatform'] && !(typeof data['minCpuPlatform'] === 'string' || data['minCpuPlatform'] instanceof String)) {
            throw new Error("Expected the field `minCpuPlatform` to be a primitive type in the JSON string but got " + data['minCpuPlatform']);
        }
        // ensure the json data is a string
        if (data['preemptibility'] && !(typeof data['preemptibility'] === 'string' || data['preemptibility'] instanceof String)) {
            throw new Error("Expected the field `preemptibility` to be a primitive type in the JSON string but got " + data['preemptibility']);
        }
        // validate the optional field `startupConfig`
        if (data['startupConfig']) { // data not null
          StartupConfig.validateJSON(data['startupConfig']);
        }

        return true;
    }


}



/**
 * Optional. The Compute Engine accelerator configuration for these instances.
 * @member {Array.<module:model/AcceleratorConfig>} accelerators
 */
InstanceGroupConfig.prototype['accelerators'] = undefined;

/**
 * @member {module:model/DiskConfig} diskConfig
 */
InstanceGroupConfig.prototype['diskConfig'] = undefined;

/**
 * Optional. The Compute Engine image resource used for cluster instances.The URI can represent an image or image family.Image examples: https://www.googleapis.com/compute/v1/projects/[project_id]/global/images/[image-id] projects/[project_id]/global/images/[image-id] image-idImage family examples. Dataproc will use the most recent image from the family: https://www.googleapis.com/compute/v1/projects/[project_id]/global/images/family/[custom-image-family-name] projects/[project_id]/global/images/family/[custom-image-family-name]If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
 * @member {String} imageUri
 */
InstanceGroupConfig.prototype['imageUri'] = undefined;

/**
 * @member {module:model/InstanceFlexibilityPolicy} instanceFlexibilityPolicy
 */
InstanceGroupConfig.prototype['instanceFlexibilityPolicy'] = undefined;

/**
 * Output only. The list of instance names. Dataproc derives the names from cluster_name, num_instances, and the instance group.
 * @member {Array.<String>} instanceNames
 */
InstanceGroupConfig.prototype['instanceNames'] = undefined;

/**
 * Output only. List of references to Compute Engine instances.
 * @member {Array.<module:model/InstanceReference>} instanceReferences
 */
InstanceGroupConfig.prototype['instanceReferences'] = undefined;

/**
 * Output only. Specifies that this instance group contains preemptible instances.
 * @member {Boolean} isPreemptible
 */
InstanceGroupConfig.prototype['isPreemptible'] = undefined;

/**
 * Optional. The Compute Engine machine type used for cluster instances.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone]/machineTypes/n1-standard-2 projects/[project_id]/zones/[zone]/machineTypes/n1-standard-2 n1-standard-2Auto Zone Exception: If you are using the Dataproc Auto Zone Placement (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2.
 * @member {String} machineTypeUri
 */
InstanceGroupConfig.prototype['machineTypeUri'] = undefined;

/**
 * @member {module:model/ManagedGroupConfig} managedGroupConfig
 */
InstanceGroupConfig.prototype['managedGroupConfig'] = undefined;

/**
 * Optional. Specifies the minimum cpu platform for the Instance Group. See Dataproc -> Minimum CPU Platform (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
 * @member {String} minCpuPlatform
 */
InstanceGroupConfig.prototype['minCpuPlatform'] = undefined;

/**
 * Optional. The minimum number of primary worker instances to create. If min_num_instances is set, cluster creation will succeed if the number of primary workers created is at least equal to the min_num_instances number.Example: Cluster creation request with num_instances = 5 and min_num_instances = 3: If 4 VMs are created and 1 instance fails, the failed VM is deleted. The cluster is resized to 4 instances and placed in a RUNNING state. If 2 instances are created and 3 instances fail, the cluster in placed in an ERROR state. The failed VMs are not deleted.
 * @member {Number} minNumInstances
 */
InstanceGroupConfig.prototype['minNumInstances'] = undefined;

/**
 * Optional. The number of VM instances in the instance group. For HA cluster master_config groups, must be set to 3. For standard cluster master_config groups, must be set to 1.
 * @member {Number} numInstances
 */
InstanceGroupConfig.prototype['numInstances'] = undefined;

/**
 * Optional. Specifies the preemptibility of the instance group.The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed.The default value for secondary instances is PREEMPTIBLE.
 * @member {module:model/InstanceGroupConfig.PreemptibilityEnum} preemptibility
 */
InstanceGroupConfig.prototype['preemptibility'] = undefined;

/**
 * @member {module:model/StartupConfig} startupConfig
 */
InstanceGroupConfig.prototype['startupConfig'] = undefined;





/**
 * Allowed values for the <code>preemptibility</code> property.
 * @enum {String}
 * @readonly
 */
InstanceGroupConfig['PreemptibilityEnum'] = {

    /**
     * value: "PREEMPTIBILITY_UNSPECIFIED"
     * @const
     */
    "PREEMPTIBILITY_UNSPECIFIED": "PREEMPTIBILITY_UNSPECIFIED",

    /**
     * value: "NON_PREEMPTIBLE"
     * @const
     */
    "NON_PREEMPTIBLE": "NON_PREEMPTIBLE",

    /**
     * value: "PREEMPTIBLE"
     * @const
     */
    "PREEMPTIBLE": "PREEMPTIBLE",

    /**
     * value: "SPOT"
     * @const
     */
    "SPOT": "SPOT"
};



export default InstanceGroupConfig;

