# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_operation_status import ClusterOperationStatus
from openapi_server import util


class NodeGroupOperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_uuid: str=None, description: str=None, labels: Dict[str, str]=None, node_group_id: str=None, operation_type: str=None, status: ClusterOperationStatus=None, status_history: List[ClusterOperationStatus]=None, warnings: List[str]=None):
        """NodeGroupOperationMetadata - a model defined in OpenAPI

        :param cluster_uuid: The cluster_uuid of this NodeGroupOperationMetadata.
        :param description: The description of this NodeGroupOperationMetadata.
        :param labels: The labels of this NodeGroupOperationMetadata.
        :param node_group_id: The node_group_id of this NodeGroupOperationMetadata.
        :param operation_type: The operation_type of this NodeGroupOperationMetadata.
        :param status: The status of this NodeGroupOperationMetadata.
        :param status_history: The status_history of this NodeGroupOperationMetadata.
        :param warnings: The warnings of this NodeGroupOperationMetadata.
        """
        self.openapi_types = {
            'cluster_uuid': str,
            'description': str,
            'labels': Dict[str, str],
            'node_group_id': str,
            'operation_type': str,
            'status': ClusterOperationStatus,
            'status_history': List[ClusterOperationStatus],
            'warnings': List[str]
        }

        self.attribute_map = {
            'cluster_uuid': 'clusterUuid',
            'description': 'description',
            'labels': 'labels',
            'node_group_id': 'nodeGroupId',
            'operation_type': 'operationType',
            'status': 'status',
            'status_history': 'statusHistory',
            'warnings': 'warnings'
        }

        self._cluster_uuid = cluster_uuid
        self._description = description
        self._labels = labels
        self._node_group_id = node_group_id
        self._operation_type = operation_type
        self._status = status
        self._status_history = status_history
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeGroupOperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeGroupOperationMetadata of this NodeGroupOperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_uuid(self):
        """Gets the cluster_uuid of this NodeGroupOperationMetadata.

        Output only. Cluster UUID associated with the node group operation.

        :return: The cluster_uuid of this NodeGroupOperationMetadata.
        :rtype: str
        """
        return self._cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):
        """Sets the cluster_uuid of this NodeGroupOperationMetadata.

        Output only. Cluster UUID associated with the node group operation.

        :param cluster_uuid: The cluster_uuid of this NodeGroupOperationMetadata.
        :type cluster_uuid: str
        """

        self._cluster_uuid = cluster_uuid

    @property
    def description(self):
        """Gets the description of this NodeGroupOperationMetadata.

        Output only. Short description of operation.

        :return: The description of this NodeGroupOperationMetadata.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NodeGroupOperationMetadata.

        Output only. Short description of operation.

        :param description: The description of this NodeGroupOperationMetadata.
        :type description: str
        """

        self._description = description

    @property
    def labels(self):
        """Gets the labels of this NodeGroupOperationMetadata.

        Output only. Labels associated with the operation.

        :return: The labels of this NodeGroupOperationMetadata.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this NodeGroupOperationMetadata.

        Output only. Labels associated with the operation.

        :param labels: The labels of this NodeGroupOperationMetadata.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def node_group_id(self):
        """Gets the node_group_id of this NodeGroupOperationMetadata.

        Output only. Node group ID for the operation.

        :return: The node_group_id of this NodeGroupOperationMetadata.
        :rtype: str
        """
        return self._node_group_id

    @node_group_id.setter
    def node_group_id(self, node_group_id):
        """Sets the node_group_id of this NodeGroupOperationMetadata.

        Output only. Node group ID for the operation.

        :param node_group_id: The node_group_id of this NodeGroupOperationMetadata.
        :type node_group_id: str
        """

        self._node_group_id = node_group_id

    @property
    def operation_type(self):
        """Gets the operation_type of this NodeGroupOperationMetadata.

        The operation type.

        :return: The operation_type of this NodeGroupOperationMetadata.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this NodeGroupOperationMetadata.

        The operation type.

        :param operation_type: The operation_type of this NodeGroupOperationMetadata.
        :type operation_type: str
        """
        allowed_values = ["NODE_GROUP_OPERATION_TYPE_UNSPECIFIED", "CREATE", "UPDATE", "DELETE", "RESIZE", "REPAIR", "UPDATE_LABELS"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type

    @property
    def status(self):
        """Gets the status of this NodeGroupOperationMetadata.


        :return: The status of this NodeGroupOperationMetadata.
        :rtype: ClusterOperationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NodeGroupOperationMetadata.


        :param status: The status of this NodeGroupOperationMetadata.
        :type status: ClusterOperationStatus
        """

        self._status = status

    @property
    def status_history(self):
        """Gets the status_history of this NodeGroupOperationMetadata.

        Output only. The previous operation status.

        :return: The status_history of this NodeGroupOperationMetadata.
        :rtype: List[ClusterOperationStatus]
        """
        return self._status_history

    @status_history.setter
    def status_history(self, status_history):
        """Sets the status_history of this NodeGroupOperationMetadata.

        Output only. The previous operation status.

        :param status_history: The status_history of this NodeGroupOperationMetadata.
        :type status_history: List[ClusterOperationStatus]
        """

        self._status_history = status_history

    @property
    def warnings(self):
        """Gets the warnings of this NodeGroupOperationMetadata.

        Output only. Errors encountered during operation execution.

        :return: The warnings of this NodeGroupOperationMetadata.
        :rtype: List[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this NodeGroupOperationMetadata.

        Output only. Errors encountered during operation execution.

        :param warnings: The warnings of this NodeGroupOperationMetadata.
        :type warnings: List[str]
        """

        self._warnings = warnings
