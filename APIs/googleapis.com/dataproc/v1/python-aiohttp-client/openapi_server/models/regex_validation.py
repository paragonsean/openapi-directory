# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegexValidation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, regexes: List[str]=None):
        """RegexValidation - a model defined in OpenAPI

        :param regexes: The regexes of this RegexValidation.
        """
        self.openapi_types = {
            'regexes': List[str]
        }

        self.attribute_map = {
            'regexes': 'regexes'
        }

        self._regexes = regexes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegexValidation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegexValidation of this RegexValidation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def regexes(self):
        """Gets the regexes of this RegexValidation.

        Required. RE2 regular expressions used to validate the parameter's value. The value must match the regex in its entirety (substring matches are not sufficient).

        :return: The regexes of this RegexValidation.
        :rtype: List[str]
        """
        return self._regexes

    @regexes.setter
    def regexes(self, regexes):
        """Sets the regexes of this RegexValidation.

        Required. RE2 regular expressions used to validate the parameter's value. The value must match the regex in its entirety (substring matches are not sufficient).

        :param regexes: The regexes of this RegexValidation.
        :type regexes: List[str]
        """

        self._regexes = regexes
