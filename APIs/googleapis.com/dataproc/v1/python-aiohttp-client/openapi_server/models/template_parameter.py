# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter_validation import ParameterValidation
from openapi_server import util


class TemplateParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, fields: List[str]=None, name: str=None, validation: ParameterValidation=None):
        """TemplateParameter - a model defined in OpenAPI

        :param description: The description of this TemplateParameter.
        :param fields: The fields of this TemplateParameter.
        :param name: The name of this TemplateParameter.
        :param validation: The validation of this TemplateParameter.
        """
        self.openapi_types = {
            'description': str,
            'fields': List[str],
            'name': str,
            'validation': ParameterValidation
        }

        self.attribute_map = {
            'description': 'description',
            'fields': 'fields',
            'name': 'name',
            'validation': 'validation'
        }

        self._description = description
        self._fields = fields
        self._name = name
        self._validation = validation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateParameter of this TemplateParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this TemplateParameter.

        Optional. Brief description of the parameter. Must not exceed 1024 characters.

        :return: The description of this TemplateParameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TemplateParameter.

        Optional. Brief description of the parameter. Must not exceed 1024 characters.

        :param description: The description of this TemplateParameter.
        :type description: str
        """

        self._description = description

    @property
    def fields(self):
        """Gets the fields of this TemplateParameter.

        Required. Paths to all fields that the parameter replaces. A field is allowed to appear in at most one parameter's list of field paths.A field path is similar in syntax to a google.protobuf.FieldMask. For example, a field path that references the zone field of a workflow template's cluster selector would be specified as placement.clusterSelector.zone.Also, field paths can reference fields using the following syntax: Values in maps can be referenced by key: labels'key' placement.clusterSelector.clusterLabels'key' placement.managedCluster.labels'key' placement.clusterSelector.clusterLabels'key' jobs'step-id'.labels'key' Jobs in the jobs list can be referenced by step-id: jobs'step-id'.hadoopJob.mainJarFileUri jobs'step-id'.hiveJob.queryFileUri jobs'step-id'.pySparkJob.mainPythonFileUri jobs'step-id'.hadoopJob.jarFileUris0 jobs'step-id'.hadoopJob.archiveUris0 jobs'step-id'.hadoopJob.fileUris0 jobs'step-id'.pySparkJob.pythonFileUris0 Items in repeated fields can be referenced by a zero-based index: jobs'step-id'.sparkJob.args0 Other examples: jobs'step-id'.hadoopJob.properties'key' jobs'step-id'.hadoopJob.args0 jobs'step-id'.hiveJob.scriptVariables'key' jobs'step-id'.hadoopJob.mainJarFileUri placement.clusterSelector.zoneIt may not be possible to parameterize maps and repeated fields in their entirety since only individual map values and individual items in repeated fields can be referenced. For example, the following field paths are invalid: placement.clusterSelector.clusterLabels jobs'step-id'.sparkJob.args

        :return: The fields of this TemplateParameter.
        :rtype: List[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this TemplateParameter.

        Required. Paths to all fields that the parameter replaces. A field is allowed to appear in at most one parameter's list of field paths.A field path is similar in syntax to a google.protobuf.FieldMask. For example, a field path that references the zone field of a workflow template's cluster selector would be specified as placement.clusterSelector.zone.Also, field paths can reference fields using the following syntax: Values in maps can be referenced by key: labels'key' placement.clusterSelector.clusterLabels'key' placement.managedCluster.labels'key' placement.clusterSelector.clusterLabels'key' jobs'step-id'.labels'key' Jobs in the jobs list can be referenced by step-id: jobs'step-id'.hadoopJob.mainJarFileUri jobs'step-id'.hiveJob.queryFileUri jobs'step-id'.pySparkJob.mainPythonFileUri jobs'step-id'.hadoopJob.jarFileUris0 jobs'step-id'.hadoopJob.archiveUris0 jobs'step-id'.hadoopJob.fileUris0 jobs'step-id'.pySparkJob.pythonFileUris0 Items in repeated fields can be referenced by a zero-based index: jobs'step-id'.sparkJob.args0 Other examples: jobs'step-id'.hadoopJob.properties'key' jobs'step-id'.hadoopJob.args0 jobs'step-id'.hiveJob.scriptVariables'key' jobs'step-id'.hadoopJob.mainJarFileUri placement.clusterSelector.zoneIt may not be possible to parameterize maps and repeated fields in their entirety since only individual map values and individual items in repeated fields can be referenced. For example, the following field paths are invalid: placement.clusterSelector.clusterLabels jobs'step-id'.sparkJob.args

        :param fields: The fields of this TemplateParameter.
        :type fields: List[str]
        """

        self._fields = fields

    @property
    def name(self):
        """Gets the name of this TemplateParameter.

        Required. Parameter name. The parameter name is used as the key, and paired with the parameter value, which are passed to the template when the template is instantiated. The name must contain only capital letters (A-Z), numbers (0-9), and underscores (_), and must not start with a number. The maximum length is 40 characters.

        :return: The name of this TemplateParameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplateParameter.

        Required. Parameter name. The parameter name is used as the key, and paired with the parameter value, which are passed to the template when the template is instantiated. The name must contain only capital letters (A-Z), numbers (0-9), and underscores (_), and must not start with a number. The maximum length is 40 characters.

        :param name: The name of this TemplateParameter.
        :type name: str
        """

        self._name = name

    @property
    def validation(self):
        """Gets the validation of this TemplateParameter.


        :return: The validation of this TemplateParameter.
        :rtype: ParameterValidation
        """
        return self._validation

    @validation.setter
    def validation(self, validation):
        """Sets the validation of this TemplateParameter.


        :param validation: The validation of this TemplateParameter.
        :type validation: ParameterValidation
        """

        self._validation = validation
