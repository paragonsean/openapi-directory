# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dataproc_v1_workflow_template_encryption_config import GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig
from openapi_server.models.ordered_job import OrderedJob
from openapi_server.models.template_parameter import TemplateParameter
from openapi_server.models.workflow_template_placement import WorkflowTemplatePlacement
from openapi_server import util


class WorkflowTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, dag_timeout: str=None, encryption_config: GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig=None, id: str=None, jobs: List[OrderedJob]=None, labels: Dict[str, str]=None, name: str=None, parameters: List[TemplateParameter]=None, placement: WorkflowTemplatePlacement=None, update_time: str=None, version: int=None):
        """WorkflowTemplate - a model defined in OpenAPI

        :param create_time: The create_time of this WorkflowTemplate.
        :param dag_timeout: The dag_timeout of this WorkflowTemplate.
        :param encryption_config: The encryption_config of this WorkflowTemplate.
        :param id: The id of this WorkflowTemplate.
        :param jobs: The jobs of this WorkflowTemplate.
        :param labels: The labels of this WorkflowTemplate.
        :param name: The name of this WorkflowTemplate.
        :param parameters: The parameters of this WorkflowTemplate.
        :param placement: The placement of this WorkflowTemplate.
        :param update_time: The update_time of this WorkflowTemplate.
        :param version: The version of this WorkflowTemplate.
        """
        self.openapi_types = {
            'create_time': str,
            'dag_timeout': str,
            'encryption_config': GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig,
            'id': str,
            'jobs': List[OrderedJob],
            'labels': Dict[str, str],
            'name': str,
            'parameters': List[TemplateParameter],
            'placement': WorkflowTemplatePlacement,
            'update_time': str,
            'version': int
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'dag_timeout': 'dagTimeout',
            'encryption_config': 'encryptionConfig',
            'id': 'id',
            'jobs': 'jobs',
            'labels': 'labels',
            'name': 'name',
            'parameters': 'parameters',
            'placement': 'placement',
            'update_time': 'updateTime',
            'version': 'version'
        }

        self._create_time = create_time
        self._dag_timeout = dag_timeout
        self._encryption_config = encryption_config
        self._id = id
        self._jobs = jobs
        self._labels = labels
        self._name = name
        self._parameters = parameters
        self._placement = placement
        self._update_time = update_time
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowTemplate of this WorkflowTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this WorkflowTemplate.

        Output only. The time template was created.

        :return: The create_time of this WorkflowTemplate.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this WorkflowTemplate.

        Output only. The time template was created.

        :param create_time: The create_time of this WorkflowTemplate.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def dag_timeout(self):
        """Gets the dag_timeout of this WorkflowTemplate.

        Optional. Timeout duration for the DAG of jobs, expressed in seconds (see JSON representation of duration (https://developers.google.com/protocol-buffers/docs/proto3#json)). The timeout duration must be from 10 minutes (\"600s\") to 24 hours (\"86400s\"). The timer begins when the first job is submitted. If the workflow is running at the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running on a managed cluster, the cluster is deleted.

        :return: The dag_timeout of this WorkflowTemplate.
        :rtype: str
        """
        return self._dag_timeout

    @dag_timeout.setter
    def dag_timeout(self, dag_timeout):
        """Sets the dag_timeout of this WorkflowTemplate.

        Optional. Timeout duration for the DAG of jobs, expressed in seconds (see JSON representation of duration (https://developers.google.com/protocol-buffers/docs/proto3#json)). The timeout duration must be from 10 minutes (\"600s\") to 24 hours (\"86400s\"). The timer begins when the first job is submitted. If the workflow is running at the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running on a managed cluster, the cluster is deleted.

        :param dag_timeout: The dag_timeout of this WorkflowTemplate.
        :type dag_timeout: str
        """

        self._dag_timeout = dag_timeout

    @property
    def encryption_config(self):
        """Gets the encryption_config of this WorkflowTemplate.


        :return: The encryption_config of this WorkflowTemplate.
        :rtype: GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this WorkflowTemplate.


        :param encryption_config: The encryption_config of this WorkflowTemplate.
        :type encryption_config: GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def id(self):
        """Gets the id of this WorkflowTemplate.


        :return: The id of this WorkflowTemplate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowTemplate.


        :param id: The id of this WorkflowTemplate.
        :type id: str
        """

        self._id = id

    @property
    def jobs(self):
        """Gets the jobs of this WorkflowTemplate.

        Required. The Directed Acyclic Graph of Jobs to submit.

        :return: The jobs of this WorkflowTemplate.
        :rtype: List[OrderedJob]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this WorkflowTemplate.

        Required. The Directed Acyclic Graph of Jobs to submit.

        :param jobs: The jobs of this WorkflowTemplate.
        :type jobs: List[OrderedJob]
        """

        self._jobs = jobs

    @property
    def labels(self):
        """Gets the labels of this WorkflowTemplate.

        Optional. The labels to associate with this template. These labels will be propagated to all jobs and clusters created by the workflow instance.Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt).Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt).No more than 32 labels can be associated with a template.

        :return: The labels of this WorkflowTemplate.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this WorkflowTemplate.

        Optional. The labels to associate with this template. These labels will be propagated to all jobs and clusters created by the workflow instance.Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt).Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt).No more than 32 labels can be associated with a template.

        :param labels: The labels of this WorkflowTemplate.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this WorkflowTemplate.

        Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}

        :return: The name of this WorkflowTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowTemplate.

        Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}

        :param name: The name of this WorkflowTemplate.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this WorkflowTemplate.

        Optional. Template parameters whose values are substituted into the template. Values for parameters must be provided when the template is instantiated.

        :return: The parameters of this WorkflowTemplate.
        :rtype: List[TemplateParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this WorkflowTemplate.

        Optional. Template parameters whose values are substituted into the template. Values for parameters must be provided when the template is instantiated.

        :param parameters: The parameters of this WorkflowTemplate.
        :type parameters: List[TemplateParameter]
        """

        self._parameters = parameters

    @property
    def placement(self):
        """Gets the placement of this WorkflowTemplate.


        :return: The placement of this WorkflowTemplate.
        :rtype: WorkflowTemplatePlacement
        """
        return self._placement

    @placement.setter
    def placement(self, placement):
        """Sets the placement of this WorkflowTemplate.


        :param placement: The placement of this WorkflowTemplate.
        :type placement: WorkflowTemplatePlacement
        """

        self._placement = placement

    @property
    def update_time(self):
        """Gets the update_time of this WorkflowTemplate.

        Output only. The time template was last updated.

        :return: The update_time of this WorkflowTemplate.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this WorkflowTemplate.

        Output only. The time template was last updated.

        :param update_time: The update_time of this WorkflowTemplate.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def version(self):
        """Gets the version of this WorkflowTemplate.

        Optional. Used to perform a consistent read-modify-write.This field should be left blank for a CreateWorkflowTemplate request. It is required for an UpdateWorkflowTemplate request, and must match the current server version. A typical update template flow would fetch the current template with a GetWorkflowTemplate request, which will return the current template with the version field filled in with the current server version. The user updates other fields in the template, then returns it as part of the UpdateWorkflowTemplate request.

        :return: The version of this WorkflowTemplate.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WorkflowTemplate.

        Optional. Used to perform a consistent read-modify-write.This field should be left blank for a CreateWorkflowTemplate request. It is required for an UpdateWorkflowTemplate request, and must match the current server version. A typical update template flow would fetch the current template with a GetWorkflowTemplate request, which will return the current template with the version field filled in with the current server version. The user updates other fields in the template, then returns it as part of the UpdateWorkflowTemplate request.

        :param version: The version of this WorkflowTemplate.
        :type version: int
        """

        self._version = version
