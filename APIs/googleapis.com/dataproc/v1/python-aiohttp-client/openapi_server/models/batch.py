# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_config import EnvironmentConfig
from openapi_server.models.py_spark_batch import PySparkBatch
from openapi_server.models.runtime_config import RuntimeConfig
from openapi_server.models.runtime_info import RuntimeInfo
from openapi_server.models.spark_batch import SparkBatch
from openapi_server.models.spark_r_batch import SparkRBatch
from openapi_server.models.spark_sql_batch import SparkSqlBatch
from openapi_server.models.state_history import StateHistory
from openapi_server import util


class Batch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, creator: str=None, environment_config: EnvironmentConfig=None, labels: Dict[str, str]=None, name: str=None, operation: str=None, pyspark_batch: PySparkBatch=None, runtime_config: RuntimeConfig=None, runtime_info: RuntimeInfo=None, spark_batch: SparkBatch=None, spark_r_batch: SparkRBatch=None, spark_sql_batch: SparkSqlBatch=None, state: str=None, state_history: List[StateHistory]=None, state_message: str=None, state_time: str=None, uuid: str=None):
        """Batch - a model defined in OpenAPI

        :param create_time: The create_time of this Batch.
        :param creator: The creator of this Batch.
        :param environment_config: The environment_config of this Batch.
        :param labels: The labels of this Batch.
        :param name: The name of this Batch.
        :param operation: The operation of this Batch.
        :param pyspark_batch: The pyspark_batch of this Batch.
        :param runtime_config: The runtime_config of this Batch.
        :param runtime_info: The runtime_info of this Batch.
        :param spark_batch: The spark_batch of this Batch.
        :param spark_r_batch: The spark_r_batch of this Batch.
        :param spark_sql_batch: The spark_sql_batch of this Batch.
        :param state: The state of this Batch.
        :param state_history: The state_history of this Batch.
        :param state_message: The state_message of this Batch.
        :param state_time: The state_time of this Batch.
        :param uuid: The uuid of this Batch.
        """
        self.openapi_types = {
            'create_time': str,
            'creator': str,
            'environment_config': EnvironmentConfig,
            'labels': Dict[str, str],
            'name': str,
            'operation': str,
            'pyspark_batch': PySparkBatch,
            'runtime_config': RuntimeConfig,
            'runtime_info': RuntimeInfo,
            'spark_batch': SparkBatch,
            'spark_r_batch': SparkRBatch,
            'spark_sql_batch': SparkSqlBatch,
            'state': str,
            'state_history': List[StateHistory],
            'state_message': str,
            'state_time': str,
            'uuid': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'creator': 'creator',
            'environment_config': 'environmentConfig',
            'labels': 'labels',
            'name': 'name',
            'operation': 'operation',
            'pyspark_batch': 'pysparkBatch',
            'runtime_config': 'runtimeConfig',
            'runtime_info': 'runtimeInfo',
            'spark_batch': 'sparkBatch',
            'spark_r_batch': 'sparkRBatch',
            'spark_sql_batch': 'sparkSqlBatch',
            'state': 'state',
            'state_history': 'stateHistory',
            'state_message': 'stateMessage',
            'state_time': 'stateTime',
            'uuid': 'uuid'
        }

        self._create_time = create_time
        self._creator = creator
        self._environment_config = environment_config
        self._labels = labels
        self._name = name
        self._operation = operation
        self._pyspark_batch = pyspark_batch
        self._runtime_config = runtime_config
        self._runtime_info = runtime_info
        self._spark_batch = spark_batch
        self._spark_r_batch = spark_r_batch
        self._spark_sql_batch = spark_sql_batch
        self._state = state
        self._state_history = state_history
        self._state_message = state_message
        self._state_time = state_time
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Batch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Batch of this Batch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Batch.

        Output only. The time when the batch was created.

        :return: The create_time of this Batch.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Batch.

        Output only. The time when the batch was created.

        :param create_time: The create_time of this Batch.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def creator(self):
        """Gets the creator of this Batch.

        Output only. The email address of the user who created the batch.

        :return: The creator of this Batch.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Batch.

        Output only. The email address of the user who created the batch.

        :param creator: The creator of this Batch.
        :type creator: str
        """

        self._creator = creator

    @property
    def environment_config(self):
        """Gets the environment_config of this Batch.


        :return: The environment_config of this Batch.
        :rtype: EnvironmentConfig
        """
        return self._environment_config

    @environment_config.setter
    def environment_config(self, environment_config):
        """Sets the environment_config of this Batch.


        :param environment_config: The environment_config of this Batch.
        :type environment_config: EnvironmentConfig
        """

        self._environment_config = environment_config

    @property
    def labels(self):
        """Gets the labels of this Batch.

        Optional. The labels to associate with this batch. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a batch.

        :return: The labels of this Batch.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Batch.

        Optional. The labels to associate with this batch. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a batch.

        :param labels: The labels of this Batch.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Batch.

        Output only. The resource name of the batch.

        :return: The name of this Batch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Batch.

        Output only. The resource name of the batch.

        :param name: The name of this Batch.
        :type name: str
        """

        self._name = name

    @property
    def operation(self):
        """Gets the operation of this Batch.

        Output only. The resource name of the operation associated with this batch.

        :return: The operation of this Batch.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Batch.

        Output only. The resource name of the operation associated with this batch.

        :param operation: The operation of this Batch.
        :type operation: str
        """

        self._operation = operation

    @property
    def pyspark_batch(self):
        """Gets the pyspark_batch of this Batch.


        :return: The pyspark_batch of this Batch.
        :rtype: PySparkBatch
        """
        return self._pyspark_batch

    @pyspark_batch.setter
    def pyspark_batch(self, pyspark_batch):
        """Sets the pyspark_batch of this Batch.


        :param pyspark_batch: The pyspark_batch of this Batch.
        :type pyspark_batch: PySparkBatch
        """

        self._pyspark_batch = pyspark_batch

    @property
    def runtime_config(self):
        """Gets the runtime_config of this Batch.


        :return: The runtime_config of this Batch.
        :rtype: RuntimeConfig
        """
        return self._runtime_config

    @runtime_config.setter
    def runtime_config(self, runtime_config):
        """Sets the runtime_config of this Batch.


        :param runtime_config: The runtime_config of this Batch.
        :type runtime_config: RuntimeConfig
        """

        self._runtime_config = runtime_config

    @property
    def runtime_info(self):
        """Gets the runtime_info of this Batch.


        :return: The runtime_info of this Batch.
        :rtype: RuntimeInfo
        """
        return self._runtime_info

    @runtime_info.setter
    def runtime_info(self, runtime_info):
        """Sets the runtime_info of this Batch.


        :param runtime_info: The runtime_info of this Batch.
        :type runtime_info: RuntimeInfo
        """

        self._runtime_info = runtime_info

    @property
    def spark_batch(self):
        """Gets the spark_batch of this Batch.


        :return: The spark_batch of this Batch.
        :rtype: SparkBatch
        """
        return self._spark_batch

    @spark_batch.setter
    def spark_batch(self, spark_batch):
        """Sets the spark_batch of this Batch.


        :param spark_batch: The spark_batch of this Batch.
        :type spark_batch: SparkBatch
        """

        self._spark_batch = spark_batch

    @property
    def spark_r_batch(self):
        """Gets the spark_r_batch of this Batch.


        :return: The spark_r_batch of this Batch.
        :rtype: SparkRBatch
        """
        return self._spark_r_batch

    @spark_r_batch.setter
    def spark_r_batch(self, spark_r_batch):
        """Sets the spark_r_batch of this Batch.


        :param spark_r_batch: The spark_r_batch of this Batch.
        :type spark_r_batch: SparkRBatch
        """

        self._spark_r_batch = spark_r_batch

    @property
    def spark_sql_batch(self):
        """Gets the spark_sql_batch of this Batch.


        :return: The spark_sql_batch of this Batch.
        :rtype: SparkSqlBatch
        """
        return self._spark_sql_batch

    @spark_sql_batch.setter
    def spark_sql_batch(self, spark_sql_batch):
        """Sets the spark_sql_batch of this Batch.


        :param spark_sql_batch: The spark_sql_batch of this Batch.
        :type spark_sql_batch: SparkSqlBatch
        """

        self._spark_sql_batch = spark_sql_batch

    @property
    def state(self):
        """Gets the state of this Batch.

        Output only. The state of the batch.

        :return: The state of this Batch.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Batch.

        Output only. The state of the batch.

        :param state: The state of this Batch.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "RUNNING", "CANCELLING", "CANCELLED", "SUCCEEDED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_history(self):
        """Gets the state_history of this Batch.

        Output only. Historical state information for the batch.

        :return: The state_history of this Batch.
        :rtype: List[StateHistory]
        """
        return self._state_history

    @state_history.setter
    def state_history(self, state_history):
        """Sets the state_history of this Batch.

        Output only. Historical state information for the batch.

        :param state_history: The state_history of this Batch.
        :type state_history: List[StateHistory]
        """

        self._state_history = state_history

    @property
    def state_message(self):
        """Gets the state_message of this Batch.

        Output only. Batch state details, such as a failure description if the state is FAILED.

        :return: The state_message of this Batch.
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """Sets the state_message of this Batch.

        Output only. Batch state details, such as a failure description if the state is FAILED.

        :param state_message: The state_message of this Batch.
        :type state_message: str
        """

        self._state_message = state_message

    @property
    def state_time(self):
        """Gets the state_time of this Batch.

        Output only. The time when the batch entered a current state.

        :return: The state_time of this Batch.
        :rtype: str
        """
        return self._state_time

    @state_time.setter
    def state_time(self, state_time):
        """Sets the state_time of this Batch.

        Output only. The time when the batch entered a current state.

        :param state_time: The state_time of this Batch.
        :type state_time: str
        """

        self._state_time = state_time

    @property
    def uuid(self):
        """Gets the uuid of this Batch.

        Output only. A batch UUID (Unique Universal Identifier). The service generates this value when it creates the batch.

        :return: The uuid of this Batch.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Batch.

        Output only. A batch UUID (Unique Universal Identifier). The service generates this value when it creates the batch.

        :param uuid: The uuid of this Batch.
        :type uuid: str
        """

        self._uuid = uuid
