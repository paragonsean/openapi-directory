# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InjectCredentialsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_uuid: str=None, credentials_ciphertext: str=None):
        """InjectCredentialsRequest - a model defined in OpenAPI

        :param cluster_uuid: The cluster_uuid of this InjectCredentialsRequest.
        :param credentials_ciphertext: The credentials_ciphertext of this InjectCredentialsRequest.
        """
        self.openapi_types = {
            'cluster_uuid': str,
            'credentials_ciphertext': str
        }

        self.attribute_map = {
            'cluster_uuid': 'clusterUuid',
            'credentials_ciphertext': 'credentialsCiphertext'
        }

        self._cluster_uuid = cluster_uuid
        self._credentials_ciphertext = credentials_ciphertext

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InjectCredentialsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InjectCredentialsRequest of this InjectCredentialsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_uuid(self):
        """Gets the cluster_uuid of this InjectCredentialsRequest.

        Required. The cluster UUID.

        :return: The cluster_uuid of this InjectCredentialsRequest.
        :rtype: str
        """
        return self._cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):
        """Sets the cluster_uuid of this InjectCredentialsRequest.

        Required. The cluster UUID.

        :param cluster_uuid: The cluster_uuid of this InjectCredentialsRequest.
        :type cluster_uuid: str
        """

        self._cluster_uuid = cluster_uuid

    @property
    def credentials_ciphertext(self):
        """Gets the credentials_ciphertext of this InjectCredentialsRequest.

        Required. The encrypted credentials being injected in to the cluster.The client is responsible for encrypting the credentials in a way that is supported by the cluster.A wrapped value is used here so that the actual contents of the encrypted credentials are not written to audit logs.

        :return: The credentials_ciphertext of this InjectCredentialsRequest.
        :rtype: str
        """
        return self._credentials_ciphertext

    @credentials_ciphertext.setter
    def credentials_ciphertext(self, credentials_ciphertext):
        """Sets the credentials_ciphertext of this InjectCredentialsRequest.

        Required. The encrypted credentials being injected in to the cluster.The client is responsible for encrypting the credentials in a way that is supported by the cluster.A wrapped value is used here so that the actual contents of the encrypted credentials are not written to audit logs.

        :param credentials_ciphertext: The credentials_ciphertext of this InjectCredentialsRequest.
        :type credentials_ciphertext: str
        """

        self._credentials_ciphertext = credentials_ciphertext
