# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_config import ClusterConfig
from openapi_server import util


class ManagedCluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_name: str=None, config: ClusterConfig=None, labels: Dict[str, str]=None):
        """ManagedCluster - a model defined in OpenAPI

        :param cluster_name: The cluster_name of this ManagedCluster.
        :param config: The config of this ManagedCluster.
        :param labels: The labels of this ManagedCluster.
        """
        self.openapi_types = {
            'cluster_name': str,
            'config': ClusterConfig,
            'labels': Dict[str, str]
        }

        self.attribute_map = {
            'cluster_name': 'clusterName',
            'config': 'config',
            'labels': 'labels'
        }

        self._cluster_name = cluster_name
        self._config = config
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedCluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedCluster of this ManagedCluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_name(self):
        """Gets the cluster_name of this ManagedCluster.

        Required. The cluster name prefix. A unique cluster name will be formed by appending a random suffix.The name must contain only lower-case letters (a-z), numbers (0-9), and hyphens (-). Must begin with a letter. Cannot begin or end with hyphen. Must consist of between 2 and 35 characters.

        :return: The cluster_name of this ManagedCluster.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this ManagedCluster.

        Required. The cluster name prefix. A unique cluster name will be formed by appending a random suffix.The name must contain only lower-case letters (a-z), numbers (0-9), and hyphens (-). Must begin with a letter. Cannot begin or end with hyphen. Must consist of between 2 and 35 characters.

        :param cluster_name: The cluster_name of this ManagedCluster.
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def config(self):
        """Gets the config of this ManagedCluster.


        :return: The config of this ManagedCluster.
        :rtype: ClusterConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ManagedCluster.


        :param config: The config of this ManagedCluster.
        :type config: ClusterConfig
        """

        self._config = config

    @property
    def labels(self):
        """Gets the labels of this ManagedCluster.

        Optional. The labels to associate with this cluster.Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62}Label values must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}\\p{N}_-{0,63}No more than 32 labels can be associated with a given cluster.

        :return: The labels of this ManagedCluster.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ManagedCluster.

        Optional. The labels to associate with this cluster.Label keys must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62}Label values must be between 1 and 63 characters long, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}\\p{N}_-{0,63}No more than 32 labels can be associated with a given cluster.

        :param labels: The labels of this ManagedCluster.
        :type labels: Dict[str, str]
        """

        self._labels = labels
