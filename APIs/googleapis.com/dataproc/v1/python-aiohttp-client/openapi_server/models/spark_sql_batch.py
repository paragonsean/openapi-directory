# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SparkSqlBatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, jar_file_uris: List[str]=None, query_file_uri: str=None, query_variables: Dict[str, str]=None):
        """SparkSqlBatch - a model defined in OpenAPI

        :param jar_file_uris: The jar_file_uris of this SparkSqlBatch.
        :param query_file_uri: The query_file_uri of this SparkSqlBatch.
        :param query_variables: The query_variables of this SparkSqlBatch.
        """
        self.openapi_types = {
            'jar_file_uris': List[str],
            'query_file_uri': str,
            'query_variables': Dict[str, str]
        }

        self.attribute_map = {
            'jar_file_uris': 'jarFileUris',
            'query_file_uri': 'queryFileUri',
            'query_variables': 'queryVariables'
        }

        self._jar_file_uris = jar_file_uris
        self._query_file_uri = query_file_uri
        self._query_variables = query_variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SparkSqlBatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SparkSqlBatch of this SparkSqlBatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def jar_file_uris(self):
        """Gets the jar_file_uris of this SparkSqlBatch.

        Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.

        :return: The jar_file_uris of this SparkSqlBatch.
        :rtype: List[str]
        """
        return self._jar_file_uris

    @jar_file_uris.setter
    def jar_file_uris(self, jar_file_uris):
        """Sets the jar_file_uris of this SparkSqlBatch.

        Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.

        :param jar_file_uris: The jar_file_uris of this SparkSqlBatch.
        :type jar_file_uris: List[str]
        """

        self._jar_file_uris = jar_file_uris

    @property
    def query_file_uri(self):
        """Gets the query_file_uri of this SparkSqlBatch.

        Required. The HCFS URI of the script that contains Spark SQL queries to execute.

        :return: The query_file_uri of this SparkSqlBatch.
        :rtype: str
        """
        return self._query_file_uri

    @query_file_uri.setter
    def query_file_uri(self, query_file_uri):
        """Sets the query_file_uri of this SparkSqlBatch.

        Required. The HCFS URI of the script that contains Spark SQL queries to execute.

        :param query_file_uri: The query_file_uri of this SparkSqlBatch.
        :type query_file_uri: str
        """

        self._query_file_uri = query_file_uri

    @property
    def query_variables(self):
        """Gets the query_variables of this SparkSqlBatch.

        Optional. Mapping of query variable names to values (equivalent to the Spark SQL command: SET name=\"value\";).

        :return: The query_variables of this SparkSqlBatch.
        :rtype: Dict[str, str]
        """
        return self._query_variables

    @query_variables.setter
    def query_variables(self, query_variables):
        """Sets the query_variables of this SparkSqlBatch.

        Optional. Mapping of query variable names to values (equivalent to the Spark SQL command: SET name=\"value\";).

        :param query_variables: The query_variables of this SparkSqlBatch.
        :type query_variables: Dict[str, str]
        """

        self._query_variables = query_variables
