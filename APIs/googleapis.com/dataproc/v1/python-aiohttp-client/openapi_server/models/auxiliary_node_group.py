# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_group import NodeGroup
from openapi_server import util


class AuxiliaryNodeGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_group: NodeGroup=None, node_group_id: str=None):
        """AuxiliaryNodeGroup - a model defined in OpenAPI

        :param node_group: The node_group of this AuxiliaryNodeGroup.
        :param node_group_id: The node_group_id of this AuxiliaryNodeGroup.
        """
        self.openapi_types = {
            'node_group': NodeGroup,
            'node_group_id': str
        }

        self.attribute_map = {
            'node_group': 'nodeGroup',
            'node_group_id': 'nodeGroupId'
        }

        self._node_group = node_group
        self._node_group_id = node_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuxiliaryNodeGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuxiliaryNodeGroup of this AuxiliaryNodeGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_group(self):
        """Gets the node_group of this AuxiliaryNodeGroup.


        :return: The node_group of this AuxiliaryNodeGroup.
        :rtype: NodeGroup
        """
        return self._node_group

    @node_group.setter
    def node_group(self, node_group):
        """Sets the node_group of this AuxiliaryNodeGroup.


        :param node_group: The node_group of this AuxiliaryNodeGroup.
        :type node_group: NodeGroup
        """

        self._node_group = node_group

    @property
    def node_group_id(self):
        """Gets the node_group_id of this AuxiliaryNodeGroup.

        Optional. A node group ID. Generated if not specified.The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of from 3 to 33 characters.

        :return: The node_group_id of this AuxiliaryNodeGroup.
        :rtype: str
        """
        return self._node_group_id

    @node_group_id.setter
    def node_group_id(self, node_group_id):
        """Sets the node_group_id of this AuxiliaryNodeGroup.

        Optional. A node group ID. Generated if not specified.The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of from 3 to 33 characters.

        :param node_group_id: The node_group_id of this AuxiliaryNodeGroup.
        :type node_group_id: str
        """

        self._node_group_id = node_group_id
