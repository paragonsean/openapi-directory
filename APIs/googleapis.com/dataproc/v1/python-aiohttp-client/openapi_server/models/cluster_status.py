# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, state: str=None, state_start_time: str=None, substate: str=None):
        """ClusterStatus - a model defined in OpenAPI

        :param detail: The detail of this ClusterStatus.
        :param state: The state of this ClusterStatus.
        :param state_start_time: The state_start_time of this ClusterStatus.
        :param substate: The substate of this ClusterStatus.
        """
        self.openapi_types = {
            'detail': str,
            'state': str,
            'state_start_time': str,
            'substate': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'state': 'state',
            'state_start_time': 'stateStartTime',
            'substate': 'substate'
        }

        self._detail = detail
        self._state = state
        self._state_start_time = state_start_time
        self._substate = substate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterStatus of this ClusterStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this ClusterStatus.

        Optional. Output only. Details of cluster's state.

        :return: The detail of this ClusterStatus.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ClusterStatus.

        Optional. Output only. Details of cluster's state.

        :param detail: The detail of this ClusterStatus.
        :type detail: str
        """

        self._detail = detail

    @property
    def state(self):
        """Gets the state of this ClusterStatus.

        Output only. The cluster's state.

        :return: The state of this ClusterStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClusterStatus.

        Output only. The cluster's state.

        :param state: The state of this ClusterStatus.
        :type state: str
        """
        allowed_values = ["UNKNOWN", "CREATING", "RUNNING", "ERROR", "ERROR_DUE_TO_UPDATE", "DELETING", "UPDATING", "STOPPING", "STOPPED", "STARTING", "REPAIRING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_start_time(self):
        """Gets the state_start_time of this ClusterStatus.

        Output only. Time when this state was entered (see JSON representation of Timestamp (https://developers.google.com/protocol-buffers/docs/proto3#json)).

        :return: The state_start_time of this ClusterStatus.
        :rtype: str
        """
        return self._state_start_time

    @state_start_time.setter
    def state_start_time(self, state_start_time):
        """Sets the state_start_time of this ClusterStatus.

        Output only. Time when this state was entered (see JSON representation of Timestamp (https://developers.google.com/protocol-buffers/docs/proto3#json)).

        :param state_start_time: The state_start_time of this ClusterStatus.
        :type state_start_time: str
        """

        self._state_start_time = state_start_time

    @property
    def substate(self):
        """Gets the substate of this ClusterStatus.

        Output only. Additional state information that includes status reported by the agent.

        :return: The substate of this ClusterStatus.
        :rtype: str
        """
        return self._substate

    @substate.setter
    def substate(self, substate):
        """Sets the substate of this ClusterStatus.

        Output only. Additional state information that includes status reported by the agent.

        :param substate: The substate of this ClusterStatus.
        :type substate: str
        """
        allowed_values = ["UNSPECIFIED", "UNHEALTHY", "STALE_STATUS"]  # noqa: E501
        if substate not in allowed_values:
            raise ValueError(
                "Invalid value for `substate` ({0}), must be one of {1}"
                .format(substate, allowed_values)
            )

        self._substate = substate
