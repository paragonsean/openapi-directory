# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PySparkBatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_uris: List[str]=None, args: List[str]=None, file_uris: List[str]=None, jar_file_uris: List[str]=None, main_python_file_uri: str=None, python_file_uris: List[str]=None):
        """PySparkBatch - a model defined in OpenAPI

        :param archive_uris: The archive_uris of this PySparkBatch.
        :param args: The args of this PySparkBatch.
        :param file_uris: The file_uris of this PySparkBatch.
        :param jar_file_uris: The jar_file_uris of this PySparkBatch.
        :param main_python_file_uri: The main_python_file_uri of this PySparkBatch.
        :param python_file_uris: The python_file_uris of this PySparkBatch.
        """
        self.openapi_types = {
            'archive_uris': List[str],
            'args': List[str],
            'file_uris': List[str],
            'jar_file_uris': List[str],
            'main_python_file_uri': str,
            'python_file_uris': List[str]
        }

        self.attribute_map = {
            'archive_uris': 'archiveUris',
            'args': 'args',
            'file_uris': 'fileUris',
            'jar_file_uris': 'jarFileUris',
            'main_python_file_uri': 'mainPythonFileUri',
            'python_file_uris': 'pythonFileUris'
        }

        self._archive_uris = archive_uris
        self._args = args
        self._file_uris = file_uris
        self._jar_file_uris = jar_file_uris
        self._main_python_file_uri = main_python_file_uri
        self._python_file_uris = python_file_uris

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PySparkBatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PySparkBatch of this PySparkBatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_uris(self):
        """Gets the archive_uris of this PySparkBatch.

        Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.

        :return: The archive_uris of this PySparkBatch.
        :rtype: List[str]
        """
        return self._archive_uris

    @archive_uris.setter
    def archive_uris(self, archive_uris):
        """Sets the archive_uris of this PySparkBatch.

        Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.

        :param archive_uris: The archive_uris of this PySparkBatch.
        :type archive_uris: List[str]
        """

        self._archive_uris = archive_uris

    @property
    def args(self):
        """Gets the args of this PySparkBatch.

        Optional. The arguments to pass to the driver. Do not include arguments that can be set as batch properties, such as --conf, since a collision can occur that causes an incorrect batch submission.

        :return: The args of this PySparkBatch.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this PySparkBatch.

        Optional. The arguments to pass to the driver. Do not include arguments that can be set as batch properties, such as --conf, since a collision can occur that causes an incorrect batch submission.

        :param args: The args of this PySparkBatch.
        :type args: List[str]
        """

        self._args = args

    @property
    def file_uris(self):
        """Gets the file_uris of this PySparkBatch.

        Optional. HCFS URIs of files to be placed in the working directory of each executor.

        :return: The file_uris of this PySparkBatch.
        :rtype: List[str]
        """
        return self._file_uris

    @file_uris.setter
    def file_uris(self, file_uris):
        """Sets the file_uris of this PySparkBatch.

        Optional. HCFS URIs of files to be placed in the working directory of each executor.

        :param file_uris: The file_uris of this PySparkBatch.
        :type file_uris: List[str]
        """

        self._file_uris = file_uris

    @property
    def jar_file_uris(self):
        """Gets the jar_file_uris of this PySparkBatch.

        Optional. HCFS URIs of jar files to add to the classpath of the Spark driver and tasks.

        :return: The jar_file_uris of this PySparkBatch.
        :rtype: List[str]
        """
        return self._jar_file_uris

    @jar_file_uris.setter
    def jar_file_uris(self, jar_file_uris):
        """Sets the jar_file_uris of this PySparkBatch.

        Optional. HCFS URIs of jar files to add to the classpath of the Spark driver and tasks.

        :param jar_file_uris: The jar_file_uris of this PySparkBatch.
        :type jar_file_uris: List[str]
        """

        self._jar_file_uris = jar_file_uris

    @property
    def main_python_file_uri(self):
        """Gets the main_python_file_uri of this PySparkBatch.

        Required. The HCFS URI of the main Python file to use as the Spark driver. Must be a .py file.

        :return: The main_python_file_uri of this PySparkBatch.
        :rtype: str
        """
        return self._main_python_file_uri

    @main_python_file_uri.setter
    def main_python_file_uri(self, main_python_file_uri):
        """Sets the main_python_file_uri of this PySparkBatch.

        Required. The HCFS URI of the main Python file to use as the Spark driver. Must be a .py file.

        :param main_python_file_uri: The main_python_file_uri of this PySparkBatch.
        :type main_python_file_uri: str
        """

        self._main_python_file_uri = main_python_file_uri

    @property
    def python_file_uris(self):
        """Gets the python_file_uris of this PySparkBatch.

        Optional. HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.

        :return: The python_file_uris of this PySparkBatch.
        :rtype: List[str]
        """
        return self._python_file_uris

    @python_file_uris.setter
    def python_file_uris(self, python_file_uris):
        """Sets the python_file_uris of this PySparkBatch.

        Optional. HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.

        :param python_file_uris: The python_file_uris of this PySparkBatch.
        :type python_file_uris: List[str]
        """

        self._python_file_uris = python_file_uris
