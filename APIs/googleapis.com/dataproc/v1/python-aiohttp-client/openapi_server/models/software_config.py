# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SoftwareConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_version: str=None, optional_components: List[str]=None, properties: Dict[str, str]=None):
        """SoftwareConfig - a model defined in OpenAPI

        :param image_version: The image_version of this SoftwareConfig.
        :param optional_components: The optional_components of this SoftwareConfig.
        :param properties: The properties of this SoftwareConfig.
        """
        self.openapi_types = {
            'image_version': str,
            'optional_components': List[str],
            'properties': Dict[str, str]
        }

        self.attribute_map = {
            'image_version': 'imageVersion',
            'optional_components': 'optionalComponents',
            'properties': 'properties'
        }

        self._image_version = image_version
        self._optional_components = optional_components
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoftwareConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoftwareConfig of this SoftwareConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_version(self):
        """Gets the image_version of this SoftwareConfig.

        Optional. The version of software inside the cluster. It must be one of the supported Dataproc Versions (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#supported_dataproc_versions), such as \"1.2\" (including a subminor version, such as \"1.2.29\"), or the \"preview\" version (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#other_versions). If unspecified, it defaults to the latest Debian version.

        :return: The image_version of this SoftwareConfig.
        :rtype: str
        """
        return self._image_version

    @image_version.setter
    def image_version(self, image_version):
        """Sets the image_version of this SoftwareConfig.

        Optional. The version of software inside the cluster. It must be one of the supported Dataproc Versions (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#supported_dataproc_versions), such as \"1.2\" (including a subminor version, such as \"1.2.29\"), or the \"preview\" version (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#other_versions). If unspecified, it defaults to the latest Debian version.

        :param image_version: The image_version of this SoftwareConfig.
        :type image_version: str
        """

        self._image_version = image_version

    @property
    def optional_components(self):
        """Gets the optional_components of this SoftwareConfig.

        Optional. The set of components to activate on the cluster.

        :return: The optional_components of this SoftwareConfig.
        :rtype: List[str]
        """
        return self._optional_components

    @optional_components.setter
    def optional_components(self, optional_components):
        """Sets the optional_components of this SoftwareConfig.

        Optional. The set of components to activate on the cluster.

        :param optional_components: The optional_components of this SoftwareConfig.
        :type optional_components: List[str]
        """
        allowed_values = ["COMPONENT_UNSPECIFIED", "ANACONDA", "DOCKER", "DRUID", "FLINK", "HBASE", "HIVE_WEBHCAT", "HUDI", "JUPYTER", "PRESTO", "TRINO", "RANGER", "SOLR", "ZEPPELIN", "ZOOKEEPER"]  # noqa: E501
        if not set(optional_components).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `optional_components` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(optional_components) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._optional_components = optional_components

    @property
    def properties(self):
        """Gets the properties of this SoftwareConfig.

        Optional. The properties to set on daemon config files.Property keys are specified in prefix:property format, for example core:hadoop.tmp.dir. The following are supported prefixes and their mappings: capacity-scheduler: capacity-scheduler.xml core: core-site.xml distcp: distcp-default.xml hdfs: hdfs-site.xml hive: hive-site.xml mapred: mapred-site.xml pig: pig.properties spark: spark-defaults.conf yarn: yarn-site.xmlFor more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).

        :return: The properties of this SoftwareConfig.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this SoftwareConfig.

        Optional. The properties to set on daemon config files.Property keys are specified in prefix:property format, for example core:hadoop.tmp.dir. The following are supported prefixes and their mappings: capacity-scheduler: capacity-scheduler.xml core: core-site.xml distcp: distcp-default.xml hdfs: hdfs-site.xml hive: hive-site.xml mapred: mapred-site.xml pig: pig.properties spark: spark-defaults.conf yarn: yarn-site.xmlFor more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).

        :param properties: The properties of this SoftwareConfig.
        :type properties: Dict[str, str]
        """

        self._properties = properties
