# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gke_node_pool_target import GkeNodePoolTarget
from openapi_server.models.namespaced_gke_deployment_target import NamespacedGkeDeploymentTarget
from openapi_server import util


class GkeClusterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gke_cluster_target: str=None, namespaced_gke_deployment_target: NamespacedGkeDeploymentTarget=None, node_pool_target: List[GkeNodePoolTarget]=None):
        """GkeClusterConfig - a model defined in OpenAPI

        :param gke_cluster_target: The gke_cluster_target of this GkeClusterConfig.
        :param namespaced_gke_deployment_target: The namespaced_gke_deployment_target of this GkeClusterConfig.
        :param node_pool_target: The node_pool_target of this GkeClusterConfig.
        """
        self.openapi_types = {
            'gke_cluster_target': str,
            'namespaced_gke_deployment_target': NamespacedGkeDeploymentTarget,
            'node_pool_target': List[GkeNodePoolTarget]
        }

        self.attribute_map = {
            'gke_cluster_target': 'gkeClusterTarget',
            'namespaced_gke_deployment_target': 'namespacedGkeDeploymentTarget',
            'node_pool_target': 'nodePoolTarget'
        }

        self._gke_cluster_target = gke_cluster_target
        self._namespaced_gke_deployment_target = namespaced_gke_deployment_target
        self._node_pool_target = node_pool_target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GkeClusterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GkeClusterConfig of this GkeClusterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gke_cluster_target(self):
        """Gets the gke_cluster_target of this GkeClusterConfig.

        Optional. A target GKE cluster to deploy to. It must be in the same project and region as the Dataproc cluster (the GKE cluster can be zonal or regional). Format: 'projects/{project}/locations/{location}/clusters/{cluster_id}'

        :return: The gke_cluster_target of this GkeClusterConfig.
        :rtype: str
        """
        return self._gke_cluster_target

    @gke_cluster_target.setter
    def gke_cluster_target(self, gke_cluster_target):
        """Sets the gke_cluster_target of this GkeClusterConfig.

        Optional. A target GKE cluster to deploy to. It must be in the same project and region as the Dataproc cluster (the GKE cluster can be zonal or regional). Format: 'projects/{project}/locations/{location}/clusters/{cluster_id}'

        :param gke_cluster_target: The gke_cluster_target of this GkeClusterConfig.
        :type gke_cluster_target: str
        """

        self._gke_cluster_target = gke_cluster_target

    @property
    def namespaced_gke_deployment_target(self):
        """Gets the namespaced_gke_deployment_target of this GkeClusterConfig.


        :return: The namespaced_gke_deployment_target of this GkeClusterConfig.
        :rtype: NamespacedGkeDeploymentTarget
        """
        return self._namespaced_gke_deployment_target

    @namespaced_gke_deployment_target.setter
    def namespaced_gke_deployment_target(self, namespaced_gke_deployment_target):
        """Sets the namespaced_gke_deployment_target of this GkeClusterConfig.


        :param namespaced_gke_deployment_target: The namespaced_gke_deployment_target of this GkeClusterConfig.
        :type namespaced_gke_deployment_target: NamespacedGkeDeploymentTarget
        """

        self._namespaced_gke_deployment_target = namespaced_gke_deployment_target

    @property
    def node_pool_target(self):
        """Gets the node_pool_target of this GkeClusterConfig.

        Optional. GKE node pools where workloads will be scheduled. At least one node pool must be assigned the DEFAULT GkeNodePoolTarget.Role. If a GkeNodePoolTarget is not specified, Dataproc constructs a DEFAULT GkeNodePoolTarget. Each role can be given to only one GkeNodePoolTarget. All node pools must have the same location settings.

        :return: The node_pool_target of this GkeClusterConfig.
        :rtype: List[GkeNodePoolTarget]
        """
        return self._node_pool_target

    @node_pool_target.setter
    def node_pool_target(self, node_pool_target):
        """Sets the node_pool_target of this GkeClusterConfig.

        Optional. GKE node pools where workloads will be scheduled. At least one node pool must be assigned the DEFAULT GkeNodePoolTarget.Role. If a GkeNodePoolTarget is not specified, Dataproc constructs a DEFAULT GkeNodePoolTarget. Each role can be given to only one GkeNodePoolTarget. All node pools must have the same location settings.

        :param node_pool_target: The node_pool_target of this GkeClusterConfig.
        :type node_pool_target: List[GkeNodePoolTarget]
        """

        self._node_pool_target = node_pool_target
