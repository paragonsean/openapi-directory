# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.confidential_instance_config import ConfidentialInstanceConfig
from openapi_server.models.node_group_affinity import NodeGroupAffinity
from openapi_server.models.reservation_affinity import ReservationAffinity
from openapi_server.models.shielded_instance_config import ShieldedInstanceConfig
from openapi_server import util


class GceClusterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidential_instance_config: ConfidentialInstanceConfig=None, internal_ip_only: bool=None, metadata: Dict[str, str]=None, network_uri: str=None, node_group_affinity: NodeGroupAffinity=None, private_ipv6_google_access: str=None, reservation_affinity: ReservationAffinity=None, service_account: str=None, service_account_scopes: List[str]=None, shielded_instance_config: ShieldedInstanceConfig=None, subnetwork_uri: str=None, tags: List[str]=None, zone_uri: str=None):
        """GceClusterConfig - a model defined in OpenAPI

        :param confidential_instance_config: The confidential_instance_config of this GceClusterConfig.
        :param internal_ip_only: The internal_ip_only of this GceClusterConfig.
        :param metadata: The metadata of this GceClusterConfig.
        :param network_uri: The network_uri of this GceClusterConfig.
        :param node_group_affinity: The node_group_affinity of this GceClusterConfig.
        :param private_ipv6_google_access: The private_ipv6_google_access of this GceClusterConfig.
        :param reservation_affinity: The reservation_affinity of this GceClusterConfig.
        :param service_account: The service_account of this GceClusterConfig.
        :param service_account_scopes: The service_account_scopes of this GceClusterConfig.
        :param shielded_instance_config: The shielded_instance_config of this GceClusterConfig.
        :param subnetwork_uri: The subnetwork_uri of this GceClusterConfig.
        :param tags: The tags of this GceClusterConfig.
        :param zone_uri: The zone_uri of this GceClusterConfig.
        """
        self.openapi_types = {
            'confidential_instance_config': ConfidentialInstanceConfig,
            'internal_ip_only': bool,
            'metadata': Dict[str, str],
            'network_uri': str,
            'node_group_affinity': NodeGroupAffinity,
            'private_ipv6_google_access': str,
            'reservation_affinity': ReservationAffinity,
            'service_account': str,
            'service_account_scopes': List[str],
            'shielded_instance_config': ShieldedInstanceConfig,
            'subnetwork_uri': str,
            'tags': List[str],
            'zone_uri': str
        }

        self.attribute_map = {
            'confidential_instance_config': 'confidentialInstanceConfig',
            'internal_ip_only': 'internalIpOnly',
            'metadata': 'metadata',
            'network_uri': 'networkUri',
            'node_group_affinity': 'nodeGroupAffinity',
            'private_ipv6_google_access': 'privateIpv6GoogleAccess',
            'reservation_affinity': 'reservationAffinity',
            'service_account': 'serviceAccount',
            'service_account_scopes': 'serviceAccountScopes',
            'shielded_instance_config': 'shieldedInstanceConfig',
            'subnetwork_uri': 'subnetworkUri',
            'tags': 'tags',
            'zone_uri': 'zoneUri'
        }

        self._confidential_instance_config = confidential_instance_config
        self._internal_ip_only = internal_ip_only
        self._metadata = metadata
        self._network_uri = network_uri
        self._node_group_affinity = node_group_affinity
        self._private_ipv6_google_access = private_ipv6_google_access
        self._reservation_affinity = reservation_affinity
        self._service_account = service_account
        self._service_account_scopes = service_account_scopes
        self._shielded_instance_config = shielded_instance_config
        self._subnetwork_uri = subnetwork_uri
        self._tags = tags
        self._zone_uri = zone_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GceClusterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GceClusterConfig of this GceClusterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidential_instance_config(self):
        """Gets the confidential_instance_config of this GceClusterConfig.


        :return: The confidential_instance_config of this GceClusterConfig.
        :rtype: ConfidentialInstanceConfig
        """
        return self._confidential_instance_config

    @confidential_instance_config.setter
    def confidential_instance_config(self, confidential_instance_config):
        """Sets the confidential_instance_config of this GceClusterConfig.


        :param confidential_instance_config: The confidential_instance_config of this GceClusterConfig.
        :type confidential_instance_config: ConfidentialInstanceConfig
        """

        self._confidential_instance_config = confidential_instance_config

    @property
    def internal_ip_only(self):
        """Gets the internal_ip_only of this GceClusterConfig.

        Optional. If true, all instances in the cluster will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This internal_ip_only restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses.

        :return: The internal_ip_only of this GceClusterConfig.
        :rtype: bool
        """
        return self._internal_ip_only

    @internal_ip_only.setter
    def internal_ip_only(self, internal_ip_only):
        """Sets the internal_ip_only of this GceClusterConfig.

        Optional. If true, all instances in the cluster will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This internal_ip_only restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses.

        :param internal_ip_only: The internal_ip_only of this GceClusterConfig.
        :type internal_ip_only: bool
        """

        self._internal_ip_only = internal_ip_only

    @property
    def metadata(self):
        """Gets the metadata of this GceClusterConfig.

        Optional. The Compute Engine metadata entries to add to all instances (see Project and instance metadata (https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).

        :return: The metadata of this GceClusterConfig.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GceClusterConfig.

        Optional. The Compute Engine metadata entries to add to all instances (see Project and instance metadata (https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).

        :param metadata: The metadata of this GceClusterConfig.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def network_uri(self):
        """Gets the network_uri of this GceClusterConfig.

        Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither network_uri nor subnetwork_uri is specified, the \"default\" network of the project is used, if it exists. Cannot be a \"Custom Subnet Network\" (see Using Subnetworks (https://cloud.google.com/compute/docs/subnetworks) for more information).A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default projects/[project_id]/global/networks/default default

        :return: The network_uri of this GceClusterConfig.
        :rtype: str
        """
        return self._network_uri

    @network_uri.setter
    def network_uri(self, network_uri):
        """Sets the network_uri of this GceClusterConfig.

        Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither network_uri nor subnetwork_uri is specified, the \"default\" network of the project is used, if it exists. Cannot be a \"Custom Subnet Network\" (see Using Subnetworks (https://cloud.google.com/compute/docs/subnetworks) for more information).A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default projects/[project_id]/global/networks/default default

        :param network_uri: The network_uri of this GceClusterConfig.
        :type network_uri: str
        """

        self._network_uri = network_uri

    @property
    def node_group_affinity(self):
        """Gets the node_group_affinity of this GceClusterConfig.


        :return: The node_group_affinity of this GceClusterConfig.
        :rtype: NodeGroupAffinity
        """
        return self._node_group_affinity

    @node_group_affinity.setter
    def node_group_affinity(self, node_group_affinity):
        """Sets the node_group_affinity of this GceClusterConfig.


        :param node_group_affinity: The node_group_affinity of this GceClusterConfig.
        :type node_group_affinity: NodeGroupAffinity
        """

        self._node_group_affinity = node_group_affinity

    @property
    def private_ipv6_google_access(self):
        """Gets the private_ipv6_google_access of this GceClusterConfig.

        Optional. The type of IPv6 access for a cluster.

        :return: The private_ipv6_google_access of this GceClusterConfig.
        :rtype: str
        """
        return self._private_ipv6_google_access

    @private_ipv6_google_access.setter
    def private_ipv6_google_access(self, private_ipv6_google_access):
        """Sets the private_ipv6_google_access of this GceClusterConfig.

        Optional. The type of IPv6 access for a cluster.

        :param private_ipv6_google_access: The private_ipv6_google_access of this GceClusterConfig.
        :type private_ipv6_google_access: str
        """
        allowed_values = ["PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED", "INHERIT_FROM_SUBNETWORK", "OUTBOUND", "BIDIRECTIONAL"]  # noqa: E501
        if private_ipv6_google_access not in allowed_values:
            raise ValueError(
                "Invalid value for `private_ipv6_google_access` ({0}), must be one of {1}"
                .format(private_ipv6_google_access, allowed_values)
            )

        self._private_ipv6_google_access = private_ipv6_google_access

    @property
    def reservation_affinity(self):
        """Gets the reservation_affinity of this GceClusterConfig.


        :return: The reservation_affinity of this GceClusterConfig.
        :rtype: ReservationAffinity
        """
        return self._reservation_affinity

    @reservation_affinity.setter
    def reservation_affinity(self, reservation_affinity):
        """Sets the reservation_affinity of this GceClusterConfig.


        :param reservation_affinity: The reservation_affinity of this GceClusterConfig.
        :type reservation_affinity: ReservationAffinity
        """

        self._reservation_affinity = reservation_affinity

    @property
    def service_account(self):
        """Gets the service_account of this GceClusterConfig.

        Optional. The Dataproc service account (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/service-accounts#service_accounts_in_dataproc) (also see VM Data Plane identity (https://cloud.google.com/dataproc/docs/concepts/iam/dataproc-principals#vm_service_account_data_plane_identity)) used by Dataproc cluster VM instances to access Google Cloud Platform services.If not specified, the Compute Engine default service account (https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.

        :return: The service_account of this GceClusterConfig.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this GceClusterConfig.

        Optional. The Dataproc service account (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/service-accounts#service_accounts_in_dataproc) (also see VM Data Plane identity (https://cloud.google.com/dataproc/docs/concepts/iam/dataproc-principals#vm_service_account_data_plane_identity)) used by Dataproc cluster VM instances to access Google Cloud Platform services.If not specified, the Compute Engine default service account (https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.

        :param service_account: The service_account of this GceClusterConfig.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def service_account_scopes(self):
        """Gets the service_account_scopes of this GceClusterConfig.

        Optional. The URIs of service account scopes to be included in Compute Engine instances. The following base set of scopes is always included: https://www.googleapis.com/auth/cloud.useraccounts.readonly https://www.googleapis.com/auth/devstorage.read_write https://www.googleapis.com/auth/logging.writeIf no scopes are specified, the following defaults are also provided: https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/bigtable.admin.table https://www.googleapis.com/auth/bigtable.data https://www.googleapis.com/auth/devstorage.full_control

        :return: The service_account_scopes of this GceClusterConfig.
        :rtype: List[str]
        """
        return self._service_account_scopes

    @service_account_scopes.setter
    def service_account_scopes(self, service_account_scopes):
        """Sets the service_account_scopes of this GceClusterConfig.

        Optional. The URIs of service account scopes to be included in Compute Engine instances. The following base set of scopes is always included: https://www.googleapis.com/auth/cloud.useraccounts.readonly https://www.googleapis.com/auth/devstorage.read_write https://www.googleapis.com/auth/logging.writeIf no scopes are specified, the following defaults are also provided: https://www.googleapis.com/auth/bigquery https://www.googleapis.com/auth/bigtable.admin.table https://www.googleapis.com/auth/bigtable.data https://www.googleapis.com/auth/devstorage.full_control

        :param service_account_scopes: The service_account_scopes of this GceClusterConfig.
        :type service_account_scopes: List[str]
        """

        self._service_account_scopes = service_account_scopes

    @property
    def shielded_instance_config(self):
        """Gets the shielded_instance_config of this GceClusterConfig.


        :return: The shielded_instance_config of this GceClusterConfig.
        :rtype: ShieldedInstanceConfig
        """
        return self._shielded_instance_config

    @shielded_instance_config.setter
    def shielded_instance_config(self, shielded_instance_config):
        """Sets the shielded_instance_config of this GceClusterConfig.


        :param shielded_instance_config: The shielded_instance_config of this GceClusterConfig.
        :type shielded_instance_config: ShieldedInstanceConfig
        """

        self._shielded_instance_config = shielded_instance_config

    @property
    def subnetwork_uri(self):
        """Gets the subnetwork_uri of this GceClusterConfig.

        Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/regions/[region]/subnetworks/sub0 projects/[project_id]/regions/[region]/subnetworks/sub0 sub0

        :return: The subnetwork_uri of this GceClusterConfig.
        :rtype: str
        """
        return self._subnetwork_uri

    @subnetwork_uri.setter
    def subnetwork_uri(self, subnetwork_uri):
        """Sets the subnetwork_uri of this GceClusterConfig.

        Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/regions/[region]/subnetworks/sub0 projects/[project_id]/regions/[region]/subnetworks/sub0 sub0

        :param subnetwork_uri: The subnetwork_uri of this GceClusterConfig.
        :type subnetwork_uri: str
        """

        self._subnetwork_uri = subnetwork_uri

    @property
    def tags(self):
        """Gets the tags of this GceClusterConfig.

        The Compute Engine tags to add to all instances (see Tagging instances (https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).

        :return: The tags of this GceClusterConfig.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GceClusterConfig.

        The Compute Engine tags to add to all instances (see Tagging instances (https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).

        :param tags: The tags of this GceClusterConfig.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def zone_uri(self):
        """Gets the zone_uri of this GceClusterConfig.

        Optional. The Compute Engine zone where the Dataproc cluster will be located. If omitted, the service will pick a zone in the cluster's Compute Engine region. On a get request, zone will always be present.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone] projects/[project_id]/zones/[zone] [zone]

        :return: The zone_uri of this GceClusterConfig.
        :rtype: str
        """
        return self._zone_uri

    @zone_uri.setter
    def zone_uri(self, zone_uri):
        """Sets the zone_uri of this GceClusterConfig.

        Optional. The Compute Engine zone where the Dataproc cluster will be located. If omitted, the service will pick a zone in the cluster's Compute Engine region. On a get request, zone will always be present.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone] projects/[project_id]/zones/[zone] [zone]

        :param zone_uri: The zone_uri of this GceClusterConfig.
        :type zone_uri: str
        """

        self._zone_uri = zone_uri
