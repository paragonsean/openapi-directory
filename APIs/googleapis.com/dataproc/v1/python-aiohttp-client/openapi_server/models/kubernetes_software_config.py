# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KubernetesSoftwareConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_version: Dict[str, str]=None, properties: Dict[str, str]=None):
        """KubernetesSoftwareConfig - a model defined in OpenAPI

        :param component_version: The component_version of this KubernetesSoftwareConfig.
        :param properties: The properties of this KubernetesSoftwareConfig.
        """
        self.openapi_types = {
            'component_version': Dict[str, str],
            'properties': Dict[str, str]
        }

        self.attribute_map = {
            'component_version': 'componentVersion',
            'properties': 'properties'
        }

        self._component_version = component_version
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KubernetesSoftwareConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KubernetesSoftwareConfig of this KubernetesSoftwareConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_version(self):
        """Gets the component_version of this KubernetesSoftwareConfig.

        The components that should be installed in this Dataproc cluster. The key must be a string from the KubernetesComponent enumeration. The value is the version of the software to be installed. At least one entry must be specified.

        :return: The component_version of this KubernetesSoftwareConfig.
        :rtype: Dict[str, str]
        """
        return self._component_version

    @component_version.setter
    def component_version(self, component_version):
        """Sets the component_version of this KubernetesSoftwareConfig.

        The components that should be installed in this Dataproc cluster. The key must be a string from the KubernetesComponent enumeration. The value is the version of the software to be installed. At least one entry must be specified.

        :param component_version: The component_version of this KubernetesSoftwareConfig.
        :type component_version: Dict[str, str]
        """

        self._component_version = component_version

    @property
    def properties(self):
        """Gets the properties of this KubernetesSoftwareConfig.

        The properties to set on daemon config files.Property keys are specified in prefix:property format, for example spark:spark.kubernetes.container.image. The following are supported prefixes and their mappings: spark: spark-defaults.confFor more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).

        :return: The properties of this KubernetesSoftwareConfig.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this KubernetesSoftwareConfig.

        The properties to set on daemon config files.Property keys are specified in prefix:property format, for example spark:spark.kubernetes.container.image. The following are supported prefixes and their mappings: spark: spark-defaults.confFor more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).

        :param properties: The properties of this KubernetesSoftwareConfig.
        :type properties: Dict[str, str]
        """

        self._properties = properties
