# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkflowNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, job_id: str=None, prerequisite_step_ids: List[str]=None, state: str=None, step_id: str=None):
        """WorkflowNode - a model defined in OpenAPI

        :param error: The error of this WorkflowNode.
        :param job_id: The job_id of this WorkflowNode.
        :param prerequisite_step_ids: The prerequisite_step_ids of this WorkflowNode.
        :param state: The state of this WorkflowNode.
        :param step_id: The step_id of this WorkflowNode.
        """
        self.openapi_types = {
            'error': str,
            'job_id': str,
            'prerequisite_step_ids': List[str],
            'state': str,
            'step_id': str
        }

        self.attribute_map = {
            'error': 'error',
            'job_id': 'jobId',
            'prerequisite_step_ids': 'prerequisiteStepIds',
            'state': 'state',
            'step_id': 'stepId'
        }

        self._error = error
        self._job_id = job_id
        self._prerequisite_step_ids = prerequisite_step_ids
        self._state = state
        self._step_id = step_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowNode of this WorkflowNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this WorkflowNode.

        Output only. The error detail.

        :return: The error of this WorkflowNode.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this WorkflowNode.

        Output only. The error detail.

        :param error: The error of this WorkflowNode.
        :type error: str
        """

        self._error = error

    @property
    def job_id(self):
        """Gets the job_id of this WorkflowNode.

        Output only. The job id; populated after the node enters RUNNING state.

        :return: The job_id of this WorkflowNode.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this WorkflowNode.

        Output only. The job id; populated after the node enters RUNNING state.

        :param job_id: The job_id of this WorkflowNode.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def prerequisite_step_ids(self):
        """Gets the prerequisite_step_ids of this WorkflowNode.

        Output only. Node's prerequisite nodes.

        :return: The prerequisite_step_ids of this WorkflowNode.
        :rtype: List[str]
        """
        return self._prerequisite_step_ids

    @prerequisite_step_ids.setter
    def prerequisite_step_ids(self, prerequisite_step_ids):
        """Sets the prerequisite_step_ids of this WorkflowNode.

        Output only. Node's prerequisite nodes.

        :param prerequisite_step_ids: The prerequisite_step_ids of this WorkflowNode.
        :type prerequisite_step_ids: List[str]
        """

        self._prerequisite_step_ids = prerequisite_step_ids

    @property
    def state(self):
        """Gets the state of this WorkflowNode.

        Output only. The node state.

        :return: The state of this WorkflowNode.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this WorkflowNode.

        Output only. The node state.

        :param state: The state of this WorkflowNode.
        :type state: str
        """
        allowed_values = ["NODE_STATE_UNSPECIFIED", "BLOCKED", "RUNNABLE", "RUNNING", "COMPLETED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def step_id(self):
        """Gets the step_id of this WorkflowNode.

        Output only. The name of the node.

        :return: The step_id of this WorkflowNode.
        :rtype: str
        """
        return self._step_id

    @step_id.setter
    def step_id(self, step_id):
        """Sets the step_id of this WorkflowNode.

        Output only. The name of the node.

        :param step_id: The step_id of this WorkflowNode.
        :type step_id: str
        """

        self._step_id = step_id
