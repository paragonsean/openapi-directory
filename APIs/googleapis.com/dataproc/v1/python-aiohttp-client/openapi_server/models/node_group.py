# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_group_config import InstanceGroupConfig
from openapi_server import util


class NodeGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: Dict[str, str]=None, name: str=None, node_group_config: InstanceGroupConfig=None, roles: List[str]=None):
        """NodeGroup - a model defined in OpenAPI

        :param labels: The labels of this NodeGroup.
        :param name: The name of this NodeGroup.
        :param node_group_config: The node_group_config of this NodeGroup.
        :param roles: The roles of this NodeGroup.
        """
        self.openapi_types = {
            'labels': Dict[str, str],
            'name': str,
            'node_group_config': InstanceGroupConfig,
            'roles': List[str]
        }

        self.attribute_map = {
            'labels': 'labels',
            'name': 'name',
            'node_group_config': 'nodeGroupConfig',
            'roles': 'roles'
        }

        self._labels = labels
        self._name = name
        self._node_group_config = node_group_config
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeGroup of this NodeGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this NodeGroup.

        Optional. Node group labels. Label keys must consist of from 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values can be empty. If specified, they must consist of from 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). The node group must have no more than 32 labelsn.

        :return: The labels of this NodeGroup.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this NodeGroup.

        Optional. Node group labels. Label keys must consist of from 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values can be empty. If specified, they must consist of from 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). The node group must have no more than 32 labelsn.

        :param labels: The labels of this NodeGroup.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this NodeGroup.

        The Node group resource name (https://aip.dev/122).

        :return: The name of this NodeGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeGroup.

        The Node group resource name (https://aip.dev/122).

        :param name: The name of this NodeGroup.
        :type name: str
        """

        self._name = name

    @property
    def node_group_config(self):
        """Gets the node_group_config of this NodeGroup.


        :return: The node_group_config of this NodeGroup.
        :rtype: InstanceGroupConfig
        """
        return self._node_group_config

    @node_group_config.setter
    def node_group_config(self, node_group_config):
        """Sets the node_group_config of this NodeGroup.


        :param node_group_config: The node_group_config of this NodeGroup.
        :type node_group_config: InstanceGroupConfig
        """

        self._node_group_config = node_group_config

    @property
    def roles(self):
        """Gets the roles of this NodeGroup.

        Required. Node group roles.

        :return: The roles of this NodeGroup.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this NodeGroup.

        Required. Node group roles.

        :param roles: The roles of this NodeGroup.
        :type roles: List[str]
        """
        allowed_values = ["ROLE_UNSPECIFIED", "DRIVER"]  # noqa: E501
        if not set(roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles
