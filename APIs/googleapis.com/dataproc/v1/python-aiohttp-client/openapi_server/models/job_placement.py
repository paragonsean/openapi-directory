# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobPlacement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_labels: Dict[str, str]=None, cluster_name: str=None, cluster_uuid: str=None):
        """JobPlacement - a model defined in OpenAPI

        :param cluster_labels: The cluster_labels of this JobPlacement.
        :param cluster_name: The cluster_name of this JobPlacement.
        :param cluster_uuid: The cluster_uuid of this JobPlacement.
        """
        self.openapi_types = {
            'cluster_labels': Dict[str, str],
            'cluster_name': str,
            'cluster_uuid': str
        }

        self.attribute_map = {
            'cluster_labels': 'clusterLabels',
            'cluster_name': 'clusterName',
            'cluster_uuid': 'clusterUuid'
        }

        self._cluster_labels = cluster_labels
        self._cluster_name = cluster_name
        self._cluster_uuid = cluster_uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobPlacement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobPlacement of this JobPlacement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_labels(self):
        """Gets the cluster_labels of this JobPlacement.

        Optional. Cluster labels to identify a cluster where the job will be submitted.

        :return: The cluster_labels of this JobPlacement.
        :rtype: Dict[str, str]
        """
        return self._cluster_labels

    @cluster_labels.setter
    def cluster_labels(self, cluster_labels):
        """Sets the cluster_labels of this JobPlacement.

        Optional. Cluster labels to identify a cluster where the job will be submitted.

        :param cluster_labels: The cluster_labels of this JobPlacement.
        :type cluster_labels: Dict[str, str]
        """

        self._cluster_labels = cluster_labels

    @property
    def cluster_name(self):
        """Gets the cluster_name of this JobPlacement.

        Required. The name of the cluster where the job will be submitted.

        :return: The cluster_name of this JobPlacement.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this JobPlacement.

        Required. The name of the cluster where the job will be submitted.

        :param cluster_name: The cluster_name of this JobPlacement.
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def cluster_uuid(self):
        """Gets the cluster_uuid of this JobPlacement.

        Output only. A cluster UUID generated by the Dataproc service when the job is submitted.

        :return: The cluster_uuid of this JobPlacement.
        :rtype: str
        """
        return self._cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):
        """Sets the cluster_uuid of this JobPlacement.

        Output only. A cluster UUID generated by the Dataproc service when the job is submitted.

        :param cluster_uuid: The cluster_uuid of this JobPlacement.
        :type cluster_uuid: str
        """

        self._cluster_uuid = cluster_uuid
