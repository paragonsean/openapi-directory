# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GkeNodePoolAutoscalingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_node_count: int=None, min_node_count: int=None):
        """GkeNodePoolAutoscalingConfig - a model defined in OpenAPI

        :param max_node_count: The max_node_count of this GkeNodePoolAutoscalingConfig.
        :param min_node_count: The min_node_count of this GkeNodePoolAutoscalingConfig.
        """
        self.openapi_types = {
            'max_node_count': int,
            'min_node_count': int
        }

        self.attribute_map = {
            'max_node_count': 'maxNodeCount',
            'min_node_count': 'minNodeCount'
        }

        self._max_node_count = max_node_count
        self._min_node_count = min_node_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GkeNodePoolAutoscalingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GkeNodePoolAutoscalingConfig of this GkeNodePoolAutoscalingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_node_count(self):
        """Gets the max_node_count of this GkeNodePoolAutoscalingConfig.

        The maximum number of nodes in the node pool. Must be >= min_node_count, and must be > 0. Note: Quota must be sufficient to scale up the cluster.

        :return: The max_node_count of this GkeNodePoolAutoscalingConfig.
        :rtype: int
        """
        return self._max_node_count

    @max_node_count.setter
    def max_node_count(self, max_node_count):
        """Sets the max_node_count of this GkeNodePoolAutoscalingConfig.

        The maximum number of nodes in the node pool. Must be >= min_node_count, and must be > 0. Note: Quota must be sufficient to scale up the cluster.

        :param max_node_count: The max_node_count of this GkeNodePoolAutoscalingConfig.
        :type max_node_count: int
        """

        self._max_node_count = max_node_count

    @property
    def min_node_count(self):
        """Gets the min_node_count of this GkeNodePoolAutoscalingConfig.

        The minimum number of nodes in the node pool. Must be >= 0 and <= max_node_count.

        :return: The min_node_count of this GkeNodePoolAutoscalingConfig.
        :rtype: int
        """
        return self._min_node_count

    @min_node_count.setter
    def min_node_count(self, min_node_count):
        """Sets the min_node_count of this GkeNodePoolAutoscalingConfig.

        The minimum number of nodes in the node pool. Must be >= 0 and <= max_node_count.

        :param min_node_count: The min_node_count of this GkeNodePoolAutoscalingConfig.
        :type min_node_count: int
        """

        self._min_node_count = min_node_count
