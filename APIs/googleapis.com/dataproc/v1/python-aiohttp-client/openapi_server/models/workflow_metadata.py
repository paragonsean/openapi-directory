# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_operation import ClusterOperation
from openapi_server.models.workflow_graph import WorkflowGraph
from openapi_server import util


class WorkflowMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_name: str=None, cluster_uuid: str=None, create_cluster: ClusterOperation=None, dag_end_time: str=None, dag_start_time: str=None, dag_timeout: str=None, delete_cluster: ClusterOperation=None, end_time: str=None, graph: WorkflowGraph=None, parameters: Dict[str, str]=None, start_time: str=None, state: str=None, template: str=None, version: int=None):
        """WorkflowMetadata - a model defined in OpenAPI

        :param cluster_name: The cluster_name of this WorkflowMetadata.
        :param cluster_uuid: The cluster_uuid of this WorkflowMetadata.
        :param create_cluster: The create_cluster of this WorkflowMetadata.
        :param dag_end_time: The dag_end_time of this WorkflowMetadata.
        :param dag_start_time: The dag_start_time of this WorkflowMetadata.
        :param dag_timeout: The dag_timeout of this WorkflowMetadata.
        :param delete_cluster: The delete_cluster of this WorkflowMetadata.
        :param end_time: The end_time of this WorkflowMetadata.
        :param graph: The graph of this WorkflowMetadata.
        :param parameters: The parameters of this WorkflowMetadata.
        :param start_time: The start_time of this WorkflowMetadata.
        :param state: The state of this WorkflowMetadata.
        :param template: The template of this WorkflowMetadata.
        :param version: The version of this WorkflowMetadata.
        """
        self.openapi_types = {
            'cluster_name': str,
            'cluster_uuid': str,
            'create_cluster': ClusterOperation,
            'dag_end_time': str,
            'dag_start_time': str,
            'dag_timeout': str,
            'delete_cluster': ClusterOperation,
            'end_time': str,
            'graph': WorkflowGraph,
            'parameters': Dict[str, str],
            'start_time': str,
            'state': str,
            'template': str,
            'version': int
        }

        self.attribute_map = {
            'cluster_name': 'clusterName',
            'cluster_uuid': 'clusterUuid',
            'create_cluster': 'createCluster',
            'dag_end_time': 'dagEndTime',
            'dag_start_time': 'dagStartTime',
            'dag_timeout': 'dagTimeout',
            'delete_cluster': 'deleteCluster',
            'end_time': 'endTime',
            'graph': 'graph',
            'parameters': 'parameters',
            'start_time': 'startTime',
            'state': 'state',
            'template': 'template',
            'version': 'version'
        }

        self._cluster_name = cluster_name
        self._cluster_uuid = cluster_uuid
        self._create_cluster = create_cluster
        self._dag_end_time = dag_end_time
        self._dag_start_time = dag_start_time
        self._dag_timeout = dag_timeout
        self._delete_cluster = delete_cluster
        self._end_time = end_time
        self._graph = graph
        self._parameters = parameters
        self._start_time = start_time
        self._state = state
        self._template = template
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowMetadata of this WorkflowMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_name(self):
        """Gets the cluster_name of this WorkflowMetadata.

        Output only. The name of the target cluster.

        :return: The cluster_name of this WorkflowMetadata.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this WorkflowMetadata.

        Output only. The name of the target cluster.

        :param cluster_name: The cluster_name of this WorkflowMetadata.
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def cluster_uuid(self):
        """Gets the cluster_uuid of this WorkflowMetadata.

        Output only. The UUID of target cluster.

        :return: The cluster_uuid of this WorkflowMetadata.
        :rtype: str
        """
        return self._cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):
        """Sets the cluster_uuid of this WorkflowMetadata.

        Output only. The UUID of target cluster.

        :param cluster_uuid: The cluster_uuid of this WorkflowMetadata.
        :type cluster_uuid: str
        """

        self._cluster_uuid = cluster_uuid

    @property
    def create_cluster(self):
        """Gets the create_cluster of this WorkflowMetadata.


        :return: The create_cluster of this WorkflowMetadata.
        :rtype: ClusterOperation
        """
        return self._create_cluster

    @create_cluster.setter
    def create_cluster(self, create_cluster):
        """Sets the create_cluster of this WorkflowMetadata.


        :param create_cluster: The create_cluster of this WorkflowMetadata.
        :type create_cluster: ClusterOperation
        """

        self._create_cluster = create_cluster

    @property
    def dag_end_time(self):
        """Gets the dag_end_time of this WorkflowMetadata.

        Output only. DAG end time, only set for workflows with dag_timeout when DAG ends.

        :return: The dag_end_time of this WorkflowMetadata.
        :rtype: str
        """
        return self._dag_end_time

    @dag_end_time.setter
    def dag_end_time(self, dag_end_time):
        """Sets the dag_end_time of this WorkflowMetadata.

        Output only. DAG end time, only set for workflows with dag_timeout when DAG ends.

        :param dag_end_time: The dag_end_time of this WorkflowMetadata.
        :type dag_end_time: str
        """

        self._dag_end_time = dag_end_time

    @property
    def dag_start_time(self):
        """Gets the dag_start_time of this WorkflowMetadata.

        Output only. DAG start time, only set for workflows with dag_timeout when DAG begins.

        :return: The dag_start_time of this WorkflowMetadata.
        :rtype: str
        """
        return self._dag_start_time

    @dag_start_time.setter
    def dag_start_time(self, dag_start_time):
        """Sets the dag_start_time of this WorkflowMetadata.

        Output only. DAG start time, only set for workflows with dag_timeout when DAG begins.

        :param dag_start_time: The dag_start_time of this WorkflowMetadata.
        :type dag_start_time: str
        """

        self._dag_start_time = dag_start_time

    @property
    def dag_timeout(self):
        """Gets the dag_timeout of this WorkflowMetadata.

        Output only. The timeout duration for the DAG of jobs, expressed in seconds (see JSON representation of duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).

        :return: The dag_timeout of this WorkflowMetadata.
        :rtype: str
        """
        return self._dag_timeout

    @dag_timeout.setter
    def dag_timeout(self, dag_timeout):
        """Sets the dag_timeout of this WorkflowMetadata.

        Output only. The timeout duration for the DAG of jobs, expressed in seconds (see JSON representation of duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).

        :param dag_timeout: The dag_timeout of this WorkflowMetadata.
        :type dag_timeout: str
        """

        self._dag_timeout = dag_timeout

    @property
    def delete_cluster(self):
        """Gets the delete_cluster of this WorkflowMetadata.


        :return: The delete_cluster of this WorkflowMetadata.
        :rtype: ClusterOperation
        """
        return self._delete_cluster

    @delete_cluster.setter
    def delete_cluster(self, delete_cluster):
        """Sets the delete_cluster of this WorkflowMetadata.


        :param delete_cluster: The delete_cluster of this WorkflowMetadata.
        :type delete_cluster: ClusterOperation
        """

        self._delete_cluster = delete_cluster

    @property
    def end_time(self):
        """Gets the end_time of this WorkflowMetadata.

        Output only. Workflow end time.

        :return: The end_time of this WorkflowMetadata.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this WorkflowMetadata.

        Output only. Workflow end time.

        :param end_time: The end_time of this WorkflowMetadata.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def graph(self):
        """Gets the graph of this WorkflowMetadata.


        :return: The graph of this WorkflowMetadata.
        :rtype: WorkflowGraph
        """
        return self._graph

    @graph.setter
    def graph(self, graph):
        """Sets the graph of this WorkflowMetadata.


        :param graph: The graph of this WorkflowMetadata.
        :type graph: WorkflowGraph
        """

        self._graph = graph

    @property
    def parameters(self):
        """Gets the parameters of this WorkflowMetadata.

        Map from parameter names to values that were used for those parameters.

        :return: The parameters of this WorkflowMetadata.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this WorkflowMetadata.

        Map from parameter names to values that were used for those parameters.

        :param parameters: The parameters of this WorkflowMetadata.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters

    @property
    def start_time(self):
        """Gets the start_time of this WorkflowMetadata.

        Output only. Workflow start time.

        :return: The start_time of this WorkflowMetadata.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this WorkflowMetadata.

        Output only. Workflow start time.

        :param start_time: The start_time of this WorkflowMetadata.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this WorkflowMetadata.

        Output only. The workflow state.

        :return: The state of this WorkflowMetadata.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this WorkflowMetadata.

        Output only. The workflow state.

        :param state: The state of this WorkflowMetadata.
        :type state: str
        """
        allowed_values = ["UNKNOWN", "PENDING", "RUNNING", "DONE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def template(self):
        """Gets the template of this WorkflowMetadata.

        Output only. The resource name of the workflow template as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}

        :return: The template of this WorkflowMetadata.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this WorkflowMetadata.

        Output only. The resource name of the workflow template as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}

        :param template: The template of this WorkflowMetadata.
        :type template: str
        """

        self._template = template

    @property
    def version(self):
        """Gets the version of this WorkflowMetadata.

        Output only. The version of template at the time of workflow instantiation.

        :return: The version of this WorkflowMetadata.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WorkflowMetadata.

        Output only. The version of template at the time of workflow instantiation.

        :param version: The version of this WorkflowMetadata.
        :type version: int
        """

        self._version = version
