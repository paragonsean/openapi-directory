# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.logging_config import LoggingConfig
from openapi_server.models.query_list import QueryList
from openapi_server import util


class TrinoJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_tags: List[str]=None, continue_on_failure: bool=None, logging_config: LoggingConfig=None, output_format: str=None, properties: Dict[str, str]=None, query_file_uri: str=None, query_list: QueryList=None):
        """TrinoJob - a model defined in OpenAPI

        :param client_tags: The client_tags of this TrinoJob.
        :param continue_on_failure: The continue_on_failure of this TrinoJob.
        :param logging_config: The logging_config of this TrinoJob.
        :param output_format: The output_format of this TrinoJob.
        :param properties: The properties of this TrinoJob.
        :param query_file_uri: The query_file_uri of this TrinoJob.
        :param query_list: The query_list of this TrinoJob.
        """
        self.openapi_types = {
            'client_tags': List[str],
            'continue_on_failure': bool,
            'logging_config': LoggingConfig,
            'output_format': str,
            'properties': Dict[str, str],
            'query_file_uri': str,
            'query_list': QueryList
        }

        self.attribute_map = {
            'client_tags': 'clientTags',
            'continue_on_failure': 'continueOnFailure',
            'logging_config': 'loggingConfig',
            'output_format': 'outputFormat',
            'properties': 'properties',
            'query_file_uri': 'queryFileUri',
            'query_list': 'queryList'
        }

        self._client_tags = client_tags
        self._continue_on_failure = continue_on_failure
        self._logging_config = logging_config
        self._output_format = output_format
        self._properties = properties
        self._query_file_uri = query_file_uri
        self._query_list = query_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrinoJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrinoJob of this TrinoJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_tags(self):
        """Gets the client_tags of this TrinoJob.

        Optional. Trino client tags to attach to this query

        :return: The client_tags of this TrinoJob.
        :rtype: List[str]
        """
        return self._client_tags

    @client_tags.setter
    def client_tags(self, client_tags):
        """Sets the client_tags of this TrinoJob.

        Optional. Trino client tags to attach to this query

        :param client_tags: The client_tags of this TrinoJob.
        :type client_tags: List[str]
        """

        self._client_tags = client_tags

    @property
    def continue_on_failure(self):
        """Gets the continue_on_failure of this TrinoJob.

        Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.

        :return: The continue_on_failure of this TrinoJob.
        :rtype: bool
        """
        return self._continue_on_failure

    @continue_on_failure.setter
    def continue_on_failure(self, continue_on_failure):
        """Sets the continue_on_failure of this TrinoJob.

        Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.

        :param continue_on_failure: The continue_on_failure of this TrinoJob.
        :type continue_on_failure: bool
        """

        self._continue_on_failure = continue_on_failure

    @property
    def logging_config(self):
        """Gets the logging_config of this TrinoJob.


        :return: The logging_config of this TrinoJob.
        :rtype: LoggingConfig
        """
        return self._logging_config

    @logging_config.setter
    def logging_config(self, logging_config):
        """Sets the logging_config of this TrinoJob.


        :param logging_config: The logging_config of this TrinoJob.
        :type logging_config: LoggingConfig
        """

        self._logging_config = logging_config

    @property
    def output_format(self):
        """Gets the output_format of this TrinoJob.

        Optional. The format in which query output will be displayed. See the Trino documentation for supported output formats

        :return: The output_format of this TrinoJob.
        :rtype: str
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this TrinoJob.

        Optional. The format in which query output will be displayed. See the Trino documentation for supported output formats

        :param output_format: The output_format of this TrinoJob.
        :type output_format: str
        """

        self._output_format = output_format

    @property
    def properties(self):
        """Gets the properties of this TrinoJob.

        Optional. A mapping of property names to values. Used to set Trino session properties (https://trino.io/docs/current/sql/set-session.html) Equivalent to using the --session flag in the Trino CLI

        :return: The properties of this TrinoJob.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TrinoJob.

        Optional. A mapping of property names to values. Used to set Trino session properties (https://trino.io/docs/current/sql/set-session.html) Equivalent to using the --session flag in the Trino CLI

        :param properties: The properties of this TrinoJob.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def query_file_uri(self):
        """Gets the query_file_uri of this TrinoJob.

        The HCFS URI of the script that contains SQL queries.

        :return: The query_file_uri of this TrinoJob.
        :rtype: str
        """
        return self._query_file_uri

    @query_file_uri.setter
    def query_file_uri(self, query_file_uri):
        """Sets the query_file_uri of this TrinoJob.

        The HCFS URI of the script that contains SQL queries.

        :param query_file_uri: The query_file_uri of this TrinoJob.
        :type query_file_uri: str
        """

        self._query_file_uri = query_file_uri

    @property
    def query_list(self):
        """Gets the query_list of this TrinoJob.


        :return: The query_list of this TrinoJob.
        :rtype: QueryList
        """
        return self._query_list

    @query_list.setter
    def query_list(self, query_list):
        """Sets the query_list of this TrinoJob.


        :param query_list: The query_list of this TrinoJob.
        :type query_list: QueryList
        """

        self._query_list = query_list
