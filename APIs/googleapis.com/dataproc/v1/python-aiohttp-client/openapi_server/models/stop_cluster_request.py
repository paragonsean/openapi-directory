# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StopClusterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_uuid: str=None, request_id: str=None):
        """StopClusterRequest - a model defined in OpenAPI

        :param cluster_uuid: The cluster_uuid of this StopClusterRequest.
        :param request_id: The request_id of this StopClusterRequest.
        """
        self.openapi_types = {
            'cluster_uuid': str,
            'request_id': str
        }

        self.attribute_map = {
            'cluster_uuid': 'clusterUuid',
            'request_id': 'requestId'
        }

        self._cluster_uuid = cluster_uuid
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StopClusterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StopClusterRequest of this StopClusterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_uuid(self):
        """Gets the cluster_uuid of this StopClusterRequest.

        Optional. Specifying the cluster_uuid means the RPC will fail (with error NOT_FOUND) if a cluster with the specified UUID does not exist.

        :return: The cluster_uuid of this StopClusterRequest.
        :rtype: str
        """
        return self._cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):
        """Sets the cluster_uuid of this StopClusterRequest.

        Optional. Specifying the cluster_uuid means the RPC will fail (with error NOT_FOUND) if a cluster with the specified UUID does not exist.

        :param cluster_uuid: The cluster_uuid of this StopClusterRequest.
        :type cluster_uuid: str
        """

        self._cluster_uuid = cluster_uuid

    @property
    def request_id(self):
        """Gets the request_id of this StopClusterRequest.

        Optional. A unique ID used to identify the request. If the server receives two StopClusterRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.StopClusterRequest)s with the same id, then the second request will be ignored and the first google.longrunning.Operation created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.

        :return: The request_id of this StopClusterRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this StopClusterRequest.

        Optional. A unique ID used to identify the request. If the server receives two StopClusterRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.StopClusterRequest)s with the same id, then the second request will be ignored and the first google.longrunning.Operation created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.

        :param request_id: The request_id of this StopClusterRequest.
        :type request_id: str
        """

        self._request_id = request_id
