# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gke_node_pool_accelerator_config import GkeNodePoolAcceleratorConfig
from openapi_server import util


class GkeNodeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerators: List[GkeNodePoolAcceleratorConfig]=None, boot_disk_kms_key: str=None, local_ssd_count: int=None, machine_type: str=None, min_cpu_platform: str=None, preemptible: bool=None, spot: bool=None):
        """GkeNodeConfig - a model defined in OpenAPI

        :param accelerators: The accelerators of this GkeNodeConfig.
        :param boot_disk_kms_key: The boot_disk_kms_key of this GkeNodeConfig.
        :param local_ssd_count: The local_ssd_count of this GkeNodeConfig.
        :param machine_type: The machine_type of this GkeNodeConfig.
        :param min_cpu_platform: The min_cpu_platform of this GkeNodeConfig.
        :param preemptible: The preemptible of this GkeNodeConfig.
        :param spot: The spot of this GkeNodeConfig.
        """
        self.openapi_types = {
            'accelerators': List[GkeNodePoolAcceleratorConfig],
            'boot_disk_kms_key': str,
            'local_ssd_count': int,
            'machine_type': str,
            'min_cpu_platform': str,
            'preemptible': bool,
            'spot': bool
        }

        self.attribute_map = {
            'accelerators': 'accelerators',
            'boot_disk_kms_key': 'bootDiskKmsKey',
            'local_ssd_count': 'localSsdCount',
            'machine_type': 'machineType',
            'min_cpu_platform': 'minCpuPlatform',
            'preemptible': 'preemptible',
            'spot': 'spot'
        }

        self._accelerators = accelerators
        self._boot_disk_kms_key = boot_disk_kms_key
        self._local_ssd_count = local_ssd_count
        self._machine_type = machine_type
        self._min_cpu_platform = min_cpu_platform
        self._preemptible = preemptible
        self._spot = spot

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GkeNodeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GkeNodeConfig of this GkeNodeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerators(self):
        """Gets the accelerators of this GkeNodeConfig.

        Optional. A list of hardware accelerators (https://cloud.google.com/compute/docs/gpus) to attach to each node.

        :return: The accelerators of this GkeNodeConfig.
        :rtype: List[GkeNodePoolAcceleratorConfig]
        """
        return self._accelerators

    @accelerators.setter
    def accelerators(self, accelerators):
        """Sets the accelerators of this GkeNodeConfig.

        Optional. A list of hardware accelerators (https://cloud.google.com/compute/docs/gpus) to attach to each node.

        :param accelerators: The accelerators of this GkeNodeConfig.
        :type accelerators: List[GkeNodePoolAcceleratorConfig]
        """

        self._accelerators = accelerators

    @property
    def boot_disk_kms_key(self):
        """Gets the boot_disk_kms_key of this GkeNodeConfig.

        Optional. The Customer Managed Encryption Key (CMEK) (https://cloud.google.com/kubernetes-engine/docs/how-to/using-cmek) used to encrypt the boot disk attached to each node in the node pool. Specify the key using the following format: projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}

        :return: The boot_disk_kms_key of this GkeNodeConfig.
        :rtype: str
        """
        return self._boot_disk_kms_key

    @boot_disk_kms_key.setter
    def boot_disk_kms_key(self, boot_disk_kms_key):
        """Sets the boot_disk_kms_key of this GkeNodeConfig.

        Optional. The Customer Managed Encryption Key (CMEK) (https://cloud.google.com/kubernetes-engine/docs/how-to/using-cmek) used to encrypt the boot disk attached to each node in the node pool. Specify the key using the following format: projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}

        :param boot_disk_kms_key: The boot_disk_kms_key of this GkeNodeConfig.
        :type boot_disk_kms_key: str
        """

        self._boot_disk_kms_key = boot_disk_kms_key

    @property
    def local_ssd_count(self):
        """Gets the local_ssd_count of this GkeNodeConfig.

        Optional. The number of local SSD disks to attach to the node, which is limited by the maximum number of disks allowable per zone (see Adding Local SSDs (https://cloud.google.com/compute/docs/disks/local-ssd)).

        :return: The local_ssd_count of this GkeNodeConfig.
        :rtype: int
        """
        return self._local_ssd_count

    @local_ssd_count.setter
    def local_ssd_count(self, local_ssd_count):
        """Sets the local_ssd_count of this GkeNodeConfig.

        Optional. The number of local SSD disks to attach to the node, which is limited by the maximum number of disks allowable per zone (see Adding Local SSDs (https://cloud.google.com/compute/docs/disks/local-ssd)).

        :param local_ssd_count: The local_ssd_count of this GkeNodeConfig.
        :type local_ssd_count: int
        """

        self._local_ssd_count = local_ssd_count

    @property
    def machine_type(self):
        """Gets the machine_type of this GkeNodeConfig.

        Optional. The name of a Compute Engine machine type (https://cloud.google.com/compute/docs/machine-types).

        :return: The machine_type of this GkeNodeConfig.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this GkeNodeConfig.

        Optional. The name of a Compute Engine machine type (https://cloud.google.com/compute/docs/machine-types).

        :param machine_type: The machine_type of this GkeNodeConfig.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def min_cpu_platform(self):
        """Gets the min_cpu_platform of this GkeNodeConfig.

        Optional. Minimum CPU platform (https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) to be used by this instance. The instance may be scheduled on the specified or a newer CPU platform. Specify the friendly names of CPU platforms, such as \"Intel Haswell\"` or Intel Sandy Bridge\".

        :return: The min_cpu_platform of this GkeNodeConfig.
        :rtype: str
        """
        return self._min_cpu_platform

    @min_cpu_platform.setter
    def min_cpu_platform(self, min_cpu_platform):
        """Sets the min_cpu_platform of this GkeNodeConfig.

        Optional. Minimum CPU platform (https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) to be used by this instance. The instance may be scheduled on the specified or a newer CPU platform. Specify the friendly names of CPU platforms, such as \"Intel Haswell\"` or Intel Sandy Bridge\".

        :param min_cpu_platform: The min_cpu_platform of this GkeNodeConfig.
        :type min_cpu_platform: str
        """

        self._min_cpu_platform = min_cpu_platform

    @property
    def preemptible(self):
        """Gets the preemptible of this GkeNodeConfig.

        Optional. Whether the nodes are created as legacy preemptible VM instances (https://cloud.google.com/compute/docs/instances/preemptible). Also see Spot VMs, preemptible VM instances without a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the CONTROLLER role or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).

        :return: The preemptible of this GkeNodeConfig.
        :rtype: bool
        """
        return self._preemptible

    @preemptible.setter
    def preemptible(self, preemptible):
        """Sets the preemptible of this GkeNodeConfig.

        Optional. Whether the nodes are created as legacy preemptible VM instances (https://cloud.google.com/compute/docs/instances/preemptible). Also see Spot VMs, preemptible VM instances without a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the CONTROLLER role or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).

        :param preemptible: The preemptible of this GkeNodeConfig.
        :type preemptible: bool
        """

        self._preemptible = preemptible

    @property
    def spot(self):
        """Gets the spot of this GkeNodeConfig.

        Optional. Whether the nodes are created as Spot VM instances (https://cloud.google.com/compute/docs/instances/spot). Spot VMs are the latest update to legacy preemptible VMs. Spot VMs do not have a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the CONTROLLER role or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).

        :return: The spot of this GkeNodeConfig.
        :rtype: bool
        """
        return self._spot

    @spot.setter
    def spot(self, spot):
        """Sets the spot of this GkeNodeConfig.

        Optional. Whether the nodes are created as Spot VM instances (https://cloud.google.com/compute/docs/instances/spot). Spot VMs are the latest update to legacy preemptible VMs. Spot VMs do not have a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the CONTROLLER role or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).

        :param spot: The spot of this GkeNodeConfig.
        :type spot: bool
        """

        self._spot = spot
