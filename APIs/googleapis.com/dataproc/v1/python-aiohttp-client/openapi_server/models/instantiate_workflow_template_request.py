# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InstantiateWorkflowTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameters: Dict[str, str]=None, request_id: str=None, version: int=None):
        """InstantiateWorkflowTemplateRequest - a model defined in OpenAPI

        :param parameters: The parameters of this InstantiateWorkflowTemplateRequest.
        :param request_id: The request_id of this InstantiateWorkflowTemplateRequest.
        :param version: The version of this InstantiateWorkflowTemplateRequest.
        """
        self.openapi_types = {
            'parameters': Dict[str, str],
            'request_id': str,
            'version': int
        }

        self.attribute_map = {
            'parameters': 'parameters',
            'request_id': 'requestId',
            'version': 'version'
        }

        self._parameters = parameters
        self._request_id = request_id
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstantiateWorkflowTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstantiateWorkflowTemplateRequest of this InstantiateWorkflowTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self):
        """Gets the parameters of this InstantiateWorkflowTemplateRequest.

        Optional. Map from parameter names to values that should be used for those parameters. Values may not exceed 1000 characters.

        :return: The parameters of this InstantiateWorkflowTemplateRequest.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this InstantiateWorkflowTemplateRequest.

        Optional. Map from parameter names to values that should be used for those parameters. Values may not exceed 1000 characters.

        :param parameters: The parameters of this InstantiateWorkflowTemplateRequest.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters

    @property
    def request_id(self):
        """Gets the request_id of this InstantiateWorkflowTemplateRequest.

        Optional. A tag that prevents multiple concurrent workflow instances with the same tag from running. This mitigates risk of concurrent instances started due to retries.It is recommended to always set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The tag must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.

        :return: The request_id of this InstantiateWorkflowTemplateRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this InstantiateWorkflowTemplateRequest.

        Optional. A tag that prevents multiple concurrent workflow instances with the same tag from running. This mitigates risk of concurrent instances started due to retries.It is recommended to always set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The tag must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.

        :param request_id: The request_id of this InstantiateWorkflowTemplateRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def version(self):
        """Gets the version of this InstantiateWorkflowTemplateRequest.

        Optional. The version of workflow template to instantiate. If specified, the workflow will be instantiated only if the current version of the workflow template has the supplied version.This option cannot be used to instantiate a previous version of workflow template.

        :return: The version of this InstantiateWorkflowTemplateRequest.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InstantiateWorkflowTemplateRequest.

        Optional. The version of workflow template to instantiate. If specified, the workflow will be instantiated only if the current version of the workflow template has the supplied version.This option cannot be used to instantiate a previous version of workflow template.

        :param version: The version of this InstantiateWorkflowTemplateRequest.
        :type version: int
        """

        self._version = version
