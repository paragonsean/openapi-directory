# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, queries: List[str]=None):
        """QueryList - a model defined in OpenAPI

        :param queries: The queries of this QueryList.
        """
        self.openapi_types = {
            'queries': List[str]
        }

        self.attribute_map = {
            'queries': 'queries'
        }

        self._queries = queries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryList of this QueryList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def queries(self):
        """Gets the queries of this QueryList.

        Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: \"hiveJob\": { \"queryList\": { \"queries\": [ \"query1\", \"query2\", \"query3;query4\", ] } } 

        :return: The queries of this QueryList.
        :rtype: List[str]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this QueryList.

        Required. The queries to execute. You do not need to end a query expression with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of a Dataproc API snippet that uses a QueryList to specify a HiveJob: \"hiveJob\": { \"queryList\": { \"queries\": [ \"query1\", \"query2\", \"query3;query4\", ] } } 

        :param queries: The queries of this QueryList.
        :type queries: List[str]
        """

        self._queries = queries
