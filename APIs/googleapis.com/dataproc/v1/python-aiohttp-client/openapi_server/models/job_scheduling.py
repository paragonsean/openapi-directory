# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobScheduling(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_failures_per_hour: int=None, max_failures_total: int=None):
        """JobScheduling - a model defined in OpenAPI

        :param max_failures_per_hour: The max_failures_per_hour of this JobScheduling.
        :param max_failures_total: The max_failures_total of this JobScheduling.
        """
        self.openapi_types = {
            'max_failures_per_hour': int,
            'max_failures_total': int
        }

        self.attribute_map = {
            'max_failures_per_hour': 'maxFailuresPerHour',
            'max_failures_total': 'maxFailuresTotal'
        }

        self._max_failures_per_hour = max_failures_per_hour
        self._max_failures_total = max_failures_total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobScheduling':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobScheduling of this JobScheduling.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_failures_per_hour(self):
        """Gets the max_failures_per_hour of this JobScheduling.

        Optional. Maximum number of times per hour a driver can be restarted as a result of driver exiting with non-zero code before job is reported failed.A job might be reported as thrashing if the driver exits with a non-zero code four times within a 10-minute window.Maximum value is 10.Note: This restartable job option is not supported in Dataproc workflow templates (https://cloud.google.com/dataproc/docs/concepts/workflows/using-workflows#adding_jobs_to_a_template).

        :return: The max_failures_per_hour of this JobScheduling.
        :rtype: int
        """
        return self._max_failures_per_hour

    @max_failures_per_hour.setter
    def max_failures_per_hour(self, max_failures_per_hour):
        """Sets the max_failures_per_hour of this JobScheduling.

        Optional. Maximum number of times per hour a driver can be restarted as a result of driver exiting with non-zero code before job is reported failed.A job might be reported as thrashing if the driver exits with a non-zero code four times within a 10-minute window.Maximum value is 10.Note: This restartable job option is not supported in Dataproc workflow templates (https://cloud.google.com/dataproc/docs/concepts/workflows/using-workflows#adding_jobs_to_a_template).

        :param max_failures_per_hour: The max_failures_per_hour of this JobScheduling.
        :type max_failures_per_hour: int
        """

        self._max_failures_per_hour = max_failures_per_hour

    @property
    def max_failures_total(self):
        """Gets the max_failures_total of this JobScheduling.

        Optional. Maximum total number of times a driver can be restarted as a result of the driver exiting with a non-zero code. After the maximum number is reached, the job will be reported as failed.Maximum value is 240.Note: Currently, this restartable job option is not supported in Dataproc workflow templates (https://cloud.google.com/dataproc/docs/concepts/workflows/using-workflows#adding_jobs_to_a_template).

        :return: The max_failures_total of this JobScheduling.
        :rtype: int
        """
        return self._max_failures_total

    @max_failures_total.setter
    def max_failures_total(self, max_failures_total):
        """Sets the max_failures_total of this JobScheduling.

        Optional. Maximum total number of times a driver can be restarted as a result of the driver exiting with a non-zero code. After the maximum number is reached, the job will be reported as failed.Maximum value is 240.Note: Currently, this restartable job option is not supported in Dataproc workflow templates (https://cloud.google.com/dataproc/docs/concepts/workflows/using-workflows#adding_jobs_to_a_template).

        :param max_failures_total: The max_failures_total of this JobScheduling.
        :type max_failures_total: int
        """

        self._max_failures_total = max_failures_total
