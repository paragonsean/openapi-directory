# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EndpointConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_http_port_access: bool=None, http_ports: Dict[str, str]=None):
        """EndpointConfig - a model defined in OpenAPI

        :param enable_http_port_access: The enable_http_port_access of this EndpointConfig.
        :param http_ports: The http_ports of this EndpointConfig.
        """
        self.openapi_types = {
            'enable_http_port_access': bool,
            'http_ports': Dict[str, str]
        }

        self.attribute_map = {
            'enable_http_port_access': 'enableHttpPortAccess',
            'http_ports': 'httpPorts'
        }

        self._enable_http_port_access = enable_http_port_access
        self._http_ports = http_ports

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointConfig of this EndpointConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_http_port_access(self):
        """Gets the enable_http_port_access of this EndpointConfig.

        Optional. If true, enable http access to specific ports on the cluster from external sources. Defaults to false.

        :return: The enable_http_port_access of this EndpointConfig.
        :rtype: bool
        """
        return self._enable_http_port_access

    @enable_http_port_access.setter
    def enable_http_port_access(self, enable_http_port_access):
        """Sets the enable_http_port_access of this EndpointConfig.

        Optional. If true, enable http access to specific ports on the cluster from external sources. Defaults to false.

        :param enable_http_port_access: The enable_http_port_access of this EndpointConfig.
        :type enable_http_port_access: bool
        """

        self._enable_http_port_access = enable_http_port_access

    @property
    def http_ports(self):
        """Gets the http_ports of this EndpointConfig.

        Output only. The map of port descriptions to URLs. Will only be populated if enable_http_port_access is true.

        :return: The http_ports of this EndpointConfig.
        :rtype: Dict[str, str]
        """
        return self._http_ports

    @http_ports.setter
    def http_ports(self, http_ports):
        """Sets the http_ports of this EndpointConfig.

        Output only. The map of port descriptions to URLs. Will only be populated if enable_http_port_access is true.

        :param http_ports: The http_ports of this EndpointConfig.
        :type http_ports: Dict[str, str]
        """

        self._http_ports = http_ports
