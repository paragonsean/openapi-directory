# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GkeNodePoolAcceleratorConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerator_count: str=None, accelerator_type: str=None, gpu_partition_size: str=None):
        """GkeNodePoolAcceleratorConfig - a model defined in OpenAPI

        :param accelerator_count: The accelerator_count of this GkeNodePoolAcceleratorConfig.
        :param accelerator_type: The accelerator_type of this GkeNodePoolAcceleratorConfig.
        :param gpu_partition_size: The gpu_partition_size of this GkeNodePoolAcceleratorConfig.
        """
        self.openapi_types = {
            'accelerator_count': str,
            'accelerator_type': str,
            'gpu_partition_size': str
        }

        self.attribute_map = {
            'accelerator_count': 'acceleratorCount',
            'accelerator_type': 'acceleratorType',
            'gpu_partition_size': 'gpuPartitionSize'
        }

        self._accelerator_count = accelerator_count
        self._accelerator_type = accelerator_type
        self._gpu_partition_size = gpu_partition_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GkeNodePoolAcceleratorConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GkeNodePoolAcceleratorConfig of this GkeNodePoolAcceleratorConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerator_count(self):
        """Gets the accelerator_count of this GkeNodePoolAcceleratorConfig.

        The number of accelerator cards exposed to an instance.

        :return: The accelerator_count of this GkeNodePoolAcceleratorConfig.
        :rtype: str
        """
        return self._accelerator_count

    @accelerator_count.setter
    def accelerator_count(self, accelerator_count):
        """Sets the accelerator_count of this GkeNodePoolAcceleratorConfig.

        The number of accelerator cards exposed to an instance.

        :param accelerator_count: The accelerator_count of this GkeNodePoolAcceleratorConfig.
        :type accelerator_count: str
        """

        self._accelerator_count = accelerator_count

    @property
    def accelerator_type(self):
        """Gets the accelerator_type of this GkeNodePoolAcceleratorConfig.

        The accelerator type resource namename (see GPUs on Compute Engine).

        :return: The accelerator_type of this GkeNodePoolAcceleratorConfig.
        :rtype: str
        """
        return self._accelerator_type

    @accelerator_type.setter
    def accelerator_type(self, accelerator_type):
        """Sets the accelerator_type of this GkeNodePoolAcceleratorConfig.

        The accelerator type resource namename (see GPUs on Compute Engine).

        :param accelerator_type: The accelerator_type of this GkeNodePoolAcceleratorConfig.
        :type accelerator_type: str
        """

        self._accelerator_type = accelerator_type

    @property
    def gpu_partition_size(self):
        """Gets the gpu_partition_size of this GkeNodePoolAcceleratorConfig.

        Size of partitions to create on the GPU. Valid values are described in the NVIDIA mig user guide (https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).

        :return: The gpu_partition_size of this GkeNodePoolAcceleratorConfig.
        :rtype: str
        """
        return self._gpu_partition_size

    @gpu_partition_size.setter
    def gpu_partition_size(self, gpu_partition_size):
        """Sets the gpu_partition_size of this GkeNodePoolAcceleratorConfig.

        Size of partitions to create on the GPU. Valid values are described in the NVIDIA mig user guide (https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).

        :param gpu_partition_size: The gpu_partition_size of this GkeNodePoolAcceleratorConfig.
        :type gpu_partition_size: str
        """

        self._gpu_partition_size = gpu_partition_size
