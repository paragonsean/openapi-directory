# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repository_config import RepositoryConfig
from openapi_server import util


class RuntimeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_image: str=None, properties: Dict[str, str]=None, repository_config: RepositoryConfig=None, version: str=None):
        """RuntimeConfig - a model defined in OpenAPI

        :param container_image: The container_image of this RuntimeConfig.
        :param properties: The properties of this RuntimeConfig.
        :param repository_config: The repository_config of this RuntimeConfig.
        :param version: The version of this RuntimeConfig.
        """
        self.openapi_types = {
            'container_image': str,
            'properties': Dict[str, str],
            'repository_config': RepositoryConfig,
            'version': str
        }

        self.attribute_map = {
            'container_image': 'containerImage',
            'properties': 'properties',
            'repository_config': 'repositoryConfig',
            'version': 'version'
        }

        self._container_image = container_image
        self._properties = properties
        self._repository_config = repository_config
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuntimeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuntimeConfig of this RuntimeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_image(self):
        """Gets the container_image of this RuntimeConfig.

        Optional. Optional custom container image for the job runtime environment. If not specified, a default container image will be used.

        :return: The container_image of this RuntimeConfig.
        :rtype: str
        """
        return self._container_image

    @container_image.setter
    def container_image(self, container_image):
        """Sets the container_image of this RuntimeConfig.

        Optional. Optional custom container image for the job runtime environment. If not specified, a default container image will be used.

        :param container_image: The container_image of this RuntimeConfig.
        :type container_image: str
        """

        self._container_image = container_image

    @property
    def properties(self):
        """Gets the properties of this RuntimeConfig.

        Optional. A mapping of property names to values, which are used to configure workload execution.

        :return: The properties of this RuntimeConfig.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this RuntimeConfig.

        Optional. A mapping of property names to values, which are used to configure workload execution.

        :param properties: The properties of this RuntimeConfig.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def repository_config(self):
        """Gets the repository_config of this RuntimeConfig.


        :return: The repository_config of this RuntimeConfig.
        :rtype: RepositoryConfig
        """
        return self._repository_config

    @repository_config.setter
    def repository_config(self, repository_config):
        """Sets the repository_config of this RuntimeConfig.


        :param repository_config: The repository_config of this RuntimeConfig.
        :type repository_config: RepositoryConfig
        """

        self._repository_config = repository_config

    @property
    def version(self):
        """Gets the version of this RuntimeConfig.

        Optional. Version of the batch runtime.

        :return: The version of this RuntimeConfig.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RuntimeConfig.

        Optional. Version of the batch runtime.

        :param version: The version of this RuntimeConfig.
        :type version: str
        """

        self._version = version
