# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_config import EnvironmentConfig
from openapi_server.models.jupyter_config import JupyterConfig
from openapi_server.models.runtime_config import RuntimeConfig
from openapi_server.models.runtime_info import RuntimeInfo
from openapi_server.models.session_state_history import SessionStateHistory
from openapi_server import util


class Session(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, creator: str=None, environment_config: EnvironmentConfig=None, jupyter_session: JupyterConfig=None, labels: Dict[str, str]=None, name: str=None, runtime_config: RuntimeConfig=None, runtime_info: RuntimeInfo=None, session_template: str=None, state: str=None, state_history: List[SessionStateHistory]=None, state_message: str=None, state_time: str=None, user: str=None, uuid: str=None):
        """Session - a model defined in OpenAPI

        :param create_time: The create_time of this Session.
        :param creator: The creator of this Session.
        :param environment_config: The environment_config of this Session.
        :param jupyter_session: The jupyter_session of this Session.
        :param labels: The labels of this Session.
        :param name: The name of this Session.
        :param runtime_config: The runtime_config of this Session.
        :param runtime_info: The runtime_info of this Session.
        :param session_template: The session_template of this Session.
        :param state: The state of this Session.
        :param state_history: The state_history of this Session.
        :param state_message: The state_message of this Session.
        :param state_time: The state_time of this Session.
        :param user: The user of this Session.
        :param uuid: The uuid of this Session.
        """
        self.openapi_types = {
            'create_time': str,
            'creator': str,
            'environment_config': EnvironmentConfig,
            'jupyter_session': JupyterConfig,
            'labels': Dict[str, str],
            'name': str,
            'runtime_config': RuntimeConfig,
            'runtime_info': RuntimeInfo,
            'session_template': str,
            'state': str,
            'state_history': List[SessionStateHistory],
            'state_message': str,
            'state_time': str,
            'user': str,
            'uuid': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'creator': 'creator',
            'environment_config': 'environmentConfig',
            'jupyter_session': 'jupyterSession',
            'labels': 'labels',
            'name': 'name',
            'runtime_config': 'runtimeConfig',
            'runtime_info': 'runtimeInfo',
            'session_template': 'sessionTemplate',
            'state': 'state',
            'state_history': 'stateHistory',
            'state_message': 'stateMessage',
            'state_time': 'stateTime',
            'user': 'user',
            'uuid': 'uuid'
        }

        self._create_time = create_time
        self._creator = creator
        self._environment_config = environment_config
        self._jupyter_session = jupyter_session
        self._labels = labels
        self._name = name
        self._runtime_config = runtime_config
        self._runtime_info = runtime_info
        self._session_template = session_template
        self._state = state
        self._state_history = state_history
        self._state_message = state_message
        self._state_time = state_time
        self._user = user
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Session':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Session of this Session.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Session.

        Output only. The time when the session was created.

        :return: The create_time of this Session.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Session.

        Output only. The time when the session was created.

        :param create_time: The create_time of this Session.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def creator(self):
        """Gets the creator of this Session.

        Output only. The email address of the user who created the session.

        :return: The creator of this Session.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Session.

        Output only. The email address of the user who created the session.

        :param creator: The creator of this Session.
        :type creator: str
        """

        self._creator = creator

    @property
    def environment_config(self):
        """Gets the environment_config of this Session.


        :return: The environment_config of this Session.
        :rtype: EnvironmentConfig
        """
        return self._environment_config

    @environment_config.setter
    def environment_config(self, environment_config):
        """Sets the environment_config of this Session.


        :param environment_config: The environment_config of this Session.
        :type environment_config: EnvironmentConfig
        """

        self._environment_config = environment_config

    @property
    def jupyter_session(self):
        """Gets the jupyter_session of this Session.


        :return: The jupyter_session of this Session.
        :rtype: JupyterConfig
        """
        return self._jupyter_session

    @jupyter_session.setter
    def jupyter_session(self, jupyter_session):
        """Sets the jupyter_session of this Session.


        :param jupyter_session: The jupyter_session of this Session.
        :type jupyter_session: JupyterConfig
        """

        self._jupyter_session = jupyter_session

    @property
    def labels(self):
        """Gets the labels of this Session.

        Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.

        :return: The labels of this Session.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Session.

        Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.

        :param labels: The labels of this Session.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Session.

        Required. The resource name of the session.

        :return: The name of this Session.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Session.

        Required. The resource name of the session.

        :param name: The name of this Session.
        :type name: str
        """

        self._name = name

    @property
    def runtime_config(self):
        """Gets the runtime_config of this Session.


        :return: The runtime_config of this Session.
        :rtype: RuntimeConfig
        """
        return self._runtime_config

    @runtime_config.setter
    def runtime_config(self, runtime_config):
        """Sets the runtime_config of this Session.


        :param runtime_config: The runtime_config of this Session.
        :type runtime_config: RuntimeConfig
        """

        self._runtime_config = runtime_config

    @property
    def runtime_info(self):
        """Gets the runtime_info of this Session.


        :return: The runtime_info of this Session.
        :rtype: RuntimeInfo
        """
        return self._runtime_info

    @runtime_info.setter
    def runtime_info(self, runtime_info):
        """Sets the runtime_info of this Session.


        :param runtime_info: The runtime_info of this Session.
        :type runtime_info: RuntimeInfo
        """

        self._runtime_info = runtime_info

    @property
    def session_template(self):
        """Gets the session_template of this Session.

        Optional. The session template used by the session.Only resource names, including project ID and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id] * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template must be in the same project and Dataproc region as the session.

        :return: The session_template of this Session.
        :rtype: str
        """
        return self._session_template

    @session_template.setter
    def session_template(self, session_template):
        """Sets the session_template of this Session.

        Optional. The session template used by the session.Only resource names, including project ID and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id] * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template must be in the same project and Dataproc region as the session.

        :param session_template: The session_template of this Session.
        :type session_template: str
        """

        self._session_template = session_template

    @property
    def state(self):
        """Gets the state of this Session.

        Output only. A state of the session.

        :return: The state of this Session.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Session.

        Output only. A state of the session.

        :param state: The state of this Session.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "TERMINATING", "TERMINATED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_history(self):
        """Gets the state_history of this Session.

        Output only. Historical state information for the session.

        :return: The state_history of this Session.
        :rtype: List[SessionStateHistory]
        """
        return self._state_history

    @state_history.setter
    def state_history(self, state_history):
        """Sets the state_history of this Session.

        Output only. Historical state information for the session.

        :param state_history: The state_history of this Session.
        :type state_history: List[SessionStateHistory]
        """

        self._state_history = state_history

    @property
    def state_message(self):
        """Gets the state_message of this Session.

        Output only. Session state details, such as the failure description if the state is FAILED.

        :return: The state_message of this Session.
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """Sets the state_message of this Session.

        Output only. Session state details, such as the failure description if the state is FAILED.

        :param state_message: The state_message of this Session.
        :type state_message: str
        """

        self._state_message = state_message

    @property
    def state_time(self):
        """Gets the state_time of this Session.

        Output only. The time when the session entered the current state.

        :return: The state_time of this Session.
        :rtype: str
        """
        return self._state_time

    @state_time.setter
    def state_time(self, state_time):
        """Sets the state_time of this Session.

        Output only. The time when the session entered the current state.

        :param state_time: The state_time of this Session.
        :type state_time: str
        """

        self._state_time = state_time

    @property
    def user(self):
        """Gets the user of this Session.

        Optional. The email address of the user who owns the session.

        :return: The user of this Session.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Session.

        Optional. The email address of the user who owns the session.

        :param user: The user of this Session.
        :type user: str
        """

        self._user = user

    @property
    def uuid(self):
        """Gets the uuid of this Session.

        Output only. A session UUID (Unique Universal Identifier). The service generates this value when it creates the session.

        :return: The uuid of this Session.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Session.

        Output only. A session UUID (Unique Universal Identifier). The service generates this value when it creates the session.

        :param uuid: The uuid of this Session.
        :type uuid: str
        """

        self._uuid = uuid
