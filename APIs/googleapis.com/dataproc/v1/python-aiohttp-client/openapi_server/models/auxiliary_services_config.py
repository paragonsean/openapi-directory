# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metastore_config import MetastoreConfig
from openapi_server.models.spark_history_server_config import SparkHistoryServerConfig
from openapi_server import util


class AuxiliaryServicesConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metastore_config: MetastoreConfig=None, spark_history_server_config: SparkHistoryServerConfig=None):
        """AuxiliaryServicesConfig - a model defined in OpenAPI

        :param metastore_config: The metastore_config of this AuxiliaryServicesConfig.
        :param spark_history_server_config: The spark_history_server_config of this AuxiliaryServicesConfig.
        """
        self.openapi_types = {
            'metastore_config': MetastoreConfig,
            'spark_history_server_config': SparkHistoryServerConfig
        }

        self.attribute_map = {
            'metastore_config': 'metastoreConfig',
            'spark_history_server_config': 'sparkHistoryServerConfig'
        }

        self._metastore_config = metastore_config
        self._spark_history_server_config = spark_history_server_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuxiliaryServicesConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuxiliaryServicesConfig of this AuxiliaryServicesConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metastore_config(self):
        """Gets the metastore_config of this AuxiliaryServicesConfig.


        :return: The metastore_config of this AuxiliaryServicesConfig.
        :rtype: MetastoreConfig
        """
        return self._metastore_config

    @metastore_config.setter
    def metastore_config(self, metastore_config):
        """Sets the metastore_config of this AuxiliaryServicesConfig.


        :param metastore_config: The metastore_config of this AuxiliaryServicesConfig.
        :type metastore_config: MetastoreConfig
        """

        self._metastore_config = metastore_config

    @property
    def spark_history_server_config(self):
        """Gets the spark_history_server_config of this AuxiliaryServicesConfig.


        :return: The spark_history_server_config of this AuxiliaryServicesConfig.
        :rtype: SparkHistoryServerConfig
        """
        return self._spark_history_server_config

    @spark_history_server_config.setter
    def spark_history_server_config(self, spark_history_server_config):
        """Sets the spark_history_server_config of this AuxiliaryServicesConfig.


        :param spark_history_server_config: The spark_history_server_config of this AuxiliaryServicesConfig.
        :type spark_history_server_config: SparkHistoryServerConfig
        """

        self._spark_history_server_config = spark_history_server_config
