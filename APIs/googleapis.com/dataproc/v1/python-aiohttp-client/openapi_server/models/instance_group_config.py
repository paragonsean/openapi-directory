# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.accelerator_config import AcceleratorConfig
from openapi_server.models.disk_config import DiskConfig
from openapi_server.models.instance_flexibility_policy import InstanceFlexibilityPolicy
from openapi_server.models.instance_reference import InstanceReference
from openapi_server.models.managed_group_config import ManagedGroupConfig
from openapi_server.models.startup_config import StartupConfig
from openapi_server import util


class InstanceGroupConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerators: List[AcceleratorConfig]=None, disk_config: DiskConfig=None, image_uri: str=None, instance_flexibility_policy: InstanceFlexibilityPolicy=None, instance_names: List[str]=None, instance_references: List[InstanceReference]=None, is_preemptible: bool=None, machine_type_uri: str=None, managed_group_config: ManagedGroupConfig=None, min_cpu_platform: str=None, min_num_instances: int=None, num_instances: int=None, preemptibility: str=None, startup_config: StartupConfig=None):
        """InstanceGroupConfig - a model defined in OpenAPI

        :param accelerators: The accelerators of this InstanceGroupConfig.
        :param disk_config: The disk_config of this InstanceGroupConfig.
        :param image_uri: The image_uri of this InstanceGroupConfig.
        :param instance_flexibility_policy: The instance_flexibility_policy of this InstanceGroupConfig.
        :param instance_names: The instance_names of this InstanceGroupConfig.
        :param instance_references: The instance_references of this InstanceGroupConfig.
        :param is_preemptible: The is_preemptible of this InstanceGroupConfig.
        :param machine_type_uri: The machine_type_uri of this InstanceGroupConfig.
        :param managed_group_config: The managed_group_config of this InstanceGroupConfig.
        :param min_cpu_platform: The min_cpu_platform of this InstanceGroupConfig.
        :param min_num_instances: The min_num_instances of this InstanceGroupConfig.
        :param num_instances: The num_instances of this InstanceGroupConfig.
        :param preemptibility: The preemptibility of this InstanceGroupConfig.
        :param startup_config: The startup_config of this InstanceGroupConfig.
        """
        self.openapi_types = {
            'accelerators': List[AcceleratorConfig],
            'disk_config': DiskConfig,
            'image_uri': str,
            'instance_flexibility_policy': InstanceFlexibilityPolicy,
            'instance_names': List[str],
            'instance_references': List[InstanceReference],
            'is_preemptible': bool,
            'machine_type_uri': str,
            'managed_group_config': ManagedGroupConfig,
            'min_cpu_platform': str,
            'min_num_instances': int,
            'num_instances': int,
            'preemptibility': str,
            'startup_config': StartupConfig
        }

        self.attribute_map = {
            'accelerators': 'accelerators',
            'disk_config': 'diskConfig',
            'image_uri': 'imageUri',
            'instance_flexibility_policy': 'instanceFlexibilityPolicy',
            'instance_names': 'instanceNames',
            'instance_references': 'instanceReferences',
            'is_preemptible': 'isPreemptible',
            'machine_type_uri': 'machineTypeUri',
            'managed_group_config': 'managedGroupConfig',
            'min_cpu_platform': 'minCpuPlatform',
            'min_num_instances': 'minNumInstances',
            'num_instances': 'numInstances',
            'preemptibility': 'preemptibility',
            'startup_config': 'startupConfig'
        }

        self._accelerators = accelerators
        self._disk_config = disk_config
        self._image_uri = image_uri
        self._instance_flexibility_policy = instance_flexibility_policy
        self._instance_names = instance_names
        self._instance_references = instance_references
        self._is_preemptible = is_preemptible
        self._machine_type_uri = machine_type_uri
        self._managed_group_config = managed_group_config
        self._min_cpu_platform = min_cpu_platform
        self._min_num_instances = min_num_instances
        self._num_instances = num_instances
        self._preemptibility = preemptibility
        self._startup_config = startup_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceGroupConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceGroupConfig of this InstanceGroupConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerators(self):
        """Gets the accelerators of this InstanceGroupConfig.

        Optional. The Compute Engine accelerator configuration for these instances.

        :return: The accelerators of this InstanceGroupConfig.
        :rtype: List[AcceleratorConfig]
        """
        return self._accelerators

    @accelerators.setter
    def accelerators(self, accelerators):
        """Sets the accelerators of this InstanceGroupConfig.

        Optional. The Compute Engine accelerator configuration for these instances.

        :param accelerators: The accelerators of this InstanceGroupConfig.
        :type accelerators: List[AcceleratorConfig]
        """

        self._accelerators = accelerators

    @property
    def disk_config(self):
        """Gets the disk_config of this InstanceGroupConfig.


        :return: The disk_config of this InstanceGroupConfig.
        :rtype: DiskConfig
        """
        return self._disk_config

    @disk_config.setter
    def disk_config(self, disk_config):
        """Sets the disk_config of this InstanceGroupConfig.


        :param disk_config: The disk_config of this InstanceGroupConfig.
        :type disk_config: DiskConfig
        """

        self._disk_config = disk_config

    @property
    def image_uri(self):
        """Gets the image_uri of this InstanceGroupConfig.

        Optional. The Compute Engine image resource used for cluster instances.The URI can represent an image or image family.Image examples: https://www.googleapis.com/compute/v1/projects/[project_id]/global/images/[image-id] projects/[project_id]/global/images/[image-id] image-idImage family examples. Dataproc will use the most recent image from the family: https://www.googleapis.com/compute/v1/projects/[project_id]/global/images/family/[custom-image-family-name] projects/[project_id]/global/images/family/[custom-image-family-name]If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.

        :return: The image_uri of this InstanceGroupConfig.
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri):
        """Sets the image_uri of this InstanceGroupConfig.

        Optional. The Compute Engine image resource used for cluster instances.The URI can represent an image or image family.Image examples: https://www.googleapis.com/compute/v1/projects/[project_id]/global/images/[image-id] projects/[project_id]/global/images/[image-id] image-idImage family examples. Dataproc will use the most recent image from the family: https://www.googleapis.com/compute/v1/projects/[project_id]/global/images/family/[custom-image-family-name] projects/[project_id]/global/images/family/[custom-image-family-name]If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.

        :param image_uri: The image_uri of this InstanceGroupConfig.
        :type image_uri: str
        """

        self._image_uri = image_uri

    @property
    def instance_flexibility_policy(self):
        """Gets the instance_flexibility_policy of this InstanceGroupConfig.


        :return: The instance_flexibility_policy of this InstanceGroupConfig.
        :rtype: InstanceFlexibilityPolicy
        """
        return self._instance_flexibility_policy

    @instance_flexibility_policy.setter
    def instance_flexibility_policy(self, instance_flexibility_policy):
        """Sets the instance_flexibility_policy of this InstanceGroupConfig.


        :param instance_flexibility_policy: The instance_flexibility_policy of this InstanceGroupConfig.
        :type instance_flexibility_policy: InstanceFlexibilityPolicy
        """

        self._instance_flexibility_policy = instance_flexibility_policy

    @property
    def instance_names(self):
        """Gets the instance_names of this InstanceGroupConfig.

        Output only. The list of instance names. Dataproc derives the names from cluster_name, num_instances, and the instance group.

        :return: The instance_names of this InstanceGroupConfig.
        :rtype: List[str]
        """
        return self._instance_names

    @instance_names.setter
    def instance_names(self, instance_names):
        """Sets the instance_names of this InstanceGroupConfig.

        Output only. The list of instance names. Dataproc derives the names from cluster_name, num_instances, and the instance group.

        :param instance_names: The instance_names of this InstanceGroupConfig.
        :type instance_names: List[str]
        """

        self._instance_names = instance_names

    @property
    def instance_references(self):
        """Gets the instance_references of this InstanceGroupConfig.

        Output only. List of references to Compute Engine instances.

        :return: The instance_references of this InstanceGroupConfig.
        :rtype: List[InstanceReference]
        """
        return self._instance_references

    @instance_references.setter
    def instance_references(self, instance_references):
        """Sets the instance_references of this InstanceGroupConfig.

        Output only. List of references to Compute Engine instances.

        :param instance_references: The instance_references of this InstanceGroupConfig.
        :type instance_references: List[InstanceReference]
        """

        self._instance_references = instance_references

    @property
    def is_preemptible(self):
        """Gets the is_preemptible of this InstanceGroupConfig.

        Output only. Specifies that this instance group contains preemptible instances.

        :return: The is_preemptible of this InstanceGroupConfig.
        :rtype: bool
        """
        return self._is_preemptible

    @is_preemptible.setter
    def is_preemptible(self, is_preemptible):
        """Sets the is_preemptible of this InstanceGroupConfig.

        Output only. Specifies that this instance group contains preemptible instances.

        :param is_preemptible: The is_preemptible of this InstanceGroupConfig.
        :type is_preemptible: bool
        """

        self._is_preemptible = is_preemptible

    @property
    def machine_type_uri(self):
        """Gets the machine_type_uri of this InstanceGroupConfig.

        Optional. The Compute Engine machine type used for cluster instances.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone]/machineTypes/n1-standard-2 projects/[project_id]/zones/[zone]/machineTypes/n1-standard-2 n1-standard-2Auto Zone Exception: If you are using the Dataproc Auto Zone Placement (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2.

        :return: The machine_type_uri of this InstanceGroupConfig.
        :rtype: str
        """
        return self._machine_type_uri

    @machine_type_uri.setter
    def machine_type_uri(self, machine_type_uri):
        """Sets the machine_type_uri of this InstanceGroupConfig.

        Optional. The Compute Engine machine type used for cluster instances.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone]/machineTypes/n1-standard-2 projects/[project_id]/zones/[zone]/machineTypes/n1-standard-2 n1-standard-2Auto Zone Exception: If you are using the Dataproc Auto Zone Placement (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2.

        :param machine_type_uri: The machine_type_uri of this InstanceGroupConfig.
        :type machine_type_uri: str
        """

        self._machine_type_uri = machine_type_uri

    @property
    def managed_group_config(self):
        """Gets the managed_group_config of this InstanceGroupConfig.


        :return: The managed_group_config of this InstanceGroupConfig.
        :rtype: ManagedGroupConfig
        """
        return self._managed_group_config

    @managed_group_config.setter
    def managed_group_config(self, managed_group_config):
        """Sets the managed_group_config of this InstanceGroupConfig.


        :param managed_group_config: The managed_group_config of this InstanceGroupConfig.
        :type managed_group_config: ManagedGroupConfig
        """

        self._managed_group_config = managed_group_config

    @property
    def min_cpu_platform(self):
        """Gets the min_cpu_platform of this InstanceGroupConfig.

        Optional. Specifies the minimum cpu platform for the Instance Group. See Dataproc -> Minimum CPU Platform (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).

        :return: The min_cpu_platform of this InstanceGroupConfig.
        :rtype: str
        """
        return self._min_cpu_platform

    @min_cpu_platform.setter
    def min_cpu_platform(self, min_cpu_platform):
        """Sets the min_cpu_platform of this InstanceGroupConfig.

        Optional. Specifies the minimum cpu platform for the Instance Group. See Dataproc -> Minimum CPU Platform (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).

        :param min_cpu_platform: The min_cpu_platform of this InstanceGroupConfig.
        :type min_cpu_platform: str
        """

        self._min_cpu_platform = min_cpu_platform

    @property
    def min_num_instances(self):
        """Gets the min_num_instances of this InstanceGroupConfig.

        Optional. The minimum number of primary worker instances to create. If min_num_instances is set, cluster creation will succeed if the number of primary workers created is at least equal to the min_num_instances number.Example: Cluster creation request with num_instances = 5 and min_num_instances = 3: If 4 VMs are created and 1 instance fails, the failed VM is deleted. The cluster is resized to 4 instances and placed in a RUNNING state. If 2 instances are created and 3 instances fail, the cluster in placed in an ERROR state. The failed VMs are not deleted.

        :return: The min_num_instances of this InstanceGroupConfig.
        :rtype: int
        """
        return self._min_num_instances

    @min_num_instances.setter
    def min_num_instances(self, min_num_instances):
        """Sets the min_num_instances of this InstanceGroupConfig.

        Optional. The minimum number of primary worker instances to create. If min_num_instances is set, cluster creation will succeed if the number of primary workers created is at least equal to the min_num_instances number.Example: Cluster creation request with num_instances = 5 and min_num_instances = 3: If 4 VMs are created and 1 instance fails, the failed VM is deleted. The cluster is resized to 4 instances and placed in a RUNNING state. If 2 instances are created and 3 instances fail, the cluster in placed in an ERROR state. The failed VMs are not deleted.

        :param min_num_instances: The min_num_instances of this InstanceGroupConfig.
        :type min_num_instances: int
        """

        self._min_num_instances = min_num_instances

    @property
    def num_instances(self):
        """Gets the num_instances of this InstanceGroupConfig.

        Optional. The number of VM instances in the instance group. For HA cluster master_config groups, must be set to 3. For standard cluster master_config groups, must be set to 1.

        :return: The num_instances of this InstanceGroupConfig.
        :rtype: int
        """
        return self._num_instances

    @num_instances.setter
    def num_instances(self, num_instances):
        """Sets the num_instances of this InstanceGroupConfig.

        Optional. The number of VM instances in the instance group. For HA cluster master_config groups, must be set to 3. For standard cluster master_config groups, must be set to 1.

        :param num_instances: The num_instances of this InstanceGroupConfig.
        :type num_instances: int
        """

        self._num_instances = num_instances

    @property
    def preemptibility(self):
        """Gets the preemptibility of this InstanceGroupConfig.

        Optional. Specifies the preemptibility of the instance group.The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed.The default value for secondary instances is PREEMPTIBLE.

        :return: The preemptibility of this InstanceGroupConfig.
        :rtype: str
        """
        return self._preemptibility

    @preemptibility.setter
    def preemptibility(self, preemptibility):
        """Sets the preemptibility of this InstanceGroupConfig.

        Optional. Specifies the preemptibility of the instance group.The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed.The default value for secondary instances is PREEMPTIBLE.

        :param preemptibility: The preemptibility of this InstanceGroupConfig.
        :type preemptibility: str
        """
        allowed_values = ["PREEMPTIBILITY_UNSPECIFIED", "NON_PREEMPTIBLE", "PREEMPTIBLE", "SPOT"]  # noqa: E501
        if preemptibility not in allowed_values:
            raise ValueError(
                "Invalid value for `preemptibility` ({0}), must be one of {1}"
                .format(preemptibility, allowed_values)
            )

        self._preemptibility = preemptibility

    @property
    def startup_config(self):
        """Gets the startup_config of this InstanceGroupConfig.


        :return: The startup_config of this InstanceGroupConfig.
        :rtype: StartupConfig
        """
        return self._startup_config

    @startup_config.setter
    def startup_config(self, startup_config):
        """Sets the startup_config of this InstanceGroupConfig.


        :param startup_config: The startup_config of this InstanceGroupConfig.
        :type startup_config: StartupConfig
        """

        self._startup_config = startup_config
