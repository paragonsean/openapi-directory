# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.basic_autoscaling_algorithm import BasicAutoscalingAlgorithm
from openapi_server.models.instance_group_autoscaling_policy_config import InstanceGroupAutoscalingPolicyConfig
from openapi_server import util


class AutoscalingPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, basic_algorithm: BasicAutoscalingAlgorithm=None, id: str=None, labels: Dict[str, str]=None, name: str=None, secondary_worker_config: InstanceGroupAutoscalingPolicyConfig=None, worker_config: InstanceGroupAutoscalingPolicyConfig=None):
        """AutoscalingPolicy - a model defined in OpenAPI

        :param basic_algorithm: The basic_algorithm of this AutoscalingPolicy.
        :param id: The id of this AutoscalingPolicy.
        :param labels: The labels of this AutoscalingPolicy.
        :param name: The name of this AutoscalingPolicy.
        :param secondary_worker_config: The secondary_worker_config of this AutoscalingPolicy.
        :param worker_config: The worker_config of this AutoscalingPolicy.
        """
        self.openapi_types = {
            'basic_algorithm': BasicAutoscalingAlgorithm,
            'id': str,
            'labels': Dict[str, str],
            'name': str,
            'secondary_worker_config': InstanceGroupAutoscalingPolicyConfig,
            'worker_config': InstanceGroupAutoscalingPolicyConfig
        }

        self.attribute_map = {
            'basic_algorithm': 'basicAlgorithm',
            'id': 'id',
            'labels': 'labels',
            'name': 'name',
            'secondary_worker_config': 'secondaryWorkerConfig',
            'worker_config': 'workerConfig'
        }

        self._basic_algorithm = basic_algorithm
        self._id = id
        self._labels = labels
        self._name = name
        self._secondary_worker_config = secondary_worker_config
        self._worker_config = worker_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoscalingPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoscalingPolicy of this AutoscalingPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def basic_algorithm(self):
        """Gets the basic_algorithm of this AutoscalingPolicy.


        :return: The basic_algorithm of this AutoscalingPolicy.
        :rtype: BasicAutoscalingAlgorithm
        """
        return self._basic_algorithm

    @basic_algorithm.setter
    def basic_algorithm(self, basic_algorithm):
        """Sets the basic_algorithm of this AutoscalingPolicy.


        :param basic_algorithm: The basic_algorithm of this AutoscalingPolicy.
        :type basic_algorithm: BasicAutoscalingAlgorithm
        """

        self._basic_algorithm = basic_algorithm

    @property
    def id(self):
        """Gets the id of this AutoscalingPolicy.

        Required. The policy id.The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.

        :return: The id of this AutoscalingPolicy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutoscalingPolicy.

        Required. The policy id.The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.

        :param id: The id of this AutoscalingPolicy.
        :type id: str
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this AutoscalingPolicy.

        Optional. The labels to associate with this autoscaling policy. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with an autoscaling policy.

        :return: The labels of this AutoscalingPolicy.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AutoscalingPolicy.

        Optional. The labels to associate with this autoscaling policy. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with an autoscaling policy.

        :param labels: The labels of this AutoscalingPolicy.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this AutoscalingPolicy.

        Output only. The \"resource name\" of the autoscaling policy, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.autoscalingPolicies, the resource name of the policy has the following format: projects/{project_id}/regions/{region}/autoscalingPolicies/{policy_id} For projects.locations.autoscalingPolicies, the resource name of the policy has the following format: projects/{project_id}/locations/{location}/autoscalingPolicies/{policy_id}

        :return: The name of this AutoscalingPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutoscalingPolicy.

        Output only. The \"resource name\" of the autoscaling policy, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.autoscalingPolicies, the resource name of the policy has the following format: projects/{project_id}/regions/{region}/autoscalingPolicies/{policy_id} For projects.locations.autoscalingPolicies, the resource name of the policy has the following format: projects/{project_id}/locations/{location}/autoscalingPolicies/{policy_id}

        :param name: The name of this AutoscalingPolicy.
        :type name: str
        """

        self._name = name

    @property
    def secondary_worker_config(self):
        """Gets the secondary_worker_config of this AutoscalingPolicy.


        :return: The secondary_worker_config of this AutoscalingPolicy.
        :rtype: InstanceGroupAutoscalingPolicyConfig
        """
        return self._secondary_worker_config

    @secondary_worker_config.setter
    def secondary_worker_config(self, secondary_worker_config):
        """Sets the secondary_worker_config of this AutoscalingPolicy.


        :param secondary_worker_config: The secondary_worker_config of this AutoscalingPolicy.
        :type secondary_worker_config: InstanceGroupAutoscalingPolicyConfig
        """

        self._secondary_worker_config = secondary_worker_config

    @property
    def worker_config(self):
        """Gets the worker_config of this AutoscalingPolicy.


        :return: The worker_config of this AutoscalingPolicy.
        :rtype: InstanceGroupAutoscalingPolicyConfig
        """
        return self._worker_config

    @worker_config.setter
    def worker_config(self, worker_config):
        """Sets the worker_config of this AutoscalingPolicy.


        :param worker_config: The worker_config of this AutoscalingPolicy.
        :type worker_config: InstanceGroupAutoscalingPolicyConfig
        """

        self._worker_config = worker_config
