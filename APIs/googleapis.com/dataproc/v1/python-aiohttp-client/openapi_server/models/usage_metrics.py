# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsageMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerator_type: str=None, milli_accelerator_seconds: str=None, milli_dcu_seconds: str=None, shuffle_storage_gb_seconds: str=None):
        """UsageMetrics - a model defined in OpenAPI

        :param accelerator_type: The accelerator_type of this UsageMetrics.
        :param milli_accelerator_seconds: The milli_accelerator_seconds of this UsageMetrics.
        :param milli_dcu_seconds: The milli_dcu_seconds of this UsageMetrics.
        :param shuffle_storage_gb_seconds: The shuffle_storage_gb_seconds of this UsageMetrics.
        """
        self.openapi_types = {
            'accelerator_type': str,
            'milli_accelerator_seconds': str,
            'milli_dcu_seconds': str,
            'shuffle_storage_gb_seconds': str
        }

        self.attribute_map = {
            'accelerator_type': 'acceleratorType',
            'milli_accelerator_seconds': 'milliAcceleratorSeconds',
            'milli_dcu_seconds': 'milliDcuSeconds',
            'shuffle_storage_gb_seconds': 'shuffleStorageGbSeconds'
        }

        self._accelerator_type = accelerator_type
        self._milli_accelerator_seconds = milli_accelerator_seconds
        self._milli_dcu_seconds = milli_dcu_seconds
        self._shuffle_storage_gb_seconds = shuffle_storage_gb_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsageMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsageMetrics of this UsageMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerator_type(self):
        """Gets the accelerator_type of this UsageMetrics.

        Optional. Accelerator type being used, if any

        :return: The accelerator_type of this UsageMetrics.
        :rtype: str
        """
        return self._accelerator_type

    @accelerator_type.setter
    def accelerator_type(self, accelerator_type):
        """Sets the accelerator_type of this UsageMetrics.

        Optional. Accelerator type being used, if any

        :param accelerator_type: The accelerator_type of this UsageMetrics.
        :type accelerator_type: str
        """

        self._accelerator_type = accelerator_type

    @property
    def milli_accelerator_seconds(self):
        """Gets the milli_accelerator_seconds of this UsageMetrics.

        Optional. Accelerator usage in (milliAccelerator x seconds) (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).

        :return: The milli_accelerator_seconds of this UsageMetrics.
        :rtype: str
        """
        return self._milli_accelerator_seconds

    @milli_accelerator_seconds.setter
    def milli_accelerator_seconds(self, milli_accelerator_seconds):
        """Sets the milli_accelerator_seconds of this UsageMetrics.

        Optional. Accelerator usage in (milliAccelerator x seconds) (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).

        :param milli_accelerator_seconds: The milli_accelerator_seconds of this UsageMetrics.
        :type milli_accelerator_seconds: str
        """

        self._milli_accelerator_seconds = milli_accelerator_seconds

    @property
    def milli_dcu_seconds(self):
        """Gets the milli_dcu_seconds of this UsageMetrics.

        Optional. DCU (Dataproc Compute Units) usage in (milliDCU x seconds) (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).

        :return: The milli_dcu_seconds of this UsageMetrics.
        :rtype: str
        """
        return self._milli_dcu_seconds

    @milli_dcu_seconds.setter
    def milli_dcu_seconds(self, milli_dcu_seconds):
        """Sets the milli_dcu_seconds of this UsageMetrics.

        Optional. DCU (Dataproc Compute Units) usage in (milliDCU x seconds) (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).

        :param milli_dcu_seconds: The milli_dcu_seconds of this UsageMetrics.
        :type milli_dcu_seconds: str
        """

        self._milli_dcu_seconds = milli_dcu_seconds

    @property
    def shuffle_storage_gb_seconds(self):
        """Gets the shuffle_storage_gb_seconds of this UsageMetrics.

        Optional. Shuffle storage usage in (GB x seconds) (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).

        :return: The shuffle_storage_gb_seconds of this UsageMetrics.
        :rtype: str
        """
        return self._shuffle_storage_gb_seconds

    @shuffle_storage_gb_seconds.setter
    def shuffle_storage_gb_seconds(self, shuffle_storage_gb_seconds):
        """Sets the shuffle_storage_gb_seconds of this UsageMetrics.

        Optional. Shuffle storage usage in (GB x seconds) (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).

        :param shuffle_storage_gb_seconds: The shuffle_storage_gb_seconds of this UsageMetrics.
        :type shuffle_storage_gb_seconds: str
        """

        self._shuffle_storage_gb_seconds = shuffle_storage_gb_seconds
