# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsageSnapshot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerator_type: str=None, milli_accelerator: str=None, milli_dcu: str=None, milli_dcu_premium: str=None, shuffle_storage_gb: str=None, shuffle_storage_gb_premium: str=None, snapshot_time: str=None):
        """UsageSnapshot - a model defined in OpenAPI

        :param accelerator_type: The accelerator_type of this UsageSnapshot.
        :param milli_accelerator: The milli_accelerator of this UsageSnapshot.
        :param milli_dcu: The milli_dcu of this UsageSnapshot.
        :param milli_dcu_premium: The milli_dcu_premium of this UsageSnapshot.
        :param shuffle_storage_gb: The shuffle_storage_gb of this UsageSnapshot.
        :param shuffle_storage_gb_premium: The shuffle_storage_gb_premium of this UsageSnapshot.
        :param snapshot_time: The snapshot_time of this UsageSnapshot.
        """
        self.openapi_types = {
            'accelerator_type': str,
            'milli_accelerator': str,
            'milli_dcu': str,
            'milli_dcu_premium': str,
            'shuffle_storage_gb': str,
            'shuffle_storage_gb_premium': str,
            'snapshot_time': str
        }

        self.attribute_map = {
            'accelerator_type': 'acceleratorType',
            'milli_accelerator': 'milliAccelerator',
            'milli_dcu': 'milliDcu',
            'milli_dcu_premium': 'milliDcuPremium',
            'shuffle_storage_gb': 'shuffleStorageGb',
            'shuffle_storage_gb_premium': 'shuffleStorageGbPremium',
            'snapshot_time': 'snapshotTime'
        }

        self._accelerator_type = accelerator_type
        self._milli_accelerator = milli_accelerator
        self._milli_dcu = milli_dcu
        self._milli_dcu_premium = milli_dcu_premium
        self._shuffle_storage_gb = shuffle_storage_gb
        self._shuffle_storage_gb_premium = shuffle_storage_gb_premium
        self._snapshot_time = snapshot_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsageSnapshot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsageSnapshot of this UsageSnapshot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerator_type(self):
        """Gets the accelerator_type of this UsageSnapshot.

        Optional. Accelerator type being used, if any

        :return: The accelerator_type of this UsageSnapshot.
        :rtype: str
        """
        return self._accelerator_type

    @accelerator_type.setter
    def accelerator_type(self, accelerator_type):
        """Sets the accelerator_type of this UsageSnapshot.

        Optional. Accelerator type being used, if any

        :param accelerator_type: The accelerator_type of this UsageSnapshot.
        :type accelerator_type: str
        """

        self._accelerator_type = accelerator_type

    @property
    def milli_accelerator(self):
        """Gets the milli_accelerator of this UsageSnapshot.

        Optional. Milli (one-thousandth) accelerator. (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing))

        :return: The milli_accelerator of this UsageSnapshot.
        :rtype: str
        """
        return self._milli_accelerator

    @milli_accelerator.setter
    def milli_accelerator(self, milli_accelerator):
        """Sets the milli_accelerator of this UsageSnapshot.

        Optional. Milli (one-thousandth) accelerator. (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing))

        :param milli_accelerator: The milli_accelerator of this UsageSnapshot.
        :type milli_accelerator: str
        """

        self._milli_accelerator = milli_accelerator

    @property
    def milli_dcu(self):
        """Gets the milli_dcu of this UsageSnapshot.

        Optional. Milli (one-thousandth) Dataproc Compute Units (DCUs) (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).

        :return: The milli_dcu of this UsageSnapshot.
        :rtype: str
        """
        return self._milli_dcu

    @milli_dcu.setter
    def milli_dcu(self, milli_dcu):
        """Sets the milli_dcu of this UsageSnapshot.

        Optional. Milli (one-thousandth) Dataproc Compute Units (DCUs) (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).

        :param milli_dcu: The milli_dcu of this UsageSnapshot.
        :type milli_dcu: str
        """

        self._milli_dcu = milli_dcu

    @property
    def milli_dcu_premium(self):
        """Gets the milli_dcu_premium of this UsageSnapshot.

        Optional. Milli (one-thousandth) Dataproc Compute Units (DCUs) charged at premium tier (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).

        :return: The milli_dcu_premium of this UsageSnapshot.
        :rtype: str
        """
        return self._milli_dcu_premium

    @milli_dcu_premium.setter
    def milli_dcu_premium(self, milli_dcu_premium):
        """Sets the milli_dcu_premium of this UsageSnapshot.

        Optional. Milli (one-thousandth) Dataproc Compute Units (DCUs) charged at premium tier (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).

        :param milli_dcu_premium: The milli_dcu_premium of this UsageSnapshot.
        :type milli_dcu_premium: str
        """

        self._milli_dcu_premium = milli_dcu_premium

    @property
    def shuffle_storage_gb(self):
        """Gets the shuffle_storage_gb of this UsageSnapshot.

        Optional. Shuffle Storage in gigabytes (GB). (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing))

        :return: The shuffle_storage_gb of this UsageSnapshot.
        :rtype: str
        """
        return self._shuffle_storage_gb

    @shuffle_storage_gb.setter
    def shuffle_storage_gb(self, shuffle_storage_gb):
        """Sets the shuffle_storage_gb of this UsageSnapshot.

        Optional. Shuffle Storage in gigabytes (GB). (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing))

        :param shuffle_storage_gb: The shuffle_storage_gb of this UsageSnapshot.
        :type shuffle_storage_gb: str
        """

        self._shuffle_storage_gb = shuffle_storage_gb

    @property
    def shuffle_storage_gb_premium(self):
        """Gets the shuffle_storage_gb_premium of this UsageSnapshot.

        Optional. Shuffle Storage in gigabytes (GB) charged at premium tier. (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing))

        :return: The shuffle_storage_gb_premium of this UsageSnapshot.
        :rtype: str
        """
        return self._shuffle_storage_gb_premium

    @shuffle_storage_gb_premium.setter
    def shuffle_storage_gb_premium(self, shuffle_storage_gb_premium):
        """Sets the shuffle_storage_gb_premium of this UsageSnapshot.

        Optional. Shuffle Storage in gigabytes (GB) charged at premium tier. (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing))

        :param shuffle_storage_gb_premium: The shuffle_storage_gb_premium of this UsageSnapshot.
        :type shuffle_storage_gb_premium: str
        """

        self._shuffle_storage_gb_premium = shuffle_storage_gb_premium

    @property
    def snapshot_time(self):
        """Gets the snapshot_time of this UsageSnapshot.

        Optional. The timestamp of the usage snapshot.

        :return: The snapshot_time of this UsageSnapshot.
        :rtype: str
        """
        return self._snapshot_time

    @snapshot_time.setter
    def snapshot_time(self, snapshot_time):
        """Sets the snapshot_time of this UsageSnapshot.

        Optional. The timestamp of the usage snapshot.

        :param snapshot_time: The snapshot_time of this UsageSnapshot.
        :type snapshot_time: str
        """

        self._snapshot_time = snapshot_time
