# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gke_node_config import GkeNodeConfig
from openapi_server.models.gke_node_pool_autoscaling_config import GkeNodePoolAutoscalingConfig
from openapi_server import util


class GkeNodePoolConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autoscaling: GkeNodePoolAutoscalingConfig=None, config: GkeNodeConfig=None, locations: List[str]=None):
        """GkeNodePoolConfig - a model defined in OpenAPI

        :param autoscaling: The autoscaling of this GkeNodePoolConfig.
        :param config: The config of this GkeNodePoolConfig.
        :param locations: The locations of this GkeNodePoolConfig.
        """
        self.openapi_types = {
            'autoscaling': GkeNodePoolAutoscalingConfig,
            'config': GkeNodeConfig,
            'locations': List[str]
        }

        self.attribute_map = {
            'autoscaling': 'autoscaling',
            'config': 'config',
            'locations': 'locations'
        }

        self._autoscaling = autoscaling
        self._config = config
        self._locations = locations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GkeNodePoolConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GkeNodePoolConfig of this GkeNodePoolConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autoscaling(self):
        """Gets the autoscaling of this GkeNodePoolConfig.


        :return: The autoscaling of this GkeNodePoolConfig.
        :rtype: GkeNodePoolAutoscalingConfig
        """
        return self._autoscaling

    @autoscaling.setter
    def autoscaling(self, autoscaling):
        """Sets the autoscaling of this GkeNodePoolConfig.


        :param autoscaling: The autoscaling of this GkeNodePoolConfig.
        :type autoscaling: GkeNodePoolAutoscalingConfig
        """

        self._autoscaling = autoscaling

    @property
    def config(self):
        """Gets the config of this GkeNodePoolConfig.


        :return: The config of this GkeNodePoolConfig.
        :rtype: GkeNodeConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this GkeNodePoolConfig.


        :param config: The config of this GkeNodePoolConfig.
        :type config: GkeNodeConfig
        """

        self._config = config

    @property
    def locations(self):
        """Gets the locations of this GkeNodePoolConfig.

        Optional. The list of Compute Engine zones (https://cloud.google.com/compute/docs/zones#available) where node pool nodes associated with a Dataproc on GKE virtual cluster will be located.Note: All node pools associated with a virtual cluster must be located in the same region as the virtual cluster, and they must be located in the same zone within that region.If a location is not specified during node pool creation, Dataproc on GKE will choose the zone.

        :return: The locations of this GkeNodePoolConfig.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this GkeNodePoolConfig.

        Optional. The list of Compute Engine zones (https://cloud.google.com/compute/docs/zones#available) where node pool nodes associated with a Dataproc on GKE virtual cluster will be located.Note: All node pools associated with a virtual cluster must be located in the same region as the virtual cluster, and they must be located in the same zone within that region.If a location is not specified during node pool creation, Dataproc on GKE will choose the zone.

        :param locations: The locations of this GkeNodePoolConfig.
        :type locations: List[str]
        """

        self._locations = locations
