# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InstanceGroupAutoscalingPolicyConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_instances: int=None, min_instances: int=None, weight: int=None):
        """InstanceGroupAutoscalingPolicyConfig - a model defined in OpenAPI

        :param max_instances: The max_instances of this InstanceGroupAutoscalingPolicyConfig.
        :param min_instances: The min_instances of this InstanceGroupAutoscalingPolicyConfig.
        :param weight: The weight of this InstanceGroupAutoscalingPolicyConfig.
        """
        self.openapi_types = {
            'max_instances': int,
            'min_instances': int,
            'weight': int
        }

        self.attribute_map = {
            'max_instances': 'maxInstances',
            'min_instances': 'minInstances',
            'weight': 'weight'
        }

        self._max_instances = max_instances
        self._min_instances = min_instances
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceGroupAutoscalingPolicyConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceGroupAutoscalingPolicyConfig of this InstanceGroupAutoscalingPolicyConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_instances(self):
        """Gets the max_instances of this InstanceGroupAutoscalingPolicyConfig.

        Required. Maximum number of instances for this group. Required for primary workers. Note that by default, clusters will not use secondary workers. Required for secondary workers if the minimum secondary instances is set.Primary workers - Bounds: [min_instances, ). Secondary workers - Bounds: [min_instances, ). Default: 0.

        :return: The max_instances of this InstanceGroupAutoscalingPolicyConfig.
        :rtype: int
        """
        return self._max_instances

    @max_instances.setter
    def max_instances(self, max_instances):
        """Sets the max_instances of this InstanceGroupAutoscalingPolicyConfig.

        Required. Maximum number of instances for this group. Required for primary workers. Note that by default, clusters will not use secondary workers. Required for secondary workers if the minimum secondary instances is set.Primary workers - Bounds: [min_instances, ). Secondary workers - Bounds: [min_instances, ). Default: 0.

        :param max_instances: The max_instances of this InstanceGroupAutoscalingPolicyConfig.
        :type max_instances: int
        """

        self._max_instances = max_instances

    @property
    def min_instances(self):
        """Gets the min_instances of this InstanceGroupAutoscalingPolicyConfig.

        Optional. Minimum number of instances for this group.Primary workers - Bounds: 2, max_instances. Default: 2. Secondary workers - Bounds: 0, max_instances. Default: 0.

        :return: The min_instances of this InstanceGroupAutoscalingPolicyConfig.
        :rtype: int
        """
        return self._min_instances

    @min_instances.setter
    def min_instances(self, min_instances):
        """Sets the min_instances of this InstanceGroupAutoscalingPolicyConfig.

        Optional. Minimum number of instances for this group.Primary workers - Bounds: 2, max_instances. Default: 2. Secondary workers - Bounds: 0, max_instances. Default: 0.

        :param min_instances: The min_instances of this InstanceGroupAutoscalingPolicyConfig.
        :type min_instances: int
        """

        self._min_instances = min_instances

    @property
    def weight(self):
        """Gets the weight of this InstanceGroupAutoscalingPolicyConfig.

        Optional. Weight for the instance group, which is used to determine the fraction of total workers in the cluster from this instance group. For example, if primary workers have weight 2, and secondary workers have weight 1, the cluster will have approximately 2 primary workers for each secondary worker.The cluster may not reach the specified balance if constrained by min/max bounds or other autoscaling settings. For example, if max_instances for secondary workers is 0, then only primary workers will be added. The cluster can also be out of balance when created.If weight is not set on any instance group, the cluster will default to equal weight for all groups: the cluster will attempt to maintain an equal number of workers in each group within the configured size bounds for each group. If weight is set for one group only, the cluster will default to zero weight on the unset group. For example if weight is set only on primary workers, the cluster will use primary workers only and no secondary workers.

        :return: The weight of this InstanceGroupAutoscalingPolicyConfig.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this InstanceGroupAutoscalingPolicyConfig.

        Optional. Weight for the instance group, which is used to determine the fraction of total workers in the cluster from this instance group. For example, if primary workers have weight 2, and secondary workers have weight 1, the cluster will have approximately 2 primary workers for each secondary worker.The cluster may not reach the specified balance if constrained by min/max bounds or other autoscaling settings. For example, if max_instances for secondary workers is 0, then only primary workers will be added. The cluster can also be out of balance when created.If weight is not set on any instance group, the cluster will default to equal weight for all groups: the cluster will attempt to maintain an equal number of workers in each group within the configured size bounds for each group. If weight is set for one group only, the cluster will default to zero weight on the unset group. For example if weight is set only on primary workers, the cluster will use primary workers only and no secondary workers.

        :param weight: The weight of this InstanceGroupAutoscalingPolicyConfig.
        :type weight: int
        """

        self._weight = weight
