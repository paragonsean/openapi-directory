# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_pool import NodePool
from openapi_server import util


class RepairClusterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_uuid: str=None, graceful_decommission_timeout: str=None, node_pools: List[NodePool]=None, parent_operation_id: str=None, request_id: str=None):
        """RepairClusterRequest - a model defined in OpenAPI

        :param cluster_uuid: The cluster_uuid of this RepairClusterRequest.
        :param graceful_decommission_timeout: The graceful_decommission_timeout of this RepairClusterRequest.
        :param node_pools: The node_pools of this RepairClusterRequest.
        :param parent_operation_id: The parent_operation_id of this RepairClusterRequest.
        :param request_id: The request_id of this RepairClusterRequest.
        """
        self.openapi_types = {
            'cluster_uuid': str,
            'graceful_decommission_timeout': str,
            'node_pools': List[NodePool],
            'parent_operation_id': str,
            'request_id': str
        }

        self.attribute_map = {
            'cluster_uuid': 'clusterUuid',
            'graceful_decommission_timeout': 'gracefulDecommissionTimeout',
            'node_pools': 'nodePools',
            'parent_operation_id': 'parentOperationId',
            'request_id': 'requestId'
        }

        self._cluster_uuid = cluster_uuid
        self._graceful_decommission_timeout = graceful_decommission_timeout
        self._node_pools = node_pools
        self._parent_operation_id = parent_operation_id
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepairClusterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepairClusterRequest of this RepairClusterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_uuid(self):
        """Gets the cluster_uuid of this RepairClusterRequest.

        Optional. Specifying the cluster_uuid means the RPC will fail (with error NOT_FOUND) if a cluster with the specified UUID does not exist.

        :return: The cluster_uuid of this RepairClusterRequest.
        :rtype: str
        """
        return self._cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):
        """Sets the cluster_uuid of this RepairClusterRequest.

        Optional. Specifying the cluster_uuid means the RPC will fail (with error NOT_FOUND) if a cluster with the specified UUID does not exist.

        :param cluster_uuid: The cluster_uuid of this RepairClusterRequest.
        :type cluster_uuid: str
        """

        self._cluster_uuid = cluster_uuid

    @property
    def graceful_decommission_timeout(self):
        """Gets the graceful_decommission_timeout of this RepairClusterRequest.

        Optional. Timeout for graceful YARN decommissioning. Graceful decommissioning facilitates the removal of cluster nodes without interrupting jobs in progress. The timeout specifies the amount of time to wait for jobs finish before forcefully removing nodes. The default timeout is 0 for forceful decommissioning, and the maximum timeout period is 1 day. (see JSON Mapping—Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).graceful_decommission_timeout is supported in Dataproc image versions 1.2+.

        :return: The graceful_decommission_timeout of this RepairClusterRequest.
        :rtype: str
        """
        return self._graceful_decommission_timeout

    @graceful_decommission_timeout.setter
    def graceful_decommission_timeout(self, graceful_decommission_timeout):
        """Sets the graceful_decommission_timeout of this RepairClusterRequest.

        Optional. Timeout for graceful YARN decommissioning. Graceful decommissioning facilitates the removal of cluster nodes without interrupting jobs in progress. The timeout specifies the amount of time to wait for jobs finish before forcefully removing nodes. The default timeout is 0 for forceful decommissioning, and the maximum timeout period is 1 day. (see JSON Mapping—Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).graceful_decommission_timeout is supported in Dataproc image versions 1.2+.

        :param graceful_decommission_timeout: The graceful_decommission_timeout of this RepairClusterRequest.
        :type graceful_decommission_timeout: str
        """

        self._graceful_decommission_timeout = graceful_decommission_timeout

    @property
    def node_pools(self):
        """Gets the node_pools of this RepairClusterRequest.

        Optional. Node pools and corresponding repair action to be taken. All node pools should be unique in this request. i.e. Multiple entries for the same node pool id are not allowed.

        :return: The node_pools of this RepairClusterRequest.
        :rtype: List[NodePool]
        """
        return self._node_pools

    @node_pools.setter
    def node_pools(self, node_pools):
        """Sets the node_pools of this RepairClusterRequest.

        Optional. Node pools and corresponding repair action to be taken. All node pools should be unique in this request. i.e. Multiple entries for the same node pool id are not allowed.

        :param node_pools: The node_pools of this RepairClusterRequest.
        :type node_pools: List[NodePool]
        """

        self._node_pools = node_pools

    @property
    def parent_operation_id(self):
        """Gets the parent_operation_id of this RepairClusterRequest.

        Optional. operation id of the parent operation sending the repair request

        :return: The parent_operation_id of this RepairClusterRequest.
        :rtype: str
        """
        return self._parent_operation_id

    @parent_operation_id.setter
    def parent_operation_id(self, parent_operation_id):
        """Sets the parent_operation_id of this RepairClusterRequest.

        Optional. operation id of the parent operation sending the repair request

        :param parent_operation_id: The parent_operation_id of this RepairClusterRequest.
        :type parent_operation_id: str
        """

        self._parent_operation_id = parent_operation_id

    @property
    def request_id(self):
        """Gets the request_id of this RepairClusterRequest.

        Optional. A unique ID used to identify the request. If the server receives two RepairClusterRequests with the same ID, the second request is ignored, and the first google.longrunning.Operation created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.

        :return: The request_id of this RepairClusterRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this RepairClusterRequest.

        Optional. A unique ID used to identify the request. If the server receives two RepairClusterRequests with the same ID, the second request is ignored, and the first google.longrunning.Operation created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.

        :param request_id: The request_id of this RepairClusterRequest.
        :type request_id: str
        """

        self._request_id = request_id
