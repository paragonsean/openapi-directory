# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnalyzeOperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analyzed_workload_name: str=None, analyzed_workload_type: str=None, analyzed_workload_uuid: str=None, create_time: str=None, description: str=None, done_time: str=None, labels: Dict[str, str]=None, warnings: List[str]=None):
        """AnalyzeOperationMetadata - a model defined in OpenAPI

        :param analyzed_workload_name: The analyzed_workload_name of this AnalyzeOperationMetadata.
        :param analyzed_workload_type: The analyzed_workload_type of this AnalyzeOperationMetadata.
        :param analyzed_workload_uuid: The analyzed_workload_uuid of this AnalyzeOperationMetadata.
        :param create_time: The create_time of this AnalyzeOperationMetadata.
        :param description: The description of this AnalyzeOperationMetadata.
        :param done_time: The done_time of this AnalyzeOperationMetadata.
        :param labels: The labels of this AnalyzeOperationMetadata.
        :param warnings: The warnings of this AnalyzeOperationMetadata.
        """
        self.openapi_types = {
            'analyzed_workload_name': str,
            'analyzed_workload_type': str,
            'analyzed_workload_uuid': str,
            'create_time': str,
            'description': str,
            'done_time': str,
            'labels': Dict[str, str],
            'warnings': List[str]
        }

        self.attribute_map = {
            'analyzed_workload_name': 'analyzedWorkloadName',
            'analyzed_workload_type': 'analyzedWorkloadType',
            'analyzed_workload_uuid': 'analyzedWorkloadUuid',
            'create_time': 'createTime',
            'description': 'description',
            'done_time': 'doneTime',
            'labels': 'labels',
            'warnings': 'warnings'
        }

        self._analyzed_workload_name = analyzed_workload_name
        self._analyzed_workload_type = analyzed_workload_type
        self._analyzed_workload_uuid = analyzed_workload_uuid
        self._create_time = create_time
        self._description = description
        self._done_time = done_time
        self._labels = labels
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeOperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyzeOperationMetadata of this AnalyzeOperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analyzed_workload_name(self):
        """Gets the analyzed_workload_name of this AnalyzeOperationMetadata.

        Output only. name of the workload being analyzed.

        :return: The analyzed_workload_name of this AnalyzeOperationMetadata.
        :rtype: str
        """
        return self._analyzed_workload_name

    @analyzed_workload_name.setter
    def analyzed_workload_name(self, analyzed_workload_name):
        """Sets the analyzed_workload_name of this AnalyzeOperationMetadata.

        Output only. name of the workload being analyzed.

        :param analyzed_workload_name: The analyzed_workload_name of this AnalyzeOperationMetadata.
        :type analyzed_workload_name: str
        """

        self._analyzed_workload_name = analyzed_workload_name

    @property
    def analyzed_workload_type(self):
        """Gets the analyzed_workload_type of this AnalyzeOperationMetadata.

        Output only. Type of the workload being analyzed.

        :return: The analyzed_workload_type of this AnalyzeOperationMetadata.
        :rtype: str
        """
        return self._analyzed_workload_type

    @analyzed_workload_type.setter
    def analyzed_workload_type(self, analyzed_workload_type):
        """Sets the analyzed_workload_type of this AnalyzeOperationMetadata.

        Output only. Type of the workload being analyzed.

        :param analyzed_workload_type: The analyzed_workload_type of this AnalyzeOperationMetadata.
        :type analyzed_workload_type: str
        """
        allowed_values = ["WORKLOAD_TYPE_UNSPECIFIED", "BATCH"]  # noqa: E501
        if analyzed_workload_type not in allowed_values:
            raise ValueError(
                "Invalid value for `analyzed_workload_type` ({0}), must be one of {1}"
                .format(analyzed_workload_type, allowed_values)
            )

        self._analyzed_workload_type = analyzed_workload_type

    @property
    def analyzed_workload_uuid(self):
        """Gets the analyzed_workload_uuid of this AnalyzeOperationMetadata.

        Output only. unique identifier of the workload typically generated by control plane. E.g. batch uuid.

        :return: The analyzed_workload_uuid of this AnalyzeOperationMetadata.
        :rtype: str
        """
        return self._analyzed_workload_uuid

    @analyzed_workload_uuid.setter
    def analyzed_workload_uuid(self, analyzed_workload_uuid):
        """Sets the analyzed_workload_uuid of this AnalyzeOperationMetadata.

        Output only. unique identifier of the workload typically generated by control plane. E.g. batch uuid.

        :param analyzed_workload_uuid: The analyzed_workload_uuid of this AnalyzeOperationMetadata.
        :type analyzed_workload_uuid: str
        """

        self._analyzed_workload_uuid = analyzed_workload_uuid

    @property
    def create_time(self):
        """Gets the create_time of this AnalyzeOperationMetadata.

        Output only. The time when the operation was created.

        :return: The create_time of this AnalyzeOperationMetadata.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this AnalyzeOperationMetadata.

        Output only. The time when the operation was created.

        :param create_time: The create_time of this AnalyzeOperationMetadata.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this AnalyzeOperationMetadata.

        Output only. Short description of the operation.

        :return: The description of this AnalyzeOperationMetadata.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AnalyzeOperationMetadata.

        Output only. Short description of the operation.

        :param description: The description of this AnalyzeOperationMetadata.
        :type description: str
        """

        self._description = description

    @property
    def done_time(self):
        """Gets the done_time of this AnalyzeOperationMetadata.

        Output only. The time when the operation finished.

        :return: The done_time of this AnalyzeOperationMetadata.
        :rtype: str
        """
        return self._done_time

    @done_time.setter
    def done_time(self, done_time):
        """Sets the done_time of this AnalyzeOperationMetadata.

        Output only. The time when the operation finished.

        :param done_time: The done_time of this AnalyzeOperationMetadata.
        :type done_time: str
        """

        self._done_time = done_time

    @property
    def labels(self):
        """Gets the labels of this AnalyzeOperationMetadata.

        Output only. Labels associated with the operation.

        :return: The labels of this AnalyzeOperationMetadata.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AnalyzeOperationMetadata.

        Output only. Labels associated with the operation.

        :param labels: The labels of this AnalyzeOperationMetadata.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def warnings(self):
        """Gets the warnings of this AnalyzeOperationMetadata.

        Output only. Warnings encountered during operation execution.

        :return: The warnings of this AnalyzeOperationMetadata.
        :rtype: List[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this AnalyzeOperationMetadata.

        Output only. Warnings encountered during operation execution.

        :param warnings: The warnings of this AnalyzeOperationMetadata.
        :type warnings: List[str]
        """

        self._warnings = warnings
