# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: str=None, state: str=None, state_start_time: str=None, substate: str=None):
        """JobStatus - a model defined in OpenAPI

        :param details: The details of this JobStatus.
        :param state: The state of this JobStatus.
        :param state_start_time: The state_start_time of this JobStatus.
        :param substate: The substate of this JobStatus.
        """
        self.openapi_types = {
            'details': str,
            'state': str,
            'state_start_time': str,
            'substate': str
        }

        self.attribute_map = {
            'details': 'details',
            'state': 'state',
            'state_start_time': 'stateStartTime',
            'substate': 'substate'
        }

        self._details = details
        self._state = state
        self._state_start_time = state_start_time
        self._substate = substate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobStatus of this JobStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this JobStatus.

        Optional. Output only. Job state details, such as an error description if the state is ERROR.

        :return: The details of this JobStatus.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this JobStatus.

        Optional. Output only. Job state details, such as an error description if the state is ERROR.

        :param details: The details of this JobStatus.
        :type details: str
        """

        self._details = details

    @property
    def state(self):
        """Gets the state of this JobStatus.

        Output only. A state message specifying the overall job state.

        :return: The state of this JobStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobStatus.

        Output only. A state message specifying the overall job state.

        :param state: The state of this JobStatus.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "SETUP_DONE", "RUNNING", "CANCEL_PENDING", "CANCEL_STARTED", "CANCELLED", "DONE", "ERROR", "ATTEMPT_FAILURE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_start_time(self):
        """Gets the state_start_time of this JobStatus.

        Output only. The time when this state was entered.

        :return: The state_start_time of this JobStatus.
        :rtype: str
        """
        return self._state_start_time

    @state_start_time.setter
    def state_start_time(self, state_start_time):
        """Sets the state_start_time of this JobStatus.

        Output only. The time when this state was entered.

        :param state_start_time: The state_start_time of this JobStatus.
        :type state_start_time: str
        """

        self._state_start_time = state_start_time

    @property
    def substate(self):
        """Gets the substate of this JobStatus.

        Output only. Additional state information, which includes status reported by the agent.

        :return: The substate of this JobStatus.
        :rtype: str
        """
        return self._substate

    @substate.setter
    def substate(self, substate):
        """Sets the substate of this JobStatus.

        Output only. Additional state information, which includes status reported by the agent.

        :param substate: The substate of this JobStatus.
        :type substate: str
        """
        allowed_values = ["UNSPECIFIED", "SUBMITTED", "QUEUED", "STALE_STATUS"]  # noqa: E501
        if substate not in allowed_values:
            raise ValueError(
                "Invalid value for `substate` ({0}), must be one of {1}"
                .format(substate, allowed_values)
            )

        self._substate = substate
