# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auxiliary_services_config import AuxiliaryServicesConfig
from openapi_server.models.kubernetes_cluster_config import KubernetesClusterConfig
from openapi_server import util


class VirtualClusterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auxiliary_services_config: AuxiliaryServicesConfig=None, kubernetes_cluster_config: KubernetesClusterConfig=None, staging_bucket: str=None):
        """VirtualClusterConfig - a model defined in OpenAPI

        :param auxiliary_services_config: The auxiliary_services_config of this VirtualClusterConfig.
        :param kubernetes_cluster_config: The kubernetes_cluster_config of this VirtualClusterConfig.
        :param staging_bucket: The staging_bucket of this VirtualClusterConfig.
        """
        self.openapi_types = {
            'auxiliary_services_config': AuxiliaryServicesConfig,
            'kubernetes_cluster_config': KubernetesClusterConfig,
            'staging_bucket': str
        }

        self.attribute_map = {
            'auxiliary_services_config': 'auxiliaryServicesConfig',
            'kubernetes_cluster_config': 'kubernetesClusterConfig',
            'staging_bucket': 'stagingBucket'
        }

        self._auxiliary_services_config = auxiliary_services_config
        self._kubernetes_cluster_config = kubernetes_cluster_config
        self._staging_bucket = staging_bucket

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualClusterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualClusterConfig of this VirtualClusterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auxiliary_services_config(self):
        """Gets the auxiliary_services_config of this VirtualClusterConfig.


        :return: The auxiliary_services_config of this VirtualClusterConfig.
        :rtype: AuxiliaryServicesConfig
        """
        return self._auxiliary_services_config

    @auxiliary_services_config.setter
    def auxiliary_services_config(self, auxiliary_services_config):
        """Sets the auxiliary_services_config of this VirtualClusterConfig.


        :param auxiliary_services_config: The auxiliary_services_config of this VirtualClusterConfig.
        :type auxiliary_services_config: AuxiliaryServicesConfig
        """

        self._auxiliary_services_config = auxiliary_services_config

    @property
    def kubernetes_cluster_config(self):
        """Gets the kubernetes_cluster_config of this VirtualClusterConfig.


        :return: The kubernetes_cluster_config of this VirtualClusterConfig.
        :rtype: KubernetesClusterConfig
        """
        return self._kubernetes_cluster_config

    @kubernetes_cluster_config.setter
    def kubernetes_cluster_config(self, kubernetes_cluster_config):
        """Sets the kubernetes_cluster_config of this VirtualClusterConfig.


        :param kubernetes_cluster_config: The kubernetes_cluster_config of this VirtualClusterConfig.
        :type kubernetes_cluster_config: KubernetesClusterConfig
        """

        self._kubernetes_cluster_config = kubernetes_cluster_config

    @property
    def staging_bucket(self):
        """Gets the staging_bucket of this VirtualClusterConfig.

        Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.

        :return: The staging_bucket of this VirtualClusterConfig.
        :rtype: str
        """
        return self._staging_bucket

    @staging_bucket.setter
    def staging_bucket(self, staging_bucket):
        """Sets the staging_bucket of this VirtualClusterConfig.

        Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.

        :param staging_bucket: The staging_bucket of this VirtualClusterConfig.
        :type staging_bucket: str
        """

        self._staging_bucket = staging_bucket
