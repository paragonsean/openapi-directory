# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flink_job import FlinkJob
from openapi_server.models.hadoop_job import HadoopJob
from openapi_server.models.hive_job import HiveJob
from openapi_server.models.job_scheduling import JobScheduling
from openapi_server.models.pig_job import PigJob
from openapi_server.models.presto_job import PrestoJob
from openapi_server.models.py_spark_job import PySparkJob
from openapi_server.models.spark_job import SparkJob
from openapi_server.models.spark_r_job import SparkRJob
from openapi_server.models.spark_sql_job import SparkSqlJob
from openapi_server.models.trino_job import TrinoJob
from openapi_server import util


class OrderedJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flink_job: FlinkJob=None, hadoop_job: HadoopJob=None, hive_job: HiveJob=None, labels: Dict[str, str]=None, pig_job: PigJob=None, prerequisite_step_ids: List[str]=None, presto_job: PrestoJob=None, pyspark_job: PySparkJob=None, scheduling: JobScheduling=None, spark_job: SparkJob=None, spark_r_job: SparkRJob=None, spark_sql_job: SparkSqlJob=None, step_id: str=None, trino_job: TrinoJob=None):
        """OrderedJob - a model defined in OpenAPI

        :param flink_job: The flink_job of this OrderedJob.
        :param hadoop_job: The hadoop_job of this OrderedJob.
        :param hive_job: The hive_job of this OrderedJob.
        :param labels: The labels of this OrderedJob.
        :param pig_job: The pig_job of this OrderedJob.
        :param prerequisite_step_ids: The prerequisite_step_ids of this OrderedJob.
        :param presto_job: The presto_job of this OrderedJob.
        :param pyspark_job: The pyspark_job of this OrderedJob.
        :param scheduling: The scheduling of this OrderedJob.
        :param spark_job: The spark_job of this OrderedJob.
        :param spark_r_job: The spark_r_job of this OrderedJob.
        :param spark_sql_job: The spark_sql_job of this OrderedJob.
        :param step_id: The step_id of this OrderedJob.
        :param trino_job: The trino_job of this OrderedJob.
        """
        self.openapi_types = {
            'flink_job': FlinkJob,
            'hadoop_job': HadoopJob,
            'hive_job': HiveJob,
            'labels': Dict[str, str],
            'pig_job': PigJob,
            'prerequisite_step_ids': List[str],
            'presto_job': PrestoJob,
            'pyspark_job': PySparkJob,
            'scheduling': JobScheduling,
            'spark_job': SparkJob,
            'spark_r_job': SparkRJob,
            'spark_sql_job': SparkSqlJob,
            'step_id': str,
            'trino_job': TrinoJob
        }

        self.attribute_map = {
            'flink_job': 'flinkJob',
            'hadoop_job': 'hadoopJob',
            'hive_job': 'hiveJob',
            'labels': 'labels',
            'pig_job': 'pigJob',
            'prerequisite_step_ids': 'prerequisiteStepIds',
            'presto_job': 'prestoJob',
            'pyspark_job': 'pysparkJob',
            'scheduling': 'scheduling',
            'spark_job': 'sparkJob',
            'spark_r_job': 'sparkRJob',
            'spark_sql_job': 'sparkSqlJob',
            'step_id': 'stepId',
            'trino_job': 'trinoJob'
        }

        self._flink_job = flink_job
        self._hadoop_job = hadoop_job
        self._hive_job = hive_job
        self._labels = labels
        self._pig_job = pig_job
        self._prerequisite_step_ids = prerequisite_step_ids
        self._presto_job = presto_job
        self._pyspark_job = pyspark_job
        self._scheduling = scheduling
        self._spark_job = spark_job
        self._spark_r_job = spark_r_job
        self._spark_sql_job = spark_sql_job
        self._step_id = step_id
        self._trino_job = trino_job

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderedJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderedJob of this OrderedJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flink_job(self):
        """Gets the flink_job of this OrderedJob.


        :return: The flink_job of this OrderedJob.
        :rtype: FlinkJob
        """
        return self._flink_job

    @flink_job.setter
    def flink_job(self, flink_job):
        """Sets the flink_job of this OrderedJob.


        :param flink_job: The flink_job of this OrderedJob.
        :type flink_job: FlinkJob
        """

        self._flink_job = flink_job

    @property
    def hadoop_job(self):
        """Gets the hadoop_job of this OrderedJob.


        :return: The hadoop_job of this OrderedJob.
        :rtype: HadoopJob
        """
        return self._hadoop_job

    @hadoop_job.setter
    def hadoop_job(self, hadoop_job):
        """Sets the hadoop_job of this OrderedJob.


        :param hadoop_job: The hadoop_job of this OrderedJob.
        :type hadoop_job: HadoopJob
        """

        self._hadoop_job = hadoop_job

    @property
    def hive_job(self):
        """Gets the hive_job of this OrderedJob.


        :return: The hive_job of this OrderedJob.
        :rtype: HiveJob
        """
        return self._hive_job

    @hive_job.setter
    def hive_job(self, hive_job):
        """Sets the hive_job of this OrderedJob.


        :param hive_job: The hive_job of this OrderedJob.
        :type hive_job: HiveJob
        """

        self._hive_job = hive_job

    @property
    def labels(self):
        """Gets the labels of this OrderedJob.

        Optional. The labels to associate with this job.Label keys must be between 1 and 63 characters long, and must conform to the following regular expression: \\p{Ll}\\p{Lo}{0,62}Label values must be between 1 and 63 characters long, and must conform to the following regular expression: \\p{Ll}\\p{Lo}\\p{N}_-{0,63}No more than 32 labels can be associated with a given job.

        :return: The labels of this OrderedJob.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this OrderedJob.

        Optional. The labels to associate with this job.Label keys must be between 1 and 63 characters long, and must conform to the following regular expression: \\p{Ll}\\p{Lo}{0,62}Label values must be between 1 and 63 characters long, and must conform to the following regular expression: \\p{Ll}\\p{Lo}\\p{N}_-{0,63}No more than 32 labels can be associated with a given job.

        :param labels: The labels of this OrderedJob.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def pig_job(self):
        """Gets the pig_job of this OrderedJob.


        :return: The pig_job of this OrderedJob.
        :rtype: PigJob
        """
        return self._pig_job

    @pig_job.setter
    def pig_job(self, pig_job):
        """Sets the pig_job of this OrderedJob.


        :param pig_job: The pig_job of this OrderedJob.
        :type pig_job: PigJob
        """

        self._pig_job = pig_job

    @property
    def prerequisite_step_ids(self):
        """Gets the prerequisite_step_ids of this OrderedJob.

        Optional. The optional list of prerequisite job step_ids. If not specified, the job will start at the beginning of workflow.

        :return: The prerequisite_step_ids of this OrderedJob.
        :rtype: List[str]
        """
        return self._prerequisite_step_ids

    @prerequisite_step_ids.setter
    def prerequisite_step_ids(self, prerequisite_step_ids):
        """Sets the prerequisite_step_ids of this OrderedJob.

        Optional. The optional list of prerequisite job step_ids. If not specified, the job will start at the beginning of workflow.

        :param prerequisite_step_ids: The prerequisite_step_ids of this OrderedJob.
        :type prerequisite_step_ids: List[str]
        """

        self._prerequisite_step_ids = prerequisite_step_ids

    @property
    def presto_job(self):
        """Gets the presto_job of this OrderedJob.


        :return: The presto_job of this OrderedJob.
        :rtype: PrestoJob
        """
        return self._presto_job

    @presto_job.setter
    def presto_job(self, presto_job):
        """Sets the presto_job of this OrderedJob.


        :param presto_job: The presto_job of this OrderedJob.
        :type presto_job: PrestoJob
        """

        self._presto_job = presto_job

    @property
    def pyspark_job(self):
        """Gets the pyspark_job of this OrderedJob.


        :return: The pyspark_job of this OrderedJob.
        :rtype: PySparkJob
        """
        return self._pyspark_job

    @pyspark_job.setter
    def pyspark_job(self, pyspark_job):
        """Sets the pyspark_job of this OrderedJob.


        :param pyspark_job: The pyspark_job of this OrderedJob.
        :type pyspark_job: PySparkJob
        """

        self._pyspark_job = pyspark_job

    @property
    def scheduling(self):
        """Gets the scheduling of this OrderedJob.


        :return: The scheduling of this OrderedJob.
        :rtype: JobScheduling
        """
        return self._scheduling

    @scheduling.setter
    def scheduling(self, scheduling):
        """Sets the scheduling of this OrderedJob.


        :param scheduling: The scheduling of this OrderedJob.
        :type scheduling: JobScheduling
        """

        self._scheduling = scheduling

    @property
    def spark_job(self):
        """Gets the spark_job of this OrderedJob.


        :return: The spark_job of this OrderedJob.
        :rtype: SparkJob
        """
        return self._spark_job

    @spark_job.setter
    def spark_job(self, spark_job):
        """Sets the spark_job of this OrderedJob.


        :param spark_job: The spark_job of this OrderedJob.
        :type spark_job: SparkJob
        """

        self._spark_job = spark_job

    @property
    def spark_r_job(self):
        """Gets the spark_r_job of this OrderedJob.


        :return: The spark_r_job of this OrderedJob.
        :rtype: SparkRJob
        """
        return self._spark_r_job

    @spark_r_job.setter
    def spark_r_job(self, spark_r_job):
        """Sets the spark_r_job of this OrderedJob.


        :param spark_r_job: The spark_r_job of this OrderedJob.
        :type spark_r_job: SparkRJob
        """

        self._spark_r_job = spark_r_job

    @property
    def spark_sql_job(self):
        """Gets the spark_sql_job of this OrderedJob.


        :return: The spark_sql_job of this OrderedJob.
        :rtype: SparkSqlJob
        """
        return self._spark_sql_job

    @spark_sql_job.setter
    def spark_sql_job(self, spark_sql_job):
        """Sets the spark_sql_job of this OrderedJob.


        :param spark_sql_job: The spark_sql_job of this OrderedJob.
        :type spark_sql_job: SparkSqlJob
        """

        self._spark_sql_job = spark_sql_job

    @property
    def step_id(self):
        """Gets the step_id of this OrderedJob.

        Required. The step id. The id must be unique among all jobs within the template.The step id is used as prefix for job id, as job goog-dataproc-workflow-step-id label, and in prerequisiteStepIds field from other steps.The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.

        :return: The step_id of this OrderedJob.
        :rtype: str
        """
        return self._step_id

    @step_id.setter
    def step_id(self, step_id):
        """Sets the step_id of this OrderedJob.

        Required. The step id. The id must be unique among all jobs within the template.The step id is used as prefix for job id, as job goog-dataproc-workflow-step-id label, and in prerequisiteStepIds field from other steps.The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between 3 and 50 characters.

        :param step_id: The step_id of this OrderedJob.
        :type step_id: str
        """

        self._step_id = step_id

    @property
    def trino_job(self):
        """Gets the trino_job of this OrderedJob.


        :return: The trino_job of this OrderedJob.
        :rtype: TrinoJob
        """
        return self._trino_job

    @trino_job.setter
    def trino_job(self, trino_job):
        """Sets the trino_job of this OrderedJob.


        :param trino_job: The trino_job of this OrderedJob.
        :type trino_job: TrinoJob
        """

        self._trino_job = trino_job
