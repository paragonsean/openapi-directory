# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InstanceSelection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, machine_types: List[str]=None, rank: int=None):
        """InstanceSelection - a model defined in OpenAPI

        :param machine_types: The machine_types of this InstanceSelection.
        :param rank: The rank of this InstanceSelection.
        """
        self.openapi_types = {
            'machine_types': List[str],
            'rank': int
        }

        self.attribute_map = {
            'machine_types': 'machineTypes',
            'rank': 'rank'
        }

        self._machine_types = machine_types
        self._rank = rank

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceSelection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceSelection of this InstanceSelection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def machine_types(self):
        """Gets the machine_types of this InstanceSelection.

        Optional. Full machine-type names, e.g. \"n1-standard-16\".

        :return: The machine_types of this InstanceSelection.
        :rtype: List[str]
        """
        return self._machine_types

    @machine_types.setter
    def machine_types(self, machine_types):
        """Sets the machine_types of this InstanceSelection.

        Optional. Full machine-type names, e.g. \"n1-standard-16\".

        :param machine_types: The machine_types of this InstanceSelection.
        :type machine_types: List[str]
        """

        self._machine_types = machine_types

    @property
    def rank(self):
        """Gets the rank of this InstanceSelection.

        Optional. Preference of this instance selection. Lower number means higher preference. Dataproc will first try to create a VM based on the machine-type with priority rank and fallback to next rank based on availability. Machine types and instance selections with the same priority have the same preference.

        :return: The rank of this InstanceSelection.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this InstanceSelection.

        Optional. Preference of this instance selection. Lower number means higher preference. Dataproc will first try to create a VM based on the machine-type with priority rank and fallback to next rank based on availability. Machine types and instance selections with the same priority have the same preference.

        :param rank: The rank of this InstanceSelection.
        :type rank: int
        """

        self._rank = rank
