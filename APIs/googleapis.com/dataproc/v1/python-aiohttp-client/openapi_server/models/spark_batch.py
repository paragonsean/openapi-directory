# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SparkBatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_uris: List[str]=None, args: List[str]=None, file_uris: List[str]=None, jar_file_uris: List[str]=None, main_class: str=None, main_jar_file_uri: str=None):
        """SparkBatch - a model defined in OpenAPI

        :param archive_uris: The archive_uris of this SparkBatch.
        :param args: The args of this SparkBatch.
        :param file_uris: The file_uris of this SparkBatch.
        :param jar_file_uris: The jar_file_uris of this SparkBatch.
        :param main_class: The main_class of this SparkBatch.
        :param main_jar_file_uri: The main_jar_file_uri of this SparkBatch.
        """
        self.openapi_types = {
            'archive_uris': List[str],
            'args': List[str],
            'file_uris': List[str],
            'jar_file_uris': List[str],
            'main_class': str,
            'main_jar_file_uri': str
        }

        self.attribute_map = {
            'archive_uris': 'archiveUris',
            'args': 'args',
            'file_uris': 'fileUris',
            'jar_file_uris': 'jarFileUris',
            'main_class': 'mainClass',
            'main_jar_file_uri': 'mainJarFileUri'
        }

        self._archive_uris = archive_uris
        self._args = args
        self._file_uris = file_uris
        self._jar_file_uris = jar_file_uris
        self._main_class = main_class
        self._main_jar_file_uri = main_jar_file_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SparkBatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SparkBatch of this SparkBatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_uris(self):
        """Gets the archive_uris of this SparkBatch.

        Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.

        :return: The archive_uris of this SparkBatch.
        :rtype: List[str]
        """
        return self._archive_uris

    @archive_uris.setter
    def archive_uris(self, archive_uris):
        """Sets the archive_uris of this SparkBatch.

        Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.

        :param archive_uris: The archive_uris of this SparkBatch.
        :type archive_uris: List[str]
        """

        self._archive_uris = archive_uris

    @property
    def args(self):
        """Gets the args of this SparkBatch.

        Optional. The arguments to pass to the driver. Do not include arguments that can be set as batch properties, such as --conf, since a collision can occur that causes an incorrect batch submission.

        :return: The args of this SparkBatch.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this SparkBatch.

        Optional. The arguments to pass to the driver. Do not include arguments that can be set as batch properties, such as --conf, since a collision can occur that causes an incorrect batch submission.

        :param args: The args of this SparkBatch.
        :type args: List[str]
        """

        self._args = args

    @property
    def file_uris(self):
        """Gets the file_uris of this SparkBatch.

        Optional. HCFS URIs of files to be placed in the working directory of each executor.

        :return: The file_uris of this SparkBatch.
        :rtype: List[str]
        """
        return self._file_uris

    @file_uris.setter
    def file_uris(self, file_uris):
        """Sets the file_uris of this SparkBatch.

        Optional. HCFS URIs of files to be placed in the working directory of each executor.

        :param file_uris: The file_uris of this SparkBatch.
        :type file_uris: List[str]
        """

        self._file_uris = file_uris

    @property
    def jar_file_uris(self):
        """Gets the jar_file_uris of this SparkBatch.

        Optional. HCFS URIs of jar files to add to the classpath of the Spark driver and tasks.

        :return: The jar_file_uris of this SparkBatch.
        :rtype: List[str]
        """
        return self._jar_file_uris

    @jar_file_uris.setter
    def jar_file_uris(self, jar_file_uris):
        """Sets the jar_file_uris of this SparkBatch.

        Optional. HCFS URIs of jar files to add to the classpath of the Spark driver and tasks.

        :param jar_file_uris: The jar_file_uris of this SparkBatch.
        :type jar_file_uris: List[str]
        """

        self._jar_file_uris = jar_file_uris

    @property
    def main_class(self):
        """Gets the main_class of this SparkBatch.

        Optional. The name of the driver main class. The jar file that contains the class must be in the classpath or specified in jar_file_uris.

        :return: The main_class of this SparkBatch.
        :rtype: str
        """
        return self._main_class

    @main_class.setter
    def main_class(self, main_class):
        """Sets the main_class of this SparkBatch.

        Optional. The name of the driver main class. The jar file that contains the class must be in the classpath or specified in jar_file_uris.

        :param main_class: The main_class of this SparkBatch.
        :type main_class: str
        """

        self._main_class = main_class

    @property
    def main_jar_file_uri(self):
        """Gets the main_jar_file_uri of this SparkBatch.

        Optional. The HCFS URI of the jar file that contains the main class.

        :return: The main_jar_file_uri of this SparkBatch.
        :rtype: str
        """
        return self._main_jar_file_uri

    @main_jar_file_uri.setter
    def main_jar_file_uri(self, main_jar_file_uri):
        """Sets the main_jar_file_uri of this SparkBatch.

        Optional. The HCFS URI of the jar file that contains the main class.

        :param main_jar_file_uri: The main_jar_file_uri of this SparkBatch.
        :type main_jar_file_uri: str
        """

        self._main_jar_file_uri = main_jar_file_uri
