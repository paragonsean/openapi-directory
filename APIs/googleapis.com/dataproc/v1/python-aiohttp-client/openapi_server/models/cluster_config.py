# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.autoscaling_config import AutoscalingConfig
from openapi_server.models.auxiliary_node_group import AuxiliaryNodeGroup
from openapi_server.models.dataproc_metric_config import DataprocMetricConfig
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server.models.endpoint_config import EndpointConfig
from openapi_server.models.gce_cluster_config import GceClusterConfig
from openapi_server.models.gke_cluster_config import GkeClusterConfig
from openapi_server.models.instance_group_config import InstanceGroupConfig
from openapi_server.models.lifecycle_config import LifecycleConfig
from openapi_server.models.metastore_config import MetastoreConfig
from openapi_server.models.node_initialization_action import NodeInitializationAction
from openapi_server.models.security_config import SecurityConfig
from openapi_server.models.software_config import SoftwareConfig
from openapi_server import util


class ClusterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autoscaling_config: AutoscalingConfig=None, auxiliary_node_groups: List[AuxiliaryNodeGroup]=None, config_bucket: str=None, dataproc_metric_config: DataprocMetricConfig=None, encryption_config: EncryptionConfig=None, endpoint_config: EndpointConfig=None, gce_cluster_config: GceClusterConfig=None, gke_cluster_config: GkeClusterConfig=None, initialization_actions: List[NodeInitializationAction]=None, lifecycle_config: LifecycleConfig=None, master_config: InstanceGroupConfig=None, metastore_config: MetastoreConfig=None, secondary_worker_config: InstanceGroupConfig=None, security_config: SecurityConfig=None, software_config: SoftwareConfig=None, temp_bucket: str=None, worker_config: InstanceGroupConfig=None):
        """ClusterConfig - a model defined in OpenAPI

        :param autoscaling_config: The autoscaling_config of this ClusterConfig.
        :param auxiliary_node_groups: The auxiliary_node_groups of this ClusterConfig.
        :param config_bucket: The config_bucket of this ClusterConfig.
        :param dataproc_metric_config: The dataproc_metric_config of this ClusterConfig.
        :param encryption_config: The encryption_config of this ClusterConfig.
        :param endpoint_config: The endpoint_config of this ClusterConfig.
        :param gce_cluster_config: The gce_cluster_config of this ClusterConfig.
        :param gke_cluster_config: The gke_cluster_config of this ClusterConfig.
        :param initialization_actions: The initialization_actions of this ClusterConfig.
        :param lifecycle_config: The lifecycle_config of this ClusterConfig.
        :param master_config: The master_config of this ClusterConfig.
        :param metastore_config: The metastore_config of this ClusterConfig.
        :param secondary_worker_config: The secondary_worker_config of this ClusterConfig.
        :param security_config: The security_config of this ClusterConfig.
        :param software_config: The software_config of this ClusterConfig.
        :param temp_bucket: The temp_bucket of this ClusterConfig.
        :param worker_config: The worker_config of this ClusterConfig.
        """
        self.openapi_types = {
            'autoscaling_config': AutoscalingConfig,
            'auxiliary_node_groups': List[AuxiliaryNodeGroup],
            'config_bucket': str,
            'dataproc_metric_config': DataprocMetricConfig,
            'encryption_config': EncryptionConfig,
            'endpoint_config': EndpointConfig,
            'gce_cluster_config': GceClusterConfig,
            'gke_cluster_config': GkeClusterConfig,
            'initialization_actions': List[NodeInitializationAction],
            'lifecycle_config': LifecycleConfig,
            'master_config': InstanceGroupConfig,
            'metastore_config': MetastoreConfig,
            'secondary_worker_config': InstanceGroupConfig,
            'security_config': SecurityConfig,
            'software_config': SoftwareConfig,
            'temp_bucket': str,
            'worker_config': InstanceGroupConfig
        }

        self.attribute_map = {
            'autoscaling_config': 'autoscalingConfig',
            'auxiliary_node_groups': 'auxiliaryNodeGroups',
            'config_bucket': 'configBucket',
            'dataproc_metric_config': 'dataprocMetricConfig',
            'encryption_config': 'encryptionConfig',
            'endpoint_config': 'endpointConfig',
            'gce_cluster_config': 'gceClusterConfig',
            'gke_cluster_config': 'gkeClusterConfig',
            'initialization_actions': 'initializationActions',
            'lifecycle_config': 'lifecycleConfig',
            'master_config': 'masterConfig',
            'metastore_config': 'metastoreConfig',
            'secondary_worker_config': 'secondaryWorkerConfig',
            'security_config': 'securityConfig',
            'software_config': 'softwareConfig',
            'temp_bucket': 'tempBucket',
            'worker_config': 'workerConfig'
        }

        self._autoscaling_config = autoscaling_config
        self._auxiliary_node_groups = auxiliary_node_groups
        self._config_bucket = config_bucket
        self._dataproc_metric_config = dataproc_metric_config
        self._encryption_config = encryption_config
        self._endpoint_config = endpoint_config
        self._gce_cluster_config = gce_cluster_config
        self._gke_cluster_config = gke_cluster_config
        self._initialization_actions = initialization_actions
        self._lifecycle_config = lifecycle_config
        self._master_config = master_config
        self._metastore_config = metastore_config
        self._secondary_worker_config = secondary_worker_config
        self._security_config = security_config
        self._software_config = software_config
        self._temp_bucket = temp_bucket
        self._worker_config = worker_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterConfig of this ClusterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autoscaling_config(self):
        """Gets the autoscaling_config of this ClusterConfig.


        :return: The autoscaling_config of this ClusterConfig.
        :rtype: AutoscalingConfig
        """
        return self._autoscaling_config

    @autoscaling_config.setter
    def autoscaling_config(self, autoscaling_config):
        """Sets the autoscaling_config of this ClusterConfig.


        :param autoscaling_config: The autoscaling_config of this ClusterConfig.
        :type autoscaling_config: AutoscalingConfig
        """

        self._autoscaling_config = autoscaling_config

    @property
    def auxiliary_node_groups(self):
        """Gets the auxiliary_node_groups of this ClusterConfig.

        Optional. The node group settings.

        :return: The auxiliary_node_groups of this ClusterConfig.
        :rtype: List[AuxiliaryNodeGroup]
        """
        return self._auxiliary_node_groups

    @auxiliary_node_groups.setter
    def auxiliary_node_groups(self, auxiliary_node_groups):
        """Sets the auxiliary_node_groups of this ClusterConfig.

        Optional. The node group settings.

        :param auxiliary_node_groups: The auxiliary_node_groups of this ClusterConfig.
        :type auxiliary_node_groups: List[AuxiliaryNodeGroup]
        """

        self._auxiliary_node_groups = auxiliary_node_groups

    @property
    def config_bucket(self):
        """Gets the config_bucket of this ClusterConfig.

        Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.

        :return: The config_bucket of this ClusterConfig.
        :rtype: str
        """
        return self._config_bucket

    @config_bucket.setter
    def config_bucket(self, config_bucket):
        """Sets the config_bucket of this ClusterConfig.

        Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.

        :param config_bucket: The config_bucket of this ClusterConfig.
        :type config_bucket: str
        """

        self._config_bucket = config_bucket

    @property
    def dataproc_metric_config(self):
        """Gets the dataproc_metric_config of this ClusterConfig.


        :return: The dataproc_metric_config of this ClusterConfig.
        :rtype: DataprocMetricConfig
        """
        return self._dataproc_metric_config

    @dataproc_metric_config.setter
    def dataproc_metric_config(self, dataproc_metric_config):
        """Sets the dataproc_metric_config of this ClusterConfig.


        :param dataproc_metric_config: The dataproc_metric_config of this ClusterConfig.
        :type dataproc_metric_config: DataprocMetricConfig
        """

        self._dataproc_metric_config = dataproc_metric_config

    @property
    def encryption_config(self):
        """Gets the encryption_config of this ClusterConfig.


        :return: The encryption_config of this ClusterConfig.
        :rtype: EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this ClusterConfig.


        :param encryption_config: The encryption_config of this ClusterConfig.
        :type encryption_config: EncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def endpoint_config(self):
        """Gets the endpoint_config of this ClusterConfig.


        :return: The endpoint_config of this ClusterConfig.
        :rtype: EndpointConfig
        """
        return self._endpoint_config

    @endpoint_config.setter
    def endpoint_config(self, endpoint_config):
        """Sets the endpoint_config of this ClusterConfig.


        :param endpoint_config: The endpoint_config of this ClusterConfig.
        :type endpoint_config: EndpointConfig
        """

        self._endpoint_config = endpoint_config

    @property
    def gce_cluster_config(self):
        """Gets the gce_cluster_config of this ClusterConfig.


        :return: The gce_cluster_config of this ClusterConfig.
        :rtype: GceClusterConfig
        """
        return self._gce_cluster_config

    @gce_cluster_config.setter
    def gce_cluster_config(self, gce_cluster_config):
        """Sets the gce_cluster_config of this ClusterConfig.


        :param gce_cluster_config: The gce_cluster_config of this ClusterConfig.
        :type gce_cluster_config: GceClusterConfig
        """

        self._gce_cluster_config = gce_cluster_config

    @property
    def gke_cluster_config(self):
        """Gets the gke_cluster_config of this ClusterConfig.


        :return: The gke_cluster_config of this ClusterConfig.
        :rtype: GkeClusterConfig
        """
        return self._gke_cluster_config

    @gke_cluster_config.setter
    def gke_cluster_config(self, gke_cluster_config):
        """Sets the gke_cluster_config of this ClusterConfig.


        :param gke_cluster_config: The gke_cluster_config of this ClusterConfig.
        :type gke_cluster_config: GkeClusterConfig
        """

        self._gke_cluster_config = gke_cluster_config

    @property
    def initialization_actions(self):
        """Gets the initialization_actions of this ClusterConfig.

        Optional. Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if [[ \"${ROLE}\" == 'Master' ]]; then ... master specific actions ... else ... worker specific actions ... fi 

        :return: The initialization_actions of this ClusterConfig.
        :rtype: List[NodeInitializationAction]
        """
        return self._initialization_actions

    @initialization_actions.setter
    def initialization_actions(self, initialization_actions):
        """Sets the initialization_actions of this ClusterConfig.

        Optional. Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if [[ \"${ROLE}\" == 'Master' ]]; then ... master specific actions ... else ... worker specific actions ... fi 

        :param initialization_actions: The initialization_actions of this ClusterConfig.
        :type initialization_actions: List[NodeInitializationAction]
        """

        self._initialization_actions = initialization_actions

    @property
    def lifecycle_config(self):
        """Gets the lifecycle_config of this ClusterConfig.


        :return: The lifecycle_config of this ClusterConfig.
        :rtype: LifecycleConfig
        """
        return self._lifecycle_config

    @lifecycle_config.setter
    def lifecycle_config(self, lifecycle_config):
        """Sets the lifecycle_config of this ClusterConfig.


        :param lifecycle_config: The lifecycle_config of this ClusterConfig.
        :type lifecycle_config: LifecycleConfig
        """

        self._lifecycle_config = lifecycle_config

    @property
    def master_config(self):
        """Gets the master_config of this ClusterConfig.


        :return: The master_config of this ClusterConfig.
        :rtype: InstanceGroupConfig
        """
        return self._master_config

    @master_config.setter
    def master_config(self, master_config):
        """Sets the master_config of this ClusterConfig.


        :param master_config: The master_config of this ClusterConfig.
        :type master_config: InstanceGroupConfig
        """

        self._master_config = master_config

    @property
    def metastore_config(self):
        """Gets the metastore_config of this ClusterConfig.


        :return: The metastore_config of this ClusterConfig.
        :rtype: MetastoreConfig
        """
        return self._metastore_config

    @metastore_config.setter
    def metastore_config(self, metastore_config):
        """Sets the metastore_config of this ClusterConfig.


        :param metastore_config: The metastore_config of this ClusterConfig.
        :type metastore_config: MetastoreConfig
        """

        self._metastore_config = metastore_config

    @property
    def secondary_worker_config(self):
        """Gets the secondary_worker_config of this ClusterConfig.


        :return: The secondary_worker_config of this ClusterConfig.
        :rtype: InstanceGroupConfig
        """
        return self._secondary_worker_config

    @secondary_worker_config.setter
    def secondary_worker_config(self, secondary_worker_config):
        """Sets the secondary_worker_config of this ClusterConfig.


        :param secondary_worker_config: The secondary_worker_config of this ClusterConfig.
        :type secondary_worker_config: InstanceGroupConfig
        """

        self._secondary_worker_config = secondary_worker_config

    @property
    def security_config(self):
        """Gets the security_config of this ClusterConfig.


        :return: The security_config of this ClusterConfig.
        :rtype: SecurityConfig
        """
        return self._security_config

    @security_config.setter
    def security_config(self, security_config):
        """Sets the security_config of this ClusterConfig.


        :param security_config: The security_config of this ClusterConfig.
        :type security_config: SecurityConfig
        """

        self._security_config = security_config

    @property
    def software_config(self):
        """Gets the software_config of this ClusterConfig.


        :return: The software_config of this ClusterConfig.
        :rtype: SoftwareConfig
        """
        return self._software_config

    @software_config.setter
    def software_config(self, software_config):
        """Sets the software_config of this ClusterConfig.


        :param software_config: The software_config of this ClusterConfig.
        :type software_config: SoftwareConfig
        """

        self._software_config = software_config

    @property
    def temp_bucket(self):
        """Gets the temp_bucket of this ClusterConfig.

        Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.

        :return: The temp_bucket of this ClusterConfig.
        :rtype: str
        """
        return self._temp_bucket

    @temp_bucket.setter
    def temp_bucket(self, temp_bucket):
        """Sets the temp_bucket of this ClusterConfig.

        Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.

        :param temp_bucket: The temp_bucket of this ClusterConfig.
        :type temp_bucket: str
        """

        self._temp_bucket = temp_bucket

    @property
    def worker_config(self):
        """Gets the worker_config of this ClusterConfig.


        :return: The worker_config of this ClusterConfig.
        :rtype: InstanceGroupConfig
        """
        return self._worker_config

    @worker_config.setter
    def worker_config(self, worker_config):
        """Sets the worker_config of this ClusterConfig.


        :param worker_config: The worker_config of this ClusterConfig.
        :type worker_config: InstanceGroupConfig
        """

        self._worker_config = worker_config
