# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.spark_history_server_config import SparkHistoryServerConfig
from openapi_server import util


class PeripheralsConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metastore_service: str=None, spark_history_server_config: SparkHistoryServerConfig=None):
        """PeripheralsConfig - a model defined in OpenAPI

        :param metastore_service: The metastore_service of this PeripheralsConfig.
        :param spark_history_server_config: The spark_history_server_config of this PeripheralsConfig.
        """
        self.openapi_types = {
            'metastore_service': str,
            'spark_history_server_config': SparkHistoryServerConfig
        }

        self.attribute_map = {
            'metastore_service': 'metastoreService',
            'spark_history_server_config': 'sparkHistoryServerConfig'
        }

        self._metastore_service = metastore_service
        self._spark_history_server_config = spark_history_server_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeripheralsConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeripheralsConfig of this PeripheralsConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metastore_service(self):
        """Gets the metastore_service of this PeripheralsConfig.

        Optional. Resource name of an existing Dataproc Metastore service.Example: projects/[project_id]/locations/[region]/services/[service_id]

        :return: The metastore_service of this PeripheralsConfig.
        :rtype: str
        """
        return self._metastore_service

    @metastore_service.setter
    def metastore_service(self, metastore_service):
        """Sets the metastore_service of this PeripheralsConfig.

        Optional. Resource name of an existing Dataproc Metastore service.Example: projects/[project_id]/locations/[region]/services/[service_id]

        :param metastore_service: The metastore_service of this PeripheralsConfig.
        :type metastore_service: str
        """

        self._metastore_service = metastore_service

    @property
    def spark_history_server_config(self):
        """Gets the spark_history_server_config of this PeripheralsConfig.


        :return: The spark_history_server_config of this PeripheralsConfig.
        :rtype: SparkHistoryServerConfig
        """
        return self._spark_history_server_config

    @spark_history_server_config.setter
    def spark_history_server_config(self, spark_history_server_config):
        """Sets the spark_history_server_config of this PeripheralsConfig.


        :param spark_history_server_config: The spark_history_server_config of this PeripheralsConfig.
        :type spark_history_server_config: SparkHistoryServerConfig
        """

        self._spark_history_server_config = spark_history_server_config
