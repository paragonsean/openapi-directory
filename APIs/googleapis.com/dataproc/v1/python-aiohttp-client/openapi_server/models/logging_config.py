# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoggingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, driver_log_levels: Dict[str, str]=None):
        """LoggingConfig - a model defined in OpenAPI

        :param driver_log_levels: The driver_log_levels of this LoggingConfig.
        """
        self.openapi_types = {
            'driver_log_levels': Dict[str, str]
        }

        self.attribute_map = {
            'driver_log_levels': 'driverLogLevels'
        }

        self._driver_log_levels = driver_log_levels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoggingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoggingConfig of this LoggingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def driver_log_levels(self):
        """Gets the driver_log_levels of this LoggingConfig.

        The per-package log levels for the driver. This can include \"root\" package name to configure rootLogger. Examples: - 'com.google = FATAL' - 'root = INFO' - 'org.apache = DEBUG'

        :return: The driver_log_levels of this LoggingConfig.
        :rtype: Dict[str, str]
        """
        return self._driver_log_levels

    @driver_log_levels.setter
    def driver_log_levels(self, driver_log_levels):
        """Sets the driver_log_levels of this LoggingConfig.

        The per-package log levels for the driver. This can include \"root\" package name to configure rootLogger. Examples: - 'com.google = FATAL' - 'root = INFO' - 'org.apache = DEBUG'

        :param driver_log_levels: The driver_log_levels of this LoggingConfig.
        :type driver_log_levels: Dict[str, str]
        """
        allowed_values = ["LEVEL_UNSPECIFIED", "ALL", "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "false"]  # noqa: E501
        if not set(driver_log_levels.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `driver_log_levels` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(driver_log_levels.keys()) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._driver_log_levels = driver_log_levels
