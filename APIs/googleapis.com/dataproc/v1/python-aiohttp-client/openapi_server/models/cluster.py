# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_config import ClusterConfig
from openapi_server.models.cluster_metrics import ClusterMetrics
from openapi_server.models.cluster_status import ClusterStatus
from openapi_server.models.virtual_cluster_config import VirtualClusterConfig
from openapi_server import util


class Cluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_name: str=None, cluster_uuid: str=None, config: ClusterConfig=None, labels: Dict[str, str]=None, metrics: ClusterMetrics=None, project_id: str=None, status: ClusterStatus=None, status_history: List[ClusterStatus]=None, virtual_cluster_config: VirtualClusterConfig=None):
        """Cluster - a model defined in OpenAPI

        :param cluster_name: The cluster_name of this Cluster.
        :param cluster_uuid: The cluster_uuid of this Cluster.
        :param config: The config of this Cluster.
        :param labels: The labels of this Cluster.
        :param metrics: The metrics of this Cluster.
        :param project_id: The project_id of this Cluster.
        :param status: The status of this Cluster.
        :param status_history: The status_history of this Cluster.
        :param virtual_cluster_config: The virtual_cluster_config of this Cluster.
        """
        self.openapi_types = {
            'cluster_name': str,
            'cluster_uuid': str,
            'config': ClusterConfig,
            'labels': Dict[str, str],
            'metrics': ClusterMetrics,
            'project_id': str,
            'status': ClusterStatus,
            'status_history': List[ClusterStatus],
            'virtual_cluster_config': VirtualClusterConfig
        }

        self.attribute_map = {
            'cluster_name': 'clusterName',
            'cluster_uuid': 'clusterUuid',
            'config': 'config',
            'labels': 'labels',
            'metrics': 'metrics',
            'project_id': 'projectId',
            'status': 'status',
            'status_history': 'statusHistory',
            'virtual_cluster_config': 'virtualClusterConfig'
        }

        self._cluster_name = cluster_name
        self._cluster_uuid = cluster_uuid
        self._config = config
        self._labels = labels
        self._metrics = metrics
        self._project_id = project_id
        self._status = status
        self._status_history = status_history
        self._virtual_cluster_config = virtual_cluster_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cluster of this Cluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_name(self):
        """Gets the cluster_name of this Cluster.

        Required. The cluster name, which must be unique within a project. The name must start with a lowercase letter, and can contain up to 51 lowercase letters, numbers, and hyphens. It cannot end with a hyphen. The name of a deleted cluster can be reused.

        :return: The cluster_name of this Cluster.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this Cluster.

        Required. The cluster name, which must be unique within a project. The name must start with a lowercase letter, and can contain up to 51 lowercase letters, numbers, and hyphens. It cannot end with a hyphen. The name of a deleted cluster can be reused.

        :param cluster_name: The cluster_name of this Cluster.
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def cluster_uuid(self):
        """Gets the cluster_uuid of this Cluster.

        Output only. A cluster UUID (Unique Universal Identifier). Dataproc generates this value when it creates the cluster.

        :return: The cluster_uuid of this Cluster.
        :rtype: str
        """
        return self._cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):
        """Sets the cluster_uuid of this Cluster.

        Output only. A cluster UUID (Unique Universal Identifier). Dataproc generates this value when it creates the cluster.

        :param cluster_uuid: The cluster_uuid of this Cluster.
        :type cluster_uuid: str
        """

        self._cluster_uuid = cluster_uuid

    @property
    def config(self):
        """Gets the config of this Cluster.


        :return: The config of this Cluster.
        :rtype: ClusterConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Cluster.


        :param config: The config of this Cluster.
        :type config: ClusterConfig
        """

        self._config = config

    @property
    def labels(self):
        """Gets the labels of this Cluster.

        Optional. The labels to associate with this cluster. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.

        :return: The labels of this Cluster.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Cluster.

        Optional. The labels to associate with this cluster. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.

        :param labels: The labels of this Cluster.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def metrics(self):
        """Gets the metrics of this Cluster.


        :return: The metrics of this Cluster.
        :rtype: ClusterMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this Cluster.


        :param metrics: The metrics of this Cluster.
        :type metrics: ClusterMetrics
        """

        self._metrics = metrics

    @property
    def project_id(self):
        """Gets the project_id of this Cluster.

        Required. The Google Cloud Platform project ID that the cluster belongs to.

        :return: The project_id of this Cluster.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Cluster.

        Required. The Google Cloud Platform project ID that the cluster belongs to.

        :param project_id: The project_id of this Cluster.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def status(self):
        """Gets the status of this Cluster.


        :return: The status of this Cluster.
        :rtype: ClusterStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Cluster.


        :param status: The status of this Cluster.
        :type status: ClusterStatus
        """

        self._status = status

    @property
    def status_history(self):
        """Gets the status_history of this Cluster.

        Output only. The previous cluster status.

        :return: The status_history of this Cluster.
        :rtype: List[ClusterStatus]
        """
        return self._status_history

    @status_history.setter
    def status_history(self, status_history):
        """Sets the status_history of this Cluster.

        Output only. The previous cluster status.

        :param status_history: The status_history of this Cluster.
        :type status_history: List[ClusterStatus]
        """

        self._status_history = status_history

    @property
    def virtual_cluster_config(self):
        """Gets the virtual_cluster_config of this Cluster.


        :return: The virtual_cluster_config of this Cluster.
        :rtype: VirtualClusterConfig
        """
        return self._virtual_cluster_config

    @virtual_cluster_config.setter
    def virtual_cluster_config(self, virtual_cluster_config):
        """Sets the virtual_cluster_config of this Cluster.


        :param virtual_cluster_config: The virtual_cluster_config of this Cluster.
        :type virtual_cluster_config: VirtualClusterConfig
        """

        self._virtual_cluster_config = virtual_cluster_config
