# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gke_cluster_config import GkeClusterConfig
from openapi_server.models.kubernetes_software_config import KubernetesSoftwareConfig
from openapi_server import util


class KubernetesClusterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gke_cluster_config: GkeClusterConfig=None, kubernetes_namespace: str=None, kubernetes_software_config: KubernetesSoftwareConfig=None):
        """KubernetesClusterConfig - a model defined in OpenAPI

        :param gke_cluster_config: The gke_cluster_config of this KubernetesClusterConfig.
        :param kubernetes_namespace: The kubernetes_namespace of this KubernetesClusterConfig.
        :param kubernetes_software_config: The kubernetes_software_config of this KubernetesClusterConfig.
        """
        self.openapi_types = {
            'gke_cluster_config': GkeClusterConfig,
            'kubernetes_namespace': str,
            'kubernetes_software_config': KubernetesSoftwareConfig
        }

        self.attribute_map = {
            'gke_cluster_config': 'gkeClusterConfig',
            'kubernetes_namespace': 'kubernetesNamespace',
            'kubernetes_software_config': 'kubernetesSoftwareConfig'
        }

        self._gke_cluster_config = gke_cluster_config
        self._kubernetes_namespace = kubernetes_namespace
        self._kubernetes_software_config = kubernetes_software_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KubernetesClusterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KubernetesClusterConfig of this KubernetesClusterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gke_cluster_config(self):
        """Gets the gke_cluster_config of this KubernetesClusterConfig.


        :return: The gke_cluster_config of this KubernetesClusterConfig.
        :rtype: GkeClusterConfig
        """
        return self._gke_cluster_config

    @gke_cluster_config.setter
    def gke_cluster_config(self, gke_cluster_config):
        """Sets the gke_cluster_config of this KubernetesClusterConfig.


        :param gke_cluster_config: The gke_cluster_config of this KubernetesClusterConfig.
        :type gke_cluster_config: GkeClusterConfig
        """

        self._gke_cluster_config = gke_cluster_config

    @property
    def kubernetes_namespace(self):
        """Gets the kubernetes_namespace of this KubernetesClusterConfig.

        Optional. A namespace within the Kubernetes cluster to deploy into. If this namespace does not exist, it is created. If it exists, Dataproc verifies that another Dataproc VirtualCluster is not installed into it. If not specified, the name of the Dataproc Cluster is used.

        :return: The kubernetes_namespace of this KubernetesClusterConfig.
        :rtype: str
        """
        return self._kubernetes_namespace

    @kubernetes_namespace.setter
    def kubernetes_namespace(self, kubernetes_namespace):
        """Sets the kubernetes_namespace of this KubernetesClusterConfig.

        Optional. A namespace within the Kubernetes cluster to deploy into. If this namespace does not exist, it is created. If it exists, Dataproc verifies that another Dataproc VirtualCluster is not installed into it. If not specified, the name of the Dataproc Cluster is used.

        :param kubernetes_namespace: The kubernetes_namespace of this KubernetesClusterConfig.
        :type kubernetes_namespace: str
        """

        self._kubernetes_namespace = kubernetes_namespace

    @property
    def kubernetes_software_config(self):
        """Gets the kubernetes_software_config of this KubernetesClusterConfig.


        :return: The kubernetes_software_config of this KubernetesClusterConfig.
        :rtype: KubernetesSoftwareConfig
        """
        return self._kubernetes_software_config

    @kubernetes_software_config.setter
    def kubernetes_software_config(self, kubernetes_software_config):
        """Sets the kubernetes_software_config of this KubernetesClusterConfig.


        :param kubernetes_software_config: The kubernetes_software_config of this KubernetesClusterConfig.
        :type kubernetes_software_config: KubernetesSoftwareConfig
        """

        self._kubernetes_software_config = kubernetes_software_config
