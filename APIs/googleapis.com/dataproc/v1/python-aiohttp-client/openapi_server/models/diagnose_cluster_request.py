# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interval import Interval
from openapi_server import util


class DiagnoseClusterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, diagnosis_interval: Interval=None, job: str=None, jobs: List[str]=None, tarball_access: str=None, tarball_gcs_dir: str=None, yarn_application_id: str=None, yarn_application_ids: List[str]=None):
        """DiagnoseClusterRequest - a model defined in OpenAPI

        :param diagnosis_interval: The diagnosis_interval of this DiagnoseClusterRequest.
        :param job: The job of this DiagnoseClusterRequest.
        :param jobs: The jobs of this DiagnoseClusterRequest.
        :param tarball_access: The tarball_access of this DiagnoseClusterRequest.
        :param tarball_gcs_dir: The tarball_gcs_dir of this DiagnoseClusterRequest.
        :param yarn_application_id: The yarn_application_id of this DiagnoseClusterRequest.
        :param yarn_application_ids: The yarn_application_ids of this DiagnoseClusterRequest.
        """
        self.openapi_types = {
            'diagnosis_interval': Interval,
            'job': str,
            'jobs': List[str],
            'tarball_access': str,
            'tarball_gcs_dir': str,
            'yarn_application_id': str,
            'yarn_application_ids': List[str]
        }

        self.attribute_map = {
            'diagnosis_interval': 'diagnosisInterval',
            'job': 'job',
            'jobs': 'jobs',
            'tarball_access': 'tarballAccess',
            'tarball_gcs_dir': 'tarballGcsDir',
            'yarn_application_id': 'yarnApplicationId',
            'yarn_application_ids': 'yarnApplicationIds'
        }

        self._diagnosis_interval = diagnosis_interval
        self._job = job
        self._jobs = jobs
        self._tarball_access = tarball_access
        self._tarball_gcs_dir = tarball_gcs_dir
        self._yarn_application_id = yarn_application_id
        self._yarn_application_ids = yarn_application_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnoseClusterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnoseClusterRequest of this DiagnoseClusterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def diagnosis_interval(self):
        """Gets the diagnosis_interval of this DiagnoseClusterRequest.


        :return: The diagnosis_interval of this DiagnoseClusterRequest.
        :rtype: Interval
        """
        return self._diagnosis_interval

    @diagnosis_interval.setter
    def diagnosis_interval(self, diagnosis_interval):
        """Sets the diagnosis_interval of this DiagnoseClusterRequest.


        :param diagnosis_interval: The diagnosis_interval of this DiagnoseClusterRequest.
        :type diagnosis_interval: Interval
        """

        self._diagnosis_interval = diagnosis_interval

    @property
    def job(self):
        """Gets the job of this DiagnoseClusterRequest.

        Optional. DEPRECATED Specifies the job on which diagnosis is to be performed. Format: projects/{project}/regions/{region}/jobs/{job}

        :return: The job of this DiagnoseClusterRequest.
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this DiagnoseClusterRequest.

        Optional. DEPRECATED Specifies the job on which diagnosis is to be performed. Format: projects/{project}/regions/{region}/jobs/{job}

        :param job: The job of this DiagnoseClusterRequest.
        :type job: str
        """

        self._job = job

    @property
    def jobs(self):
        """Gets the jobs of this DiagnoseClusterRequest.

        Optional. Specifies a list of jobs on which diagnosis is to be performed. Format: projects/{project}/regions/{region}/jobs/{job}

        :return: The jobs of this DiagnoseClusterRequest.
        :rtype: List[str]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this DiagnoseClusterRequest.

        Optional. Specifies a list of jobs on which diagnosis is to be performed. Format: projects/{project}/regions/{region}/jobs/{job}

        :param jobs: The jobs of this DiagnoseClusterRequest.
        :type jobs: List[str]
        """

        self._jobs = jobs

    @property
    def tarball_access(self):
        """Gets the tarball_access of this DiagnoseClusterRequest.

        Optional. (Optional) The access type to the diagnostic tarball. If not specified, falls back to default access of the bucket

        :return: The tarball_access of this DiagnoseClusterRequest.
        :rtype: str
        """
        return self._tarball_access

    @tarball_access.setter
    def tarball_access(self, tarball_access):
        """Sets the tarball_access of this DiagnoseClusterRequest.

        Optional. (Optional) The access type to the diagnostic tarball. If not specified, falls back to default access of the bucket

        :param tarball_access: The tarball_access of this DiagnoseClusterRequest.
        :type tarball_access: str
        """
        allowed_values = ["TARBALL_ACCESS_UNSPECIFIED", "GOOGLE_CLOUD_SUPPORT", "GOOGLE_DATAPROC_DIAGNOSE"]  # noqa: E501
        if tarball_access not in allowed_values:
            raise ValueError(
                "Invalid value for `tarball_access` ({0}), must be one of {1}"
                .format(tarball_access, allowed_values)
            )

        self._tarball_access = tarball_access

    @property
    def tarball_gcs_dir(self):
        """Gets the tarball_gcs_dir of this DiagnoseClusterRequest.

        Optional. (Optional) The output Cloud Storage directory for the diagnostic tarball. If not specified, a task-specific directory in the cluster's staging bucket will be used.

        :return: The tarball_gcs_dir of this DiagnoseClusterRequest.
        :rtype: str
        """
        return self._tarball_gcs_dir

    @tarball_gcs_dir.setter
    def tarball_gcs_dir(self, tarball_gcs_dir):
        """Sets the tarball_gcs_dir of this DiagnoseClusterRequest.

        Optional. (Optional) The output Cloud Storage directory for the diagnostic tarball. If not specified, a task-specific directory in the cluster's staging bucket will be used.

        :param tarball_gcs_dir: The tarball_gcs_dir of this DiagnoseClusterRequest.
        :type tarball_gcs_dir: str
        """

        self._tarball_gcs_dir = tarball_gcs_dir

    @property
    def yarn_application_id(self):
        """Gets the yarn_application_id of this DiagnoseClusterRequest.

        Optional. DEPRECATED Specifies the yarn application on which diagnosis is to be performed.

        :return: The yarn_application_id of this DiagnoseClusterRequest.
        :rtype: str
        """
        return self._yarn_application_id

    @yarn_application_id.setter
    def yarn_application_id(self, yarn_application_id):
        """Sets the yarn_application_id of this DiagnoseClusterRequest.

        Optional. DEPRECATED Specifies the yarn application on which diagnosis is to be performed.

        :param yarn_application_id: The yarn_application_id of this DiagnoseClusterRequest.
        :type yarn_application_id: str
        """

        self._yarn_application_id = yarn_application_id

    @property
    def yarn_application_ids(self):
        """Gets the yarn_application_ids of this DiagnoseClusterRequest.

        Optional. Specifies a list of yarn applications on which diagnosis is to be performed.

        :return: The yarn_application_ids of this DiagnoseClusterRequest.
        :rtype: List[str]
        """
        return self._yarn_application_ids

    @yarn_application_ids.setter
    def yarn_application_ids(self, yarn_application_ids):
        """Sets the yarn_application_ids of this DiagnoseClusterRequest.

        Optional. Specifies a list of yarn applications on which diagnosis is to be performed.

        :param yarn_application_ids: The yarn_application_ids of this DiagnoseClusterRequest.
        :type yarn_application_ids: List[str]
        """

        self._yarn_application_ids = yarn_application_ids
