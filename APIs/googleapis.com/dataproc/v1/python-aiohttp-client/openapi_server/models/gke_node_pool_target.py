# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gke_node_pool_config import GkeNodePoolConfig
from openapi_server import util


class GkeNodePoolTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_pool: str=None, node_pool_config: GkeNodePoolConfig=None, roles: List[str]=None):
        """GkeNodePoolTarget - a model defined in OpenAPI

        :param node_pool: The node_pool of this GkeNodePoolTarget.
        :param node_pool_config: The node_pool_config of this GkeNodePoolTarget.
        :param roles: The roles of this GkeNodePoolTarget.
        """
        self.openapi_types = {
            'node_pool': str,
            'node_pool_config': GkeNodePoolConfig,
            'roles': List[str]
        }

        self.attribute_map = {
            'node_pool': 'nodePool',
            'node_pool_config': 'nodePoolConfig',
            'roles': 'roles'
        }

        self._node_pool = node_pool
        self._node_pool_config = node_pool_config
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GkeNodePoolTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GkeNodePoolTarget of this GkeNodePoolTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_pool(self):
        """Gets the node_pool of this GkeNodePoolTarget.

        Required. The target GKE node pool. Format: 'projects/{project}/locations/{location}/clusters/{cluster}/nodePools/{node_pool}'

        :return: The node_pool of this GkeNodePoolTarget.
        :rtype: str
        """
        return self._node_pool

    @node_pool.setter
    def node_pool(self, node_pool):
        """Sets the node_pool of this GkeNodePoolTarget.

        Required. The target GKE node pool. Format: 'projects/{project}/locations/{location}/clusters/{cluster}/nodePools/{node_pool}'

        :param node_pool: The node_pool of this GkeNodePoolTarget.
        :type node_pool: str
        """

        self._node_pool = node_pool

    @property
    def node_pool_config(self):
        """Gets the node_pool_config of this GkeNodePoolTarget.


        :return: The node_pool_config of this GkeNodePoolTarget.
        :rtype: GkeNodePoolConfig
        """
        return self._node_pool_config

    @node_pool_config.setter
    def node_pool_config(self, node_pool_config):
        """Sets the node_pool_config of this GkeNodePoolTarget.


        :param node_pool_config: The node_pool_config of this GkeNodePoolTarget.
        :type node_pool_config: GkeNodePoolConfig
        """

        self._node_pool_config = node_pool_config

    @property
    def roles(self):
        """Gets the roles of this GkeNodePoolTarget.

        Required. The roles associated with the GKE node pool.

        :return: The roles of this GkeNodePoolTarget.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this GkeNodePoolTarget.

        Required. The roles associated with the GKE node pool.

        :param roles: The roles of this GkeNodePoolTarget.
        :type roles: List[str]
        """
        allowed_values = ["ROLE_UNSPECIFIED", "DEFAULT", "CONTROLLER", "SPARK_DRIVER", "SPARK_EXECUTOR"]  # noqa: E501
        if not set(roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles
