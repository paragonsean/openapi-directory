# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NamespacedGkeDeploymentTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_namespace: str=None, target_gke_cluster: str=None):
        """NamespacedGkeDeploymentTarget - a model defined in OpenAPI

        :param cluster_namespace: The cluster_namespace of this NamespacedGkeDeploymentTarget.
        :param target_gke_cluster: The target_gke_cluster of this NamespacedGkeDeploymentTarget.
        """
        self.openapi_types = {
            'cluster_namespace': str,
            'target_gke_cluster': str
        }

        self.attribute_map = {
            'cluster_namespace': 'clusterNamespace',
            'target_gke_cluster': 'targetGkeCluster'
        }

        self._cluster_namespace = cluster_namespace
        self._target_gke_cluster = target_gke_cluster

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NamespacedGkeDeploymentTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NamespacedGkeDeploymentTarget of this NamespacedGkeDeploymentTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_namespace(self):
        """Gets the cluster_namespace of this NamespacedGkeDeploymentTarget.

        Optional. A namespace within the GKE cluster to deploy into.

        :return: The cluster_namespace of this NamespacedGkeDeploymentTarget.
        :rtype: str
        """
        return self._cluster_namespace

    @cluster_namespace.setter
    def cluster_namespace(self, cluster_namespace):
        """Sets the cluster_namespace of this NamespacedGkeDeploymentTarget.

        Optional. A namespace within the GKE cluster to deploy into.

        :param cluster_namespace: The cluster_namespace of this NamespacedGkeDeploymentTarget.
        :type cluster_namespace: str
        """

        self._cluster_namespace = cluster_namespace

    @property
    def target_gke_cluster(self):
        """Gets the target_gke_cluster of this NamespacedGkeDeploymentTarget.

        Optional. The target GKE cluster to deploy to. Format: 'projects/{project}/locations/{location}/clusters/{cluster_id}'

        :return: The target_gke_cluster of this NamespacedGkeDeploymentTarget.
        :rtype: str
        """
        return self._target_gke_cluster

    @target_gke_cluster.setter
    def target_gke_cluster(self, target_gke_cluster):
        """Sets the target_gke_cluster of this NamespacedGkeDeploymentTarget.

        Optional. The target GKE cluster to deploy to. Format: 'projects/{project}/locations/{location}/clusters/{cluster_id}'

        :param target_gke_cluster: The target_gke_cluster of this NamespacedGkeDeploymentTarget.
        :type target_gke_cluster: str
        """

        self._target_gke_cluster = target_gke_cluster
