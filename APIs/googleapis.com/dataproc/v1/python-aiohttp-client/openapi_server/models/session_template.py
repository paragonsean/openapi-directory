# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_config import EnvironmentConfig
from openapi_server.models.jupyter_config import JupyterConfig
from openapi_server.models.runtime_config import RuntimeConfig
from openapi_server import util


class SessionTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, creator: str=None, description: str=None, environment_config: EnvironmentConfig=None, jupyter_session: JupyterConfig=None, labels: Dict[str, str]=None, name: str=None, runtime_config: RuntimeConfig=None, update_time: str=None, uuid: str=None):
        """SessionTemplate - a model defined in OpenAPI

        :param create_time: The create_time of this SessionTemplate.
        :param creator: The creator of this SessionTemplate.
        :param description: The description of this SessionTemplate.
        :param environment_config: The environment_config of this SessionTemplate.
        :param jupyter_session: The jupyter_session of this SessionTemplate.
        :param labels: The labels of this SessionTemplate.
        :param name: The name of this SessionTemplate.
        :param runtime_config: The runtime_config of this SessionTemplate.
        :param update_time: The update_time of this SessionTemplate.
        :param uuid: The uuid of this SessionTemplate.
        """
        self.openapi_types = {
            'create_time': str,
            'creator': str,
            'description': str,
            'environment_config': EnvironmentConfig,
            'jupyter_session': JupyterConfig,
            'labels': Dict[str, str],
            'name': str,
            'runtime_config': RuntimeConfig,
            'update_time': str,
            'uuid': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'creator': 'creator',
            'description': 'description',
            'environment_config': 'environmentConfig',
            'jupyter_session': 'jupyterSession',
            'labels': 'labels',
            'name': 'name',
            'runtime_config': 'runtimeConfig',
            'update_time': 'updateTime',
            'uuid': 'uuid'
        }

        self._create_time = create_time
        self._creator = creator
        self._description = description
        self._environment_config = environment_config
        self._jupyter_session = jupyter_session
        self._labels = labels
        self._name = name
        self._runtime_config = runtime_config
        self._update_time = update_time
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionTemplate of this SessionTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this SessionTemplate.

        Output only. The time when the template was created.

        :return: The create_time of this SessionTemplate.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this SessionTemplate.

        Output only. The time when the template was created.

        :param create_time: The create_time of this SessionTemplate.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def creator(self):
        """Gets the creator of this SessionTemplate.

        Output only. The email address of the user who created the template.

        :return: The creator of this SessionTemplate.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this SessionTemplate.

        Output only. The email address of the user who created the template.

        :param creator: The creator of this SessionTemplate.
        :type creator: str
        """

        self._creator = creator

    @property
    def description(self):
        """Gets the description of this SessionTemplate.

        Optional. Brief description of the template.

        :return: The description of this SessionTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SessionTemplate.

        Optional. Brief description of the template.

        :param description: The description of this SessionTemplate.
        :type description: str
        """

        self._description = description

    @property
    def environment_config(self):
        """Gets the environment_config of this SessionTemplate.


        :return: The environment_config of this SessionTemplate.
        :rtype: EnvironmentConfig
        """
        return self._environment_config

    @environment_config.setter
    def environment_config(self, environment_config):
        """Sets the environment_config of this SessionTemplate.


        :param environment_config: The environment_config of this SessionTemplate.
        :type environment_config: EnvironmentConfig
        """

        self._environment_config = environment_config

    @property
    def jupyter_session(self):
        """Gets the jupyter_session of this SessionTemplate.


        :return: The jupyter_session of this SessionTemplate.
        :rtype: JupyterConfig
        """
        return self._jupyter_session

    @jupyter_session.setter
    def jupyter_session(self, jupyter_session):
        """Sets the jupyter_session of this SessionTemplate.


        :param jupyter_session: The jupyter_session of this SessionTemplate.
        :type jupyter_session: JupyterConfig
        """

        self._jupyter_session = jupyter_session

    @property
    def labels(self):
        """Gets the labels of this SessionTemplate.

        Optional. Labels to associate with sessions created using this template. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values can be empty, but, if present, must contain 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.

        :return: The labels of this SessionTemplate.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this SessionTemplate.

        Optional. Labels to associate with sessions created using this template. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values can be empty, but, if present, must contain 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.

        :param labels: The labels of this SessionTemplate.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this SessionTemplate.

        Required. The resource name of the session template.

        :return: The name of this SessionTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SessionTemplate.

        Required. The resource name of the session template.

        :param name: The name of this SessionTemplate.
        :type name: str
        """

        self._name = name

    @property
    def runtime_config(self):
        """Gets the runtime_config of this SessionTemplate.


        :return: The runtime_config of this SessionTemplate.
        :rtype: RuntimeConfig
        """
        return self._runtime_config

    @runtime_config.setter
    def runtime_config(self, runtime_config):
        """Sets the runtime_config of this SessionTemplate.


        :param runtime_config: The runtime_config of this SessionTemplate.
        :type runtime_config: RuntimeConfig
        """

        self._runtime_config = runtime_config

    @property
    def update_time(self):
        """Gets the update_time of this SessionTemplate.

        Output only. The time the template was last updated.

        :return: The update_time of this SessionTemplate.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this SessionTemplate.

        Output only. The time the template was last updated.

        :param update_time: The update_time of this SessionTemplate.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def uuid(self):
        """Gets the uuid of this SessionTemplate.

        Output only. A session template UUID (Unique Universal Identifier). The service generates this value when it creates the session template.

        :return: The uuid of this SessionTemplate.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SessionTemplate.

        Output only. A session template UUID (Unique Universal Identifier). The service generates this value when it creates the session template.

        :param uuid: The uuid of this SessionTemplate.
        :type uuid: str
        """

        self._uuid = uuid
