# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StateHistory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state: str=None, state_message: str=None, state_start_time: str=None):
        """StateHistory - a model defined in OpenAPI

        :param state: The state of this StateHistory.
        :param state_message: The state_message of this StateHistory.
        :param state_start_time: The state_start_time of this StateHistory.
        """
        self.openapi_types = {
            'state': str,
            'state_message': str,
            'state_start_time': str
        }

        self.attribute_map = {
            'state': 'state',
            'state_message': 'stateMessage',
            'state_start_time': 'stateStartTime'
        }

        self._state = state
        self._state_message = state_message
        self._state_start_time = state_start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StateHistory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StateHistory of this StateHistory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state(self):
        """Gets the state of this StateHistory.

        Output only. The state of the batch at this point in history.

        :return: The state of this StateHistory.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StateHistory.

        Output only. The state of the batch at this point in history.

        :param state: The state of this StateHistory.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "RUNNING", "CANCELLING", "CANCELLED", "SUCCEEDED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_message(self):
        """Gets the state_message of this StateHistory.

        Output only. Details about the state at this point in history.

        :return: The state_message of this StateHistory.
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """Sets the state_message of this StateHistory.

        Output only. Details about the state at this point in history.

        :param state_message: The state_message of this StateHistory.
        :type state_message: str
        """

        self._state_message = state_message

    @property
    def state_start_time(self):
        """Gets the state_start_time of this StateHistory.

        Output only. The time when the batch entered the historical state.

        :return: The state_start_time of this StateHistory.
        :rtype: str
        """
        return self._state_start_time

    @state_start_time.setter
    def state_start_time(self, state_start_time):
        """Sets the state_start_time of this StateHistory.

        Output only. The time when the batch entered the historical state.

        :param state_start_time: The state_start_time of this StateHistory.
        :type state_start_time: str
        """

        self._state_start_time = state_start_time
