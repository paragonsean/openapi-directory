# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodePool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, instance_names: List[str]=None, repair_action: str=None):
        """NodePool - a model defined in OpenAPI

        :param id: The id of this NodePool.
        :param instance_names: The instance_names of this NodePool.
        :param repair_action: The repair_action of this NodePool.
        """
        self.openapi_types = {
            'id': str,
            'instance_names': List[str],
            'repair_action': str
        }

        self.attribute_map = {
            'id': 'id',
            'instance_names': 'instanceNames',
            'repair_action': 'repairAction'
        }

        self._id = id
        self._instance_names = instance_names
        self._repair_action = repair_action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodePool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodePool of this NodePool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NodePool.

        Required. A unique id of the node pool. Primary and Secondary workers can be specified using special reserved ids PRIMARY_WORKER_POOL and SECONDARY_WORKER_POOL respectively. Aux node pools can be referenced using corresponding pool id.

        :return: The id of this NodePool.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodePool.

        Required. A unique id of the node pool. Primary and Secondary workers can be specified using special reserved ids PRIMARY_WORKER_POOL and SECONDARY_WORKER_POOL respectively. Aux node pools can be referenced using corresponding pool id.

        :param id: The id of this NodePool.
        :type id: str
        """

        self._id = id

    @property
    def instance_names(self):
        """Gets the instance_names of this NodePool.

        Name of instances to be repaired. These instances must belong to specified node pool.

        :return: The instance_names of this NodePool.
        :rtype: List[str]
        """
        return self._instance_names

    @instance_names.setter
    def instance_names(self, instance_names):
        """Sets the instance_names of this NodePool.

        Name of instances to be repaired. These instances must belong to specified node pool.

        :param instance_names: The instance_names of this NodePool.
        :type instance_names: List[str]
        """

        self._instance_names = instance_names

    @property
    def repair_action(self):
        """Gets the repair_action of this NodePool.

        Required. Repair action to take on specified resources of the node pool.

        :return: The repair_action of this NodePool.
        :rtype: str
        """
        return self._repair_action

    @repair_action.setter
    def repair_action(self, repair_action):
        """Sets the repair_action of this NodePool.

        Required. Repair action to take on specified resources of the node pool.

        :param repair_action: The repair_action of this NodePool.
        :type repair_action: str
        """
        allowed_values = ["REPAIR_ACTION_UNSPECIFIED", "DELETE"]  # noqa: E501
        if repair_action not in allowed_values:
            raise ValueError(
                "Invalid value for `repair_action` ({0}), must be one of {1}"
                .format(repair_action, allowed_values)
            )

        self._repair_action = repair_action
