# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_selector import ClusterSelector
from openapi_server.models.managed_cluster import ManagedCluster
from openapi_server import util


class WorkflowTemplatePlacement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_selector: ClusterSelector=None, managed_cluster: ManagedCluster=None):
        """WorkflowTemplatePlacement - a model defined in OpenAPI

        :param cluster_selector: The cluster_selector of this WorkflowTemplatePlacement.
        :param managed_cluster: The managed_cluster of this WorkflowTemplatePlacement.
        """
        self.openapi_types = {
            'cluster_selector': ClusterSelector,
            'managed_cluster': ManagedCluster
        }

        self.attribute_map = {
            'cluster_selector': 'clusterSelector',
            'managed_cluster': 'managedCluster'
        }

        self._cluster_selector = cluster_selector
        self._managed_cluster = managed_cluster

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowTemplatePlacement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowTemplatePlacement of this WorkflowTemplatePlacement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_selector(self):
        """Gets the cluster_selector of this WorkflowTemplatePlacement.


        :return: The cluster_selector of this WorkflowTemplatePlacement.
        :rtype: ClusterSelector
        """
        return self._cluster_selector

    @cluster_selector.setter
    def cluster_selector(self, cluster_selector):
        """Sets the cluster_selector of this WorkflowTemplatePlacement.


        :param cluster_selector: The cluster_selector of this WorkflowTemplatePlacement.
        :type cluster_selector: ClusterSelector
        """

        self._cluster_selector = cluster_selector

    @property
    def managed_cluster(self):
        """Gets the managed_cluster of this WorkflowTemplatePlacement.


        :return: The managed_cluster of this WorkflowTemplatePlacement.
        :rtype: ManagedCluster
        """
        return self._managed_cluster

    @managed_cluster.setter
    def managed_cluster(self, managed_cluster):
        """Sets the managed_cluster of this WorkflowTemplatePlacement.


        :param managed_cluster: The managed_cluster of this WorkflowTemplatePlacement.
        :type managed_cluster: ManagedCluster
        """

        self._managed_cluster = managed_cluster
