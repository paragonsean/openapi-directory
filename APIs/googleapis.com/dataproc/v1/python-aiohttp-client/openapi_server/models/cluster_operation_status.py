# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterOperationStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: str=None, inner_state: str=None, state: str=None, state_start_time: str=None):
        """ClusterOperationStatus - a model defined in OpenAPI

        :param details: The details of this ClusterOperationStatus.
        :param inner_state: The inner_state of this ClusterOperationStatus.
        :param state: The state of this ClusterOperationStatus.
        :param state_start_time: The state_start_time of this ClusterOperationStatus.
        """
        self.openapi_types = {
            'details': str,
            'inner_state': str,
            'state': str,
            'state_start_time': str
        }

        self.attribute_map = {
            'details': 'details',
            'inner_state': 'innerState',
            'state': 'state',
            'state_start_time': 'stateStartTime'
        }

        self._details = details
        self._inner_state = inner_state
        self._state = state
        self._state_start_time = state_start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterOperationStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterOperationStatus of this ClusterOperationStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this ClusterOperationStatus.

        Output only. A message containing any operation metadata details.

        :return: The details of this ClusterOperationStatus.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ClusterOperationStatus.

        Output only. A message containing any operation metadata details.

        :param details: The details of this ClusterOperationStatus.
        :type details: str
        """

        self._details = details

    @property
    def inner_state(self):
        """Gets the inner_state of this ClusterOperationStatus.

        Output only. A message containing the detailed operation state.

        :return: The inner_state of this ClusterOperationStatus.
        :rtype: str
        """
        return self._inner_state

    @inner_state.setter
    def inner_state(self, inner_state):
        """Sets the inner_state of this ClusterOperationStatus.

        Output only. A message containing the detailed operation state.

        :param inner_state: The inner_state of this ClusterOperationStatus.
        :type inner_state: str
        """

        self._inner_state = inner_state

    @property
    def state(self):
        """Gets the state of this ClusterOperationStatus.

        Output only. A message containing the operation state.

        :return: The state of this ClusterOperationStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClusterOperationStatus.

        Output only. A message containing the operation state.

        :param state: The state of this ClusterOperationStatus.
        :type state: str
        """
        allowed_values = ["UNKNOWN", "PENDING", "RUNNING", "DONE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_start_time(self):
        """Gets the state_start_time of this ClusterOperationStatus.

        Output only. The time this state was entered.

        :return: The state_start_time of this ClusterOperationStatus.
        :rtype: str
        """
        return self._state_start_time

    @state_start_time.setter
    def state_start_time(self, state_start_time):
        """Sets the state_start_time of this ClusterOperationStatus.

        Output only. The time this state was entered.

        :param state_start_time: The state_start_time of this ClusterOperationStatus.
        :type state_start_time: str
        """

        self._state_start_time = state_start_time
