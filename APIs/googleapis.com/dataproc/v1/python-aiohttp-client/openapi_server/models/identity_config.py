# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdentityConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_service_account_mapping: Dict[str, str]=None):
        """IdentityConfig - a model defined in OpenAPI

        :param user_service_account_mapping: The user_service_account_mapping of this IdentityConfig.
        """
        self.openapi_types = {
            'user_service_account_mapping': Dict[str, str]
        }

        self.attribute_map = {
            'user_service_account_mapping': 'userServiceAccountMapping'
        }

        self._user_service_account_mapping = user_service_account_mapping

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentityConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentityConfig of this IdentityConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_service_account_mapping(self):
        """Gets the user_service_account_mapping of this IdentityConfig.

        Required. Map of user to service account.

        :return: The user_service_account_mapping of this IdentityConfig.
        :rtype: Dict[str, str]
        """
        return self._user_service_account_mapping

    @user_service_account_mapping.setter
    def user_service_account_mapping(self, user_service_account_mapping):
        """Sets the user_service_account_mapping of this IdentityConfig.

        Required. Map of user to service account.

        :param user_service_account_mapping: The user_service_account_mapping of this IdentityConfig.
        :type user_service_account_mapping: Dict[str, str]
        """

        self._user_service_account_mapping = user_service_account_mapping
