# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SessionOperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, done_time: str=None, labels: Dict[str, str]=None, operation_type: str=None, session: str=None, session_uuid: str=None, warnings: List[str]=None):
        """SessionOperationMetadata - a model defined in OpenAPI

        :param create_time: The create_time of this SessionOperationMetadata.
        :param description: The description of this SessionOperationMetadata.
        :param done_time: The done_time of this SessionOperationMetadata.
        :param labels: The labels of this SessionOperationMetadata.
        :param operation_type: The operation_type of this SessionOperationMetadata.
        :param session: The session of this SessionOperationMetadata.
        :param session_uuid: The session_uuid of this SessionOperationMetadata.
        :param warnings: The warnings of this SessionOperationMetadata.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'done_time': str,
            'labels': Dict[str, str],
            'operation_type': str,
            'session': str,
            'session_uuid': str,
            'warnings': List[str]
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'done_time': 'doneTime',
            'labels': 'labels',
            'operation_type': 'operationType',
            'session': 'session',
            'session_uuid': 'sessionUuid',
            'warnings': 'warnings'
        }

        self._create_time = create_time
        self._description = description
        self._done_time = done_time
        self._labels = labels
        self._operation_type = operation_type
        self._session = session
        self._session_uuid = session_uuid
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionOperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionOperationMetadata of this SessionOperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this SessionOperationMetadata.

        The time when the operation was created.

        :return: The create_time of this SessionOperationMetadata.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this SessionOperationMetadata.

        The time when the operation was created.

        :param create_time: The create_time of this SessionOperationMetadata.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this SessionOperationMetadata.

        Short description of the operation.

        :return: The description of this SessionOperationMetadata.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SessionOperationMetadata.

        Short description of the operation.

        :param description: The description of this SessionOperationMetadata.
        :type description: str
        """

        self._description = description

    @property
    def done_time(self):
        """Gets the done_time of this SessionOperationMetadata.

        The time when the operation was finished.

        :return: The done_time of this SessionOperationMetadata.
        :rtype: str
        """
        return self._done_time

    @done_time.setter
    def done_time(self, done_time):
        """Sets the done_time of this SessionOperationMetadata.

        The time when the operation was finished.

        :param done_time: The done_time of this SessionOperationMetadata.
        :type done_time: str
        """

        self._done_time = done_time

    @property
    def labels(self):
        """Gets the labels of this SessionOperationMetadata.

        Labels associated with the operation.

        :return: The labels of this SessionOperationMetadata.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this SessionOperationMetadata.

        Labels associated with the operation.

        :param labels: The labels of this SessionOperationMetadata.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def operation_type(self):
        """Gets the operation_type of this SessionOperationMetadata.

        The operation type.

        :return: The operation_type of this SessionOperationMetadata.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this SessionOperationMetadata.

        The operation type.

        :param operation_type: The operation_type of this SessionOperationMetadata.
        :type operation_type: str
        """
        allowed_values = ["SESSION_OPERATION_TYPE_UNSPECIFIED", "CREATE", "TERMINATE", "DELETE"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type

    @property
    def session(self):
        """Gets the session of this SessionOperationMetadata.

        Name of the session for the operation.

        :return: The session of this SessionOperationMetadata.
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this SessionOperationMetadata.

        Name of the session for the operation.

        :param session: The session of this SessionOperationMetadata.
        :type session: str
        """

        self._session = session

    @property
    def session_uuid(self):
        """Gets the session_uuid of this SessionOperationMetadata.

        Session UUID for the operation.

        :return: The session_uuid of this SessionOperationMetadata.
        :rtype: str
        """
        return self._session_uuid

    @session_uuid.setter
    def session_uuid(self, session_uuid):
        """Sets the session_uuid of this SessionOperationMetadata.

        Session UUID for the operation.

        :param session_uuid: The session_uuid of this SessionOperationMetadata.
        :type session_uuid: str
        """

        self._session_uuid = session_uuid

    @property
    def warnings(self):
        """Gets the warnings of this SessionOperationMetadata.

        Warnings encountered during operation execution.

        :return: The warnings of this SessionOperationMetadata.
        :rtype: List[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this SessionOperationMetadata.

        Warnings encountered during operation execution.

        :param warnings: The warnings of this SessionOperationMetadata.
        :type warnings: List[str]
        """

        self._warnings = warnings
