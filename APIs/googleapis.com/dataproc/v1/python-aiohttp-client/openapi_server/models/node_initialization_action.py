# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeInitializationAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, executable_file: str=None, execution_timeout: str=None):
        """NodeInitializationAction - a model defined in OpenAPI

        :param executable_file: The executable_file of this NodeInitializationAction.
        :param execution_timeout: The execution_timeout of this NodeInitializationAction.
        """
        self.openapi_types = {
            'executable_file': str,
            'execution_timeout': str
        }

        self.attribute_map = {
            'executable_file': 'executableFile',
            'execution_timeout': 'executionTimeout'
        }

        self._executable_file = executable_file
        self._execution_timeout = execution_timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeInitializationAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeInitializationAction of this NodeInitializationAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def executable_file(self):
        """Gets the executable_file of this NodeInitializationAction.

        Required. Cloud Storage URI of executable file.

        :return: The executable_file of this NodeInitializationAction.
        :rtype: str
        """
        return self._executable_file

    @executable_file.setter
    def executable_file(self, executable_file):
        """Sets the executable_file of this NodeInitializationAction.

        Required. Cloud Storage URI of executable file.

        :param executable_file: The executable_file of this NodeInitializationAction.
        :type executable_file: str
        """

        self._executable_file = executable_file

    @property
    def execution_timeout(self):
        """Gets the execution_timeout of this NodeInitializationAction.

        Optional. Amount of time executable has to complete. Default is 10 minutes (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period.

        :return: The execution_timeout of this NodeInitializationAction.
        :rtype: str
        """
        return self._execution_timeout

    @execution_timeout.setter
    def execution_timeout(self, execution_timeout):
        """Sets the execution_timeout of this NodeInitializationAction.

        Optional. Amount of time executable has to complete. Default is 10 minutes (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period.

        :param execution_timeout: The execution_timeout of this NodeInitializationAction.
        :type execution_timeout: str
        """

        self._execution_timeout = execution_timeout
