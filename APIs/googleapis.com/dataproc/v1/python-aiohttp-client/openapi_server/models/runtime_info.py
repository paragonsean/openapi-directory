# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usage_metrics import UsageMetrics
from openapi_server.models.usage_snapshot import UsageSnapshot
from openapi_server import util


class RuntimeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approximate_usage: UsageMetrics=None, current_usage: UsageSnapshot=None, diagnostic_output_uri: str=None, endpoints: Dict[str, str]=None, output_uri: str=None):
        """RuntimeInfo - a model defined in OpenAPI

        :param approximate_usage: The approximate_usage of this RuntimeInfo.
        :param current_usage: The current_usage of this RuntimeInfo.
        :param diagnostic_output_uri: The diagnostic_output_uri of this RuntimeInfo.
        :param endpoints: The endpoints of this RuntimeInfo.
        :param output_uri: The output_uri of this RuntimeInfo.
        """
        self.openapi_types = {
            'approximate_usage': UsageMetrics,
            'current_usage': UsageSnapshot,
            'diagnostic_output_uri': str,
            'endpoints': Dict[str, str],
            'output_uri': str
        }

        self.attribute_map = {
            'approximate_usage': 'approximateUsage',
            'current_usage': 'currentUsage',
            'diagnostic_output_uri': 'diagnosticOutputUri',
            'endpoints': 'endpoints',
            'output_uri': 'outputUri'
        }

        self._approximate_usage = approximate_usage
        self._current_usage = current_usage
        self._diagnostic_output_uri = diagnostic_output_uri
        self._endpoints = endpoints
        self._output_uri = output_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuntimeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuntimeInfo of this RuntimeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approximate_usage(self):
        """Gets the approximate_usage of this RuntimeInfo.


        :return: The approximate_usage of this RuntimeInfo.
        :rtype: UsageMetrics
        """
        return self._approximate_usage

    @approximate_usage.setter
    def approximate_usage(self, approximate_usage):
        """Sets the approximate_usage of this RuntimeInfo.


        :param approximate_usage: The approximate_usage of this RuntimeInfo.
        :type approximate_usage: UsageMetrics
        """

        self._approximate_usage = approximate_usage

    @property
    def current_usage(self):
        """Gets the current_usage of this RuntimeInfo.


        :return: The current_usage of this RuntimeInfo.
        :rtype: UsageSnapshot
        """
        return self._current_usage

    @current_usage.setter
    def current_usage(self, current_usage):
        """Sets the current_usage of this RuntimeInfo.


        :param current_usage: The current_usage of this RuntimeInfo.
        :type current_usage: UsageSnapshot
        """

        self._current_usage = current_usage

    @property
    def diagnostic_output_uri(self):
        """Gets the diagnostic_output_uri of this RuntimeInfo.

        Output only. A URI pointing to the location of the diagnostics tarball.

        :return: The diagnostic_output_uri of this RuntimeInfo.
        :rtype: str
        """
        return self._diagnostic_output_uri

    @diagnostic_output_uri.setter
    def diagnostic_output_uri(self, diagnostic_output_uri):
        """Sets the diagnostic_output_uri of this RuntimeInfo.

        Output only. A URI pointing to the location of the diagnostics tarball.

        :param diagnostic_output_uri: The diagnostic_output_uri of this RuntimeInfo.
        :type diagnostic_output_uri: str
        """

        self._diagnostic_output_uri = diagnostic_output_uri

    @property
    def endpoints(self):
        """Gets the endpoints of this RuntimeInfo.

        Output only. Map of remote access endpoints (such as web interfaces and APIs) to their URIs.

        :return: The endpoints of this RuntimeInfo.
        :rtype: Dict[str, str]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this RuntimeInfo.

        Output only. Map of remote access endpoints (such as web interfaces and APIs) to their URIs.

        :param endpoints: The endpoints of this RuntimeInfo.
        :type endpoints: Dict[str, str]
        """

        self._endpoints = endpoints

    @property
    def output_uri(self):
        """Gets the output_uri of this RuntimeInfo.

        Output only. A URI pointing to the location of the stdout and stderr of the workload.

        :return: The output_uri of this RuntimeInfo.
        :rtype: str
        """
        return self._output_uri

    @output_uri.setter
    def output_uri(self, output_uri):
        """Sets the output_uri of this RuntimeInfo.

        Output only. A URI pointing to the location of the stdout and stderr of the workload.

        :param output_uri: The output_uri of this RuntimeInfo.
        :type output_uri: str
        """

        self._output_uri = output_uri
