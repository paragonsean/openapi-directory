# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JupyterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, kernel: str=None):
        """JupyterConfig - a model defined in OpenAPI

        :param display_name: The display_name of this JupyterConfig.
        :param kernel: The kernel of this JupyterConfig.
        """
        self.openapi_types = {
            'display_name': str,
            'kernel': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'kernel': 'kernel'
        }

        self._display_name = display_name
        self._kernel = kernel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JupyterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JupyterConfig of this JupyterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this JupyterConfig.

        Optional. Display name, shown in the Jupyter kernelspec card.

        :return: The display_name of this JupyterConfig.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this JupyterConfig.

        Optional. Display name, shown in the Jupyter kernelspec card.

        :param display_name: The display_name of this JupyterConfig.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def kernel(self):
        """Gets the kernel of this JupyterConfig.

        Optional. Kernel

        :return: The kernel of this JupyterConfig.
        :rtype: str
        """
        return self._kernel

    @kernel.setter
    def kernel(self, kernel):
        """Sets the kernel of this JupyterConfig.

        Optional. Kernel

        :param kernel: The kernel of this JupyterConfig.
        :type kernel: str
        """
        allowed_values = ["KERNEL_UNSPECIFIED", "PYTHON", "SCALA"]  # noqa: E501
        if kernel not in allowed_values:
            raise ValueError(
                "Invalid value for `kernel` ({0}), must be one of {1}"
                .format(kernel, allowed_values)
            )

        self._kernel = kernel
