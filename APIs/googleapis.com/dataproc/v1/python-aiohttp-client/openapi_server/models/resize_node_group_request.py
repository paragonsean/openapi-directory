# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResizeNodeGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, graceful_decommission_timeout: str=None, parent_operation_id: str=None, request_id: str=None, size: int=None):
        """ResizeNodeGroupRequest - a model defined in OpenAPI

        :param graceful_decommission_timeout: The graceful_decommission_timeout of this ResizeNodeGroupRequest.
        :param parent_operation_id: The parent_operation_id of this ResizeNodeGroupRequest.
        :param request_id: The request_id of this ResizeNodeGroupRequest.
        :param size: The size of this ResizeNodeGroupRequest.
        """
        self.openapi_types = {
            'graceful_decommission_timeout': str,
            'parent_operation_id': str,
            'request_id': str,
            'size': int
        }

        self.attribute_map = {
            'graceful_decommission_timeout': 'gracefulDecommissionTimeout',
            'parent_operation_id': 'parentOperationId',
            'request_id': 'requestId',
            'size': 'size'
        }

        self._graceful_decommission_timeout = graceful_decommission_timeout
        self._parent_operation_id = parent_operation_id
        self._request_id = request_id
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResizeNodeGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResizeNodeGroupRequest of this ResizeNodeGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def graceful_decommission_timeout(self):
        """Gets the graceful_decommission_timeout of this ResizeNodeGroupRequest.

        Optional. Timeout for graceful YARN decommissioning. Graceful decommissioning (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/scaling-clusters#graceful_decommissioning) allows the removal of nodes from the Compute Engine node group without interrupting jobs in progress. This timeout specifies how long to wait for jobs in progress to finish before forcefully removing nodes (and potentially interrupting jobs). Default timeout is 0 (for forceful decommission), and the maximum allowed timeout is 1 day. (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).Only supported on Dataproc image versions 1.2 and higher.

        :return: The graceful_decommission_timeout of this ResizeNodeGroupRequest.
        :rtype: str
        """
        return self._graceful_decommission_timeout

    @graceful_decommission_timeout.setter
    def graceful_decommission_timeout(self, graceful_decommission_timeout):
        """Sets the graceful_decommission_timeout of this ResizeNodeGroupRequest.

        Optional. Timeout for graceful YARN decommissioning. Graceful decommissioning (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/scaling-clusters#graceful_decommissioning) allows the removal of nodes from the Compute Engine node group without interrupting jobs in progress. This timeout specifies how long to wait for jobs in progress to finish before forcefully removing nodes (and potentially interrupting jobs). Default timeout is 0 (for forceful decommission), and the maximum allowed timeout is 1 day. (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).Only supported on Dataproc image versions 1.2 and higher.

        :param graceful_decommission_timeout: The graceful_decommission_timeout of this ResizeNodeGroupRequest.
        :type graceful_decommission_timeout: str
        """

        self._graceful_decommission_timeout = graceful_decommission_timeout

    @property
    def parent_operation_id(self):
        """Gets the parent_operation_id of this ResizeNodeGroupRequest.

        Optional. operation id of the parent operation sending the resize request

        :return: The parent_operation_id of this ResizeNodeGroupRequest.
        :rtype: str
        """
        return self._parent_operation_id

    @parent_operation_id.setter
    def parent_operation_id(self, parent_operation_id):
        """Sets the parent_operation_id of this ResizeNodeGroupRequest.

        Optional. operation id of the parent operation sending the resize request

        :param parent_operation_id: The parent_operation_id of this ResizeNodeGroupRequest.
        :type parent_operation_id: str
        """

        self._parent_operation_id = parent_operation_id

    @property
    def request_id(self):
        """Gets the request_id of this ResizeNodeGroupRequest.

        Optional. A unique ID used to identify the request. If the server receives two ResizeNodeGroupRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.ResizeNodeGroupRequests) with the same ID, the second request is ignored and the first google.longrunning.Operation created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.

        :return: The request_id of this ResizeNodeGroupRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ResizeNodeGroupRequest.

        Optional. A unique ID used to identify the request. If the server receives two ResizeNodeGroupRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.ResizeNodeGroupRequests) with the same ID, the second request is ignored and the first google.longrunning.Operation created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.

        :param request_id: The request_id of this ResizeNodeGroupRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def size(self):
        """Gets the size of this ResizeNodeGroupRequest.

        Required. The number of running instances for the node group to maintain. The group adds or removes instances to maintain the number of instances specified by this parameter.

        :return: The size of this ResizeNodeGroupRequest.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ResizeNodeGroupRequest.

        Required. The number of running instances for the node group to maintain. The group adds or removes instances to maintain the number of instances specified by this parameter.

        :param size: The size of this ResizeNodeGroupRequest.
        :type size: int
        """

        self._size = size
