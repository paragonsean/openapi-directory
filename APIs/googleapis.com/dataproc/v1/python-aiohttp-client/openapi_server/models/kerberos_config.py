# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KerberosConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cross_realm_trust_admin_server: str=None, cross_realm_trust_kdc: str=None, cross_realm_trust_realm: str=None, cross_realm_trust_shared_password_uri: str=None, enable_kerberos: bool=None, kdc_db_key_uri: str=None, key_password_uri: str=None, keystore_password_uri: str=None, keystore_uri: str=None, kms_key_uri: str=None, realm: str=None, root_principal_password_uri: str=None, tgt_lifetime_hours: int=None, truststore_password_uri: str=None, truststore_uri: str=None):
        """KerberosConfig - a model defined in OpenAPI

        :param cross_realm_trust_admin_server: The cross_realm_trust_admin_server of this KerberosConfig.
        :param cross_realm_trust_kdc: The cross_realm_trust_kdc of this KerberosConfig.
        :param cross_realm_trust_realm: The cross_realm_trust_realm of this KerberosConfig.
        :param cross_realm_trust_shared_password_uri: The cross_realm_trust_shared_password_uri of this KerberosConfig.
        :param enable_kerberos: The enable_kerberos of this KerberosConfig.
        :param kdc_db_key_uri: The kdc_db_key_uri of this KerberosConfig.
        :param key_password_uri: The key_password_uri of this KerberosConfig.
        :param keystore_password_uri: The keystore_password_uri of this KerberosConfig.
        :param keystore_uri: The keystore_uri of this KerberosConfig.
        :param kms_key_uri: The kms_key_uri of this KerberosConfig.
        :param realm: The realm of this KerberosConfig.
        :param root_principal_password_uri: The root_principal_password_uri of this KerberosConfig.
        :param tgt_lifetime_hours: The tgt_lifetime_hours of this KerberosConfig.
        :param truststore_password_uri: The truststore_password_uri of this KerberosConfig.
        :param truststore_uri: The truststore_uri of this KerberosConfig.
        """
        self.openapi_types = {
            'cross_realm_trust_admin_server': str,
            'cross_realm_trust_kdc': str,
            'cross_realm_trust_realm': str,
            'cross_realm_trust_shared_password_uri': str,
            'enable_kerberos': bool,
            'kdc_db_key_uri': str,
            'key_password_uri': str,
            'keystore_password_uri': str,
            'keystore_uri': str,
            'kms_key_uri': str,
            'realm': str,
            'root_principal_password_uri': str,
            'tgt_lifetime_hours': int,
            'truststore_password_uri': str,
            'truststore_uri': str
        }

        self.attribute_map = {
            'cross_realm_trust_admin_server': 'crossRealmTrustAdminServer',
            'cross_realm_trust_kdc': 'crossRealmTrustKdc',
            'cross_realm_trust_realm': 'crossRealmTrustRealm',
            'cross_realm_trust_shared_password_uri': 'crossRealmTrustSharedPasswordUri',
            'enable_kerberos': 'enableKerberos',
            'kdc_db_key_uri': 'kdcDbKeyUri',
            'key_password_uri': 'keyPasswordUri',
            'keystore_password_uri': 'keystorePasswordUri',
            'keystore_uri': 'keystoreUri',
            'kms_key_uri': 'kmsKeyUri',
            'realm': 'realm',
            'root_principal_password_uri': 'rootPrincipalPasswordUri',
            'tgt_lifetime_hours': 'tgtLifetimeHours',
            'truststore_password_uri': 'truststorePasswordUri',
            'truststore_uri': 'truststoreUri'
        }

        self._cross_realm_trust_admin_server = cross_realm_trust_admin_server
        self._cross_realm_trust_kdc = cross_realm_trust_kdc
        self._cross_realm_trust_realm = cross_realm_trust_realm
        self._cross_realm_trust_shared_password_uri = cross_realm_trust_shared_password_uri
        self._enable_kerberos = enable_kerberos
        self._kdc_db_key_uri = kdc_db_key_uri
        self._key_password_uri = key_password_uri
        self._keystore_password_uri = keystore_password_uri
        self._keystore_uri = keystore_uri
        self._kms_key_uri = kms_key_uri
        self._realm = realm
        self._root_principal_password_uri = root_principal_password_uri
        self._tgt_lifetime_hours = tgt_lifetime_hours
        self._truststore_password_uri = truststore_password_uri
        self._truststore_uri = truststore_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KerberosConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KerberosConfig of this KerberosConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cross_realm_trust_admin_server(self):
        """Gets the cross_realm_trust_admin_server of this KerberosConfig.

        Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.

        :return: The cross_realm_trust_admin_server of this KerberosConfig.
        :rtype: str
        """
        return self._cross_realm_trust_admin_server

    @cross_realm_trust_admin_server.setter
    def cross_realm_trust_admin_server(self, cross_realm_trust_admin_server):
        """Sets the cross_realm_trust_admin_server of this KerberosConfig.

        Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.

        :param cross_realm_trust_admin_server: The cross_realm_trust_admin_server of this KerberosConfig.
        :type cross_realm_trust_admin_server: str
        """

        self._cross_realm_trust_admin_server = cross_realm_trust_admin_server

    @property
    def cross_realm_trust_kdc(self):
        """Gets the cross_realm_trust_kdc of this KerberosConfig.

        Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.

        :return: The cross_realm_trust_kdc of this KerberosConfig.
        :rtype: str
        """
        return self._cross_realm_trust_kdc

    @cross_realm_trust_kdc.setter
    def cross_realm_trust_kdc(self, cross_realm_trust_kdc):
        """Sets the cross_realm_trust_kdc of this KerberosConfig.

        Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.

        :param cross_realm_trust_kdc: The cross_realm_trust_kdc of this KerberosConfig.
        :type cross_realm_trust_kdc: str
        """

        self._cross_realm_trust_kdc = cross_realm_trust_kdc

    @property
    def cross_realm_trust_realm(self):
        """Gets the cross_realm_trust_realm of this KerberosConfig.

        Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.

        :return: The cross_realm_trust_realm of this KerberosConfig.
        :rtype: str
        """
        return self._cross_realm_trust_realm

    @cross_realm_trust_realm.setter
    def cross_realm_trust_realm(self, cross_realm_trust_realm):
        """Sets the cross_realm_trust_realm of this KerberosConfig.

        Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.

        :param cross_realm_trust_realm: The cross_realm_trust_realm of this KerberosConfig.
        :type cross_realm_trust_realm: str
        """

        self._cross_realm_trust_realm = cross_realm_trust_realm

    @property
    def cross_realm_trust_shared_password_uri(self):
        """Gets the cross_realm_trust_shared_password_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.

        :return: The cross_realm_trust_shared_password_uri of this KerberosConfig.
        :rtype: str
        """
        return self._cross_realm_trust_shared_password_uri

    @cross_realm_trust_shared_password_uri.setter
    def cross_realm_trust_shared_password_uri(self, cross_realm_trust_shared_password_uri):
        """Sets the cross_realm_trust_shared_password_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.

        :param cross_realm_trust_shared_password_uri: The cross_realm_trust_shared_password_uri of this KerberosConfig.
        :type cross_realm_trust_shared_password_uri: str
        """

        self._cross_realm_trust_shared_password_uri = cross_realm_trust_shared_password_uri

    @property
    def enable_kerberos(self):
        """Gets the enable_kerberos of this KerberosConfig.

        Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.

        :return: The enable_kerberos of this KerberosConfig.
        :rtype: bool
        """
        return self._enable_kerberos

    @enable_kerberos.setter
    def enable_kerberos(self, enable_kerberos):
        """Sets the enable_kerberos of this KerberosConfig.

        Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.

        :param enable_kerberos: The enable_kerberos of this KerberosConfig.
        :type enable_kerberos: bool
        """

        self._enable_kerberos = enable_kerberos

    @property
    def kdc_db_key_uri(self):
        """Gets the kdc_db_key_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.

        :return: The kdc_db_key_uri of this KerberosConfig.
        :rtype: str
        """
        return self._kdc_db_key_uri

    @kdc_db_key_uri.setter
    def kdc_db_key_uri(self, kdc_db_key_uri):
        """Sets the kdc_db_key_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.

        :param kdc_db_key_uri: The kdc_db_key_uri of this KerberosConfig.
        :type kdc_db_key_uri: str
        """

        self._kdc_db_key_uri = kdc_db_key_uri

    @property
    def key_password_uri(self):
        """Gets the key_password_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.

        :return: The key_password_uri of this KerberosConfig.
        :rtype: str
        """
        return self._key_password_uri

    @key_password_uri.setter
    def key_password_uri(self, key_password_uri):
        """Sets the key_password_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.

        :param key_password_uri: The key_password_uri of this KerberosConfig.
        :type key_password_uri: str
        """

        self._key_password_uri = key_password_uri

    @property
    def keystore_password_uri(self):
        """Gets the keystore_password_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.

        :return: The keystore_password_uri of this KerberosConfig.
        :rtype: str
        """
        return self._keystore_password_uri

    @keystore_password_uri.setter
    def keystore_password_uri(self, keystore_password_uri):
        """Sets the keystore_password_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.

        :param keystore_password_uri: The keystore_password_uri of this KerberosConfig.
        :type keystore_password_uri: str
        """

        self._keystore_password_uri = keystore_password_uri

    @property
    def keystore_uri(self):
        """Gets the keystore_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.

        :return: The keystore_uri of this KerberosConfig.
        :rtype: str
        """
        return self._keystore_uri

    @keystore_uri.setter
    def keystore_uri(self, keystore_uri):
        """Sets the keystore_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.

        :param keystore_uri: The keystore_uri of this KerberosConfig.
        :type keystore_uri: str
        """

        self._keystore_uri = keystore_uri

    @property
    def kms_key_uri(self):
        """Gets the kms_key_uri of this KerberosConfig.

        Optional. The URI of the KMS key used to encrypt sensitive files.

        :return: The kms_key_uri of this KerberosConfig.
        :rtype: str
        """
        return self._kms_key_uri

    @kms_key_uri.setter
    def kms_key_uri(self, kms_key_uri):
        """Sets the kms_key_uri of this KerberosConfig.

        Optional. The URI of the KMS key used to encrypt sensitive files.

        :param kms_key_uri: The kms_key_uri of this KerberosConfig.
        :type kms_key_uri: str
        """

        self._kms_key_uri = kms_key_uri

    @property
    def realm(self):
        """Gets the realm of this KerberosConfig.

        Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.

        :return: The realm of this KerberosConfig.
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this KerberosConfig.

        Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.

        :param realm: The realm of this KerberosConfig.
        :type realm: str
        """

        self._realm = realm

    @property
    def root_principal_password_uri(self):
        """Gets the root_principal_password_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.

        :return: The root_principal_password_uri of this KerberosConfig.
        :rtype: str
        """
        return self._root_principal_password_uri

    @root_principal_password_uri.setter
    def root_principal_password_uri(self, root_principal_password_uri):
        """Sets the root_principal_password_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.

        :param root_principal_password_uri: The root_principal_password_uri of this KerberosConfig.
        :type root_principal_password_uri: str
        """

        self._root_principal_password_uri = root_principal_password_uri

    @property
    def tgt_lifetime_hours(self):
        """Gets the tgt_lifetime_hours of this KerberosConfig.

        Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.

        :return: The tgt_lifetime_hours of this KerberosConfig.
        :rtype: int
        """
        return self._tgt_lifetime_hours

    @tgt_lifetime_hours.setter
    def tgt_lifetime_hours(self, tgt_lifetime_hours):
        """Sets the tgt_lifetime_hours of this KerberosConfig.

        Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.

        :param tgt_lifetime_hours: The tgt_lifetime_hours of this KerberosConfig.
        :type tgt_lifetime_hours: int
        """

        self._tgt_lifetime_hours = tgt_lifetime_hours

    @property
    def truststore_password_uri(self):
        """Gets the truststore_password_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.

        :return: The truststore_password_uri of this KerberosConfig.
        :rtype: str
        """
        return self._truststore_password_uri

    @truststore_password_uri.setter
    def truststore_password_uri(self, truststore_password_uri):
        """Sets the truststore_password_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.

        :param truststore_password_uri: The truststore_password_uri of this KerberosConfig.
        :type truststore_password_uri: str
        """

        self._truststore_password_uri = truststore_password_uri

    @property
    def truststore_uri(self):
        """Gets the truststore_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.

        :return: The truststore_uri of this KerberosConfig.
        :rtype: str
        """
        return self._truststore_uri

    @truststore_uri.setter
    def truststore_uri(self, truststore_uri):
        """Sets the truststore_uri of this KerberosConfig.

        Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.

        :param truststore_uri: The truststore_uri of this KerberosConfig.
        :type truststore_uri: str
        """

        self._truststore_uri = truststore_uri
