# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.driver_scheduling_config import DriverSchedulingConfig
from openapi_server.models.flink_job import FlinkJob
from openapi_server.models.hadoop_job import HadoopJob
from openapi_server.models.hive_job import HiveJob
from openapi_server.models.job_placement import JobPlacement
from openapi_server.models.job_reference import JobReference
from openapi_server.models.job_scheduling import JobScheduling
from openapi_server.models.job_status import JobStatus
from openapi_server.models.pig_job import PigJob
from openapi_server.models.presto_job import PrestoJob
from openapi_server.models.py_spark_job import PySparkJob
from openapi_server.models.spark_job import SparkJob
from openapi_server.models.spark_r_job import SparkRJob
from openapi_server.models.spark_sql_job import SparkSqlJob
from openapi_server.models.trino_job import TrinoJob
from openapi_server.models.yarn_application import YarnApplication
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, done: bool=None, driver_control_files_uri: str=None, driver_output_resource_uri: str=None, driver_scheduling_config: DriverSchedulingConfig=None, flink_job: FlinkJob=None, hadoop_job: HadoopJob=None, hive_job: HiveJob=None, job_uuid: str=None, labels: Dict[str, str]=None, pig_job: PigJob=None, placement: JobPlacement=None, presto_job: PrestoJob=None, pyspark_job: PySparkJob=None, reference: JobReference=None, scheduling: JobScheduling=None, spark_job: SparkJob=None, spark_r_job: SparkRJob=None, spark_sql_job: SparkSqlJob=None, status: JobStatus=None, status_history: List[JobStatus]=None, trino_job: TrinoJob=None, yarn_applications: List[YarnApplication]=None):
        """Job - a model defined in OpenAPI

        :param done: The done of this Job.
        :param driver_control_files_uri: The driver_control_files_uri of this Job.
        :param driver_output_resource_uri: The driver_output_resource_uri of this Job.
        :param driver_scheduling_config: The driver_scheduling_config of this Job.
        :param flink_job: The flink_job of this Job.
        :param hadoop_job: The hadoop_job of this Job.
        :param hive_job: The hive_job of this Job.
        :param job_uuid: The job_uuid of this Job.
        :param labels: The labels of this Job.
        :param pig_job: The pig_job of this Job.
        :param placement: The placement of this Job.
        :param presto_job: The presto_job of this Job.
        :param pyspark_job: The pyspark_job of this Job.
        :param reference: The reference of this Job.
        :param scheduling: The scheduling of this Job.
        :param spark_job: The spark_job of this Job.
        :param spark_r_job: The spark_r_job of this Job.
        :param spark_sql_job: The spark_sql_job of this Job.
        :param status: The status of this Job.
        :param status_history: The status_history of this Job.
        :param trino_job: The trino_job of this Job.
        :param yarn_applications: The yarn_applications of this Job.
        """
        self.openapi_types = {
            'done': bool,
            'driver_control_files_uri': str,
            'driver_output_resource_uri': str,
            'driver_scheduling_config': DriverSchedulingConfig,
            'flink_job': FlinkJob,
            'hadoop_job': HadoopJob,
            'hive_job': HiveJob,
            'job_uuid': str,
            'labels': Dict[str, str],
            'pig_job': PigJob,
            'placement': JobPlacement,
            'presto_job': PrestoJob,
            'pyspark_job': PySparkJob,
            'reference': JobReference,
            'scheduling': JobScheduling,
            'spark_job': SparkJob,
            'spark_r_job': SparkRJob,
            'spark_sql_job': SparkSqlJob,
            'status': JobStatus,
            'status_history': List[JobStatus],
            'trino_job': TrinoJob,
            'yarn_applications': List[YarnApplication]
        }

        self.attribute_map = {
            'done': 'done',
            'driver_control_files_uri': 'driverControlFilesUri',
            'driver_output_resource_uri': 'driverOutputResourceUri',
            'driver_scheduling_config': 'driverSchedulingConfig',
            'flink_job': 'flinkJob',
            'hadoop_job': 'hadoopJob',
            'hive_job': 'hiveJob',
            'job_uuid': 'jobUuid',
            'labels': 'labels',
            'pig_job': 'pigJob',
            'placement': 'placement',
            'presto_job': 'prestoJob',
            'pyspark_job': 'pysparkJob',
            'reference': 'reference',
            'scheduling': 'scheduling',
            'spark_job': 'sparkJob',
            'spark_r_job': 'sparkRJob',
            'spark_sql_job': 'sparkSqlJob',
            'status': 'status',
            'status_history': 'statusHistory',
            'trino_job': 'trinoJob',
            'yarn_applications': 'yarnApplications'
        }

        self._done = done
        self._driver_control_files_uri = driver_control_files_uri
        self._driver_output_resource_uri = driver_output_resource_uri
        self._driver_scheduling_config = driver_scheduling_config
        self._flink_job = flink_job
        self._hadoop_job = hadoop_job
        self._hive_job = hive_job
        self._job_uuid = job_uuid
        self._labels = labels
        self._pig_job = pig_job
        self._placement = placement
        self._presto_job = presto_job
        self._pyspark_job = pyspark_job
        self._reference = reference
        self._scheduling = scheduling
        self._spark_job = spark_job
        self._spark_r_job = spark_r_job
        self._spark_sql_job = spark_sql_job
        self._status = status
        self._status_history = status_history
        self._trino_job = trino_job
        self._yarn_applications = yarn_applications

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def done(self):
        """Gets the done of this Job.

        Output only. Indicates whether the job is completed. If the value is false, the job is still in progress. If true, the job is completed, and status.state field will indicate if it was successful, failed, or cancelled.

        :return: The done of this Job.
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this Job.

        Output only. Indicates whether the job is completed. If the value is false, the job is still in progress. If true, the job is completed, and status.state field will indicate if it was successful, failed, or cancelled.

        :param done: The done of this Job.
        :type done: bool
        """

        self._done = done

    @property
    def driver_control_files_uri(self):
        """Gets the driver_control_files_uri of this Job.

        Output only. If present, the location of miscellaneous control files which can be used as part of job setup and handling. If not present, control files might be placed in the same location as driver_output_uri.

        :return: The driver_control_files_uri of this Job.
        :rtype: str
        """
        return self._driver_control_files_uri

    @driver_control_files_uri.setter
    def driver_control_files_uri(self, driver_control_files_uri):
        """Sets the driver_control_files_uri of this Job.

        Output only. If present, the location of miscellaneous control files which can be used as part of job setup and handling. If not present, control files might be placed in the same location as driver_output_uri.

        :param driver_control_files_uri: The driver_control_files_uri of this Job.
        :type driver_control_files_uri: str
        """

        self._driver_control_files_uri = driver_control_files_uri

    @property
    def driver_output_resource_uri(self):
        """Gets the driver_output_resource_uri of this Job.

        Output only. A URI pointing to the location of the stdout of the job's driver program.

        :return: The driver_output_resource_uri of this Job.
        :rtype: str
        """
        return self._driver_output_resource_uri

    @driver_output_resource_uri.setter
    def driver_output_resource_uri(self, driver_output_resource_uri):
        """Sets the driver_output_resource_uri of this Job.

        Output only. A URI pointing to the location of the stdout of the job's driver program.

        :param driver_output_resource_uri: The driver_output_resource_uri of this Job.
        :type driver_output_resource_uri: str
        """

        self._driver_output_resource_uri = driver_output_resource_uri

    @property
    def driver_scheduling_config(self):
        """Gets the driver_scheduling_config of this Job.


        :return: The driver_scheduling_config of this Job.
        :rtype: DriverSchedulingConfig
        """
        return self._driver_scheduling_config

    @driver_scheduling_config.setter
    def driver_scheduling_config(self, driver_scheduling_config):
        """Sets the driver_scheduling_config of this Job.


        :param driver_scheduling_config: The driver_scheduling_config of this Job.
        :type driver_scheduling_config: DriverSchedulingConfig
        """

        self._driver_scheduling_config = driver_scheduling_config

    @property
    def flink_job(self):
        """Gets the flink_job of this Job.


        :return: The flink_job of this Job.
        :rtype: FlinkJob
        """
        return self._flink_job

    @flink_job.setter
    def flink_job(self, flink_job):
        """Sets the flink_job of this Job.


        :param flink_job: The flink_job of this Job.
        :type flink_job: FlinkJob
        """

        self._flink_job = flink_job

    @property
    def hadoop_job(self):
        """Gets the hadoop_job of this Job.


        :return: The hadoop_job of this Job.
        :rtype: HadoopJob
        """
        return self._hadoop_job

    @hadoop_job.setter
    def hadoop_job(self, hadoop_job):
        """Sets the hadoop_job of this Job.


        :param hadoop_job: The hadoop_job of this Job.
        :type hadoop_job: HadoopJob
        """

        self._hadoop_job = hadoop_job

    @property
    def hive_job(self):
        """Gets the hive_job of this Job.


        :return: The hive_job of this Job.
        :rtype: HiveJob
        """
        return self._hive_job

    @hive_job.setter
    def hive_job(self, hive_job):
        """Sets the hive_job of this Job.


        :param hive_job: The hive_job of this Job.
        :type hive_job: HiveJob
        """

        self._hive_job = hive_job

    @property
    def job_uuid(self):
        """Gets the job_uuid of this Job.

        Output only. A UUID that uniquely identifies a job within the project over time. This is in contrast to a user-settable reference.job_id that might be reused over time.

        :return: The job_uuid of this Job.
        :rtype: str
        """
        return self._job_uuid

    @job_uuid.setter
    def job_uuid(self, job_uuid):
        """Sets the job_uuid of this Job.

        Output only. A UUID that uniquely identifies a job within the project over time. This is in contrast to a user-settable reference.job_id that might be reused over time.

        :param job_uuid: The job_uuid of this Job.
        :type job_uuid: str
        """

        self._job_uuid = job_uuid

    @property
    def labels(self):
        """Gets the labels of this Job.

        Optional. The labels to associate with this job. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values can be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a job.

        :return: The labels of this Job.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Job.

        Optional. The labels to associate with this job. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values can be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a job.

        :param labels: The labels of this Job.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def pig_job(self):
        """Gets the pig_job of this Job.


        :return: The pig_job of this Job.
        :rtype: PigJob
        """
        return self._pig_job

    @pig_job.setter
    def pig_job(self, pig_job):
        """Sets the pig_job of this Job.


        :param pig_job: The pig_job of this Job.
        :type pig_job: PigJob
        """

        self._pig_job = pig_job

    @property
    def placement(self):
        """Gets the placement of this Job.


        :return: The placement of this Job.
        :rtype: JobPlacement
        """
        return self._placement

    @placement.setter
    def placement(self, placement):
        """Sets the placement of this Job.


        :param placement: The placement of this Job.
        :type placement: JobPlacement
        """

        self._placement = placement

    @property
    def presto_job(self):
        """Gets the presto_job of this Job.


        :return: The presto_job of this Job.
        :rtype: PrestoJob
        """
        return self._presto_job

    @presto_job.setter
    def presto_job(self, presto_job):
        """Sets the presto_job of this Job.


        :param presto_job: The presto_job of this Job.
        :type presto_job: PrestoJob
        """

        self._presto_job = presto_job

    @property
    def pyspark_job(self):
        """Gets the pyspark_job of this Job.


        :return: The pyspark_job of this Job.
        :rtype: PySparkJob
        """
        return self._pyspark_job

    @pyspark_job.setter
    def pyspark_job(self, pyspark_job):
        """Sets the pyspark_job of this Job.


        :param pyspark_job: The pyspark_job of this Job.
        :type pyspark_job: PySparkJob
        """

        self._pyspark_job = pyspark_job

    @property
    def reference(self):
        """Gets the reference of this Job.


        :return: The reference of this Job.
        :rtype: JobReference
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Job.


        :param reference: The reference of this Job.
        :type reference: JobReference
        """

        self._reference = reference

    @property
    def scheduling(self):
        """Gets the scheduling of this Job.


        :return: The scheduling of this Job.
        :rtype: JobScheduling
        """
        return self._scheduling

    @scheduling.setter
    def scheduling(self, scheduling):
        """Sets the scheduling of this Job.


        :param scheduling: The scheduling of this Job.
        :type scheduling: JobScheduling
        """

        self._scheduling = scheduling

    @property
    def spark_job(self):
        """Gets the spark_job of this Job.


        :return: The spark_job of this Job.
        :rtype: SparkJob
        """
        return self._spark_job

    @spark_job.setter
    def spark_job(self, spark_job):
        """Sets the spark_job of this Job.


        :param spark_job: The spark_job of this Job.
        :type spark_job: SparkJob
        """

        self._spark_job = spark_job

    @property
    def spark_r_job(self):
        """Gets the spark_r_job of this Job.


        :return: The spark_r_job of this Job.
        :rtype: SparkRJob
        """
        return self._spark_r_job

    @spark_r_job.setter
    def spark_r_job(self, spark_r_job):
        """Sets the spark_r_job of this Job.


        :param spark_r_job: The spark_r_job of this Job.
        :type spark_r_job: SparkRJob
        """

        self._spark_r_job = spark_r_job

    @property
    def spark_sql_job(self):
        """Gets the spark_sql_job of this Job.


        :return: The spark_sql_job of this Job.
        :rtype: SparkSqlJob
        """
        return self._spark_sql_job

    @spark_sql_job.setter
    def spark_sql_job(self, spark_sql_job):
        """Sets the spark_sql_job of this Job.


        :param spark_sql_job: The spark_sql_job of this Job.
        :type spark_sql_job: SparkSqlJob
        """

        self._spark_sql_job = spark_sql_job

    @property
    def status(self):
        """Gets the status of this Job.


        :return: The status of this Job.
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.


        :param status: The status of this Job.
        :type status: JobStatus
        """

        self._status = status

    @property
    def status_history(self):
        """Gets the status_history of this Job.

        Output only. The previous job status.

        :return: The status_history of this Job.
        :rtype: List[JobStatus]
        """
        return self._status_history

    @status_history.setter
    def status_history(self, status_history):
        """Sets the status_history of this Job.

        Output only. The previous job status.

        :param status_history: The status_history of this Job.
        :type status_history: List[JobStatus]
        """

        self._status_history = status_history

    @property
    def trino_job(self):
        """Gets the trino_job of this Job.


        :return: The trino_job of this Job.
        :rtype: TrinoJob
        """
        return self._trino_job

    @trino_job.setter
    def trino_job(self, trino_job):
        """Sets the trino_job of this Job.


        :param trino_job: The trino_job of this Job.
        :type trino_job: TrinoJob
        """

        self._trino_job = trino_job

    @property
    def yarn_applications(self):
        """Gets the yarn_applications of this Job.

        Output only. The collection of YARN applications spun up by this job.Beta Feature: This report is available for testing purposes only. It might be changed before final release.

        :return: The yarn_applications of this Job.
        :rtype: List[YarnApplication]
        """
        return self._yarn_applications

    @yarn_applications.setter
    def yarn_applications(self, yarn_applications):
        """Sets the yarn_applications of this Job.

        Output only. The collection of YARN applications spun up by this job.Beta Feature: This report is available for testing purposes only. It might be changed before final release.

        :param yarn_applications: The yarn_applications of this Job.
        :type yarn_applications: List[YarnApplication]
        """

        self._yarn_applications = yarn_applications
