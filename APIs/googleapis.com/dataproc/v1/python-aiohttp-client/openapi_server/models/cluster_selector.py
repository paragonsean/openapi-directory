# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_labels: Dict[str, str]=None, zone: str=None):
        """ClusterSelector - a model defined in OpenAPI

        :param cluster_labels: The cluster_labels of this ClusterSelector.
        :param zone: The zone of this ClusterSelector.
        """
        self.openapi_types = {
            'cluster_labels': Dict[str, str],
            'zone': str
        }

        self.attribute_map = {
            'cluster_labels': 'clusterLabels',
            'zone': 'zone'
        }

        self._cluster_labels = cluster_labels
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterSelector of this ClusterSelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_labels(self):
        """Gets the cluster_labels of this ClusterSelector.

        Required. The cluster labels. Cluster must have all labels to match.

        :return: The cluster_labels of this ClusterSelector.
        :rtype: Dict[str, str]
        """
        return self._cluster_labels

    @cluster_labels.setter
    def cluster_labels(self, cluster_labels):
        """Sets the cluster_labels of this ClusterSelector.

        Required. The cluster labels. Cluster must have all labels to match.

        :param cluster_labels: The cluster_labels of this ClusterSelector.
        :type cluster_labels: Dict[str, str]
        """

        self._cluster_labels = cluster_labels

    @property
    def zone(self):
        """Gets the zone of this ClusterSelector.

        Optional. The zone where workflow process executes. This parameter does not affect the selection of the cluster.If unspecified, the zone of the first cluster matching the selector is used.

        :return: The zone of this ClusterSelector.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this ClusterSelector.

        Optional. The zone where workflow process executes. This parameter does not affect the selection of the cluster.If unspecified, the zone of the first cluster matching the selector is used.

        :param zone: The zone of this ClusterSelector.
        :type zone: str
        """

        self._zone = zone
