/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AutoscalingPolicy;
import org.openapitools.client.model.Batch;
import org.openapitools.client.model.Cluster;
import org.openapitools.client.model.DiagnoseClusterRequest;
import org.openapitools.client.model.GetIamPolicyRequest;
import org.openapitools.client.model.InjectCredentialsRequest;
import org.openapitools.client.model.InstantiateWorkflowTemplateRequest;
import org.openapitools.client.model.Job;
import org.openapitools.client.model.ListAutoscalingPoliciesResponse;
import org.openapitools.client.model.ListBatchesResponse;
import org.openapitools.client.model.ListClustersResponse;
import org.openapitools.client.model.ListJobsResponse;
import org.openapitools.client.model.ListSessionTemplatesResponse;
import org.openapitools.client.model.ListSessionsResponse;
import org.openapitools.client.model.ListWorkflowTemplatesResponse;
import org.openapitools.client.model.NodeGroup;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.RepairClusterRequest;
import org.openapitools.client.model.RepairNodeGroupRequest;
import org.openapitools.client.model.ResizeNodeGroupRequest;
import org.openapitools.client.model.Session;
import org.openapitools.client.model.SessionTemplate;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.StartClusterRequest;
import org.openapitools.client.model.StopClusterRequest;
import org.openapitools.client.model.SubmitJobRequest;
import org.openapitools.client.model.TerminateSessionRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.openapitools.client.model.WorkflowTemplate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a batch workload that executes asynchronously.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsLocationsBatchesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String batchId = null;
        String requestId = null;
        Batch batch = null;
        Operation response = api.dataprocProjectsLocationsBatchesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchId, requestId, batch);
        // TODO: test validations
    }

    /**
     * Lists batch workloads.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsLocationsBatchesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListBatchesResponse response = api.dataprocProjectsLocationsBatchesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Create a session template synchronously.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsLocationsSessionTemplatesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SessionTemplate sessionTemplate = null;
        SessionTemplate response = api.dataprocProjectsLocationsSessionTemplatesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sessionTemplate);
        // TODO: test validations
    }

    /**
     * Lists session templates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsLocationsSessionTemplatesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListSessionTemplatesResponse response = api.dataprocProjectsLocationsSessionTemplatesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the session template synchronously.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsLocationsSessionTemplatesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SessionTemplate sessionTemplate = null;
        SessionTemplate response = api.dataprocProjectsLocationsSessionTemplatesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sessionTemplate);
        // TODO: test validations
    }

    /**
     * Create an interactive session asynchronously.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsLocationsSessionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String sessionId = null;
        Session session = null;
        Operation response = api.dataprocProjectsLocationsSessionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, sessionId, session);
        // TODO: test validations
    }

    /**
     * Lists interactive sessions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsLocationsSessionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListSessionsResponse response = api.dataprocProjectsLocationsSessionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Terminates the interactive session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsLocationsSessionsTerminateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TerminateSessionRequest terminateSessionRequest = null;
        Operation response = api.dataprocProjectsLocationsSessionsTerminate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, terminateSessionRequest);
        // TODO: test validations
    }

    /**
     * Creates new autoscaling policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsAutoscalingPoliciesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AutoscalingPolicy autoscalingPolicy = null;
        AutoscalingPolicy response = api.dataprocProjectsRegionsAutoscalingPoliciesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, autoscalingPolicy);
        // TODO: test validations
    }

    /**
     * Lists autoscaling policies in the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsAutoscalingPoliciesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAutoscalingPoliciesResponse response = api.dataprocProjectsRegionsAutoscalingPoliciesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsClustersCreateTest() throws ApiException {
        String projectId = null;
        String region = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String actionOnFailedPrimaryWorkers = null;
        String requestId = null;
        Cluster cluster = null;
        Operation response = api.dataprocProjectsRegionsClustersCreate(projectId, region, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, actionOnFailedPrimaryWorkers, requestId, cluster);
        // TODO: test validations
    }

    /**
     * Deletes a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsClustersDeleteTest() throws ApiException {
        String projectId = null;
        String region = null;
        String clusterName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clusterUuid = null;
        String gracefulTerminationTimeout = null;
        String requestId = null;
        Operation response = api.dataprocProjectsRegionsClustersDelete(projectId, region, clusterName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clusterUuid, gracefulTerminationTimeout, requestId);
        // TODO: test validations
    }

    /**
     * Gets cluster diagnostic information. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata). After the operation completes, Operation.response contains DiagnoseClusterResults (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#diagnoseclusterresults).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsClustersDiagnoseTest() throws ApiException {
        String projectId = null;
        String region = null;
        String clusterName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DiagnoseClusterRequest diagnoseClusterRequest = null;
        Operation response = api.dataprocProjectsRegionsClustersDiagnose(projectId, region, clusterName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, diagnoseClusterRequest);
        // TODO: test validations
    }

    /**
     * Gets the resource representation for a cluster in a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsClustersGetTest() throws ApiException {
        String projectId = null;
        String region = null;
        String clusterName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Cluster response = api.dataprocProjectsRegionsClustersGet(projectId, region, clusterName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Inject encrypted credentials into all of the VMs in a cluster.The target cluster must be a personal auth cluster assigned to the user who is issuing the RPC.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsClustersInjectCredentialsTest() throws ApiException {
        String project = null;
        String region = null;
        String cluster = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InjectCredentialsRequest injectCredentialsRequest = null;
        Operation response = api.dataprocProjectsRegionsClustersInjectCredentials(project, region, cluster, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, injectCredentialsRequest);
        // TODO: test validations
    }

    /**
     * Lists all regions/{region}/clusters in a project alphabetically.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsClustersListTest() throws ApiException {
        String projectId = null;
        String region = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListClustersResponse response = api.dataprocProjectsRegionsClustersList(projectId, region, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a node group in a cluster. The returned Operation.metadata is NodeGroupOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#nodegroupoperationmetadata).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsClustersNodeGroupsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String nodeGroupId = null;
        String parentOperationId = null;
        String requestId = null;
        NodeGroup nodeGroup = null;
        Operation response = api.dataprocProjectsRegionsClustersNodeGroupsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, nodeGroupId, parentOperationId, requestId, nodeGroup);
        // TODO: test validations
    }

    /**
     * Repair nodes in a node group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsClustersNodeGroupsRepairTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RepairNodeGroupRequest repairNodeGroupRequest = null;
        Operation response = api.dataprocProjectsRegionsClustersNodeGroupsRepair(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, repairNodeGroupRequest);
        // TODO: test validations
    }

    /**
     * Resizes a node group in a cluster. The returned Operation.metadata is NodeGroupOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#nodegroupoperationmetadata).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsClustersNodeGroupsResizeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ResizeNodeGroupRequest resizeNodeGroupRequest = null;
        Operation response = api.dataprocProjectsRegionsClustersNodeGroupsResize(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, resizeNodeGroupRequest);
        // TODO: test validations
    }

    /**
     * Updates a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata). The cluster must be in a RUNNING state or an error is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsClustersPatchTest() throws ApiException {
        String projectId = null;
        String region = null;
        String clusterName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String gracefulDecommissionTimeout = null;
        String requestId = null;
        String updateMask = null;
        Cluster cluster = null;
        Operation response = api.dataprocProjectsRegionsClustersPatch(projectId, region, clusterName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, gracefulDecommissionTimeout, requestId, updateMask, cluster);
        // TODO: test validations
    }

    /**
     * Repairs a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsClustersRepairTest() throws ApiException {
        String projectId = null;
        String region = null;
        String clusterName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RepairClusterRequest repairClusterRequest = null;
        Operation response = api.dataprocProjectsRegionsClustersRepair(projectId, region, clusterName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, repairClusterRequest);
        // TODO: test validations
    }

    /**
     * Starts a cluster in a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsClustersStartTest() throws ApiException {
        String projectId = null;
        String region = null;
        String clusterName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        StartClusterRequest startClusterRequest = null;
        Operation response = api.dataprocProjectsRegionsClustersStart(projectId, region, clusterName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, startClusterRequest);
        // TODO: test validations
    }

    /**
     * Stops a cluster in a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsClustersStopTest() throws ApiException {
        String projectId = null;
        String region = null;
        String clusterName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        StopClusterRequest stopClusterRequest = null;
        Operation response = api.dataprocProjectsRegionsClustersStop(projectId, region, clusterName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, stopClusterRequest);
        // TODO: test validations
    }

    /**
     * Starts a job cancellation request. To access the job resource after cancellation, call regions/{region}/jobs.list (https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.jobs/list) or regions/{region}/jobs.get (https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.jobs/get).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsJobsCancelTest() throws ApiException {
        String projectId = null;
        String region = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Job response = api.dataprocProjectsRegionsJobsCancel(projectId, region, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Deletes the job from the project. If the job is active, the delete fails, and the response returns FAILED_PRECONDITION.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsJobsDeleteTest() throws ApiException {
        String projectId = null;
        String region = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.dataprocProjectsRegionsJobsDelete(projectId, region, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the resource representation for a job in a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsJobsGetTest() throws ApiException {
        String projectId = null;
        String region = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Job response = api.dataprocProjectsRegionsJobsGet(projectId, region, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists regions/{region}/jobs in a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsJobsListTest() throws ApiException {
        String projectId = null;
        String region = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clusterName = null;
        String filter = null;
        String jobStateMatcher = null;
        Integer pageSize = null;
        String pageToken = null;
        ListJobsResponse response = api.dataprocProjectsRegionsJobsList(projectId, region, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clusterName, filter, jobStateMatcher, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a job in a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsJobsPatchTest() throws ApiException {
        String projectId = null;
        String region = null;
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Job job = null;
        Job response = api.dataprocProjectsRegionsJobsPatch(projectId, region, jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, job);
        // TODO: test validations
    }

    /**
     * Submits a job to a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsJobsSubmitTest() throws ApiException {
        String projectId = null;
        String region = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SubmitJobRequest submitJobRequest = null;
        Job response = api.dataprocProjectsRegionsJobsSubmit(projectId, region, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, submitJobRequest);
        // TODO: test validations
    }

    /**
     * Submits job to a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsJobsSubmitAsOperationTest() throws ApiException {
        String projectId = null;
        String region = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SubmitJobRequest submitJobRequest = null;
        Operation response = api.dataprocProjectsRegionsJobsSubmitAsOperation(projectId, region, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, submitJobRequest);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.dataprocProjectsRegionsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates new workflow template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsWorkflowTemplatesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        WorkflowTemplate workflowTemplate = null;
        WorkflowTemplate response = api.dataprocProjectsRegionsWorkflowTemplatesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, workflowTemplate);
        // TODO: test validations
    }

    /**
     * Deletes a workflow template. It does not cancel in-progress workflows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsWorkflowTemplatesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer version = null;
        Object response = api.dataprocProjectsRegionsWorkflowTemplatesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, version);
        // TODO: test validations
    }

    /**
     * Retrieves the latest workflow template.Can retrieve previously instantiated template by specifying optional version parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsWorkflowTemplatesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer version = null;
        Integer pageSize = null;
        String pageToken = null;
        WorkflowTemplate response = api.dataprocProjectsRegionsWorkflowTemplatesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, version, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsWorkflowTemplatesGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetIamPolicyRequest getIamPolicyRequest = null;
        Policy response = api.dataprocProjectsRegionsWorkflowTemplatesGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, getIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Instantiates a template and begins execution.The returned Operation can be used to track execution of workflow by polling operations.get. The Operation will complete when entire workflow is finished.The running workflow can be aborted via operations.cancel. This will cause any inflight jobs to be cancelled and workflow-owned clusters to be deleted.The Operation.metadata will be WorkflowMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata). Also see Using WorkflowMetadata (https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).On successful completion, Operation.response will be Empty.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsWorkflowTemplatesInstantiateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InstantiateWorkflowTemplateRequest instantiateWorkflowTemplateRequest = null;
        Operation response = api.dataprocProjectsRegionsWorkflowTemplatesInstantiate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, instantiateWorkflowTemplateRequest);
        // TODO: test validations
    }

    /**
     * Instantiates a template and begins execution.This method is equivalent to executing the sequence CreateWorkflowTemplate, InstantiateWorkflowTemplate, DeleteWorkflowTemplate.The returned Operation can be used to track execution of workflow by polling operations.get. The Operation will complete when entire workflow is finished.The running workflow can be aborted via operations.cancel. This will cause any inflight jobs to be cancelled and workflow-owned clusters to be deleted.The Operation.metadata will be WorkflowMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata). Also see Using WorkflowMetadata (https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).On successful completion, Operation.response will be Empty.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsWorkflowTemplatesInstantiateInlineTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        WorkflowTemplate workflowTemplate = null;
        Operation response = api.dataprocProjectsRegionsWorkflowTemplatesInstantiateInline(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, workflowTemplate);
        // TODO: test validations
    }

    /**
     * Lists workflows that match the specified filter in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsWorkflowTemplatesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListWorkflowTemplatesResponse response = api.dataprocProjectsRegionsWorkflowTemplatesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsWorkflowTemplatesSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.dataprocProjectsRegionsWorkflowTemplatesSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsWorkflowTemplatesTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.dataprocProjectsRegionsWorkflowTemplatesTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Updates (replaces) workflow template. The updated template must contain version that matches the current server version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataprocProjectsRegionsWorkflowTemplatesUpdateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        WorkflowTemplate workflowTemplate = null;
        WorkflowTemplate response = api.dataprocProjectsRegionsWorkflowTemplatesUpdate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, workflowTemplate);
        // TODO: test validations
    }

}
