/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Interval;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request to collect cluster diagnostic information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiagnoseClusterRequest {
  public static final String SERIALIZED_NAME_DIAGNOSIS_INTERVAL = "diagnosisInterval";
  @SerializedName(SERIALIZED_NAME_DIAGNOSIS_INTERVAL)
  private Interval diagnosisInterval;

  public static final String SERIALIZED_NAME_JOB = "job";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_JOB)
  private String job;

  public static final String SERIALIZED_NAME_JOBS = "jobs";
  @SerializedName(SERIALIZED_NAME_JOBS)
  private List<String> jobs = new ArrayList<>();

  /**
   * Optional. (Optional) The access type to the diagnostic tarball. If not specified, falls back to default access of the bucket
   */
  @JsonAdapter(TarballAccessEnum.Adapter.class)
  public enum TarballAccessEnum {
    TARBALL_ACCESS_UNSPECIFIED("TARBALL_ACCESS_UNSPECIFIED"),
    
    GOOGLE_CLOUD_SUPPORT("GOOGLE_CLOUD_SUPPORT"),
    
    GOOGLE_DATAPROC_DIAGNOSE("GOOGLE_DATAPROC_DIAGNOSE");

    private String value;

    TarballAccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TarballAccessEnum fromValue(String value) {
      for (TarballAccessEnum b : TarballAccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TarballAccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TarballAccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TarballAccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TarballAccessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TarballAccessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARBALL_ACCESS = "tarballAccess";
  @SerializedName(SERIALIZED_NAME_TARBALL_ACCESS)
  private TarballAccessEnum tarballAccess;

  public static final String SERIALIZED_NAME_TARBALL_GCS_DIR = "tarballGcsDir";
  @SerializedName(SERIALIZED_NAME_TARBALL_GCS_DIR)
  private String tarballGcsDir;

  public static final String SERIALIZED_NAME_YARN_APPLICATION_ID = "yarnApplicationId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_YARN_APPLICATION_ID)
  private String yarnApplicationId;

  public static final String SERIALIZED_NAME_YARN_APPLICATION_IDS = "yarnApplicationIds";
  @SerializedName(SERIALIZED_NAME_YARN_APPLICATION_IDS)
  private List<String> yarnApplicationIds = new ArrayList<>();

  public DiagnoseClusterRequest() {
  }

  public DiagnoseClusterRequest diagnosisInterval(Interval diagnosisInterval) {
    this.diagnosisInterval = diagnosisInterval;
    return this;
  }

  /**
   * Get diagnosisInterval
   * @return diagnosisInterval
   */
  @javax.annotation.Nullable
  public Interval getDiagnosisInterval() {
    return diagnosisInterval;
  }

  public void setDiagnosisInterval(Interval diagnosisInterval) {
    this.diagnosisInterval = diagnosisInterval;
  }


  @Deprecated
  public DiagnoseClusterRequest job(String job) {
    this.job = job;
    return this;
  }

  /**
   * Optional. DEPRECATED Specifies the job on which diagnosis is to be performed. Format: projects/{project}/regions/{region}/jobs/{job}
   * @return job
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getJob() {
    return job;
  }

  @Deprecated
  public void setJob(String job) {
    this.job = job;
  }


  public DiagnoseClusterRequest jobs(List<String> jobs) {
    this.jobs = jobs;
    return this;
  }

  public DiagnoseClusterRequest addJobsItem(String jobsItem) {
    if (this.jobs == null) {
      this.jobs = new ArrayList<>();
    }
    this.jobs.add(jobsItem);
    return this;
  }

  /**
   * Optional. Specifies a list of jobs on which diagnosis is to be performed. Format: projects/{project}/regions/{region}/jobs/{job}
   * @return jobs
   */
  @javax.annotation.Nullable
  public List<String> getJobs() {
    return jobs;
  }

  public void setJobs(List<String> jobs) {
    this.jobs = jobs;
  }


  public DiagnoseClusterRequest tarballAccess(TarballAccessEnum tarballAccess) {
    this.tarballAccess = tarballAccess;
    return this;
  }

  /**
   * Optional. (Optional) The access type to the diagnostic tarball. If not specified, falls back to default access of the bucket
   * @return tarballAccess
   */
  @javax.annotation.Nullable
  public TarballAccessEnum getTarballAccess() {
    return tarballAccess;
  }

  public void setTarballAccess(TarballAccessEnum tarballAccess) {
    this.tarballAccess = tarballAccess;
  }


  public DiagnoseClusterRequest tarballGcsDir(String tarballGcsDir) {
    this.tarballGcsDir = tarballGcsDir;
    return this;
  }

  /**
   * Optional. (Optional) The output Cloud Storage directory for the diagnostic tarball. If not specified, a task-specific directory in the cluster&#39;s staging bucket will be used.
   * @return tarballGcsDir
   */
  @javax.annotation.Nullable
  public String getTarballGcsDir() {
    return tarballGcsDir;
  }

  public void setTarballGcsDir(String tarballGcsDir) {
    this.tarballGcsDir = tarballGcsDir;
  }


  @Deprecated
  public DiagnoseClusterRequest yarnApplicationId(String yarnApplicationId) {
    this.yarnApplicationId = yarnApplicationId;
    return this;
  }

  /**
   * Optional. DEPRECATED Specifies the yarn application on which diagnosis is to be performed.
   * @return yarnApplicationId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getYarnApplicationId() {
    return yarnApplicationId;
  }

  @Deprecated
  public void setYarnApplicationId(String yarnApplicationId) {
    this.yarnApplicationId = yarnApplicationId;
  }


  public DiagnoseClusterRequest yarnApplicationIds(List<String> yarnApplicationIds) {
    this.yarnApplicationIds = yarnApplicationIds;
    return this;
  }

  public DiagnoseClusterRequest addYarnApplicationIdsItem(String yarnApplicationIdsItem) {
    if (this.yarnApplicationIds == null) {
      this.yarnApplicationIds = new ArrayList<>();
    }
    this.yarnApplicationIds.add(yarnApplicationIdsItem);
    return this;
  }

  /**
   * Optional. Specifies a list of yarn applications on which diagnosis is to be performed.
   * @return yarnApplicationIds
   */
  @javax.annotation.Nullable
  public List<String> getYarnApplicationIds() {
    return yarnApplicationIds;
  }

  public void setYarnApplicationIds(List<String> yarnApplicationIds) {
    this.yarnApplicationIds = yarnApplicationIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiagnoseClusterRequest diagnoseClusterRequest = (DiagnoseClusterRequest) o;
    return Objects.equals(this.diagnosisInterval, diagnoseClusterRequest.diagnosisInterval) &&
        Objects.equals(this.job, diagnoseClusterRequest.job) &&
        Objects.equals(this.jobs, diagnoseClusterRequest.jobs) &&
        Objects.equals(this.tarballAccess, diagnoseClusterRequest.tarballAccess) &&
        Objects.equals(this.tarballGcsDir, diagnoseClusterRequest.tarballGcsDir) &&
        Objects.equals(this.yarnApplicationId, diagnoseClusterRequest.yarnApplicationId) &&
        Objects.equals(this.yarnApplicationIds, diagnoseClusterRequest.yarnApplicationIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diagnosisInterval, job, jobs, tarballAccess, tarballGcsDir, yarnApplicationId, yarnApplicationIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiagnoseClusterRequest {\n");
    sb.append("    diagnosisInterval: ").append(toIndentedString(diagnosisInterval)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    jobs: ").append(toIndentedString(jobs)).append("\n");
    sb.append("    tarballAccess: ").append(toIndentedString(tarballAccess)).append("\n");
    sb.append("    tarballGcsDir: ").append(toIndentedString(tarballGcsDir)).append("\n");
    sb.append("    yarnApplicationId: ").append(toIndentedString(yarnApplicationId)).append("\n");
    sb.append("    yarnApplicationIds: ").append(toIndentedString(yarnApplicationIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diagnosisInterval");
    openapiFields.add("job");
    openapiFields.add("jobs");
    openapiFields.add("tarballAccess");
    openapiFields.add("tarballGcsDir");
    openapiFields.add("yarnApplicationId");
    openapiFields.add("yarnApplicationIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiagnoseClusterRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiagnoseClusterRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiagnoseClusterRequest is not found in the empty JSON string", DiagnoseClusterRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiagnoseClusterRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiagnoseClusterRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `diagnosisInterval`
      if (jsonObj.get("diagnosisInterval") != null && !jsonObj.get("diagnosisInterval").isJsonNull()) {
        Interval.validateJsonElement(jsonObj.get("diagnosisInterval"));
      }
      if ((jsonObj.get("job") != null && !jsonObj.get("job").isJsonNull()) && !jsonObj.get("job").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jobs") != null && !jsonObj.get("jobs").isJsonNull() && !jsonObj.get("jobs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobs` to be an array in the JSON string but got `%s`", jsonObj.get("jobs").toString()));
      }
      if ((jsonObj.get("tarballAccess") != null && !jsonObj.get("tarballAccess").isJsonNull()) && !jsonObj.get("tarballAccess").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tarballAccess` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tarballAccess").toString()));
      }
      // validate the optional field `tarballAccess`
      if (jsonObj.get("tarballAccess") != null && !jsonObj.get("tarballAccess").isJsonNull()) {
        TarballAccessEnum.validateJsonElement(jsonObj.get("tarballAccess"));
      }
      if ((jsonObj.get("tarballGcsDir") != null && !jsonObj.get("tarballGcsDir").isJsonNull()) && !jsonObj.get("tarballGcsDir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tarballGcsDir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tarballGcsDir").toString()));
      }
      if ((jsonObj.get("yarnApplicationId") != null && !jsonObj.get("yarnApplicationId").isJsonNull()) && !jsonObj.get("yarnApplicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yarnApplicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yarnApplicationId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("yarnApplicationIds") != null && !jsonObj.get("yarnApplicationIds").isJsonNull() && !jsonObj.get("yarnApplicationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `yarnApplicationIds` to be an array in the JSON string but got `%s`", jsonObj.get("yarnApplicationIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiagnoseClusterRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiagnoseClusterRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiagnoseClusterRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiagnoseClusterRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DiagnoseClusterRequest>() {
           @Override
           public void write(JsonWriter out, DiagnoseClusterRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiagnoseClusterRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiagnoseClusterRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiagnoseClusterRequest
   * @throws IOException if the JSON string is invalid with respect to DiagnoseClusterRequest
   */
  public static DiagnoseClusterRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiagnoseClusterRequest.class);
  }

  /**
   * Convert an instance of DiagnoseClusterRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

