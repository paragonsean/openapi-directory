/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A configuration for running an Apache SparkR (https://spark.apache.org/docs/latest/sparkr.html) batch workload.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SparkRBatch {
  public static final String SERIALIZED_NAME_ARCHIVE_URIS = "archiveUris";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_URIS)
  private List<String> archiveUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  private List<String> args = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILE_URIS = "fileUris";
  @SerializedName(SERIALIZED_NAME_FILE_URIS)
  private List<String> fileUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAIN_R_FILE_URI = "mainRFileUri";
  @SerializedName(SERIALIZED_NAME_MAIN_R_FILE_URI)
  private String mainRFileUri;

  public SparkRBatch() {
  }

  public SparkRBatch archiveUris(List<String> archiveUris) {
    this.archiveUris = archiveUris;
    return this;
  }

  public SparkRBatch addArchiveUrisItem(String archiveUrisItem) {
    if (this.archiveUris == null) {
      this.archiveUris = new ArrayList<>();
    }
    this.archiveUris.add(archiveUrisItem);
    return this;
  }

  /**
   * Optional. HCFS URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.
   * @return archiveUris
   */
  @javax.annotation.Nullable
  public List<String> getArchiveUris() {
    return archiveUris;
  }

  public void setArchiveUris(List<String> archiveUris) {
    this.archiveUris = archiveUris;
  }


  public SparkRBatch args(List<String> args) {
    this.args = args;
    return this;
  }

  public SparkRBatch addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<>();
    }
    this.args.add(argsItem);
    return this;
  }

  /**
   * Optional. The arguments to pass to the Spark driver. Do not include arguments that can be set as batch properties, such as --conf, since a collision can occur that causes an incorrect batch submission.
   * @return args
   */
  @javax.annotation.Nullable
  public List<String> getArgs() {
    return args;
  }

  public void setArgs(List<String> args) {
    this.args = args;
  }


  public SparkRBatch fileUris(List<String> fileUris) {
    this.fileUris = fileUris;
    return this;
  }

  public SparkRBatch addFileUrisItem(String fileUrisItem) {
    if (this.fileUris == null) {
      this.fileUris = new ArrayList<>();
    }
    this.fileUris.add(fileUrisItem);
    return this;
  }

  /**
   * Optional. HCFS URIs of files to be placed in the working directory of each executor.
   * @return fileUris
   */
  @javax.annotation.Nullable
  public List<String> getFileUris() {
    return fileUris;
  }

  public void setFileUris(List<String> fileUris) {
    this.fileUris = fileUris;
  }


  public SparkRBatch mainRFileUri(String mainRFileUri) {
    this.mainRFileUri = mainRFileUri;
    return this;
  }

  /**
   * Required. The HCFS URI of the main R file to use as the driver. Must be a .R or .r file.
   * @return mainRFileUri
   */
  @javax.annotation.Nullable
  public String getMainRFileUri() {
    return mainRFileUri;
  }

  public void setMainRFileUri(String mainRFileUri) {
    this.mainRFileUri = mainRFileUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SparkRBatch sparkRBatch = (SparkRBatch) o;
    return Objects.equals(this.archiveUris, sparkRBatch.archiveUris) &&
        Objects.equals(this.args, sparkRBatch.args) &&
        Objects.equals(this.fileUris, sparkRBatch.fileUris) &&
        Objects.equals(this.mainRFileUri, sparkRBatch.mainRFileUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archiveUris, args, fileUris, mainRFileUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SparkRBatch {\n");
    sb.append("    archiveUris: ").append(toIndentedString(archiveUris)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    fileUris: ").append(toIndentedString(fileUris)).append("\n");
    sb.append("    mainRFileUri: ").append(toIndentedString(mainRFileUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archiveUris");
    openapiFields.add("args");
    openapiFields.add("fileUris");
    openapiFields.add("mainRFileUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SparkRBatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SparkRBatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SparkRBatch is not found in the empty JSON string", SparkRBatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SparkRBatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SparkRBatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("archiveUris") != null && !jsonObj.get("archiveUris").isJsonNull() && !jsonObj.get("archiveUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `archiveUris` to be an array in the JSON string but got `%s`", jsonObj.get("archiveUris").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("args") != null && !jsonObj.get("args").isJsonNull() && !jsonObj.get("args").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `args` to be an array in the JSON string but got `%s`", jsonObj.get("args").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fileUris") != null && !jsonObj.get("fileUris").isJsonNull() && !jsonObj.get("fileUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileUris` to be an array in the JSON string but got `%s`", jsonObj.get("fileUris").toString()));
      }
      if ((jsonObj.get("mainRFileUri") != null && !jsonObj.get("mainRFileUri").isJsonNull()) && !jsonObj.get("mainRFileUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mainRFileUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mainRFileUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SparkRBatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SparkRBatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SparkRBatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SparkRBatch.class));

       return (TypeAdapter<T>) new TypeAdapter<SparkRBatch>() {
           @Override
           public void write(JsonWriter out, SparkRBatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SparkRBatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SparkRBatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SparkRBatch
   * @throws IOException if the JSON string is invalid with respect to SparkRBatch
   */
  public static SparkRBatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SparkRBatch.class);
  }

  /**
   * Convert an instance of SparkRBatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

