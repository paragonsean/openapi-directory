/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies an executable to run on a fully configured node and a timeout period for executable completion.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeInitializationAction {
  public static final String SERIALIZED_NAME_EXECUTABLE_FILE = "executableFile";
  @SerializedName(SERIALIZED_NAME_EXECUTABLE_FILE)
  private String executableFile;

  public static final String SERIALIZED_NAME_EXECUTION_TIMEOUT = "executionTimeout";
  @SerializedName(SERIALIZED_NAME_EXECUTION_TIMEOUT)
  private String executionTimeout;

  public NodeInitializationAction() {
  }

  public NodeInitializationAction executableFile(String executableFile) {
    this.executableFile = executableFile;
    return this;
  }

  /**
   * Required. Cloud Storage URI of executable file.
   * @return executableFile
   */
  @javax.annotation.Nullable
  public String getExecutableFile() {
    return executableFile;
  }

  public void setExecutableFile(String executableFile) {
    this.executableFile = executableFile;
  }


  public NodeInitializationAction executionTimeout(String executionTimeout) {
    this.executionTimeout = executionTimeout;
    return this;
  }

  /**
   * Optional. Amount of time executable has to complete. Default is 10 minutes (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period.
   * @return executionTimeout
   */
  @javax.annotation.Nullable
  public String getExecutionTimeout() {
    return executionTimeout;
  }

  public void setExecutionTimeout(String executionTimeout) {
    this.executionTimeout = executionTimeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeInitializationAction nodeInitializationAction = (NodeInitializationAction) o;
    return Objects.equals(this.executableFile, nodeInitializationAction.executableFile) &&
        Objects.equals(this.executionTimeout, nodeInitializationAction.executionTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executableFile, executionTimeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeInitializationAction {\n");
    sb.append("    executableFile: ").append(toIndentedString(executableFile)).append("\n");
    sb.append("    executionTimeout: ").append(toIndentedString(executionTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("executableFile");
    openapiFields.add("executionTimeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeInitializationAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeInitializationAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeInitializationAction is not found in the empty JSON string", NodeInitializationAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeInitializationAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeInitializationAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("executableFile") != null && !jsonObj.get("executableFile").isJsonNull()) && !jsonObj.get("executableFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executableFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executableFile").toString()));
      }
      if ((jsonObj.get("executionTimeout") != null && !jsonObj.get("executionTimeout").isJsonNull()) && !jsonObj.get("executionTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionTimeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeInitializationAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeInitializationAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeInitializationAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeInitializationAction.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeInitializationAction>() {
           @Override
           public void write(JsonWriter out, NodeInitializationAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeInitializationAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeInitializationAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeInitializationAction
   * @throws IOException if the JSON string is invalid with respect to NodeInitializationAction
   */
  public static NodeInitializationAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeInitializationAction.class);
  }

  /**
   * Convert an instance of NodeInitializationAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

