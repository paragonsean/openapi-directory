/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.LoggingConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Dataproc job for running Apache Hadoop MapReduce (https://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html) jobs on Apache Hadoop YARN (https://hadoop.apache.org/docs/r2.7.1/hadoop-yarn/hadoop-yarn-site/YARN.html).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HadoopJob {
  public static final String SERIALIZED_NAME_ARCHIVE_URIS = "archiveUris";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_URIS)
  private List<String> archiveUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  private List<String> args = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILE_URIS = "fileUris";
  @SerializedName(SERIALIZED_NAME_FILE_URIS)
  private List<String> fileUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_JAR_FILE_URIS = "jarFileUris";
  @SerializedName(SERIALIZED_NAME_JAR_FILE_URIS)
  private List<String> jarFileUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGGING_CONFIG = "loggingConfig";
  @SerializedName(SERIALIZED_NAME_LOGGING_CONFIG)
  private LoggingConfig loggingConfig;

  public static final String SERIALIZED_NAME_MAIN_CLASS = "mainClass";
  @SerializedName(SERIALIZED_NAME_MAIN_CLASS)
  private String mainClass;

  public static final String SERIALIZED_NAME_MAIN_JAR_FILE_URI = "mainJarFileUri";
  @SerializedName(SERIALIZED_NAME_MAIN_JAR_FILE_URI)
  private String mainJarFileUri;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public HadoopJob() {
  }

  public HadoopJob archiveUris(List<String> archiveUris) {
    this.archiveUris = archiveUris;
    return this;
  }

  public HadoopJob addArchiveUrisItem(String archiveUrisItem) {
    if (this.archiveUris == null) {
      this.archiveUris = new ArrayList<>();
    }
    this.archiveUris.add(archiveUrisItem);
    return this;
  }

  /**
   * Optional. HCFS URIs of archives to be extracted in the working directory of Hadoop drivers and tasks. Supported file types: .jar, .tar, .tar.gz, .tgz, or .zip.
   * @return archiveUris
   */
  @javax.annotation.Nullable
  public List<String> getArchiveUris() {
    return archiveUris;
  }

  public void setArchiveUris(List<String> archiveUris) {
    this.archiveUris = archiveUris;
  }


  public HadoopJob args(List<String> args) {
    this.args = args;
    return this;
  }

  public HadoopJob addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<>();
    }
    this.args.add(argsItem);
    return this;
  }

  /**
   * Optional. The arguments to pass to the driver. Do not include arguments, such as -libjars or -Dfoo&#x3D;bar, that can be set as job properties, since a collision might occur that causes an incorrect job submission.
   * @return args
   */
  @javax.annotation.Nullable
  public List<String> getArgs() {
    return args;
  }

  public void setArgs(List<String> args) {
    this.args = args;
  }


  public HadoopJob fileUris(List<String> fileUris) {
    this.fileUris = fileUris;
    return this;
  }

  public HadoopJob addFileUrisItem(String fileUrisItem) {
    if (this.fileUris == null) {
      this.fileUris = new ArrayList<>();
    }
    this.fileUris.add(fileUrisItem);
    return this;
  }

  /**
   * Optional. HCFS (Hadoop Compatible Filesystem) URIs of files to be copied to the working directory of Hadoop drivers and distributed tasks. Useful for naively parallel tasks.
   * @return fileUris
   */
  @javax.annotation.Nullable
  public List<String> getFileUris() {
    return fileUris;
  }

  public void setFileUris(List<String> fileUris) {
    this.fileUris = fileUris;
  }


  public HadoopJob jarFileUris(List<String> jarFileUris) {
    this.jarFileUris = jarFileUris;
    return this;
  }

  public HadoopJob addJarFileUrisItem(String jarFileUrisItem) {
    if (this.jarFileUris == null) {
      this.jarFileUris = new ArrayList<>();
    }
    this.jarFileUris.add(jarFileUrisItem);
    return this;
  }

  /**
   * Optional. Jar file URIs to add to the CLASSPATHs of the Hadoop driver and tasks.
   * @return jarFileUris
   */
  @javax.annotation.Nullable
  public List<String> getJarFileUris() {
    return jarFileUris;
  }

  public void setJarFileUris(List<String> jarFileUris) {
    this.jarFileUris = jarFileUris;
  }


  public HadoopJob loggingConfig(LoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
    return this;
  }

  /**
   * Get loggingConfig
   * @return loggingConfig
   */
  @javax.annotation.Nullable
  public LoggingConfig getLoggingConfig() {
    return loggingConfig;
  }

  public void setLoggingConfig(LoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
  }


  public HadoopJob mainClass(String mainClass) {
    this.mainClass = mainClass;
    return this;
  }

  /**
   * The name of the driver&#39;s main class. The jar file containing the class must be in the default CLASSPATH or specified in jar_file_uris.
   * @return mainClass
   */
  @javax.annotation.Nullable
  public String getMainClass() {
    return mainClass;
  }

  public void setMainClass(String mainClass) {
    this.mainClass = mainClass;
  }


  public HadoopJob mainJarFileUri(String mainJarFileUri) {
    this.mainJarFileUri = mainJarFileUri;
    return this;
  }

  /**
   * The HCFS URI of the jar file containing the main class. Examples: &#39;gs://foo-bucket/analytics-binaries/extract-useful-metrics-mr.jar&#39; &#39;hdfs:/tmp/test-samples/custom-wordcount.jar&#39; &#39;file:///home/usr/lib/hadoop-mapreduce/hadoop-mapreduce-examples.jar&#39;
   * @return mainJarFileUri
   */
  @javax.annotation.Nullable
  public String getMainJarFileUri() {
    return mainJarFileUri;
  }

  public void setMainJarFileUri(String mainJarFileUri) {
    this.mainJarFileUri = mainJarFileUri;
  }


  public HadoopJob properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public HadoopJob putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Optional. A mapping of property names to values, used to configure Hadoop. Properties that conflict with values set by the Dataproc API might be overwritten. Can include properties set in /etc/hadoop/conf/_*-site and classes in user code.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HadoopJob hadoopJob = (HadoopJob) o;
    return Objects.equals(this.archiveUris, hadoopJob.archiveUris) &&
        Objects.equals(this.args, hadoopJob.args) &&
        Objects.equals(this.fileUris, hadoopJob.fileUris) &&
        Objects.equals(this.jarFileUris, hadoopJob.jarFileUris) &&
        Objects.equals(this.loggingConfig, hadoopJob.loggingConfig) &&
        Objects.equals(this.mainClass, hadoopJob.mainClass) &&
        Objects.equals(this.mainJarFileUri, hadoopJob.mainJarFileUri) &&
        Objects.equals(this.properties, hadoopJob.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archiveUris, args, fileUris, jarFileUris, loggingConfig, mainClass, mainJarFileUri, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HadoopJob {\n");
    sb.append("    archiveUris: ").append(toIndentedString(archiveUris)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    fileUris: ").append(toIndentedString(fileUris)).append("\n");
    sb.append("    jarFileUris: ").append(toIndentedString(jarFileUris)).append("\n");
    sb.append("    loggingConfig: ").append(toIndentedString(loggingConfig)).append("\n");
    sb.append("    mainClass: ").append(toIndentedString(mainClass)).append("\n");
    sb.append("    mainJarFileUri: ").append(toIndentedString(mainJarFileUri)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archiveUris");
    openapiFields.add("args");
    openapiFields.add("fileUris");
    openapiFields.add("jarFileUris");
    openapiFields.add("loggingConfig");
    openapiFields.add("mainClass");
    openapiFields.add("mainJarFileUri");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HadoopJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HadoopJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HadoopJob is not found in the empty JSON string", HadoopJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HadoopJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HadoopJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("archiveUris") != null && !jsonObj.get("archiveUris").isJsonNull() && !jsonObj.get("archiveUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `archiveUris` to be an array in the JSON string but got `%s`", jsonObj.get("archiveUris").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("args") != null && !jsonObj.get("args").isJsonNull() && !jsonObj.get("args").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `args` to be an array in the JSON string but got `%s`", jsonObj.get("args").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fileUris") != null && !jsonObj.get("fileUris").isJsonNull() && !jsonObj.get("fileUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileUris` to be an array in the JSON string but got `%s`", jsonObj.get("fileUris").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jarFileUris") != null && !jsonObj.get("jarFileUris").isJsonNull() && !jsonObj.get("jarFileUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jarFileUris` to be an array in the JSON string but got `%s`", jsonObj.get("jarFileUris").toString()));
      }
      // validate the optional field `loggingConfig`
      if (jsonObj.get("loggingConfig") != null && !jsonObj.get("loggingConfig").isJsonNull()) {
        LoggingConfig.validateJsonElement(jsonObj.get("loggingConfig"));
      }
      if ((jsonObj.get("mainClass") != null && !jsonObj.get("mainClass").isJsonNull()) && !jsonObj.get("mainClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mainClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mainClass").toString()));
      }
      if ((jsonObj.get("mainJarFileUri") != null && !jsonObj.get("mainJarFileUri").isJsonNull()) && !jsonObj.get("mainJarFileUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mainJarFileUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mainJarFileUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HadoopJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HadoopJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HadoopJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HadoopJob.class));

       return (TypeAdapter<T>) new TypeAdapter<HadoopJob>() {
           @Override
           public void write(JsonWriter out, HadoopJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HadoopJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HadoopJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HadoopJob
   * @throws IOException if the JSON string is invalid with respect to HadoopJob
   */
  public static HadoopJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HadoopJob.class);
  }

  /**
   * Convert an instance of HadoopJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

