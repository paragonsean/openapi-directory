/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Dataproc custom metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Metric {
  public static final String SERIALIZED_NAME_METRIC_OVERRIDES = "metricOverrides";
  @SerializedName(SERIALIZED_NAME_METRIC_OVERRIDES)
  private List<String> metricOverrides = new ArrayList<>();

  /**
   * Required. A standard set of metrics is collected unless metricOverrides are specified for the metric source (see Custom metrics (https://cloud.google.com/dataproc/docs/guides/dataproc-metrics#custom_metrics) for more information).
   */
  @JsonAdapter(MetricSourceEnum.Adapter.class)
  public enum MetricSourceEnum {
    METRIC_SOURCE_UNSPECIFIED("METRIC_SOURCE_UNSPECIFIED"),
    
    MONITORING_AGENT_DEFAULTS("MONITORING_AGENT_DEFAULTS"),
    
    HDFS("HDFS"),
    
    SPARK("SPARK"),
    
    YARN("YARN"),
    
    SPARK_HISTORY_SERVER("SPARK_HISTORY_SERVER"),
    
    HIVESERVER2("HIVESERVER2"),
    
    HIVEMETASTORE("HIVEMETASTORE"),
    
    FLINK("FLINK");

    private String value;

    MetricSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricSourceEnum fromValue(String value) {
      for (MetricSourceEnum b : MetricSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetricSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METRIC_SOURCE = "metricSource";
  @SerializedName(SERIALIZED_NAME_METRIC_SOURCE)
  private MetricSourceEnum metricSource;

  public Metric() {
  }

  public Metric metricOverrides(List<String> metricOverrides) {
    this.metricOverrides = metricOverrides;
    return this;
  }

  public Metric addMetricOverridesItem(String metricOverridesItem) {
    if (this.metricOverrides == null) {
      this.metricOverrides = new ArrayList<>();
    }
    this.metricOverrides.add(metricOverridesItem);
    return this;
  }

  /**
   * Optional. Specify one or more Custom metrics (https://cloud.google.com/dataproc/docs/guides/dataproc-metrics#custom_metrics) to collect for the metric course (for the SPARK metric source (any Spark metric (https://spark.apache.org/docs/latest/monitoring.html#metrics) can be specified).Provide metrics in the following format: METRIC_SOURCE: INSTANCE:GROUP:METRIC Use camelcase as appropriate.Examples: yarn:ResourceManager:QueueMetrics:AppsCompleted spark:driver:DAGScheduler:job.allJobs sparkHistoryServer:JVM:Memory:NonHeapMemoryUsage.committed hiveserver2:JVM:Memory:NonHeapMemoryUsage.used Notes: Only the specified overridden metrics are collected for the metric source. For example, if one or more spark:executive metrics are listed as metric overrides, other SPARK metrics are not collected. The collection of the metrics for other enabled custom metric sources is unaffected. For example, if both SPARK andd YARN metric sources are enabled, and overrides are provided for Spark metrics only, all YARN metrics are collected.
   * @return metricOverrides
   */
  @javax.annotation.Nullable
  public List<String> getMetricOverrides() {
    return metricOverrides;
  }

  public void setMetricOverrides(List<String> metricOverrides) {
    this.metricOverrides = metricOverrides;
  }


  public Metric metricSource(MetricSourceEnum metricSource) {
    this.metricSource = metricSource;
    return this;
  }

  /**
   * Required. A standard set of metrics is collected unless metricOverrides are specified for the metric source (see Custom metrics (https://cloud.google.com/dataproc/docs/guides/dataproc-metrics#custom_metrics) for more information).
   * @return metricSource
   */
  @javax.annotation.Nullable
  public MetricSourceEnum getMetricSource() {
    return metricSource;
  }

  public void setMetricSource(MetricSourceEnum metricSource) {
    this.metricSource = metricSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metric metric = (Metric) o;
    return Objects.equals(this.metricOverrides, metric.metricOverrides) &&
        Objects.equals(this.metricSource, metric.metricSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricOverrides, metricSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metric {\n");
    sb.append("    metricOverrides: ").append(toIndentedString(metricOverrides)).append("\n");
    sb.append("    metricSource: ").append(toIndentedString(metricSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metricOverrides");
    openapiFields.add("metricSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Metric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Metric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Metric is not found in the empty JSON string", Metric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Metric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Metric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("metricOverrides") != null && !jsonObj.get("metricOverrides").isJsonNull() && !jsonObj.get("metricOverrides").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("metricOverrides").toString()));
      }
      if ((jsonObj.get("metricSource") != null && !jsonObj.get("metricSource").isJsonNull()) && !jsonObj.get("metricSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricSource").toString()));
      }
      // validate the optional field `metricSource`
      if (jsonObj.get("metricSource") != null && !jsonObj.get("metricSource").isJsonNull()) {
        MetricSourceEnum.validateJsonElement(jsonObj.get("metricSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Metric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Metric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Metric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Metric.class));

       return (TypeAdapter<T>) new TypeAdapter<Metric>() {
           @Override
           public void write(JsonWriter out, Metric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Metric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Metric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Metric
   * @throws IOException if the JSON string is invalid with respect to Metric
   */
  public static Metric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Metric.class);
  }

  /**
   * Convert an instance of Metric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

