/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ClusterOperationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata describing the operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterOperationMetadata {
  public static final String SERIALIZED_NAME_CHILD_OPERATION_IDS = "childOperationIds";
  @SerializedName(SERIALIZED_NAME_CHILD_OPERATION_IDS)
  private List<String> childOperationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLUSTER_NAME = "clusterName";
  @SerializedName(SERIALIZED_NAME_CLUSTER_NAME)
  private String clusterName;

  public static final String SERIALIZED_NAME_CLUSTER_UUID = "clusterUuid";
  @SerializedName(SERIALIZED_NAME_CLUSTER_UUID)
  private String clusterUuid;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private String operationType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ClusterOperationStatus status;

  public static final String SERIALIZED_NAME_STATUS_HISTORY = "statusHistory";
  @SerializedName(SERIALIZED_NAME_STATUS_HISTORY)
  private List<ClusterOperationStatus> statusHistory = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<String> warnings = new ArrayList<>();

  public ClusterOperationMetadata() {
  }

  public ClusterOperationMetadata(
     List<String> childOperationIds, 
     String clusterName, 
     String clusterUuid, 
     String description, 
     Map<String, String> labels, 
     String operationType, 
     List<ClusterOperationStatus> statusHistory, 
     List<String> warnings
  ) {
    this();
    this.childOperationIds = childOperationIds;
    this.clusterName = clusterName;
    this.clusterUuid = clusterUuid;
    this.description = description;
    this.labels = labels;
    this.operationType = operationType;
    this.statusHistory = statusHistory;
    this.warnings = warnings;
  }

  /**
   * Output only. Child operation ids
   * @return childOperationIds
   */
  @javax.annotation.Nullable
  public List<String> getChildOperationIds() {
    return childOperationIds;
  }



  /**
   * Output only. Name of the cluster for the operation.
   * @return clusterName
   */
  @javax.annotation.Nullable
  public String getClusterName() {
    return clusterName;
  }



  /**
   * Output only. Cluster UUID for the operation.
   * @return clusterUuid
   */
  @javax.annotation.Nullable
  public String getClusterUuid() {
    return clusterUuid;
  }



  /**
   * Output only. Short description of operation.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Output only. Labels associated with the operation
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }



  /**
   * Output only. The operation type.
   * @return operationType
   */
  @javax.annotation.Nullable
  public String getOperationType() {
    return operationType;
  }



  public ClusterOperationMetadata status(ClusterOperationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ClusterOperationStatus getStatus() {
    return status;
  }

  public void setStatus(ClusterOperationStatus status) {
    this.status = status;
  }


  /**
   * Output only. The previous operation status.
   * @return statusHistory
   */
  @javax.annotation.Nullable
  public List<ClusterOperationStatus> getStatusHistory() {
    return statusHistory;
  }



  /**
   * Output only. Errors encountered during operation execution.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<String> getWarnings() {
    return warnings;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterOperationMetadata clusterOperationMetadata = (ClusterOperationMetadata) o;
    return Objects.equals(this.childOperationIds, clusterOperationMetadata.childOperationIds) &&
        Objects.equals(this.clusterName, clusterOperationMetadata.clusterName) &&
        Objects.equals(this.clusterUuid, clusterOperationMetadata.clusterUuid) &&
        Objects.equals(this.description, clusterOperationMetadata.description) &&
        Objects.equals(this.labels, clusterOperationMetadata.labels) &&
        Objects.equals(this.operationType, clusterOperationMetadata.operationType) &&
        Objects.equals(this.status, clusterOperationMetadata.status) &&
        Objects.equals(this.statusHistory, clusterOperationMetadata.statusHistory) &&
        Objects.equals(this.warnings, clusterOperationMetadata.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childOperationIds, clusterName, clusterUuid, description, labels, operationType, status, statusHistory, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterOperationMetadata {\n");
    sb.append("    childOperationIds: ").append(toIndentedString(childOperationIds)).append("\n");
    sb.append("    clusterName: ").append(toIndentedString(clusterName)).append("\n");
    sb.append("    clusterUuid: ").append(toIndentedString(clusterUuid)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusHistory: ").append(toIndentedString(statusHistory)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("childOperationIds");
    openapiFields.add("clusterName");
    openapiFields.add("clusterUuid");
    openapiFields.add("description");
    openapiFields.add("labels");
    openapiFields.add("operationType");
    openapiFields.add("status");
    openapiFields.add("statusHistory");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterOperationMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterOperationMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterOperationMetadata is not found in the empty JSON string", ClusterOperationMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterOperationMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterOperationMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("childOperationIds") != null && !jsonObj.get("childOperationIds").isJsonNull() && !jsonObj.get("childOperationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `childOperationIds` to be an array in the JSON string but got `%s`", jsonObj.get("childOperationIds").toString()));
      }
      if ((jsonObj.get("clusterName") != null && !jsonObj.get("clusterName").isJsonNull()) && !jsonObj.get("clusterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterName").toString()));
      }
      if ((jsonObj.get("clusterUuid") != null && !jsonObj.get("clusterUuid").isJsonNull()) && !jsonObj.get("clusterUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterUuid").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) && !jsonObj.get("operationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationType").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ClusterOperationStatus.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("statusHistory") != null && !jsonObj.get("statusHistory").isJsonNull()) {
        JsonArray jsonArraystatusHistory = jsonObj.getAsJsonArray("statusHistory");
        if (jsonArraystatusHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statusHistory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statusHistory` to be an array in the JSON string but got `%s`", jsonObj.get("statusHistory").toString()));
          }

          // validate the optional field `statusHistory` (array)
          for (int i = 0; i < jsonArraystatusHistory.size(); i++) {
            ClusterOperationStatus.validateJsonElement(jsonArraystatusHistory.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull() && !jsonObj.get("warnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterOperationMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterOperationMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterOperationMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterOperationMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterOperationMetadata>() {
           @Override
           public void write(JsonWriter out, ClusterOperationMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterOperationMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterOperationMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterOperationMetadata
   * @throws IOException if the JSON string is invalid with respect to ClusterOperationMetadata
   */
  public static ClusterOperationMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterOperationMetadata.class);
  }

  /**
   * Convert an instance of ClusterOperationMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

