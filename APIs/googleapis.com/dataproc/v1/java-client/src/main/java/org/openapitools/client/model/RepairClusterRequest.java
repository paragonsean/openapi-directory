/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NodePool;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request to repair a cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepairClusterRequest {
  public static final String SERIALIZED_NAME_CLUSTER_UUID = "clusterUuid";
  @SerializedName(SERIALIZED_NAME_CLUSTER_UUID)
  private String clusterUuid;

  public static final String SERIALIZED_NAME_GRACEFUL_DECOMMISSION_TIMEOUT = "gracefulDecommissionTimeout";
  @SerializedName(SERIALIZED_NAME_GRACEFUL_DECOMMISSION_TIMEOUT)
  private String gracefulDecommissionTimeout;

  public static final String SERIALIZED_NAME_NODE_POOLS = "nodePools";
  @SerializedName(SERIALIZED_NAME_NODE_POOLS)
  private List<NodePool> nodePools = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARENT_OPERATION_ID = "parentOperationId";
  @SerializedName(SERIALIZED_NAME_PARENT_OPERATION_ID)
  private String parentOperationId;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public RepairClusterRequest() {
  }

  public RepairClusterRequest clusterUuid(String clusterUuid) {
    this.clusterUuid = clusterUuid;
    return this;
  }

  /**
   * Optional. Specifying the cluster_uuid means the RPC will fail (with error NOT_FOUND) if a cluster with the specified UUID does not exist.
   * @return clusterUuid
   */
  @javax.annotation.Nullable
  public String getClusterUuid() {
    return clusterUuid;
  }

  public void setClusterUuid(String clusterUuid) {
    this.clusterUuid = clusterUuid;
  }


  public RepairClusterRequest gracefulDecommissionTimeout(String gracefulDecommissionTimeout) {
    this.gracefulDecommissionTimeout = gracefulDecommissionTimeout;
    return this;
  }

  /**
   * Optional. Timeout for graceful YARN decommissioning. Graceful decommissioning facilitates the removal of cluster nodes without interrupting jobs in progress. The timeout specifies the amount of time to wait for jobs finish before forcefully removing nodes. The default timeout is 0 for forceful decommissioning, and the maximum timeout period is 1 day. (see JSON Mappingâ€”Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).graceful_decommission_timeout is supported in Dataproc image versions 1.2+.
   * @return gracefulDecommissionTimeout
   */
  @javax.annotation.Nullable
  public String getGracefulDecommissionTimeout() {
    return gracefulDecommissionTimeout;
  }

  public void setGracefulDecommissionTimeout(String gracefulDecommissionTimeout) {
    this.gracefulDecommissionTimeout = gracefulDecommissionTimeout;
  }


  public RepairClusterRequest nodePools(List<NodePool> nodePools) {
    this.nodePools = nodePools;
    return this;
  }

  public RepairClusterRequest addNodePoolsItem(NodePool nodePoolsItem) {
    if (this.nodePools == null) {
      this.nodePools = new ArrayList<>();
    }
    this.nodePools.add(nodePoolsItem);
    return this;
  }

  /**
   * Optional. Node pools and corresponding repair action to be taken. All node pools should be unique in this request. i.e. Multiple entries for the same node pool id are not allowed.
   * @return nodePools
   */
  @javax.annotation.Nullable
  public List<NodePool> getNodePools() {
    return nodePools;
  }

  public void setNodePools(List<NodePool> nodePools) {
    this.nodePools = nodePools;
  }


  public RepairClusterRequest parentOperationId(String parentOperationId) {
    this.parentOperationId = parentOperationId;
    return this;
  }

  /**
   * Optional. operation id of the parent operation sending the repair request
   * @return parentOperationId
   */
  @javax.annotation.Nullable
  public String getParentOperationId() {
    return parentOperationId;
  }

  public void setParentOperationId(String parentOperationId) {
    this.parentOperationId = parentOperationId;
  }


  public RepairClusterRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Optional. A unique ID used to identify the request. If the server receives two RepairClusterRequests with the same ID, the second request is ignored, and the first google.longrunning.Operation created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepairClusterRequest repairClusterRequest = (RepairClusterRequest) o;
    return Objects.equals(this.clusterUuid, repairClusterRequest.clusterUuid) &&
        Objects.equals(this.gracefulDecommissionTimeout, repairClusterRequest.gracefulDecommissionTimeout) &&
        Objects.equals(this.nodePools, repairClusterRequest.nodePools) &&
        Objects.equals(this.parentOperationId, repairClusterRequest.parentOperationId) &&
        Objects.equals(this.requestId, repairClusterRequest.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterUuid, gracefulDecommissionTimeout, nodePools, parentOperationId, requestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepairClusterRequest {\n");
    sb.append("    clusterUuid: ").append(toIndentedString(clusterUuid)).append("\n");
    sb.append("    gracefulDecommissionTimeout: ").append(toIndentedString(gracefulDecommissionTimeout)).append("\n");
    sb.append("    nodePools: ").append(toIndentedString(nodePools)).append("\n");
    sb.append("    parentOperationId: ").append(toIndentedString(parentOperationId)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterUuid");
    openapiFields.add("gracefulDecommissionTimeout");
    openapiFields.add("nodePools");
    openapiFields.add("parentOperationId");
    openapiFields.add("requestId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepairClusterRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepairClusterRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepairClusterRequest is not found in the empty JSON string", RepairClusterRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepairClusterRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepairClusterRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clusterUuid") != null && !jsonObj.get("clusterUuid").isJsonNull()) && !jsonObj.get("clusterUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterUuid").toString()));
      }
      if ((jsonObj.get("gracefulDecommissionTimeout") != null && !jsonObj.get("gracefulDecommissionTimeout").isJsonNull()) && !jsonObj.get("gracefulDecommissionTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gracefulDecommissionTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gracefulDecommissionTimeout").toString()));
      }
      if (jsonObj.get("nodePools") != null && !jsonObj.get("nodePools").isJsonNull()) {
        JsonArray jsonArraynodePools = jsonObj.getAsJsonArray("nodePools");
        if (jsonArraynodePools != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodePools").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodePools` to be an array in the JSON string but got `%s`", jsonObj.get("nodePools").toString()));
          }

          // validate the optional field `nodePools` (array)
          for (int i = 0; i < jsonArraynodePools.size(); i++) {
            NodePool.validateJsonElement(jsonArraynodePools.get(i));
          };
        }
      }
      if ((jsonObj.get("parentOperationId") != null && !jsonObj.get("parentOperationId").isJsonNull()) && !jsonObj.get("parentOperationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentOperationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentOperationId").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepairClusterRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepairClusterRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepairClusterRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepairClusterRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RepairClusterRequest>() {
           @Override
           public void write(JsonWriter out, RepairClusterRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepairClusterRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepairClusterRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepairClusterRequest
   * @throws IOException if the JSON string is invalid with respect to RepairClusterRequest
   */
  public static RepairClusterRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepairClusterRequest.class);
  }

  /**
   * Convert an instance of RepairClusterRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

