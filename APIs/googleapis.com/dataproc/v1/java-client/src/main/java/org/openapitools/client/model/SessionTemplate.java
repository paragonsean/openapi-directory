/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.EnvironmentConfig;
import org.openapitools.client.model.JupyterConfig;
import org.openapitools.client.model.RuntimeConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A representation of a session template.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SessionTemplate {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private String creator;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENVIRONMENT_CONFIG = "environmentConfig";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_CONFIG)
  private EnvironmentConfig environmentConfig;

  public static final String SERIALIZED_NAME_JUPYTER_SESSION = "jupyterSession";
  @SerializedName(SERIALIZED_NAME_JUPYTER_SESSION)
  private JupyterConfig jupyterSession;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RUNTIME_CONFIG = "runtimeConfig";
  @SerializedName(SERIALIZED_NAME_RUNTIME_CONFIG)
  private RuntimeConfig runtimeConfig;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public SessionTemplate() {
  }

  public SessionTemplate(
     String createTime, 
     String creator, 
     String updateTime, 
     String uuid
  ) {
    this();
    this.createTime = createTime;
    this.creator = creator;
    this.updateTime = updateTime;
    this.uuid = uuid;
  }

  /**
   * Output only. The time when the template was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The email address of the user who created the template.
   * @return creator
   */
  @javax.annotation.Nullable
  public String getCreator() {
    return creator;
  }



  public SessionTemplate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Brief description of the template.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SessionTemplate environmentConfig(EnvironmentConfig environmentConfig) {
    this.environmentConfig = environmentConfig;
    return this;
  }

  /**
   * Get environmentConfig
   * @return environmentConfig
   */
  @javax.annotation.Nullable
  public EnvironmentConfig getEnvironmentConfig() {
    return environmentConfig;
  }

  public void setEnvironmentConfig(EnvironmentConfig environmentConfig) {
    this.environmentConfig = environmentConfig;
  }


  public SessionTemplate jupyterSession(JupyterConfig jupyterSession) {
    this.jupyterSession = jupyterSession;
    return this;
  }

  /**
   * Get jupyterSession
   * @return jupyterSession
   */
  @javax.annotation.Nullable
  public JupyterConfig getJupyterSession() {
    return jupyterSession;
  }

  public void setJupyterSession(JupyterConfig jupyterSession) {
    this.jupyterSession = jupyterSession;
  }


  public SessionTemplate labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public SessionTemplate putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Labels to associate with sessions created using this template. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values can be empty, but, if present, must contain 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public SessionTemplate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The resource name of the session template.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SessionTemplate runtimeConfig(RuntimeConfig runtimeConfig) {
    this.runtimeConfig = runtimeConfig;
    return this;
  }

  /**
   * Get runtimeConfig
   * @return runtimeConfig
   */
  @javax.annotation.Nullable
  public RuntimeConfig getRuntimeConfig() {
    return runtimeConfig;
  }

  public void setRuntimeConfig(RuntimeConfig runtimeConfig) {
    this.runtimeConfig = runtimeConfig;
  }


  /**
   * Output only. The time the template was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  /**
   * Output only. A session template UUID (Unique Universal Identifier). The service generates this value when it creates the session template.
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionTemplate sessionTemplate = (SessionTemplate) o;
    return Objects.equals(this.createTime, sessionTemplate.createTime) &&
        Objects.equals(this.creator, sessionTemplate.creator) &&
        Objects.equals(this.description, sessionTemplate.description) &&
        Objects.equals(this.environmentConfig, sessionTemplate.environmentConfig) &&
        Objects.equals(this.jupyterSession, sessionTemplate.jupyterSession) &&
        Objects.equals(this.labels, sessionTemplate.labels) &&
        Objects.equals(this.name, sessionTemplate.name) &&
        Objects.equals(this.runtimeConfig, sessionTemplate.runtimeConfig) &&
        Objects.equals(this.updateTime, sessionTemplate.updateTime) &&
        Objects.equals(this.uuid, sessionTemplate.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, creator, description, environmentConfig, jupyterSession, labels, name, runtimeConfig, updateTime, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionTemplate {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    environmentConfig: ").append(toIndentedString(environmentConfig)).append("\n");
    sb.append("    jupyterSession: ").append(toIndentedString(jupyterSession)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    runtimeConfig: ").append(toIndentedString(runtimeConfig)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("creator");
    openapiFields.add("description");
    openapiFields.add("environmentConfig");
    openapiFields.add("jupyterSession");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("runtimeConfig");
    openapiFields.add("updateTime");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SessionTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SessionTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SessionTemplate is not found in the empty JSON string", SessionTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SessionTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SessionTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) && !jsonObj.get("creator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `environmentConfig`
      if (jsonObj.get("environmentConfig") != null && !jsonObj.get("environmentConfig").isJsonNull()) {
        EnvironmentConfig.validateJsonElement(jsonObj.get("environmentConfig"));
      }
      // validate the optional field `jupyterSession`
      if (jsonObj.get("jupyterSession") != null && !jsonObj.get("jupyterSession").isJsonNull()) {
        JupyterConfig.validateJsonElement(jsonObj.get("jupyterSession"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `runtimeConfig`
      if (jsonObj.get("runtimeConfig") != null && !jsonObj.get("runtimeConfig").isJsonNull()) {
        RuntimeConfig.validateJsonElement(jsonObj.get("runtimeConfig"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SessionTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SessionTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SessionTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SessionTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<SessionTemplate>() {
           @Override
           public void write(JsonWriter out, SessionTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SessionTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SessionTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SessionTemplate
   * @throws IOException if the JSON string is invalid with respect to SessionTemplate
   */
  public static SessionTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SessionTemplate.class);
  }

  /**
   * Convert an instance of SessionTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

