/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RepairNodeGroupRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepairNodeGroupRequest {
  public static final String SERIALIZED_NAME_INSTANCE_NAMES = "instanceNames";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAMES)
  private List<String> instanceNames = new ArrayList<>();

  /**
   * Required. Repair action to take on specified resources of the node pool.
   */
  @JsonAdapter(RepairActionEnum.Adapter.class)
  public enum RepairActionEnum {
    REPAIR_ACTION_UNSPECIFIED("REPAIR_ACTION_UNSPECIFIED"),
    
    REPLACE("REPLACE");

    private String value;

    RepairActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepairActionEnum fromValue(String value) {
      for (RepairActionEnum b : RepairActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepairActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepairActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepairActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepairActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RepairActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPAIR_ACTION = "repairAction";
  @SerializedName(SERIALIZED_NAME_REPAIR_ACTION)
  private RepairActionEnum repairAction;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public RepairNodeGroupRequest() {
  }

  public RepairNodeGroupRequest instanceNames(List<String> instanceNames) {
    this.instanceNames = instanceNames;
    return this;
  }

  public RepairNodeGroupRequest addInstanceNamesItem(String instanceNamesItem) {
    if (this.instanceNames == null) {
      this.instanceNames = new ArrayList<>();
    }
    this.instanceNames.add(instanceNamesItem);
    return this;
  }

  /**
   * Required. Name of instances to be repaired. These instances must belong to specified node pool.
   * @return instanceNames
   */
  @javax.annotation.Nullable
  public List<String> getInstanceNames() {
    return instanceNames;
  }

  public void setInstanceNames(List<String> instanceNames) {
    this.instanceNames = instanceNames;
  }


  public RepairNodeGroupRequest repairAction(RepairActionEnum repairAction) {
    this.repairAction = repairAction;
    return this;
  }

  /**
   * Required. Repair action to take on specified resources of the node pool.
   * @return repairAction
   */
  @javax.annotation.Nullable
  public RepairActionEnum getRepairAction() {
    return repairAction;
  }

  public void setRepairAction(RepairActionEnum repairAction) {
    this.repairAction = repairAction;
  }


  public RepairNodeGroupRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Optional. A unique ID used to identify the request. If the server receives two RepairNodeGroupRequest with the same ID, the second request is ignored and the first google.longrunning.Operation created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepairNodeGroupRequest repairNodeGroupRequest = (RepairNodeGroupRequest) o;
    return Objects.equals(this.instanceNames, repairNodeGroupRequest.instanceNames) &&
        Objects.equals(this.repairAction, repairNodeGroupRequest.repairAction) &&
        Objects.equals(this.requestId, repairNodeGroupRequest.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceNames, repairAction, requestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepairNodeGroupRequest {\n");
    sb.append("    instanceNames: ").append(toIndentedString(instanceNames)).append("\n");
    sb.append("    repairAction: ").append(toIndentedString(repairAction)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instanceNames");
    openapiFields.add("repairAction");
    openapiFields.add("requestId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepairNodeGroupRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepairNodeGroupRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepairNodeGroupRequest is not found in the empty JSON string", RepairNodeGroupRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepairNodeGroupRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepairNodeGroupRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("instanceNames") != null && !jsonObj.get("instanceNames").isJsonNull() && !jsonObj.get("instanceNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceNames` to be an array in the JSON string but got `%s`", jsonObj.get("instanceNames").toString()));
      }
      if ((jsonObj.get("repairAction") != null && !jsonObj.get("repairAction").isJsonNull()) && !jsonObj.get("repairAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repairAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repairAction").toString()));
      }
      // validate the optional field `repairAction`
      if (jsonObj.get("repairAction") != null && !jsonObj.get("repairAction").isJsonNull()) {
        RepairActionEnum.validateJsonElement(jsonObj.get("repairAction"));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepairNodeGroupRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepairNodeGroupRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepairNodeGroupRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepairNodeGroupRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RepairNodeGroupRequest>() {
           @Override
           public void write(JsonWriter out, RepairNodeGroupRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepairNodeGroupRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepairNodeGroupRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepairNodeGroupRequest
   * @throws IOException if the JSON string is invalid with respect to RepairNodeGroupRequest
   */
  public static RepairNodeGroupRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepairNodeGroupRequest.class);
  }

  /**
   * Convert an instance of RepairNodeGroupRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

