/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ClusterOperation;
import org.openapitools.client.model.WorkflowGraph;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Dataproc workflow template resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowMetadata {
  public static final String SERIALIZED_NAME_CLUSTER_NAME = "clusterName";
  @SerializedName(SERIALIZED_NAME_CLUSTER_NAME)
  private String clusterName;

  public static final String SERIALIZED_NAME_CLUSTER_UUID = "clusterUuid";
  @SerializedName(SERIALIZED_NAME_CLUSTER_UUID)
  private String clusterUuid;

  public static final String SERIALIZED_NAME_CREATE_CLUSTER = "createCluster";
  @SerializedName(SERIALIZED_NAME_CREATE_CLUSTER)
  private ClusterOperation createCluster;

  public static final String SERIALIZED_NAME_DAG_END_TIME = "dagEndTime";
  @SerializedName(SERIALIZED_NAME_DAG_END_TIME)
  private String dagEndTime;

  public static final String SERIALIZED_NAME_DAG_START_TIME = "dagStartTime";
  @SerializedName(SERIALIZED_NAME_DAG_START_TIME)
  private String dagStartTime;

  public static final String SERIALIZED_NAME_DAG_TIMEOUT = "dagTimeout";
  @SerializedName(SERIALIZED_NAME_DAG_TIMEOUT)
  private String dagTimeout;

  public static final String SERIALIZED_NAME_DELETE_CLUSTER = "deleteCluster";
  @SerializedName(SERIALIZED_NAME_DELETE_CLUSTER)
  private ClusterOperation deleteCluster;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_GRAPH = "graph";
  @SerializedName(SERIALIZED_NAME_GRAPH)
  private WorkflowGraph graph;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, String> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * Output only. The workflow state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UNKNOWN("UNKNOWN"),
    
    PENDING("PENDING"),
    
    RUNNING("RUNNING"),
    
    DONE("DONE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private String template;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public WorkflowMetadata() {
  }

  public WorkflowMetadata(
     String clusterName, 
     String clusterUuid, 
     String dagEndTime, 
     String dagStartTime, 
     String dagTimeout, 
     String endTime, 
     String startTime, 
     StateEnum state, 
     String template, 
     Integer version
  ) {
    this();
    this.clusterName = clusterName;
    this.clusterUuid = clusterUuid;
    this.dagEndTime = dagEndTime;
    this.dagStartTime = dagStartTime;
    this.dagTimeout = dagTimeout;
    this.endTime = endTime;
    this.startTime = startTime;
    this.state = state;
    this.template = template;
    this.version = version;
  }

  /**
   * Output only. The name of the target cluster.
   * @return clusterName
   */
  @javax.annotation.Nullable
  public String getClusterName() {
    return clusterName;
  }



  /**
   * Output only. The UUID of target cluster.
   * @return clusterUuid
   */
  @javax.annotation.Nullable
  public String getClusterUuid() {
    return clusterUuid;
  }



  public WorkflowMetadata createCluster(ClusterOperation createCluster) {
    this.createCluster = createCluster;
    return this;
  }

  /**
   * Get createCluster
   * @return createCluster
   */
  @javax.annotation.Nullable
  public ClusterOperation getCreateCluster() {
    return createCluster;
  }

  public void setCreateCluster(ClusterOperation createCluster) {
    this.createCluster = createCluster;
  }


  /**
   * Output only. DAG end time, only set for workflows with dag_timeout when DAG ends.
   * @return dagEndTime
   */
  @javax.annotation.Nullable
  public String getDagEndTime() {
    return dagEndTime;
  }



  /**
   * Output only. DAG start time, only set for workflows with dag_timeout when DAG begins.
   * @return dagStartTime
   */
  @javax.annotation.Nullable
  public String getDagStartTime() {
    return dagStartTime;
  }



  /**
   * Output only. The timeout duration for the DAG of jobs, expressed in seconds (see JSON representation of duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).
   * @return dagTimeout
   */
  @javax.annotation.Nullable
  public String getDagTimeout() {
    return dagTimeout;
  }



  public WorkflowMetadata deleteCluster(ClusterOperation deleteCluster) {
    this.deleteCluster = deleteCluster;
    return this;
  }

  /**
   * Get deleteCluster
   * @return deleteCluster
   */
  @javax.annotation.Nullable
  public ClusterOperation getDeleteCluster() {
    return deleteCluster;
  }

  public void setDeleteCluster(ClusterOperation deleteCluster) {
    this.deleteCluster = deleteCluster;
  }


  /**
   * Output only. Workflow end time.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }



  public WorkflowMetadata graph(WorkflowGraph graph) {
    this.graph = graph;
    return this;
  }

  /**
   * Get graph
   * @return graph
   */
  @javax.annotation.Nullable
  public WorkflowGraph getGraph() {
    return graph;
  }

  public void setGraph(WorkflowGraph graph) {
    this.graph = graph;
  }


  public WorkflowMetadata parameters(Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public WorkflowMetadata putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Map from parameter names to values that were used for those parameters.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }


  /**
   * Output only. Workflow start time.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }



  /**
   * Output only. The workflow state.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The resource name of the workflow template as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
   * @return template
   */
  @javax.annotation.Nullable
  public String getTemplate() {
    return template;
  }



  /**
   * Output only. The version of template at the time of workflow instantiation.
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowMetadata workflowMetadata = (WorkflowMetadata) o;
    return Objects.equals(this.clusterName, workflowMetadata.clusterName) &&
        Objects.equals(this.clusterUuid, workflowMetadata.clusterUuid) &&
        Objects.equals(this.createCluster, workflowMetadata.createCluster) &&
        Objects.equals(this.dagEndTime, workflowMetadata.dagEndTime) &&
        Objects.equals(this.dagStartTime, workflowMetadata.dagStartTime) &&
        Objects.equals(this.dagTimeout, workflowMetadata.dagTimeout) &&
        Objects.equals(this.deleteCluster, workflowMetadata.deleteCluster) &&
        Objects.equals(this.endTime, workflowMetadata.endTime) &&
        Objects.equals(this.graph, workflowMetadata.graph) &&
        Objects.equals(this.parameters, workflowMetadata.parameters) &&
        Objects.equals(this.startTime, workflowMetadata.startTime) &&
        Objects.equals(this.state, workflowMetadata.state) &&
        Objects.equals(this.template, workflowMetadata.template) &&
        Objects.equals(this.version, workflowMetadata.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterName, clusterUuid, createCluster, dagEndTime, dagStartTime, dagTimeout, deleteCluster, endTime, graph, parameters, startTime, state, template, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowMetadata {\n");
    sb.append("    clusterName: ").append(toIndentedString(clusterName)).append("\n");
    sb.append("    clusterUuid: ").append(toIndentedString(clusterUuid)).append("\n");
    sb.append("    createCluster: ").append(toIndentedString(createCluster)).append("\n");
    sb.append("    dagEndTime: ").append(toIndentedString(dagEndTime)).append("\n");
    sb.append("    dagStartTime: ").append(toIndentedString(dagStartTime)).append("\n");
    sb.append("    dagTimeout: ").append(toIndentedString(dagTimeout)).append("\n");
    sb.append("    deleteCluster: ").append(toIndentedString(deleteCluster)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    graph: ").append(toIndentedString(graph)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterName");
    openapiFields.add("clusterUuid");
    openapiFields.add("createCluster");
    openapiFields.add("dagEndTime");
    openapiFields.add("dagStartTime");
    openapiFields.add("dagTimeout");
    openapiFields.add("deleteCluster");
    openapiFields.add("endTime");
    openapiFields.add("graph");
    openapiFields.add("parameters");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("template");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowMetadata is not found in the empty JSON string", WorkflowMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clusterName") != null && !jsonObj.get("clusterName").isJsonNull()) && !jsonObj.get("clusterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterName").toString()));
      }
      if ((jsonObj.get("clusterUuid") != null && !jsonObj.get("clusterUuid").isJsonNull()) && !jsonObj.get("clusterUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterUuid").toString()));
      }
      // validate the optional field `createCluster`
      if (jsonObj.get("createCluster") != null && !jsonObj.get("createCluster").isJsonNull()) {
        ClusterOperation.validateJsonElement(jsonObj.get("createCluster"));
      }
      if ((jsonObj.get("dagEndTime") != null && !jsonObj.get("dagEndTime").isJsonNull()) && !jsonObj.get("dagEndTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dagEndTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dagEndTime").toString()));
      }
      if ((jsonObj.get("dagStartTime") != null && !jsonObj.get("dagStartTime").isJsonNull()) && !jsonObj.get("dagStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dagStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dagStartTime").toString()));
      }
      if ((jsonObj.get("dagTimeout") != null && !jsonObj.get("dagTimeout").isJsonNull()) && !jsonObj.get("dagTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dagTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dagTimeout").toString()));
      }
      // validate the optional field `deleteCluster`
      if (jsonObj.get("deleteCluster") != null && !jsonObj.get("deleteCluster").isJsonNull()) {
        ClusterOperation.validateJsonElement(jsonObj.get("deleteCluster"));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      // validate the optional field `graph`
      if (jsonObj.get("graph") != null && !jsonObj.get("graph").isJsonNull()) {
        WorkflowGraph.validateJsonElement(jsonObj.get("graph"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) && !jsonObj.get("template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowMetadata>() {
           @Override
           public void write(JsonWriter out, WorkflowMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowMetadata
   * @throws IOException if the JSON string is invalid with respect to WorkflowMetadata
   */
  public static WorkflowMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowMetadata.class);
  }

  /**
   * Convert an instance of WorkflowMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

