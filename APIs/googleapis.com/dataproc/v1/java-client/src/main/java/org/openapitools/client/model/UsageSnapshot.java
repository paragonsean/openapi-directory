/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The usage snapshot represents the resources consumed by a workload at a specified time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsageSnapshot {
  public static final String SERIALIZED_NAME_ACCELERATOR_TYPE = "acceleratorType";
  @SerializedName(SERIALIZED_NAME_ACCELERATOR_TYPE)
  private String acceleratorType;

  public static final String SERIALIZED_NAME_MILLI_ACCELERATOR = "milliAccelerator";
  @SerializedName(SERIALIZED_NAME_MILLI_ACCELERATOR)
  private String milliAccelerator;

  public static final String SERIALIZED_NAME_MILLI_DCU = "milliDcu";
  @SerializedName(SERIALIZED_NAME_MILLI_DCU)
  private String milliDcu;

  public static final String SERIALIZED_NAME_MILLI_DCU_PREMIUM = "milliDcuPremium";
  @SerializedName(SERIALIZED_NAME_MILLI_DCU_PREMIUM)
  private String milliDcuPremium;

  public static final String SERIALIZED_NAME_SHUFFLE_STORAGE_GB = "shuffleStorageGb";
  @SerializedName(SERIALIZED_NAME_SHUFFLE_STORAGE_GB)
  private String shuffleStorageGb;

  public static final String SERIALIZED_NAME_SHUFFLE_STORAGE_GB_PREMIUM = "shuffleStorageGbPremium";
  @SerializedName(SERIALIZED_NAME_SHUFFLE_STORAGE_GB_PREMIUM)
  private String shuffleStorageGbPremium;

  public static final String SERIALIZED_NAME_SNAPSHOT_TIME = "snapshotTime";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_TIME)
  private String snapshotTime;

  public UsageSnapshot() {
  }

  public UsageSnapshot acceleratorType(String acceleratorType) {
    this.acceleratorType = acceleratorType;
    return this;
  }

  /**
   * Optional. Accelerator type being used, if any
   * @return acceleratorType
   */
  @javax.annotation.Nullable
  public String getAcceleratorType() {
    return acceleratorType;
  }

  public void setAcceleratorType(String acceleratorType) {
    this.acceleratorType = acceleratorType;
  }


  public UsageSnapshot milliAccelerator(String milliAccelerator) {
    this.milliAccelerator = milliAccelerator;
    return this;
  }

  /**
   * Optional. Milli (one-thousandth) accelerator. (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing))
   * @return milliAccelerator
   */
  @javax.annotation.Nullable
  public String getMilliAccelerator() {
    return milliAccelerator;
  }

  public void setMilliAccelerator(String milliAccelerator) {
    this.milliAccelerator = milliAccelerator;
  }


  public UsageSnapshot milliDcu(String milliDcu) {
    this.milliDcu = milliDcu;
    return this;
  }

  /**
   * Optional. Milli (one-thousandth) Dataproc Compute Units (DCUs) (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).
   * @return milliDcu
   */
  @javax.annotation.Nullable
  public String getMilliDcu() {
    return milliDcu;
  }

  public void setMilliDcu(String milliDcu) {
    this.milliDcu = milliDcu;
  }


  public UsageSnapshot milliDcuPremium(String milliDcuPremium) {
    this.milliDcuPremium = milliDcuPremium;
    return this;
  }

  /**
   * Optional. Milli (one-thousandth) Dataproc Compute Units (DCUs) charged at premium tier (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing)).
   * @return milliDcuPremium
   */
  @javax.annotation.Nullable
  public String getMilliDcuPremium() {
    return milliDcuPremium;
  }

  public void setMilliDcuPremium(String milliDcuPremium) {
    this.milliDcuPremium = milliDcuPremium;
  }


  public UsageSnapshot shuffleStorageGb(String shuffleStorageGb) {
    this.shuffleStorageGb = shuffleStorageGb;
    return this;
  }

  /**
   * Optional. Shuffle Storage in gigabytes (GB). (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing))
   * @return shuffleStorageGb
   */
  @javax.annotation.Nullable
  public String getShuffleStorageGb() {
    return shuffleStorageGb;
  }

  public void setShuffleStorageGb(String shuffleStorageGb) {
    this.shuffleStorageGb = shuffleStorageGb;
  }


  public UsageSnapshot shuffleStorageGbPremium(String shuffleStorageGbPremium) {
    this.shuffleStorageGbPremium = shuffleStorageGbPremium;
    return this;
  }

  /**
   * Optional. Shuffle Storage in gigabytes (GB) charged at premium tier. (see Dataproc Serverless pricing (https://cloud.google.com/dataproc-serverless/pricing))
   * @return shuffleStorageGbPremium
   */
  @javax.annotation.Nullable
  public String getShuffleStorageGbPremium() {
    return shuffleStorageGbPremium;
  }

  public void setShuffleStorageGbPremium(String shuffleStorageGbPremium) {
    this.shuffleStorageGbPremium = shuffleStorageGbPremium;
  }


  public UsageSnapshot snapshotTime(String snapshotTime) {
    this.snapshotTime = snapshotTime;
    return this;
  }

  /**
   * Optional. The timestamp of the usage snapshot.
   * @return snapshotTime
   */
  @javax.annotation.Nullable
  public String getSnapshotTime() {
    return snapshotTime;
  }

  public void setSnapshotTime(String snapshotTime) {
    this.snapshotTime = snapshotTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageSnapshot usageSnapshot = (UsageSnapshot) o;
    return Objects.equals(this.acceleratorType, usageSnapshot.acceleratorType) &&
        Objects.equals(this.milliAccelerator, usageSnapshot.milliAccelerator) &&
        Objects.equals(this.milliDcu, usageSnapshot.milliDcu) &&
        Objects.equals(this.milliDcuPremium, usageSnapshot.milliDcuPremium) &&
        Objects.equals(this.shuffleStorageGb, usageSnapshot.shuffleStorageGb) &&
        Objects.equals(this.shuffleStorageGbPremium, usageSnapshot.shuffleStorageGbPremium) &&
        Objects.equals(this.snapshotTime, usageSnapshot.snapshotTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceleratorType, milliAccelerator, milliDcu, milliDcuPremium, shuffleStorageGb, shuffleStorageGbPremium, snapshotTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageSnapshot {\n");
    sb.append("    acceleratorType: ").append(toIndentedString(acceleratorType)).append("\n");
    sb.append("    milliAccelerator: ").append(toIndentedString(milliAccelerator)).append("\n");
    sb.append("    milliDcu: ").append(toIndentedString(milliDcu)).append("\n");
    sb.append("    milliDcuPremium: ").append(toIndentedString(milliDcuPremium)).append("\n");
    sb.append("    shuffleStorageGb: ").append(toIndentedString(shuffleStorageGb)).append("\n");
    sb.append("    shuffleStorageGbPremium: ").append(toIndentedString(shuffleStorageGbPremium)).append("\n");
    sb.append("    snapshotTime: ").append(toIndentedString(snapshotTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceleratorType");
    openapiFields.add("milliAccelerator");
    openapiFields.add("milliDcu");
    openapiFields.add("milliDcuPremium");
    openapiFields.add("shuffleStorageGb");
    openapiFields.add("shuffleStorageGbPremium");
    openapiFields.add("snapshotTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsageSnapshot
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsageSnapshot.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsageSnapshot is not found in the empty JSON string", UsageSnapshot.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsageSnapshot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsageSnapshot` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acceleratorType") != null && !jsonObj.get("acceleratorType").isJsonNull()) && !jsonObj.get("acceleratorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceleratorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acceleratorType").toString()));
      }
      if ((jsonObj.get("milliAccelerator") != null && !jsonObj.get("milliAccelerator").isJsonNull()) && !jsonObj.get("milliAccelerator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `milliAccelerator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("milliAccelerator").toString()));
      }
      if ((jsonObj.get("milliDcu") != null && !jsonObj.get("milliDcu").isJsonNull()) && !jsonObj.get("milliDcu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `milliDcu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("milliDcu").toString()));
      }
      if ((jsonObj.get("milliDcuPremium") != null && !jsonObj.get("milliDcuPremium").isJsonNull()) && !jsonObj.get("milliDcuPremium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `milliDcuPremium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("milliDcuPremium").toString()));
      }
      if ((jsonObj.get("shuffleStorageGb") != null && !jsonObj.get("shuffleStorageGb").isJsonNull()) && !jsonObj.get("shuffleStorageGb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shuffleStorageGb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shuffleStorageGb").toString()));
      }
      if ((jsonObj.get("shuffleStorageGbPremium") != null && !jsonObj.get("shuffleStorageGbPremium").isJsonNull()) && !jsonObj.get("shuffleStorageGbPremium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shuffleStorageGbPremium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shuffleStorageGbPremium").toString()));
      }
      if ((jsonObj.get("snapshotTime") != null && !jsonObj.get("snapshotTime").isJsonNull()) && !jsonObj.get("snapshotTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshotTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snapshotTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsageSnapshot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsageSnapshot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsageSnapshot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsageSnapshot.class));

       return (TypeAdapter<T>) new TypeAdapter<UsageSnapshot>() {
           @Override
           public void write(JsonWriter out, UsageSnapshot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsageSnapshot read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsageSnapshot given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsageSnapshot
   * @throws IOException if the JSON string is invalid with respect to UsageSnapshot
   */
  public static UsageSnapshot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsageSnapshot.class);
  }

  /**
   * Convert an instance of UsageSnapshot to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

