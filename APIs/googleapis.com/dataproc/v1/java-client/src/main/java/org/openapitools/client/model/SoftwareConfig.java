/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the selection and config of software inside the cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SoftwareConfig {
  public static final String SERIALIZED_NAME_IMAGE_VERSION = "imageVersion";
  @SerializedName(SERIALIZED_NAME_IMAGE_VERSION)
  private String imageVersion;

  /**
   * Gets or Sets optionalComponents
   */
  @JsonAdapter(OptionalComponentsEnum.Adapter.class)
  public enum OptionalComponentsEnum {
    COMPONENT_UNSPECIFIED("COMPONENT_UNSPECIFIED"),
    
    ANACONDA("ANACONDA"),
    
    DOCKER("DOCKER"),
    
    DRUID("DRUID"),
    
    FLINK("FLINK"),
    
    HBASE("HBASE"),
    
    HIVE_WEBHCAT("HIVE_WEBHCAT"),
    
    HUDI("HUDI"),
    
    JUPYTER("JUPYTER"),
    
    PRESTO("PRESTO"),
    
    TRINO("TRINO"),
    
    RANGER("RANGER"),
    
    SOLR("SOLR"),
    
    ZEPPELIN("ZEPPELIN"),
    
    ZOOKEEPER("ZOOKEEPER");

    private String value;

    OptionalComponentsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptionalComponentsEnum fromValue(String value) {
      for (OptionalComponentsEnum b : OptionalComponentsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptionalComponentsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptionalComponentsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptionalComponentsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptionalComponentsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OptionalComponentsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPTIONAL_COMPONENTS = "optionalComponents";
  @SerializedName(SERIALIZED_NAME_OPTIONAL_COMPONENTS)
  private List<OptionalComponentsEnum> optionalComponents = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public SoftwareConfig() {
  }

  public SoftwareConfig imageVersion(String imageVersion) {
    this.imageVersion = imageVersion;
    return this;
  }

  /**
   * Optional. The version of software inside the cluster. It must be one of the supported Dataproc Versions (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#supported_dataproc_versions), such as \&quot;1.2\&quot; (including a subminor version, such as \&quot;1.2.29\&quot;), or the \&quot;preview\&quot; version (https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#other_versions). If unspecified, it defaults to the latest Debian version.
   * @return imageVersion
   */
  @javax.annotation.Nullable
  public String getImageVersion() {
    return imageVersion;
  }

  public void setImageVersion(String imageVersion) {
    this.imageVersion = imageVersion;
  }


  public SoftwareConfig optionalComponents(List<OptionalComponentsEnum> optionalComponents) {
    this.optionalComponents = optionalComponents;
    return this;
  }

  public SoftwareConfig addOptionalComponentsItem(OptionalComponentsEnum optionalComponentsItem) {
    if (this.optionalComponents == null) {
      this.optionalComponents = new ArrayList<>();
    }
    this.optionalComponents.add(optionalComponentsItem);
    return this;
  }

  /**
   * Optional. The set of components to activate on the cluster.
   * @return optionalComponents
   */
  @javax.annotation.Nullable
  public List<OptionalComponentsEnum> getOptionalComponents() {
    return optionalComponents;
  }

  public void setOptionalComponents(List<OptionalComponentsEnum> optionalComponents) {
    this.optionalComponents = optionalComponents;
  }


  public SoftwareConfig properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public SoftwareConfig putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Optional. The properties to set on daemon config files.Property keys are specified in prefix:property format, for example core:hadoop.tmp.dir. The following are supported prefixes and their mappings: capacity-scheduler: capacity-scheduler.xml core: core-site.xml distcp: distcp-default.xml hdfs: hdfs-site.xml hive: hive-site.xml mapred: mapred-site.xml pig: pig.properties spark: spark-defaults.conf yarn: yarn-site.xmlFor more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoftwareConfig softwareConfig = (SoftwareConfig) o;
    return Objects.equals(this.imageVersion, softwareConfig.imageVersion) &&
        Objects.equals(this.optionalComponents, softwareConfig.optionalComponents) &&
        Objects.equals(this.properties, softwareConfig.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageVersion, optionalComponents, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoftwareConfig {\n");
    sb.append("    imageVersion: ").append(toIndentedString(imageVersion)).append("\n");
    sb.append("    optionalComponents: ").append(toIndentedString(optionalComponents)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("imageVersion");
    openapiFields.add("optionalComponents");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SoftwareConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SoftwareConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SoftwareConfig is not found in the empty JSON string", SoftwareConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SoftwareConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SoftwareConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("imageVersion") != null && !jsonObj.get("imageVersion").isJsonNull()) && !jsonObj.get("imageVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageVersion").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("optionalComponents") != null && !jsonObj.get("optionalComponents").isJsonNull() && !jsonObj.get("optionalComponents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionalComponents` to be an array in the JSON string but got `%s`", jsonObj.get("optionalComponents").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SoftwareConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SoftwareConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SoftwareConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SoftwareConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SoftwareConfig>() {
           @Override
           public void write(JsonWriter out, SoftwareConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SoftwareConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SoftwareConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SoftwareConfig
   * @throws IOException if the JSON string is invalid with respect to SoftwareConfig
   */
  public static SoftwareConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SoftwareConfig.class);
  }

  /**
   * Convert an instance of SoftwareConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

