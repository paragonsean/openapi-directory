/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.LoggingConfig;
import org.openapitools.client.model.QueryList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Dataproc job for running Apache Pig (https://pig.apache.org/) queries on YARN.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PigJob {
  public static final String SERIALIZED_NAME_CONTINUE_ON_FAILURE = "continueOnFailure";
  @SerializedName(SERIALIZED_NAME_CONTINUE_ON_FAILURE)
  private Boolean continueOnFailure;

  public static final String SERIALIZED_NAME_JAR_FILE_URIS = "jarFileUris";
  @SerializedName(SERIALIZED_NAME_JAR_FILE_URIS)
  private List<String> jarFileUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGGING_CONFIG = "loggingConfig";
  @SerializedName(SERIALIZED_NAME_LOGGING_CONFIG)
  private LoggingConfig loggingConfig;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_QUERY_FILE_URI = "queryFileUri";
  @SerializedName(SERIALIZED_NAME_QUERY_FILE_URI)
  private String queryFileUri;

  public static final String SERIALIZED_NAME_QUERY_LIST = "queryList";
  @SerializedName(SERIALIZED_NAME_QUERY_LIST)
  private QueryList queryList;

  public static final String SERIALIZED_NAME_SCRIPT_VARIABLES = "scriptVariables";
  @SerializedName(SERIALIZED_NAME_SCRIPT_VARIABLES)
  private Map<String, String> scriptVariables = new HashMap<>();

  public PigJob() {
  }

  public PigJob continueOnFailure(Boolean continueOnFailure) {
    this.continueOnFailure = continueOnFailure;
    return this;
  }

  /**
   * Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
   * @return continueOnFailure
   */
  @javax.annotation.Nullable
  public Boolean getContinueOnFailure() {
    return continueOnFailure;
  }

  public void setContinueOnFailure(Boolean continueOnFailure) {
    this.continueOnFailure = continueOnFailure;
  }


  public PigJob jarFileUris(List<String> jarFileUris) {
    this.jarFileUris = jarFileUris;
    return this;
  }

  public PigJob addJarFileUrisItem(String jarFileUrisItem) {
    if (this.jarFileUris == null) {
      this.jarFileUris = new ArrayList<>();
    }
    this.jarFileUris.add(jarFileUrisItem);
    return this;
  }

  /**
   * Optional. HCFS URIs of jar files to add to the CLASSPATH of the Pig Client and Hadoop MapReduce (MR) tasks. Can contain Pig UDFs.
   * @return jarFileUris
   */
  @javax.annotation.Nullable
  public List<String> getJarFileUris() {
    return jarFileUris;
  }

  public void setJarFileUris(List<String> jarFileUris) {
    this.jarFileUris = jarFileUris;
  }


  public PigJob loggingConfig(LoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
    return this;
  }

  /**
   * Get loggingConfig
   * @return loggingConfig
   */
  @javax.annotation.Nullable
  public LoggingConfig getLoggingConfig() {
    return loggingConfig;
  }

  public void setLoggingConfig(LoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
  }


  public PigJob properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public PigJob putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Optional. A mapping of property names to values, used to configure Pig. Properties that conflict with values set by the Dataproc API might be overwritten. Can include properties set in /etc/hadoop/conf/_*-site.xml, /etc/pig/conf/pig.properties, and classes in user code.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  public PigJob queryFileUri(String queryFileUri) {
    this.queryFileUri = queryFileUri;
    return this;
  }

  /**
   * The HCFS URI of the script that contains the Pig queries.
   * @return queryFileUri
   */
  @javax.annotation.Nullable
  public String getQueryFileUri() {
    return queryFileUri;
  }

  public void setQueryFileUri(String queryFileUri) {
    this.queryFileUri = queryFileUri;
  }


  public PigJob queryList(QueryList queryList) {
    this.queryList = queryList;
    return this;
  }

  /**
   * Get queryList
   * @return queryList
   */
  @javax.annotation.Nullable
  public QueryList getQueryList() {
    return queryList;
  }

  public void setQueryList(QueryList queryList) {
    this.queryList = queryList;
  }


  public PigJob scriptVariables(Map<String, String> scriptVariables) {
    this.scriptVariables = scriptVariables;
    return this;
  }

  public PigJob putScriptVariablesItem(String key, String scriptVariablesItem) {
    if (this.scriptVariables == null) {
      this.scriptVariables = new HashMap<>();
    }
    this.scriptVariables.put(key, scriptVariablesItem);
    return this;
  }

  /**
   * Optional. Mapping of query variable names to values (equivalent to the Pig command: name&#x3D;[value]).
   * @return scriptVariables
   */
  @javax.annotation.Nullable
  public Map<String, String> getScriptVariables() {
    return scriptVariables;
  }

  public void setScriptVariables(Map<String, String> scriptVariables) {
    this.scriptVariables = scriptVariables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PigJob pigJob = (PigJob) o;
    return Objects.equals(this.continueOnFailure, pigJob.continueOnFailure) &&
        Objects.equals(this.jarFileUris, pigJob.jarFileUris) &&
        Objects.equals(this.loggingConfig, pigJob.loggingConfig) &&
        Objects.equals(this.properties, pigJob.properties) &&
        Objects.equals(this.queryFileUri, pigJob.queryFileUri) &&
        Objects.equals(this.queryList, pigJob.queryList) &&
        Objects.equals(this.scriptVariables, pigJob.scriptVariables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(continueOnFailure, jarFileUris, loggingConfig, properties, queryFileUri, queryList, scriptVariables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PigJob {\n");
    sb.append("    continueOnFailure: ").append(toIndentedString(continueOnFailure)).append("\n");
    sb.append("    jarFileUris: ").append(toIndentedString(jarFileUris)).append("\n");
    sb.append("    loggingConfig: ").append(toIndentedString(loggingConfig)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    queryFileUri: ").append(toIndentedString(queryFileUri)).append("\n");
    sb.append("    queryList: ").append(toIndentedString(queryList)).append("\n");
    sb.append("    scriptVariables: ").append(toIndentedString(scriptVariables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("continueOnFailure");
    openapiFields.add("jarFileUris");
    openapiFields.add("loggingConfig");
    openapiFields.add("properties");
    openapiFields.add("queryFileUri");
    openapiFields.add("queryList");
    openapiFields.add("scriptVariables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PigJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PigJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PigJob is not found in the empty JSON string", PigJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PigJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PigJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("jarFileUris") != null && !jsonObj.get("jarFileUris").isJsonNull() && !jsonObj.get("jarFileUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jarFileUris` to be an array in the JSON string but got `%s`", jsonObj.get("jarFileUris").toString()));
      }
      // validate the optional field `loggingConfig`
      if (jsonObj.get("loggingConfig") != null && !jsonObj.get("loggingConfig").isJsonNull()) {
        LoggingConfig.validateJsonElement(jsonObj.get("loggingConfig"));
      }
      if ((jsonObj.get("queryFileUri") != null && !jsonObj.get("queryFileUri").isJsonNull()) && !jsonObj.get("queryFileUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryFileUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryFileUri").toString()));
      }
      // validate the optional field `queryList`
      if (jsonObj.get("queryList") != null && !jsonObj.get("queryList").isJsonNull()) {
        QueryList.validateJsonElement(jsonObj.get("queryList"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PigJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PigJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PigJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PigJob.class));

       return (TypeAdapter<T>) new TypeAdapter<PigJob>() {
           @Override
           public void write(JsonWriter out, PigJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PigJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PigJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PigJob
   * @throws IOException if the JSON string is invalid with respect to PigJob
   */
  public static PigJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PigJob.class);
  }

  /**
   * Convert an instance of PigJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

