/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GkeNodePoolAcceleratorConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters that describe cluster nodes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GkeNodeConfig {
  public static final String SERIALIZED_NAME_ACCELERATORS = "accelerators";
  @SerializedName(SERIALIZED_NAME_ACCELERATORS)
  private List<GkeNodePoolAcceleratorConfig> accelerators = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOOT_DISK_KMS_KEY = "bootDiskKmsKey";
  @SerializedName(SERIALIZED_NAME_BOOT_DISK_KMS_KEY)
  private String bootDiskKmsKey;

  public static final String SERIALIZED_NAME_LOCAL_SSD_COUNT = "localSsdCount";
  @SerializedName(SERIALIZED_NAME_LOCAL_SSD_COUNT)
  private Integer localSsdCount;

  public static final String SERIALIZED_NAME_MACHINE_TYPE = "machineType";
  @SerializedName(SERIALIZED_NAME_MACHINE_TYPE)
  private String machineType;

  public static final String SERIALIZED_NAME_MIN_CPU_PLATFORM = "minCpuPlatform";
  @SerializedName(SERIALIZED_NAME_MIN_CPU_PLATFORM)
  private String minCpuPlatform;

  public static final String SERIALIZED_NAME_PREEMPTIBLE = "preemptible";
  @SerializedName(SERIALIZED_NAME_PREEMPTIBLE)
  private Boolean preemptible;

  public static final String SERIALIZED_NAME_SPOT = "spot";
  @SerializedName(SERIALIZED_NAME_SPOT)
  private Boolean spot;

  public GkeNodeConfig() {
  }

  public GkeNodeConfig accelerators(List<GkeNodePoolAcceleratorConfig> accelerators) {
    this.accelerators = accelerators;
    return this;
  }

  public GkeNodeConfig addAcceleratorsItem(GkeNodePoolAcceleratorConfig acceleratorsItem) {
    if (this.accelerators == null) {
      this.accelerators = new ArrayList<>();
    }
    this.accelerators.add(acceleratorsItem);
    return this;
  }

  /**
   * Optional. A list of hardware accelerators (https://cloud.google.com/compute/docs/gpus) to attach to each node.
   * @return accelerators
   */
  @javax.annotation.Nullable
  public List<GkeNodePoolAcceleratorConfig> getAccelerators() {
    return accelerators;
  }

  public void setAccelerators(List<GkeNodePoolAcceleratorConfig> accelerators) {
    this.accelerators = accelerators;
  }


  public GkeNodeConfig bootDiskKmsKey(String bootDiskKmsKey) {
    this.bootDiskKmsKey = bootDiskKmsKey;
    return this;
  }

  /**
   * Optional. The Customer Managed Encryption Key (CMEK) (https://cloud.google.com/kubernetes-engine/docs/how-to/using-cmek) used to encrypt the boot disk attached to each node in the node pool. Specify the key using the following format: projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}
   * @return bootDiskKmsKey
   */
  @javax.annotation.Nullable
  public String getBootDiskKmsKey() {
    return bootDiskKmsKey;
  }

  public void setBootDiskKmsKey(String bootDiskKmsKey) {
    this.bootDiskKmsKey = bootDiskKmsKey;
  }


  public GkeNodeConfig localSsdCount(Integer localSsdCount) {
    this.localSsdCount = localSsdCount;
    return this;
  }

  /**
   * Optional. The number of local SSD disks to attach to the node, which is limited by the maximum number of disks allowable per zone (see Adding Local SSDs (https://cloud.google.com/compute/docs/disks/local-ssd)).
   * @return localSsdCount
   */
  @javax.annotation.Nullable
  public Integer getLocalSsdCount() {
    return localSsdCount;
  }

  public void setLocalSsdCount(Integer localSsdCount) {
    this.localSsdCount = localSsdCount;
  }


  public GkeNodeConfig machineType(String machineType) {
    this.machineType = machineType;
    return this;
  }

  /**
   * Optional. The name of a Compute Engine machine type (https://cloud.google.com/compute/docs/machine-types).
   * @return machineType
   */
  @javax.annotation.Nullable
  public String getMachineType() {
    return machineType;
  }

  public void setMachineType(String machineType) {
    this.machineType = machineType;
  }


  public GkeNodeConfig minCpuPlatform(String minCpuPlatform) {
    this.minCpuPlatform = minCpuPlatform;
    return this;
  }

  /**
   * Optional. Minimum CPU platform (https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) to be used by this instance. The instance may be scheduled on the specified or a newer CPU platform. Specify the friendly names of CPU platforms, such as \&quot;Intel Haswell\&quot;&#x60; or Intel Sandy Bridge\&quot;.
   * @return minCpuPlatform
   */
  @javax.annotation.Nullable
  public String getMinCpuPlatform() {
    return minCpuPlatform;
  }

  public void setMinCpuPlatform(String minCpuPlatform) {
    this.minCpuPlatform = minCpuPlatform;
  }


  public GkeNodeConfig preemptible(Boolean preemptible) {
    this.preemptible = preemptible;
    return this;
  }

  /**
   * Optional. Whether the nodes are created as legacy preemptible VM instances (https://cloud.google.com/compute/docs/instances/preemptible). Also see Spot VMs, preemptible VM instances without a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the CONTROLLER role or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).
   * @return preemptible
   */
  @javax.annotation.Nullable
  public Boolean getPreemptible() {
    return preemptible;
  }

  public void setPreemptible(Boolean preemptible) {
    this.preemptible = preemptible;
  }


  public GkeNodeConfig spot(Boolean spot) {
    this.spot = spot;
    return this;
  }

  /**
   * Optional. Whether the nodes are created as Spot VM instances (https://cloud.google.com/compute/docs/instances/spot). Spot VMs are the latest update to legacy preemptible VMs. Spot VMs do not have a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the CONTROLLER role or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).
   * @return spot
   */
  @javax.annotation.Nullable
  public Boolean getSpot() {
    return spot;
  }

  public void setSpot(Boolean spot) {
    this.spot = spot;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GkeNodeConfig gkeNodeConfig = (GkeNodeConfig) o;
    return Objects.equals(this.accelerators, gkeNodeConfig.accelerators) &&
        Objects.equals(this.bootDiskKmsKey, gkeNodeConfig.bootDiskKmsKey) &&
        Objects.equals(this.localSsdCount, gkeNodeConfig.localSsdCount) &&
        Objects.equals(this.machineType, gkeNodeConfig.machineType) &&
        Objects.equals(this.minCpuPlatform, gkeNodeConfig.minCpuPlatform) &&
        Objects.equals(this.preemptible, gkeNodeConfig.preemptible) &&
        Objects.equals(this.spot, gkeNodeConfig.spot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accelerators, bootDiskKmsKey, localSsdCount, machineType, minCpuPlatform, preemptible, spot);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GkeNodeConfig {\n");
    sb.append("    accelerators: ").append(toIndentedString(accelerators)).append("\n");
    sb.append("    bootDiskKmsKey: ").append(toIndentedString(bootDiskKmsKey)).append("\n");
    sb.append("    localSsdCount: ").append(toIndentedString(localSsdCount)).append("\n");
    sb.append("    machineType: ").append(toIndentedString(machineType)).append("\n");
    sb.append("    minCpuPlatform: ").append(toIndentedString(minCpuPlatform)).append("\n");
    sb.append("    preemptible: ").append(toIndentedString(preemptible)).append("\n");
    sb.append("    spot: ").append(toIndentedString(spot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accelerators");
    openapiFields.add("bootDiskKmsKey");
    openapiFields.add("localSsdCount");
    openapiFields.add("machineType");
    openapiFields.add("minCpuPlatform");
    openapiFields.add("preemptible");
    openapiFields.add("spot");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GkeNodeConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GkeNodeConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GkeNodeConfig is not found in the empty JSON string", GkeNodeConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GkeNodeConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GkeNodeConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accelerators") != null && !jsonObj.get("accelerators").isJsonNull()) {
        JsonArray jsonArrayaccelerators = jsonObj.getAsJsonArray("accelerators");
        if (jsonArrayaccelerators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accelerators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accelerators` to be an array in the JSON string but got `%s`", jsonObj.get("accelerators").toString()));
          }

          // validate the optional field `accelerators` (array)
          for (int i = 0; i < jsonArrayaccelerators.size(); i++) {
            GkeNodePoolAcceleratorConfig.validateJsonElement(jsonArrayaccelerators.get(i));
          };
        }
      }
      if ((jsonObj.get("bootDiskKmsKey") != null && !jsonObj.get("bootDiskKmsKey").isJsonNull()) && !jsonObj.get("bootDiskKmsKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bootDiskKmsKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bootDiskKmsKey").toString()));
      }
      if ((jsonObj.get("machineType") != null && !jsonObj.get("machineType").isJsonNull()) && !jsonObj.get("machineType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineType").toString()));
      }
      if ((jsonObj.get("minCpuPlatform") != null && !jsonObj.get("minCpuPlatform").isJsonNull()) && !jsonObj.get("minCpuPlatform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minCpuPlatform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minCpuPlatform").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GkeNodeConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GkeNodeConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GkeNodeConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GkeNodeConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GkeNodeConfig>() {
           @Override
           public void write(JsonWriter out, GkeNodeConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GkeNodeConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GkeNodeConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GkeNodeConfig
   * @throws IOException if the JSON string is invalid with respect to GkeNodeConfig
   */
  public static GkeNodeConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GkeNodeConfig.class);
  }

  /**
   * Convert an instance of GkeNodeConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

