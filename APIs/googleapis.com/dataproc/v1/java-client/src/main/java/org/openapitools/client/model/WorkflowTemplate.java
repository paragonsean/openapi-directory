/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig;
import org.openapitools.client.model.OrderedJob;
import org.openapitools.client.model.TemplateParameter;
import org.openapitools.client.model.WorkflowTemplatePlacement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Dataproc workflow template resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowTemplate {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DAG_TIMEOUT = "dagTimeout";
  @SerializedName(SERIALIZED_NAME_DAG_TIMEOUT)
  private String dagTimeout;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIG = "encryptionConfig";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIG)
  private GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig encryptionConfig;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JOBS = "jobs";
  @SerializedName(SERIALIZED_NAME_JOBS)
  private List<OrderedJob> jobs = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<TemplateParameter> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLACEMENT = "placement";
  @SerializedName(SERIALIZED_NAME_PLACEMENT)
  private WorkflowTemplatePlacement placement;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public WorkflowTemplate() {
  }

  public WorkflowTemplate(
     String createTime, 
     String name, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The time template was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public WorkflowTemplate dagTimeout(String dagTimeout) {
    this.dagTimeout = dagTimeout;
    return this;
  }

  /**
   * Optional. Timeout duration for the DAG of jobs, expressed in seconds (see JSON representation of duration (https://developers.google.com/protocol-buffers/docs/proto3#json)). The timeout duration must be from 10 minutes (\&quot;600s\&quot;) to 24 hours (\&quot;86400s\&quot;). The timer begins when the first job is submitted. If the workflow is running at the end of the timeout period, any remaining jobs are cancelled, the workflow is ended, and if the workflow was running on a managed cluster, the cluster is deleted.
   * @return dagTimeout
   */
  @javax.annotation.Nullable
  public String getDagTimeout() {
    return dagTimeout;
  }

  public void setDagTimeout(String dagTimeout) {
    this.dagTimeout = dagTimeout;
  }


  public WorkflowTemplate encryptionConfig(GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
    return this;
  }

  /**
   * Get encryptionConfig
   * @return encryptionConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig getEncryptionConfig() {
    return encryptionConfig;
  }

  public void setEncryptionConfig(GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
  }


  public WorkflowTemplate id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public WorkflowTemplate jobs(List<OrderedJob> jobs) {
    this.jobs = jobs;
    return this;
  }

  public WorkflowTemplate addJobsItem(OrderedJob jobsItem) {
    if (this.jobs == null) {
      this.jobs = new ArrayList<>();
    }
    this.jobs.add(jobsItem);
    return this;
  }

  /**
   * Required. The Directed Acyclic Graph of Jobs to submit.
   * @return jobs
   */
  @javax.annotation.Nullable
  public List<OrderedJob> getJobs() {
    return jobs;
  }

  public void setJobs(List<OrderedJob> jobs) {
    this.jobs = jobs;
  }


  public WorkflowTemplate labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public WorkflowTemplate putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. The labels to associate with this template. These labels will be propagated to all jobs and clusters created by the workflow instance.Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt).Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt).No more than 32 labels can be associated with a template.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. The resource name of the workflow template, as described in https://cloud.google.com/apis/design/resource_names. For projects.regions.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/regions/{region}/workflowTemplates/{template_id} For projects.locations.workflowTemplates, the resource name of the template has the following format: projects/{project_id}/locations/{location}/workflowTemplates/{template_id}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public WorkflowTemplate parameters(List<TemplateParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public WorkflowTemplate addParametersItem(TemplateParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * Optional. Template parameters whose values are substituted into the template. Values for parameters must be provided when the template is instantiated.
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<TemplateParameter> getParameters() {
    return parameters;
  }

  public void setParameters(List<TemplateParameter> parameters) {
    this.parameters = parameters;
  }


  public WorkflowTemplate placement(WorkflowTemplatePlacement placement) {
    this.placement = placement;
    return this;
  }

  /**
   * Get placement
   * @return placement
   */
  @javax.annotation.Nullable
  public WorkflowTemplatePlacement getPlacement() {
    return placement;
  }

  public void setPlacement(WorkflowTemplatePlacement placement) {
    this.placement = placement;
  }


  /**
   * Output only. The time template was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public WorkflowTemplate version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Optional. Used to perform a consistent read-modify-write.This field should be left blank for a CreateWorkflowTemplate request. It is required for an UpdateWorkflowTemplate request, and must match the current server version. A typical update template flow would fetch the current template with a GetWorkflowTemplate request, which will return the current template with the version field filled in with the current server version. The user updates other fields in the template, then returns it as part of the UpdateWorkflowTemplate request.
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowTemplate workflowTemplate = (WorkflowTemplate) o;
    return Objects.equals(this.createTime, workflowTemplate.createTime) &&
        Objects.equals(this.dagTimeout, workflowTemplate.dagTimeout) &&
        Objects.equals(this.encryptionConfig, workflowTemplate.encryptionConfig) &&
        Objects.equals(this.id, workflowTemplate.id) &&
        Objects.equals(this.jobs, workflowTemplate.jobs) &&
        Objects.equals(this.labels, workflowTemplate.labels) &&
        Objects.equals(this.name, workflowTemplate.name) &&
        Objects.equals(this.parameters, workflowTemplate.parameters) &&
        Objects.equals(this.placement, workflowTemplate.placement) &&
        Objects.equals(this.updateTime, workflowTemplate.updateTime) &&
        Objects.equals(this.version, workflowTemplate.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, dagTimeout, encryptionConfig, id, jobs, labels, name, parameters, placement, updateTime, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowTemplate {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    dagTimeout: ").append(toIndentedString(dagTimeout)).append("\n");
    sb.append("    encryptionConfig: ").append(toIndentedString(encryptionConfig)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobs: ").append(toIndentedString(jobs)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    placement: ").append(toIndentedString(placement)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("dagTimeout");
    openapiFields.add("encryptionConfig");
    openapiFields.add("id");
    openapiFields.add("jobs");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("parameters");
    openapiFields.add("placement");
    openapiFields.add("updateTime");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowTemplate is not found in the empty JSON string", WorkflowTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("dagTimeout") != null && !jsonObj.get("dagTimeout").isJsonNull()) && !jsonObj.get("dagTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dagTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dagTimeout").toString()));
      }
      // validate the optional field `encryptionConfig`
      if (jsonObj.get("encryptionConfig") != null && !jsonObj.get("encryptionConfig").isJsonNull()) {
        GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig.validateJsonElement(jsonObj.get("encryptionConfig"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("jobs") != null && !jsonObj.get("jobs").isJsonNull()) {
        JsonArray jsonArrayjobs = jsonObj.getAsJsonArray("jobs");
        if (jsonArrayjobs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jobs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jobs` to be an array in the JSON string but got `%s`", jsonObj.get("jobs").toString()));
          }

          // validate the optional field `jobs` (array)
          for (int i = 0; i < jsonArrayjobs.size(); i++) {
            OrderedJob.validateJsonElement(jsonArrayjobs.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
          }

          // validate the optional field `parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            TemplateParameter.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      // validate the optional field `placement`
      if (jsonObj.get("placement") != null && !jsonObj.get("placement").isJsonNull()) {
        WorkflowTemplatePlacement.validateJsonElement(jsonObj.get("placement"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowTemplate>() {
           @Override
           public void write(JsonWriter out, WorkflowTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowTemplate
   * @throws IOException if the JSON string is invalid with respect to WorkflowTemplate
   */
  public static WorkflowTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowTemplate.class);
  }

  /**
   * Convert an instance of WorkflowTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

