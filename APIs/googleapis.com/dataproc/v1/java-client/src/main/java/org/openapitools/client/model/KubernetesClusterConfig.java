/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GkeClusterConfig;
import org.openapitools.client.model.KubernetesSoftwareConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration for running the Dataproc cluster on Kubernetes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KubernetesClusterConfig {
  public static final String SERIALIZED_NAME_GKE_CLUSTER_CONFIG = "gkeClusterConfig";
  @SerializedName(SERIALIZED_NAME_GKE_CLUSTER_CONFIG)
  private GkeClusterConfig gkeClusterConfig;

  public static final String SERIALIZED_NAME_KUBERNETES_NAMESPACE = "kubernetesNamespace";
  @SerializedName(SERIALIZED_NAME_KUBERNETES_NAMESPACE)
  private String kubernetesNamespace;

  public static final String SERIALIZED_NAME_KUBERNETES_SOFTWARE_CONFIG = "kubernetesSoftwareConfig";
  @SerializedName(SERIALIZED_NAME_KUBERNETES_SOFTWARE_CONFIG)
  private KubernetesSoftwareConfig kubernetesSoftwareConfig;

  public KubernetesClusterConfig() {
  }

  public KubernetesClusterConfig gkeClusterConfig(GkeClusterConfig gkeClusterConfig) {
    this.gkeClusterConfig = gkeClusterConfig;
    return this;
  }

  /**
   * Get gkeClusterConfig
   * @return gkeClusterConfig
   */
  @javax.annotation.Nullable
  public GkeClusterConfig getGkeClusterConfig() {
    return gkeClusterConfig;
  }

  public void setGkeClusterConfig(GkeClusterConfig gkeClusterConfig) {
    this.gkeClusterConfig = gkeClusterConfig;
  }


  public KubernetesClusterConfig kubernetesNamespace(String kubernetesNamespace) {
    this.kubernetesNamespace = kubernetesNamespace;
    return this;
  }

  /**
   * Optional. A namespace within the Kubernetes cluster to deploy into. If this namespace does not exist, it is created. If it exists, Dataproc verifies that another Dataproc VirtualCluster is not installed into it. If not specified, the name of the Dataproc Cluster is used.
   * @return kubernetesNamespace
   */
  @javax.annotation.Nullable
  public String getKubernetesNamespace() {
    return kubernetesNamespace;
  }

  public void setKubernetesNamespace(String kubernetesNamespace) {
    this.kubernetesNamespace = kubernetesNamespace;
  }


  public KubernetesClusterConfig kubernetesSoftwareConfig(KubernetesSoftwareConfig kubernetesSoftwareConfig) {
    this.kubernetesSoftwareConfig = kubernetesSoftwareConfig;
    return this;
  }

  /**
   * Get kubernetesSoftwareConfig
   * @return kubernetesSoftwareConfig
   */
  @javax.annotation.Nullable
  public KubernetesSoftwareConfig getKubernetesSoftwareConfig() {
    return kubernetesSoftwareConfig;
  }

  public void setKubernetesSoftwareConfig(KubernetesSoftwareConfig kubernetesSoftwareConfig) {
    this.kubernetesSoftwareConfig = kubernetesSoftwareConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KubernetesClusterConfig kubernetesClusterConfig = (KubernetesClusterConfig) o;
    return Objects.equals(this.gkeClusterConfig, kubernetesClusterConfig.gkeClusterConfig) &&
        Objects.equals(this.kubernetesNamespace, kubernetesClusterConfig.kubernetesNamespace) &&
        Objects.equals(this.kubernetesSoftwareConfig, kubernetesClusterConfig.kubernetesSoftwareConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gkeClusterConfig, kubernetesNamespace, kubernetesSoftwareConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KubernetesClusterConfig {\n");
    sb.append("    gkeClusterConfig: ").append(toIndentedString(gkeClusterConfig)).append("\n");
    sb.append("    kubernetesNamespace: ").append(toIndentedString(kubernetesNamespace)).append("\n");
    sb.append("    kubernetesSoftwareConfig: ").append(toIndentedString(kubernetesSoftwareConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gkeClusterConfig");
    openapiFields.add("kubernetesNamespace");
    openapiFields.add("kubernetesSoftwareConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KubernetesClusterConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KubernetesClusterConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KubernetesClusterConfig is not found in the empty JSON string", KubernetesClusterConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KubernetesClusterConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KubernetesClusterConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `gkeClusterConfig`
      if (jsonObj.get("gkeClusterConfig") != null && !jsonObj.get("gkeClusterConfig").isJsonNull()) {
        GkeClusterConfig.validateJsonElement(jsonObj.get("gkeClusterConfig"));
      }
      if ((jsonObj.get("kubernetesNamespace") != null && !jsonObj.get("kubernetesNamespace").isJsonNull()) && !jsonObj.get("kubernetesNamespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kubernetesNamespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kubernetesNamespace").toString()));
      }
      // validate the optional field `kubernetesSoftwareConfig`
      if (jsonObj.get("kubernetesSoftwareConfig") != null && !jsonObj.get("kubernetesSoftwareConfig").isJsonNull()) {
        KubernetesSoftwareConfig.validateJsonElement(jsonObj.get("kubernetesSoftwareConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KubernetesClusterConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KubernetesClusterConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KubernetesClusterConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KubernetesClusterConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<KubernetesClusterConfig>() {
           @Override
           public void write(JsonWriter out, KubernetesClusterConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KubernetesClusterConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KubernetesClusterConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KubernetesClusterConfig
   * @throws IOException if the JSON string is invalid with respect to KubernetesClusterConfig
   */
  public static KubernetesClusterConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KubernetesClusterConfig.class);
  }

  /**
   * Convert an instance of KubernetesClusterConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

