/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A configuration for running Apache Spark SQL (https://spark.apache.org/sql/) queries as a batch workload.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SparkSqlBatch {
  public static final String SERIALIZED_NAME_JAR_FILE_URIS = "jarFileUris";
  @SerializedName(SERIALIZED_NAME_JAR_FILE_URIS)
  private List<String> jarFileUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY_FILE_URI = "queryFileUri";
  @SerializedName(SERIALIZED_NAME_QUERY_FILE_URI)
  private String queryFileUri;

  public static final String SERIALIZED_NAME_QUERY_VARIABLES = "queryVariables";
  @SerializedName(SERIALIZED_NAME_QUERY_VARIABLES)
  private Map<String, String> queryVariables = new HashMap<>();

  public SparkSqlBatch() {
  }

  public SparkSqlBatch jarFileUris(List<String> jarFileUris) {
    this.jarFileUris = jarFileUris;
    return this;
  }

  public SparkSqlBatch addJarFileUrisItem(String jarFileUrisItem) {
    if (this.jarFileUris == null) {
      this.jarFileUris = new ArrayList<>();
    }
    this.jarFileUris.add(jarFileUrisItem);
    return this;
  }

  /**
   * Optional. HCFS URIs of jar files to be added to the Spark CLASSPATH.
   * @return jarFileUris
   */
  @javax.annotation.Nullable
  public List<String> getJarFileUris() {
    return jarFileUris;
  }

  public void setJarFileUris(List<String> jarFileUris) {
    this.jarFileUris = jarFileUris;
  }


  public SparkSqlBatch queryFileUri(String queryFileUri) {
    this.queryFileUri = queryFileUri;
    return this;
  }

  /**
   * Required. The HCFS URI of the script that contains Spark SQL queries to execute.
   * @return queryFileUri
   */
  @javax.annotation.Nullable
  public String getQueryFileUri() {
    return queryFileUri;
  }

  public void setQueryFileUri(String queryFileUri) {
    this.queryFileUri = queryFileUri;
  }


  public SparkSqlBatch queryVariables(Map<String, String> queryVariables) {
    this.queryVariables = queryVariables;
    return this;
  }

  public SparkSqlBatch putQueryVariablesItem(String key, String queryVariablesItem) {
    if (this.queryVariables == null) {
      this.queryVariables = new HashMap<>();
    }
    this.queryVariables.put(key, queryVariablesItem);
    return this;
  }

  /**
   * Optional. Mapping of query variable names to values (equivalent to the Spark SQL command: SET name&#x3D;\&quot;value\&quot;;).
   * @return queryVariables
   */
  @javax.annotation.Nullable
  public Map<String, String> getQueryVariables() {
    return queryVariables;
  }

  public void setQueryVariables(Map<String, String> queryVariables) {
    this.queryVariables = queryVariables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SparkSqlBatch sparkSqlBatch = (SparkSqlBatch) o;
    return Objects.equals(this.jarFileUris, sparkSqlBatch.jarFileUris) &&
        Objects.equals(this.queryFileUri, sparkSqlBatch.queryFileUri) &&
        Objects.equals(this.queryVariables, sparkSqlBatch.queryVariables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jarFileUris, queryFileUri, queryVariables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SparkSqlBatch {\n");
    sb.append("    jarFileUris: ").append(toIndentedString(jarFileUris)).append("\n");
    sb.append("    queryFileUri: ").append(toIndentedString(queryFileUri)).append("\n");
    sb.append("    queryVariables: ").append(toIndentedString(queryVariables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jarFileUris");
    openapiFields.add("queryFileUri");
    openapiFields.add("queryVariables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SparkSqlBatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SparkSqlBatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SparkSqlBatch is not found in the empty JSON string", SparkSqlBatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SparkSqlBatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SparkSqlBatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("jarFileUris") != null && !jsonObj.get("jarFileUris").isJsonNull() && !jsonObj.get("jarFileUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jarFileUris` to be an array in the JSON string but got `%s`", jsonObj.get("jarFileUris").toString()));
      }
      if ((jsonObj.get("queryFileUri") != null && !jsonObj.get("queryFileUri").isJsonNull()) && !jsonObj.get("queryFileUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryFileUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryFileUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SparkSqlBatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SparkSqlBatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SparkSqlBatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SparkSqlBatch.class));

       return (TypeAdapter<T>) new TypeAdapter<SparkSqlBatch>() {
           @Override
           public void write(JsonWriter out, SparkSqlBatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SparkSqlBatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SparkSqlBatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SparkSqlBatch
   * @throws IOException if the JSON string is invalid with respect to SparkSqlBatch
   */
  public static SparkSqlBatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SparkSqlBatch.class);
  }

  /**
   * Convert an instance of SparkSqlBatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

