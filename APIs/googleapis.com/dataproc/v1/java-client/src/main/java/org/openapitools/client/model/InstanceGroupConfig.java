/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AcceleratorConfig;
import org.openapitools.client.model.DiskConfig;
import org.openapitools.client.model.InstanceFlexibilityPolicy;
import org.openapitools.client.model.InstanceReference;
import org.openapitools.client.model.ManagedGroupConfig;
import org.openapitools.client.model.StartupConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The config settings for Compute Engine resources in an instance group, such as a master or worker group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceGroupConfig {
  public static final String SERIALIZED_NAME_ACCELERATORS = "accelerators";
  @SerializedName(SERIALIZED_NAME_ACCELERATORS)
  private List<AcceleratorConfig> accelerators = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISK_CONFIG = "diskConfig";
  @SerializedName(SERIALIZED_NAME_DISK_CONFIG)
  private DiskConfig diskConfig;

  public static final String SERIALIZED_NAME_IMAGE_URI = "imageUri";
  @SerializedName(SERIALIZED_NAME_IMAGE_URI)
  private String imageUri;

  public static final String SERIALIZED_NAME_INSTANCE_FLEXIBILITY_POLICY = "instanceFlexibilityPolicy";
  @SerializedName(SERIALIZED_NAME_INSTANCE_FLEXIBILITY_POLICY)
  private InstanceFlexibilityPolicy instanceFlexibilityPolicy;

  public static final String SERIALIZED_NAME_INSTANCE_NAMES = "instanceNames";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAMES)
  private List<String> instanceNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTANCE_REFERENCES = "instanceReferences";
  @SerializedName(SERIALIZED_NAME_INSTANCE_REFERENCES)
  private List<InstanceReference> instanceReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_PREEMPTIBLE = "isPreemptible";
  @SerializedName(SERIALIZED_NAME_IS_PREEMPTIBLE)
  private Boolean isPreemptible;

  public static final String SERIALIZED_NAME_MACHINE_TYPE_URI = "machineTypeUri";
  @SerializedName(SERIALIZED_NAME_MACHINE_TYPE_URI)
  private String machineTypeUri;

  public static final String SERIALIZED_NAME_MANAGED_GROUP_CONFIG = "managedGroupConfig";
  @SerializedName(SERIALIZED_NAME_MANAGED_GROUP_CONFIG)
  private ManagedGroupConfig managedGroupConfig;

  public static final String SERIALIZED_NAME_MIN_CPU_PLATFORM = "minCpuPlatform";
  @SerializedName(SERIALIZED_NAME_MIN_CPU_PLATFORM)
  private String minCpuPlatform;

  public static final String SERIALIZED_NAME_MIN_NUM_INSTANCES = "minNumInstances";
  @SerializedName(SERIALIZED_NAME_MIN_NUM_INSTANCES)
  private Integer minNumInstances;

  public static final String SERIALIZED_NAME_NUM_INSTANCES = "numInstances";
  @SerializedName(SERIALIZED_NAME_NUM_INSTANCES)
  private Integer numInstances;

  /**
   * Optional. Specifies the preemptibility of the instance group.The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed.The default value for secondary instances is PREEMPTIBLE.
   */
  @JsonAdapter(PreemptibilityEnum.Adapter.class)
  public enum PreemptibilityEnum {
    PREEMPTIBILITY_UNSPECIFIED("PREEMPTIBILITY_UNSPECIFIED"),
    
    NON_PREEMPTIBLE("NON_PREEMPTIBLE"),
    
    PREEMPTIBLE("PREEMPTIBLE"),
    
    SPOT("SPOT");

    private String value;

    PreemptibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PreemptibilityEnum fromValue(String value) {
      for (PreemptibilityEnum b : PreemptibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PreemptibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreemptibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PreemptibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PreemptibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PreemptibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PREEMPTIBILITY = "preemptibility";
  @SerializedName(SERIALIZED_NAME_PREEMPTIBILITY)
  private PreemptibilityEnum preemptibility;

  public static final String SERIALIZED_NAME_STARTUP_CONFIG = "startupConfig";
  @SerializedName(SERIALIZED_NAME_STARTUP_CONFIG)
  private StartupConfig startupConfig;

  public InstanceGroupConfig() {
  }

  public InstanceGroupConfig(
     List<String> instanceNames, 
     List<InstanceReference> instanceReferences, 
     Boolean isPreemptible
  ) {
    this();
    this.instanceNames = instanceNames;
    this.instanceReferences = instanceReferences;
    this.isPreemptible = isPreemptible;
  }

  public InstanceGroupConfig accelerators(List<AcceleratorConfig> accelerators) {
    this.accelerators = accelerators;
    return this;
  }

  public InstanceGroupConfig addAcceleratorsItem(AcceleratorConfig acceleratorsItem) {
    if (this.accelerators == null) {
      this.accelerators = new ArrayList<>();
    }
    this.accelerators.add(acceleratorsItem);
    return this;
  }

  /**
   * Optional. The Compute Engine accelerator configuration for these instances.
   * @return accelerators
   */
  @javax.annotation.Nullable
  public List<AcceleratorConfig> getAccelerators() {
    return accelerators;
  }

  public void setAccelerators(List<AcceleratorConfig> accelerators) {
    this.accelerators = accelerators;
  }


  public InstanceGroupConfig diskConfig(DiskConfig diskConfig) {
    this.diskConfig = diskConfig;
    return this;
  }

  /**
   * Get diskConfig
   * @return diskConfig
   */
  @javax.annotation.Nullable
  public DiskConfig getDiskConfig() {
    return diskConfig;
  }

  public void setDiskConfig(DiskConfig diskConfig) {
    this.diskConfig = diskConfig;
  }


  public InstanceGroupConfig imageUri(String imageUri) {
    this.imageUri = imageUri;
    return this;
  }

  /**
   * Optional. The Compute Engine image resource used for cluster instances.The URI can represent an image or image family.Image examples: https://www.googleapis.com/compute/v1/projects/[project_id]/global/images/[image-id] projects/[project_id]/global/images/[image-id] image-idImage family examples. Dataproc will use the most recent image from the family: https://www.googleapis.com/compute/v1/projects/[project_id]/global/images/family/[custom-image-family-name] projects/[project_id]/global/images/family/[custom-image-family-name]If the URI is unspecified, it will be inferred from SoftwareConfig.image_version or the system default.
   * @return imageUri
   */
  @javax.annotation.Nullable
  public String getImageUri() {
    return imageUri;
  }

  public void setImageUri(String imageUri) {
    this.imageUri = imageUri;
  }


  public InstanceGroupConfig instanceFlexibilityPolicy(InstanceFlexibilityPolicy instanceFlexibilityPolicy) {
    this.instanceFlexibilityPolicy = instanceFlexibilityPolicy;
    return this;
  }

  /**
   * Get instanceFlexibilityPolicy
   * @return instanceFlexibilityPolicy
   */
  @javax.annotation.Nullable
  public InstanceFlexibilityPolicy getInstanceFlexibilityPolicy() {
    return instanceFlexibilityPolicy;
  }

  public void setInstanceFlexibilityPolicy(InstanceFlexibilityPolicy instanceFlexibilityPolicy) {
    this.instanceFlexibilityPolicy = instanceFlexibilityPolicy;
  }


  /**
   * Output only. The list of instance names. Dataproc derives the names from cluster_name, num_instances, and the instance group.
   * @return instanceNames
   */
  @javax.annotation.Nullable
  public List<String> getInstanceNames() {
    return instanceNames;
  }



  /**
   * Output only. List of references to Compute Engine instances.
   * @return instanceReferences
   */
  @javax.annotation.Nullable
  public List<InstanceReference> getInstanceReferences() {
    return instanceReferences;
  }



  /**
   * Output only. Specifies that this instance group contains preemptible instances.
   * @return isPreemptible
   */
  @javax.annotation.Nullable
  public Boolean getIsPreemptible() {
    return isPreemptible;
  }



  public InstanceGroupConfig machineTypeUri(String machineTypeUri) {
    this.machineTypeUri = machineTypeUri;
    return this;
  }

  /**
   * Optional. The Compute Engine machine type used for cluster instances.A full URL, partial URI, or short name are valid. Examples: https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone]/machineTypes/n1-standard-2 projects/[project_id]/zones/[zone]/machineTypes/n1-standard-2 n1-standard-2Auto Zone Exception: If you are using the Dataproc Auto Zone Placement (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, n1-standard-2.
   * @return machineTypeUri
   */
  @javax.annotation.Nullable
  public String getMachineTypeUri() {
    return machineTypeUri;
  }

  public void setMachineTypeUri(String machineTypeUri) {
    this.machineTypeUri = machineTypeUri;
  }


  public InstanceGroupConfig managedGroupConfig(ManagedGroupConfig managedGroupConfig) {
    this.managedGroupConfig = managedGroupConfig;
    return this;
  }

  /**
   * Get managedGroupConfig
   * @return managedGroupConfig
   */
  @javax.annotation.Nullable
  public ManagedGroupConfig getManagedGroupConfig() {
    return managedGroupConfig;
  }

  public void setManagedGroupConfig(ManagedGroupConfig managedGroupConfig) {
    this.managedGroupConfig = managedGroupConfig;
  }


  public InstanceGroupConfig minCpuPlatform(String minCpuPlatform) {
    this.minCpuPlatform = minCpuPlatform;
    return this;
  }

  /**
   * Optional. Specifies the minimum cpu platform for the Instance Group. See Dataproc -&gt; Minimum CPU Platform (https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
   * @return minCpuPlatform
   */
  @javax.annotation.Nullable
  public String getMinCpuPlatform() {
    return minCpuPlatform;
  }

  public void setMinCpuPlatform(String minCpuPlatform) {
    this.minCpuPlatform = minCpuPlatform;
  }


  public InstanceGroupConfig minNumInstances(Integer minNumInstances) {
    this.minNumInstances = minNumInstances;
    return this;
  }

  /**
   * Optional. The minimum number of primary worker instances to create. If min_num_instances is set, cluster creation will succeed if the number of primary workers created is at least equal to the min_num_instances number.Example: Cluster creation request with num_instances &#x3D; 5 and min_num_instances &#x3D; 3: If 4 VMs are created and 1 instance fails, the failed VM is deleted. The cluster is resized to 4 instances and placed in a RUNNING state. If 2 instances are created and 3 instances fail, the cluster in placed in an ERROR state. The failed VMs are not deleted.
   * @return minNumInstances
   */
  @javax.annotation.Nullable
  public Integer getMinNumInstances() {
    return minNumInstances;
  }

  public void setMinNumInstances(Integer minNumInstances) {
    this.minNumInstances = minNumInstances;
  }


  public InstanceGroupConfig numInstances(Integer numInstances) {
    this.numInstances = numInstances;
    return this;
  }

  /**
   * Optional. The number of VM instances in the instance group. For HA cluster master_config groups, must be set to 3. For standard cluster master_config groups, must be set to 1.
   * @return numInstances
   */
  @javax.annotation.Nullable
  public Integer getNumInstances() {
    return numInstances;
  }

  public void setNumInstances(Integer numInstances) {
    this.numInstances = numInstances;
  }


  public InstanceGroupConfig preemptibility(PreemptibilityEnum preemptibility) {
    this.preemptibility = preemptibility;
    return this;
  }

  /**
   * Optional. Specifies the preemptibility of the instance group.The default value for master and worker groups is NON_PREEMPTIBLE. This default cannot be changed.The default value for secondary instances is PREEMPTIBLE.
   * @return preemptibility
   */
  @javax.annotation.Nullable
  public PreemptibilityEnum getPreemptibility() {
    return preemptibility;
  }

  public void setPreemptibility(PreemptibilityEnum preemptibility) {
    this.preemptibility = preemptibility;
  }


  public InstanceGroupConfig startupConfig(StartupConfig startupConfig) {
    this.startupConfig = startupConfig;
    return this;
  }

  /**
   * Get startupConfig
   * @return startupConfig
   */
  @javax.annotation.Nullable
  public StartupConfig getStartupConfig() {
    return startupConfig;
  }

  public void setStartupConfig(StartupConfig startupConfig) {
    this.startupConfig = startupConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceGroupConfig instanceGroupConfig = (InstanceGroupConfig) o;
    return Objects.equals(this.accelerators, instanceGroupConfig.accelerators) &&
        Objects.equals(this.diskConfig, instanceGroupConfig.diskConfig) &&
        Objects.equals(this.imageUri, instanceGroupConfig.imageUri) &&
        Objects.equals(this.instanceFlexibilityPolicy, instanceGroupConfig.instanceFlexibilityPolicy) &&
        Objects.equals(this.instanceNames, instanceGroupConfig.instanceNames) &&
        Objects.equals(this.instanceReferences, instanceGroupConfig.instanceReferences) &&
        Objects.equals(this.isPreemptible, instanceGroupConfig.isPreemptible) &&
        Objects.equals(this.machineTypeUri, instanceGroupConfig.machineTypeUri) &&
        Objects.equals(this.managedGroupConfig, instanceGroupConfig.managedGroupConfig) &&
        Objects.equals(this.minCpuPlatform, instanceGroupConfig.minCpuPlatform) &&
        Objects.equals(this.minNumInstances, instanceGroupConfig.minNumInstances) &&
        Objects.equals(this.numInstances, instanceGroupConfig.numInstances) &&
        Objects.equals(this.preemptibility, instanceGroupConfig.preemptibility) &&
        Objects.equals(this.startupConfig, instanceGroupConfig.startupConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accelerators, diskConfig, imageUri, instanceFlexibilityPolicy, instanceNames, instanceReferences, isPreemptible, machineTypeUri, managedGroupConfig, minCpuPlatform, minNumInstances, numInstances, preemptibility, startupConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceGroupConfig {\n");
    sb.append("    accelerators: ").append(toIndentedString(accelerators)).append("\n");
    sb.append("    diskConfig: ").append(toIndentedString(diskConfig)).append("\n");
    sb.append("    imageUri: ").append(toIndentedString(imageUri)).append("\n");
    sb.append("    instanceFlexibilityPolicy: ").append(toIndentedString(instanceFlexibilityPolicy)).append("\n");
    sb.append("    instanceNames: ").append(toIndentedString(instanceNames)).append("\n");
    sb.append("    instanceReferences: ").append(toIndentedString(instanceReferences)).append("\n");
    sb.append("    isPreemptible: ").append(toIndentedString(isPreemptible)).append("\n");
    sb.append("    machineTypeUri: ").append(toIndentedString(machineTypeUri)).append("\n");
    sb.append("    managedGroupConfig: ").append(toIndentedString(managedGroupConfig)).append("\n");
    sb.append("    minCpuPlatform: ").append(toIndentedString(minCpuPlatform)).append("\n");
    sb.append("    minNumInstances: ").append(toIndentedString(minNumInstances)).append("\n");
    sb.append("    numInstances: ").append(toIndentedString(numInstances)).append("\n");
    sb.append("    preemptibility: ").append(toIndentedString(preemptibility)).append("\n");
    sb.append("    startupConfig: ").append(toIndentedString(startupConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accelerators");
    openapiFields.add("diskConfig");
    openapiFields.add("imageUri");
    openapiFields.add("instanceFlexibilityPolicy");
    openapiFields.add("instanceNames");
    openapiFields.add("instanceReferences");
    openapiFields.add("isPreemptible");
    openapiFields.add("machineTypeUri");
    openapiFields.add("managedGroupConfig");
    openapiFields.add("minCpuPlatform");
    openapiFields.add("minNumInstances");
    openapiFields.add("numInstances");
    openapiFields.add("preemptibility");
    openapiFields.add("startupConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceGroupConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceGroupConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceGroupConfig is not found in the empty JSON string", InstanceGroupConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceGroupConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceGroupConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accelerators") != null && !jsonObj.get("accelerators").isJsonNull()) {
        JsonArray jsonArrayaccelerators = jsonObj.getAsJsonArray("accelerators");
        if (jsonArrayaccelerators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accelerators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accelerators` to be an array in the JSON string but got `%s`", jsonObj.get("accelerators").toString()));
          }

          // validate the optional field `accelerators` (array)
          for (int i = 0; i < jsonArrayaccelerators.size(); i++) {
            AcceleratorConfig.validateJsonElement(jsonArrayaccelerators.get(i));
          };
        }
      }
      // validate the optional field `diskConfig`
      if (jsonObj.get("diskConfig") != null && !jsonObj.get("diskConfig").isJsonNull()) {
        DiskConfig.validateJsonElement(jsonObj.get("diskConfig"));
      }
      if ((jsonObj.get("imageUri") != null && !jsonObj.get("imageUri").isJsonNull()) && !jsonObj.get("imageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUri").toString()));
      }
      // validate the optional field `instanceFlexibilityPolicy`
      if (jsonObj.get("instanceFlexibilityPolicy") != null && !jsonObj.get("instanceFlexibilityPolicy").isJsonNull()) {
        InstanceFlexibilityPolicy.validateJsonElement(jsonObj.get("instanceFlexibilityPolicy"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("instanceNames") != null && !jsonObj.get("instanceNames").isJsonNull() && !jsonObj.get("instanceNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceNames` to be an array in the JSON string but got `%s`", jsonObj.get("instanceNames").toString()));
      }
      if (jsonObj.get("instanceReferences") != null && !jsonObj.get("instanceReferences").isJsonNull()) {
        JsonArray jsonArrayinstanceReferences = jsonObj.getAsJsonArray("instanceReferences");
        if (jsonArrayinstanceReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instanceReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instanceReferences` to be an array in the JSON string but got `%s`", jsonObj.get("instanceReferences").toString()));
          }

          // validate the optional field `instanceReferences` (array)
          for (int i = 0; i < jsonArrayinstanceReferences.size(); i++) {
            InstanceReference.validateJsonElement(jsonArrayinstanceReferences.get(i));
          };
        }
      }
      if ((jsonObj.get("machineTypeUri") != null && !jsonObj.get("machineTypeUri").isJsonNull()) && !jsonObj.get("machineTypeUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineTypeUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineTypeUri").toString()));
      }
      // validate the optional field `managedGroupConfig`
      if (jsonObj.get("managedGroupConfig") != null && !jsonObj.get("managedGroupConfig").isJsonNull()) {
        ManagedGroupConfig.validateJsonElement(jsonObj.get("managedGroupConfig"));
      }
      if ((jsonObj.get("minCpuPlatform") != null && !jsonObj.get("minCpuPlatform").isJsonNull()) && !jsonObj.get("minCpuPlatform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minCpuPlatform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minCpuPlatform").toString()));
      }
      if ((jsonObj.get("preemptibility") != null && !jsonObj.get("preemptibility").isJsonNull()) && !jsonObj.get("preemptibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preemptibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preemptibility").toString()));
      }
      // validate the optional field `preemptibility`
      if (jsonObj.get("preemptibility") != null && !jsonObj.get("preemptibility").isJsonNull()) {
        PreemptibilityEnum.validateJsonElement(jsonObj.get("preemptibility"));
      }
      // validate the optional field `startupConfig`
      if (jsonObj.get("startupConfig") != null && !jsonObj.get("startupConfig").isJsonNull()) {
        StartupConfig.validateJsonElement(jsonObj.get("startupConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceGroupConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceGroupConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceGroupConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceGroupConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceGroupConfig>() {
           @Override
           public void write(JsonWriter out, InstanceGroupConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceGroupConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceGroupConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceGroupConfig
   * @throws IOException if the JSON string is invalid with respect to InstanceGroupConfig
   */
  public static InstanceGroupConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceGroupConfig.class);
  }

  /**
   * Convert an instance of InstanceGroupConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

