/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.LoggingConfig;
import org.openapitools.client.model.QueryList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Dataproc job for running Presto (https://prestosql.io/) queries. IMPORTANT: The Dataproc Presto Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/presto) must be enabled when the cluster is created to submit a Presto job to the cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrestoJob {
  public static final String SERIALIZED_NAME_CLIENT_TAGS = "clientTags";
  @SerializedName(SERIALIZED_NAME_CLIENT_TAGS)
  private List<String> clientTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTINUE_ON_FAILURE = "continueOnFailure";
  @SerializedName(SERIALIZED_NAME_CONTINUE_ON_FAILURE)
  private Boolean continueOnFailure;

  public static final String SERIALIZED_NAME_LOGGING_CONFIG = "loggingConfig";
  @SerializedName(SERIALIZED_NAME_LOGGING_CONFIG)
  private LoggingConfig loggingConfig;

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT = "outputFormat";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT)
  private String outputFormat;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_QUERY_FILE_URI = "queryFileUri";
  @SerializedName(SERIALIZED_NAME_QUERY_FILE_URI)
  private String queryFileUri;

  public static final String SERIALIZED_NAME_QUERY_LIST = "queryList";
  @SerializedName(SERIALIZED_NAME_QUERY_LIST)
  private QueryList queryList;

  public PrestoJob() {
  }

  public PrestoJob clientTags(List<String> clientTags) {
    this.clientTags = clientTags;
    return this;
  }

  public PrestoJob addClientTagsItem(String clientTagsItem) {
    if (this.clientTags == null) {
      this.clientTags = new ArrayList<>();
    }
    this.clientTags.add(clientTagsItem);
    return this;
  }

  /**
   * Optional. Presto client tags to attach to this query
   * @return clientTags
   */
  @javax.annotation.Nullable
  public List<String> getClientTags() {
    return clientTags;
  }

  public void setClientTags(List<String> clientTags) {
    this.clientTags = clientTags;
  }


  public PrestoJob continueOnFailure(Boolean continueOnFailure) {
    this.continueOnFailure = continueOnFailure;
    return this;
  }

  /**
   * Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
   * @return continueOnFailure
   */
  @javax.annotation.Nullable
  public Boolean getContinueOnFailure() {
    return continueOnFailure;
  }

  public void setContinueOnFailure(Boolean continueOnFailure) {
    this.continueOnFailure = continueOnFailure;
  }


  public PrestoJob loggingConfig(LoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
    return this;
  }

  /**
   * Get loggingConfig
   * @return loggingConfig
   */
  @javax.annotation.Nullable
  public LoggingConfig getLoggingConfig() {
    return loggingConfig;
  }

  public void setLoggingConfig(LoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
  }


  public PrestoJob outputFormat(String outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

  /**
   * Optional. The format in which query output will be displayed. See the Presto documentation for supported output formats
   * @return outputFormat
   */
  @javax.annotation.Nullable
  public String getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(String outputFormat) {
    this.outputFormat = outputFormat;
  }


  public PrestoJob properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public PrestoJob putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Optional. A mapping of property names to values. Used to set Presto session properties (https://prestodb.io/docs/current/sql/set-session.html) Equivalent to using the --session flag in the Presto CLI
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  public PrestoJob queryFileUri(String queryFileUri) {
    this.queryFileUri = queryFileUri;
    return this;
  }

  /**
   * The HCFS URI of the script that contains SQL queries.
   * @return queryFileUri
   */
  @javax.annotation.Nullable
  public String getQueryFileUri() {
    return queryFileUri;
  }

  public void setQueryFileUri(String queryFileUri) {
    this.queryFileUri = queryFileUri;
  }


  public PrestoJob queryList(QueryList queryList) {
    this.queryList = queryList;
    return this;
  }

  /**
   * Get queryList
   * @return queryList
   */
  @javax.annotation.Nullable
  public QueryList getQueryList() {
    return queryList;
  }

  public void setQueryList(QueryList queryList) {
    this.queryList = queryList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrestoJob prestoJob = (PrestoJob) o;
    return Objects.equals(this.clientTags, prestoJob.clientTags) &&
        Objects.equals(this.continueOnFailure, prestoJob.continueOnFailure) &&
        Objects.equals(this.loggingConfig, prestoJob.loggingConfig) &&
        Objects.equals(this.outputFormat, prestoJob.outputFormat) &&
        Objects.equals(this.properties, prestoJob.properties) &&
        Objects.equals(this.queryFileUri, prestoJob.queryFileUri) &&
        Objects.equals(this.queryList, prestoJob.queryList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientTags, continueOnFailure, loggingConfig, outputFormat, properties, queryFileUri, queryList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrestoJob {\n");
    sb.append("    clientTags: ").append(toIndentedString(clientTags)).append("\n");
    sb.append("    continueOnFailure: ").append(toIndentedString(continueOnFailure)).append("\n");
    sb.append("    loggingConfig: ").append(toIndentedString(loggingConfig)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    queryFileUri: ").append(toIndentedString(queryFileUri)).append("\n");
    sb.append("    queryList: ").append(toIndentedString(queryList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientTags");
    openapiFields.add("continueOnFailure");
    openapiFields.add("loggingConfig");
    openapiFields.add("outputFormat");
    openapiFields.add("properties");
    openapiFields.add("queryFileUri");
    openapiFields.add("queryList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrestoJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrestoJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrestoJob is not found in the empty JSON string", PrestoJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrestoJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrestoJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("clientTags") != null && !jsonObj.get("clientTags").isJsonNull() && !jsonObj.get("clientTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientTags` to be an array in the JSON string but got `%s`", jsonObj.get("clientTags").toString()));
      }
      // validate the optional field `loggingConfig`
      if (jsonObj.get("loggingConfig") != null && !jsonObj.get("loggingConfig").isJsonNull()) {
        LoggingConfig.validateJsonElement(jsonObj.get("loggingConfig"));
      }
      if ((jsonObj.get("outputFormat") != null && !jsonObj.get("outputFormat").isJsonNull()) && !jsonObj.get("outputFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputFormat").toString()));
      }
      if ((jsonObj.get("queryFileUri") != null && !jsonObj.get("queryFileUri").isJsonNull()) && !jsonObj.get("queryFileUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryFileUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryFileUri").toString()));
      }
      // validate the optional field `queryList`
      if (jsonObj.get("queryList") != null && !jsonObj.get("queryList").isJsonNull()) {
        QueryList.validateJsonElement(jsonObj.get("queryList"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrestoJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrestoJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrestoJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrestoJob.class));

       return (TypeAdapter<T>) new TypeAdapter<PrestoJob>() {
           @Override
           public void write(JsonWriter out, PrestoJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrestoJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrestoJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrestoJob
   * @throws IOException if the JSON string is invalid with respect to PrestoJob
   */
  public static PrestoJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrestoJob.class);
  }

  /**
   * Convert an instance of PrestoJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

