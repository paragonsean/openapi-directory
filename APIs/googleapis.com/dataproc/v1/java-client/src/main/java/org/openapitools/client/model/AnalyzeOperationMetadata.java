/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata describing the Analyze operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalyzeOperationMetadata {
  public static final String SERIALIZED_NAME_ANALYZED_WORKLOAD_NAME = "analyzedWorkloadName";
  @SerializedName(SERIALIZED_NAME_ANALYZED_WORKLOAD_NAME)
  private String analyzedWorkloadName;

  /**
   * Output only. Type of the workload being analyzed.
   */
  @JsonAdapter(AnalyzedWorkloadTypeEnum.Adapter.class)
  public enum AnalyzedWorkloadTypeEnum {
    WORKLOAD_TYPE_UNSPECIFIED("WORKLOAD_TYPE_UNSPECIFIED"),
    
    BATCH("BATCH");

    private String value;

    AnalyzedWorkloadTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnalyzedWorkloadTypeEnum fromValue(String value) {
      for (AnalyzedWorkloadTypeEnum b : AnalyzedWorkloadTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnalyzedWorkloadTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnalyzedWorkloadTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnalyzedWorkloadTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnalyzedWorkloadTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnalyzedWorkloadTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANALYZED_WORKLOAD_TYPE = "analyzedWorkloadType";
  @SerializedName(SERIALIZED_NAME_ANALYZED_WORKLOAD_TYPE)
  private AnalyzedWorkloadTypeEnum analyzedWorkloadType;

  public static final String SERIALIZED_NAME_ANALYZED_WORKLOAD_UUID = "analyzedWorkloadUuid";
  @SerializedName(SERIALIZED_NAME_ANALYZED_WORKLOAD_UUID)
  private String analyzedWorkloadUuid;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DONE_TIME = "doneTime";
  @SerializedName(SERIALIZED_NAME_DONE_TIME)
  private String doneTime;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<String> warnings = new ArrayList<>();

  public AnalyzeOperationMetadata() {
  }

  public AnalyzeOperationMetadata(
     String analyzedWorkloadName, 
     AnalyzedWorkloadTypeEnum analyzedWorkloadType, 
     String analyzedWorkloadUuid, 
     String createTime, 
     String description, 
     String doneTime, 
     Map<String, String> labels, 
     List<String> warnings
  ) {
    this();
    this.analyzedWorkloadName = analyzedWorkloadName;
    this.analyzedWorkloadType = analyzedWorkloadType;
    this.analyzedWorkloadUuid = analyzedWorkloadUuid;
    this.createTime = createTime;
    this.description = description;
    this.doneTime = doneTime;
    this.labels = labels;
    this.warnings = warnings;
  }

  /**
   * Output only. name of the workload being analyzed.
   * @return analyzedWorkloadName
   */
  @javax.annotation.Nullable
  public String getAnalyzedWorkloadName() {
    return analyzedWorkloadName;
  }



  /**
   * Output only. Type of the workload being analyzed.
   * @return analyzedWorkloadType
   */
  @javax.annotation.Nullable
  public AnalyzedWorkloadTypeEnum getAnalyzedWorkloadType() {
    return analyzedWorkloadType;
  }



  /**
   * Output only. unique identifier of the workload typically generated by control plane. E.g. batch uuid.
   * @return analyzedWorkloadUuid
   */
  @javax.annotation.Nullable
  public String getAnalyzedWorkloadUuid() {
    return analyzedWorkloadUuid;
  }



  /**
   * Output only. The time when the operation was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. Short description of the operation.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Output only. The time when the operation finished.
   * @return doneTime
   */
  @javax.annotation.Nullable
  public String getDoneTime() {
    return doneTime;
  }



  /**
   * Output only. Labels associated with the operation.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }



  /**
   * Output only. Warnings encountered during operation execution.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<String> getWarnings() {
    return warnings;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzeOperationMetadata analyzeOperationMetadata = (AnalyzeOperationMetadata) o;
    return Objects.equals(this.analyzedWorkloadName, analyzeOperationMetadata.analyzedWorkloadName) &&
        Objects.equals(this.analyzedWorkloadType, analyzeOperationMetadata.analyzedWorkloadType) &&
        Objects.equals(this.analyzedWorkloadUuid, analyzeOperationMetadata.analyzedWorkloadUuid) &&
        Objects.equals(this.createTime, analyzeOperationMetadata.createTime) &&
        Objects.equals(this.description, analyzeOperationMetadata.description) &&
        Objects.equals(this.doneTime, analyzeOperationMetadata.doneTime) &&
        Objects.equals(this.labels, analyzeOperationMetadata.labels) &&
        Objects.equals(this.warnings, analyzeOperationMetadata.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyzedWorkloadName, analyzedWorkloadType, analyzedWorkloadUuid, createTime, description, doneTime, labels, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzeOperationMetadata {\n");
    sb.append("    analyzedWorkloadName: ").append(toIndentedString(analyzedWorkloadName)).append("\n");
    sb.append("    analyzedWorkloadType: ").append(toIndentedString(analyzedWorkloadType)).append("\n");
    sb.append("    analyzedWorkloadUuid: ").append(toIndentedString(analyzedWorkloadUuid)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    doneTime: ").append(toIndentedString(doneTime)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analyzedWorkloadName");
    openapiFields.add("analyzedWorkloadType");
    openapiFields.add("analyzedWorkloadUuid");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("doneTime");
    openapiFields.add("labels");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyzeOperationMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyzeOperationMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyzeOperationMetadata is not found in the empty JSON string", AnalyzeOperationMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyzeOperationMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyzeOperationMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("analyzedWorkloadName") != null && !jsonObj.get("analyzedWorkloadName").isJsonNull()) && !jsonObj.get("analyzedWorkloadName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analyzedWorkloadName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analyzedWorkloadName").toString()));
      }
      if ((jsonObj.get("analyzedWorkloadType") != null && !jsonObj.get("analyzedWorkloadType").isJsonNull()) && !jsonObj.get("analyzedWorkloadType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analyzedWorkloadType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analyzedWorkloadType").toString()));
      }
      // validate the optional field `analyzedWorkloadType`
      if (jsonObj.get("analyzedWorkloadType") != null && !jsonObj.get("analyzedWorkloadType").isJsonNull()) {
        AnalyzedWorkloadTypeEnum.validateJsonElement(jsonObj.get("analyzedWorkloadType"));
      }
      if ((jsonObj.get("analyzedWorkloadUuid") != null && !jsonObj.get("analyzedWorkloadUuid").isJsonNull()) && !jsonObj.get("analyzedWorkloadUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analyzedWorkloadUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analyzedWorkloadUuid").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("doneTime") != null && !jsonObj.get("doneTime").isJsonNull()) && !jsonObj.get("doneTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doneTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doneTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull() && !jsonObj.get("warnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyzeOperationMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyzeOperationMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyzeOperationMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyzeOperationMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyzeOperationMetadata>() {
           @Override
           public void write(JsonWriter out, AnalyzeOperationMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyzeOperationMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyzeOperationMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyzeOperationMetadata
   * @throws IOException if the JSON string is invalid with respect to AnalyzeOperationMetadata
   */
  public static AnalyzeOperationMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyzeOperationMetadata.class);
  }

  /**
   * Convert an instance of AnalyzeOperationMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

