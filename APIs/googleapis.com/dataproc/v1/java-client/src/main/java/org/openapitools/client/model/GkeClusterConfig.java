/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GkeNodePoolTarget;
import org.openapitools.client.model.NamespacedGkeDeploymentTarget;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The cluster&#39;s GKE config.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GkeClusterConfig {
  public static final String SERIALIZED_NAME_GKE_CLUSTER_TARGET = "gkeClusterTarget";
  @SerializedName(SERIALIZED_NAME_GKE_CLUSTER_TARGET)
  private String gkeClusterTarget;

  public static final String SERIALIZED_NAME_NAMESPACED_GKE_DEPLOYMENT_TARGET = "namespacedGkeDeploymentTarget";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_NAMESPACED_GKE_DEPLOYMENT_TARGET)
  private NamespacedGkeDeploymentTarget namespacedGkeDeploymentTarget;

  public static final String SERIALIZED_NAME_NODE_POOL_TARGET = "nodePoolTarget";
  @SerializedName(SERIALIZED_NAME_NODE_POOL_TARGET)
  private List<GkeNodePoolTarget> nodePoolTarget = new ArrayList<>();

  public GkeClusterConfig() {
  }

  public GkeClusterConfig gkeClusterTarget(String gkeClusterTarget) {
    this.gkeClusterTarget = gkeClusterTarget;
    return this;
  }

  /**
   * Optional. A target GKE cluster to deploy to. It must be in the same project and region as the Dataproc cluster (the GKE cluster can be zonal or regional). Format: &#39;projects/{project}/locations/{location}/clusters/{cluster_id}&#39;
   * @return gkeClusterTarget
   */
  @javax.annotation.Nullable
  public String getGkeClusterTarget() {
    return gkeClusterTarget;
  }

  public void setGkeClusterTarget(String gkeClusterTarget) {
    this.gkeClusterTarget = gkeClusterTarget;
  }


  @Deprecated
  public GkeClusterConfig namespacedGkeDeploymentTarget(NamespacedGkeDeploymentTarget namespacedGkeDeploymentTarget) {
    this.namespacedGkeDeploymentTarget = namespacedGkeDeploymentTarget;
    return this;
  }

  /**
   * Get namespacedGkeDeploymentTarget
   * @return namespacedGkeDeploymentTarget
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public NamespacedGkeDeploymentTarget getNamespacedGkeDeploymentTarget() {
    return namespacedGkeDeploymentTarget;
  }

  @Deprecated
  public void setNamespacedGkeDeploymentTarget(NamespacedGkeDeploymentTarget namespacedGkeDeploymentTarget) {
    this.namespacedGkeDeploymentTarget = namespacedGkeDeploymentTarget;
  }


  public GkeClusterConfig nodePoolTarget(List<GkeNodePoolTarget> nodePoolTarget) {
    this.nodePoolTarget = nodePoolTarget;
    return this;
  }

  public GkeClusterConfig addNodePoolTargetItem(GkeNodePoolTarget nodePoolTargetItem) {
    if (this.nodePoolTarget == null) {
      this.nodePoolTarget = new ArrayList<>();
    }
    this.nodePoolTarget.add(nodePoolTargetItem);
    return this;
  }

  /**
   * Optional. GKE node pools where workloads will be scheduled. At least one node pool must be assigned the DEFAULT GkeNodePoolTarget.Role. If a GkeNodePoolTarget is not specified, Dataproc constructs a DEFAULT GkeNodePoolTarget. Each role can be given to only one GkeNodePoolTarget. All node pools must have the same location settings.
   * @return nodePoolTarget
   */
  @javax.annotation.Nullable
  public List<GkeNodePoolTarget> getNodePoolTarget() {
    return nodePoolTarget;
  }

  public void setNodePoolTarget(List<GkeNodePoolTarget> nodePoolTarget) {
    this.nodePoolTarget = nodePoolTarget;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GkeClusterConfig gkeClusterConfig = (GkeClusterConfig) o;
    return Objects.equals(this.gkeClusterTarget, gkeClusterConfig.gkeClusterTarget) &&
        Objects.equals(this.namespacedGkeDeploymentTarget, gkeClusterConfig.namespacedGkeDeploymentTarget) &&
        Objects.equals(this.nodePoolTarget, gkeClusterConfig.nodePoolTarget);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gkeClusterTarget, namespacedGkeDeploymentTarget, nodePoolTarget);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GkeClusterConfig {\n");
    sb.append("    gkeClusterTarget: ").append(toIndentedString(gkeClusterTarget)).append("\n");
    sb.append("    namespacedGkeDeploymentTarget: ").append(toIndentedString(namespacedGkeDeploymentTarget)).append("\n");
    sb.append("    nodePoolTarget: ").append(toIndentedString(nodePoolTarget)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gkeClusterTarget");
    openapiFields.add("namespacedGkeDeploymentTarget");
    openapiFields.add("nodePoolTarget");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GkeClusterConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GkeClusterConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GkeClusterConfig is not found in the empty JSON string", GkeClusterConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GkeClusterConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GkeClusterConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gkeClusterTarget") != null && !jsonObj.get("gkeClusterTarget").isJsonNull()) && !jsonObj.get("gkeClusterTarget").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gkeClusterTarget` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gkeClusterTarget").toString()));
      }
      // validate the optional field `namespacedGkeDeploymentTarget`
      if (jsonObj.get("namespacedGkeDeploymentTarget") != null && !jsonObj.get("namespacedGkeDeploymentTarget").isJsonNull()) {
        NamespacedGkeDeploymentTarget.validateJsonElement(jsonObj.get("namespacedGkeDeploymentTarget"));
      }
      if (jsonObj.get("nodePoolTarget") != null && !jsonObj.get("nodePoolTarget").isJsonNull()) {
        JsonArray jsonArraynodePoolTarget = jsonObj.getAsJsonArray("nodePoolTarget");
        if (jsonArraynodePoolTarget != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodePoolTarget").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodePoolTarget` to be an array in the JSON string but got `%s`", jsonObj.get("nodePoolTarget").toString()));
          }

          // validate the optional field `nodePoolTarget` (array)
          for (int i = 0; i < jsonArraynodePoolTarget.size(); i++) {
            GkeNodePoolTarget.validateJsonElement(jsonArraynodePoolTarget.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GkeClusterConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GkeClusterConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GkeClusterConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GkeClusterConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GkeClusterConfig>() {
           @Override
           public void write(JsonWriter out, GkeClusterConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GkeClusterConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GkeClusterConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GkeClusterConfig
   * @throws IOException if the JSON string is invalid with respect to GkeClusterConfig
   */
  public static GkeClusterConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GkeClusterConfig.class);
  }

  /**
   * Convert an instance of GkeClusterConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

