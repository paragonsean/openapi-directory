/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WorkflowTemplate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A response to a request to list workflow templates in a project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListWorkflowTemplatesResponse {
  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public static final String SERIALIZED_NAME_TEMPLATES = "templates";
  @SerializedName(SERIALIZED_NAME_TEMPLATES)
  private List<WorkflowTemplate> templates = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNREACHABLE = "unreachable";
  @SerializedName(SERIALIZED_NAME_UNREACHABLE)
  private List<String> unreachable = new ArrayList<>();

  public ListWorkflowTemplatesResponse() {
  }

  public ListWorkflowTemplatesResponse(
     String nextPageToken, 
     List<WorkflowTemplate> templates, 
     List<String> unreachable
  ) {
    this();
    this.nextPageToken = nextPageToken;
    this.templates = templates;
    this.unreachable = unreachable;
  }

  /**
   * Output only. This token is included in the response if there are more results to fetch. To fetch additional results, provide this value as the page_token in a subsequent ListWorkflowTemplatesRequest.
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }



  /**
   * Output only. WorkflowTemplates list.
   * @return templates
   */
  @javax.annotation.Nullable
  public List<WorkflowTemplate> getTemplates() {
    return templates;
  }



  /**
   * Output only. List of workflow templates that could not be included in the response. Attempting to get one of these resources may indicate why it was not included in the list response.
   * @return unreachable
   */
  @javax.annotation.Nullable
  public List<String> getUnreachable() {
    return unreachable;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListWorkflowTemplatesResponse listWorkflowTemplatesResponse = (ListWorkflowTemplatesResponse) o;
    return Objects.equals(this.nextPageToken, listWorkflowTemplatesResponse.nextPageToken) &&
        Objects.equals(this.templates, listWorkflowTemplatesResponse.templates) &&
        Objects.equals(this.unreachable, listWorkflowTemplatesResponse.unreachable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nextPageToken, templates, unreachable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListWorkflowTemplatesResponse {\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    templates: ").append(toIndentedString(templates)).append("\n");
    sb.append("    unreachable: ").append(toIndentedString(unreachable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nextPageToken");
    openapiFields.add("templates");
    openapiFields.add("unreachable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListWorkflowTemplatesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListWorkflowTemplatesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListWorkflowTemplatesResponse is not found in the empty JSON string", ListWorkflowTemplatesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListWorkflowTemplatesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListWorkflowTemplatesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
      if (jsonObj.get("templates") != null && !jsonObj.get("templates").isJsonNull()) {
        JsonArray jsonArraytemplates = jsonObj.getAsJsonArray("templates");
        if (jsonArraytemplates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("templates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `templates` to be an array in the JSON string but got `%s`", jsonObj.get("templates").toString()));
          }

          // validate the optional field `templates` (array)
          for (int i = 0; i < jsonArraytemplates.size(); i++) {
            WorkflowTemplate.validateJsonElement(jsonArraytemplates.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("unreachable") != null && !jsonObj.get("unreachable").isJsonNull() && !jsonObj.get("unreachable").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unreachable` to be an array in the JSON string but got `%s`", jsonObj.get("unreachable").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListWorkflowTemplatesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListWorkflowTemplatesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListWorkflowTemplatesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListWorkflowTemplatesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListWorkflowTemplatesResponse>() {
           @Override
           public void write(JsonWriter out, ListWorkflowTemplatesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListWorkflowTemplatesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListWorkflowTemplatesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListWorkflowTemplatesResponse
   * @throws IOException if the JSON string is invalid with respect to ListWorkflowTemplatesResponse
   */
  public static ListWorkflowTemplatesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListWorkflowTemplatesResponse.class);
  }

  /**
   * Convert an instance of ListWorkflowTemplatesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

