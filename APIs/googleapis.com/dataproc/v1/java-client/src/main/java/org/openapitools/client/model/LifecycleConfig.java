/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the cluster auto-delete schedule configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LifecycleConfig {
  public static final String SERIALIZED_NAME_AUTO_DELETE_TIME = "autoDeleteTime";
  @SerializedName(SERIALIZED_NAME_AUTO_DELETE_TIME)
  private String autoDeleteTime;

  public static final String SERIALIZED_NAME_AUTO_DELETE_TTL = "autoDeleteTtl";
  @SerializedName(SERIALIZED_NAME_AUTO_DELETE_TTL)
  private String autoDeleteTtl;

  public static final String SERIALIZED_NAME_IDLE_DELETE_TTL = "idleDeleteTtl";
  @SerializedName(SERIALIZED_NAME_IDLE_DELETE_TTL)
  private String idleDeleteTtl;

  public static final String SERIALIZED_NAME_IDLE_START_TIME = "idleStartTime";
  @SerializedName(SERIALIZED_NAME_IDLE_START_TIME)
  private String idleStartTime;

  public LifecycleConfig() {
  }

  public LifecycleConfig(
     String idleStartTime
  ) {
    this();
    this.idleStartTime = idleStartTime;
  }

  public LifecycleConfig autoDeleteTime(String autoDeleteTime) {
    this.autoDeleteTime = autoDeleteTime;
    return this;
  }

  /**
   * Optional. The time when cluster will be auto-deleted (see JSON representation of Timestamp (https://developers.google.com/protocol-buffers/docs/proto3#json)).
   * @return autoDeleteTime
   */
  @javax.annotation.Nullable
  public String getAutoDeleteTime() {
    return autoDeleteTime;
  }

  public void setAutoDeleteTime(String autoDeleteTime) {
    this.autoDeleteTime = autoDeleteTime;
  }


  public LifecycleConfig autoDeleteTtl(String autoDeleteTtl) {
    this.autoDeleteTtl = autoDeleteTtl;
    return this;
  }

  /**
   * Optional. The lifetime duration of cluster. The cluster will be auto-deleted at the end of this period. Minimum value is 10 minutes; maximum value is 14 days (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).
   * @return autoDeleteTtl
   */
  @javax.annotation.Nullable
  public String getAutoDeleteTtl() {
    return autoDeleteTtl;
  }

  public void setAutoDeleteTtl(String autoDeleteTtl) {
    this.autoDeleteTtl = autoDeleteTtl;
  }


  public LifecycleConfig idleDeleteTtl(String idleDeleteTtl) {
    this.idleDeleteTtl = idleDeleteTtl;
    return this;
  }

  /**
   * Optional. The duration to keep the cluster alive while idling (when no jobs are running). Passing this threshold will cause the cluster to be deleted. Minimum value is 5 minutes; maximum value is 14 days (see JSON representation of Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).
   * @return idleDeleteTtl
   */
  @javax.annotation.Nullable
  public String getIdleDeleteTtl() {
    return idleDeleteTtl;
  }

  public void setIdleDeleteTtl(String idleDeleteTtl) {
    this.idleDeleteTtl = idleDeleteTtl;
  }


  /**
   * Output only. The time when cluster became idle (most recent job finished) and became eligible for deletion due to idleness (see JSON representation of Timestamp (https://developers.google.com/protocol-buffers/docs/proto3#json)).
   * @return idleStartTime
   */
  @javax.annotation.Nullable
  public String getIdleStartTime() {
    return idleStartTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LifecycleConfig lifecycleConfig = (LifecycleConfig) o;
    return Objects.equals(this.autoDeleteTime, lifecycleConfig.autoDeleteTime) &&
        Objects.equals(this.autoDeleteTtl, lifecycleConfig.autoDeleteTtl) &&
        Objects.equals(this.idleDeleteTtl, lifecycleConfig.idleDeleteTtl) &&
        Objects.equals(this.idleStartTime, lifecycleConfig.idleStartTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoDeleteTime, autoDeleteTtl, idleDeleteTtl, idleStartTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LifecycleConfig {\n");
    sb.append("    autoDeleteTime: ").append(toIndentedString(autoDeleteTime)).append("\n");
    sb.append("    autoDeleteTtl: ").append(toIndentedString(autoDeleteTtl)).append("\n");
    sb.append("    idleDeleteTtl: ").append(toIndentedString(idleDeleteTtl)).append("\n");
    sb.append("    idleStartTime: ").append(toIndentedString(idleStartTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoDeleteTime");
    openapiFields.add("autoDeleteTtl");
    openapiFields.add("idleDeleteTtl");
    openapiFields.add("idleStartTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LifecycleConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LifecycleConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LifecycleConfig is not found in the empty JSON string", LifecycleConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LifecycleConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LifecycleConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("autoDeleteTime") != null && !jsonObj.get("autoDeleteTime").isJsonNull()) && !jsonObj.get("autoDeleteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoDeleteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoDeleteTime").toString()));
      }
      if ((jsonObj.get("autoDeleteTtl") != null && !jsonObj.get("autoDeleteTtl").isJsonNull()) && !jsonObj.get("autoDeleteTtl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoDeleteTtl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoDeleteTtl").toString()));
      }
      if ((jsonObj.get("idleDeleteTtl") != null && !jsonObj.get("idleDeleteTtl").isJsonNull()) && !jsonObj.get("idleDeleteTtl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idleDeleteTtl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idleDeleteTtl").toString()));
      }
      if ((jsonObj.get("idleStartTime") != null && !jsonObj.get("idleStartTime").isJsonNull()) && !jsonObj.get("idleStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idleStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idleStartTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LifecycleConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LifecycleConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LifecycleConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LifecycleConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<LifecycleConfig>() {
           @Override
           public void write(JsonWriter out, LifecycleConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LifecycleConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LifecycleConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LifecycleConfig
   * @throws IOException if the JSON string is invalid with respect to LifecycleConfig
   */
  public static LifecycleConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LifecycleConfig.class);
  }

  /**
   * Convert an instance of LifecycleConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

