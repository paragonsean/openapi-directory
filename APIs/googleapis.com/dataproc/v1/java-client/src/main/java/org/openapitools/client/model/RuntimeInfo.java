/*
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.UsageMetrics;
import org.openapitools.client.model.UsageSnapshot;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Runtime information about workload execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:50.925918-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RuntimeInfo {
  public static final String SERIALIZED_NAME_APPROXIMATE_USAGE = "approximateUsage";
  @SerializedName(SERIALIZED_NAME_APPROXIMATE_USAGE)
  private UsageMetrics approximateUsage;

  public static final String SERIALIZED_NAME_CURRENT_USAGE = "currentUsage";
  @SerializedName(SERIALIZED_NAME_CURRENT_USAGE)
  private UsageSnapshot currentUsage;

  public static final String SERIALIZED_NAME_DIAGNOSTIC_OUTPUT_URI = "diagnosticOutputUri";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTIC_OUTPUT_URI)
  private String diagnosticOutputUri;

  public static final String SERIALIZED_NAME_ENDPOINTS = "endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private Map<String, String> endpoints = new HashMap<>();

  public static final String SERIALIZED_NAME_OUTPUT_URI = "outputUri";
  @SerializedName(SERIALIZED_NAME_OUTPUT_URI)
  private String outputUri;

  public RuntimeInfo() {
  }

  public RuntimeInfo(
     String diagnosticOutputUri, 
     Map<String, String> endpoints, 
     String outputUri
  ) {
    this();
    this.diagnosticOutputUri = diagnosticOutputUri;
    this.endpoints = endpoints;
    this.outputUri = outputUri;
  }

  public RuntimeInfo approximateUsage(UsageMetrics approximateUsage) {
    this.approximateUsage = approximateUsage;
    return this;
  }

  /**
   * Get approximateUsage
   * @return approximateUsage
   */
  @javax.annotation.Nullable
  public UsageMetrics getApproximateUsage() {
    return approximateUsage;
  }

  public void setApproximateUsage(UsageMetrics approximateUsage) {
    this.approximateUsage = approximateUsage;
  }


  public RuntimeInfo currentUsage(UsageSnapshot currentUsage) {
    this.currentUsage = currentUsage;
    return this;
  }

  /**
   * Get currentUsage
   * @return currentUsage
   */
  @javax.annotation.Nullable
  public UsageSnapshot getCurrentUsage() {
    return currentUsage;
  }

  public void setCurrentUsage(UsageSnapshot currentUsage) {
    this.currentUsage = currentUsage;
  }


  /**
   * Output only. A URI pointing to the location of the diagnostics tarball.
   * @return diagnosticOutputUri
   */
  @javax.annotation.Nullable
  public String getDiagnosticOutputUri() {
    return diagnosticOutputUri;
  }



  /**
   * Output only. Map of remote access endpoints (such as web interfaces and APIs) to their URIs.
   * @return endpoints
   */
  @javax.annotation.Nullable
  public Map<String, String> getEndpoints() {
    return endpoints;
  }



  /**
   * Output only. A URI pointing to the location of the stdout and stderr of the workload.
   * @return outputUri
   */
  @javax.annotation.Nullable
  public String getOutputUri() {
    return outputUri;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuntimeInfo runtimeInfo = (RuntimeInfo) o;
    return Objects.equals(this.approximateUsage, runtimeInfo.approximateUsage) &&
        Objects.equals(this.currentUsage, runtimeInfo.currentUsage) &&
        Objects.equals(this.diagnosticOutputUri, runtimeInfo.diagnosticOutputUri) &&
        Objects.equals(this.endpoints, runtimeInfo.endpoints) &&
        Objects.equals(this.outputUri, runtimeInfo.outputUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approximateUsage, currentUsage, diagnosticOutputUri, endpoints, outputUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuntimeInfo {\n");
    sb.append("    approximateUsage: ").append(toIndentedString(approximateUsage)).append("\n");
    sb.append("    currentUsage: ").append(toIndentedString(currentUsage)).append("\n");
    sb.append("    diagnosticOutputUri: ").append(toIndentedString(diagnosticOutputUri)).append("\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    outputUri: ").append(toIndentedString(outputUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approximateUsage");
    openapiFields.add("currentUsage");
    openapiFields.add("diagnosticOutputUri");
    openapiFields.add("endpoints");
    openapiFields.add("outputUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuntimeInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuntimeInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuntimeInfo is not found in the empty JSON string", RuntimeInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuntimeInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuntimeInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `approximateUsage`
      if (jsonObj.get("approximateUsage") != null && !jsonObj.get("approximateUsage").isJsonNull()) {
        UsageMetrics.validateJsonElement(jsonObj.get("approximateUsage"));
      }
      // validate the optional field `currentUsage`
      if (jsonObj.get("currentUsage") != null && !jsonObj.get("currentUsage").isJsonNull()) {
        UsageSnapshot.validateJsonElement(jsonObj.get("currentUsage"));
      }
      if ((jsonObj.get("diagnosticOutputUri") != null && !jsonObj.get("diagnosticOutputUri").isJsonNull()) && !jsonObj.get("diagnosticOutputUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diagnosticOutputUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diagnosticOutputUri").toString()));
      }
      if ((jsonObj.get("outputUri") != null && !jsonObj.get("outputUri").isJsonNull()) && !jsonObj.get("outputUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuntimeInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuntimeInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuntimeInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuntimeInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<RuntimeInfo>() {
           @Override
           public void write(JsonWriter out, RuntimeInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuntimeInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuntimeInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuntimeInfo
   * @throws IOException if the JSON string is invalid with respect to RuntimeInfo
   */
  public static RuntimeInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuntimeInfo.class);
  }

  /**
   * Convert an instance of RuntimeInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

