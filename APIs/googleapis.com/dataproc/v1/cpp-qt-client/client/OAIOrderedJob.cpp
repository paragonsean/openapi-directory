/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderedJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderedJob::OAIOrderedJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderedJob::OAIOrderedJob() {
    this->initializeModel();
}

OAIOrderedJob::~OAIOrderedJob() {}

void OAIOrderedJob::initializeModel() {

    m_flink_job_isSet = false;
    m_flink_job_isValid = false;

    m_hadoop_job_isSet = false;
    m_hadoop_job_isValid = false;

    m_hive_job_isSet = false;
    m_hive_job_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_pig_job_isSet = false;
    m_pig_job_isValid = false;

    m_prerequisite_step_ids_isSet = false;
    m_prerequisite_step_ids_isValid = false;

    m_presto_job_isSet = false;
    m_presto_job_isValid = false;

    m_pyspark_job_isSet = false;
    m_pyspark_job_isValid = false;

    m_scheduling_isSet = false;
    m_scheduling_isValid = false;

    m_spark_job_isSet = false;
    m_spark_job_isValid = false;

    m_spark_r_job_isSet = false;
    m_spark_r_job_isValid = false;

    m_spark_sql_job_isSet = false;
    m_spark_sql_job_isValid = false;

    m_step_id_isSet = false;
    m_step_id_isValid = false;

    m_trino_job_isSet = false;
    m_trino_job_isValid = false;
}

void OAIOrderedJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderedJob::fromJsonObject(QJsonObject json) {

    m_flink_job_isValid = ::OpenAPI::fromJsonValue(m_flink_job, json[QString("flinkJob")]);
    m_flink_job_isSet = !json[QString("flinkJob")].isNull() && m_flink_job_isValid;

    m_hadoop_job_isValid = ::OpenAPI::fromJsonValue(m_hadoop_job, json[QString("hadoopJob")]);
    m_hadoop_job_isSet = !json[QString("hadoopJob")].isNull() && m_hadoop_job_isValid;

    m_hive_job_isValid = ::OpenAPI::fromJsonValue(m_hive_job, json[QString("hiveJob")]);
    m_hive_job_isSet = !json[QString("hiveJob")].isNull() && m_hive_job_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_pig_job_isValid = ::OpenAPI::fromJsonValue(m_pig_job, json[QString("pigJob")]);
    m_pig_job_isSet = !json[QString("pigJob")].isNull() && m_pig_job_isValid;

    m_prerequisite_step_ids_isValid = ::OpenAPI::fromJsonValue(m_prerequisite_step_ids, json[QString("prerequisiteStepIds")]);
    m_prerequisite_step_ids_isSet = !json[QString("prerequisiteStepIds")].isNull() && m_prerequisite_step_ids_isValid;

    m_presto_job_isValid = ::OpenAPI::fromJsonValue(m_presto_job, json[QString("prestoJob")]);
    m_presto_job_isSet = !json[QString("prestoJob")].isNull() && m_presto_job_isValid;

    m_pyspark_job_isValid = ::OpenAPI::fromJsonValue(m_pyspark_job, json[QString("pysparkJob")]);
    m_pyspark_job_isSet = !json[QString("pysparkJob")].isNull() && m_pyspark_job_isValid;

    m_scheduling_isValid = ::OpenAPI::fromJsonValue(m_scheduling, json[QString("scheduling")]);
    m_scheduling_isSet = !json[QString("scheduling")].isNull() && m_scheduling_isValid;

    m_spark_job_isValid = ::OpenAPI::fromJsonValue(m_spark_job, json[QString("sparkJob")]);
    m_spark_job_isSet = !json[QString("sparkJob")].isNull() && m_spark_job_isValid;

    m_spark_r_job_isValid = ::OpenAPI::fromJsonValue(m_spark_r_job, json[QString("sparkRJob")]);
    m_spark_r_job_isSet = !json[QString("sparkRJob")].isNull() && m_spark_r_job_isValid;

    m_spark_sql_job_isValid = ::OpenAPI::fromJsonValue(m_spark_sql_job, json[QString("sparkSqlJob")]);
    m_spark_sql_job_isSet = !json[QString("sparkSqlJob")].isNull() && m_spark_sql_job_isValid;

    m_step_id_isValid = ::OpenAPI::fromJsonValue(m_step_id, json[QString("stepId")]);
    m_step_id_isSet = !json[QString("stepId")].isNull() && m_step_id_isValid;

    m_trino_job_isValid = ::OpenAPI::fromJsonValue(m_trino_job, json[QString("trinoJob")]);
    m_trino_job_isSet = !json[QString("trinoJob")].isNull() && m_trino_job_isValid;
}

QString OAIOrderedJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderedJob::asJsonObject() const {
    QJsonObject obj;
    if (m_flink_job.isSet()) {
        obj.insert(QString("flinkJob"), ::OpenAPI::toJsonValue(m_flink_job));
    }
    if (m_hadoop_job.isSet()) {
        obj.insert(QString("hadoopJob"), ::OpenAPI::toJsonValue(m_hadoop_job));
    }
    if (m_hive_job.isSet()) {
        obj.insert(QString("hiveJob"), ::OpenAPI::toJsonValue(m_hive_job));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_pig_job.isSet()) {
        obj.insert(QString("pigJob"), ::OpenAPI::toJsonValue(m_pig_job));
    }
    if (m_prerequisite_step_ids.size() > 0) {
        obj.insert(QString("prerequisiteStepIds"), ::OpenAPI::toJsonValue(m_prerequisite_step_ids));
    }
    if (m_presto_job.isSet()) {
        obj.insert(QString("prestoJob"), ::OpenAPI::toJsonValue(m_presto_job));
    }
    if (m_pyspark_job.isSet()) {
        obj.insert(QString("pysparkJob"), ::OpenAPI::toJsonValue(m_pyspark_job));
    }
    if (m_scheduling.isSet()) {
        obj.insert(QString("scheduling"), ::OpenAPI::toJsonValue(m_scheduling));
    }
    if (m_spark_job.isSet()) {
        obj.insert(QString("sparkJob"), ::OpenAPI::toJsonValue(m_spark_job));
    }
    if (m_spark_r_job.isSet()) {
        obj.insert(QString("sparkRJob"), ::OpenAPI::toJsonValue(m_spark_r_job));
    }
    if (m_spark_sql_job.isSet()) {
        obj.insert(QString("sparkSqlJob"), ::OpenAPI::toJsonValue(m_spark_sql_job));
    }
    if (m_step_id_isSet) {
        obj.insert(QString("stepId"), ::OpenAPI::toJsonValue(m_step_id));
    }
    if (m_trino_job.isSet()) {
        obj.insert(QString("trinoJob"), ::OpenAPI::toJsonValue(m_trino_job));
    }
    return obj;
}

OAIFlinkJob OAIOrderedJob::getFlinkJob() const {
    return m_flink_job;
}
void OAIOrderedJob::setFlinkJob(const OAIFlinkJob &flink_job) {
    m_flink_job = flink_job;
    m_flink_job_isSet = true;
}

bool OAIOrderedJob::is_flink_job_Set() const{
    return m_flink_job_isSet;
}

bool OAIOrderedJob::is_flink_job_Valid() const{
    return m_flink_job_isValid;
}

OAIHadoopJob OAIOrderedJob::getHadoopJob() const {
    return m_hadoop_job;
}
void OAIOrderedJob::setHadoopJob(const OAIHadoopJob &hadoop_job) {
    m_hadoop_job = hadoop_job;
    m_hadoop_job_isSet = true;
}

bool OAIOrderedJob::is_hadoop_job_Set() const{
    return m_hadoop_job_isSet;
}

bool OAIOrderedJob::is_hadoop_job_Valid() const{
    return m_hadoop_job_isValid;
}

OAIHiveJob OAIOrderedJob::getHiveJob() const {
    return m_hive_job;
}
void OAIOrderedJob::setHiveJob(const OAIHiveJob &hive_job) {
    m_hive_job = hive_job;
    m_hive_job_isSet = true;
}

bool OAIOrderedJob::is_hive_job_Set() const{
    return m_hive_job_isSet;
}

bool OAIOrderedJob::is_hive_job_Valid() const{
    return m_hive_job_isValid;
}

QMap<QString, QString> OAIOrderedJob::getLabels() const {
    return m_labels;
}
void OAIOrderedJob::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIOrderedJob::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIOrderedJob::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIPigJob OAIOrderedJob::getPigJob() const {
    return m_pig_job;
}
void OAIOrderedJob::setPigJob(const OAIPigJob &pig_job) {
    m_pig_job = pig_job;
    m_pig_job_isSet = true;
}

bool OAIOrderedJob::is_pig_job_Set() const{
    return m_pig_job_isSet;
}

bool OAIOrderedJob::is_pig_job_Valid() const{
    return m_pig_job_isValid;
}

QList<QString> OAIOrderedJob::getPrerequisiteStepIds() const {
    return m_prerequisite_step_ids;
}
void OAIOrderedJob::setPrerequisiteStepIds(const QList<QString> &prerequisite_step_ids) {
    m_prerequisite_step_ids = prerequisite_step_ids;
    m_prerequisite_step_ids_isSet = true;
}

bool OAIOrderedJob::is_prerequisite_step_ids_Set() const{
    return m_prerequisite_step_ids_isSet;
}

bool OAIOrderedJob::is_prerequisite_step_ids_Valid() const{
    return m_prerequisite_step_ids_isValid;
}

OAIPrestoJob OAIOrderedJob::getPrestoJob() const {
    return m_presto_job;
}
void OAIOrderedJob::setPrestoJob(const OAIPrestoJob &presto_job) {
    m_presto_job = presto_job;
    m_presto_job_isSet = true;
}

bool OAIOrderedJob::is_presto_job_Set() const{
    return m_presto_job_isSet;
}

bool OAIOrderedJob::is_presto_job_Valid() const{
    return m_presto_job_isValid;
}

OAIPySparkJob OAIOrderedJob::getPysparkJob() const {
    return m_pyspark_job;
}
void OAIOrderedJob::setPysparkJob(const OAIPySparkJob &pyspark_job) {
    m_pyspark_job = pyspark_job;
    m_pyspark_job_isSet = true;
}

bool OAIOrderedJob::is_pyspark_job_Set() const{
    return m_pyspark_job_isSet;
}

bool OAIOrderedJob::is_pyspark_job_Valid() const{
    return m_pyspark_job_isValid;
}

OAIJobScheduling OAIOrderedJob::getScheduling() const {
    return m_scheduling;
}
void OAIOrderedJob::setScheduling(const OAIJobScheduling &scheduling) {
    m_scheduling = scheduling;
    m_scheduling_isSet = true;
}

bool OAIOrderedJob::is_scheduling_Set() const{
    return m_scheduling_isSet;
}

bool OAIOrderedJob::is_scheduling_Valid() const{
    return m_scheduling_isValid;
}

OAISparkJob OAIOrderedJob::getSparkJob() const {
    return m_spark_job;
}
void OAIOrderedJob::setSparkJob(const OAISparkJob &spark_job) {
    m_spark_job = spark_job;
    m_spark_job_isSet = true;
}

bool OAIOrderedJob::is_spark_job_Set() const{
    return m_spark_job_isSet;
}

bool OAIOrderedJob::is_spark_job_Valid() const{
    return m_spark_job_isValid;
}

OAISparkRJob OAIOrderedJob::getSparkRJob() const {
    return m_spark_r_job;
}
void OAIOrderedJob::setSparkRJob(const OAISparkRJob &spark_r_job) {
    m_spark_r_job = spark_r_job;
    m_spark_r_job_isSet = true;
}

bool OAIOrderedJob::is_spark_r_job_Set() const{
    return m_spark_r_job_isSet;
}

bool OAIOrderedJob::is_spark_r_job_Valid() const{
    return m_spark_r_job_isValid;
}

OAISparkSqlJob OAIOrderedJob::getSparkSqlJob() const {
    return m_spark_sql_job;
}
void OAIOrderedJob::setSparkSqlJob(const OAISparkSqlJob &spark_sql_job) {
    m_spark_sql_job = spark_sql_job;
    m_spark_sql_job_isSet = true;
}

bool OAIOrderedJob::is_spark_sql_job_Set() const{
    return m_spark_sql_job_isSet;
}

bool OAIOrderedJob::is_spark_sql_job_Valid() const{
    return m_spark_sql_job_isValid;
}

QString OAIOrderedJob::getStepId() const {
    return m_step_id;
}
void OAIOrderedJob::setStepId(const QString &step_id) {
    m_step_id = step_id;
    m_step_id_isSet = true;
}

bool OAIOrderedJob::is_step_id_Set() const{
    return m_step_id_isSet;
}

bool OAIOrderedJob::is_step_id_Valid() const{
    return m_step_id_isValid;
}

OAITrinoJob OAIOrderedJob::getTrinoJob() const {
    return m_trino_job;
}
void OAIOrderedJob::setTrinoJob(const OAITrinoJob &trino_job) {
    m_trino_job = trino_job;
    m_trino_job_isSet = true;
}

bool OAIOrderedJob::is_trino_job_Set() const{
    return m_trino_job_isSet;
}

bool OAIOrderedJob::is_trino_job_Valid() const{
    return m_trino_job_isValid;
}

bool OAIOrderedJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flink_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hadoop_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hive_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pig_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prerequisite_step_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_presto_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pyspark_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_r_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_sql_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trino_job.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderedJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
