/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILifecycleConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILifecycleConfig::OAILifecycleConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILifecycleConfig::OAILifecycleConfig() {
    this->initializeModel();
}

OAILifecycleConfig::~OAILifecycleConfig() {}

void OAILifecycleConfig::initializeModel() {

    m_auto_delete_time_isSet = false;
    m_auto_delete_time_isValid = false;

    m_auto_delete_ttl_isSet = false;
    m_auto_delete_ttl_isValid = false;

    m_idle_delete_ttl_isSet = false;
    m_idle_delete_ttl_isValid = false;

    m_idle_start_time_isSet = false;
    m_idle_start_time_isValid = false;
}

void OAILifecycleConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILifecycleConfig::fromJsonObject(QJsonObject json) {

    m_auto_delete_time_isValid = ::OpenAPI::fromJsonValue(m_auto_delete_time, json[QString("autoDeleteTime")]);
    m_auto_delete_time_isSet = !json[QString("autoDeleteTime")].isNull() && m_auto_delete_time_isValid;

    m_auto_delete_ttl_isValid = ::OpenAPI::fromJsonValue(m_auto_delete_ttl, json[QString("autoDeleteTtl")]);
    m_auto_delete_ttl_isSet = !json[QString("autoDeleteTtl")].isNull() && m_auto_delete_ttl_isValid;

    m_idle_delete_ttl_isValid = ::OpenAPI::fromJsonValue(m_idle_delete_ttl, json[QString("idleDeleteTtl")]);
    m_idle_delete_ttl_isSet = !json[QString("idleDeleteTtl")].isNull() && m_idle_delete_ttl_isValid;

    m_idle_start_time_isValid = ::OpenAPI::fromJsonValue(m_idle_start_time, json[QString("idleStartTime")]);
    m_idle_start_time_isSet = !json[QString("idleStartTime")].isNull() && m_idle_start_time_isValid;
}

QString OAILifecycleConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILifecycleConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_delete_time_isSet) {
        obj.insert(QString("autoDeleteTime"), ::OpenAPI::toJsonValue(m_auto_delete_time));
    }
    if (m_auto_delete_ttl_isSet) {
        obj.insert(QString("autoDeleteTtl"), ::OpenAPI::toJsonValue(m_auto_delete_ttl));
    }
    if (m_idle_delete_ttl_isSet) {
        obj.insert(QString("idleDeleteTtl"), ::OpenAPI::toJsonValue(m_idle_delete_ttl));
    }
    if (m_idle_start_time_isSet) {
        obj.insert(QString("idleStartTime"), ::OpenAPI::toJsonValue(m_idle_start_time));
    }
    return obj;
}

QString OAILifecycleConfig::getAutoDeleteTime() const {
    return m_auto_delete_time;
}
void OAILifecycleConfig::setAutoDeleteTime(const QString &auto_delete_time) {
    m_auto_delete_time = auto_delete_time;
    m_auto_delete_time_isSet = true;
}

bool OAILifecycleConfig::is_auto_delete_time_Set() const{
    return m_auto_delete_time_isSet;
}

bool OAILifecycleConfig::is_auto_delete_time_Valid() const{
    return m_auto_delete_time_isValid;
}

QString OAILifecycleConfig::getAutoDeleteTtl() const {
    return m_auto_delete_ttl;
}
void OAILifecycleConfig::setAutoDeleteTtl(const QString &auto_delete_ttl) {
    m_auto_delete_ttl = auto_delete_ttl;
    m_auto_delete_ttl_isSet = true;
}

bool OAILifecycleConfig::is_auto_delete_ttl_Set() const{
    return m_auto_delete_ttl_isSet;
}

bool OAILifecycleConfig::is_auto_delete_ttl_Valid() const{
    return m_auto_delete_ttl_isValid;
}

QString OAILifecycleConfig::getIdleDeleteTtl() const {
    return m_idle_delete_ttl;
}
void OAILifecycleConfig::setIdleDeleteTtl(const QString &idle_delete_ttl) {
    m_idle_delete_ttl = idle_delete_ttl;
    m_idle_delete_ttl_isSet = true;
}

bool OAILifecycleConfig::is_idle_delete_ttl_Set() const{
    return m_idle_delete_ttl_isSet;
}

bool OAILifecycleConfig::is_idle_delete_ttl_Valid() const{
    return m_idle_delete_ttl_isValid;
}

QString OAILifecycleConfig::getIdleStartTime() const {
    return m_idle_start_time;
}
void OAILifecycleConfig::setIdleStartTime(const QString &idle_start_time) {
    m_idle_start_time = idle_start_time;
    m_idle_start_time_isSet = true;
}

bool OAILifecycleConfig::is_idle_start_time_Set() const{
    return m_idle_start_time_isSet;
}

bool OAILifecycleConfig::is_idle_start_time_Valid() const{
    return m_idle_start_time_isValid;
}

bool OAILifecycleConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_delete_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_delete_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILifecycleConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
