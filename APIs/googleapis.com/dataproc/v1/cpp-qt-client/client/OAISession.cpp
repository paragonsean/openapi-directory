/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession::OAISession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession::OAISession() {
    this->initializeModel();
}

OAISession::~OAISession() {}

void OAISession::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_environment_config_isSet = false;
    m_environment_config_isValid = false;

    m_jupyter_session_isSet = false;
    m_jupyter_session_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_runtime_config_isSet = false;
    m_runtime_config_isValid = false;

    m_runtime_info_isSet = false;
    m_runtime_info_isValid = false;

    m_session_template_isSet = false;
    m_session_template_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_history_isSet = false;
    m_state_history_isValid = false;

    m_state_message_isSet = false;
    m_state_message_isValid = false;

    m_state_time_isSet = false;
    m_state_time_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAISession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_environment_config_isValid = ::OpenAPI::fromJsonValue(m_environment_config, json[QString("environmentConfig")]);
    m_environment_config_isSet = !json[QString("environmentConfig")].isNull() && m_environment_config_isValid;

    m_jupyter_session_isValid = ::OpenAPI::fromJsonValue(m_jupyter_session, json[QString("jupyterSession")]);
    m_jupyter_session_isSet = !json[QString("jupyterSession")].isNull() && m_jupyter_session_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_runtime_config_isValid = ::OpenAPI::fromJsonValue(m_runtime_config, json[QString("runtimeConfig")]);
    m_runtime_config_isSet = !json[QString("runtimeConfig")].isNull() && m_runtime_config_isValid;

    m_runtime_info_isValid = ::OpenAPI::fromJsonValue(m_runtime_info, json[QString("runtimeInfo")]);
    m_runtime_info_isSet = !json[QString("runtimeInfo")].isNull() && m_runtime_info_isValid;

    m_session_template_isValid = ::OpenAPI::fromJsonValue(m_session_template, json[QString("sessionTemplate")]);
    m_session_template_isSet = !json[QString("sessionTemplate")].isNull() && m_session_template_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_history_isValid = ::OpenAPI::fromJsonValue(m_state_history, json[QString("stateHistory")]);
    m_state_history_isSet = !json[QString("stateHistory")].isNull() && m_state_history_isValid;

    m_state_message_isValid = ::OpenAPI::fromJsonValue(m_state_message, json[QString("stateMessage")]);
    m_state_message_isSet = !json[QString("stateMessage")].isNull() && m_state_message_isValid;

    m_state_time_isValid = ::OpenAPI::fromJsonValue(m_state_time, json[QString("stateTime")]);
    m_state_time_isSet = !json[QString("stateTime")].isNull() && m_state_time_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAISession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_environment_config.isSet()) {
        obj.insert(QString("environmentConfig"), ::OpenAPI::toJsonValue(m_environment_config));
    }
    if (m_jupyter_session.isSet()) {
        obj.insert(QString("jupyterSession"), ::OpenAPI::toJsonValue(m_jupyter_session));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_runtime_config.isSet()) {
        obj.insert(QString("runtimeConfig"), ::OpenAPI::toJsonValue(m_runtime_config));
    }
    if (m_runtime_info.isSet()) {
        obj.insert(QString("runtimeInfo"), ::OpenAPI::toJsonValue(m_runtime_info));
    }
    if (m_session_template_isSet) {
        obj.insert(QString("sessionTemplate"), ::OpenAPI::toJsonValue(m_session_template));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_history.size() > 0) {
        obj.insert(QString("stateHistory"), ::OpenAPI::toJsonValue(m_state_history));
    }
    if (m_state_message_isSet) {
        obj.insert(QString("stateMessage"), ::OpenAPI::toJsonValue(m_state_message));
    }
    if (m_state_time_isSet) {
        obj.insert(QString("stateTime"), ::OpenAPI::toJsonValue(m_state_time));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAISession::getCreateTime() const {
    return m_create_time;
}
void OAISession::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAISession::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAISession::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAISession::getCreator() const {
    return m_creator;
}
void OAISession::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAISession::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAISession::is_creator_Valid() const{
    return m_creator_isValid;
}

OAIEnvironmentConfig OAISession::getEnvironmentConfig() const {
    return m_environment_config;
}
void OAISession::setEnvironmentConfig(const OAIEnvironmentConfig &environment_config) {
    m_environment_config = environment_config;
    m_environment_config_isSet = true;
}

bool OAISession::is_environment_config_Set() const{
    return m_environment_config_isSet;
}

bool OAISession::is_environment_config_Valid() const{
    return m_environment_config_isValid;
}

OAIJupyterConfig OAISession::getJupyterSession() const {
    return m_jupyter_session;
}
void OAISession::setJupyterSession(const OAIJupyterConfig &jupyter_session) {
    m_jupyter_session = jupyter_session;
    m_jupyter_session_isSet = true;
}

bool OAISession::is_jupyter_session_Set() const{
    return m_jupyter_session_isSet;
}

bool OAISession::is_jupyter_session_Valid() const{
    return m_jupyter_session_isValid;
}

QMap<QString, QString> OAISession::getLabels() const {
    return m_labels;
}
void OAISession::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAISession::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAISession::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAISession::getName() const {
    return m_name;
}
void OAISession::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISession::is_name_Set() const{
    return m_name_isSet;
}

bool OAISession::is_name_Valid() const{
    return m_name_isValid;
}

OAIRuntimeConfig OAISession::getRuntimeConfig() const {
    return m_runtime_config;
}
void OAISession::setRuntimeConfig(const OAIRuntimeConfig &runtime_config) {
    m_runtime_config = runtime_config;
    m_runtime_config_isSet = true;
}

bool OAISession::is_runtime_config_Set() const{
    return m_runtime_config_isSet;
}

bool OAISession::is_runtime_config_Valid() const{
    return m_runtime_config_isValid;
}

OAIRuntimeInfo OAISession::getRuntimeInfo() const {
    return m_runtime_info;
}
void OAISession::setRuntimeInfo(const OAIRuntimeInfo &runtime_info) {
    m_runtime_info = runtime_info;
    m_runtime_info_isSet = true;
}

bool OAISession::is_runtime_info_Set() const{
    return m_runtime_info_isSet;
}

bool OAISession::is_runtime_info_Valid() const{
    return m_runtime_info_isValid;
}

QString OAISession::getSessionTemplate() const {
    return m_session_template;
}
void OAISession::setSessionTemplate(const QString &session_template) {
    m_session_template = session_template;
    m_session_template_isSet = true;
}

bool OAISession::is_session_template_Set() const{
    return m_session_template_isSet;
}

bool OAISession::is_session_template_Valid() const{
    return m_session_template_isValid;
}

QString OAISession::getState() const {
    return m_state;
}
void OAISession::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISession::is_state_Set() const{
    return m_state_isSet;
}

bool OAISession::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAISessionStateHistory> OAISession::getStateHistory() const {
    return m_state_history;
}
void OAISession::setStateHistory(const QList<OAISessionStateHistory> &state_history) {
    m_state_history = state_history;
    m_state_history_isSet = true;
}

bool OAISession::is_state_history_Set() const{
    return m_state_history_isSet;
}

bool OAISession::is_state_history_Valid() const{
    return m_state_history_isValid;
}

QString OAISession::getStateMessage() const {
    return m_state_message;
}
void OAISession::setStateMessage(const QString &state_message) {
    m_state_message = state_message;
    m_state_message_isSet = true;
}

bool OAISession::is_state_message_Set() const{
    return m_state_message_isSet;
}

bool OAISession::is_state_message_Valid() const{
    return m_state_message_isValid;
}

QString OAISession::getStateTime() const {
    return m_state_time;
}
void OAISession::setStateTime(const QString &state_time) {
    m_state_time = state_time;
    m_state_time_isSet = true;
}

bool OAISession::is_state_time_Set() const{
    return m_state_time_isSet;
}

bool OAISession::is_state_time_Valid() const{
    return m_state_time_isValid;
}

QString OAISession::getUser() const {
    return m_user;
}
void OAISession::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAISession::is_user_Set() const{
    return m_user_isSet;
}

bool OAISession::is_user_Valid() const{
    return m_user_isValid;
}

QString OAISession::getUuid() const {
    return m_uuid;
}
void OAISession::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAISession::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAISession::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAISession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jupyter_session.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
