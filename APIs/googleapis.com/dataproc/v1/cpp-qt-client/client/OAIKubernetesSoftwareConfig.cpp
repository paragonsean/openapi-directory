/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKubernetesSoftwareConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKubernetesSoftwareConfig::OAIKubernetesSoftwareConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKubernetesSoftwareConfig::OAIKubernetesSoftwareConfig() {
    this->initializeModel();
}

OAIKubernetesSoftwareConfig::~OAIKubernetesSoftwareConfig() {}

void OAIKubernetesSoftwareConfig::initializeModel() {

    m_component_version_isSet = false;
    m_component_version_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIKubernetesSoftwareConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKubernetesSoftwareConfig::fromJsonObject(QJsonObject json) {

    m_component_version_isValid = ::OpenAPI::fromJsonValue(m_component_version, json[QString("componentVersion")]);
    m_component_version_isSet = !json[QString("componentVersion")].isNull() && m_component_version_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIKubernetesSoftwareConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKubernetesSoftwareConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_component_version.size() > 0) {
        obj.insert(QString("componentVersion"), ::OpenAPI::toJsonValue(m_component_version));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QMap<QString, QString> OAIKubernetesSoftwareConfig::getComponentVersion() const {
    return m_component_version;
}
void OAIKubernetesSoftwareConfig::setComponentVersion(const QMap<QString, QString> &component_version) {
    m_component_version = component_version;
    m_component_version_isSet = true;
}

bool OAIKubernetesSoftwareConfig::is_component_version_Set() const{
    return m_component_version_isSet;
}

bool OAIKubernetesSoftwareConfig::is_component_version_Valid() const{
    return m_component_version_isValid;
}

QMap<QString, QString> OAIKubernetesSoftwareConfig::getProperties() const {
    return m_properties;
}
void OAIKubernetesSoftwareConfig::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIKubernetesSoftwareConfig::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIKubernetesSoftwareConfig::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIKubernetesSoftwareConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_version.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKubernetesSoftwareConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
