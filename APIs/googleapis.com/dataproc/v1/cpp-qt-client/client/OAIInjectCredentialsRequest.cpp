/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInjectCredentialsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInjectCredentialsRequest::OAIInjectCredentialsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInjectCredentialsRequest::OAIInjectCredentialsRequest() {
    this->initializeModel();
}

OAIInjectCredentialsRequest::~OAIInjectCredentialsRequest() {}

void OAIInjectCredentialsRequest::initializeModel() {

    m_cluster_uuid_isSet = false;
    m_cluster_uuid_isValid = false;

    m_credentials_ciphertext_isSet = false;
    m_credentials_ciphertext_isValid = false;
}

void OAIInjectCredentialsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInjectCredentialsRequest::fromJsonObject(QJsonObject json) {

    m_cluster_uuid_isValid = ::OpenAPI::fromJsonValue(m_cluster_uuid, json[QString("clusterUuid")]);
    m_cluster_uuid_isSet = !json[QString("clusterUuid")].isNull() && m_cluster_uuid_isValid;

    m_credentials_ciphertext_isValid = ::OpenAPI::fromJsonValue(m_credentials_ciphertext, json[QString("credentialsCiphertext")]);
    m_credentials_ciphertext_isSet = !json[QString("credentialsCiphertext")].isNull() && m_credentials_ciphertext_isValid;
}

QString OAIInjectCredentialsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInjectCredentialsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_uuid_isSet) {
        obj.insert(QString("clusterUuid"), ::OpenAPI::toJsonValue(m_cluster_uuid));
    }
    if (m_credentials_ciphertext_isSet) {
        obj.insert(QString("credentialsCiphertext"), ::OpenAPI::toJsonValue(m_credentials_ciphertext));
    }
    return obj;
}

QString OAIInjectCredentialsRequest::getClusterUuid() const {
    return m_cluster_uuid;
}
void OAIInjectCredentialsRequest::setClusterUuid(const QString &cluster_uuid) {
    m_cluster_uuid = cluster_uuid;
    m_cluster_uuid_isSet = true;
}

bool OAIInjectCredentialsRequest::is_cluster_uuid_Set() const{
    return m_cluster_uuid_isSet;
}

bool OAIInjectCredentialsRequest::is_cluster_uuid_Valid() const{
    return m_cluster_uuid_isValid;
}

QString OAIInjectCredentialsRequest::getCredentialsCiphertext() const {
    return m_credentials_ciphertext;
}
void OAIInjectCredentialsRequest::setCredentialsCiphertext(const QString &credentials_ciphertext) {
    m_credentials_ciphertext = credentials_ciphertext;
    m_credentials_ciphertext_isSet = true;
}

bool OAIInjectCredentialsRequest::is_credentials_ciphertext_Set() const{
    return m_credentials_ciphertext_isSet;
}

bool OAIInjectCredentialsRequest::is_credentials_ciphertext_Valid() const{
    return m_credentials_ciphertext_isValid;
}

bool OAIInjectCredentialsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_ciphertext_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInjectCredentialsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
