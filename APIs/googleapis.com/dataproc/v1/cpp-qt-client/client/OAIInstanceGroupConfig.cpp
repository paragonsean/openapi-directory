/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceGroupConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceGroupConfig::OAIInstanceGroupConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceGroupConfig::OAIInstanceGroupConfig() {
    this->initializeModel();
}

OAIInstanceGroupConfig::~OAIInstanceGroupConfig() {}

void OAIInstanceGroupConfig::initializeModel() {

    m_accelerators_isSet = false;
    m_accelerators_isValid = false;

    m_disk_config_isSet = false;
    m_disk_config_isValid = false;

    m_image_uri_isSet = false;
    m_image_uri_isValid = false;

    m_instance_flexibility_policy_isSet = false;
    m_instance_flexibility_policy_isValid = false;

    m_instance_names_isSet = false;
    m_instance_names_isValid = false;

    m_instance_references_isSet = false;
    m_instance_references_isValid = false;

    m_is_preemptible_isSet = false;
    m_is_preemptible_isValid = false;

    m_machine_type_uri_isSet = false;
    m_machine_type_uri_isValid = false;

    m_managed_group_config_isSet = false;
    m_managed_group_config_isValid = false;

    m_min_cpu_platform_isSet = false;
    m_min_cpu_platform_isValid = false;

    m_min_num_instances_isSet = false;
    m_min_num_instances_isValid = false;

    m_num_instances_isSet = false;
    m_num_instances_isValid = false;

    m_preemptibility_isSet = false;
    m_preemptibility_isValid = false;

    m_startup_config_isSet = false;
    m_startup_config_isValid = false;
}

void OAIInstanceGroupConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceGroupConfig::fromJsonObject(QJsonObject json) {

    m_accelerators_isValid = ::OpenAPI::fromJsonValue(m_accelerators, json[QString("accelerators")]);
    m_accelerators_isSet = !json[QString("accelerators")].isNull() && m_accelerators_isValid;

    m_disk_config_isValid = ::OpenAPI::fromJsonValue(m_disk_config, json[QString("diskConfig")]);
    m_disk_config_isSet = !json[QString("diskConfig")].isNull() && m_disk_config_isValid;

    m_image_uri_isValid = ::OpenAPI::fromJsonValue(m_image_uri, json[QString("imageUri")]);
    m_image_uri_isSet = !json[QString("imageUri")].isNull() && m_image_uri_isValid;

    m_instance_flexibility_policy_isValid = ::OpenAPI::fromJsonValue(m_instance_flexibility_policy, json[QString("instanceFlexibilityPolicy")]);
    m_instance_flexibility_policy_isSet = !json[QString("instanceFlexibilityPolicy")].isNull() && m_instance_flexibility_policy_isValid;

    m_instance_names_isValid = ::OpenAPI::fromJsonValue(m_instance_names, json[QString("instanceNames")]);
    m_instance_names_isSet = !json[QString("instanceNames")].isNull() && m_instance_names_isValid;

    m_instance_references_isValid = ::OpenAPI::fromJsonValue(m_instance_references, json[QString("instanceReferences")]);
    m_instance_references_isSet = !json[QString("instanceReferences")].isNull() && m_instance_references_isValid;

    m_is_preemptible_isValid = ::OpenAPI::fromJsonValue(m_is_preemptible, json[QString("isPreemptible")]);
    m_is_preemptible_isSet = !json[QString("isPreemptible")].isNull() && m_is_preemptible_isValid;

    m_machine_type_uri_isValid = ::OpenAPI::fromJsonValue(m_machine_type_uri, json[QString("machineTypeUri")]);
    m_machine_type_uri_isSet = !json[QString("machineTypeUri")].isNull() && m_machine_type_uri_isValid;

    m_managed_group_config_isValid = ::OpenAPI::fromJsonValue(m_managed_group_config, json[QString("managedGroupConfig")]);
    m_managed_group_config_isSet = !json[QString("managedGroupConfig")].isNull() && m_managed_group_config_isValid;

    m_min_cpu_platform_isValid = ::OpenAPI::fromJsonValue(m_min_cpu_platform, json[QString("minCpuPlatform")]);
    m_min_cpu_platform_isSet = !json[QString("minCpuPlatform")].isNull() && m_min_cpu_platform_isValid;

    m_min_num_instances_isValid = ::OpenAPI::fromJsonValue(m_min_num_instances, json[QString("minNumInstances")]);
    m_min_num_instances_isSet = !json[QString("minNumInstances")].isNull() && m_min_num_instances_isValid;

    m_num_instances_isValid = ::OpenAPI::fromJsonValue(m_num_instances, json[QString("numInstances")]);
    m_num_instances_isSet = !json[QString("numInstances")].isNull() && m_num_instances_isValid;

    m_preemptibility_isValid = ::OpenAPI::fromJsonValue(m_preemptibility, json[QString("preemptibility")]);
    m_preemptibility_isSet = !json[QString("preemptibility")].isNull() && m_preemptibility_isValid;

    m_startup_config_isValid = ::OpenAPI::fromJsonValue(m_startup_config, json[QString("startupConfig")]);
    m_startup_config_isSet = !json[QString("startupConfig")].isNull() && m_startup_config_isValid;
}

QString OAIInstanceGroupConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceGroupConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerators.size() > 0) {
        obj.insert(QString("accelerators"), ::OpenAPI::toJsonValue(m_accelerators));
    }
    if (m_disk_config.isSet()) {
        obj.insert(QString("diskConfig"), ::OpenAPI::toJsonValue(m_disk_config));
    }
    if (m_image_uri_isSet) {
        obj.insert(QString("imageUri"), ::OpenAPI::toJsonValue(m_image_uri));
    }
    if (m_instance_flexibility_policy.isSet()) {
        obj.insert(QString("instanceFlexibilityPolicy"), ::OpenAPI::toJsonValue(m_instance_flexibility_policy));
    }
    if (m_instance_names.size() > 0) {
        obj.insert(QString("instanceNames"), ::OpenAPI::toJsonValue(m_instance_names));
    }
    if (m_instance_references.size() > 0) {
        obj.insert(QString("instanceReferences"), ::OpenAPI::toJsonValue(m_instance_references));
    }
    if (m_is_preemptible_isSet) {
        obj.insert(QString("isPreemptible"), ::OpenAPI::toJsonValue(m_is_preemptible));
    }
    if (m_machine_type_uri_isSet) {
        obj.insert(QString("machineTypeUri"), ::OpenAPI::toJsonValue(m_machine_type_uri));
    }
    if (m_managed_group_config.isSet()) {
        obj.insert(QString("managedGroupConfig"), ::OpenAPI::toJsonValue(m_managed_group_config));
    }
    if (m_min_cpu_platform_isSet) {
        obj.insert(QString("minCpuPlatform"), ::OpenAPI::toJsonValue(m_min_cpu_platform));
    }
    if (m_min_num_instances_isSet) {
        obj.insert(QString("minNumInstances"), ::OpenAPI::toJsonValue(m_min_num_instances));
    }
    if (m_num_instances_isSet) {
        obj.insert(QString("numInstances"), ::OpenAPI::toJsonValue(m_num_instances));
    }
    if (m_preemptibility_isSet) {
        obj.insert(QString("preemptibility"), ::OpenAPI::toJsonValue(m_preemptibility));
    }
    if (m_startup_config.isSet()) {
        obj.insert(QString("startupConfig"), ::OpenAPI::toJsonValue(m_startup_config));
    }
    return obj;
}

QList<OAIAcceleratorConfig> OAIInstanceGroupConfig::getAccelerators() const {
    return m_accelerators;
}
void OAIInstanceGroupConfig::setAccelerators(const QList<OAIAcceleratorConfig> &accelerators) {
    m_accelerators = accelerators;
    m_accelerators_isSet = true;
}

bool OAIInstanceGroupConfig::is_accelerators_Set() const{
    return m_accelerators_isSet;
}

bool OAIInstanceGroupConfig::is_accelerators_Valid() const{
    return m_accelerators_isValid;
}

OAIDiskConfig OAIInstanceGroupConfig::getDiskConfig() const {
    return m_disk_config;
}
void OAIInstanceGroupConfig::setDiskConfig(const OAIDiskConfig &disk_config) {
    m_disk_config = disk_config;
    m_disk_config_isSet = true;
}

bool OAIInstanceGroupConfig::is_disk_config_Set() const{
    return m_disk_config_isSet;
}

bool OAIInstanceGroupConfig::is_disk_config_Valid() const{
    return m_disk_config_isValid;
}

QString OAIInstanceGroupConfig::getImageUri() const {
    return m_image_uri;
}
void OAIInstanceGroupConfig::setImageUri(const QString &image_uri) {
    m_image_uri = image_uri;
    m_image_uri_isSet = true;
}

bool OAIInstanceGroupConfig::is_image_uri_Set() const{
    return m_image_uri_isSet;
}

bool OAIInstanceGroupConfig::is_image_uri_Valid() const{
    return m_image_uri_isValid;
}

OAIInstanceFlexibilityPolicy OAIInstanceGroupConfig::getInstanceFlexibilityPolicy() const {
    return m_instance_flexibility_policy;
}
void OAIInstanceGroupConfig::setInstanceFlexibilityPolicy(const OAIInstanceFlexibilityPolicy &instance_flexibility_policy) {
    m_instance_flexibility_policy = instance_flexibility_policy;
    m_instance_flexibility_policy_isSet = true;
}

bool OAIInstanceGroupConfig::is_instance_flexibility_policy_Set() const{
    return m_instance_flexibility_policy_isSet;
}

bool OAIInstanceGroupConfig::is_instance_flexibility_policy_Valid() const{
    return m_instance_flexibility_policy_isValid;
}

QList<QString> OAIInstanceGroupConfig::getInstanceNames() const {
    return m_instance_names;
}
void OAIInstanceGroupConfig::setInstanceNames(const QList<QString> &instance_names) {
    m_instance_names = instance_names;
    m_instance_names_isSet = true;
}

bool OAIInstanceGroupConfig::is_instance_names_Set() const{
    return m_instance_names_isSet;
}

bool OAIInstanceGroupConfig::is_instance_names_Valid() const{
    return m_instance_names_isValid;
}

QList<OAIInstanceReference> OAIInstanceGroupConfig::getInstanceReferences() const {
    return m_instance_references;
}
void OAIInstanceGroupConfig::setInstanceReferences(const QList<OAIInstanceReference> &instance_references) {
    m_instance_references = instance_references;
    m_instance_references_isSet = true;
}

bool OAIInstanceGroupConfig::is_instance_references_Set() const{
    return m_instance_references_isSet;
}

bool OAIInstanceGroupConfig::is_instance_references_Valid() const{
    return m_instance_references_isValid;
}

bool OAIInstanceGroupConfig::isIsPreemptible() const {
    return m_is_preemptible;
}
void OAIInstanceGroupConfig::setIsPreemptible(const bool &is_preemptible) {
    m_is_preemptible = is_preemptible;
    m_is_preemptible_isSet = true;
}

bool OAIInstanceGroupConfig::is_is_preemptible_Set() const{
    return m_is_preemptible_isSet;
}

bool OAIInstanceGroupConfig::is_is_preemptible_Valid() const{
    return m_is_preemptible_isValid;
}

QString OAIInstanceGroupConfig::getMachineTypeUri() const {
    return m_machine_type_uri;
}
void OAIInstanceGroupConfig::setMachineTypeUri(const QString &machine_type_uri) {
    m_machine_type_uri = machine_type_uri;
    m_machine_type_uri_isSet = true;
}

bool OAIInstanceGroupConfig::is_machine_type_uri_Set() const{
    return m_machine_type_uri_isSet;
}

bool OAIInstanceGroupConfig::is_machine_type_uri_Valid() const{
    return m_machine_type_uri_isValid;
}

OAIManagedGroupConfig OAIInstanceGroupConfig::getManagedGroupConfig() const {
    return m_managed_group_config;
}
void OAIInstanceGroupConfig::setManagedGroupConfig(const OAIManagedGroupConfig &managed_group_config) {
    m_managed_group_config = managed_group_config;
    m_managed_group_config_isSet = true;
}

bool OAIInstanceGroupConfig::is_managed_group_config_Set() const{
    return m_managed_group_config_isSet;
}

bool OAIInstanceGroupConfig::is_managed_group_config_Valid() const{
    return m_managed_group_config_isValid;
}

QString OAIInstanceGroupConfig::getMinCpuPlatform() const {
    return m_min_cpu_platform;
}
void OAIInstanceGroupConfig::setMinCpuPlatform(const QString &min_cpu_platform) {
    m_min_cpu_platform = min_cpu_platform;
    m_min_cpu_platform_isSet = true;
}

bool OAIInstanceGroupConfig::is_min_cpu_platform_Set() const{
    return m_min_cpu_platform_isSet;
}

bool OAIInstanceGroupConfig::is_min_cpu_platform_Valid() const{
    return m_min_cpu_platform_isValid;
}

qint32 OAIInstanceGroupConfig::getMinNumInstances() const {
    return m_min_num_instances;
}
void OAIInstanceGroupConfig::setMinNumInstances(const qint32 &min_num_instances) {
    m_min_num_instances = min_num_instances;
    m_min_num_instances_isSet = true;
}

bool OAIInstanceGroupConfig::is_min_num_instances_Set() const{
    return m_min_num_instances_isSet;
}

bool OAIInstanceGroupConfig::is_min_num_instances_Valid() const{
    return m_min_num_instances_isValid;
}

qint32 OAIInstanceGroupConfig::getNumInstances() const {
    return m_num_instances;
}
void OAIInstanceGroupConfig::setNumInstances(const qint32 &num_instances) {
    m_num_instances = num_instances;
    m_num_instances_isSet = true;
}

bool OAIInstanceGroupConfig::is_num_instances_Set() const{
    return m_num_instances_isSet;
}

bool OAIInstanceGroupConfig::is_num_instances_Valid() const{
    return m_num_instances_isValid;
}

QString OAIInstanceGroupConfig::getPreemptibility() const {
    return m_preemptibility;
}
void OAIInstanceGroupConfig::setPreemptibility(const QString &preemptibility) {
    m_preemptibility = preemptibility;
    m_preemptibility_isSet = true;
}

bool OAIInstanceGroupConfig::is_preemptibility_Set() const{
    return m_preemptibility_isSet;
}

bool OAIInstanceGroupConfig::is_preemptibility_Valid() const{
    return m_preemptibility_isValid;
}

OAIStartupConfig OAIInstanceGroupConfig::getStartupConfig() const {
    return m_startup_config;
}
void OAIInstanceGroupConfig::setStartupConfig(const OAIStartupConfig &startup_config) {
    m_startup_config = startup_config;
    m_startup_config_isSet = true;
}

bool OAIInstanceGroupConfig::is_startup_config_Set() const{
    return m_startup_config_isSet;
}

bool OAIInstanceGroupConfig::is_startup_config_Valid() const{
    return m_startup_config_isValid;
}

bool OAIInstanceGroupConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_flexibility_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_preemptible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_group_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_cpu_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_num_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preemptibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_startup_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceGroupConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
