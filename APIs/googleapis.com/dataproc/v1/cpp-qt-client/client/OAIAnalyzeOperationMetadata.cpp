/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzeOperationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzeOperationMetadata::OAIAnalyzeOperationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzeOperationMetadata::OAIAnalyzeOperationMetadata() {
    this->initializeModel();
}

OAIAnalyzeOperationMetadata::~OAIAnalyzeOperationMetadata() {}

void OAIAnalyzeOperationMetadata::initializeModel() {

    m_analyzed_workload_name_isSet = false;
    m_analyzed_workload_name_isValid = false;

    m_analyzed_workload_type_isSet = false;
    m_analyzed_workload_type_isValid = false;

    m_analyzed_workload_uuid_isSet = false;
    m_analyzed_workload_uuid_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_done_time_isSet = false;
    m_done_time_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIAnalyzeOperationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzeOperationMetadata::fromJsonObject(QJsonObject json) {

    m_analyzed_workload_name_isValid = ::OpenAPI::fromJsonValue(m_analyzed_workload_name, json[QString("analyzedWorkloadName")]);
    m_analyzed_workload_name_isSet = !json[QString("analyzedWorkloadName")].isNull() && m_analyzed_workload_name_isValid;

    m_analyzed_workload_type_isValid = ::OpenAPI::fromJsonValue(m_analyzed_workload_type, json[QString("analyzedWorkloadType")]);
    m_analyzed_workload_type_isSet = !json[QString("analyzedWorkloadType")].isNull() && m_analyzed_workload_type_isValid;

    m_analyzed_workload_uuid_isValid = ::OpenAPI::fromJsonValue(m_analyzed_workload_uuid, json[QString("analyzedWorkloadUuid")]);
    m_analyzed_workload_uuid_isSet = !json[QString("analyzedWorkloadUuid")].isNull() && m_analyzed_workload_uuid_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_done_time_isValid = ::OpenAPI::fromJsonValue(m_done_time, json[QString("doneTime")]);
    m_done_time_isSet = !json[QString("doneTime")].isNull() && m_done_time_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIAnalyzeOperationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzeOperationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_analyzed_workload_name_isSet) {
        obj.insert(QString("analyzedWorkloadName"), ::OpenAPI::toJsonValue(m_analyzed_workload_name));
    }
    if (m_analyzed_workload_type_isSet) {
        obj.insert(QString("analyzedWorkloadType"), ::OpenAPI::toJsonValue(m_analyzed_workload_type));
    }
    if (m_analyzed_workload_uuid_isSet) {
        obj.insert(QString("analyzedWorkloadUuid"), ::OpenAPI::toJsonValue(m_analyzed_workload_uuid));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_done_time_isSet) {
        obj.insert(QString("doneTime"), ::OpenAPI::toJsonValue(m_done_time));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QString OAIAnalyzeOperationMetadata::getAnalyzedWorkloadName() const {
    return m_analyzed_workload_name;
}
void OAIAnalyzeOperationMetadata::setAnalyzedWorkloadName(const QString &analyzed_workload_name) {
    m_analyzed_workload_name = analyzed_workload_name;
    m_analyzed_workload_name_isSet = true;
}

bool OAIAnalyzeOperationMetadata::is_analyzed_workload_name_Set() const{
    return m_analyzed_workload_name_isSet;
}

bool OAIAnalyzeOperationMetadata::is_analyzed_workload_name_Valid() const{
    return m_analyzed_workload_name_isValid;
}

QString OAIAnalyzeOperationMetadata::getAnalyzedWorkloadType() const {
    return m_analyzed_workload_type;
}
void OAIAnalyzeOperationMetadata::setAnalyzedWorkloadType(const QString &analyzed_workload_type) {
    m_analyzed_workload_type = analyzed_workload_type;
    m_analyzed_workload_type_isSet = true;
}

bool OAIAnalyzeOperationMetadata::is_analyzed_workload_type_Set() const{
    return m_analyzed_workload_type_isSet;
}

bool OAIAnalyzeOperationMetadata::is_analyzed_workload_type_Valid() const{
    return m_analyzed_workload_type_isValid;
}

QString OAIAnalyzeOperationMetadata::getAnalyzedWorkloadUuid() const {
    return m_analyzed_workload_uuid;
}
void OAIAnalyzeOperationMetadata::setAnalyzedWorkloadUuid(const QString &analyzed_workload_uuid) {
    m_analyzed_workload_uuid = analyzed_workload_uuid;
    m_analyzed_workload_uuid_isSet = true;
}

bool OAIAnalyzeOperationMetadata::is_analyzed_workload_uuid_Set() const{
    return m_analyzed_workload_uuid_isSet;
}

bool OAIAnalyzeOperationMetadata::is_analyzed_workload_uuid_Valid() const{
    return m_analyzed_workload_uuid_isValid;
}

QString OAIAnalyzeOperationMetadata::getCreateTime() const {
    return m_create_time;
}
void OAIAnalyzeOperationMetadata::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIAnalyzeOperationMetadata::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIAnalyzeOperationMetadata::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIAnalyzeOperationMetadata::getDescription() const {
    return m_description;
}
void OAIAnalyzeOperationMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAnalyzeOperationMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAnalyzeOperationMetadata::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAnalyzeOperationMetadata::getDoneTime() const {
    return m_done_time;
}
void OAIAnalyzeOperationMetadata::setDoneTime(const QString &done_time) {
    m_done_time = done_time;
    m_done_time_isSet = true;
}

bool OAIAnalyzeOperationMetadata::is_done_time_Set() const{
    return m_done_time_isSet;
}

bool OAIAnalyzeOperationMetadata::is_done_time_Valid() const{
    return m_done_time_isValid;
}

QMap<QString, QString> OAIAnalyzeOperationMetadata::getLabels() const {
    return m_labels;
}
void OAIAnalyzeOperationMetadata::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIAnalyzeOperationMetadata::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIAnalyzeOperationMetadata::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<QString> OAIAnalyzeOperationMetadata::getWarnings() const {
    return m_warnings;
}
void OAIAnalyzeOperationMetadata::setWarnings(const QList<QString> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIAnalyzeOperationMetadata::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIAnalyzeOperationMetadata::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIAnalyzeOperationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analyzed_workload_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analyzed_workload_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analyzed_workload_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_done_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzeOperationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
