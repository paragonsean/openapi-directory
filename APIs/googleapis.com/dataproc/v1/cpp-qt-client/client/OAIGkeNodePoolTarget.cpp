/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGkeNodePoolTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGkeNodePoolTarget::OAIGkeNodePoolTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGkeNodePoolTarget::OAIGkeNodePoolTarget() {
    this->initializeModel();
}

OAIGkeNodePoolTarget::~OAIGkeNodePoolTarget() {}

void OAIGkeNodePoolTarget::initializeModel() {

    m_node_pool_isSet = false;
    m_node_pool_isValid = false;

    m_node_pool_config_isSet = false;
    m_node_pool_config_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;
}

void OAIGkeNodePoolTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGkeNodePoolTarget::fromJsonObject(QJsonObject json) {

    m_node_pool_isValid = ::OpenAPI::fromJsonValue(m_node_pool, json[QString("nodePool")]);
    m_node_pool_isSet = !json[QString("nodePool")].isNull() && m_node_pool_isValid;

    m_node_pool_config_isValid = ::OpenAPI::fromJsonValue(m_node_pool_config, json[QString("nodePoolConfig")]);
    m_node_pool_config_isSet = !json[QString("nodePoolConfig")].isNull() && m_node_pool_config_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;
}

QString OAIGkeNodePoolTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGkeNodePoolTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_node_pool_isSet) {
        obj.insert(QString("nodePool"), ::OpenAPI::toJsonValue(m_node_pool));
    }
    if (m_node_pool_config.isSet()) {
        obj.insert(QString("nodePoolConfig"), ::OpenAPI::toJsonValue(m_node_pool_config));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    return obj;
}

QString OAIGkeNodePoolTarget::getNodePool() const {
    return m_node_pool;
}
void OAIGkeNodePoolTarget::setNodePool(const QString &node_pool) {
    m_node_pool = node_pool;
    m_node_pool_isSet = true;
}

bool OAIGkeNodePoolTarget::is_node_pool_Set() const{
    return m_node_pool_isSet;
}

bool OAIGkeNodePoolTarget::is_node_pool_Valid() const{
    return m_node_pool_isValid;
}

OAIGkeNodePoolConfig OAIGkeNodePoolTarget::getNodePoolConfig() const {
    return m_node_pool_config;
}
void OAIGkeNodePoolTarget::setNodePoolConfig(const OAIGkeNodePoolConfig &node_pool_config) {
    m_node_pool_config = node_pool_config;
    m_node_pool_config_isSet = true;
}

bool OAIGkeNodePoolTarget::is_node_pool_config_Set() const{
    return m_node_pool_config_isSet;
}

bool OAIGkeNodePoolTarget::is_node_pool_config_Valid() const{
    return m_node_pool_config_isValid;
}

QList<QString> OAIGkeNodePoolTarget::getRoles() const {
    return m_roles;
}
void OAIGkeNodePoolTarget::setRoles(const QList<QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIGkeNodePoolTarget::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIGkeNodePoolTarget::is_roles_Valid() const{
    return m_roles_isValid;
}

bool OAIGkeNodePoolTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_pool_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGkeNodePoolTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
