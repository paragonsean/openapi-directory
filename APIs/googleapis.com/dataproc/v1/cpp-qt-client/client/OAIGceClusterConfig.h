/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGceClusterConfig.h
 *
 * Common config settings for resources of Compute Engine cluster instances, applicable to all instances in the cluster.
 */

#ifndef OAIGceClusterConfig_H
#define OAIGceClusterConfig_H

#include <QJsonObject>

#include "OAIConfidentialInstanceConfig.h"
#include "OAINodeGroupAffinity.h"
#include "OAIReservationAffinity.h"
#include "OAIShieldedInstanceConfig.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConfidentialInstanceConfig;
class OAINodeGroupAffinity;
class OAIReservationAffinity;
class OAIShieldedInstanceConfig;

class OAIGceClusterConfig : public OAIObject {
public:
    OAIGceClusterConfig();
    OAIGceClusterConfig(QString json);
    ~OAIGceClusterConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfidentialInstanceConfig getConfidentialInstanceConfig() const;
    void setConfidentialInstanceConfig(const OAIConfidentialInstanceConfig &confidential_instance_config);
    bool is_confidential_instance_config_Set() const;
    bool is_confidential_instance_config_Valid() const;

    bool isInternalIpOnly() const;
    void setInternalIpOnly(const bool &internal_ip_only);
    bool is_internal_ip_only_Set() const;
    bool is_internal_ip_only_Valid() const;

    QMap<QString, QString> getMetadata() const;
    void setMetadata(const QMap<QString, QString> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getNetworkUri() const;
    void setNetworkUri(const QString &network_uri);
    bool is_network_uri_Set() const;
    bool is_network_uri_Valid() const;

    OAINodeGroupAffinity getNodeGroupAffinity() const;
    void setNodeGroupAffinity(const OAINodeGroupAffinity &node_group_affinity);
    bool is_node_group_affinity_Set() const;
    bool is_node_group_affinity_Valid() const;

    QString getPrivateIpv6GoogleAccess() const;
    void setPrivateIpv6GoogleAccess(const QString &private_ipv6_google_access);
    bool is_private_ipv6_google_access_Set() const;
    bool is_private_ipv6_google_access_Valid() const;

    OAIReservationAffinity getReservationAffinity() const;
    void setReservationAffinity(const OAIReservationAffinity &reservation_affinity);
    bool is_reservation_affinity_Set() const;
    bool is_reservation_affinity_Valid() const;

    QString getServiceAccount() const;
    void setServiceAccount(const QString &service_account);
    bool is_service_account_Set() const;
    bool is_service_account_Valid() const;

    QList<QString> getServiceAccountScopes() const;
    void setServiceAccountScopes(const QList<QString> &service_account_scopes);
    bool is_service_account_scopes_Set() const;
    bool is_service_account_scopes_Valid() const;

    OAIShieldedInstanceConfig getShieldedInstanceConfig() const;
    void setShieldedInstanceConfig(const OAIShieldedInstanceConfig &shielded_instance_config);
    bool is_shielded_instance_config_Set() const;
    bool is_shielded_instance_config_Valid() const;

    QString getSubnetworkUri() const;
    void setSubnetworkUri(const QString &subnetwork_uri);
    bool is_subnetwork_uri_Set() const;
    bool is_subnetwork_uri_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getZoneUri() const;
    void setZoneUri(const QString &zone_uri);
    bool is_zone_uri_Set() const;
    bool is_zone_uri_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIConfidentialInstanceConfig m_confidential_instance_config;
    bool m_confidential_instance_config_isSet;
    bool m_confidential_instance_config_isValid;

    bool m_internal_ip_only;
    bool m_internal_ip_only_isSet;
    bool m_internal_ip_only_isValid;

    QMap<QString, QString> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_network_uri;
    bool m_network_uri_isSet;
    bool m_network_uri_isValid;

    OAINodeGroupAffinity m_node_group_affinity;
    bool m_node_group_affinity_isSet;
    bool m_node_group_affinity_isValid;

    QString m_private_ipv6_google_access;
    bool m_private_ipv6_google_access_isSet;
    bool m_private_ipv6_google_access_isValid;

    OAIReservationAffinity m_reservation_affinity;
    bool m_reservation_affinity_isSet;
    bool m_reservation_affinity_isValid;

    QString m_service_account;
    bool m_service_account_isSet;
    bool m_service_account_isValid;

    QList<QString> m_service_account_scopes;
    bool m_service_account_scopes_isSet;
    bool m_service_account_scopes_isValid;

    OAIShieldedInstanceConfig m_shielded_instance_config;
    bool m_shielded_instance_config_isSet;
    bool m_shielded_instance_config_isValid;

    QString m_subnetwork_uri;
    bool m_subnetwork_uri_isSet;
    bool m_subnetwork_uri_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_zone_uri;
    bool m_zone_uri_isSet;
    bool m_zone_uri_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGceClusterConfig)

#endif // OAIGceClusterConfig_H
