/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskConfig::OAIDiskConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskConfig::OAIDiskConfig() {
    this->initializeModel();
}

OAIDiskConfig::~OAIDiskConfig() {}

void OAIDiskConfig::initializeModel() {

    m_boot_disk_size_gb_isSet = false;
    m_boot_disk_size_gb_isValid = false;

    m_boot_disk_type_isSet = false;
    m_boot_disk_type_isValid = false;

    m_local_ssd_interface_isSet = false;
    m_local_ssd_interface_isValid = false;

    m_num_local_ssds_isSet = false;
    m_num_local_ssds_isValid = false;
}

void OAIDiskConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskConfig::fromJsonObject(QJsonObject json) {

    m_boot_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_boot_disk_size_gb, json[QString("bootDiskSizeGb")]);
    m_boot_disk_size_gb_isSet = !json[QString("bootDiskSizeGb")].isNull() && m_boot_disk_size_gb_isValid;

    m_boot_disk_type_isValid = ::OpenAPI::fromJsonValue(m_boot_disk_type, json[QString("bootDiskType")]);
    m_boot_disk_type_isSet = !json[QString("bootDiskType")].isNull() && m_boot_disk_type_isValid;

    m_local_ssd_interface_isValid = ::OpenAPI::fromJsonValue(m_local_ssd_interface, json[QString("localSsdInterface")]);
    m_local_ssd_interface_isSet = !json[QString("localSsdInterface")].isNull() && m_local_ssd_interface_isValid;

    m_num_local_ssds_isValid = ::OpenAPI::fromJsonValue(m_num_local_ssds, json[QString("numLocalSsds")]);
    m_num_local_ssds_isSet = !json[QString("numLocalSsds")].isNull() && m_num_local_ssds_isValid;
}

QString OAIDiskConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_boot_disk_size_gb_isSet) {
        obj.insert(QString("bootDiskSizeGb"), ::OpenAPI::toJsonValue(m_boot_disk_size_gb));
    }
    if (m_boot_disk_type_isSet) {
        obj.insert(QString("bootDiskType"), ::OpenAPI::toJsonValue(m_boot_disk_type));
    }
    if (m_local_ssd_interface_isSet) {
        obj.insert(QString("localSsdInterface"), ::OpenAPI::toJsonValue(m_local_ssd_interface));
    }
    if (m_num_local_ssds_isSet) {
        obj.insert(QString("numLocalSsds"), ::OpenAPI::toJsonValue(m_num_local_ssds));
    }
    return obj;
}

qint32 OAIDiskConfig::getBootDiskSizeGb() const {
    return m_boot_disk_size_gb;
}
void OAIDiskConfig::setBootDiskSizeGb(const qint32 &boot_disk_size_gb) {
    m_boot_disk_size_gb = boot_disk_size_gb;
    m_boot_disk_size_gb_isSet = true;
}

bool OAIDiskConfig::is_boot_disk_size_gb_Set() const{
    return m_boot_disk_size_gb_isSet;
}

bool OAIDiskConfig::is_boot_disk_size_gb_Valid() const{
    return m_boot_disk_size_gb_isValid;
}

QString OAIDiskConfig::getBootDiskType() const {
    return m_boot_disk_type;
}
void OAIDiskConfig::setBootDiskType(const QString &boot_disk_type) {
    m_boot_disk_type = boot_disk_type;
    m_boot_disk_type_isSet = true;
}

bool OAIDiskConfig::is_boot_disk_type_Set() const{
    return m_boot_disk_type_isSet;
}

bool OAIDiskConfig::is_boot_disk_type_Valid() const{
    return m_boot_disk_type_isValid;
}

QString OAIDiskConfig::getLocalSsdInterface() const {
    return m_local_ssd_interface;
}
void OAIDiskConfig::setLocalSsdInterface(const QString &local_ssd_interface) {
    m_local_ssd_interface = local_ssd_interface;
    m_local_ssd_interface_isSet = true;
}

bool OAIDiskConfig::is_local_ssd_interface_Set() const{
    return m_local_ssd_interface_isSet;
}

bool OAIDiskConfig::is_local_ssd_interface_Valid() const{
    return m_local_ssd_interface_isValid;
}

qint32 OAIDiskConfig::getNumLocalSsds() const {
    return m_num_local_ssds;
}
void OAIDiskConfig::setNumLocalSsds(const qint32 &num_local_ssds) {
    m_num_local_ssds = num_local_ssds;
    m_num_local_ssds_isSet = true;
}

bool OAIDiskConfig::is_num_local_ssds_Set() const{
    return m_num_local_ssds_isSet;
}

bool OAIDiskConfig::is_num_local_ssds_Valid() const{
    return m_num_local_ssds_isValid;
}

bool OAIDiskConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boot_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_ssd_interface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_local_ssds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
