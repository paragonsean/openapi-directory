/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGceClusterConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGceClusterConfig::OAIGceClusterConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGceClusterConfig::OAIGceClusterConfig() {
    this->initializeModel();
}

OAIGceClusterConfig::~OAIGceClusterConfig() {}

void OAIGceClusterConfig::initializeModel() {

    m_confidential_instance_config_isSet = false;
    m_confidential_instance_config_isValid = false;

    m_internal_ip_only_isSet = false;
    m_internal_ip_only_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_network_uri_isSet = false;
    m_network_uri_isValid = false;

    m_node_group_affinity_isSet = false;
    m_node_group_affinity_isValid = false;

    m_private_ipv6_google_access_isSet = false;
    m_private_ipv6_google_access_isValid = false;

    m_reservation_affinity_isSet = false;
    m_reservation_affinity_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_service_account_scopes_isSet = false;
    m_service_account_scopes_isValid = false;

    m_shielded_instance_config_isSet = false;
    m_shielded_instance_config_isValid = false;

    m_subnetwork_uri_isSet = false;
    m_subnetwork_uri_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_zone_uri_isSet = false;
    m_zone_uri_isValid = false;
}

void OAIGceClusterConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGceClusterConfig::fromJsonObject(QJsonObject json) {

    m_confidential_instance_config_isValid = ::OpenAPI::fromJsonValue(m_confidential_instance_config, json[QString("confidentialInstanceConfig")]);
    m_confidential_instance_config_isSet = !json[QString("confidentialInstanceConfig")].isNull() && m_confidential_instance_config_isValid;

    m_internal_ip_only_isValid = ::OpenAPI::fromJsonValue(m_internal_ip_only, json[QString("internalIpOnly")]);
    m_internal_ip_only_isSet = !json[QString("internalIpOnly")].isNull() && m_internal_ip_only_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_network_uri_isValid = ::OpenAPI::fromJsonValue(m_network_uri, json[QString("networkUri")]);
    m_network_uri_isSet = !json[QString("networkUri")].isNull() && m_network_uri_isValid;

    m_node_group_affinity_isValid = ::OpenAPI::fromJsonValue(m_node_group_affinity, json[QString("nodeGroupAffinity")]);
    m_node_group_affinity_isSet = !json[QString("nodeGroupAffinity")].isNull() && m_node_group_affinity_isValid;

    m_private_ipv6_google_access_isValid = ::OpenAPI::fromJsonValue(m_private_ipv6_google_access, json[QString("privateIpv6GoogleAccess")]);
    m_private_ipv6_google_access_isSet = !json[QString("privateIpv6GoogleAccess")].isNull() && m_private_ipv6_google_access_isValid;

    m_reservation_affinity_isValid = ::OpenAPI::fromJsonValue(m_reservation_affinity, json[QString("reservationAffinity")]);
    m_reservation_affinity_isSet = !json[QString("reservationAffinity")].isNull() && m_reservation_affinity_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_service_account_scopes_isValid = ::OpenAPI::fromJsonValue(m_service_account_scopes, json[QString("serviceAccountScopes")]);
    m_service_account_scopes_isSet = !json[QString("serviceAccountScopes")].isNull() && m_service_account_scopes_isValid;

    m_shielded_instance_config_isValid = ::OpenAPI::fromJsonValue(m_shielded_instance_config, json[QString("shieldedInstanceConfig")]);
    m_shielded_instance_config_isSet = !json[QString("shieldedInstanceConfig")].isNull() && m_shielded_instance_config_isValid;

    m_subnetwork_uri_isValid = ::OpenAPI::fromJsonValue(m_subnetwork_uri, json[QString("subnetworkUri")]);
    m_subnetwork_uri_isSet = !json[QString("subnetworkUri")].isNull() && m_subnetwork_uri_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_zone_uri_isValid = ::OpenAPI::fromJsonValue(m_zone_uri, json[QString("zoneUri")]);
    m_zone_uri_isSet = !json[QString("zoneUri")].isNull() && m_zone_uri_isValid;
}

QString OAIGceClusterConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGceClusterConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_confidential_instance_config.isSet()) {
        obj.insert(QString("confidentialInstanceConfig"), ::OpenAPI::toJsonValue(m_confidential_instance_config));
    }
    if (m_internal_ip_only_isSet) {
        obj.insert(QString("internalIpOnly"), ::OpenAPI::toJsonValue(m_internal_ip_only));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_network_uri_isSet) {
        obj.insert(QString("networkUri"), ::OpenAPI::toJsonValue(m_network_uri));
    }
    if (m_node_group_affinity.isSet()) {
        obj.insert(QString("nodeGroupAffinity"), ::OpenAPI::toJsonValue(m_node_group_affinity));
    }
    if (m_private_ipv6_google_access_isSet) {
        obj.insert(QString("privateIpv6GoogleAccess"), ::OpenAPI::toJsonValue(m_private_ipv6_google_access));
    }
    if (m_reservation_affinity.isSet()) {
        obj.insert(QString("reservationAffinity"), ::OpenAPI::toJsonValue(m_reservation_affinity));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_service_account_scopes.size() > 0) {
        obj.insert(QString("serviceAccountScopes"), ::OpenAPI::toJsonValue(m_service_account_scopes));
    }
    if (m_shielded_instance_config.isSet()) {
        obj.insert(QString("shieldedInstanceConfig"), ::OpenAPI::toJsonValue(m_shielded_instance_config));
    }
    if (m_subnetwork_uri_isSet) {
        obj.insert(QString("subnetworkUri"), ::OpenAPI::toJsonValue(m_subnetwork_uri));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_zone_uri_isSet) {
        obj.insert(QString("zoneUri"), ::OpenAPI::toJsonValue(m_zone_uri));
    }
    return obj;
}

OAIConfidentialInstanceConfig OAIGceClusterConfig::getConfidentialInstanceConfig() const {
    return m_confidential_instance_config;
}
void OAIGceClusterConfig::setConfidentialInstanceConfig(const OAIConfidentialInstanceConfig &confidential_instance_config) {
    m_confidential_instance_config = confidential_instance_config;
    m_confidential_instance_config_isSet = true;
}

bool OAIGceClusterConfig::is_confidential_instance_config_Set() const{
    return m_confidential_instance_config_isSet;
}

bool OAIGceClusterConfig::is_confidential_instance_config_Valid() const{
    return m_confidential_instance_config_isValid;
}

bool OAIGceClusterConfig::isInternalIpOnly() const {
    return m_internal_ip_only;
}
void OAIGceClusterConfig::setInternalIpOnly(const bool &internal_ip_only) {
    m_internal_ip_only = internal_ip_only;
    m_internal_ip_only_isSet = true;
}

bool OAIGceClusterConfig::is_internal_ip_only_Set() const{
    return m_internal_ip_only_isSet;
}

bool OAIGceClusterConfig::is_internal_ip_only_Valid() const{
    return m_internal_ip_only_isValid;
}

QMap<QString, QString> OAIGceClusterConfig::getMetadata() const {
    return m_metadata;
}
void OAIGceClusterConfig::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGceClusterConfig::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGceClusterConfig::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIGceClusterConfig::getNetworkUri() const {
    return m_network_uri;
}
void OAIGceClusterConfig::setNetworkUri(const QString &network_uri) {
    m_network_uri = network_uri;
    m_network_uri_isSet = true;
}

bool OAIGceClusterConfig::is_network_uri_Set() const{
    return m_network_uri_isSet;
}

bool OAIGceClusterConfig::is_network_uri_Valid() const{
    return m_network_uri_isValid;
}

OAINodeGroupAffinity OAIGceClusterConfig::getNodeGroupAffinity() const {
    return m_node_group_affinity;
}
void OAIGceClusterConfig::setNodeGroupAffinity(const OAINodeGroupAffinity &node_group_affinity) {
    m_node_group_affinity = node_group_affinity;
    m_node_group_affinity_isSet = true;
}

bool OAIGceClusterConfig::is_node_group_affinity_Set() const{
    return m_node_group_affinity_isSet;
}

bool OAIGceClusterConfig::is_node_group_affinity_Valid() const{
    return m_node_group_affinity_isValid;
}

QString OAIGceClusterConfig::getPrivateIpv6GoogleAccess() const {
    return m_private_ipv6_google_access;
}
void OAIGceClusterConfig::setPrivateIpv6GoogleAccess(const QString &private_ipv6_google_access) {
    m_private_ipv6_google_access = private_ipv6_google_access;
    m_private_ipv6_google_access_isSet = true;
}

bool OAIGceClusterConfig::is_private_ipv6_google_access_Set() const{
    return m_private_ipv6_google_access_isSet;
}

bool OAIGceClusterConfig::is_private_ipv6_google_access_Valid() const{
    return m_private_ipv6_google_access_isValid;
}

OAIReservationAffinity OAIGceClusterConfig::getReservationAffinity() const {
    return m_reservation_affinity;
}
void OAIGceClusterConfig::setReservationAffinity(const OAIReservationAffinity &reservation_affinity) {
    m_reservation_affinity = reservation_affinity;
    m_reservation_affinity_isSet = true;
}

bool OAIGceClusterConfig::is_reservation_affinity_Set() const{
    return m_reservation_affinity_isSet;
}

bool OAIGceClusterConfig::is_reservation_affinity_Valid() const{
    return m_reservation_affinity_isValid;
}

QString OAIGceClusterConfig::getServiceAccount() const {
    return m_service_account;
}
void OAIGceClusterConfig::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIGceClusterConfig::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIGceClusterConfig::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QList<QString> OAIGceClusterConfig::getServiceAccountScopes() const {
    return m_service_account_scopes;
}
void OAIGceClusterConfig::setServiceAccountScopes(const QList<QString> &service_account_scopes) {
    m_service_account_scopes = service_account_scopes;
    m_service_account_scopes_isSet = true;
}

bool OAIGceClusterConfig::is_service_account_scopes_Set() const{
    return m_service_account_scopes_isSet;
}

bool OAIGceClusterConfig::is_service_account_scopes_Valid() const{
    return m_service_account_scopes_isValid;
}

OAIShieldedInstanceConfig OAIGceClusterConfig::getShieldedInstanceConfig() const {
    return m_shielded_instance_config;
}
void OAIGceClusterConfig::setShieldedInstanceConfig(const OAIShieldedInstanceConfig &shielded_instance_config) {
    m_shielded_instance_config = shielded_instance_config;
    m_shielded_instance_config_isSet = true;
}

bool OAIGceClusterConfig::is_shielded_instance_config_Set() const{
    return m_shielded_instance_config_isSet;
}

bool OAIGceClusterConfig::is_shielded_instance_config_Valid() const{
    return m_shielded_instance_config_isValid;
}

QString OAIGceClusterConfig::getSubnetworkUri() const {
    return m_subnetwork_uri;
}
void OAIGceClusterConfig::setSubnetworkUri(const QString &subnetwork_uri) {
    m_subnetwork_uri = subnetwork_uri;
    m_subnetwork_uri_isSet = true;
}

bool OAIGceClusterConfig::is_subnetwork_uri_Set() const{
    return m_subnetwork_uri_isSet;
}

bool OAIGceClusterConfig::is_subnetwork_uri_Valid() const{
    return m_subnetwork_uri_isValid;
}

QList<QString> OAIGceClusterConfig::getTags() const {
    return m_tags;
}
void OAIGceClusterConfig::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGceClusterConfig::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGceClusterConfig::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIGceClusterConfig::getZoneUri() const {
    return m_zone_uri;
}
void OAIGceClusterConfig::setZoneUri(const QString &zone_uri) {
    m_zone_uri = zone_uri;
    m_zone_uri_isSet = true;
}

bool OAIGceClusterConfig::is_zone_uri_Set() const{
    return m_zone_uri_isSet;
}

bool OAIGceClusterConfig::is_zone_uri_Valid() const{
    return m_zone_uri_isValid;
}

bool OAIGceClusterConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidential_instance_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_ip_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_group_affinity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ipv6_google_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_affinity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shielded_instance_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGceClusterConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
