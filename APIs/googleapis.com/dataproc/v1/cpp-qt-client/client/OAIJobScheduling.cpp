/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobScheduling.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobScheduling::OAIJobScheduling(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobScheduling::OAIJobScheduling() {
    this->initializeModel();
}

OAIJobScheduling::~OAIJobScheduling() {}

void OAIJobScheduling::initializeModel() {

    m_max_failures_per_hour_isSet = false;
    m_max_failures_per_hour_isValid = false;

    m_max_failures_total_isSet = false;
    m_max_failures_total_isValid = false;
}

void OAIJobScheduling::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobScheduling::fromJsonObject(QJsonObject json) {

    m_max_failures_per_hour_isValid = ::OpenAPI::fromJsonValue(m_max_failures_per_hour, json[QString("maxFailuresPerHour")]);
    m_max_failures_per_hour_isSet = !json[QString("maxFailuresPerHour")].isNull() && m_max_failures_per_hour_isValid;

    m_max_failures_total_isValid = ::OpenAPI::fromJsonValue(m_max_failures_total, json[QString("maxFailuresTotal")]);
    m_max_failures_total_isSet = !json[QString("maxFailuresTotal")].isNull() && m_max_failures_total_isValid;
}

QString OAIJobScheduling::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobScheduling::asJsonObject() const {
    QJsonObject obj;
    if (m_max_failures_per_hour_isSet) {
        obj.insert(QString("maxFailuresPerHour"), ::OpenAPI::toJsonValue(m_max_failures_per_hour));
    }
    if (m_max_failures_total_isSet) {
        obj.insert(QString("maxFailuresTotal"), ::OpenAPI::toJsonValue(m_max_failures_total));
    }
    return obj;
}

qint32 OAIJobScheduling::getMaxFailuresPerHour() const {
    return m_max_failures_per_hour;
}
void OAIJobScheduling::setMaxFailuresPerHour(const qint32 &max_failures_per_hour) {
    m_max_failures_per_hour = max_failures_per_hour;
    m_max_failures_per_hour_isSet = true;
}

bool OAIJobScheduling::is_max_failures_per_hour_Set() const{
    return m_max_failures_per_hour_isSet;
}

bool OAIJobScheduling::is_max_failures_per_hour_Valid() const{
    return m_max_failures_per_hour_isValid;
}

qint32 OAIJobScheduling::getMaxFailuresTotal() const {
    return m_max_failures_total;
}
void OAIJobScheduling::setMaxFailuresTotal(const qint32 &max_failures_total) {
    m_max_failures_total = max_failures_total;
    m_max_failures_total_isSet = true;
}

bool OAIJobScheduling::is_max_failures_total_Set() const{
    return m_max_failures_total_isSet;
}

bool OAIJobScheduling::is_max_failures_total_Valid() const{
    return m_max_failures_total_isValid;
}

bool OAIJobScheduling::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_failures_per_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_failures_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobScheduling::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
