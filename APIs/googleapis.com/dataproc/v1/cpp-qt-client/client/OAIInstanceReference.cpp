/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceReference::OAIInstanceReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceReference::OAIInstanceReference() {
    this->initializeModel();
}

OAIInstanceReference::~OAIInstanceReference() {}

void OAIInstanceReference::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_instance_name_isSet = false;
    m_instance_name_isValid = false;

    m_public_ecies_key_isSet = false;
    m_public_ecies_key_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;
}

void OAIInstanceReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceReference::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_instance_name_isValid = ::OpenAPI::fromJsonValue(m_instance_name, json[QString("instanceName")]);
    m_instance_name_isSet = !json[QString("instanceName")].isNull() && m_instance_name_isValid;

    m_public_ecies_key_isValid = ::OpenAPI::fromJsonValue(m_public_ecies_key, json[QString("publicEciesKey")]);
    m_public_ecies_key_isSet = !json[QString("publicEciesKey")].isNull() && m_public_ecies_key_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("publicKey")]);
    m_public_key_isSet = !json[QString("publicKey")].isNull() && m_public_key_isValid;
}

QString OAIInstanceReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceReference::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_instance_name_isSet) {
        obj.insert(QString("instanceName"), ::OpenAPI::toJsonValue(m_instance_name));
    }
    if (m_public_ecies_key_isSet) {
        obj.insert(QString("publicEciesKey"), ::OpenAPI::toJsonValue(m_public_ecies_key));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("publicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    return obj;
}

QString OAIInstanceReference::getInstanceId() const {
    return m_instance_id;
}
void OAIInstanceReference::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIInstanceReference::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIInstanceReference::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIInstanceReference::getInstanceName() const {
    return m_instance_name;
}
void OAIInstanceReference::setInstanceName(const QString &instance_name) {
    m_instance_name = instance_name;
    m_instance_name_isSet = true;
}

bool OAIInstanceReference::is_instance_name_Set() const{
    return m_instance_name_isSet;
}

bool OAIInstanceReference::is_instance_name_Valid() const{
    return m_instance_name_isValid;
}

QString OAIInstanceReference::getPublicEciesKey() const {
    return m_public_ecies_key;
}
void OAIInstanceReference::setPublicEciesKey(const QString &public_ecies_key) {
    m_public_ecies_key = public_ecies_key;
    m_public_ecies_key_isSet = true;
}

bool OAIInstanceReference::is_public_ecies_key_Set() const{
    return m_public_ecies_key_isSet;
}

bool OAIInstanceReference::is_public_ecies_key_Valid() const{
    return m_public_ecies_key_isValid;
}

QString OAIInstanceReference::getPublicKey() const {
    return m_public_key;
}
void OAIInstanceReference::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIInstanceReference::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIInstanceReference::is_public_key_Valid() const{
    return m_public_key_isValid;
}

bool OAIInstanceReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ecies_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
