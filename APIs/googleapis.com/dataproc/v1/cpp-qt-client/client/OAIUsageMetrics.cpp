/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageMetrics::OAIUsageMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageMetrics::OAIUsageMetrics() {
    this->initializeModel();
}

OAIUsageMetrics::~OAIUsageMetrics() {}

void OAIUsageMetrics::initializeModel() {

    m_accelerator_type_isSet = false;
    m_accelerator_type_isValid = false;

    m_milli_accelerator_seconds_isSet = false;
    m_milli_accelerator_seconds_isValid = false;

    m_milli_dcu_seconds_isSet = false;
    m_milli_dcu_seconds_isValid = false;

    m_shuffle_storage_gb_seconds_isSet = false;
    m_shuffle_storage_gb_seconds_isValid = false;
}

void OAIUsageMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageMetrics::fromJsonObject(QJsonObject json) {

    m_accelerator_type_isValid = ::OpenAPI::fromJsonValue(m_accelerator_type, json[QString("acceleratorType")]);
    m_accelerator_type_isSet = !json[QString("acceleratorType")].isNull() && m_accelerator_type_isValid;

    m_milli_accelerator_seconds_isValid = ::OpenAPI::fromJsonValue(m_milli_accelerator_seconds, json[QString("milliAcceleratorSeconds")]);
    m_milli_accelerator_seconds_isSet = !json[QString("milliAcceleratorSeconds")].isNull() && m_milli_accelerator_seconds_isValid;

    m_milli_dcu_seconds_isValid = ::OpenAPI::fromJsonValue(m_milli_dcu_seconds, json[QString("milliDcuSeconds")]);
    m_milli_dcu_seconds_isSet = !json[QString("milliDcuSeconds")].isNull() && m_milli_dcu_seconds_isValid;

    m_shuffle_storage_gb_seconds_isValid = ::OpenAPI::fromJsonValue(m_shuffle_storage_gb_seconds, json[QString("shuffleStorageGbSeconds")]);
    m_shuffle_storage_gb_seconds_isSet = !json[QString("shuffleStorageGbSeconds")].isNull() && m_shuffle_storage_gb_seconds_isValid;
}

QString OAIUsageMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerator_type_isSet) {
        obj.insert(QString("acceleratorType"), ::OpenAPI::toJsonValue(m_accelerator_type));
    }
    if (m_milli_accelerator_seconds_isSet) {
        obj.insert(QString("milliAcceleratorSeconds"), ::OpenAPI::toJsonValue(m_milli_accelerator_seconds));
    }
    if (m_milli_dcu_seconds_isSet) {
        obj.insert(QString("milliDcuSeconds"), ::OpenAPI::toJsonValue(m_milli_dcu_seconds));
    }
    if (m_shuffle_storage_gb_seconds_isSet) {
        obj.insert(QString("shuffleStorageGbSeconds"), ::OpenAPI::toJsonValue(m_shuffle_storage_gb_seconds));
    }
    return obj;
}

QString OAIUsageMetrics::getAcceleratorType() const {
    return m_accelerator_type;
}
void OAIUsageMetrics::setAcceleratorType(const QString &accelerator_type) {
    m_accelerator_type = accelerator_type;
    m_accelerator_type_isSet = true;
}

bool OAIUsageMetrics::is_accelerator_type_Set() const{
    return m_accelerator_type_isSet;
}

bool OAIUsageMetrics::is_accelerator_type_Valid() const{
    return m_accelerator_type_isValid;
}

QString OAIUsageMetrics::getMilliAcceleratorSeconds() const {
    return m_milli_accelerator_seconds;
}
void OAIUsageMetrics::setMilliAcceleratorSeconds(const QString &milli_accelerator_seconds) {
    m_milli_accelerator_seconds = milli_accelerator_seconds;
    m_milli_accelerator_seconds_isSet = true;
}

bool OAIUsageMetrics::is_milli_accelerator_seconds_Set() const{
    return m_milli_accelerator_seconds_isSet;
}

bool OAIUsageMetrics::is_milli_accelerator_seconds_Valid() const{
    return m_milli_accelerator_seconds_isValid;
}

QString OAIUsageMetrics::getMilliDcuSeconds() const {
    return m_milli_dcu_seconds;
}
void OAIUsageMetrics::setMilliDcuSeconds(const QString &milli_dcu_seconds) {
    m_milli_dcu_seconds = milli_dcu_seconds;
    m_milli_dcu_seconds_isSet = true;
}

bool OAIUsageMetrics::is_milli_dcu_seconds_Set() const{
    return m_milli_dcu_seconds_isSet;
}

bool OAIUsageMetrics::is_milli_dcu_seconds_Valid() const{
    return m_milli_dcu_seconds_isValid;
}

QString OAIUsageMetrics::getShuffleStorageGbSeconds() const {
    return m_shuffle_storage_gb_seconds;
}
void OAIUsageMetrics::setShuffleStorageGbSeconds(const QString &shuffle_storage_gb_seconds) {
    m_shuffle_storage_gb_seconds = shuffle_storage_gb_seconds;
    m_shuffle_storage_gb_seconds_isSet = true;
}

bool OAIUsageMetrics::is_shuffle_storage_gb_seconds_Set() const{
    return m_shuffle_storage_gb_seconds_isSet;
}

bool OAIUsageMetrics::is_shuffle_storage_gb_seconds_Valid() const{
    return m_shuffle_storage_gb_seconds_isValid;
}

bool OAIUsageMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milli_accelerator_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milli_dcu_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shuffle_storage_gb_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
