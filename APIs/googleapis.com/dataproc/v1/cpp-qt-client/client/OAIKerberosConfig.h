/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIKerberosConfig.h
 *
 * Specifies Kerberos related configuration.
 */

#ifndef OAIKerberosConfig_H
#define OAIKerberosConfig_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIKerberosConfig : public OAIObject {
public:
    OAIKerberosConfig();
    OAIKerberosConfig(QString json);
    ~OAIKerberosConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCrossRealmTrustAdminServer() const;
    void setCrossRealmTrustAdminServer(const QString &cross_realm_trust_admin_server);
    bool is_cross_realm_trust_admin_server_Set() const;
    bool is_cross_realm_trust_admin_server_Valid() const;

    QString getCrossRealmTrustKdc() const;
    void setCrossRealmTrustKdc(const QString &cross_realm_trust_kdc);
    bool is_cross_realm_trust_kdc_Set() const;
    bool is_cross_realm_trust_kdc_Valid() const;

    QString getCrossRealmTrustRealm() const;
    void setCrossRealmTrustRealm(const QString &cross_realm_trust_realm);
    bool is_cross_realm_trust_realm_Set() const;
    bool is_cross_realm_trust_realm_Valid() const;

    QString getCrossRealmTrustSharedPasswordUri() const;
    void setCrossRealmTrustSharedPasswordUri(const QString &cross_realm_trust_shared_password_uri);
    bool is_cross_realm_trust_shared_password_uri_Set() const;
    bool is_cross_realm_trust_shared_password_uri_Valid() const;

    bool isEnableKerberos() const;
    void setEnableKerberos(const bool &enable_kerberos);
    bool is_enable_kerberos_Set() const;
    bool is_enable_kerberos_Valid() const;

    QString getKdcDbKeyUri() const;
    void setKdcDbKeyUri(const QString &kdc_db_key_uri);
    bool is_kdc_db_key_uri_Set() const;
    bool is_kdc_db_key_uri_Valid() const;

    QString getKeyPasswordUri() const;
    void setKeyPasswordUri(const QString &key_password_uri);
    bool is_key_password_uri_Set() const;
    bool is_key_password_uri_Valid() const;

    QString getKeystorePasswordUri() const;
    void setKeystorePasswordUri(const QString &keystore_password_uri);
    bool is_keystore_password_uri_Set() const;
    bool is_keystore_password_uri_Valid() const;

    QString getKeystoreUri() const;
    void setKeystoreUri(const QString &keystore_uri);
    bool is_keystore_uri_Set() const;
    bool is_keystore_uri_Valid() const;

    QString getKmsKeyUri() const;
    void setKmsKeyUri(const QString &kms_key_uri);
    bool is_kms_key_uri_Set() const;
    bool is_kms_key_uri_Valid() const;

    QString getRealm() const;
    void setRealm(const QString &realm);
    bool is_realm_Set() const;
    bool is_realm_Valid() const;

    QString getRootPrincipalPasswordUri() const;
    void setRootPrincipalPasswordUri(const QString &root_principal_password_uri);
    bool is_root_principal_password_uri_Set() const;
    bool is_root_principal_password_uri_Valid() const;

    qint32 getTgtLifetimeHours() const;
    void setTgtLifetimeHours(const qint32 &tgt_lifetime_hours);
    bool is_tgt_lifetime_hours_Set() const;
    bool is_tgt_lifetime_hours_Valid() const;

    QString getTruststorePasswordUri() const;
    void setTruststorePasswordUri(const QString &truststore_password_uri);
    bool is_truststore_password_uri_Set() const;
    bool is_truststore_password_uri_Valid() const;

    QString getTruststoreUri() const;
    void setTruststoreUri(const QString &truststore_uri);
    bool is_truststore_uri_Set() const;
    bool is_truststore_uri_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cross_realm_trust_admin_server;
    bool m_cross_realm_trust_admin_server_isSet;
    bool m_cross_realm_trust_admin_server_isValid;

    QString m_cross_realm_trust_kdc;
    bool m_cross_realm_trust_kdc_isSet;
    bool m_cross_realm_trust_kdc_isValid;

    QString m_cross_realm_trust_realm;
    bool m_cross_realm_trust_realm_isSet;
    bool m_cross_realm_trust_realm_isValid;

    QString m_cross_realm_trust_shared_password_uri;
    bool m_cross_realm_trust_shared_password_uri_isSet;
    bool m_cross_realm_trust_shared_password_uri_isValid;

    bool m_enable_kerberos;
    bool m_enable_kerberos_isSet;
    bool m_enable_kerberos_isValid;

    QString m_kdc_db_key_uri;
    bool m_kdc_db_key_uri_isSet;
    bool m_kdc_db_key_uri_isValid;

    QString m_key_password_uri;
    bool m_key_password_uri_isSet;
    bool m_key_password_uri_isValid;

    QString m_keystore_password_uri;
    bool m_keystore_password_uri_isSet;
    bool m_keystore_password_uri_isValid;

    QString m_keystore_uri;
    bool m_keystore_uri_isSet;
    bool m_keystore_uri_isValid;

    QString m_kms_key_uri;
    bool m_kms_key_uri_isSet;
    bool m_kms_key_uri_isValid;

    QString m_realm;
    bool m_realm_isSet;
    bool m_realm_isValid;

    QString m_root_principal_password_uri;
    bool m_root_principal_password_uri_isSet;
    bool m_root_principal_password_uri_isValid;

    qint32 m_tgt_lifetime_hours;
    bool m_tgt_lifetime_hours_isSet;
    bool m_tgt_lifetime_hours_isValid;

    QString m_truststore_password_uri;
    bool m_truststore_password_uri_isSet;
    bool m_truststore_password_uri_isValid;

    QString m_truststore_uri;
    bool m_truststore_uri_isSet;
    bool m_truststore_uri_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIKerberosConfig)

#endif // OAIKerberosConfig_H
