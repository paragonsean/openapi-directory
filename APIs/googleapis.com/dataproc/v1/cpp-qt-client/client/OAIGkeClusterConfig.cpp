/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGkeClusterConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGkeClusterConfig::OAIGkeClusterConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGkeClusterConfig::OAIGkeClusterConfig() {
    this->initializeModel();
}

OAIGkeClusterConfig::~OAIGkeClusterConfig() {}

void OAIGkeClusterConfig::initializeModel() {

    m_gke_cluster_target_isSet = false;
    m_gke_cluster_target_isValid = false;

    m_namespaced_gke_deployment_target_isSet = false;
    m_namespaced_gke_deployment_target_isValid = false;

    m_node_pool_target_isSet = false;
    m_node_pool_target_isValid = false;
}

void OAIGkeClusterConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGkeClusterConfig::fromJsonObject(QJsonObject json) {

    m_gke_cluster_target_isValid = ::OpenAPI::fromJsonValue(m_gke_cluster_target, json[QString("gkeClusterTarget")]);
    m_gke_cluster_target_isSet = !json[QString("gkeClusterTarget")].isNull() && m_gke_cluster_target_isValid;

    m_namespaced_gke_deployment_target_isValid = ::OpenAPI::fromJsonValue(m_namespaced_gke_deployment_target, json[QString("namespacedGkeDeploymentTarget")]);
    m_namespaced_gke_deployment_target_isSet = !json[QString("namespacedGkeDeploymentTarget")].isNull() && m_namespaced_gke_deployment_target_isValid;

    m_node_pool_target_isValid = ::OpenAPI::fromJsonValue(m_node_pool_target, json[QString("nodePoolTarget")]);
    m_node_pool_target_isSet = !json[QString("nodePoolTarget")].isNull() && m_node_pool_target_isValid;
}

QString OAIGkeClusterConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGkeClusterConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_gke_cluster_target_isSet) {
        obj.insert(QString("gkeClusterTarget"), ::OpenAPI::toJsonValue(m_gke_cluster_target));
    }
    if (m_namespaced_gke_deployment_target.isSet()) {
        obj.insert(QString("namespacedGkeDeploymentTarget"), ::OpenAPI::toJsonValue(m_namespaced_gke_deployment_target));
    }
    if (m_node_pool_target.size() > 0) {
        obj.insert(QString("nodePoolTarget"), ::OpenAPI::toJsonValue(m_node_pool_target));
    }
    return obj;
}

QString OAIGkeClusterConfig::getGkeClusterTarget() const {
    return m_gke_cluster_target;
}
void OAIGkeClusterConfig::setGkeClusterTarget(const QString &gke_cluster_target) {
    m_gke_cluster_target = gke_cluster_target;
    m_gke_cluster_target_isSet = true;
}

bool OAIGkeClusterConfig::is_gke_cluster_target_Set() const{
    return m_gke_cluster_target_isSet;
}

bool OAIGkeClusterConfig::is_gke_cluster_target_Valid() const{
    return m_gke_cluster_target_isValid;
}

OAINamespacedGkeDeploymentTarget OAIGkeClusterConfig::getNamespacedGkeDeploymentTarget() const {
    return m_namespaced_gke_deployment_target;
}
void OAIGkeClusterConfig::setNamespacedGkeDeploymentTarget(const OAINamespacedGkeDeploymentTarget &namespaced_gke_deployment_target) {
    m_namespaced_gke_deployment_target = namespaced_gke_deployment_target;
    m_namespaced_gke_deployment_target_isSet = true;
}

bool OAIGkeClusterConfig::is_namespaced_gke_deployment_target_Set() const{
    return m_namespaced_gke_deployment_target_isSet;
}

bool OAIGkeClusterConfig::is_namespaced_gke_deployment_target_Valid() const{
    return m_namespaced_gke_deployment_target_isValid;
}

QList<OAIGkeNodePoolTarget> OAIGkeClusterConfig::getNodePoolTarget() const {
    return m_node_pool_target;
}
void OAIGkeClusterConfig::setNodePoolTarget(const QList<OAIGkeNodePoolTarget> &node_pool_target) {
    m_node_pool_target = node_pool_target;
    m_node_pool_target_isSet = true;
}

bool OAIGkeClusterConfig::is_node_pool_target_Set() const{
    return m_node_pool_target_isSet;
}

bool OAIGkeClusterConfig::is_node_pool_target_Valid() const{
    return m_node_pool_target_isValid;
}

bool OAIGkeClusterConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gke_cluster_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespaced_gke_deployment_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_pool_target.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGkeClusterConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
