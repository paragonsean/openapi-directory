/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowMetadata::OAIWorkflowMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowMetadata::OAIWorkflowMetadata() {
    this->initializeModel();
}

OAIWorkflowMetadata::~OAIWorkflowMetadata() {}

void OAIWorkflowMetadata::initializeModel() {

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_cluster_uuid_isSet = false;
    m_cluster_uuid_isValid = false;

    m_create_cluster_isSet = false;
    m_create_cluster_isValid = false;

    m_dag_end_time_isSet = false;
    m_dag_end_time_isValid = false;

    m_dag_start_time_isSet = false;
    m_dag_start_time_isValid = false;

    m_dag_timeout_isSet = false;
    m_dag_timeout_isValid = false;

    m_delete_cluster_isSet = false;
    m_delete_cluster_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_graph_isSet = false;
    m_graph_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIWorkflowMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowMetadata::fromJsonObject(QJsonObject json) {

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_cluster_uuid_isValid = ::OpenAPI::fromJsonValue(m_cluster_uuid, json[QString("clusterUuid")]);
    m_cluster_uuid_isSet = !json[QString("clusterUuid")].isNull() && m_cluster_uuid_isValid;

    m_create_cluster_isValid = ::OpenAPI::fromJsonValue(m_create_cluster, json[QString("createCluster")]);
    m_create_cluster_isSet = !json[QString("createCluster")].isNull() && m_create_cluster_isValid;

    m_dag_end_time_isValid = ::OpenAPI::fromJsonValue(m_dag_end_time, json[QString("dagEndTime")]);
    m_dag_end_time_isSet = !json[QString("dagEndTime")].isNull() && m_dag_end_time_isValid;

    m_dag_start_time_isValid = ::OpenAPI::fromJsonValue(m_dag_start_time, json[QString("dagStartTime")]);
    m_dag_start_time_isSet = !json[QString("dagStartTime")].isNull() && m_dag_start_time_isValid;

    m_dag_timeout_isValid = ::OpenAPI::fromJsonValue(m_dag_timeout, json[QString("dagTimeout")]);
    m_dag_timeout_isSet = !json[QString("dagTimeout")].isNull() && m_dag_timeout_isValid;

    m_delete_cluster_isValid = ::OpenAPI::fromJsonValue(m_delete_cluster, json[QString("deleteCluster")]);
    m_delete_cluster_isSet = !json[QString("deleteCluster")].isNull() && m_delete_cluster_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_graph_isValid = ::OpenAPI::fromJsonValue(m_graph, json[QString("graph")]);
    m_graph_isSet = !json[QString("graph")].isNull() && m_graph_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIWorkflowMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_cluster_uuid_isSet) {
        obj.insert(QString("clusterUuid"), ::OpenAPI::toJsonValue(m_cluster_uuid));
    }
    if (m_create_cluster.isSet()) {
        obj.insert(QString("createCluster"), ::OpenAPI::toJsonValue(m_create_cluster));
    }
    if (m_dag_end_time_isSet) {
        obj.insert(QString("dagEndTime"), ::OpenAPI::toJsonValue(m_dag_end_time));
    }
    if (m_dag_start_time_isSet) {
        obj.insert(QString("dagStartTime"), ::OpenAPI::toJsonValue(m_dag_start_time));
    }
    if (m_dag_timeout_isSet) {
        obj.insert(QString("dagTimeout"), ::OpenAPI::toJsonValue(m_dag_timeout));
    }
    if (m_delete_cluster.isSet()) {
        obj.insert(QString("deleteCluster"), ::OpenAPI::toJsonValue(m_delete_cluster));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_graph.isSet()) {
        obj.insert(QString("graph"), ::OpenAPI::toJsonValue(m_graph));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIWorkflowMetadata::getClusterName() const {
    return m_cluster_name;
}
void OAIWorkflowMetadata::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIWorkflowMetadata::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIWorkflowMetadata::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAIWorkflowMetadata::getClusterUuid() const {
    return m_cluster_uuid;
}
void OAIWorkflowMetadata::setClusterUuid(const QString &cluster_uuid) {
    m_cluster_uuid = cluster_uuid;
    m_cluster_uuid_isSet = true;
}

bool OAIWorkflowMetadata::is_cluster_uuid_Set() const{
    return m_cluster_uuid_isSet;
}

bool OAIWorkflowMetadata::is_cluster_uuid_Valid() const{
    return m_cluster_uuid_isValid;
}

OAIClusterOperation OAIWorkflowMetadata::getCreateCluster() const {
    return m_create_cluster;
}
void OAIWorkflowMetadata::setCreateCluster(const OAIClusterOperation &create_cluster) {
    m_create_cluster = create_cluster;
    m_create_cluster_isSet = true;
}

bool OAIWorkflowMetadata::is_create_cluster_Set() const{
    return m_create_cluster_isSet;
}

bool OAIWorkflowMetadata::is_create_cluster_Valid() const{
    return m_create_cluster_isValid;
}

QString OAIWorkflowMetadata::getDagEndTime() const {
    return m_dag_end_time;
}
void OAIWorkflowMetadata::setDagEndTime(const QString &dag_end_time) {
    m_dag_end_time = dag_end_time;
    m_dag_end_time_isSet = true;
}

bool OAIWorkflowMetadata::is_dag_end_time_Set() const{
    return m_dag_end_time_isSet;
}

bool OAIWorkflowMetadata::is_dag_end_time_Valid() const{
    return m_dag_end_time_isValid;
}

QString OAIWorkflowMetadata::getDagStartTime() const {
    return m_dag_start_time;
}
void OAIWorkflowMetadata::setDagStartTime(const QString &dag_start_time) {
    m_dag_start_time = dag_start_time;
    m_dag_start_time_isSet = true;
}

bool OAIWorkflowMetadata::is_dag_start_time_Set() const{
    return m_dag_start_time_isSet;
}

bool OAIWorkflowMetadata::is_dag_start_time_Valid() const{
    return m_dag_start_time_isValid;
}

QString OAIWorkflowMetadata::getDagTimeout() const {
    return m_dag_timeout;
}
void OAIWorkflowMetadata::setDagTimeout(const QString &dag_timeout) {
    m_dag_timeout = dag_timeout;
    m_dag_timeout_isSet = true;
}

bool OAIWorkflowMetadata::is_dag_timeout_Set() const{
    return m_dag_timeout_isSet;
}

bool OAIWorkflowMetadata::is_dag_timeout_Valid() const{
    return m_dag_timeout_isValid;
}

OAIClusterOperation OAIWorkflowMetadata::getDeleteCluster() const {
    return m_delete_cluster;
}
void OAIWorkflowMetadata::setDeleteCluster(const OAIClusterOperation &delete_cluster) {
    m_delete_cluster = delete_cluster;
    m_delete_cluster_isSet = true;
}

bool OAIWorkflowMetadata::is_delete_cluster_Set() const{
    return m_delete_cluster_isSet;
}

bool OAIWorkflowMetadata::is_delete_cluster_Valid() const{
    return m_delete_cluster_isValid;
}

QString OAIWorkflowMetadata::getEndTime() const {
    return m_end_time;
}
void OAIWorkflowMetadata::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIWorkflowMetadata::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIWorkflowMetadata::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIWorkflowGraph OAIWorkflowMetadata::getGraph() const {
    return m_graph;
}
void OAIWorkflowMetadata::setGraph(const OAIWorkflowGraph &graph) {
    m_graph = graph;
    m_graph_isSet = true;
}

bool OAIWorkflowMetadata::is_graph_Set() const{
    return m_graph_isSet;
}

bool OAIWorkflowMetadata::is_graph_Valid() const{
    return m_graph_isValid;
}

QMap<QString, QString> OAIWorkflowMetadata::getParameters() const {
    return m_parameters;
}
void OAIWorkflowMetadata::setParameters(const QMap<QString, QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIWorkflowMetadata::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIWorkflowMetadata::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIWorkflowMetadata::getStartTime() const {
    return m_start_time;
}
void OAIWorkflowMetadata::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIWorkflowMetadata::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIWorkflowMetadata::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIWorkflowMetadata::getState() const {
    return m_state;
}
void OAIWorkflowMetadata::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWorkflowMetadata::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWorkflowMetadata::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIWorkflowMetadata::getRTemplate() const {
    return m_r_template;
}
void OAIWorkflowMetadata::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIWorkflowMetadata::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIWorkflowMetadata::is_r_template_Valid() const{
    return m_r_template_isValid;
}

qint32 OAIWorkflowMetadata::getVersion() const {
    return m_version;
}
void OAIWorkflowMetadata::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIWorkflowMetadata::is_version_Set() const{
    return m_version_isSet;
}

bool OAIWorkflowMetadata::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIWorkflowMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dag_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dag_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dag_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_graph.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
