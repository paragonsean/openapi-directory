/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowNode::OAIWorkflowNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowNode::OAIWorkflowNode() {
    this->initializeModel();
}

OAIWorkflowNode::~OAIWorkflowNode() {}

void OAIWorkflowNode::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_prerequisite_step_ids_isSet = false;
    m_prerequisite_step_ids_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_step_id_isSet = false;
    m_step_id_isValid = false;
}

void OAIWorkflowNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowNode::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_prerequisite_step_ids_isValid = ::OpenAPI::fromJsonValue(m_prerequisite_step_ids, json[QString("prerequisiteStepIds")]);
    m_prerequisite_step_ids_isSet = !json[QString("prerequisiteStepIds")].isNull() && m_prerequisite_step_ids_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_step_id_isValid = ::OpenAPI::fromJsonValue(m_step_id, json[QString("stepId")]);
    m_step_id_isSet = !json[QString("stepId")].isNull() && m_step_id_isValid;
}

QString OAIWorkflowNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowNode::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_prerequisite_step_ids.size() > 0) {
        obj.insert(QString("prerequisiteStepIds"), ::OpenAPI::toJsonValue(m_prerequisite_step_ids));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_step_id_isSet) {
        obj.insert(QString("stepId"), ::OpenAPI::toJsonValue(m_step_id));
    }
    return obj;
}

QString OAIWorkflowNode::getError() const {
    return m_error;
}
void OAIWorkflowNode::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIWorkflowNode::is_error_Set() const{
    return m_error_isSet;
}

bool OAIWorkflowNode::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIWorkflowNode::getJobId() const {
    return m_job_id;
}
void OAIWorkflowNode::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIWorkflowNode::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIWorkflowNode::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QList<QString> OAIWorkflowNode::getPrerequisiteStepIds() const {
    return m_prerequisite_step_ids;
}
void OAIWorkflowNode::setPrerequisiteStepIds(const QList<QString> &prerequisite_step_ids) {
    m_prerequisite_step_ids = prerequisite_step_ids;
    m_prerequisite_step_ids_isSet = true;
}

bool OAIWorkflowNode::is_prerequisite_step_ids_Set() const{
    return m_prerequisite_step_ids_isSet;
}

bool OAIWorkflowNode::is_prerequisite_step_ids_Valid() const{
    return m_prerequisite_step_ids_isValid;
}

QString OAIWorkflowNode::getState() const {
    return m_state;
}
void OAIWorkflowNode::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWorkflowNode::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWorkflowNode::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIWorkflowNode::getStepId() const {
    return m_step_id;
}
void OAIWorkflowNode::setStepId(const QString &step_id) {
    m_step_id = step_id;
    m_step_id_isSet = true;
}

bool OAIWorkflowNode::is_step_id_Set() const{
    return m_step_id_isSet;
}

bool OAIWorkflowNode::is_step_id_Valid() const{
    return m_step_id_isValid;
}

bool OAIWorkflowNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prerequisite_step_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
