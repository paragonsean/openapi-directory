/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKerberosConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKerberosConfig::OAIKerberosConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKerberosConfig::OAIKerberosConfig() {
    this->initializeModel();
}

OAIKerberosConfig::~OAIKerberosConfig() {}

void OAIKerberosConfig::initializeModel() {

    m_cross_realm_trust_admin_server_isSet = false;
    m_cross_realm_trust_admin_server_isValid = false;

    m_cross_realm_trust_kdc_isSet = false;
    m_cross_realm_trust_kdc_isValid = false;

    m_cross_realm_trust_realm_isSet = false;
    m_cross_realm_trust_realm_isValid = false;

    m_cross_realm_trust_shared_password_uri_isSet = false;
    m_cross_realm_trust_shared_password_uri_isValid = false;

    m_enable_kerberos_isSet = false;
    m_enable_kerberos_isValid = false;

    m_kdc_db_key_uri_isSet = false;
    m_kdc_db_key_uri_isValid = false;

    m_key_password_uri_isSet = false;
    m_key_password_uri_isValid = false;

    m_keystore_password_uri_isSet = false;
    m_keystore_password_uri_isValid = false;

    m_keystore_uri_isSet = false;
    m_keystore_uri_isValid = false;

    m_kms_key_uri_isSet = false;
    m_kms_key_uri_isValid = false;

    m_realm_isSet = false;
    m_realm_isValid = false;

    m_root_principal_password_uri_isSet = false;
    m_root_principal_password_uri_isValid = false;

    m_tgt_lifetime_hours_isSet = false;
    m_tgt_lifetime_hours_isValid = false;

    m_truststore_password_uri_isSet = false;
    m_truststore_password_uri_isValid = false;

    m_truststore_uri_isSet = false;
    m_truststore_uri_isValid = false;
}

void OAIKerberosConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKerberosConfig::fromJsonObject(QJsonObject json) {

    m_cross_realm_trust_admin_server_isValid = ::OpenAPI::fromJsonValue(m_cross_realm_trust_admin_server, json[QString("crossRealmTrustAdminServer")]);
    m_cross_realm_trust_admin_server_isSet = !json[QString("crossRealmTrustAdminServer")].isNull() && m_cross_realm_trust_admin_server_isValid;

    m_cross_realm_trust_kdc_isValid = ::OpenAPI::fromJsonValue(m_cross_realm_trust_kdc, json[QString("crossRealmTrustKdc")]);
    m_cross_realm_trust_kdc_isSet = !json[QString("crossRealmTrustKdc")].isNull() && m_cross_realm_trust_kdc_isValid;

    m_cross_realm_trust_realm_isValid = ::OpenAPI::fromJsonValue(m_cross_realm_trust_realm, json[QString("crossRealmTrustRealm")]);
    m_cross_realm_trust_realm_isSet = !json[QString("crossRealmTrustRealm")].isNull() && m_cross_realm_trust_realm_isValid;

    m_cross_realm_trust_shared_password_uri_isValid = ::OpenAPI::fromJsonValue(m_cross_realm_trust_shared_password_uri, json[QString("crossRealmTrustSharedPasswordUri")]);
    m_cross_realm_trust_shared_password_uri_isSet = !json[QString("crossRealmTrustSharedPasswordUri")].isNull() && m_cross_realm_trust_shared_password_uri_isValid;

    m_enable_kerberos_isValid = ::OpenAPI::fromJsonValue(m_enable_kerberos, json[QString("enableKerberos")]);
    m_enable_kerberos_isSet = !json[QString("enableKerberos")].isNull() && m_enable_kerberos_isValid;

    m_kdc_db_key_uri_isValid = ::OpenAPI::fromJsonValue(m_kdc_db_key_uri, json[QString("kdcDbKeyUri")]);
    m_kdc_db_key_uri_isSet = !json[QString("kdcDbKeyUri")].isNull() && m_kdc_db_key_uri_isValid;

    m_key_password_uri_isValid = ::OpenAPI::fromJsonValue(m_key_password_uri, json[QString("keyPasswordUri")]);
    m_key_password_uri_isSet = !json[QString("keyPasswordUri")].isNull() && m_key_password_uri_isValid;

    m_keystore_password_uri_isValid = ::OpenAPI::fromJsonValue(m_keystore_password_uri, json[QString("keystorePasswordUri")]);
    m_keystore_password_uri_isSet = !json[QString("keystorePasswordUri")].isNull() && m_keystore_password_uri_isValid;

    m_keystore_uri_isValid = ::OpenAPI::fromJsonValue(m_keystore_uri, json[QString("keystoreUri")]);
    m_keystore_uri_isSet = !json[QString("keystoreUri")].isNull() && m_keystore_uri_isValid;

    m_kms_key_uri_isValid = ::OpenAPI::fromJsonValue(m_kms_key_uri, json[QString("kmsKeyUri")]);
    m_kms_key_uri_isSet = !json[QString("kmsKeyUri")].isNull() && m_kms_key_uri_isValid;

    m_realm_isValid = ::OpenAPI::fromJsonValue(m_realm, json[QString("realm")]);
    m_realm_isSet = !json[QString("realm")].isNull() && m_realm_isValid;

    m_root_principal_password_uri_isValid = ::OpenAPI::fromJsonValue(m_root_principal_password_uri, json[QString("rootPrincipalPasswordUri")]);
    m_root_principal_password_uri_isSet = !json[QString("rootPrincipalPasswordUri")].isNull() && m_root_principal_password_uri_isValid;

    m_tgt_lifetime_hours_isValid = ::OpenAPI::fromJsonValue(m_tgt_lifetime_hours, json[QString("tgtLifetimeHours")]);
    m_tgt_lifetime_hours_isSet = !json[QString("tgtLifetimeHours")].isNull() && m_tgt_lifetime_hours_isValid;

    m_truststore_password_uri_isValid = ::OpenAPI::fromJsonValue(m_truststore_password_uri, json[QString("truststorePasswordUri")]);
    m_truststore_password_uri_isSet = !json[QString("truststorePasswordUri")].isNull() && m_truststore_password_uri_isValid;

    m_truststore_uri_isValid = ::OpenAPI::fromJsonValue(m_truststore_uri, json[QString("truststoreUri")]);
    m_truststore_uri_isSet = !json[QString("truststoreUri")].isNull() && m_truststore_uri_isValid;
}

QString OAIKerberosConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKerberosConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cross_realm_trust_admin_server_isSet) {
        obj.insert(QString("crossRealmTrustAdminServer"), ::OpenAPI::toJsonValue(m_cross_realm_trust_admin_server));
    }
    if (m_cross_realm_trust_kdc_isSet) {
        obj.insert(QString("crossRealmTrustKdc"), ::OpenAPI::toJsonValue(m_cross_realm_trust_kdc));
    }
    if (m_cross_realm_trust_realm_isSet) {
        obj.insert(QString("crossRealmTrustRealm"), ::OpenAPI::toJsonValue(m_cross_realm_trust_realm));
    }
    if (m_cross_realm_trust_shared_password_uri_isSet) {
        obj.insert(QString("crossRealmTrustSharedPasswordUri"), ::OpenAPI::toJsonValue(m_cross_realm_trust_shared_password_uri));
    }
    if (m_enable_kerberos_isSet) {
        obj.insert(QString("enableKerberos"), ::OpenAPI::toJsonValue(m_enable_kerberos));
    }
    if (m_kdc_db_key_uri_isSet) {
        obj.insert(QString("kdcDbKeyUri"), ::OpenAPI::toJsonValue(m_kdc_db_key_uri));
    }
    if (m_key_password_uri_isSet) {
        obj.insert(QString("keyPasswordUri"), ::OpenAPI::toJsonValue(m_key_password_uri));
    }
    if (m_keystore_password_uri_isSet) {
        obj.insert(QString("keystorePasswordUri"), ::OpenAPI::toJsonValue(m_keystore_password_uri));
    }
    if (m_keystore_uri_isSet) {
        obj.insert(QString("keystoreUri"), ::OpenAPI::toJsonValue(m_keystore_uri));
    }
    if (m_kms_key_uri_isSet) {
        obj.insert(QString("kmsKeyUri"), ::OpenAPI::toJsonValue(m_kms_key_uri));
    }
    if (m_realm_isSet) {
        obj.insert(QString("realm"), ::OpenAPI::toJsonValue(m_realm));
    }
    if (m_root_principal_password_uri_isSet) {
        obj.insert(QString("rootPrincipalPasswordUri"), ::OpenAPI::toJsonValue(m_root_principal_password_uri));
    }
    if (m_tgt_lifetime_hours_isSet) {
        obj.insert(QString("tgtLifetimeHours"), ::OpenAPI::toJsonValue(m_tgt_lifetime_hours));
    }
    if (m_truststore_password_uri_isSet) {
        obj.insert(QString("truststorePasswordUri"), ::OpenAPI::toJsonValue(m_truststore_password_uri));
    }
    if (m_truststore_uri_isSet) {
        obj.insert(QString("truststoreUri"), ::OpenAPI::toJsonValue(m_truststore_uri));
    }
    return obj;
}

QString OAIKerberosConfig::getCrossRealmTrustAdminServer() const {
    return m_cross_realm_trust_admin_server;
}
void OAIKerberosConfig::setCrossRealmTrustAdminServer(const QString &cross_realm_trust_admin_server) {
    m_cross_realm_trust_admin_server = cross_realm_trust_admin_server;
    m_cross_realm_trust_admin_server_isSet = true;
}

bool OAIKerberosConfig::is_cross_realm_trust_admin_server_Set() const{
    return m_cross_realm_trust_admin_server_isSet;
}

bool OAIKerberosConfig::is_cross_realm_trust_admin_server_Valid() const{
    return m_cross_realm_trust_admin_server_isValid;
}

QString OAIKerberosConfig::getCrossRealmTrustKdc() const {
    return m_cross_realm_trust_kdc;
}
void OAIKerberosConfig::setCrossRealmTrustKdc(const QString &cross_realm_trust_kdc) {
    m_cross_realm_trust_kdc = cross_realm_trust_kdc;
    m_cross_realm_trust_kdc_isSet = true;
}

bool OAIKerberosConfig::is_cross_realm_trust_kdc_Set() const{
    return m_cross_realm_trust_kdc_isSet;
}

bool OAIKerberosConfig::is_cross_realm_trust_kdc_Valid() const{
    return m_cross_realm_trust_kdc_isValid;
}

QString OAIKerberosConfig::getCrossRealmTrustRealm() const {
    return m_cross_realm_trust_realm;
}
void OAIKerberosConfig::setCrossRealmTrustRealm(const QString &cross_realm_trust_realm) {
    m_cross_realm_trust_realm = cross_realm_trust_realm;
    m_cross_realm_trust_realm_isSet = true;
}

bool OAIKerberosConfig::is_cross_realm_trust_realm_Set() const{
    return m_cross_realm_trust_realm_isSet;
}

bool OAIKerberosConfig::is_cross_realm_trust_realm_Valid() const{
    return m_cross_realm_trust_realm_isValid;
}

QString OAIKerberosConfig::getCrossRealmTrustSharedPasswordUri() const {
    return m_cross_realm_trust_shared_password_uri;
}
void OAIKerberosConfig::setCrossRealmTrustSharedPasswordUri(const QString &cross_realm_trust_shared_password_uri) {
    m_cross_realm_trust_shared_password_uri = cross_realm_trust_shared_password_uri;
    m_cross_realm_trust_shared_password_uri_isSet = true;
}

bool OAIKerberosConfig::is_cross_realm_trust_shared_password_uri_Set() const{
    return m_cross_realm_trust_shared_password_uri_isSet;
}

bool OAIKerberosConfig::is_cross_realm_trust_shared_password_uri_Valid() const{
    return m_cross_realm_trust_shared_password_uri_isValid;
}

bool OAIKerberosConfig::isEnableKerberos() const {
    return m_enable_kerberos;
}
void OAIKerberosConfig::setEnableKerberos(const bool &enable_kerberos) {
    m_enable_kerberos = enable_kerberos;
    m_enable_kerberos_isSet = true;
}

bool OAIKerberosConfig::is_enable_kerberos_Set() const{
    return m_enable_kerberos_isSet;
}

bool OAIKerberosConfig::is_enable_kerberos_Valid() const{
    return m_enable_kerberos_isValid;
}

QString OAIKerberosConfig::getKdcDbKeyUri() const {
    return m_kdc_db_key_uri;
}
void OAIKerberosConfig::setKdcDbKeyUri(const QString &kdc_db_key_uri) {
    m_kdc_db_key_uri = kdc_db_key_uri;
    m_kdc_db_key_uri_isSet = true;
}

bool OAIKerberosConfig::is_kdc_db_key_uri_Set() const{
    return m_kdc_db_key_uri_isSet;
}

bool OAIKerberosConfig::is_kdc_db_key_uri_Valid() const{
    return m_kdc_db_key_uri_isValid;
}

QString OAIKerberosConfig::getKeyPasswordUri() const {
    return m_key_password_uri;
}
void OAIKerberosConfig::setKeyPasswordUri(const QString &key_password_uri) {
    m_key_password_uri = key_password_uri;
    m_key_password_uri_isSet = true;
}

bool OAIKerberosConfig::is_key_password_uri_Set() const{
    return m_key_password_uri_isSet;
}

bool OAIKerberosConfig::is_key_password_uri_Valid() const{
    return m_key_password_uri_isValid;
}

QString OAIKerberosConfig::getKeystorePasswordUri() const {
    return m_keystore_password_uri;
}
void OAIKerberosConfig::setKeystorePasswordUri(const QString &keystore_password_uri) {
    m_keystore_password_uri = keystore_password_uri;
    m_keystore_password_uri_isSet = true;
}

bool OAIKerberosConfig::is_keystore_password_uri_Set() const{
    return m_keystore_password_uri_isSet;
}

bool OAIKerberosConfig::is_keystore_password_uri_Valid() const{
    return m_keystore_password_uri_isValid;
}

QString OAIKerberosConfig::getKeystoreUri() const {
    return m_keystore_uri;
}
void OAIKerberosConfig::setKeystoreUri(const QString &keystore_uri) {
    m_keystore_uri = keystore_uri;
    m_keystore_uri_isSet = true;
}

bool OAIKerberosConfig::is_keystore_uri_Set() const{
    return m_keystore_uri_isSet;
}

bool OAIKerberosConfig::is_keystore_uri_Valid() const{
    return m_keystore_uri_isValid;
}

QString OAIKerberosConfig::getKmsKeyUri() const {
    return m_kms_key_uri;
}
void OAIKerberosConfig::setKmsKeyUri(const QString &kms_key_uri) {
    m_kms_key_uri = kms_key_uri;
    m_kms_key_uri_isSet = true;
}

bool OAIKerberosConfig::is_kms_key_uri_Set() const{
    return m_kms_key_uri_isSet;
}

bool OAIKerberosConfig::is_kms_key_uri_Valid() const{
    return m_kms_key_uri_isValid;
}

QString OAIKerberosConfig::getRealm() const {
    return m_realm;
}
void OAIKerberosConfig::setRealm(const QString &realm) {
    m_realm = realm;
    m_realm_isSet = true;
}

bool OAIKerberosConfig::is_realm_Set() const{
    return m_realm_isSet;
}

bool OAIKerberosConfig::is_realm_Valid() const{
    return m_realm_isValid;
}

QString OAIKerberosConfig::getRootPrincipalPasswordUri() const {
    return m_root_principal_password_uri;
}
void OAIKerberosConfig::setRootPrincipalPasswordUri(const QString &root_principal_password_uri) {
    m_root_principal_password_uri = root_principal_password_uri;
    m_root_principal_password_uri_isSet = true;
}

bool OAIKerberosConfig::is_root_principal_password_uri_Set() const{
    return m_root_principal_password_uri_isSet;
}

bool OAIKerberosConfig::is_root_principal_password_uri_Valid() const{
    return m_root_principal_password_uri_isValid;
}

qint32 OAIKerberosConfig::getTgtLifetimeHours() const {
    return m_tgt_lifetime_hours;
}
void OAIKerberosConfig::setTgtLifetimeHours(const qint32 &tgt_lifetime_hours) {
    m_tgt_lifetime_hours = tgt_lifetime_hours;
    m_tgt_lifetime_hours_isSet = true;
}

bool OAIKerberosConfig::is_tgt_lifetime_hours_Set() const{
    return m_tgt_lifetime_hours_isSet;
}

bool OAIKerberosConfig::is_tgt_lifetime_hours_Valid() const{
    return m_tgt_lifetime_hours_isValid;
}

QString OAIKerberosConfig::getTruststorePasswordUri() const {
    return m_truststore_password_uri;
}
void OAIKerberosConfig::setTruststorePasswordUri(const QString &truststore_password_uri) {
    m_truststore_password_uri = truststore_password_uri;
    m_truststore_password_uri_isSet = true;
}

bool OAIKerberosConfig::is_truststore_password_uri_Set() const{
    return m_truststore_password_uri_isSet;
}

bool OAIKerberosConfig::is_truststore_password_uri_Valid() const{
    return m_truststore_password_uri_isValid;
}

QString OAIKerberosConfig::getTruststoreUri() const {
    return m_truststore_uri;
}
void OAIKerberosConfig::setTruststoreUri(const QString &truststore_uri) {
    m_truststore_uri = truststore_uri;
    m_truststore_uri_isSet = true;
}

bool OAIKerberosConfig::is_truststore_uri_Set() const{
    return m_truststore_uri_isSet;
}

bool OAIKerberosConfig::is_truststore_uri_Valid() const{
    return m_truststore_uri_isValid;
}

bool OAIKerberosConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cross_realm_trust_admin_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_realm_trust_kdc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_realm_trust_realm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_realm_trust_shared_password_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_kerberos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kdc_db_key_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_password_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keystore_password_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keystore_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_principal_password_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tgt_lifetime_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truststore_password_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truststore_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKerberosConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
