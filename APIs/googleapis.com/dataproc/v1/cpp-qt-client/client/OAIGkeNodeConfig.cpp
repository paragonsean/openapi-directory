/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGkeNodeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGkeNodeConfig::OAIGkeNodeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGkeNodeConfig::OAIGkeNodeConfig() {
    this->initializeModel();
}

OAIGkeNodeConfig::~OAIGkeNodeConfig() {}

void OAIGkeNodeConfig::initializeModel() {

    m_accelerators_isSet = false;
    m_accelerators_isValid = false;

    m_boot_disk_kms_key_isSet = false;
    m_boot_disk_kms_key_isValid = false;

    m_local_ssd_count_isSet = false;
    m_local_ssd_count_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_min_cpu_platform_isSet = false;
    m_min_cpu_platform_isValid = false;

    m_preemptible_isSet = false;
    m_preemptible_isValid = false;

    m_spot_isSet = false;
    m_spot_isValid = false;
}

void OAIGkeNodeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGkeNodeConfig::fromJsonObject(QJsonObject json) {

    m_accelerators_isValid = ::OpenAPI::fromJsonValue(m_accelerators, json[QString("accelerators")]);
    m_accelerators_isSet = !json[QString("accelerators")].isNull() && m_accelerators_isValid;

    m_boot_disk_kms_key_isValid = ::OpenAPI::fromJsonValue(m_boot_disk_kms_key, json[QString("bootDiskKmsKey")]);
    m_boot_disk_kms_key_isSet = !json[QString("bootDiskKmsKey")].isNull() && m_boot_disk_kms_key_isValid;

    m_local_ssd_count_isValid = ::OpenAPI::fromJsonValue(m_local_ssd_count, json[QString("localSsdCount")]);
    m_local_ssd_count_isSet = !json[QString("localSsdCount")].isNull() && m_local_ssd_count_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_min_cpu_platform_isValid = ::OpenAPI::fromJsonValue(m_min_cpu_platform, json[QString("minCpuPlatform")]);
    m_min_cpu_platform_isSet = !json[QString("minCpuPlatform")].isNull() && m_min_cpu_platform_isValid;

    m_preemptible_isValid = ::OpenAPI::fromJsonValue(m_preemptible, json[QString("preemptible")]);
    m_preemptible_isSet = !json[QString("preemptible")].isNull() && m_preemptible_isValid;

    m_spot_isValid = ::OpenAPI::fromJsonValue(m_spot, json[QString("spot")]);
    m_spot_isSet = !json[QString("spot")].isNull() && m_spot_isValid;
}

QString OAIGkeNodeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGkeNodeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerators.size() > 0) {
        obj.insert(QString("accelerators"), ::OpenAPI::toJsonValue(m_accelerators));
    }
    if (m_boot_disk_kms_key_isSet) {
        obj.insert(QString("bootDiskKmsKey"), ::OpenAPI::toJsonValue(m_boot_disk_kms_key));
    }
    if (m_local_ssd_count_isSet) {
        obj.insert(QString("localSsdCount"), ::OpenAPI::toJsonValue(m_local_ssd_count));
    }
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_min_cpu_platform_isSet) {
        obj.insert(QString("minCpuPlatform"), ::OpenAPI::toJsonValue(m_min_cpu_platform));
    }
    if (m_preemptible_isSet) {
        obj.insert(QString("preemptible"), ::OpenAPI::toJsonValue(m_preemptible));
    }
    if (m_spot_isSet) {
        obj.insert(QString("spot"), ::OpenAPI::toJsonValue(m_spot));
    }
    return obj;
}

QList<OAIGkeNodePoolAcceleratorConfig> OAIGkeNodeConfig::getAccelerators() const {
    return m_accelerators;
}
void OAIGkeNodeConfig::setAccelerators(const QList<OAIGkeNodePoolAcceleratorConfig> &accelerators) {
    m_accelerators = accelerators;
    m_accelerators_isSet = true;
}

bool OAIGkeNodeConfig::is_accelerators_Set() const{
    return m_accelerators_isSet;
}

bool OAIGkeNodeConfig::is_accelerators_Valid() const{
    return m_accelerators_isValid;
}

QString OAIGkeNodeConfig::getBootDiskKmsKey() const {
    return m_boot_disk_kms_key;
}
void OAIGkeNodeConfig::setBootDiskKmsKey(const QString &boot_disk_kms_key) {
    m_boot_disk_kms_key = boot_disk_kms_key;
    m_boot_disk_kms_key_isSet = true;
}

bool OAIGkeNodeConfig::is_boot_disk_kms_key_Set() const{
    return m_boot_disk_kms_key_isSet;
}

bool OAIGkeNodeConfig::is_boot_disk_kms_key_Valid() const{
    return m_boot_disk_kms_key_isValid;
}

qint32 OAIGkeNodeConfig::getLocalSsdCount() const {
    return m_local_ssd_count;
}
void OAIGkeNodeConfig::setLocalSsdCount(const qint32 &local_ssd_count) {
    m_local_ssd_count = local_ssd_count;
    m_local_ssd_count_isSet = true;
}

bool OAIGkeNodeConfig::is_local_ssd_count_Set() const{
    return m_local_ssd_count_isSet;
}

bool OAIGkeNodeConfig::is_local_ssd_count_Valid() const{
    return m_local_ssd_count_isValid;
}

QString OAIGkeNodeConfig::getMachineType() const {
    return m_machine_type;
}
void OAIGkeNodeConfig::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIGkeNodeConfig::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIGkeNodeConfig::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

QString OAIGkeNodeConfig::getMinCpuPlatform() const {
    return m_min_cpu_platform;
}
void OAIGkeNodeConfig::setMinCpuPlatform(const QString &min_cpu_platform) {
    m_min_cpu_platform = min_cpu_platform;
    m_min_cpu_platform_isSet = true;
}

bool OAIGkeNodeConfig::is_min_cpu_platform_Set() const{
    return m_min_cpu_platform_isSet;
}

bool OAIGkeNodeConfig::is_min_cpu_platform_Valid() const{
    return m_min_cpu_platform_isValid;
}

bool OAIGkeNodeConfig::isPreemptible() const {
    return m_preemptible;
}
void OAIGkeNodeConfig::setPreemptible(const bool &preemptible) {
    m_preemptible = preemptible;
    m_preemptible_isSet = true;
}

bool OAIGkeNodeConfig::is_preemptible_Set() const{
    return m_preemptible_isSet;
}

bool OAIGkeNodeConfig::is_preemptible_Valid() const{
    return m_preemptible_isValid;
}

bool OAIGkeNodeConfig::isSpot() const {
    return m_spot;
}
void OAIGkeNodeConfig::setSpot(const bool &spot) {
    m_spot = spot;
    m_spot_isSet = true;
}

bool OAIGkeNodeConfig::is_spot_Set() const{
    return m_spot_isSet;
}

bool OAIGkeNodeConfig::is_spot_Valid() const{
    return m_spot_isValid;
}

bool OAIGkeNodeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_disk_kms_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_ssd_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_cpu_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preemptible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spot_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGkeNodeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
