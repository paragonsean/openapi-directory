/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGkeNodePoolAcceleratorConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGkeNodePoolAcceleratorConfig::OAIGkeNodePoolAcceleratorConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGkeNodePoolAcceleratorConfig::OAIGkeNodePoolAcceleratorConfig() {
    this->initializeModel();
}

OAIGkeNodePoolAcceleratorConfig::~OAIGkeNodePoolAcceleratorConfig() {}

void OAIGkeNodePoolAcceleratorConfig::initializeModel() {

    m_accelerator_count_isSet = false;
    m_accelerator_count_isValid = false;

    m_accelerator_type_isSet = false;
    m_accelerator_type_isValid = false;

    m_gpu_partition_size_isSet = false;
    m_gpu_partition_size_isValid = false;
}

void OAIGkeNodePoolAcceleratorConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGkeNodePoolAcceleratorConfig::fromJsonObject(QJsonObject json) {

    m_accelerator_count_isValid = ::OpenAPI::fromJsonValue(m_accelerator_count, json[QString("acceleratorCount")]);
    m_accelerator_count_isSet = !json[QString("acceleratorCount")].isNull() && m_accelerator_count_isValid;

    m_accelerator_type_isValid = ::OpenAPI::fromJsonValue(m_accelerator_type, json[QString("acceleratorType")]);
    m_accelerator_type_isSet = !json[QString("acceleratorType")].isNull() && m_accelerator_type_isValid;

    m_gpu_partition_size_isValid = ::OpenAPI::fromJsonValue(m_gpu_partition_size, json[QString("gpuPartitionSize")]);
    m_gpu_partition_size_isSet = !json[QString("gpuPartitionSize")].isNull() && m_gpu_partition_size_isValid;
}

QString OAIGkeNodePoolAcceleratorConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGkeNodePoolAcceleratorConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerator_count_isSet) {
        obj.insert(QString("acceleratorCount"), ::OpenAPI::toJsonValue(m_accelerator_count));
    }
    if (m_accelerator_type_isSet) {
        obj.insert(QString("acceleratorType"), ::OpenAPI::toJsonValue(m_accelerator_type));
    }
    if (m_gpu_partition_size_isSet) {
        obj.insert(QString("gpuPartitionSize"), ::OpenAPI::toJsonValue(m_gpu_partition_size));
    }
    return obj;
}

QString OAIGkeNodePoolAcceleratorConfig::getAcceleratorCount() const {
    return m_accelerator_count;
}
void OAIGkeNodePoolAcceleratorConfig::setAcceleratorCount(const QString &accelerator_count) {
    m_accelerator_count = accelerator_count;
    m_accelerator_count_isSet = true;
}

bool OAIGkeNodePoolAcceleratorConfig::is_accelerator_count_Set() const{
    return m_accelerator_count_isSet;
}

bool OAIGkeNodePoolAcceleratorConfig::is_accelerator_count_Valid() const{
    return m_accelerator_count_isValid;
}

QString OAIGkeNodePoolAcceleratorConfig::getAcceleratorType() const {
    return m_accelerator_type;
}
void OAIGkeNodePoolAcceleratorConfig::setAcceleratorType(const QString &accelerator_type) {
    m_accelerator_type = accelerator_type;
    m_accelerator_type_isSet = true;
}

bool OAIGkeNodePoolAcceleratorConfig::is_accelerator_type_Set() const{
    return m_accelerator_type_isSet;
}

bool OAIGkeNodePoolAcceleratorConfig::is_accelerator_type_Valid() const{
    return m_accelerator_type_isValid;
}

QString OAIGkeNodePoolAcceleratorConfig::getGpuPartitionSize() const {
    return m_gpu_partition_size;
}
void OAIGkeNodePoolAcceleratorConfig::setGpuPartitionSize(const QString &gpu_partition_size) {
    m_gpu_partition_size = gpu_partition_size;
    m_gpu_partition_size_isSet = true;
}

bool OAIGkeNodePoolAcceleratorConfig::is_gpu_partition_size_Set() const{
    return m_gpu_partition_size_isSet;
}

bool OAIGkeNodePoolAcceleratorConfig::is_gpu_partition_size_Valid() const{
    return m_gpu_partition_size_isValid;
}

bool OAIGkeNodePoolAcceleratorConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerator_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gpu_partition_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGkeNodePoolAcceleratorConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
