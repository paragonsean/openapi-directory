/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuntimeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuntimeConfig::OAIRuntimeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuntimeConfig::OAIRuntimeConfig() {
    this->initializeModel();
}

OAIRuntimeConfig::~OAIRuntimeConfig() {}

void OAIRuntimeConfig::initializeModel() {

    m_container_image_isSet = false;
    m_container_image_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_repository_config_isSet = false;
    m_repository_config_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIRuntimeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuntimeConfig::fromJsonObject(QJsonObject json) {

    m_container_image_isValid = ::OpenAPI::fromJsonValue(m_container_image, json[QString("containerImage")]);
    m_container_image_isSet = !json[QString("containerImage")].isNull() && m_container_image_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_repository_config_isValid = ::OpenAPI::fromJsonValue(m_repository_config, json[QString("repositoryConfig")]);
    m_repository_config_isSet = !json[QString("repositoryConfig")].isNull() && m_repository_config_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIRuntimeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuntimeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_container_image_isSet) {
        obj.insert(QString("containerImage"), ::OpenAPI::toJsonValue(m_container_image));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_repository_config.isSet()) {
        obj.insert(QString("repositoryConfig"), ::OpenAPI::toJsonValue(m_repository_config));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIRuntimeConfig::getContainerImage() const {
    return m_container_image;
}
void OAIRuntimeConfig::setContainerImage(const QString &container_image) {
    m_container_image = container_image;
    m_container_image_isSet = true;
}

bool OAIRuntimeConfig::is_container_image_Set() const{
    return m_container_image_isSet;
}

bool OAIRuntimeConfig::is_container_image_Valid() const{
    return m_container_image_isValid;
}

QMap<QString, QString> OAIRuntimeConfig::getProperties() const {
    return m_properties;
}
void OAIRuntimeConfig::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIRuntimeConfig::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIRuntimeConfig::is_properties_Valid() const{
    return m_properties_isValid;
}

OAIRepositoryConfig OAIRuntimeConfig::getRepositoryConfig() const {
    return m_repository_config;
}
void OAIRuntimeConfig::setRepositoryConfig(const OAIRepositoryConfig &repository_config) {
    m_repository_config = repository_config;
    m_repository_config_isSet = true;
}

bool OAIRuntimeConfig::is_repository_config_Set() const{
    return m_repository_config_isSet;
}

bool OAIRuntimeConfig::is_repository_config_Valid() const{
    return m_repository_config_isValid;
}

QString OAIRuntimeConfig::getVersion() const {
    return m_version;
}
void OAIRuntimeConfig::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIRuntimeConfig::is_version_Set() const{
    return m_version_isSet;
}

bool OAIRuntimeConfig::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIRuntimeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuntimeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
