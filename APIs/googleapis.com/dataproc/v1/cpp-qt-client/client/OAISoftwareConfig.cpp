/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoftwareConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoftwareConfig::OAISoftwareConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoftwareConfig::OAISoftwareConfig() {
    this->initializeModel();
}

OAISoftwareConfig::~OAISoftwareConfig() {}

void OAISoftwareConfig::initializeModel() {

    m_image_version_isSet = false;
    m_image_version_isValid = false;

    m_optional_components_isSet = false;
    m_optional_components_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAISoftwareConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoftwareConfig::fromJsonObject(QJsonObject json) {

    m_image_version_isValid = ::OpenAPI::fromJsonValue(m_image_version, json[QString("imageVersion")]);
    m_image_version_isSet = !json[QString("imageVersion")].isNull() && m_image_version_isValid;

    m_optional_components_isValid = ::OpenAPI::fromJsonValue(m_optional_components, json[QString("optionalComponents")]);
    m_optional_components_isSet = !json[QString("optionalComponents")].isNull() && m_optional_components_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAISoftwareConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoftwareConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_image_version_isSet) {
        obj.insert(QString("imageVersion"), ::OpenAPI::toJsonValue(m_image_version));
    }
    if (m_optional_components.size() > 0) {
        obj.insert(QString("optionalComponents"), ::OpenAPI::toJsonValue(m_optional_components));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QString OAISoftwareConfig::getImageVersion() const {
    return m_image_version;
}
void OAISoftwareConfig::setImageVersion(const QString &image_version) {
    m_image_version = image_version;
    m_image_version_isSet = true;
}

bool OAISoftwareConfig::is_image_version_Set() const{
    return m_image_version_isSet;
}

bool OAISoftwareConfig::is_image_version_Valid() const{
    return m_image_version_isValid;
}

QList<QString> OAISoftwareConfig::getOptionalComponents() const {
    return m_optional_components;
}
void OAISoftwareConfig::setOptionalComponents(const QList<QString> &optional_components) {
    m_optional_components = optional_components;
    m_optional_components_isSet = true;
}

bool OAISoftwareConfig::is_optional_components_Set() const{
    return m_optional_components_isSet;
}

bool OAISoftwareConfig::is_optional_components_Valid() const{
    return m_optional_components_isValid;
}

QMap<QString, QString> OAISoftwareConfig::getProperties() const {
    return m_properties;
}
void OAISoftwareConfig::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISoftwareConfig::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISoftwareConfig::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAISoftwareConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoftwareConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
