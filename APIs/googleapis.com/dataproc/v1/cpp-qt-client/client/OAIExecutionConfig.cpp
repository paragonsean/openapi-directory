/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionConfig::OAIExecutionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionConfig::OAIExecutionConfig() {
    this->initializeModel();
}

OAIExecutionConfig::~OAIExecutionConfig() {}

void OAIExecutionConfig::initializeModel() {

    m_idle_ttl_isSet = false;
    m_idle_ttl_isValid = false;

    m_kms_key_isSet = false;
    m_kms_key_isValid = false;

    m_network_tags_isSet = false;
    m_network_tags_isValid = false;

    m_network_uri_isSet = false;
    m_network_uri_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_staging_bucket_isSet = false;
    m_staging_bucket_isValid = false;

    m_subnetwork_uri_isSet = false;
    m_subnetwork_uri_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIExecutionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionConfig::fromJsonObject(QJsonObject json) {

    m_idle_ttl_isValid = ::OpenAPI::fromJsonValue(m_idle_ttl, json[QString("idleTtl")]);
    m_idle_ttl_isSet = !json[QString("idleTtl")].isNull() && m_idle_ttl_isValid;

    m_kms_key_isValid = ::OpenAPI::fromJsonValue(m_kms_key, json[QString("kmsKey")]);
    m_kms_key_isSet = !json[QString("kmsKey")].isNull() && m_kms_key_isValid;

    m_network_tags_isValid = ::OpenAPI::fromJsonValue(m_network_tags, json[QString("networkTags")]);
    m_network_tags_isSet = !json[QString("networkTags")].isNull() && m_network_tags_isValid;

    m_network_uri_isValid = ::OpenAPI::fromJsonValue(m_network_uri, json[QString("networkUri")]);
    m_network_uri_isSet = !json[QString("networkUri")].isNull() && m_network_uri_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_staging_bucket_isValid = ::OpenAPI::fromJsonValue(m_staging_bucket, json[QString("stagingBucket")]);
    m_staging_bucket_isSet = !json[QString("stagingBucket")].isNull() && m_staging_bucket_isValid;

    m_subnetwork_uri_isValid = ::OpenAPI::fromJsonValue(m_subnetwork_uri, json[QString("subnetworkUri")]);
    m_subnetwork_uri_isSet = !json[QString("subnetworkUri")].isNull() && m_subnetwork_uri_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;
}

QString OAIExecutionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_idle_ttl_isSet) {
        obj.insert(QString("idleTtl"), ::OpenAPI::toJsonValue(m_idle_ttl));
    }
    if (m_kms_key_isSet) {
        obj.insert(QString("kmsKey"), ::OpenAPI::toJsonValue(m_kms_key));
    }
    if (m_network_tags.size() > 0) {
        obj.insert(QString("networkTags"), ::OpenAPI::toJsonValue(m_network_tags));
    }
    if (m_network_uri_isSet) {
        obj.insert(QString("networkUri"), ::OpenAPI::toJsonValue(m_network_uri));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_staging_bucket_isSet) {
        obj.insert(QString("stagingBucket"), ::OpenAPI::toJsonValue(m_staging_bucket));
    }
    if (m_subnetwork_uri_isSet) {
        obj.insert(QString("subnetworkUri"), ::OpenAPI::toJsonValue(m_subnetwork_uri));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

QString OAIExecutionConfig::getIdleTtl() const {
    return m_idle_ttl;
}
void OAIExecutionConfig::setIdleTtl(const QString &idle_ttl) {
    m_idle_ttl = idle_ttl;
    m_idle_ttl_isSet = true;
}

bool OAIExecutionConfig::is_idle_ttl_Set() const{
    return m_idle_ttl_isSet;
}

bool OAIExecutionConfig::is_idle_ttl_Valid() const{
    return m_idle_ttl_isValid;
}

QString OAIExecutionConfig::getKmsKey() const {
    return m_kms_key;
}
void OAIExecutionConfig::setKmsKey(const QString &kms_key) {
    m_kms_key = kms_key;
    m_kms_key_isSet = true;
}

bool OAIExecutionConfig::is_kms_key_Set() const{
    return m_kms_key_isSet;
}

bool OAIExecutionConfig::is_kms_key_Valid() const{
    return m_kms_key_isValid;
}

QList<QString> OAIExecutionConfig::getNetworkTags() const {
    return m_network_tags;
}
void OAIExecutionConfig::setNetworkTags(const QList<QString> &network_tags) {
    m_network_tags = network_tags;
    m_network_tags_isSet = true;
}

bool OAIExecutionConfig::is_network_tags_Set() const{
    return m_network_tags_isSet;
}

bool OAIExecutionConfig::is_network_tags_Valid() const{
    return m_network_tags_isValid;
}

QString OAIExecutionConfig::getNetworkUri() const {
    return m_network_uri;
}
void OAIExecutionConfig::setNetworkUri(const QString &network_uri) {
    m_network_uri = network_uri;
    m_network_uri_isSet = true;
}

bool OAIExecutionConfig::is_network_uri_Set() const{
    return m_network_uri_isSet;
}

bool OAIExecutionConfig::is_network_uri_Valid() const{
    return m_network_uri_isValid;
}

QString OAIExecutionConfig::getServiceAccount() const {
    return m_service_account;
}
void OAIExecutionConfig::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIExecutionConfig::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIExecutionConfig::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QString OAIExecutionConfig::getStagingBucket() const {
    return m_staging_bucket;
}
void OAIExecutionConfig::setStagingBucket(const QString &staging_bucket) {
    m_staging_bucket = staging_bucket;
    m_staging_bucket_isSet = true;
}

bool OAIExecutionConfig::is_staging_bucket_Set() const{
    return m_staging_bucket_isSet;
}

bool OAIExecutionConfig::is_staging_bucket_Valid() const{
    return m_staging_bucket_isValid;
}

QString OAIExecutionConfig::getSubnetworkUri() const {
    return m_subnetwork_uri;
}
void OAIExecutionConfig::setSubnetworkUri(const QString &subnetwork_uri) {
    m_subnetwork_uri = subnetwork_uri;
    m_subnetwork_uri_isSet = true;
}

bool OAIExecutionConfig::is_subnetwork_uri_Set() const{
    return m_subnetwork_uri_isSet;
}

bool OAIExecutionConfig::is_subnetwork_uri_Valid() const{
    return m_subnetwork_uri_isValid;
}

QString OAIExecutionConfig::getTtl() const {
    return m_ttl;
}
void OAIExecutionConfig::setTtl(const QString &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIExecutionConfig::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIExecutionConfig::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIExecutionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_idle_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staging_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
