/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterConfig::OAIClusterConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterConfig::OAIClusterConfig() {
    this->initializeModel();
}

OAIClusterConfig::~OAIClusterConfig() {}

void OAIClusterConfig::initializeModel() {

    m_autoscaling_config_isSet = false;
    m_autoscaling_config_isValid = false;

    m_auxiliary_node_groups_isSet = false;
    m_auxiliary_node_groups_isValid = false;

    m_config_bucket_isSet = false;
    m_config_bucket_isValid = false;

    m_dataproc_metric_config_isSet = false;
    m_dataproc_metric_config_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_endpoint_config_isSet = false;
    m_endpoint_config_isValid = false;

    m_gce_cluster_config_isSet = false;
    m_gce_cluster_config_isValid = false;

    m_gke_cluster_config_isSet = false;
    m_gke_cluster_config_isValid = false;

    m_initialization_actions_isSet = false;
    m_initialization_actions_isValid = false;

    m_lifecycle_config_isSet = false;
    m_lifecycle_config_isValid = false;

    m_master_config_isSet = false;
    m_master_config_isValid = false;

    m_metastore_config_isSet = false;
    m_metastore_config_isValid = false;

    m_secondary_worker_config_isSet = false;
    m_secondary_worker_config_isValid = false;

    m_security_config_isSet = false;
    m_security_config_isValid = false;

    m_software_config_isSet = false;
    m_software_config_isValid = false;

    m_temp_bucket_isSet = false;
    m_temp_bucket_isValid = false;

    m_worker_config_isSet = false;
    m_worker_config_isValid = false;
}

void OAIClusterConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterConfig::fromJsonObject(QJsonObject json) {

    m_autoscaling_config_isValid = ::OpenAPI::fromJsonValue(m_autoscaling_config, json[QString("autoscalingConfig")]);
    m_autoscaling_config_isSet = !json[QString("autoscalingConfig")].isNull() && m_autoscaling_config_isValid;

    m_auxiliary_node_groups_isValid = ::OpenAPI::fromJsonValue(m_auxiliary_node_groups, json[QString("auxiliaryNodeGroups")]);
    m_auxiliary_node_groups_isSet = !json[QString("auxiliaryNodeGroups")].isNull() && m_auxiliary_node_groups_isValid;

    m_config_bucket_isValid = ::OpenAPI::fromJsonValue(m_config_bucket, json[QString("configBucket")]);
    m_config_bucket_isSet = !json[QString("configBucket")].isNull() && m_config_bucket_isValid;

    m_dataproc_metric_config_isValid = ::OpenAPI::fromJsonValue(m_dataproc_metric_config, json[QString("dataprocMetricConfig")]);
    m_dataproc_metric_config_isSet = !json[QString("dataprocMetricConfig")].isNull() && m_dataproc_metric_config_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_endpoint_config_isValid = ::OpenAPI::fromJsonValue(m_endpoint_config, json[QString("endpointConfig")]);
    m_endpoint_config_isSet = !json[QString("endpointConfig")].isNull() && m_endpoint_config_isValid;

    m_gce_cluster_config_isValid = ::OpenAPI::fromJsonValue(m_gce_cluster_config, json[QString("gceClusterConfig")]);
    m_gce_cluster_config_isSet = !json[QString("gceClusterConfig")].isNull() && m_gce_cluster_config_isValid;

    m_gke_cluster_config_isValid = ::OpenAPI::fromJsonValue(m_gke_cluster_config, json[QString("gkeClusterConfig")]);
    m_gke_cluster_config_isSet = !json[QString("gkeClusterConfig")].isNull() && m_gke_cluster_config_isValid;

    m_initialization_actions_isValid = ::OpenAPI::fromJsonValue(m_initialization_actions, json[QString("initializationActions")]);
    m_initialization_actions_isSet = !json[QString("initializationActions")].isNull() && m_initialization_actions_isValid;

    m_lifecycle_config_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_config, json[QString("lifecycleConfig")]);
    m_lifecycle_config_isSet = !json[QString("lifecycleConfig")].isNull() && m_lifecycle_config_isValid;

    m_master_config_isValid = ::OpenAPI::fromJsonValue(m_master_config, json[QString("masterConfig")]);
    m_master_config_isSet = !json[QString("masterConfig")].isNull() && m_master_config_isValid;

    m_metastore_config_isValid = ::OpenAPI::fromJsonValue(m_metastore_config, json[QString("metastoreConfig")]);
    m_metastore_config_isSet = !json[QString("metastoreConfig")].isNull() && m_metastore_config_isValid;

    m_secondary_worker_config_isValid = ::OpenAPI::fromJsonValue(m_secondary_worker_config, json[QString("secondaryWorkerConfig")]);
    m_secondary_worker_config_isSet = !json[QString("secondaryWorkerConfig")].isNull() && m_secondary_worker_config_isValid;

    m_security_config_isValid = ::OpenAPI::fromJsonValue(m_security_config, json[QString("securityConfig")]);
    m_security_config_isSet = !json[QString("securityConfig")].isNull() && m_security_config_isValid;

    m_software_config_isValid = ::OpenAPI::fromJsonValue(m_software_config, json[QString("softwareConfig")]);
    m_software_config_isSet = !json[QString("softwareConfig")].isNull() && m_software_config_isValid;

    m_temp_bucket_isValid = ::OpenAPI::fromJsonValue(m_temp_bucket, json[QString("tempBucket")]);
    m_temp_bucket_isSet = !json[QString("tempBucket")].isNull() && m_temp_bucket_isValid;

    m_worker_config_isValid = ::OpenAPI::fromJsonValue(m_worker_config, json[QString("workerConfig")]);
    m_worker_config_isSet = !json[QString("workerConfig")].isNull() && m_worker_config_isValid;
}

QString OAIClusterConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_autoscaling_config.isSet()) {
        obj.insert(QString("autoscalingConfig"), ::OpenAPI::toJsonValue(m_autoscaling_config));
    }
    if (m_auxiliary_node_groups.size() > 0) {
        obj.insert(QString("auxiliaryNodeGroups"), ::OpenAPI::toJsonValue(m_auxiliary_node_groups));
    }
    if (m_config_bucket_isSet) {
        obj.insert(QString("configBucket"), ::OpenAPI::toJsonValue(m_config_bucket));
    }
    if (m_dataproc_metric_config.isSet()) {
        obj.insert(QString("dataprocMetricConfig"), ::OpenAPI::toJsonValue(m_dataproc_metric_config));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_endpoint_config.isSet()) {
        obj.insert(QString("endpointConfig"), ::OpenAPI::toJsonValue(m_endpoint_config));
    }
    if (m_gce_cluster_config.isSet()) {
        obj.insert(QString("gceClusterConfig"), ::OpenAPI::toJsonValue(m_gce_cluster_config));
    }
    if (m_gke_cluster_config.isSet()) {
        obj.insert(QString("gkeClusterConfig"), ::OpenAPI::toJsonValue(m_gke_cluster_config));
    }
    if (m_initialization_actions.size() > 0) {
        obj.insert(QString("initializationActions"), ::OpenAPI::toJsonValue(m_initialization_actions));
    }
    if (m_lifecycle_config.isSet()) {
        obj.insert(QString("lifecycleConfig"), ::OpenAPI::toJsonValue(m_lifecycle_config));
    }
    if (m_master_config.isSet()) {
        obj.insert(QString("masterConfig"), ::OpenAPI::toJsonValue(m_master_config));
    }
    if (m_metastore_config.isSet()) {
        obj.insert(QString("metastoreConfig"), ::OpenAPI::toJsonValue(m_metastore_config));
    }
    if (m_secondary_worker_config.isSet()) {
        obj.insert(QString("secondaryWorkerConfig"), ::OpenAPI::toJsonValue(m_secondary_worker_config));
    }
    if (m_security_config.isSet()) {
        obj.insert(QString("securityConfig"), ::OpenAPI::toJsonValue(m_security_config));
    }
    if (m_software_config.isSet()) {
        obj.insert(QString("softwareConfig"), ::OpenAPI::toJsonValue(m_software_config));
    }
    if (m_temp_bucket_isSet) {
        obj.insert(QString("tempBucket"), ::OpenAPI::toJsonValue(m_temp_bucket));
    }
    if (m_worker_config.isSet()) {
        obj.insert(QString("workerConfig"), ::OpenAPI::toJsonValue(m_worker_config));
    }
    return obj;
}

OAIAutoscalingConfig OAIClusterConfig::getAutoscalingConfig() const {
    return m_autoscaling_config;
}
void OAIClusterConfig::setAutoscalingConfig(const OAIAutoscalingConfig &autoscaling_config) {
    m_autoscaling_config = autoscaling_config;
    m_autoscaling_config_isSet = true;
}

bool OAIClusterConfig::is_autoscaling_config_Set() const{
    return m_autoscaling_config_isSet;
}

bool OAIClusterConfig::is_autoscaling_config_Valid() const{
    return m_autoscaling_config_isValid;
}

QList<OAIAuxiliaryNodeGroup> OAIClusterConfig::getAuxiliaryNodeGroups() const {
    return m_auxiliary_node_groups;
}
void OAIClusterConfig::setAuxiliaryNodeGroups(const QList<OAIAuxiliaryNodeGroup> &auxiliary_node_groups) {
    m_auxiliary_node_groups = auxiliary_node_groups;
    m_auxiliary_node_groups_isSet = true;
}

bool OAIClusterConfig::is_auxiliary_node_groups_Set() const{
    return m_auxiliary_node_groups_isSet;
}

bool OAIClusterConfig::is_auxiliary_node_groups_Valid() const{
    return m_auxiliary_node_groups_isValid;
}

QString OAIClusterConfig::getConfigBucket() const {
    return m_config_bucket;
}
void OAIClusterConfig::setConfigBucket(const QString &config_bucket) {
    m_config_bucket = config_bucket;
    m_config_bucket_isSet = true;
}

bool OAIClusterConfig::is_config_bucket_Set() const{
    return m_config_bucket_isSet;
}

bool OAIClusterConfig::is_config_bucket_Valid() const{
    return m_config_bucket_isValid;
}

OAIDataprocMetricConfig OAIClusterConfig::getDataprocMetricConfig() const {
    return m_dataproc_metric_config;
}
void OAIClusterConfig::setDataprocMetricConfig(const OAIDataprocMetricConfig &dataproc_metric_config) {
    m_dataproc_metric_config = dataproc_metric_config;
    m_dataproc_metric_config_isSet = true;
}

bool OAIClusterConfig::is_dataproc_metric_config_Set() const{
    return m_dataproc_metric_config_isSet;
}

bool OAIClusterConfig::is_dataproc_metric_config_Valid() const{
    return m_dataproc_metric_config_isValid;
}

OAIEncryptionConfig OAIClusterConfig::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIClusterConfig::setEncryptionConfig(const OAIEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIClusterConfig::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIClusterConfig::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

OAIEndpointConfig OAIClusterConfig::getEndpointConfig() const {
    return m_endpoint_config;
}
void OAIClusterConfig::setEndpointConfig(const OAIEndpointConfig &endpoint_config) {
    m_endpoint_config = endpoint_config;
    m_endpoint_config_isSet = true;
}

bool OAIClusterConfig::is_endpoint_config_Set() const{
    return m_endpoint_config_isSet;
}

bool OAIClusterConfig::is_endpoint_config_Valid() const{
    return m_endpoint_config_isValid;
}

OAIGceClusterConfig OAIClusterConfig::getGceClusterConfig() const {
    return m_gce_cluster_config;
}
void OAIClusterConfig::setGceClusterConfig(const OAIGceClusterConfig &gce_cluster_config) {
    m_gce_cluster_config = gce_cluster_config;
    m_gce_cluster_config_isSet = true;
}

bool OAIClusterConfig::is_gce_cluster_config_Set() const{
    return m_gce_cluster_config_isSet;
}

bool OAIClusterConfig::is_gce_cluster_config_Valid() const{
    return m_gce_cluster_config_isValid;
}

OAIGkeClusterConfig OAIClusterConfig::getGkeClusterConfig() const {
    return m_gke_cluster_config;
}
void OAIClusterConfig::setGkeClusterConfig(const OAIGkeClusterConfig &gke_cluster_config) {
    m_gke_cluster_config = gke_cluster_config;
    m_gke_cluster_config_isSet = true;
}

bool OAIClusterConfig::is_gke_cluster_config_Set() const{
    return m_gke_cluster_config_isSet;
}

bool OAIClusterConfig::is_gke_cluster_config_Valid() const{
    return m_gke_cluster_config_isValid;
}

QList<OAINodeInitializationAction> OAIClusterConfig::getInitializationActions() const {
    return m_initialization_actions;
}
void OAIClusterConfig::setInitializationActions(const QList<OAINodeInitializationAction> &initialization_actions) {
    m_initialization_actions = initialization_actions;
    m_initialization_actions_isSet = true;
}

bool OAIClusterConfig::is_initialization_actions_Set() const{
    return m_initialization_actions_isSet;
}

bool OAIClusterConfig::is_initialization_actions_Valid() const{
    return m_initialization_actions_isValid;
}

OAILifecycleConfig OAIClusterConfig::getLifecycleConfig() const {
    return m_lifecycle_config;
}
void OAIClusterConfig::setLifecycleConfig(const OAILifecycleConfig &lifecycle_config) {
    m_lifecycle_config = lifecycle_config;
    m_lifecycle_config_isSet = true;
}

bool OAIClusterConfig::is_lifecycle_config_Set() const{
    return m_lifecycle_config_isSet;
}

bool OAIClusterConfig::is_lifecycle_config_Valid() const{
    return m_lifecycle_config_isValid;
}

OAIInstanceGroupConfig OAIClusterConfig::getMasterConfig() const {
    return m_master_config;
}
void OAIClusterConfig::setMasterConfig(const OAIInstanceGroupConfig &master_config) {
    m_master_config = master_config;
    m_master_config_isSet = true;
}

bool OAIClusterConfig::is_master_config_Set() const{
    return m_master_config_isSet;
}

bool OAIClusterConfig::is_master_config_Valid() const{
    return m_master_config_isValid;
}

OAIMetastoreConfig OAIClusterConfig::getMetastoreConfig() const {
    return m_metastore_config;
}
void OAIClusterConfig::setMetastoreConfig(const OAIMetastoreConfig &metastore_config) {
    m_metastore_config = metastore_config;
    m_metastore_config_isSet = true;
}

bool OAIClusterConfig::is_metastore_config_Set() const{
    return m_metastore_config_isSet;
}

bool OAIClusterConfig::is_metastore_config_Valid() const{
    return m_metastore_config_isValid;
}

OAIInstanceGroupConfig OAIClusterConfig::getSecondaryWorkerConfig() const {
    return m_secondary_worker_config;
}
void OAIClusterConfig::setSecondaryWorkerConfig(const OAIInstanceGroupConfig &secondary_worker_config) {
    m_secondary_worker_config = secondary_worker_config;
    m_secondary_worker_config_isSet = true;
}

bool OAIClusterConfig::is_secondary_worker_config_Set() const{
    return m_secondary_worker_config_isSet;
}

bool OAIClusterConfig::is_secondary_worker_config_Valid() const{
    return m_secondary_worker_config_isValid;
}

OAISecurityConfig OAIClusterConfig::getSecurityConfig() const {
    return m_security_config;
}
void OAIClusterConfig::setSecurityConfig(const OAISecurityConfig &security_config) {
    m_security_config = security_config;
    m_security_config_isSet = true;
}

bool OAIClusterConfig::is_security_config_Set() const{
    return m_security_config_isSet;
}

bool OAIClusterConfig::is_security_config_Valid() const{
    return m_security_config_isValid;
}

OAISoftwareConfig OAIClusterConfig::getSoftwareConfig() const {
    return m_software_config;
}
void OAIClusterConfig::setSoftwareConfig(const OAISoftwareConfig &software_config) {
    m_software_config = software_config;
    m_software_config_isSet = true;
}

bool OAIClusterConfig::is_software_config_Set() const{
    return m_software_config_isSet;
}

bool OAIClusterConfig::is_software_config_Valid() const{
    return m_software_config_isValid;
}

QString OAIClusterConfig::getTempBucket() const {
    return m_temp_bucket;
}
void OAIClusterConfig::setTempBucket(const QString &temp_bucket) {
    m_temp_bucket = temp_bucket;
    m_temp_bucket_isSet = true;
}

bool OAIClusterConfig::is_temp_bucket_Set() const{
    return m_temp_bucket_isSet;
}

bool OAIClusterConfig::is_temp_bucket_Valid() const{
    return m_temp_bucket_isValid;
}

OAIInstanceGroupConfig OAIClusterConfig::getWorkerConfig() const {
    return m_worker_config;
}
void OAIClusterConfig::setWorkerConfig(const OAIInstanceGroupConfig &worker_config) {
    m_worker_config = worker_config;
    m_worker_config_isSet = true;
}

bool OAIClusterConfig::is_worker_config_Set() const{
    return m_worker_config_isSet;
}

bool OAIClusterConfig::is_worker_config_Valid() const{
    return m_worker_config_isValid;
}

bool OAIClusterConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autoscaling_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auxiliary_node_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataproc_metric_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gce_cluster_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_cluster_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initialization_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metastore_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_worker_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
