/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISparkRJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISparkRJob::OAISparkRJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISparkRJob::OAISparkRJob() {
    this->initializeModel();
}

OAISparkRJob::~OAISparkRJob() {}

void OAISparkRJob::initializeModel() {

    m_archive_uris_isSet = false;
    m_archive_uris_isValid = false;

    m_args_isSet = false;
    m_args_isValid = false;

    m_file_uris_isSet = false;
    m_file_uris_isValid = false;

    m_logging_config_isSet = false;
    m_logging_config_isValid = false;

    m_main_r_file_uri_isSet = false;
    m_main_r_file_uri_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAISparkRJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISparkRJob::fromJsonObject(QJsonObject json) {

    m_archive_uris_isValid = ::OpenAPI::fromJsonValue(m_archive_uris, json[QString("archiveUris")]);
    m_archive_uris_isSet = !json[QString("archiveUris")].isNull() && m_archive_uris_isValid;

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("args")]);
    m_args_isSet = !json[QString("args")].isNull() && m_args_isValid;

    m_file_uris_isValid = ::OpenAPI::fromJsonValue(m_file_uris, json[QString("fileUris")]);
    m_file_uris_isSet = !json[QString("fileUris")].isNull() && m_file_uris_isValid;

    m_logging_config_isValid = ::OpenAPI::fromJsonValue(m_logging_config, json[QString("loggingConfig")]);
    m_logging_config_isSet = !json[QString("loggingConfig")].isNull() && m_logging_config_isValid;

    m_main_r_file_uri_isValid = ::OpenAPI::fromJsonValue(m_main_r_file_uri, json[QString("mainRFileUri")]);
    m_main_r_file_uri_isSet = !json[QString("mainRFileUri")].isNull() && m_main_r_file_uri_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAISparkRJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISparkRJob::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_uris.size() > 0) {
        obj.insert(QString("archiveUris"), ::OpenAPI::toJsonValue(m_archive_uris));
    }
    if (m_args.size() > 0) {
        obj.insert(QString("args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_file_uris.size() > 0) {
        obj.insert(QString("fileUris"), ::OpenAPI::toJsonValue(m_file_uris));
    }
    if (m_logging_config.isSet()) {
        obj.insert(QString("loggingConfig"), ::OpenAPI::toJsonValue(m_logging_config));
    }
    if (m_main_r_file_uri_isSet) {
        obj.insert(QString("mainRFileUri"), ::OpenAPI::toJsonValue(m_main_r_file_uri));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QList<QString> OAISparkRJob::getArchiveUris() const {
    return m_archive_uris;
}
void OAISparkRJob::setArchiveUris(const QList<QString> &archive_uris) {
    m_archive_uris = archive_uris;
    m_archive_uris_isSet = true;
}

bool OAISparkRJob::is_archive_uris_Set() const{
    return m_archive_uris_isSet;
}

bool OAISparkRJob::is_archive_uris_Valid() const{
    return m_archive_uris_isValid;
}

QList<QString> OAISparkRJob::getArgs() const {
    return m_args;
}
void OAISparkRJob::setArgs(const QList<QString> &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAISparkRJob::is_args_Set() const{
    return m_args_isSet;
}

bool OAISparkRJob::is_args_Valid() const{
    return m_args_isValid;
}

QList<QString> OAISparkRJob::getFileUris() const {
    return m_file_uris;
}
void OAISparkRJob::setFileUris(const QList<QString> &file_uris) {
    m_file_uris = file_uris;
    m_file_uris_isSet = true;
}

bool OAISparkRJob::is_file_uris_Set() const{
    return m_file_uris_isSet;
}

bool OAISparkRJob::is_file_uris_Valid() const{
    return m_file_uris_isValid;
}

OAILoggingConfig OAISparkRJob::getLoggingConfig() const {
    return m_logging_config;
}
void OAISparkRJob::setLoggingConfig(const OAILoggingConfig &logging_config) {
    m_logging_config = logging_config;
    m_logging_config_isSet = true;
}

bool OAISparkRJob::is_logging_config_Set() const{
    return m_logging_config_isSet;
}

bool OAISparkRJob::is_logging_config_Valid() const{
    return m_logging_config_isValid;
}

QString OAISparkRJob::getMainRFileUri() const {
    return m_main_r_file_uri;
}
void OAISparkRJob::setMainRFileUri(const QString &main_r_file_uri) {
    m_main_r_file_uri = main_r_file_uri;
    m_main_r_file_uri_isSet = true;
}

bool OAISparkRJob::is_main_r_file_uri_Set() const{
    return m_main_r_file_uri_isSet;
}

bool OAISparkRJob::is_main_r_file_uri_Valid() const{
    return m_main_r_file_uri_isValid;
}

QMap<QString, QString> OAISparkRJob::getProperties() const {
    return m_properties;
}
void OAISparkRJob::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISparkRJob::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISparkRJob::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAISparkRJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_r_file_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISparkRJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
