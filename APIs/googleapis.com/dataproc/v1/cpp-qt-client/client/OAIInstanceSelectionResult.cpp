/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceSelectionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceSelectionResult::OAIInstanceSelectionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceSelectionResult::OAIInstanceSelectionResult() {
    this->initializeModel();
}

OAIInstanceSelectionResult::~OAIInstanceSelectionResult() {}

void OAIInstanceSelectionResult::initializeModel() {

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_vm_count_isSet = false;
    m_vm_count_isValid = false;
}

void OAIInstanceSelectionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceSelectionResult::fromJsonObject(QJsonObject json) {

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_vm_count_isValid = ::OpenAPI::fromJsonValue(m_vm_count, json[QString("vmCount")]);
    m_vm_count_isSet = !json[QString("vmCount")].isNull() && m_vm_count_isValid;
}

QString OAIInstanceSelectionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceSelectionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_vm_count_isSet) {
        obj.insert(QString("vmCount"), ::OpenAPI::toJsonValue(m_vm_count));
    }
    return obj;
}

QString OAIInstanceSelectionResult::getMachineType() const {
    return m_machine_type;
}
void OAIInstanceSelectionResult::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIInstanceSelectionResult::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIInstanceSelectionResult::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

qint32 OAIInstanceSelectionResult::getVmCount() const {
    return m_vm_count;
}
void OAIInstanceSelectionResult::setVmCount(const qint32 &vm_count) {
    m_vm_count = vm_count;
    m_vm_count_isSet = true;
}

bool OAIInstanceSelectionResult::is_vm_count_Set() const{
    return m_vm_count_isSet;
}

bool OAIInstanceSelectionResult::is_vm_count_Valid() const{
    return m_vm_count_isValid;
}

bool OAIInstanceSelectionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceSelectionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
