/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageSnapshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageSnapshot::OAIUsageSnapshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageSnapshot::OAIUsageSnapshot() {
    this->initializeModel();
}

OAIUsageSnapshot::~OAIUsageSnapshot() {}

void OAIUsageSnapshot::initializeModel() {

    m_accelerator_type_isSet = false;
    m_accelerator_type_isValid = false;

    m_milli_accelerator_isSet = false;
    m_milli_accelerator_isValid = false;

    m_milli_dcu_isSet = false;
    m_milli_dcu_isValid = false;

    m_milli_dcu_premium_isSet = false;
    m_milli_dcu_premium_isValid = false;

    m_shuffle_storage_gb_isSet = false;
    m_shuffle_storage_gb_isValid = false;

    m_shuffle_storage_gb_premium_isSet = false;
    m_shuffle_storage_gb_premium_isValid = false;

    m_snapshot_time_isSet = false;
    m_snapshot_time_isValid = false;
}

void OAIUsageSnapshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageSnapshot::fromJsonObject(QJsonObject json) {

    m_accelerator_type_isValid = ::OpenAPI::fromJsonValue(m_accelerator_type, json[QString("acceleratorType")]);
    m_accelerator_type_isSet = !json[QString("acceleratorType")].isNull() && m_accelerator_type_isValid;

    m_milli_accelerator_isValid = ::OpenAPI::fromJsonValue(m_milli_accelerator, json[QString("milliAccelerator")]);
    m_milli_accelerator_isSet = !json[QString("milliAccelerator")].isNull() && m_milli_accelerator_isValid;

    m_milli_dcu_isValid = ::OpenAPI::fromJsonValue(m_milli_dcu, json[QString("milliDcu")]);
    m_milli_dcu_isSet = !json[QString("milliDcu")].isNull() && m_milli_dcu_isValid;

    m_milli_dcu_premium_isValid = ::OpenAPI::fromJsonValue(m_milli_dcu_premium, json[QString("milliDcuPremium")]);
    m_milli_dcu_premium_isSet = !json[QString("milliDcuPremium")].isNull() && m_milli_dcu_premium_isValid;

    m_shuffle_storage_gb_isValid = ::OpenAPI::fromJsonValue(m_shuffle_storage_gb, json[QString("shuffleStorageGb")]);
    m_shuffle_storage_gb_isSet = !json[QString("shuffleStorageGb")].isNull() && m_shuffle_storage_gb_isValid;

    m_shuffle_storage_gb_premium_isValid = ::OpenAPI::fromJsonValue(m_shuffle_storage_gb_premium, json[QString("shuffleStorageGbPremium")]);
    m_shuffle_storage_gb_premium_isSet = !json[QString("shuffleStorageGbPremium")].isNull() && m_shuffle_storage_gb_premium_isValid;

    m_snapshot_time_isValid = ::OpenAPI::fromJsonValue(m_snapshot_time, json[QString("snapshotTime")]);
    m_snapshot_time_isSet = !json[QString("snapshotTime")].isNull() && m_snapshot_time_isValid;
}

QString OAIUsageSnapshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageSnapshot::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerator_type_isSet) {
        obj.insert(QString("acceleratorType"), ::OpenAPI::toJsonValue(m_accelerator_type));
    }
    if (m_milli_accelerator_isSet) {
        obj.insert(QString("milliAccelerator"), ::OpenAPI::toJsonValue(m_milli_accelerator));
    }
    if (m_milli_dcu_isSet) {
        obj.insert(QString("milliDcu"), ::OpenAPI::toJsonValue(m_milli_dcu));
    }
    if (m_milli_dcu_premium_isSet) {
        obj.insert(QString("milliDcuPremium"), ::OpenAPI::toJsonValue(m_milli_dcu_premium));
    }
    if (m_shuffle_storage_gb_isSet) {
        obj.insert(QString("shuffleStorageGb"), ::OpenAPI::toJsonValue(m_shuffle_storage_gb));
    }
    if (m_shuffle_storage_gb_premium_isSet) {
        obj.insert(QString("shuffleStorageGbPremium"), ::OpenAPI::toJsonValue(m_shuffle_storage_gb_premium));
    }
    if (m_snapshot_time_isSet) {
        obj.insert(QString("snapshotTime"), ::OpenAPI::toJsonValue(m_snapshot_time));
    }
    return obj;
}

QString OAIUsageSnapshot::getAcceleratorType() const {
    return m_accelerator_type;
}
void OAIUsageSnapshot::setAcceleratorType(const QString &accelerator_type) {
    m_accelerator_type = accelerator_type;
    m_accelerator_type_isSet = true;
}

bool OAIUsageSnapshot::is_accelerator_type_Set() const{
    return m_accelerator_type_isSet;
}

bool OAIUsageSnapshot::is_accelerator_type_Valid() const{
    return m_accelerator_type_isValid;
}

QString OAIUsageSnapshot::getMilliAccelerator() const {
    return m_milli_accelerator;
}
void OAIUsageSnapshot::setMilliAccelerator(const QString &milli_accelerator) {
    m_milli_accelerator = milli_accelerator;
    m_milli_accelerator_isSet = true;
}

bool OAIUsageSnapshot::is_milli_accelerator_Set() const{
    return m_milli_accelerator_isSet;
}

bool OAIUsageSnapshot::is_milli_accelerator_Valid() const{
    return m_milli_accelerator_isValid;
}

QString OAIUsageSnapshot::getMilliDcu() const {
    return m_milli_dcu;
}
void OAIUsageSnapshot::setMilliDcu(const QString &milli_dcu) {
    m_milli_dcu = milli_dcu;
    m_milli_dcu_isSet = true;
}

bool OAIUsageSnapshot::is_milli_dcu_Set() const{
    return m_milli_dcu_isSet;
}

bool OAIUsageSnapshot::is_milli_dcu_Valid() const{
    return m_milli_dcu_isValid;
}

QString OAIUsageSnapshot::getMilliDcuPremium() const {
    return m_milli_dcu_premium;
}
void OAIUsageSnapshot::setMilliDcuPremium(const QString &milli_dcu_premium) {
    m_milli_dcu_premium = milli_dcu_premium;
    m_milli_dcu_premium_isSet = true;
}

bool OAIUsageSnapshot::is_milli_dcu_premium_Set() const{
    return m_milli_dcu_premium_isSet;
}

bool OAIUsageSnapshot::is_milli_dcu_premium_Valid() const{
    return m_milli_dcu_premium_isValid;
}

QString OAIUsageSnapshot::getShuffleStorageGb() const {
    return m_shuffle_storage_gb;
}
void OAIUsageSnapshot::setShuffleStorageGb(const QString &shuffle_storage_gb) {
    m_shuffle_storage_gb = shuffle_storage_gb;
    m_shuffle_storage_gb_isSet = true;
}

bool OAIUsageSnapshot::is_shuffle_storage_gb_Set() const{
    return m_shuffle_storage_gb_isSet;
}

bool OAIUsageSnapshot::is_shuffle_storage_gb_Valid() const{
    return m_shuffle_storage_gb_isValid;
}

QString OAIUsageSnapshot::getShuffleStorageGbPremium() const {
    return m_shuffle_storage_gb_premium;
}
void OAIUsageSnapshot::setShuffleStorageGbPremium(const QString &shuffle_storage_gb_premium) {
    m_shuffle_storage_gb_premium = shuffle_storage_gb_premium;
    m_shuffle_storage_gb_premium_isSet = true;
}

bool OAIUsageSnapshot::is_shuffle_storage_gb_premium_Set() const{
    return m_shuffle_storage_gb_premium_isSet;
}

bool OAIUsageSnapshot::is_shuffle_storage_gb_premium_Valid() const{
    return m_shuffle_storage_gb_premium_isValid;
}

QString OAIUsageSnapshot::getSnapshotTime() const {
    return m_snapshot_time;
}
void OAIUsageSnapshot::setSnapshotTime(const QString &snapshot_time) {
    m_snapshot_time = snapshot_time;
    m_snapshot_time_isSet = true;
}

bool OAIUsageSnapshot::is_snapshot_time_Set() const{
    return m_snapshot_time_isSet;
}

bool OAIUsageSnapshot::is_snapshot_time_Valid() const{
    return m_snapshot_time_isValid;
}

bool OAIUsageSnapshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milli_accelerator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milli_dcu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milli_dcu_premium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shuffle_storage_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shuffle_storage_gb_premium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageSnapshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
