/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasicYarnAutoscalingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasicYarnAutoscalingConfig::OAIBasicYarnAutoscalingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasicYarnAutoscalingConfig::OAIBasicYarnAutoscalingConfig() {
    this->initializeModel();
}

OAIBasicYarnAutoscalingConfig::~OAIBasicYarnAutoscalingConfig() {}

void OAIBasicYarnAutoscalingConfig::initializeModel() {

    m_graceful_decommission_timeout_isSet = false;
    m_graceful_decommission_timeout_isValid = false;

    m_scale_down_factor_isSet = false;
    m_scale_down_factor_isValid = false;

    m_scale_down_min_worker_fraction_isSet = false;
    m_scale_down_min_worker_fraction_isValid = false;

    m_scale_up_factor_isSet = false;
    m_scale_up_factor_isValid = false;

    m_scale_up_min_worker_fraction_isSet = false;
    m_scale_up_min_worker_fraction_isValid = false;
}

void OAIBasicYarnAutoscalingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasicYarnAutoscalingConfig::fromJsonObject(QJsonObject json) {

    m_graceful_decommission_timeout_isValid = ::OpenAPI::fromJsonValue(m_graceful_decommission_timeout, json[QString("gracefulDecommissionTimeout")]);
    m_graceful_decommission_timeout_isSet = !json[QString("gracefulDecommissionTimeout")].isNull() && m_graceful_decommission_timeout_isValid;

    m_scale_down_factor_isValid = ::OpenAPI::fromJsonValue(m_scale_down_factor, json[QString("scaleDownFactor")]);
    m_scale_down_factor_isSet = !json[QString("scaleDownFactor")].isNull() && m_scale_down_factor_isValid;

    m_scale_down_min_worker_fraction_isValid = ::OpenAPI::fromJsonValue(m_scale_down_min_worker_fraction, json[QString("scaleDownMinWorkerFraction")]);
    m_scale_down_min_worker_fraction_isSet = !json[QString("scaleDownMinWorkerFraction")].isNull() && m_scale_down_min_worker_fraction_isValid;

    m_scale_up_factor_isValid = ::OpenAPI::fromJsonValue(m_scale_up_factor, json[QString("scaleUpFactor")]);
    m_scale_up_factor_isSet = !json[QString("scaleUpFactor")].isNull() && m_scale_up_factor_isValid;

    m_scale_up_min_worker_fraction_isValid = ::OpenAPI::fromJsonValue(m_scale_up_min_worker_fraction, json[QString("scaleUpMinWorkerFraction")]);
    m_scale_up_min_worker_fraction_isSet = !json[QString("scaleUpMinWorkerFraction")].isNull() && m_scale_up_min_worker_fraction_isValid;
}

QString OAIBasicYarnAutoscalingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasicYarnAutoscalingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_graceful_decommission_timeout_isSet) {
        obj.insert(QString("gracefulDecommissionTimeout"), ::OpenAPI::toJsonValue(m_graceful_decommission_timeout));
    }
    if (m_scale_down_factor_isSet) {
        obj.insert(QString("scaleDownFactor"), ::OpenAPI::toJsonValue(m_scale_down_factor));
    }
    if (m_scale_down_min_worker_fraction_isSet) {
        obj.insert(QString("scaleDownMinWorkerFraction"), ::OpenAPI::toJsonValue(m_scale_down_min_worker_fraction));
    }
    if (m_scale_up_factor_isSet) {
        obj.insert(QString("scaleUpFactor"), ::OpenAPI::toJsonValue(m_scale_up_factor));
    }
    if (m_scale_up_min_worker_fraction_isSet) {
        obj.insert(QString("scaleUpMinWorkerFraction"), ::OpenAPI::toJsonValue(m_scale_up_min_worker_fraction));
    }
    return obj;
}

QString OAIBasicYarnAutoscalingConfig::getGracefulDecommissionTimeout() const {
    return m_graceful_decommission_timeout;
}
void OAIBasicYarnAutoscalingConfig::setGracefulDecommissionTimeout(const QString &graceful_decommission_timeout) {
    m_graceful_decommission_timeout = graceful_decommission_timeout;
    m_graceful_decommission_timeout_isSet = true;
}

bool OAIBasicYarnAutoscalingConfig::is_graceful_decommission_timeout_Set() const{
    return m_graceful_decommission_timeout_isSet;
}

bool OAIBasicYarnAutoscalingConfig::is_graceful_decommission_timeout_Valid() const{
    return m_graceful_decommission_timeout_isValid;
}

double OAIBasicYarnAutoscalingConfig::getScaleDownFactor() const {
    return m_scale_down_factor;
}
void OAIBasicYarnAutoscalingConfig::setScaleDownFactor(const double &scale_down_factor) {
    m_scale_down_factor = scale_down_factor;
    m_scale_down_factor_isSet = true;
}

bool OAIBasicYarnAutoscalingConfig::is_scale_down_factor_Set() const{
    return m_scale_down_factor_isSet;
}

bool OAIBasicYarnAutoscalingConfig::is_scale_down_factor_Valid() const{
    return m_scale_down_factor_isValid;
}

double OAIBasicYarnAutoscalingConfig::getScaleDownMinWorkerFraction() const {
    return m_scale_down_min_worker_fraction;
}
void OAIBasicYarnAutoscalingConfig::setScaleDownMinWorkerFraction(const double &scale_down_min_worker_fraction) {
    m_scale_down_min_worker_fraction = scale_down_min_worker_fraction;
    m_scale_down_min_worker_fraction_isSet = true;
}

bool OAIBasicYarnAutoscalingConfig::is_scale_down_min_worker_fraction_Set() const{
    return m_scale_down_min_worker_fraction_isSet;
}

bool OAIBasicYarnAutoscalingConfig::is_scale_down_min_worker_fraction_Valid() const{
    return m_scale_down_min_worker_fraction_isValid;
}

double OAIBasicYarnAutoscalingConfig::getScaleUpFactor() const {
    return m_scale_up_factor;
}
void OAIBasicYarnAutoscalingConfig::setScaleUpFactor(const double &scale_up_factor) {
    m_scale_up_factor = scale_up_factor;
    m_scale_up_factor_isSet = true;
}

bool OAIBasicYarnAutoscalingConfig::is_scale_up_factor_Set() const{
    return m_scale_up_factor_isSet;
}

bool OAIBasicYarnAutoscalingConfig::is_scale_up_factor_Valid() const{
    return m_scale_up_factor_isValid;
}

double OAIBasicYarnAutoscalingConfig::getScaleUpMinWorkerFraction() const {
    return m_scale_up_min_worker_fraction;
}
void OAIBasicYarnAutoscalingConfig::setScaleUpMinWorkerFraction(const double &scale_up_min_worker_fraction) {
    m_scale_up_min_worker_fraction = scale_up_min_worker_fraction;
    m_scale_up_min_worker_fraction_isSet = true;
}

bool OAIBasicYarnAutoscalingConfig::is_scale_up_min_worker_fraction_Set() const{
    return m_scale_up_min_worker_fraction_isSet;
}

bool OAIBasicYarnAutoscalingConfig::is_scale_up_min_worker_fraction_Valid() const{
    return m_scale_up_min_worker_fraction_isValid;
}

bool OAIBasicYarnAutoscalingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_graceful_decommission_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_down_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_down_min_worker_fraction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_up_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_up_min_worker_fraction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasicYarnAutoscalingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
