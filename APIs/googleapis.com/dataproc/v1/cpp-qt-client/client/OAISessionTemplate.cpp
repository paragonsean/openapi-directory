/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionTemplate::OAISessionTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionTemplate::OAISessionTemplate() {
    this->initializeModel();
}

OAISessionTemplate::~OAISessionTemplate() {}

void OAISessionTemplate::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_environment_config_isSet = false;
    m_environment_config_isValid = false;

    m_jupyter_session_isSet = false;
    m_jupyter_session_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_runtime_config_isSet = false;
    m_runtime_config_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAISessionTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionTemplate::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_environment_config_isValid = ::OpenAPI::fromJsonValue(m_environment_config, json[QString("environmentConfig")]);
    m_environment_config_isSet = !json[QString("environmentConfig")].isNull() && m_environment_config_isValid;

    m_jupyter_session_isValid = ::OpenAPI::fromJsonValue(m_jupyter_session, json[QString("jupyterSession")]);
    m_jupyter_session_isSet = !json[QString("jupyterSession")].isNull() && m_jupyter_session_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_runtime_config_isValid = ::OpenAPI::fromJsonValue(m_runtime_config, json[QString("runtimeConfig")]);
    m_runtime_config_isSet = !json[QString("runtimeConfig")].isNull() && m_runtime_config_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAISessionTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_environment_config.isSet()) {
        obj.insert(QString("environmentConfig"), ::OpenAPI::toJsonValue(m_environment_config));
    }
    if (m_jupyter_session.isSet()) {
        obj.insert(QString("jupyterSession"), ::OpenAPI::toJsonValue(m_jupyter_session));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_runtime_config.isSet()) {
        obj.insert(QString("runtimeConfig"), ::OpenAPI::toJsonValue(m_runtime_config));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAISessionTemplate::getCreateTime() const {
    return m_create_time;
}
void OAISessionTemplate::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAISessionTemplate::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAISessionTemplate::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAISessionTemplate::getCreator() const {
    return m_creator;
}
void OAISessionTemplate::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAISessionTemplate::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAISessionTemplate::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAISessionTemplate::getDescription() const {
    return m_description;
}
void OAISessionTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISessionTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAISessionTemplate::is_description_Valid() const{
    return m_description_isValid;
}

OAIEnvironmentConfig OAISessionTemplate::getEnvironmentConfig() const {
    return m_environment_config;
}
void OAISessionTemplate::setEnvironmentConfig(const OAIEnvironmentConfig &environment_config) {
    m_environment_config = environment_config;
    m_environment_config_isSet = true;
}

bool OAISessionTemplate::is_environment_config_Set() const{
    return m_environment_config_isSet;
}

bool OAISessionTemplate::is_environment_config_Valid() const{
    return m_environment_config_isValid;
}

OAIJupyterConfig OAISessionTemplate::getJupyterSession() const {
    return m_jupyter_session;
}
void OAISessionTemplate::setJupyterSession(const OAIJupyterConfig &jupyter_session) {
    m_jupyter_session = jupyter_session;
    m_jupyter_session_isSet = true;
}

bool OAISessionTemplate::is_jupyter_session_Set() const{
    return m_jupyter_session_isSet;
}

bool OAISessionTemplate::is_jupyter_session_Valid() const{
    return m_jupyter_session_isValid;
}

QMap<QString, QString> OAISessionTemplate::getLabels() const {
    return m_labels;
}
void OAISessionTemplate::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAISessionTemplate::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAISessionTemplate::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAISessionTemplate::getName() const {
    return m_name;
}
void OAISessionTemplate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISessionTemplate::is_name_Set() const{
    return m_name_isSet;
}

bool OAISessionTemplate::is_name_Valid() const{
    return m_name_isValid;
}

OAIRuntimeConfig OAISessionTemplate::getRuntimeConfig() const {
    return m_runtime_config;
}
void OAISessionTemplate::setRuntimeConfig(const OAIRuntimeConfig &runtime_config) {
    m_runtime_config = runtime_config;
    m_runtime_config_isSet = true;
}

bool OAISessionTemplate::is_runtime_config_Set() const{
    return m_runtime_config_isSet;
}

bool OAISessionTemplate::is_runtime_config_Valid() const{
    return m_runtime_config_isValid;
}

QString OAISessionTemplate::getUpdateTime() const {
    return m_update_time;
}
void OAISessionTemplate::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAISessionTemplate::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAISessionTemplate::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAISessionTemplate::getUuid() const {
    return m_uuid;
}
void OAISessionTemplate::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAISessionTemplate::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAISessionTemplate::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAISessionTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jupyter_session.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
