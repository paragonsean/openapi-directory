/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrestoJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrestoJob::OAIPrestoJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrestoJob::OAIPrestoJob() {
    this->initializeModel();
}

OAIPrestoJob::~OAIPrestoJob() {}

void OAIPrestoJob::initializeModel() {

    m_client_tags_isSet = false;
    m_client_tags_isValid = false;

    m_continue_on_failure_isSet = false;
    m_continue_on_failure_isValid = false;

    m_logging_config_isSet = false;
    m_logging_config_isValid = false;

    m_output_format_isSet = false;
    m_output_format_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_query_file_uri_isSet = false;
    m_query_file_uri_isValid = false;

    m_query_list_isSet = false;
    m_query_list_isValid = false;
}

void OAIPrestoJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrestoJob::fromJsonObject(QJsonObject json) {

    m_client_tags_isValid = ::OpenAPI::fromJsonValue(m_client_tags, json[QString("clientTags")]);
    m_client_tags_isSet = !json[QString("clientTags")].isNull() && m_client_tags_isValid;

    m_continue_on_failure_isValid = ::OpenAPI::fromJsonValue(m_continue_on_failure, json[QString("continueOnFailure")]);
    m_continue_on_failure_isSet = !json[QString("continueOnFailure")].isNull() && m_continue_on_failure_isValid;

    m_logging_config_isValid = ::OpenAPI::fromJsonValue(m_logging_config, json[QString("loggingConfig")]);
    m_logging_config_isSet = !json[QString("loggingConfig")].isNull() && m_logging_config_isValid;

    m_output_format_isValid = ::OpenAPI::fromJsonValue(m_output_format, json[QString("outputFormat")]);
    m_output_format_isSet = !json[QString("outputFormat")].isNull() && m_output_format_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_query_file_uri_isValid = ::OpenAPI::fromJsonValue(m_query_file_uri, json[QString("queryFileUri")]);
    m_query_file_uri_isSet = !json[QString("queryFileUri")].isNull() && m_query_file_uri_isValid;

    m_query_list_isValid = ::OpenAPI::fromJsonValue(m_query_list, json[QString("queryList")]);
    m_query_list_isSet = !json[QString("queryList")].isNull() && m_query_list_isValid;
}

QString OAIPrestoJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrestoJob::asJsonObject() const {
    QJsonObject obj;
    if (m_client_tags.size() > 0) {
        obj.insert(QString("clientTags"), ::OpenAPI::toJsonValue(m_client_tags));
    }
    if (m_continue_on_failure_isSet) {
        obj.insert(QString("continueOnFailure"), ::OpenAPI::toJsonValue(m_continue_on_failure));
    }
    if (m_logging_config.isSet()) {
        obj.insert(QString("loggingConfig"), ::OpenAPI::toJsonValue(m_logging_config));
    }
    if (m_output_format_isSet) {
        obj.insert(QString("outputFormat"), ::OpenAPI::toJsonValue(m_output_format));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_query_file_uri_isSet) {
        obj.insert(QString("queryFileUri"), ::OpenAPI::toJsonValue(m_query_file_uri));
    }
    if (m_query_list.isSet()) {
        obj.insert(QString("queryList"), ::OpenAPI::toJsonValue(m_query_list));
    }
    return obj;
}

QList<QString> OAIPrestoJob::getClientTags() const {
    return m_client_tags;
}
void OAIPrestoJob::setClientTags(const QList<QString> &client_tags) {
    m_client_tags = client_tags;
    m_client_tags_isSet = true;
}

bool OAIPrestoJob::is_client_tags_Set() const{
    return m_client_tags_isSet;
}

bool OAIPrestoJob::is_client_tags_Valid() const{
    return m_client_tags_isValid;
}

bool OAIPrestoJob::isContinueOnFailure() const {
    return m_continue_on_failure;
}
void OAIPrestoJob::setContinueOnFailure(const bool &continue_on_failure) {
    m_continue_on_failure = continue_on_failure;
    m_continue_on_failure_isSet = true;
}

bool OAIPrestoJob::is_continue_on_failure_Set() const{
    return m_continue_on_failure_isSet;
}

bool OAIPrestoJob::is_continue_on_failure_Valid() const{
    return m_continue_on_failure_isValid;
}

OAILoggingConfig OAIPrestoJob::getLoggingConfig() const {
    return m_logging_config;
}
void OAIPrestoJob::setLoggingConfig(const OAILoggingConfig &logging_config) {
    m_logging_config = logging_config;
    m_logging_config_isSet = true;
}

bool OAIPrestoJob::is_logging_config_Set() const{
    return m_logging_config_isSet;
}

bool OAIPrestoJob::is_logging_config_Valid() const{
    return m_logging_config_isValid;
}

QString OAIPrestoJob::getOutputFormat() const {
    return m_output_format;
}
void OAIPrestoJob::setOutputFormat(const QString &output_format) {
    m_output_format = output_format;
    m_output_format_isSet = true;
}

bool OAIPrestoJob::is_output_format_Set() const{
    return m_output_format_isSet;
}

bool OAIPrestoJob::is_output_format_Valid() const{
    return m_output_format_isValid;
}

QMap<QString, QString> OAIPrestoJob::getProperties() const {
    return m_properties;
}
void OAIPrestoJob::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIPrestoJob::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIPrestoJob::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIPrestoJob::getQueryFileUri() const {
    return m_query_file_uri;
}
void OAIPrestoJob::setQueryFileUri(const QString &query_file_uri) {
    m_query_file_uri = query_file_uri;
    m_query_file_uri_isSet = true;
}

bool OAIPrestoJob::is_query_file_uri_Set() const{
    return m_query_file_uri_isSet;
}

bool OAIPrestoJob::is_query_file_uri_Valid() const{
    return m_query_file_uri_isValid;
}

OAIQueryList OAIPrestoJob::getQueryList() const {
    return m_query_list;
}
void OAIPrestoJob::setQueryList(const OAIQueryList &query_list) {
    m_query_list = query_list;
    m_query_list_isSet = true;
}

bool OAIPrestoJob::is_query_list_Set() const{
    return m_query_list_isSet;
}

bool OAIPrestoJob::is_query_list_Valid() const{
    return m_query_list_isValid;
}

bool OAIPrestoJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_continue_on_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_file_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrestoJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
