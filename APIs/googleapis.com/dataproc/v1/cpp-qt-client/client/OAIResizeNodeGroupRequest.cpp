/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResizeNodeGroupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResizeNodeGroupRequest::OAIResizeNodeGroupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResizeNodeGroupRequest::OAIResizeNodeGroupRequest() {
    this->initializeModel();
}

OAIResizeNodeGroupRequest::~OAIResizeNodeGroupRequest() {}

void OAIResizeNodeGroupRequest::initializeModel() {

    m_graceful_decommission_timeout_isSet = false;
    m_graceful_decommission_timeout_isValid = false;

    m_parent_operation_id_isSet = false;
    m_parent_operation_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIResizeNodeGroupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResizeNodeGroupRequest::fromJsonObject(QJsonObject json) {

    m_graceful_decommission_timeout_isValid = ::OpenAPI::fromJsonValue(m_graceful_decommission_timeout, json[QString("gracefulDecommissionTimeout")]);
    m_graceful_decommission_timeout_isSet = !json[QString("gracefulDecommissionTimeout")].isNull() && m_graceful_decommission_timeout_isValid;

    m_parent_operation_id_isValid = ::OpenAPI::fromJsonValue(m_parent_operation_id, json[QString("parentOperationId")]);
    m_parent_operation_id_isSet = !json[QString("parentOperationId")].isNull() && m_parent_operation_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAIResizeNodeGroupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResizeNodeGroupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_graceful_decommission_timeout_isSet) {
        obj.insert(QString("gracefulDecommissionTimeout"), ::OpenAPI::toJsonValue(m_graceful_decommission_timeout));
    }
    if (m_parent_operation_id_isSet) {
        obj.insert(QString("parentOperationId"), ::OpenAPI::toJsonValue(m_parent_operation_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString OAIResizeNodeGroupRequest::getGracefulDecommissionTimeout() const {
    return m_graceful_decommission_timeout;
}
void OAIResizeNodeGroupRequest::setGracefulDecommissionTimeout(const QString &graceful_decommission_timeout) {
    m_graceful_decommission_timeout = graceful_decommission_timeout;
    m_graceful_decommission_timeout_isSet = true;
}

bool OAIResizeNodeGroupRequest::is_graceful_decommission_timeout_Set() const{
    return m_graceful_decommission_timeout_isSet;
}

bool OAIResizeNodeGroupRequest::is_graceful_decommission_timeout_Valid() const{
    return m_graceful_decommission_timeout_isValid;
}

QString OAIResizeNodeGroupRequest::getParentOperationId() const {
    return m_parent_operation_id;
}
void OAIResizeNodeGroupRequest::setParentOperationId(const QString &parent_operation_id) {
    m_parent_operation_id = parent_operation_id;
    m_parent_operation_id_isSet = true;
}

bool OAIResizeNodeGroupRequest::is_parent_operation_id_Set() const{
    return m_parent_operation_id_isSet;
}

bool OAIResizeNodeGroupRequest::is_parent_operation_id_Valid() const{
    return m_parent_operation_id_isValid;
}

QString OAIResizeNodeGroupRequest::getRequestId() const {
    return m_request_id;
}
void OAIResizeNodeGroupRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIResizeNodeGroupRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIResizeNodeGroupRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIResizeNodeGroupRequest::getSize() const {
    return m_size;
}
void OAIResizeNodeGroupRequest::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIResizeNodeGroupRequest::is_size_Set() const{
    return m_size_isSet;
}

bool OAIResizeNodeGroupRequest::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIResizeNodeGroupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_graceful_decommission_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResizeNodeGroupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
