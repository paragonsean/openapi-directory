/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISparkSqlBatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISparkSqlBatch::OAISparkSqlBatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISparkSqlBatch::OAISparkSqlBatch() {
    this->initializeModel();
}

OAISparkSqlBatch::~OAISparkSqlBatch() {}

void OAISparkSqlBatch::initializeModel() {

    m_jar_file_uris_isSet = false;
    m_jar_file_uris_isValid = false;

    m_query_file_uri_isSet = false;
    m_query_file_uri_isValid = false;

    m_query_variables_isSet = false;
    m_query_variables_isValid = false;
}

void OAISparkSqlBatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISparkSqlBatch::fromJsonObject(QJsonObject json) {

    m_jar_file_uris_isValid = ::OpenAPI::fromJsonValue(m_jar_file_uris, json[QString("jarFileUris")]);
    m_jar_file_uris_isSet = !json[QString("jarFileUris")].isNull() && m_jar_file_uris_isValid;

    m_query_file_uri_isValid = ::OpenAPI::fromJsonValue(m_query_file_uri, json[QString("queryFileUri")]);
    m_query_file_uri_isSet = !json[QString("queryFileUri")].isNull() && m_query_file_uri_isValid;

    m_query_variables_isValid = ::OpenAPI::fromJsonValue(m_query_variables, json[QString("queryVariables")]);
    m_query_variables_isSet = !json[QString("queryVariables")].isNull() && m_query_variables_isValid;
}

QString OAISparkSqlBatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISparkSqlBatch::asJsonObject() const {
    QJsonObject obj;
    if (m_jar_file_uris.size() > 0) {
        obj.insert(QString("jarFileUris"), ::OpenAPI::toJsonValue(m_jar_file_uris));
    }
    if (m_query_file_uri_isSet) {
        obj.insert(QString("queryFileUri"), ::OpenAPI::toJsonValue(m_query_file_uri));
    }
    if (m_query_variables.size() > 0) {
        obj.insert(QString("queryVariables"), ::OpenAPI::toJsonValue(m_query_variables));
    }
    return obj;
}

QList<QString> OAISparkSqlBatch::getJarFileUris() const {
    return m_jar_file_uris;
}
void OAISparkSqlBatch::setJarFileUris(const QList<QString> &jar_file_uris) {
    m_jar_file_uris = jar_file_uris;
    m_jar_file_uris_isSet = true;
}

bool OAISparkSqlBatch::is_jar_file_uris_Set() const{
    return m_jar_file_uris_isSet;
}

bool OAISparkSqlBatch::is_jar_file_uris_Valid() const{
    return m_jar_file_uris_isValid;
}

QString OAISparkSqlBatch::getQueryFileUri() const {
    return m_query_file_uri;
}
void OAISparkSqlBatch::setQueryFileUri(const QString &query_file_uri) {
    m_query_file_uri = query_file_uri;
    m_query_file_uri_isSet = true;
}

bool OAISparkSqlBatch::is_query_file_uri_Set() const{
    return m_query_file_uri_isSet;
}

bool OAISparkSqlBatch::is_query_file_uri_Valid() const{
    return m_query_file_uri_isValid;
}

QMap<QString, QString> OAISparkSqlBatch::getQueryVariables() const {
    return m_query_variables;
}
void OAISparkSqlBatch::setQueryVariables(const QMap<QString, QString> &query_variables) {
    m_query_variables = query_variables;
    m_query_variables_isSet = true;
}

bool OAISparkSqlBatch::is_query_variables_Set() const{
    return m_query_variables_isSet;
}

bool OAISparkSqlBatch::is_query_variables_Valid() const{
    return m_query_variables_isValid;
}

bool OAISparkSqlBatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_jar_file_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_file_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISparkSqlBatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
