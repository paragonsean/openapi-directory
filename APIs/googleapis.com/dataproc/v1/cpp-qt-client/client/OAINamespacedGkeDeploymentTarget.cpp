/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamespacedGkeDeploymentTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamespacedGkeDeploymentTarget::OAINamespacedGkeDeploymentTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamespacedGkeDeploymentTarget::OAINamespacedGkeDeploymentTarget() {
    this->initializeModel();
}

OAINamespacedGkeDeploymentTarget::~OAINamespacedGkeDeploymentTarget() {}

void OAINamespacedGkeDeploymentTarget::initializeModel() {

    m_cluster_namespace_isSet = false;
    m_cluster_namespace_isValid = false;

    m_target_gke_cluster_isSet = false;
    m_target_gke_cluster_isValid = false;
}

void OAINamespacedGkeDeploymentTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamespacedGkeDeploymentTarget::fromJsonObject(QJsonObject json) {

    m_cluster_namespace_isValid = ::OpenAPI::fromJsonValue(m_cluster_namespace, json[QString("clusterNamespace")]);
    m_cluster_namespace_isSet = !json[QString("clusterNamespace")].isNull() && m_cluster_namespace_isValid;

    m_target_gke_cluster_isValid = ::OpenAPI::fromJsonValue(m_target_gke_cluster, json[QString("targetGkeCluster")]);
    m_target_gke_cluster_isSet = !json[QString("targetGkeCluster")].isNull() && m_target_gke_cluster_isValid;
}

QString OAINamespacedGkeDeploymentTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamespacedGkeDeploymentTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_namespace_isSet) {
        obj.insert(QString("clusterNamespace"), ::OpenAPI::toJsonValue(m_cluster_namespace));
    }
    if (m_target_gke_cluster_isSet) {
        obj.insert(QString("targetGkeCluster"), ::OpenAPI::toJsonValue(m_target_gke_cluster));
    }
    return obj;
}

QString OAINamespacedGkeDeploymentTarget::getClusterNamespace() const {
    return m_cluster_namespace;
}
void OAINamespacedGkeDeploymentTarget::setClusterNamespace(const QString &cluster_namespace) {
    m_cluster_namespace = cluster_namespace;
    m_cluster_namespace_isSet = true;
}

bool OAINamespacedGkeDeploymentTarget::is_cluster_namespace_Set() const{
    return m_cluster_namespace_isSet;
}

bool OAINamespacedGkeDeploymentTarget::is_cluster_namespace_Valid() const{
    return m_cluster_namespace_isValid;
}

QString OAINamespacedGkeDeploymentTarget::getTargetGkeCluster() const {
    return m_target_gke_cluster;
}
void OAINamespacedGkeDeploymentTarget::setTargetGkeCluster(const QString &target_gke_cluster) {
    m_target_gke_cluster = target_gke_cluster;
    m_target_gke_cluster_isSet = true;
}

bool OAINamespacedGkeDeploymentTarget::is_target_gke_cluster_Set() const{
    return m_target_gke_cluster_isSet;
}

bool OAINamespacedGkeDeploymentTarget::is_target_gke_cluster_Valid() const{
    return m_target_gke_cluster_isValid;
}

bool OAINamespacedGkeDeploymentTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_gke_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamespacedGkeDeploymentTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
