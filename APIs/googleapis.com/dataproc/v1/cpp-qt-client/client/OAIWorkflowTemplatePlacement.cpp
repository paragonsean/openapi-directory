/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowTemplatePlacement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowTemplatePlacement::OAIWorkflowTemplatePlacement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowTemplatePlacement::OAIWorkflowTemplatePlacement() {
    this->initializeModel();
}

OAIWorkflowTemplatePlacement::~OAIWorkflowTemplatePlacement() {}

void OAIWorkflowTemplatePlacement::initializeModel() {

    m_cluster_selector_isSet = false;
    m_cluster_selector_isValid = false;

    m_managed_cluster_isSet = false;
    m_managed_cluster_isValid = false;
}

void OAIWorkflowTemplatePlacement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowTemplatePlacement::fromJsonObject(QJsonObject json) {

    m_cluster_selector_isValid = ::OpenAPI::fromJsonValue(m_cluster_selector, json[QString("clusterSelector")]);
    m_cluster_selector_isSet = !json[QString("clusterSelector")].isNull() && m_cluster_selector_isValid;

    m_managed_cluster_isValid = ::OpenAPI::fromJsonValue(m_managed_cluster, json[QString("managedCluster")]);
    m_managed_cluster_isSet = !json[QString("managedCluster")].isNull() && m_managed_cluster_isValid;
}

QString OAIWorkflowTemplatePlacement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowTemplatePlacement::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_selector.isSet()) {
        obj.insert(QString("clusterSelector"), ::OpenAPI::toJsonValue(m_cluster_selector));
    }
    if (m_managed_cluster.isSet()) {
        obj.insert(QString("managedCluster"), ::OpenAPI::toJsonValue(m_managed_cluster));
    }
    return obj;
}

OAIClusterSelector OAIWorkflowTemplatePlacement::getClusterSelector() const {
    return m_cluster_selector;
}
void OAIWorkflowTemplatePlacement::setClusterSelector(const OAIClusterSelector &cluster_selector) {
    m_cluster_selector = cluster_selector;
    m_cluster_selector_isSet = true;
}

bool OAIWorkflowTemplatePlacement::is_cluster_selector_Set() const{
    return m_cluster_selector_isSet;
}

bool OAIWorkflowTemplatePlacement::is_cluster_selector_Valid() const{
    return m_cluster_selector_isValid;
}

OAIManagedCluster OAIWorkflowTemplatePlacement::getManagedCluster() const {
    return m_managed_cluster;
}
void OAIWorkflowTemplatePlacement::setManagedCluster(const OAIManagedCluster &managed_cluster) {
    m_managed_cluster = managed_cluster;
    m_managed_cluster_isSet = true;
}

bool OAIWorkflowTemplatePlacement::is_managed_cluster_Set() const{
    return m_managed_cluster_isSet;
}

bool OAIWorkflowTemplatePlacement::is_managed_cluster_Valid() const{
    return m_managed_cluster_isValid;
}

bool OAIWorkflowTemplatePlacement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowTemplatePlacement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
