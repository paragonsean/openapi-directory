/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepairClusterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepairClusterRequest::OAIRepairClusterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepairClusterRequest::OAIRepairClusterRequest() {
    this->initializeModel();
}

OAIRepairClusterRequest::~OAIRepairClusterRequest() {}

void OAIRepairClusterRequest::initializeModel() {

    m_cluster_uuid_isSet = false;
    m_cluster_uuid_isValid = false;

    m_graceful_decommission_timeout_isSet = false;
    m_graceful_decommission_timeout_isValid = false;

    m_node_pools_isSet = false;
    m_node_pools_isValid = false;

    m_parent_operation_id_isSet = false;
    m_parent_operation_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIRepairClusterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepairClusterRequest::fromJsonObject(QJsonObject json) {

    m_cluster_uuid_isValid = ::OpenAPI::fromJsonValue(m_cluster_uuid, json[QString("clusterUuid")]);
    m_cluster_uuid_isSet = !json[QString("clusterUuid")].isNull() && m_cluster_uuid_isValid;

    m_graceful_decommission_timeout_isValid = ::OpenAPI::fromJsonValue(m_graceful_decommission_timeout, json[QString("gracefulDecommissionTimeout")]);
    m_graceful_decommission_timeout_isSet = !json[QString("gracefulDecommissionTimeout")].isNull() && m_graceful_decommission_timeout_isValid;

    m_node_pools_isValid = ::OpenAPI::fromJsonValue(m_node_pools, json[QString("nodePools")]);
    m_node_pools_isSet = !json[QString("nodePools")].isNull() && m_node_pools_isValid;

    m_parent_operation_id_isValid = ::OpenAPI::fromJsonValue(m_parent_operation_id, json[QString("parentOperationId")]);
    m_parent_operation_id_isSet = !json[QString("parentOperationId")].isNull() && m_parent_operation_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAIRepairClusterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepairClusterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_uuid_isSet) {
        obj.insert(QString("clusterUuid"), ::OpenAPI::toJsonValue(m_cluster_uuid));
    }
    if (m_graceful_decommission_timeout_isSet) {
        obj.insert(QString("gracefulDecommissionTimeout"), ::OpenAPI::toJsonValue(m_graceful_decommission_timeout));
    }
    if (m_node_pools.size() > 0) {
        obj.insert(QString("nodePools"), ::OpenAPI::toJsonValue(m_node_pools));
    }
    if (m_parent_operation_id_isSet) {
        obj.insert(QString("parentOperationId"), ::OpenAPI::toJsonValue(m_parent_operation_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QString OAIRepairClusterRequest::getClusterUuid() const {
    return m_cluster_uuid;
}
void OAIRepairClusterRequest::setClusterUuid(const QString &cluster_uuid) {
    m_cluster_uuid = cluster_uuid;
    m_cluster_uuid_isSet = true;
}

bool OAIRepairClusterRequest::is_cluster_uuid_Set() const{
    return m_cluster_uuid_isSet;
}

bool OAIRepairClusterRequest::is_cluster_uuid_Valid() const{
    return m_cluster_uuid_isValid;
}

QString OAIRepairClusterRequest::getGracefulDecommissionTimeout() const {
    return m_graceful_decommission_timeout;
}
void OAIRepairClusterRequest::setGracefulDecommissionTimeout(const QString &graceful_decommission_timeout) {
    m_graceful_decommission_timeout = graceful_decommission_timeout;
    m_graceful_decommission_timeout_isSet = true;
}

bool OAIRepairClusterRequest::is_graceful_decommission_timeout_Set() const{
    return m_graceful_decommission_timeout_isSet;
}

bool OAIRepairClusterRequest::is_graceful_decommission_timeout_Valid() const{
    return m_graceful_decommission_timeout_isValid;
}

QList<OAINodePool> OAIRepairClusterRequest::getNodePools() const {
    return m_node_pools;
}
void OAIRepairClusterRequest::setNodePools(const QList<OAINodePool> &node_pools) {
    m_node_pools = node_pools;
    m_node_pools_isSet = true;
}

bool OAIRepairClusterRequest::is_node_pools_Set() const{
    return m_node_pools_isSet;
}

bool OAIRepairClusterRequest::is_node_pools_Valid() const{
    return m_node_pools_isValid;
}

QString OAIRepairClusterRequest::getParentOperationId() const {
    return m_parent_operation_id;
}
void OAIRepairClusterRequest::setParentOperationId(const QString &parent_operation_id) {
    m_parent_operation_id = parent_operation_id;
    m_parent_operation_id_isSet = true;
}

bool OAIRepairClusterRequest::is_parent_operation_id_Set() const{
    return m_parent_operation_id_isSet;
}

bool OAIRepairClusterRequest::is_parent_operation_id_Valid() const{
    return m_parent_operation_id_isValid;
}

QString OAIRepairClusterRequest::getRequestId() const {
    return m_request_id;
}
void OAIRepairClusterRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIRepairClusterRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIRepairClusterRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIRepairClusterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_graceful_decommission_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepairClusterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
