/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKubernetesClusterConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKubernetesClusterConfig::OAIKubernetesClusterConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKubernetesClusterConfig::OAIKubernetesClusterConfig() {
    this->initializeModel();
}

OAIKubernetesClusterConfig::~OAIKubernetesClusterConfig() {}

void OAIKubernetesClusterConfig::initializeModel() {

    m_gke_cluster_config_isSet = false;
    m_gke_cluster_config_isValid = false;

    m_kubernetes_namespace_isSet = false;
    m_kubernetes_namespace_isValid = false;

    m_kubernetes_software_config_isSet = false;
    m_kubernetes_software_config_isValid = false;
}

void OAIKubernetesClusterConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKubernetesClusterConfig::fromJsonObject(QJsonObject json) {

    m_gke_cluster_config_isValid = ::OpenAPI::fromJsonValue(m_gke_cluster_config, json[QString("gkeClusterConfig")]);
    m_gke_cluster_config_isSet = !json[QString("gkeClusterConfig")].isNull() && m_gke_cluster_config_isValid;

    m_kubernetes_namespace_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_namespace, json[QString("kubernetesNamespace")]);
    m_kubernetes_namespace_isSet = !json[QString("kubernetesNamespace")].isNull() && m_kubernetes_namespace_isValid;

    m_kubernetes_software_config_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_software_config, json[QString("kubernetesSoftwareConfig")]);
    m_kubernetes_software_config_isSet = !json[QString("kubernetesSoftwareConfig")].isNull() && m_kubernetes_software_config_isValid;
}

QString OAIKubernetesClusterConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKubernetesClusterConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_gke_cluster_config.isSet()) {
        obj.insert(QString("gkeClusterConfig"), ::OpenAPI::toJsonValue(m_gke_cluster_config));
    }
    if (m_kubernetes_namespace_isSet) {
        obj.insert(QString("kubernetesNamespace"), ::OpenAPI::toJsonValue(m_kubernetes_namespace));
    }
    if (m_kubernetes_software_config.isSet()) {
        obj.insert(QString("kubernetesSoftwareConfig"), ::OpenAPI::toJsonValue(m_kubernetes_software_config));
    }
    return obj;
}

OAIGkeClusterConfig OAIKubernetesClusterConfig::getGkeClusterConfig() const {
    return m_gke_cluster_config;
}
void OAIKubernetesClusterConfig::setGkeClusterConfig(const OAIGkeClusterConfig &gke_cluster_config) {
    m_gke_cluster_config = gke_cluster_config;
    m_gke_cluster_config_isSet = true;
}

bool OAIKubernetesClusterConfig::is_gke_cluster_config_Set() const{
    return m_gke_cluster_config_isSet;
}

bool OAIKubernetesClusterConfig::is_gke_cluster_config_Valid() const{
    return m_gke_cluster_config_isValid;
}

QString OAIKubernetesClusterConfig::getKubernetesNamespace() const {
    return m_kubernetes_namespace;
}
void OAIKubernetesClusterConfig::setKubernetesNamespace(const QString &kubernetes_namespace) {
    m_kubernetes_namespace = kubernetes_namespace;
    m_kubernetes_namespace_isSet = true;
}

bool OAIKubernetesClusterConfig::is_kubernetes_namespace_Set() const{
    return m_kubernetes_namespace_isSet;
}

bool OAIKubernetesClusterConfig::is_kubernetes_namespace_Valid() const{
    return m_kubernetes_namespace_isValid;
}

OAIKubernetesSoftwareConfig OAIKubernetesClusterConfig::getKubernetesSoftwareConfig() const {
    return m_kubernetes_software_config;
}
void OAIKubernetesClusterConfig::setKubernetesSoftwareConfig(const OAIKubernetesSoftwareConfig &kubernetes_software_config) {
    m_kubernetes_software_config = kubernetes_software_config;
    m_kubernetes_software_config_isSet = true;
}

bool OAIKubernetesClusterConfig::is_kubernetes_software_config_Set() const{
    return m_kubernetes_software_config_isSet;
}

bool OAIKubernetesClusterConfig::is_kubernetes_software_config_Valid() const{
    return m_kubernetes_software_config_isValid;
}

bool OAIKubernetesClusterConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gke_cluster_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubernetes_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubernetes_software_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKubernetesClusterConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
