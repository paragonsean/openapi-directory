/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchOperationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchOperationMetadata::OAIBatchOperationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchOperationMetadata::OAIBatchOperationMetadata() {
    this->initializeModel();
}

OAIBatchOperationMetadata::~OAIBatchOperationMetadata() {}

void OAIBatchOperationMetadata::initializeModel() {

    m_batch_isSet = false;
    m_batch_isValid = false;

    m_batch_uuid_isSet = false;
    m_batch_uuid_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_done_time_isSet = false;
    m_done_time_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIBatchOperationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchOperationMetadata::fromJsonObject(QJsonObject json) {

    m_batch_isValid = ::OpenAPI::fromJsonValue(m_batch, json[QString("batch")]);
    m_batch_isSet = !json[QString("batch")].isNull() && m_batch_isValid;

    m_batch_uuid_isValid = ::OpenAPI::fromJsonValue(m_batch_uuid, json[QString("batchUuid")]);
    m_batch_uuid_isSet = !json[QString("batchUuid")].isNull() && m_batch_uuid_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_done_time_isValid = ::OpenAPI::fromJsonValue(m_done_time, json[QString("doneTime")]);
    m_done_time_isSet = !json[QString("doneTime")].isNull() && m_done_time_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIBatchOperationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchOperationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_isSet) {
        obj.insert(QString("batch"), ::OpenAPI::toJsonValue(m_batch));
    }
    if (m_batch_uuid_isSet) {
        obj.insert(QString("batchUuid"), ::OpenAPI::toJsonValue(m_batch_uuid));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_done_time_isSet) {
        obj.insert(QString("doneTime"), ::OpenAPI::toJsonValue(m_done_time));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QString OAIBatchOperationMetadata::getBatch() const {
    return m_batch;
}
void OAIBatchOperationMetadata::setBatch(const QString &batch) {
    m_batch = batch;
    m_batch_isSet = true;
}

bool OAIBatchOperationMetadata::is_batch_Set() const{
    return m_batch_isSet;
}

bool OAIBatchOperationMetadata::is_batch_Valid() const{
    return m_batch_isValid;
}

QString OAIBatchOperationMetadata::getBatchUuid() const {
    return m_batch_uuid;
}
void OAIBatchOperationMetadata::setBatchUuid(const QString &batch_uuid) {
    m_batch_uuid = batch_uuid;
    m_batch_uuid_isSet = true;
}

bool OAIBatchOperationMetadata::is_batch_uuid_Set() const{
    return m_batch_uuid_isSet;
}

bool OAIBatchOperationMetadata::is_batch_uuid_Valid() const{
    return m_batch_uuid_isValid;
}

QString OAIBatchOperationMetadata::getCreateTime() const {
    return m_create_time;
}
void OAIBatchOperationMetadata::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIBatchOperationMetadata::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIBatchOperationMetadata::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIBatchOperationMetadata::getDescription() const {
    return m_description;
}
void OAIBatchOperationMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBatchOperationMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBatchOperationMetadata::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBatchOperationMetadata::getDoneTime() const {
    return m_done_time;
}
void OAIBatchOperationMetadata::setDoneTime(const QString &done_time) {
    m_done_time = done_time;
    m_done_time_isSet = true;
}

bool OAIBatchOperationMetadata::is_done_time_Set() const{
    return m_done_time_isSet;
}

bool OAIBatchOperationMetadata::is_done_time_Valid() const{
    return m_done_time_isValid;
}

QMap<QString, QString> OAIBatchOperationMetadata::getLabels() const {
    return m_labels;
}
void OAIBatchOperationMetadata::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIBatchOperationMetadata::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIBatchOperationMetadata::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIBatchOperationMetadata::getOperationType() const {
    return m_operation_type;
}
void OAIBatchOperationMetadata::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAIBatchOperationMetadata::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAIBatchOperationMetadata::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

QList<QString> OAIBatchOperationMetadata::getWarnings() const {
    return m_warnings;
}
void OAIBatchOperationMetadata::setWarnings(const QList<QString> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIBatchOperationMetadata::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIBatchOperationMetadata::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIBatchOperationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_done_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchOperationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
