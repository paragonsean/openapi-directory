/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuntimeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuntimeInfo::OAIRuntimeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuntimeInfo::OAIRuntimeInfo() {
    this->initializeModel();
}

OAIRuntimeInfo::~OAIRuntimeInfo() {}

void OAIRuntimeInfo::initializeModel() {

    m_approximate_usage_isSet = false;
    m_approximate_usage_isValid = false;

    m_current_usage_isSet = false;
    m_current_usage_isValid = false;

    m_diagnostic_output_uri_isSet = false;
    m_diagnostic_output_uri_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_output_uri_isSet = false;
    m_output_uri_isValid = false;
}

void OAIRuntimeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuntimeInfo::fromJsonObject(QJsonObject json) {

    m_approximate_usage_isValid = ::OpenAPI::fromJsonValue(m_approximate_usage, json[QString("approximateUsage")]);
    m_approximate_usage_isSet = !json[QString("approximateUsage")].isNull() && m_approximate_usage_isValid;

    m_current_usage_isValid = ::OpenAPI::fromJsonValue(m_current_usage, json[QString("currentUsage")]);
    m_current_usage_isSet = !json[QString("currentUsage")].isNull() && m_current_usage_isValid;

    m_diagnostic_output_uri_isValid = ::OpenAPI::fromJsonValue(m_diagnostic_output_uri, json[QString("diagnosticOutputUri")]);
    m_diagnostic_output_uri_isSet = !json[QString("diagnosticOutputUri")].isNull() && m_diagnostic_output_uri_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_output_uri_isValid = ::OpenAPI::fromJsonValue(m_output_uri, json[QString("outputUri")]);
    m_output_uri_isSet = !json[QString("outputUri")].isNull() && m_output_uri_isValid;
}

QString OAIRuntimeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuntimeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_approximate_usage.isSet()) {
        obj.insert(QString("approximateUsage"), ::OpenAPI::toJsonValue(m_approximate_usage));
    }
    if (m_current_usage.isSet()) {
        obj.insert(QString("currentUsage"), ::OpenAPI::toJsonValue(m_current_usage));
    }
    if (m_diagnostic_output_uri_isSet) {
        obj.insert(QString("diagnosticOutputUri"), ::OpenAPI::toJsonValue(m_diagnostic_output_uri));
    }
    if (m_endpoints.size() > 0) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_output_uri_isSet) {
        obj.insert(QString("outputUri"), ::OpenAPI::toJsonValue(m_output_uri));
    }
    return obj;
}

OAIUsageMetrics OAIRuntimeInfo::getApproximateUsage() const {
    return m_approximate_usage;
}
void OAIRuntimeInfo::setApproximateUsage(const OAIUsageMetrics &approximate_usage) {
    m_approximate_usage = approximate_usage;
    m_approximate_usage_isSet = true;
}

bool OAIRuntimeInfo::is_approximate_usage_Set() const{
    return m_approximate_usage_isSet;
}

bool OAIRuntimeInfo::is_approximate_usage_Valid() const{
    return m_approximate_usage_isValid;
}

OAIUsageSnapshot OAIRuntimeInfo::getCurrentUsage() const {
    return m_current_usage;
}
void OAIRuntimeInfo::setCurrentUsage(const OAIUsageSnapshot &current_usage) {
    m_current_usage = current_usage;
    m_current_usage_isSet = true;
}

bool OAIRuntimeInfo::is_current_usage_Set() const{
    return m_current_usage_isSet;
}

bool OAIRuntimeInfo::is_current_usage_Valid() const{
    return m_current_usage_isValid;
}

QString OAIRuntimeInfo::getDiagnosticOutputUri() const {
    return m_diagnostic_output_uri;
}
void OAIRuntimeInfo::setDiagnosticOutputUri(const QString &diagnostic_output_uri) {
    m_diagnostic_output_uri = diagnostic_output_uri;
    m_diagnostic_output_uri_isSet = true;
}

bool OAIRuntimeInfo::is_diagnostic_output_uri_Set() const{
    return m_diagnostic_output_uri_isSet;
}

bool OAIRuntimeInfo::is_diagnostic_output_uri_Valid() const{
    return m_diagnostic_output_uri_isValid;
}

QMap<QString, QString> OAIRuntimeInfo::getEndpoints() const {
    return m_endpoints;
}
void OAIRuntimeInfo::setEndpoints(const QMap<QString, QString> &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIRuntimeInfo::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIRuntimeInfo::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QString OAIRuntimeInfo::getOutputUri() const {
    return m_output_uri;
}
void OAIRuntimeInfo::setOutputUri(const QString &output_uri) {
    m_output_uri = output_uri;
    m_output_uri_isSet = true;
}

bool OAIRuntimeInfo::is_output_uri_Set() const{
    return m_output_uri_isSet;
}

bool OAIRuntimeInfo::is_output_uri_Valid() const{
    return m_output_uri_isValid;
}

bool OAIRuntimeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approximate_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_diagnostic_output_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuntimeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
