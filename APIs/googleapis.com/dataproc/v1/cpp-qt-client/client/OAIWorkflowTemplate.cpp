/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowTemplate::OAIWorkflowTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowTemplate::OAIWorkflowTemplate() {
    this->initializeModel();
}

OAIWorkflowTemplate::~OAIWorkflowTemplate() {}

void OAIWorkflowTemplate::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_dag_timeout_isSet = false;
    m_dag_timeout_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_jobs_isSet = false;
    m_jobs_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_placement_isSet = false;
    m_placement_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIWorkflowTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowTemplate::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_dag_timeout_isValid = ::OpenAPI::fromJsonValue(m_dag_timeout, json[QString("dagTimeout")]);
    m_dag_timeout_isSet = !json[QString("dagTimeout")].isNull() && m_dag_timeout_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_jobs_isValid = ::OpenAPI::fromJsonValue(m_jobs, json[QString("jobs")]);
    m_jobs_isSet = !json[QString("jobs")].isNull() && m_jobs_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_placement_isValid = ::OpenAPI::fromJsonValue(m_placement, json[QString("placement")]);
    m_placement_isSet = !json[QString("placement")].isNull() && m_placement_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIWorkflowTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_dag_timeout_isSet) {
        obj.insert(QString("dagTimeout"), ::OpenAPI::toJsonValue(m_dag_timeout));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_jobs.size() > 0) {
        obj.insert(QString("jobs"), ::OpenAPI::toJsonValue(m_jobs));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_placement.isSet()) {
        obj.insert(QString("placement"), ::OpenAPI::toJsonValue(m_placement));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIWorkflowTemplate::getCreateTime() const {
    return m_create_time;
}
void OAIWorkflowTemplate::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIWorkflowTemplate::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIWorkflowTemplate::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIWorkflowTemplate::getDagTimeout() const {
    return m_dag_timeout;
}
void OAIWorkflowTemplate::setDagTimeout(const QString &dag_timeout) {
    m_dag_timeout = dag_timeout;
    m_dag_timeout_isSet = true;
}

bool OAIWorkflowTemplate::is_dag_timeout_Set() const{
    return m_dag_timeout_isSet;
}

bool OAIWorkflowTemplate::is_dag_timeout_Valid() const{
    return m_dag_timeout_isValid;
}

OAIGoogleCloudDataprocV1WorkflowTemplateEncryptionConfig OAIWorkflowTemplate::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIWorkflowTemplate::setEncryptionConfig(const OAIGoogleCloudDataprocV1WorkflowTemplateEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIWorkflowTemplate::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIWorkflowTemplate::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QString OAIWorkflowTemplate::getId() const {
    return m_id;
}
void OAIWorkflowTemplate::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWorkflowTemplate::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWorkflowTemplate::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIOrderedJob> OAIWorkflowTemplate::getJobs() const {
    return m_jobs;
}
void OAIWorkflowTemplate::setJobs(const QList<OAIOrderedJob> &jobs) {
    m_jobs = jobs;
    m_jobs_isSet = true;
}

bool OAIWorkflowTemplate::is_jobs_Set() const{
    return m_jobs_isSet;
}

bool OAIWorkflowTemplate::is_jobs_Valid() const{
    return m_jobs_isValid;
}

QMap<QString, QString> OAIWorkflowTemplate::getLabels() const {
    return m_labels;
}
void OAIWorkflowTemplate::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIWorkflowTemplate::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIWorkflowTemplate::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIWorkflowTemplate::getName() const {
    return m_name;
}
void OAIWorkflowTemplate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkflowTemplate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkflowTemplate::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAITemplateParameter> OAIWorkflowTemplate::getParameters() const {
    return m_parameters;
}
void OAIWorkflowTemplate::setParameters(const QList<OAITemplateParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIWorkflowTemplate::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIWorkflowTemplate::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIWorkflowTemplatePlacement OAIWorkflowTemplate::getPlacement() const {
    return m_placement;
}
void OAIWorkflowTemplate::setPlacement(const OAIWorkflowTemplatePlacement &placement) {
    m_placement = placement;
    m_placement_isSet = true;
}

bool OAIWorkflowTemplate::is_placement_Set() const{
    return m_placement_isSet;
}

bool OAIWorkflowTemplate::is_placement_Valid() const{
    return m_placement_isValid;
}

QString OAIWorkflowTemplate::getUpdateTime() const {
    return m_update_time;
}
void OAIWorkflowTemplate::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIWorkflowTemplate::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIWorkflowTemplate::is_update_time_Valid() const{
    return m_update_time_isValid;
}

qint32 OAIWorkflowTemplate::getVersion() const {
    return m_version;
}
void OAIWorkflowTemplate::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIWorkflowTemplate::is_version_Set() const{
    return m_version_isSet;
}

bool OAIWorkflowTemplate::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIWorkflowTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dag_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
