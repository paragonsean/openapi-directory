/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstanceGroupConfig.h
 *
 * The config settings for Compute Engine resources in an instance group, such as a master or worker group.
 */

#ifndef OAIInstanceGroupConfig_H
#define OAIInstanceGroupConfig_H

#include <QJsonObject>

#include "OAIAcceleratorConfig.h"
#include "OAIDiskConfig.h"
#include "OAIInstanceFlexibilityPolicy.h"
#include "OAIInstanceReference.h"
#include "OAIManagedGroupConfig.h"
#include "OAIStartupConfig.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAcceleratorConfig;
class OAIDiskConfig;
class OAIInstanceFlexibilityPolicy;
class OAIInstanceReference;
class OAIManagedGroupConfig;
class OAIStartupConfig;

class OAIInstanceGroupConfig : public OAIObject {
public:
    OAIInstanceGroupConfig();
    OAIInstanceGroupConfig(QString json);
    ~OAIInstanceGroupConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAcceleratorConfig> getAccelerators() const;
    void setAccelerators(const QList<OAIAcceleratorConfig> &accelerators);
    bool is_accelerators_Set() const;
    bool is_accelerators_Valid() const;

    OAIDiskConfig getDiskConfig() const;
    void setDiskConfig(const OAIDiskConfig &disk_config);
    bool is_disk_config_Set() const;
    bool is_disk_config_Valid() const;

    QString getImageUri() const;
    void setImageUri(const QString &image_uri);
    bool is_image_uri_Set() const;
    bool is_image_uri_Valid() const;

    OAIInstanceFlexibilityPolicy getInstanceFlexibilityPolicy() const;
    void setInstanceFlexibilityPolicy(const OAIInstanceFlexibilityPolicy &instance_flexibility_policy);
    bool is_instance_flexibility_policy_Set() const;
    bool is_instance_flexibility_policy_Valid() const;

    QList<QString> getInstanceNames() const;
    void setInstanceNames(const QList<QString> &instance_names);
    bool is_instance_names_Set() const;
    bool is_instance_names_Valid() const;

    QList<OAIInstanceReference> getInstanceReferences() const;
    void setInstanceReferences(const QList<OAIInstanceReference> &instance_references);
    bool is_instance_references_Set() const;
    bool is_instance_references_Valid() const;

    bool isIsPreemptible() const;
    void setIsPreemptible(const bool &is_preemptible);
    bool is_is_preemptible_Set() const;
    bool is_is_preemptible_Valid() const;

    QString getMachineTypeUri() const;
    void setMachineTypeUri(const QString &machine_type_uri);
    bool is_machine_type_uri_Set() const;
    bool is_machine_type_uri_Valid() const;

    OAIManagedGroupConfig getManagedGroupConfig() const;
    void setManagedGroupConfig(const OAIManagedGroupConfig &managed_group_config);
    bool is_managed_group_config_Set() const;
    bool is_managed_group_config_Valid() const;

    QString getMinCpuPlatform() const;
    void setMinCpuPlatform(const QString &min_cpu_platform);
    bool is_min_cpu_platform_Set() const;
    bool is_min_cpu_platform_Valid() const;

    qint32 getMinNumInstances() const;
    void setMinNumInstances(const qint32 &min_num_instances);
    bool is_min_num_instances_Set() const;
    bool is_min_num_instances_Valid() const;

    qint32 getNumInstances() const;
    void setNumInstances(const qint32 &num_instances);
    bool is_num_instances_Set() const;
    bool is_num_instances_Valid() const;

    QString getPreemptibility() const;
    void setPreemptibility(const QString &preemptibility);
    bool is_preemptibility_Set() const;
    bool is_preemptibility_Valid() const;

    OAIStartupConfig getStartupConfig() const;
    void setStartupConfig(const OAIStartupConfig &startup_config);
    bool is_startup_config_Set() const;
    bool is_startup_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAcceleratorConfig> m_accelerators;
    bool m_accelerators_isSet;
    bool m_accelerators_isValid;

    OAIDiskConfig m_disk_config;
    bool m_disk_config_isSet;
    bool m_disk_config_isValid;

    QString m_image_uri;
    bool m_image_uri_isSet;
    bool m_image_uri_isValid;

    OAIInstanceFlexibilityPolicy m_instance_flexibility_policy;
    bool m_instance_flexibility_policy_isSet;
    bool m_instance_flexibility_policy_isValid;

    QList<QString> m_instance_names;
    bool m_instance_names_isSet;
    bool m_instance_names_isValid;

    QList<OAIInstanceReference> m_instance_references;
    bool m_instance_references_isSet;
    bool m_instance_references_isValid;

    bool m_is_preemptible;
    bool m_is_preemptible_isSet;
    bool m_is_preemptible_isValid;

    QString m_machine_type_uri;
    bool m_machine_type_uri_isSet;
    bool m_machine_type_uri_isValid;

    OAIManagedGroupConfig m_managed_group_config;
    bool m_managed_group_config_isSet;
    bool m_managed_group_config_isValid;

    QString m_min_cpu_platform;
    bool m_min_cpu_platform_isSet;
    bool m_min_cpu_platform_isValid;

    qint32 m_min_num_instances;
    bool m_min_num_instances_isSet;
    bool m_min_num_instances_isValid;

    qint32 m_num_instances;
    bool m_num_instances_isSet;
    bool m_num_instances_isValid;

    QString m_preemptibility;
    bool m_preemptibility_isSet;
    bool m_preemptibility_isValid;

    OAIStartupConfig m_startup_config;
    bool m_startup_config_isSet;
    bool m_startup_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstanceGroupConfig)

#endif // OAIInstanceGroupConfig_H
