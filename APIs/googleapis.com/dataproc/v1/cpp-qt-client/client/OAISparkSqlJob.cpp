/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISparkSqlJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISparkSqlJob::OAISparkSqlJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISparkSqlJob::OAISparkSqlJob() {
    this->initializeModel();
}

OAISparkSqlJob::~OAISparkSqlJob() {}

void OAISparkSqlJob::initializeModel() {

    m_jar_file_uris_isSet = false;
    m_jar_file_uris_isValid = false;

    m_logging_config_isSet = false;
    m_logging_config_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_query_file_uri_isSet = false;
    m_query_file_uri_isValid = false;

    m_query_list_isSet = false;
    m_query_list_isValid = false;

    m_script_variables_isSet = false;
    m_script_variables_isValid = false;
}

void OAISparkSqlJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISparkSqlJob::fromJsonObject(QJsonObject json) {

    m_jar_file_uris_isValid = ::OpenAPI::fromJsonValue(m_jar_file_uris, json[QString("jarFileUris")]);
    m_jar_file_uris_isSet = !json[QString("jarFileUris")].isNull() && m_jar_file_uris_isValid;

    m_logging_config_isValid = ::OpenAPI::fromJsonValue(m_logging_config, json[QString("loggingConfig")]);
    m_logging_config_isSet = !json[QString("loggingConfig")].isNull() && m_logging_config_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_query_file_uri_isValid = ::OpenAPI::fromJsonValue(m_query_file_uri, json[QString("queryFileUri")]);
    m_query_file_uri_isSet = !json[QString("queryFileUri")].isNull() && m_query_file_uri_isValid;

    m_query_list_isValid = ::OpenAPI::fromJsonValue(m_query_list, json[QString("queryList")]);
    m_query_list_isSet = !json[QString("queryList")].isNull() && m_query_list_isValid;

    m_script_variables_isValid = ::OpenAPI::fromJsonValue(m_script_variables, json[QString("scriptVariables")]);
    m_script_variables_isSet = !json[QString("scriptVariables")].isNull() && m_script_variables_isValid;
}

QString OAISparkSqlJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISparkSqlJob::asJsonObject() const {
    QJsonObject obj;
    if (m_jar_file_uris.size() > 0) {
        obj.insert(QString("jarFileUris"), ::OpenAPI::toJsonValue(m_jar_file_uris));
    }
    if (m_logging_config.isSet()) {
        obj.insert(QString("loggingConfig"), ::OpenAPI::toJsonValue(m_logging_config));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_query_file_uri_isSet) {
        obj.insert(QString("queryFileUri"), ::OpenAPI::toJsonValue(m_query_file_uri));
    }
    if (m_query_list.isSet()) {
        obj.insert(QString("queryList"), ::OpenAPI::toJsonValue(m_query_list));
    }
    if (m_script_variables.size() > 0) {
        obj.insert(QString("scriptVariables"), ::OpenAPI::toJsonValue(m_script_variables));
    }
    return obj;
}

QList<QString> OAISparkSqlJob::getJarFileUris() const {
    return m_jar_file_uris;
}
void OAISparkSqlJob::setJarFileUris(const QList<QString> &jar_file_uris) {
    m_jar_file_uris = jar_file_uris;
    m_jar_file_uris_isSet = true;
}

bool OAISparkSqlJob::is_jar_file_uris_Set() const{
    return m_jar_file_uris_isSet;
}

bool OAISparkSqlJob::is_jar_file_uris_Valid() const{
    return m_jar_file_uris_isValid;
}

OAILoggingConfig OAISparkSqlJob::getLoggingConfig() const {
    return m_logging_config;
}
void OAISparkSqlJob::setLoggingConfig(const OAILoggingConfig &logging_config) {
    m_logging_config = logging_config;
    m_logging_config_isSet = true;
}

bool OAISparkSqlJob::is_logging_config_Set() const{
    return m_logging_config_isSet;
}

bool OAISparkSqlJob::is_logging_config_Valid() const{
    return m_logging_config_isValid;
}

QMap<QString, QString> OAISparkSqlJob::getProperties() const {
    return m_properties;
}
void OAISparkSqlJob::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISparkSqlJob::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISparkSqlJob::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAISparkSqlJob::getQueryFileUri() const {
    return m_query_file_uri;
}
void OAISparkSqlJob::setQueryFileUri(const QString &query_file_uri) {
    m_query_file_uri = query_file_uri;
    m_query_file_uri_isSet = true;
}

bool OAISparkSqlJob::is_query_file_uri_Set() const{
    return m_query_file_uri_isSet;
}

bool OAISparkSqlJob::is_query_file_uri_Valid() const{
    return m_query_file_uri_isValid;
}

OAIQueryList OAISparkSqlJob::getQueryList() const {
    return m_query_list;
}
void OAISparkSqlJob::setQueryList(const OAIQueryList &query_list) {
    m_query_list = query_list;
    m_query_list_isSet = true;
}

bool OAISparkSqlJob::is_query_list_Set() const{
    return m_query_list_isSet;
}

bool OAISparkSqlJob::is_query_list_Valid() const{
    return m_query_list_isValid;
}

QMap<QString, QString> OAISparkSqlJob::getScriptVariables() const {
    return m_script_variables;
}
void OAISparkSqlJob::setScriptVariables(const QMap<QString, QString> &script_variables) {
    m_script_variables = script_variables;
    m_script_variables_isSet = true;
}

bool OAISparkSqlJob::is_script_variables_Set() const{
    return m_script_variables_isSet;
}

bool OAISparkSqlJob::is_script_variables_Valid() const{
    return m_script_variables_isValid;
}

bool OAISparkSqlJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_jar_file_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_file_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISparkSqlJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
