/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoscalingPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoscalingPolicy::OAIAutoscalingPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoscalingPolicy::OAIAutoscalingPolicy() {
    this->initializeModel();
}

OAIAutoscalingPolicy::~OAIAutoscalingPolicy() {}

void OAIAutoscalingPolicy::initializeModel() {

    m_basic_algorithm_isSet = false;
    m_basic_algorithm_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_secondary_worker_config_isSet = false;
    m_secondary_worker_config_isValid = false;

    m_worker_config_isSet = false;
    m_worker_config_isValid = false;
}

void OAIAutoscalingPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoscalingPolicy::fromJsonObject(QJsonObject json) {

    m_basic_algorithm_isValid = ::OpenAPI::fromJsonValue(m_basic_algorithm, json[QString("basicAlgorithm")]);
    m_basic_algorithm_isSet = !json[QString("basicAlgorithm")].isNull() && m_basic_algorithm_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_secondary_worker_config_isValid = ::OpenAPI::fromJsonValue(m_secondary_worker_config, json[QString("secondaryWorkerConfig")]);
    m_secondary_worker_config_isSet = !json[QString("secondaryWorkerConfig")].isNull() && m_secondary_worker_config_isValid;

    m_worker_config_isValid = ::OpenAPI::fromJsonValue(m_worker_config, json[QString("workerConfig")]);
    m_worker_config_isSet = !json[QString("workerConfig")].isNull() && m_worker_config_isValid;
}

QString OAIAutoscalingPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoscalingPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_basic_algorithm.isSet()) {
        obj.insert(QString("basicAlgorithm"), ::OpenAPI::toJsonValue(m_basic_algorithm));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_secondary_worker_config.isSet()) {
        obj.insert(QString("secondaryWorkerConfig"), ::OpenAPI::toJsonValue(m_secondary_worker_config));
    }
    if (m_worker_config.isSet()) {
        obj.insert(QString("workerConfig"), ::OpenAPI::toJsonValue(m_worker_config));
    }
    return obj;
}

OAIBasicAutoscalingAlgorithm OAIAutoscalingPolicy::getBasicAlgorithm() const {
    return m_basic_algorithm;
}
void OAIAutoscalingPolicy::setBasicAlgorithm(const OAIBasicAutoscalingAlgorithm &basic_algorithm) {
    m_basic_algorithm = basic_algorithm;
    m_basic_algorithm_isSet = true;
}

bool OAIAutoscalingPolicy::is_basic_algorithm_Set() const{
    return m_basic_algorithm_isSet;
}

bool OAIAutoscalingPolicy::is_basic_algorithm_Valid() const{
    return m_basic_algorithm_isValid;
}

QString OAIAutoscalingPolicy::getId() const {
    return m_id;
}
void OAIAutoscalingPolicy::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAutoscalingPolicy::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAutoscalingPolicy::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QString> OAIAutoscalingPolicy::getLabels() const {
    return m_labels;
}
void OAIAutoscalingPolicy::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIAutoscalingPolicy::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIAutoscalingPolicy::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIAutoscalingPolicy::getName() const {
    return m_name;
}
void OAIAutoscalingPolicy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAutoscalingPolicy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAutoscalingPolicy::is_name_Valid() const{
    return m_name_isValid;
}

OAIInstanceGroupAutoscalingPolicyConfig OAIAutoscalingPolicy::getSecondaryWorkerConfig() const {
    return m_secondary_worker_config;
}
void OAIAutoscalingPolicy::setSecondaryWorkerConfig(const OAIInstanceGroupAutoscalingPolicyConfig &secondary_worker_config) {
    m_secondary_worker_config = secondary_worker_config;
    m_secondary_worker_config_isSet = true;
}

bool OAIAutoscalingPolicy::is_secondary_worker_config_Set() const{
    return m_secondary_worker_config_isSet;
}

bool OAIAutoscalingPolicy::is_secondary_worker_config_Valid() const{
    return m_secondary_worker_config_isValid;
}

OAIInstanceGroupAutoscalingPolicyConfig OAIAutoscalingPolicy::getWorkerConfig() const {
    return m_worker_config;
}
void OAIAutoscalingPolicy::setWorkerConfig(const OAIInstanceGroupAutoscalingPolicyConfig &worker_config) {
    m_worker_config = worker_config;
    m_worker_config_isSet = true;
}

bool OAIAutoscalingPolicy::is_worker_config_Set() const{
    return m_worker_config_isSet;
}

bool OAIAutoscalingPolicy::is_worker_config_Valid() const{
    return m_worker_config_isValid;
}

bool OAIAutoscalingPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_basic_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_worker_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoscalingPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
