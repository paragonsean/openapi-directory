/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJob::OAIJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJob::OAIJob() {
    this->initializeModel();
}

OAIJob::~OAIJob() {}

void OAIJob::initializeModel() {

    m_done_isSet = false;
    m_done_isValid = false;

    m_driver_control_files_uri_isSet = false;
    m_driver_control_files_uri_isValid = false;

    m_driver_output_resource_uri_isSet = false;
    m_driver_output_resource_uri_isValid = false;

    m_driver_scheduling_config_isSet = false;
    m_driver_scheduling_config_isValid = false;

    m_flink_job_isSet = false;
    m_flink_job_isValid = false;

    m_hadoop_job_isSet = false;
    m_hadoop_job_isValid = false;

    m_hive_job_isSet = false;
    m_hive_job_isValid = false;

    m_job_uuid_isSet = false;
    m_job_uuid_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_pig_job_isSet = false;
    m_pig_job_isValid = false;

    m_placement_isSet = false;
    m_placement_isValid = false;

    m_presto_job_isSet = false;
    m_presto_job_isValid = false;

    m_pyspark_job_isSet = false;
    m_pyspark_job_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_scheduling_isSet = false;
    m_scheduling_isValid = false;

    m_spark_job_isSet = false;
    m_spark_job_isValid = false;

    m_spark_r_job_isSet = false;
    m_spark_r_job_isValid = false;

    m_spark_sql_job_isSet = false;
    m_spark_sql_job_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_history_isSet = false;
    m_status_history_isValid = false;

    m_trino_job_isSet = false;
    m_trino_job_isValid = false;

    m_yarn_applications_isSet = false;
    m_yarn_applications_isValid = false;
}

void OAIJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJob::fromJsonObject(QJsonObject json) {

    m_done_isValid = ::OpenAPI::fromJsonValue(m_done, json[QString("done")]);
    m_done_isSet = !json[QString("done")].isNull() && m_done_isValid;

    m_driver_control_files_uri_isValid = ::OpenAPI::fromJsonValue(m_driver_control_files_uri, json[QString("driverControlFilesUri")]);
    m_driver_control_files_uri_isSet = !json[QString("driverControlFilesUri")].isNull() && m_driver_control_files_uri_isValid;

    m_driver_output_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_driver_output_resource_uri, json[QString("driverOutputResourceUri")]);
    m_driver_output_resource_uri_isSet = !json[QString("driverOutputResourceUri")].isNull() && m_driver_output_resource_uri_isValid;

    m_driver_scheduling_config_isValid = ::OpenAPI::fromJsonValue(m_driver_scheduling_config, json[QString("driverSchedulingConfig")]);
    m_driver_scheduling_config_isSet = !json[QString("driverSchedulingConfig")].isNull() && m_driver_scheduling_config_isValid;

    m_flink_job_isValid = ::OpenAPI::fromJsonValue(m_flink_job, json[QString("flinkJob")]);
    m_flink_job_isSet = !json[QString("flinkJob")].isNull() && m_flink_job_isValid;

    m_hadoop_job_isValid = ::OpenAPI::fromJsonValue(m_hadoop_job, json[QString("hadoopJob")]);
    m_hadoop_job_isSet = !json[QString("hadoopJob")].isNull() && m_hadoop_job_isValid;

    m_hive_job_isValid = ::OpenAPI::fromJsonValue(m_hive_job, json[QString("hiveJob")]);
    m_hive_job_isSet = !json[QString("hiveJob")].isNull() && m_hive_job_isValid;

    m_job_uuid_isValid = ::OpenAPI::fromJsonValue(m_job_uuid, json[QString("jobUuid")]);
    m_job_uuid_isSet = !json[QString("jobUuid")].isNull() && m_job_uuid_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_pig_job_isValid = ::OpenAPI::fromJsonValue(m_pig_job, json[QString("pigJob")]);
    m_pig_job_isSet = !json[QString("pigJob")].isNull() && m_pig_job_isValid;

    m_placement_isValid = ::OpenAPI::fromJsonValue(m_placement, json[QString("placement")]);
    m_placement_isSet = !json[QString("placement")].isNull() && m_placement_isValid;

    m_presto_job_isValid = ::OpenAPI::fromJsonValue(m_presto_job, json[QString("prestoJob")]);
    m_presto_job_isSet = !json[QString("prestoJob")].isNull() && m_presto_job_isValid;

    m_pyspark_job_isValid = ::OpenAPI::fromJsonValue(m_pyspark_job, json[QString("pysparkJob")]);
    m_pyspark_job_isSet = !json[QString("pysparkJob")].isNull() && m_pyspark_job_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_scheduling_isValid = ::OpenAPI::fromJsonValue(m_scheduling, json[QString("scheduling")]);
    m_scheduling_isSet = !json[QString("scheduling")].isNull() && m_scheduling_isValid;

    m_spark_job_isValid = ::OpenAPI::fromJsonValue(m_spark_job, json[QString("sparkJob")]);
    m_spark_job_isSet = !json[QString("sparkJob")].isNull() && m_spark_job_isValid;

    m_spark_r_job_isValid = ::OpenAPI::fromJsonValue(m_spark_r_job, json[QString("sparkRJob")]);
    m_spark_r_job_isSet = !json[QString("sparkRJob")].isNull() && m_spark_r_job_isValid;

    m_spark_sql_job_isValid = ::OpenAPI::fromJsonValue(m_spark_sql_job, json[QString("sparkSqlJob")]);
    m_spark_sql_job_isSet = !json[QString("sparkSqlJob")].isNull() && m_spark_sql_job_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_history_isValid = ::OpenAPI::fromJsonValue(m_status_history, json[QString("statusHistory")]);
    m_status_history_isSet = !json[QString("statusHistory")].isNull() && m_status_history_isValid;

    m_trino_job_isValid = ::OpenAPI::fromJsonValue(m_trino_job, json[QString("trinoJob")]);
    m_trino_job_isSet = !json[QString("trinoJob")].isNull() && m_trino_job_isValid;

    m_yarn_applications_isValid = ::OpenAPI::fromJsonValue(m_yarn_applications, json[QString("yarnApplications")]);
    m_yarn_applications_isSet = !json[QString("yarnApplications")].isNull() && m_yarn_applications_isValid;
}

QString OAIJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJob::asJsonObject() const {
    QJsonObject obj;
    if (m_done_isSet) {
        obj.insert(QString("done"), ::OpenAPI::toJsonValue(m_done));
    }
    if (m_driver_control_files_uri_isSet) {
        obj.insert(QString("driverControlFilesUri"), ::OpenAPI::toJsonValue(m_driver_control_files_uri));
    }
    if (m_driver_output_resource_uri_isSet) {
        obj.insert(QString("driverOutputResourceUri"), ::OpenAPI::toJsonValue(m_driver_output_resource_uri));
    }
    if (m_driver_scheduling_config.isSet()) {
        obj.insert(QString("driverSchedulingConfig"), ::OpenAPI::toJsonValue(m_driver_scheduling_config));
    }
    if (m_flink_job.isSet()) {
        obj.insert(QString("flinkJob"), ::OpenAPI::toJsonValue(m_flink_job));
    }
    if (m_hadoop_job.isSet()) {
        obj.insert(QString("hadoopJob"), ::OpenAPI::toJsonValue(m_hadoop_job));
    }
    if (m_hive_job.isSet()) {
        obj.insert(QString("hiveJob"), ::OpenAPI::toJsonValue(m_hive_job));
    }
    if (m_job_uuid_isSet) {
        obj.insert(QString("jobUuid"), ::OpenAPI::toJsonValue(m_job_uuid));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_pig_job.isSet()) {
        obj.insert(QString("pigJob"), ::OpenAPI::toJsonValue(m_pig_job));
    }
    if (m_placement.isSet()) {
        obj.insert(QString("placement"), ::OpenAPI::toJsonValue(m_placement));
    }
    if (m_presto_job.isSet()) {
        obj.insert(QString("prestoJob"), ::OpenAPI::toJsonValue(m_presto_job));
    }
    if (m_pyspark_job.isSet()) {
        obj.insert(QString("pysparkJob"), ::OpenAPI::toJsonValue(m_pyspark_job));
    }
    if (m_reference.isSet()) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_scheduling.isSet()) {
        obj.insert(QString("scheduling"), ::OpenAPI::toJsonValue(m_scheduling));
    }
    if (m_spark_job.isSet()) {
        obj.insert(QString("sparkJob"), ::OpenAPI::toJsonValue(m_spark_job));
    }
    if (m_spark_r_job.isSet()) {
        obj.insert(QString("sparkRJob"), ::OpenAPI::toJsonValue(m_spark_r_job));
    }
    if (m_spark_sql_job.isSet()) {
        obj.insert(QString("sparkSqlJob"), ::OpenAPI::toJsonValue(m_spark_sql_job));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_history.size() > 0) {
        obj.insert(QString("statusHistory"), ::OpenAPI::toJsonValue(m_status_history));
    }
    if (m_trino_job.isSet()) {
        obj.insert(QString("trinoJob"), ::OpenAPI::toJsonValue(m_trino_job));
    }
    if (m_yarn_applications.size() > 0) {
        obj.insert(QString("yarnApplications"), ::OpenAPI::toJsonValue(m_yarn_applications));
    }
    return obj;
}

bool OAIJob::isDone() const {
    return m_done;
}
void OAIJob::setDone(const bool &done) {
    m_done = done;
    m_done_isSet = true;
}

bool OAIJob::is_done_Set() const{
    return m_done_isSet;
}

bool OAIJob::is_done_Valid() const{
    return m_done_isValid;
}

QString OAIJob::getDriverControlFilesUri() const {
    return m_driver_control_files_uri;
}
void OAIJob::setDriverControlFilesUri(const QString &driver_control_files_uri) {
    m_driver_control_files_uri = driver_control_files_uri;
    m_driver_control_files_uri_isSet = true;
}

bool OAIJob::is_driver_control_files_uri_Set() const{
    return m_driver_control_files_uri_isSet;
}

bool OAIJob::is_driver_control_files_uri_Valid() const{
    return m_driver_control_files_uri_isValid;
}

QString OAIJob::getDriverOutputResourceUri() const {
    return m_driver_output_resource_uri;
}
void OAIJob::setDriverOutputResourceUri(const QString &driver_output_resource_uri) {
    m_driver_output_resource_uri = driver_output_resource_uri;
    m_driver_output_resource_uri_isSet = true;
}

bool OAIJob::is_driver_output_resource_uri_Set() const{
    return m_driver_output_resource_uri_isSet;
}

bool OAIJob::is_driver_output_resource_uri_Valid() const{
    return m_driver_output_resource_uri_isValid;
}

OAIDriverSchedulingConfig OAIJob::getDriverSchedulingConfig() const {
    return m_driver_scheduling_config;
}
void OAIJob::setDriverSchedulingConfig(const OAIDriverSchedulingConfig &driver_scheduling_config) {
    m_driver_scheduling_config = driver_scheduling_config;
    m_driver_scheduling_config_isSet = true;
}

bool OAIJob::is_driver_scheduling_config_Set() const{
    return m_driver_scheduling_config_isSet;
}

bool OAIJob::is_driver_scheduling_config_Valid() const{
    return m_driver_scheduling_config_isValid;
}

OAIFlinkJob OAIJob::getFlinkJob() const {
    return m_flink_job;
}
void OAIJob::setFlinkJob(const OAIFlinkJob &flink_job) {
    m_flink_job = flink_job;
    m_flink_job_isSet = true;
}

bool OAIJob::is_flink_job_Set() const{
    return m_flink_job_isSet;
}

bool OAIJob::is_flink_job_Valid() const{
    return m_flink_job_isValid;
}

OAIHadoopJob OAIJob::getHadoopJob() const {
    return m_hadoop_job;
}
void OAIJob::setHadoopJob(const OAIHadoopJob &hadoop_job) {
    m_hadoop_job = hadoop_job;
    m_hadoop_job_isSet = true;
}

bool OAIJob::is_hadoop_job_Set() const{
    return m_hadoop_job_isSet;
}

bool OAIJob::is_hadoop_job_Valid() const{
    return m_hadoop_job_isValid;
}

OAIHiveJob OAIJob::getHiveJob() const {
    return m_hive_job;
}
void OAIJob::setHiveJob(const OAIHiveJob &hive_job) {
    m_hive_job = hive_job;
    m_hive_job_isSet = true;
}

bool OAIJob::is_hive_job_Set() const{
    return m_hive_job_isSet;
}

bool OAIJob::is_hive_job_Valid() const{
    return m_hive_job_isValid;
}

QString OAIJob::getJobUuid() const {
    return m_job_uuid;
}
void OAIJob::setJobUuid(const QString &job_uuid) {
    m_job_uuid = job_uuid;
    m_job_uuid_isSet = true;
}

bool OAIJob::is_job_uuid_Set() const{
    return m_job_uuid_isSet;
}

bool OAIJob::is_job_uuid_Valid() const{
    return m_job_uuid_isValid;
}

QMap<QString, QString> OAIJob::getLabels() const {
    return m_labels;
}
void OAIJob::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIJob::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIJob::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIPigJob OAIJob::getPigJob() const {
    return m_pig_job;
}
void OAIJob::setPigJob(const OAIPigJob &pig_job) {
    m_pig_job = pig_job;
    m_pig_job_isSet = true;
}

bool OAIJob::is_pig_job_Set() const{
    return m_pig_job_isSet;
}

bool OAIJob::is_pig_job_Valid() const{
    return m_pig_job_isValid;
}

OAIJobPlacement OAIJob::getPlacement() const {
    return m_placement;
}
void OAIJob::setPlacement(const OAIJobPlacement &placement) {
    m_placement = placement;
    m_placement_isSet = true;
}

bool OAIJob::is_placement_Set() const{
    return m_placement_isSet;
}

bool OAIJob::is_placement_Valid() const{
    return m_placement_isValid;
}

OAIPrestoJob OAIJob::getPrestoJob() const {
    return m_presto_job;
}
void OAIJob::setPrestoJob(const OAIPrestoJob &presto_job) {
    m_presto_job = presto_job;
    m_presto_job_isSet = true;
}

bool OAIJob::is_presto_job_Set() const{
    return m_presto_job_isSet;
}

bool OAIJob::is_presto_job_Valid() const{
    return m_presto_job_isValid;
}

OAIPySparkJob OAIJob::getPysparkJob() const {
    return m_pyspark_job;
}
void OAIJob::setPysparkJob(const OAIPySparkJob &pyspark_job) {
    m_pyspark_job = pyspark_job;
    m_pyspark_job_isSet = true;
}

bool OAIJob::is_pyspark_job_Set() const{
    return m_pyspark_job_isSet;
}

bool OAIJob::is_pyspark_job_Valid() const{
    return m_pyspark_job_isValid;
}

OAIJobReference OAIJob::getReference() const {
    return m_reference;
}
void OAIJob::setReference(const OAIJobReference &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIJob::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIJob::is_reference_Valid() const{
    return m_reference_isValid;
}

OAIJobScheduling OAIJob::getScheduling() const {
    return m_scheduling;
}
void OAIJob::setScheduling(const OAIJobScheduling &scheduling) {
    m_scheduling = scheduling;
    m_scheduling_isSet = true;
}

bool OAIJob::is_scheduling_Set() const{
    return m_scheduling_isSet;
}

bool OAIJob::is_scheduling_Valid() const{
    return m_scheduling_isValid;
}

OAISparkJob OAIJob::getSparkJob() const {
    return m_spark_job;
}
void OAIJob::setSparkJob(const OAISparkJob &spark_job) {
    m_spark_job = spark_job;
    m_spark_job_isSet = true;
}

bool OAIJob::is_spark_job_Set() const{
    return m_spark_job_isSet;
}

bool OAIJob::is_spark_job_Valid() const{
    return m_spark_job_isValid;
}

OAISparkRJob OAIJob::getSparkRJob() const {
    return m_spark_r_job;
}
void OAIJob::setSparkRJob(const OAISparkRJob &spark_r_job) {
    m_spark_r_job = spark_r_job;
    m_spark_r_job_isSet = true;
}

bool OAIJob::is_spark_r_job_Set() const{
    return m_spark_r_job_isSet;
}

bool OAIJob::is_spark_r_job_Valid() const{
    return m_spark_r_job_isValid;
}

OAISparkSqlJob OAIJob::getSparkSqlJob() const {
    return m_spark_sql_job;
}
void OAIJob::setSparkSqlJob(const OAISparkSqlJob &spark_sql_job) {
    m_spark_sql_job = spark_sql_job;
    m_spark_sql_job_isSet = true;
}

bool OAIJob::is_spark_sql_job_Set() const{
    return m_spark_sql_job_isSet;
}

bool OAIJob::is_spark_sql_job_Valid() const{
    return m_spark_sql_job_isValid;
}

OAIJobStatus OAIJob::getStatus() const {
    return m_status;
}
void OAIJob::setStatus(const OAIJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJob::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJob::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIJobStatus> OAIJob::getStatusHistory() const {
    return m_status_history;
}
void OAIJob::setStatusHistory(const QList<OAIJobStatus> &status_history) {
    m_status_history = status_history;
    m_status_history_isSet = true;
}

bool OAIJob::is_status_history_Set() const{
    return m_status_history_isSet;
}

bool OAIJob::is_status_history_Valid() const{
    return m_status_history_isValid;
}

OAITrinoJob OAIJob::getTrinoJob() const {
    return m_trino_job;
}
void OAIJob::setTrinoJob(const OAITrinoJob &trino_job) {
    m_trino_job = trino_job;
    m_trino_job_isSet = true;
}

bool OAIJob::is_trino_job_Set() const{
    return m_trino_job_isSet;
}

bool OAIJob::is_trino_job_Valid() const{
    return m_trino_job_isValid;
}

QList<OAIYarnApplication> OAIJob::getYarnApplications() const {
    return m_yarn_applications;
}
void OAIJob::setYarnApplications(const QList<OAIYarnApplication> &yarn_applications) {
    m_yarn_applications = yarn_applications;
    m_yarn_applications_isSet = true;
}

bool OAIJob::is_yarn_applications_Set() const{
    return m_yarn_applications_isSet;
}

bool OAIJob::is_yarn_applications_Valid() const{
    return m_yarn_applications_isValid;
}

bool OAIJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_done_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver_control_files_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver_output_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver_scheduling_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flink_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hadoop_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hive_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pig_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_presto_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pyspark_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_r_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_sql_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trino_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_yarn_applications.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
