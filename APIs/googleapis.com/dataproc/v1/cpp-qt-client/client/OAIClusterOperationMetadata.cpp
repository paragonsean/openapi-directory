/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterOperationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterOperationMetadata::OAIClusterOperationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterOperationMetadata::OAIClusterOperationMetadata() {
    this->initializeModel();
}

OAIClusterOperationMetadata::~OAIClusterOperationMetadata() {}

void OAIClusterOperationMetadata::initializeModel() {

    m_child_operation_ids_isSet = false;
    m_child_operation_ids_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_cluster_uuid_isSet = false;
    m_cluster_uuid_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_history_isSet = false;
    m_status_history_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIClusterOperationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterOperationMetadata::fromJsonObject(QJsonObject json) {

    m_child_operation_ids_isValid = ::OpenAPI::fromJsonValue(m_child_operation_ids, json[QString("childOperationIds")]);
    m_child_operation_ids_isSet = !json[QString("childOperationIds")].isNull() && m_child_operation_ids_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_cluster_uuid_isValid = ::OpenAPI::fromJsonValue(m_cluster_uuid, json[QString("clusterUuid")]);
    m_cluster_uuid_isSet = !json[QString("clusterUuid")].isNull() && m_cluster_uuid_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_history_isValid = ::OpenAPI::fromJsonValue(m_status_history, json[QString("statusHistory")]);
    m_status_history_isSet = !json[QString("statusHistory")].isNull() && m_status_history_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIClusterOperationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterOperationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_child_operation_ids.size() > 0) {
        obj.insert(QString("childOperationIds"), ::OpenAPI::toJsonValue(m_child_operation_ids));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_cluster_uuid_isSet) {
        obj.insert(QString("clusterUuid"), ::OpenAPI::toJsonValue(m_cluster_uuid));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_history.size() > 0) {
        obj.insert(QString("statusHistory"), ::OpenAPI::toJsonValue(m_status_history));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<QString> OAIClusterOperationMetadata::getChildOperationIds() const {
    return m_child_operation_ids;
}
void OAIClusterOperationMetadata::setChildOperationIds(const QList<QString> &child_operation_ids) {
    m_child_operation_ids = child_operation_ids;
    m_child_operation_ids_isSet = true;
}

bool OAIClusterOperationMetadata::is_child_operation_ids_Set() const{
    return m_child_operation_ids_isSet;
}

bool OAIClusterOperationMetadata::is_child_operation_ids_Valid() const{
    return m_child_operation_ids_isValid;
}

QString OAIClusterOperationMetadata::getClusterName() const {
    return m_cluster_name;
}
void OAIClusterOperationMetadata::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIClusterOperationMetadata::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIClusterOperationMetadata::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAIClusterOperationMetadata::getClusterUuid() const {
    return m_cluster_uuid;
}
void OAIClusterOperationMetadata::setClusterUuid(const QString &cluster_uuid) {
    m_cluster_uuid = cluster_uuid;
    m_cluster_uuid_isSet = true;
}

bool OAIClusterOperationMetadata::is_cluster_uuid_Set() const{
    return m_cluster_uuid_isSet;
}

bool OAIClusterOperationMetadata::is_cluster_uuid_Valid() const{
    return m_cluster_uuid_isValid;
}

QString OAIClusterOperationMetadata::getDescription() const {
    return m_description;
}
void OAIClusterOperationMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIClusterOperationMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAIClusterOperationMetadata::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIClusterOperationMetadata::getLabels() const {
    return m_labels;
}
void OAIClusterOperationMetadata::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIClusterOperationMetadata::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIClusterOperationMetadata::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIClusterOperationMetadata::getOperationType() const {
    return m_operation_type;
}
void OAIClusterOperationMetadata::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAIClusterOperationMetadata::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAIClusterOperationMetadata::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

OAIClusterOperationStatus OAIClusterOperationMetadata::getStatus() const {
    return m_status;
}
void OAIClusterOperationMetadata::setStatus(const OAIClusterOperationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIClusterOperationMetadata::is_status_Set() const{
    return m_status_isSet;
}

bool OAIClusterOperationMetadata::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIClusterOperationStatus> OAIClusterOperationMetadata::getStatusHistory() const {
    return m_status_history;
}
void OAIClusterOperationMetadata::setStatusHistory(const QList<OAIClusterOperationStatus> &status_history) {
    m_status_history = status_history;
    m_status_history_isSet = true;
}

bool OAIClusterOperationMetadata::is_status_history_Set() const{
    return m_status_history_isSet;
}

bool OAIClusterOperationMetadata::is_status_history_Valid() const{
    return m_status_history_isValid;
}

QList<QString> OAIClusterOperationMetadata::getWarnings() const {
    return m_warnings;
}
void OAIClusterOperationMetadata::setWarnings(const QList<QString> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIClusterOperationMetadata::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIClusterOperationMetadata::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIClusterOperationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_operation_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterOperationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
