/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeInitializationAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeInitializationAction::OAINodeInitializationAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeInitializationAction::OAINodeInitializationAction() {
    this->initializeModel();
}

OAINodeInitializationAction::~OAINodeInitializationAction() {}

void OAINodeInitializationAction::initializeModel() {

    m_executable_file_isSet = false;
    m_executable_file_isValid = false;

    m_execution_timeout_isSet = false;
    m_execution_timeout_isValid = false;
}

void OAINodeInitializationAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeInitializationAction::fromJsonObject(QJsonObject json) {

    m_executable_file_isValid = ::OpenAPI::fromJsonValue(m_executable_file, json[QString("executableFile")]);
    m_executable_file_isSet = !json[QString("executableFile")].isNull() && m_executable_file_isValid;

    m_execution_timeout_isValid = ::OpenAPI::fromJsonValue(m_execution_timeout, json[QString("executionTimeout")]);
    m_execution_timeout_isSet = !json[QString("executionTimeout")].isNull() && m_execution_timeout_isValid;
}

QString OAINodeInitializationAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeInitializationAction::asJsonObject() const {
    QJsonObject obj;
    if (m_executable_file_isSet) {
        obj.insert(QString("executableFile"), ::OpenAPI::toJsonValue(m_executable_file));
    }
    if (m_execution_timeout_isSet) {
        obj.insert(QString("executionTimeout"), ::OpenAPI::toJsonValue(m_execution_timeout));
    }
    return obj;
}

QString OAINodeInitializationAction::getExecutableFile() const {
    return m_executable_file;
}
void OAINodeInitializationAction::setExecutableFile(const QString &executable_file) {
    m_executable_file = executable_file;
    m_executable_file_isSet = true;
}

bool OAINodeInitializationAction::is_executable_file_Set() const{
    return m_executable_file_isSet;
}

bool OAINodeInitializationAction::is_executable_file_Valid() const{
    return m_executable_file_isValid;
}

QString OAINodeInitializationAction::getExecutionTimeout() const {
    return m_execution_timeout;
}
void OAINodeInitializationAction::setExecutionTimeout(const QString &execution_timeout) {
    m_execution_timeout = execution_timeout;
    m_execution_timeout_isSet = true;
}

bool OAINodeInitializationAction::is_execution_timeout_Set() const{
    return m_execution_timeout_isSet;
}

bool OAINodeInitializationAction::is_execution_timeout_Valid() const{
    return m_execution_timeout_isValid;
}

bool OAINodeInitializationAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_executable_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeInitializationAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
