/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnoseClusterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnoseClusterRequest::OAIDiagnoseClusterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnoseClusterRequest::OAIDiagnoseClusterRequest() {
    this->initializeModel();
}

OAIDiagnoseClusterRequest::~OAIDiagnoseClusterRequest() {}

void OAIDiagnoseClusterRequest::initializeModel() {

    m_diagnosis_interval_isSet = false;
    m_diagnosis_interval_isValid = false;

    m_job_isSet = false;
    m_job_isValid = false;

    m_jobs_isSet = false;
    m_jobs_isValid = false;

    m_tarball_access_isSet = false;
    m_tarball_access_isValid = false;

    m_tarball_gcs_dir_isSet = false;
    m_tarball_gcs_dir_isValid = false;

    m_yarn_application_id_isSet = false;
    m_yarn_application_id_isValid = false;

    m_yarn_application_ids_isSet = false;
    m_yarn_application_ids_isValid = false;
}

void OAIDiagnoseClusterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnoseClusterRequest::fromJsonObject(QJsonObject json) {

    m_diagnosis_interval_isValid = ::OpenAPI::fromJsonValue(m_diagnosis_interval, json[QString("diagnosisInterval")]);
    m_diagnosis_interval_isSet = !json[QString("diagnosisInterval")].isNull() && m_diagnosis_interval_isValid;

    m_job_isValid = ::OpenAPI::fromJsonValue(m_job, json[QString("job")]);
    m_job_isSet = !json[QString("job")].isNull() && m_job_isValid;

    m_jobs_isValid = ::OpenAPI::fromJsonValue(m_jobs, json[QString("jobs")]);
    m_jobs_isSet = !json[QString("jobs")].isNull() && m_jobs_isValid;

    m_tarball_access_isValid = ::OpenAPI::fromJsonValue(m_tarball_access, json[QString("tarballAccess")]);
    m_tarball_access_isSet = !json[QString("tarballAccess")].isNull() && m_tarball_access_isValid;

    m_tarball_gcs_dir_isValid = ::OpenAPI::fromJsonValue(m_tarball_gcs_dir, json[QString("tarballGcsDir")]);
    m_tarball_gcs_dir_isSet = !json[QString("tarballGcsDir")].isNull() && m_tarball_gcs_dir_isValid;

    m_yarn_application_id_isValid = ::OpenAPI::fromJsonValue(m_yarn_application_id, json[QString("yarnApplicationId")]);
    m_yarn_application_id_isSet = !json[QString("yarnApplicationId")].isNull() && m_yarn_application_id_isValid;

    m_yarn_application_ids_isValid = ::OpenAPI::fromJsonValue(m_yarn_application_ids, json[QString("yarnApplicationIds")]);
    m_yarn_application_ids_isSet = !json[QString("yarnApplicationIds")].isNull() && m_yarn_application_ids_isValid;
}

QString OAIDiagnoseClusterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnoseClusterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_diagnosis_interval.isSet()) {
        obj.insert(QString("diagnosisInterval"), ::OpenAPI::toJsonValue(m_diagnosis_interval));
    }
    if (m_job_isSet) {
        obj.insert(QString("job"), ::OpenAPI::toJsonValue(m_job));
    }
    if (m_jobs.size() > 0) {
        obj.insert(QString("jobs"), ::OpenAPI::toJsonValue(m_jobs));
    }
    if (m_tarball_access_isSet) {
        obj.insert(QString("tarballAccess"), ::OpenAPI::toJsonValue(m_tarball_access));
    }
    if (m_tarball_gcs_dir_isSet) {
        obj.insert(QString("tarballGcsDir"), ::OpenAPI::toJsonValue(m_tarball_gcs_dir));
    }
    if (m_yarn_application_id_isSet) {
        obj.insert(QString("yarnApplicationId"), ::OpenAPI::toJsonValue(m_yarn_application_id));
    }
    if (m_yarn_application_ids.size() > 0) {
        obj.insert(QString("yarnApplicationIds"), ::OpenAPI::toJsonValue(m_yarn_application_ids));
    }
    return obj;
}

OAIInterval OAIDiagnoseClusterRequest::getDiagnosisInterval() const {
    return m_diagnosis_interval;
}
void OAIDiagnoseClusterRequest::setDiagnosisInterval(const OAIInterval &diagnosis_interval) {
    m_diagnosis_interval = diagnosis_interval;
    m_diagnosis_interval_isSet = true;
}

bool OAIDiagnoseClusterRequest::is_diagnosis_interval_Set() const{
    return m_diagnosis_interval_isSet;
}

bool OAIDiagnoseClusterRequest::is_diagnosis_interval_Valid() const{
    return m_diagnosis_interval_isValid;
}

QString OAIDiagnoseClusterRequest::getJob() const {
    return m_job;
}
void OAIDiagnoseClusterRequest::setJob(const QString &job) {
    m_job = job;
    m_job_isSet = true;
}

bool OAIDiagnoseClusterRequest::is_job_Set() const{
    return m_job_isSet;
}

bool OAIDiagnoseClusterRequest::is_job_Valid() const{
    return m_job_isValid;
}

QList<QString> OAIDiagnoseClusterRequest::getJobs() const {
    return m_jobs;
}
void OAIDiagnoseClusterRequest::setJobs(const QList<QString> &jobs) {
    m_jobs = jobs;
    m_jobs_isSet = true;
}

bool OAIDiagnoseClusterRequest::is_jobs_Set() const{
    return m_jobs_isSet;
}

bool OAIDiagnoseClusterRequest::is_jobs_Valid() const{
    return m_jobs_isValid;
}

QString OAIDiagnoseClusterRequest::getTarballAccess() const {
    return m_tarball_access;
}
void OAIDiagnoseClusterRequest::setTarballAccess(const QString &tarball_access) {
    m_tarball_access = tarball_access;
    m_tarball_access_isSet = true;
}

bool OAIDiagnoseClusterRequest::is_tarball_access_Set() const{
    return m_tarball_access_isSet;
}

bool OAIDiagnoseClusterRequest::is_tarball_access_Valid() const{
    return m_tarball_access_isValid;
}

QString OAIDiagnoseClusterRequest::getTarballGcsDir() const {
    return m_tarball_gcs_dir;
}
void OAIDiagnoseClusterRequest::setTarballGcsDir(const QString &tarball_gcs_dir) {
    m_tarball_gcs_dir = tarball_gcs_dir;
    m_tarball_gcs_dir_isSet = true;
}

bool OAIDiagnoseClusterRequest::is_tarball_gcs_dir_Set() const{
    return m_tarball_gcs_dir_isSet;
}

bool OAIDiagnoseClusterRequest::is_tarball_gcs_dir_Valid() const{
    return m_tarball_gcs_dir_isValid;
}

QString OAIDiagnoseClusterRequest::getYarnApplicationId() const {
    return m_yarn_application_id;
}
void OAIDiagnoseClusterRequest::setYarnApplicationId(const QString &yarn_application_id) {
    m_yarn_application_id = yarn_application_id;
    m_yarn_application_id_isSet = true;
}

bool OAIDiagnoseClusterRequest::is_yarn_application_id_Set() const{
    return m_yarn_application_id_isSet;
}

bool OAIDiagnoseClusterRequest::is_yarn_application_id_Valid() const{
    return m_yarn_application_id_isValid;
}

QList<QString> OAIDiagnoseClusterRequest::getYarnApplicationIds() const {
    return m_yarn_application_ids;
}
void OAIDiagnoseClusterRequest::setYarnApplicationIds(const QList<QString> &yarn_application_ids) {
    m_yarn_application_ids = yarn_application_ids;
    m_yarn_application_ids_isSet = true;
}

bool OAIDiagnoseClusterRequest::is_yarn_application_ids_Set() const{
    return m_yarn_application_ids_isSet;
}

bool OAIDiagnoseClusterRequest::is_yarn_application_ids_Valid() const{
    return m_yarn_application_ids_isValid;
}

bool OAIDiagnoseClusterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_diagnosis_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tarball_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tarball_gcs_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yarn_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yarn_application_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnoseClusterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
