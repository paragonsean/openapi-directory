/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointConfig::OAIEndpointConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointConfig::OAIEndpointConfig() {
    this->initializeModel();
}

OAIEndpointConfig::~OAIEndpointConfig() {}

void OAIEndpointConfig::initializeModel() {

    m_enable_http_port_access_isSet = false;
    m_enable_http_port_access_isValid = false;

    m_http_ports_isSet = false;
    m_http_ports_isValid = false;
}

void OAIEndpointConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointConfig::fromJsonObject(QJsonObject json) {

    m_enable_http_port_access_isValid = ::OpenAPI::fromJsonValue(m_enable_http_port_access, json[QString("enableHttpPortAccess")]);
    m_enable_http_port_access_isSet = !json[QString("enableHttpPortAccess")].isNull() && m_enable_http_port_access_isValid;

    m_http_ports_isValid = ::OpenAPI::fromJsonValue(m_http_ports, json[QString("httpPorts")]);
    m_http_ports_isSet = !json[QString("httpPorts")].isNull() && m_http_ports_isValid;
}

QString OAIEndpointConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_http_port_access_isSet) {
        obj.insert(QString("enableHttpPortAccess"), ::OpenAPI::toJsonValue(m_enable_http_port_access));
    }
    if (m_http_ports.size() > 0) {
        obj.insert(QString("httpPorts"), ::OpenAPI::toJsonValue(m_http_ports));
    }
    return obj;
}

bool OAIEndpointConfig::isEnableHttpPortAccess() const {
    return m_enable_http_port_access;
}
void OAIEndpointConfig::setEnableHttpPortAccess(const bool &enable_http_port_access) {
    m_enable_http_port_access = enable_http_port_access;
    m_enable_http_port_access_isSet = true;
}

bool OAIEndpointConfig::is_enable_http_port_access_Set() const{
    return m_enable_http_port_access_isSet;
}

bool OAIEndpointConfig::is_enable_http_port_access_Valid() const{
    return m_enable_http_port_access_isValid;
}

QMap<QString, QString> OAIEndpointConfig::getHttpPorts() const {
    return m_http_ports;
}
void OAIEndpointConfig::setHttpPorts(const QMap<QString, QString> &http_ports) {
    m_http_ports = http_ports;
    m_http_ports_isSet = true;
}

bool OAIEndpointConfig::is_http_ports_Set() const{
    return m_http_ports_isSet;
}

bool OAIEndpointConfig::is_http_ports_Valid() const{
    return m_http_ports_isValid;
}

bool OAIEndpointConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_http_port_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
