/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatch::OAIBatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatch::OAIBatch() {
    this->initializeModel();
}

OAIBatch::~OAIBatch() {}

void OAIBatch::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_environment_config_isSet = false;
    m_environment_config_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_pyspark_batch_isSet = false;
    m_pyspark_batch_isValid = false;

    m_runtime_config_isSet = false;
    m_runtime_config_isValid = false;

    m_runtime_info_isSet = false;
    m_runtime_info_isValid = false;

    m_spark_batch_isSet = false;
    m_spark_batch_isValid = false;

    m_spark_r_batch_isSet = false;
    m_spark_r_batch_isValid = false;

    m_spark_sql_batch_isSet = false;
    m_spark_sql_batch_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_history_isSet = false;
    m_state_history_isValid = false;

    m_state_message_isSet = false;
    m_state_message_isValid = false;

    m_state_time_isSet = false;
    m_state_time_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIBatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatch::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_environment_config_isValid = ::OpenAPI::fromJsonValue(m_environment_config, json[QString("environmentConfig")]);
    m_environment_config_isSet = !json[QString("environmentConfig")].isNull() && m_environment_config_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_pyspark_batch_isValid = ::OpenAPI::fromJsonValue(m_pyspark_batch, json[QString("pysparkBatch")]);
    m_pyspark_batch_isSet = !json[QString("pysparkBatch")].isNull() && m_pyspark_batch_isValid;

    m_runtime_config_isValid = ::OpenAPI::fromJsonValue(m_runtime_config, json[QString("runtimeConfig")]);
    m_runtime_config_isSet = !json[QString("runtimeConfig")].isNull() && m_runtime_config_isValid;

    m_runtime_info_isValid = ::OpenAPI::fromJsonValue(m_runtime_info, json[QString("runtimeInfo")]);
    m_runtime_info_isSet = !json[QString("runtimeInfo")].isNull() && m_runtime_info_isValid;

    m_spark_batch_isValid = ::OpenAPI::fromJsonValue(m_spark_batch, json[QString("sparkBatch")]);
    m_spark_batch_isSet = !json[QString("sparkBatch")].isNull() && m_spark_batch_isValid;

    m_spark_r_batch_isValid = ::OpenAPI::fromJsonValue(m_spark_r_batch, json[QString("sparkRBatch")]);
    m_spark_r_batch_isSet = !json[QString("sparkRBatch")].isNull() && m_spark_r_batch_isValid;

    m_spark_sql_batch_isValid = ::OpenAPI::fromJsonValue(m_spark_sql_batch, json[QString("sparkSqlBatch")]);
    m_spark_sql_batch_isSet = !json[QString("sparkSqlBatch")].isNull() && m_spark_sql_batch_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_history_isValid = ::OpenAPI::fromJsonValue(m_state_history, json[QString("stateHistory")]);
    m_state_history_isSet = !json[QString("stateHistory")].isNull() && m_state_history_isValid;

    m_state_message_isValid = ::OpenAPI::fromJsonValue(m_state_message, json[QString("stateMessage")]);
    m_state_message_isSet = !json[QString("stateMessage")].isNull() && m_state_message_isValid;

    m_state_time_isValid = ::OpenAPI::fromJsonValue(m_state_time, json[QString("stateTime")]);
    m_state_time_isSet = !json[QString("stateTime")].isNull() && m_state_time_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIBatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatch::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_environment_config.isSet()) {
        obj.insert(QString("environmentConfig"), ::OpenAPI::toJsonValue(m_environment_config));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_pyspark_batch.isSet()) {
        obj.insert(QString("pysparkBatch"), ::OpenAPI::toJsonValue(m_pyspark_batch));
    }
    if (m_runtime_config.isSet()) {
        obj.insert(QString("runtimeConfig"), ::OpenAPI::toJsonValue(m_runtime_config));
    }
    if (m_runtime_info.isSet()) {
        obj.insert(QString("runtimeInfo"), ::OpenAPI::toJsonValue(m_runtime_info));
    }
    if (m_spark_batch.isSet()) {
        obj.insert(QString("sparkBatch"), ::OpenAPI::toJsonValue(m_spark_batch));
    }
    if (m_spark_r_batch.isSet()) {
        obj.insert(QString("sparkRBatch"), ::OpenAPI::toJsonValue(m_spark_r_batch));
    }
    if (m_spark_sql_batch.isSet()) {
        obj.insert(QString("sparkSqlBatch"), ::OpenAPI::toJsonValue(m_spark_sql_batch));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_history.size() > 0) {
        obj.insert(QString("stateHistory"), ::OpenAPI::toJsonValue(m_state_history));
    }
    if (m_state_message_isSet) {
        obj.insert(QString("stateMessage"), ::OpenAPI::toJsonValue(m_state_message));
    }
    if (m_state_time_isSet) {
        obj.insert(QString("stateTime"), ::OpenAPI::toJsonValue(m_state_time));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIBatch::getCreateTime() const {
    return m_create_time;
}
void OAIBatch::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIBatch::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIBatch::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIBatch::getCreator() const {
    return m_creator;
}
void OAIBatch::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIBatch::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIBatch::is_creator_Valid() const{
    return m_creator_isValid;
}

OAIEnvironmentConfig OAIBatch::getEnvironmentConfig() const {
    return m_environment_config;
}
void OAIBatch::setEnvironmentConfig(const OAIEnvironmentConfig &environment_config) {
    m_environment_config = environment_config;
    m_environment_config_isSet = true;
}

bool OAIBatch::is_environment_config_Set() const{
    return m_environment_config_isSet;
}

bool OAIBatch::is_environment_config_Valid() const{
    return m_environment_config_isValid;
}

QMap<QString, QString> OAIBatch::getLabels() const {
    return m_labels;
}
void OAIBatch::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIBatch::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIBatch::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIBatch::getName() const {
    return m_name;
}
void OAIBatch::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBatch::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBatch::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBatch::getOperation() const {
    return m_operation;
}
void OAIBatch::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIBatch::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIBatch::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIPySparkBatch OAIBatch::getPysparkBatch() const {
    return m_pyspark_batch;
}
void OAIBatch::setPysparkBatch(const OAIPySparkBatch &pyspark_batch) {
    m_pyspark_batch = pyspark_batch;
    m_pyspark_batch_isSet = true;
}

bool OAIBatch::is_pyspark_batch_Set() const{
    return m_pyspark_batch_isSet;
}

bool OAIBatch::is_pyspark_batch_Valid() const{
    return m_pyspark_batch_isValid;
}

OAIRuntimeConfig OAIBatch::getRuntimeConfig() const {
    return m_runtime_config;
}
void OAIBatch::setRuntimeConfig(const OAIRuntimeConfig &runtime_config) {
    m_runtime_config = runtime_config;
    m_runtime_config_isSet = true;
}

bool OAIBatch::is_runtime_config_Set() const{
    return m_runtime_config_isSet;
}

bool OAIBatch::is_runtime_config_Valid() const{
    return m_runtime_config_isValid;
}

OAIRuntimeInfo OAIBatch::getRuntimeInfo() const {
    return m_runtime_info;
}
void OAIBatch::setRuntimeInfo(const OAIRuntimeInfo &runtime_info) {
    m_runtime_info = runtime_info;
    m_runtime_info_isSet = true;
}

bool OAIBatch::is_runtime_info_Set() const{
    return m_runtime_info_isSet;
}

bool OAIBatch::is_runtime_info_Valid() const{
    return m_runtime_info_isValid;
}

OAISparkBatch OAIBatch::getSparkBatch() const {
    return m_spark_batch;
}
void OAIBatch::setSparkBatch(const OAISparkBatch &spark_batch) {
    m_spark_batch = spark_batch;
    m_spark_batch_isSet = true;
}

bool OAIBatch::is_spark_batch_Set() const{
    return m_spark_batch_isSet;
}

bool OAIBatch::is_spark_batch_Valid() const{
    return m_spark_batch_isValid;
}

OAISparkRBatch OAIBatch::getSparkRBatch() const {
    return m_spark_r_batch;
}
void OAIBatch::setSparkRBatch(const OAISparkRBatch &spark_r_batch) {
    m_spark_r_batch = spark_r_batch;
    m_spark_r_batch_isSet = true;
}

bool OAIBatch::is_spark_r_batch_Set() const{
    return m_spark_r_batch_isSet;
}

bool OAIBatch::is_spark_r_batch_Valid() const{
    return m_spark_r_batch_isValid;
}

OAISparkSqlBatch OAIBatch::getSparkSqlBatch() const {
    return m_spark_sql_batch;
}
void OAIBatch::setSparkSqlBatch(const OAISparkSqlBatch &spark_sql_batch) {
    m_spark_sql_batch = spark_sql_batch;
    m_spark_sql_batch_isSet = true;
}

bool OAIBatch::is_spark_sql_batch_Set() const{
    return m_spark_sql_batch_isSet;
}

bool OAIBatch::is_spark_sql_batch_Valid() const{
    return m_spark_sql_batch_isValid;
}

QString OAIBatch::getState() const {
    return m_state;
}
void OAIBatch::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBatch::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBatch::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIStateHistory> OAIBatch::getStateHistory() const {
    return m_state_history;
}
void OAIBatch::setStateHistory(const QList<OAIStateHistory> &state_history) {
    m_state_history = state_history;
    m_state_history_isSet = true;
}

bool OAIBatch::is_state_history_Set() const{
    return m_state_history_isSet;
}

bool OAIBatch::is_state_history_Valid() const{
    return m_state_history_isValid;
}

QString OAIBatch::getStateMessage() const {
    return m_state_message;
}
void OAIBatch::setStateMessage(const QString &state_message) {
    m_state_message = state_message;
    m_state_message_isSet = true;
}

bool OAIBatch::is_state_message_Set() const{
    return m_state_message_isSet;
}

bool OAIBatch::is_state_message_Valid() const{
    return m_state_message_isValid;
}

QString OAIBatch::getStateTime() const {
    return m_state_time;
}
void OAIBatch::setStateTime(const QString &state_time) {
    m_state_time = state_time;
    m_state_time_isSet = true;
}

bool OAIBatch::is_state_time_Set() const{
    return m_state_time_isSet;
}

bool OAIBatch::is_state_time_Valid() const{
    return m_state_time_isValid;
}

QString OAIBatch::getUuid() const {
    return m_uuid;
}
void OAIBatch::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIBatch::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIBatch::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIBatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pyspark_batch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_batch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_r_batch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_sql_batch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
