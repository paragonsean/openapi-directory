/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPySparkBatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPySparkBatch::OAIPySparkBatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPySparkBatch::OAIPySparkBatch() {
    this->initializeModel();
}

OAIPySparkBatch::~OAIPySparkBatch() {}

void OAIPySparkBatch::initializeModel() {

    m_archive_uris_isSet = false;
    m_archive_uris_isValid = false;

    m_args_isSet = false;
    m_args_isValid = false;

    m_file_uris_isSet = false;
    m_file_uris_isValid = false;

    m_jar_file_uris_isSet = false;
    m_jar_file_uris_isValid = false;

    m_main_python_file_uri_isSet = false;
    m_main_python_file_uri_isValid = false;

    m_python_file_uris_isSet = false;
    m_python_file_uris_isValid = false;
}

void OAIPySparkBatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPySparkBatch::fromJsonObject(QJsonObject json) {

    m_archive_uris_isValid = ::OpenAPI::fromJsonValue(m_archive_uris, json[QString("archiveUris")]);
    m_archive_uris_isSet = !json[QString("archiveUris")].isNull() && m_archive_uris_isValid;

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("args")]);
    m_args_isSet = !json[QString("args")].isNull() && m_args_isValid;

    m_file_uris_isValid = ::OpenAPI::fromJsonValue(m_file_uris, json[QString("fileUris")]);
    m_file_uris_isSet = !json[QString("fileUris")].isNull() && m_file_uris_isValid;

    m_jar_file_uris_isValid = ::OpenAPI::fromJsonValue(m_jar_file_uris, json[QString("jarFileUris")]);
    m_jar_file_uris_isSet = !json[QString("jarFileUris")].isNull() && m_jar_file_uris_isValid;

    m_main_python_file_uri_isValid = ::OpenAPI::fromJsonValue(m_main_python_file_uri, json[QString("mainPythonFileUri")]);
    m_main_python_file_uri_isSet = !json[QString("mainPythonFileUri")].isNull() && m_main_python_file_uri_isValid;

    m_python_file_uris_isValid = ::OpenAPI::fromJsonValue(m_python_file_uris, json[QString("pythonFileUris")]);
    m_python_file_uris_isSet = !json[QString("pythonFileUris")].isNull() && m_python_file_uris_isValid;
}

QString OAIPySparkBatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPySparkBatch::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_uris.size() > 0) {
        obj.insert(QString("archiveUris"), ::OpenAPI::toJsonValue(m_archive_uris));
    }
    if (m_args.size() > 0) {
        obj.insert(QString("args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_file_uris.size() > 0) {
        obj.insert(QString("fileUris"), ::OpenAPI::toJsonValue(m_file_uris));
    }
    if (m_jar_file_uris.size() > 0) {
        obj.insert(QString("jarFileUris"), ::OpenAPI::toJsonValue(m_jar_file_uris));
    }
    if (m_main_python_file_uri_isSet) {
        obj.insert(QString("mainPythonFileUri"), ::OpenAPI::toJsonValue(m_main_python_file_uri));
    }
    if (m_python_file_uris.size() > 0) {
        obj.insert(QString("pythonFileUris"), ::OpenAPI::toJsonValue(m_python_file_uris));
    }
    return obj;
}

QList<QString> OAIPySparkBatch::getArchiveUris() const {
    return m_archive_uris;
}
void OAIPySparkBatch::setArchiveUris(const QList<QString> &archive_uris) {
    m_archive_uris = archive_uris;
    m_archive_uris_isSet = true;
}

bool OAIPySparkBatch::is_archive_uris_Set() const{
    return m_archive_uris_isSet;
}

bool OAIPySparkBatch::is_archive_uris_Valid() const{
    return m_archive_uris_isValid;
}

QList<QString> OAIPySparkBatch::getArgs() const {
    return m_args;
}
void OAIPySparkBatch::setArgs(const QList<QString> &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAIPySparkBatch::is_args_Set() const{
    return m_args_isSet;
}

bool OAIPySparkBatch::is_args_Valid() const{
    return m_args_isValid;
}

QList<QString> OAIPySparkBatch::getFileUris() const {
    return m_file_uris;
}
void OAIPySparkBatch::setFileUris(const QList<QString> &file_uris) {
    m_file_uris = file_uris;
    m_file_uris_isSet = true;
}

bool OAIPySparkBatch::is_file_uris_Set() const{
    return m_file_uris_isSet;
}

bool OAIPySparkBatch::is_file_uris_Valid() const{
    return m_file_uris_isValid;
}

QList<QString> OAIPySparkBatch::getJarFileUris() const {
    return m_jar_file_uris;
}
void OAIPySparkBatch::setJarFileUris(const QList<QString> &jar_file_uris) {
    m_jar_file_uris = jar_file_uris;
    m_jar_file_uris_isSet = true;
}

bool OAIPySparkBatch::is_jar_file_uris_Set() const{
    return m_jar_file_uris_isSet;
}

bool OAIPySparkBatch::is_jar_file_uris_Valid() const{
    return m_jar_file_uris_isValid;
}

QString OAIPySparkBatch::getMainPythonFileUri() const {
    return m_main_python_file_uri;
}
void OAIPySparkBatch::setMainPythonFileUri(const QString &main_python_file_uri) {
    m_main_python_file_uri = main_python_file_uri;
    m_main_python_file_uri_isSet = true;
}

bool OAIPySparkBatch::is_main_python_file_uri_Set() const{
    return m_main_python_file_uri_isSet;
}

bool OAIPySparkBatch::is_main_python_file_uri_Valid() const{
    return m_main_python_file_uri_isValid;
}

QList<QString> OAIPySparkBatch::getPythonFileUris() const {
    return m_python_file_uris;
}
void OAIPySparkBatch::setPythonFileUris(const QList<QString> &python_file_uris) {
    m_python_file_uris = python_file_uris;
    m_python_file_uris_isSet = true;
}

bool OAIPySparkBatch::is_python_file_uris_Set() const{
    return m_python_file_uris_isSet;
}

bool OAIPySparkBatch::is_python_file_uris_Valid() const{
    return m_python_file_uris_isValid;
}

bool OAIPySparkBatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_jar_file_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_python_file_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_python_file_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPySparkBatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
