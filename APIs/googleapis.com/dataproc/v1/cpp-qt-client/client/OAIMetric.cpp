/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetric::OAIMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetric::OAIMetric() {
    this->initializeModel();
}

OAIMetric::~OAIMetric() {}

void OAIMetric::initializeModel() {

    m_metric_overrides_isSet = false;
    m_metric_overrides_isValid = false;

    m_metric_source_isSet = false;
    m_metric_source_isValid = false;
}

void OAIMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetric::fromJsonObject(QJsonObject json) {

    m_metric_overrides_isValid = ::OpenAPI::fromJsonValue(m_metric_overrides, json[QString("metricOverrides")]);
    m_metric_overrides_isSet = !json[QString("metricOverrides")].isNull() && m_metric_overrides_isValid;

    m_metric_source_isValid = ::OpenAPI::fromJsonValue(m_metric_source, json[QString("metricSource")]);
    m_metric_source_isSet = !json[QString("metricSource")].isNull() && m_metric_source_isValid;
}

QString OAIMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_overrides.size() > 0) {
        obj.insert(QString("metricOverrides"), ::OpenAPI::toJsonValue(m_metric_overrides));
    }
    if (m_metric_source_isSet) {
        obj.insert(QString("metricSource"), ::OpenAPI::toJsonValue(m_metric_source));
    }
    return obj;
}

QList<QString> OAIMetric::getMetricOverrides() const {
    return m_metric_overrides;
}
void OAIMetric::setMetricOverrides(const QList<QString> &metric_overrides) {
    m_metric_overrides = metric_overrides;
    m_metric_overrides_isSet = true;
}

bool OAIMetric::is_metric_overrides_Set() const{
    return m_metric_overrides_isSet;
}

bool OAIMetric::is_metric_overrides_Valid() const{
    return m_metric_overrides_isValid;
}

QString OAIMetric::getMetricSource() const {
    return m_metric_source;
}
void OAIMetric::setMetricSource(const QString &metric_source) {
    m_metric_source = metric_source;
    m_metric_source_isSet = true;
}

bool OAIMetric::is_metric_source_Set() const{
    return m_metric_source_isSet;
}

bool OAIMetric::is_metric_source_Valid() const{
    return m_metric_source_isValid;
}

bool OAIMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
