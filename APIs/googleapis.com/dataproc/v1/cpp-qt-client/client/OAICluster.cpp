/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICluster::OAICluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICluster::OAICluster() {
    this->initializeModel();
}

OAICluster::~OAICluster() {}

void OAICluster::initializeModel() {

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_cluster_uuid_isSet = false;
    m_cluster_uuid_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_history_isSet = false;
    m_status_history_isValid = false;

    m_virtual_cluster_config_isSet = false;
    m_virtual_cluster_config_isValid = false;
}

void OAICluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICluster::fromJsonObject(QJsonObject json) {

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_cluster_uuid_isValid = ::OpenAPI::fromJsonValue(m_cluster_uuid, json[QString("clusterUuid")]);
    m_cluster_uuid_isSet = !json[QString("clusterUuid")].isNull() && m_cluster_uuid_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_history_isValid = ::OpenAPI::fromJsonValue(m_status_history, json[QString("statusHistory")]);
    m_status_history_isSet = !json[QString("statusHistory")].isNull() && m_status_history_isValid;

    m_virtual_cluster_config_isValid = ::OpenAPI::fromJsonValue(m_virtual_cluster_config, json[QString("virtualClusterConfig")]);
    m_virtual_cluster_config_isSet = !json[QString("virtualClusterConfig")].isNull() && m_virtual_cluster_config_isValid;
}

QString OAICluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICluster::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_cluster_uuid_isSet) {
        obj.insert(QString("clusterUuid"), ::OpenAPI::toJsonValue(m_cluster_uuid));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_history.size() > 0) {
        obj.insert(QString("statusHistory"), ::OpenAPI::toJsonValue(m_status_history));
    }
    if (m_virtual_cluster_config.isSet()) {
        obj.insert(QString("virtualClusterConfig"), ::OpenAPI::toJsonValue(m_virtual_cluster_config));
    }
    return obj;
}

QString OAICluster::getClusterName() const {
    return m_cluster_name;
}
void OAICluster::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAICluster::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAICluster::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAICluster::getClusterUuid() const {
    return m_cluster_uuid;
}
void OAICluster::setClusterUuid(const QString &cluster_uuid) {
    m_cluster_uuid = cluster_uuid;
    m_cluster_uuid_isSet = true;
}

bool OAICluster::is_cluster_uuid_Set() const{
    return m_cluster_uuid_isSet;
}

bool OAICluster::is_cluster_uuid_Valid() const{
    return m_cluster_uuid_isValid;
}

OAIClusterConfig OAICluster::getConfig() const {
    return m_config;
}
void OAICluster::setConfig(const OAIClusterConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAICluster::is_config_Set() const{
    return m_config_isSet;
}

bool OAICluster::is_config_Valid() const{
    return m_config_isValid;
}

QMap<QString, QString> OAICluster::getLabels() const {
    return m_labels;
}
void OAICluster::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICluster::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICluster::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIClusterMetrics OAICluster::getMetrics() const {
    return m_metrics;
}
void OAICluster::setMetrics(const OAIClusterMetrics &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAICluster::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAICluster::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAICluster::getProjectId() const {
    return m_project_id;
}
void OAICluster::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAICluster::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAICluster::is_project_id_Valid() const{
    return m_project_id_isValid;
}

OAIClusterStatus OAICluster::getStatus() const {
    return m_status;
}
void OAICluster::setStatus(const OAIClusterStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICluster::is_status_Set() const{
    return m_status_isSet;
}

bool OAICluster::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIClusterStatus> OAICluster::getStatusHistory() const {
    return m_status_history;
}
void OAICluster::setStatusHistory(const QList<OAIClusterStatus> &status_history) {
    m_status_history = status_history;
    m_status_history_isSet = true;
}

bool OAICluster::is_status_history_Set() const{
    return m_status_history_isSet;
}

bool OAICluster::is_status_history_Valid() const{
    return m_status_history_isValid;
}

OAIVirtualClusterConfig OAICluster::getVirtualClusterConfig() const {
    return m_virtual_cluster_config;
}
void OAICluster::setVirtualClusterConfig(const OAIVirtualClusterConfig &virtual_cluster_config) {
    m_virtual_cluster_config = virtual_cluster_config;
    m_virtual_cluster_config_isSet = true;
}

bool OAICluster::is_virtual_cluster_config_Set() const{
    return m_virtual_cluster_config_isSet;
}

bool OAICluster::is_virtual_cluster_config_Valid() const{
    return m_virtual_cluster_config_isValid;
}

bool OAICluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_cluster_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
