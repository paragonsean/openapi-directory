/**
 * Cloud Dataproc API
 * Manages Hadoop-based clusters and jobs on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGkeNodePoolConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGkeNodePoolConfig::OAIGkeNodePoolConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGkeNodePoolConfig::OAIGkeNodePoolConfig() {
    this->initializeModel();
}

OAIGkeNodePoolConfig::~OAIGkeNodePoolConfig() {}

void OAIGkeNodePoolConfig::initializeModel() {

    m_autoscaling_isSet = false;
    m_autoscaling_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;
}

void OAIGkeNodePoolConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGkeNodePoolConfig::fromJsonObject(QJsonObject json) {

    m_autoscaling_isValid = ::OpenAPI::fromJsonValue(m_autoscaling, json[QString("autoscaling")]);
    m_autoscaling_isSet = !json[QString("autoscaling")].isNull() && m_autoscaling_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;
}

QString OAIGkeNodePoolConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGkeNodePoolConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_autoscaling.isSet()) {
        obj.insert(QString("autoscaling"), ::OpenAPI::toJsonValue(m_autoscaling));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    return obj;
}

OAIGkeNodePoolAutoscalingConfig OAIGkeNodePoolConfig::getAutoscaling() const {
    return m_autoscaling;
}
void OAIGkeNodePoolConfig::setAutoscaling(const OAIGkeNodePoolAutoscalingConfig &autoscaling) {
    m_autoscaling = autoscaling;
    m_autoscaling_isSet = true;
}

bool OAIGkeNodePoolConfig::is_autoscaling_Set() const{
    return m_autoscaling_isSet;
}

bool OAIGkeNodePoolConfig::is_autoscaling_Valid() const{
    return m_autoscaling_isValid;
}

OAIGkeNodeConfig OAIGkeNodePoolConfig::getConfig() const {
    return m_config;
}
void OAIGkeNodePoolConfig::setConfig(const OAIGkeNodeConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIGkeNodePoolConfig::is_config_Set() const{
    return m_config_isSet;
}

bool OAIGkeNodePoolConfig::is_config_Valid() const{
    return m_config_isValid;
}

QList<QString> OAIGkeNodePoolConfig::getLocations() const {
    return m_locations;
}
void OAIGkeNodePoolConfig::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIGkeNodePoolConfig::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIGkeNodePoolConfig::is_locations_Valid() const{
    return m_locations_isValid;
}

bool OAIGkeNodePoolConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autoscaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGkeNodePoolConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
