# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlertFeedback(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_id: str=None, create_time: str=None, customer_id: str=None, email: str=None, feedback_id: str=None, type: str=None):
        """AlertFeedback - a model defined in OpenAPI

        :param alert_id: The alert_id of this AlertFeedback.
        :param create_time: The create_time of this AlertFeedback.
        :param customer_id: The customer_id of this AlertFeedback.
        :param email: The email of this AlertFeedback.
        :param feedback_id: The feedback_id of this AlertFeedback.
        :param type: The type of this AlertFeedback.
        """
        self.openapi_types = {
            'alert_id': str,
            'create_time': str,
            'customer_id': str,
            'email': str,
            'feedback_id': str,
            'type': str
        }

        self.attribute_map = {
            'alert_id': 'alertId',
            'create_time': 'createTime',
            'customer_id': 'customerId',
            'email': 'email',
            'feedback_id': 'feedbackId',
            'type': 'type'
        }

        self._alert_id = alert_id
        self._create_time = create_time
        self._customer_id = customer_id
        self._email = email
        self._feedback_id = feedback_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertFeedback':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertFeedback of this AlertFeedback.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_id(self):
        """Gets the alert_id of this AlertFeedback.

        Output only. The alert identifier.

        :return: The alert_id of this AlertFeedback.
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this AlertFeedback.

        Output only. The alert identifier.

        :param alert_id: The alert_id of this AlertFeedback.
        :type alert_id: str
        """

        self._alert_id = alert_id

    @property
    def create_time(self):
        """Gets the create_time of this AlertFeedback.

        Output only. The time this feedback was created.

        :return: The create_time of this AlertFeedback.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this AlertFeedback.

        Output only. The time this feedback was created.

        :param create_time: The create_time of this AlertFeedback.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def customer_id(self):
        """Gets the customer_id of this AlertFeedback.

        Output only. The unique identifier of the Google Workspace account of the customer.

        :return: The customer_id of this AlertFeedback.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this AlertFeedback.

        Output only. The unique identifier of the Google Workspace account of the customer.

        :param customer_id: The customer_id of this AlertFeedback.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def email(self):
        """Gets the email of this AlertFeedback.

        Output only. The email of the user that provided the feedback.

        :return: The email of this AlertFeedback.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AlertFeedback.

        Output only. The email of the user that provided the feedback.

        :param email: The email of this AlertFeedback.
        :type email: str
        """

        self._email = email

    @property
    def feedback_id(self):
        """Gets the feedback_id of this AlertFeedback.

        Output only. The unique identifier for the feedback.

        :return: The feedback_id of this AlertFeedback.
        :rtype: str
        """
        return self._feedback_id

    @feedback_id.setter
    def feedback_id(self, feedback_id):
        """Sets the feedback_id of this AlertFeedback.

        Output only. The unique identifier for the feedback.

        :param feedback_id: The feedback_id of this AlertFeedback.
        :type feedback_id: str
        """

        self._feedback_id = feedback_id

    @property
    def type(self):
        """Gets the type of this AlertFeedback.

        Required. The type of the feedback.

        :return: The type of this AlertFeedback.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AlertFeedback.

        Required. The type of the feedback.

        :param type: The type of this AlertFeedback.
        :type type: str
        """
        allowed_values = ["ALERT_FEEDBACK_TYPE_UNSPECIFIED", "NOT_USEFUL", "SOMEWHAT_USEFUL", "VERY_USEFUL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
