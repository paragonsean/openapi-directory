# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.match_info import MatchInfo
from openapi_server.models.resource_info import ResourceInfo
from openapi_server.models.rule_info import RuleInfo
from openapi_server import util


class RuleViolationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source: str=None, match_info: List[MatchInfo]=None, recipients: List[str]=None, resource_info: ResourceInfo=None, rule_info: RuleInfo=None, suppressed_action_types: List[str]=None, trigger: str=None, triggered_action_info: List[object]=None, triggered_action_types: List[str]=None, triggering_user_email: str=None):
        """RuleViolationInfo - a model defined in OpenAPI

        :param data_source: The data_source of this RuleViolationInfo.
        :param match_info: The match_info of this RuleViolationInfo.
        :param recipients: The recipients of this RuleViolationInfo.
        :param resource_info: The resource_info of this RuleViolationInfo.
        :param rule_info: The rule_info of this RuleViolationInfo.
        :param suppressed_action_types: The suppressed_action_types of this RuleViolationInfo.
        :param trigger: The trigger of this RuleViolationInfo.
        :param triggered_action_info: The triggered_action_info of this RuleViolationInfo.
        :param triggered_action_types: The triggered_action_types of this RuleViolationInfo.
        :param triggering_user_email: The triggering_user_email of this RuleViolationInfo.
        """
        self.openapi_types = {
            'data_source': str,
            'match_info': List[MatchInfo],
            'recipients': List[str],
            'resource_info': ResourceInfo,
            'rule_info': RuleInfo,
            'suppressed_action_types': List[str],
            'trigger': str,
            'triggered_action_info': List[object],
            'triggered_action_types': List[str],
            'triggering_user_email': str
        }

        self.attribute_map = {
            'data_source': 'dataSource',
            'match_info': 'matchInfo',
            'recipients': 'recipients',
            'resource_info': 'resourceInfo',
            'rule_info': 'ruleInfo',
            'suppressed_action_types': 'suppressedActionTypes',
            'trigger': 'trigger',
            'triggered_action_info': 'triggeredActionInfo',
            'triggered_action_types': 'triggeredActionTypes',
            'triggering_user_email': 'triggeringUserEmail'
        }

        self._data_source = data_source
        self._match_info = match_info
        self._recipients = recipients
        self._resource_info = resource_info
        self._rule_info = rule_info
        self._suppressed_action_types = suppressed_action_types
        self._trigger = trigger
        self._triggered_action_info = triggered_action_info
        self._triggered_action_types = triggered_action_types
        self._triggering_user_email = triggering_user_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleViolationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleViolationInfo of this RuleViolationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source(self):
        """Gets the data_source of this RuleViolationInfo.

        Source of the data.

        :return: The data_source of this RuleViolationInfo.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this RuleViolationInfo.

        Source of the data.

        :param data_source: The data_source of this RuleViolationInfo.
        :type data_source: str
        """
        allowed_values = ["DATA_SOURCE_UNSPECIFIED", "DRIVE"]  # noqa: E501
        if data_source not in allowed_values:
            raise ValueError(
                "Invalid value for `data_source` ({0}), must be one of {1}"
                .format(data_source, allowed_values)
            )

        self._data_source = data_source

    @property
    def match_info(self):
        """Gets the match_info of this RuleViolationInfo.

        List of matches that were found in the resource content.

        :return: The match_info of this RuleViolationInfo.
        :rtype: List[MatchInfo]
        """
        return self._match_info

    @match_info.setter
    def match_info(self, match_info):
        """Sets the match_info of this RuleViolationInfo.

        List of matches that were found in the resource content.

        :param match_info: The match_info of this RuleViolationInfo.
        :type match_info: List[MatchInfo]
        """

        self._match_info = match_info

    @property
    def recipients(self):
        """Gets the recipients of this RuleViolationInfo.

        Resource recipients. For Drive, they are grantees that the Drive file was shared with at the time of rule triggering. Valid values include user emails, group emails, domains, or 'anyone' if the file was publicly accessible. If the file was private the recipients list will be empty. For Gmail, they are emails of the users or groups that the Gmail message was sent to.

        :return: The recipients of this RuleViolationInfo.
        :rtype: List[str]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this RuleViolationInfo.

        Resource recipients. For Drive, they are grantees that the Drive file was shared with at the time of rule triggering. Valid values include user emails, group emails, domains, or 'anyone' if the file was publicly accessible. If the file was private the recipients list will be empty. For Gmail, they are emails of the users or groups that the Gmail message was sent to.

        :param recipients: The recipients of this RuleViolationInfo.
        :type recipients: List[str]
        """

        self._recipients = recipients

    @property
    def resource_info(self):
        """Gets the resource_info of this RuleViolationInfo.


        :return: The resource_info of this RuleViolationInfo.
        :rtype: ResourceInfo
        """
        return self._resource_info

    @resource_info.setter
    def resource_info(self, resource_info):
        """Sets the resource_info of this RuleViolationInfo.


        :param resource_info: The resource_info of this RuleViolationInfo.
        :type resource_info: ResourceInfo
        """

        self._resource_info = resource_info

    @property
    def rule_info(self):
        """Gets the rule_info of this RuleViolationInfo.


        :return: The rule_info of this RuleViolationInfo.
        :rtype: RuleInfo
        """
        return self._rule_info

    @rule_info.setter
    def rule_info(self, rule_info):
        """Sets the rule_info of this RuleViolationInfo.


        :param rule_info: The rule_info of this RuleViolationInfo.
        :type rule_info: RuleInfo
        """

        self._rule_info = rule_info

    @property
    def suppressed_action_types(self):
        """Gets the suppressed_action_types of this RuleViolationInfo.

        Actions suppressed due to other actions with higher priority.

        :return: The suppressed_action_types of this RuleViolationInfo.
        :rtype: List[str]
        """
        return self._suppressed_action_types

    @suppressed_action_types.setter
    def suppressed_action_types(self, suppressed_action_types):
        """Sets the suppressed_action_types of this RuleViolationInfo.

        Actions suppressed due to other actions with higher priority.

        :param suppressed_action_types: The suppressed_action_types of this RuleViolationInfo.
        :type suppressed_action_types: List[str]
        """
        allowed_values = ["ACTION_TYPE_UNSPECIFIED", "DRIVE_BLOCK_EXTERNAL_SHARING", "DRIVE_WARN_ON_EXTERNAL_SHARING", "DELETE_WEBPROTECT_EVIDENCE", "ALERT", "RULE_ACTIVATE", "RULE_DEACTIVATE"]  # noqa: E501
        if not set(suppressed_action_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `suppressed_action_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(suppressed_action_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._suppressed_action_types = suppressed_action_types

    @property
    def trigger(self):
        """Gets the trigger of this RuleViolationInfo.

        Trigger of the rule.

        :return: The trigger of this RuleViolationInfo.
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this RuleViolationInfo.

        Trigger of the rule.

        :param trigger: The trigger of this RuleViolationInfo.
        :type trigger: str
        """
        allowed_values = ["TRIGGER_UNSPECIFIED", "DRIVE_SHARE"]  # noqa: E501
        if trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger` ({0}), must be one of {1}"
                .format(trigger, allowed_values)
            )

        self._trigger = trigger

    @property
    def triggered_action_info(self):
        """Gets the triggered_action_info of this RuleViolationInfo.

        Metadata related to the triggered actions.

        :return: The triggered_action_info of this RuleViolationInfo.
        :rtype: List[object]
        """
        return self._triggered_action_info

    @triggered_action_info.setter
    def triggered_action_info(self, triggered_action_info):
        """Sets the triggered_action_info of this RuleViolationInfo.

        Metadata related to the triggered actions.

        :param triggered_action_info: The triggered_action_info of this RuleViolationInfo.
        :type triggered_action_info: List[object]
        """

        self._triggered_action_info = triggered_action_info

    @property
    def triggered_action_types(self):
        """Gets the triggered_action_types of this RuleViolationInfo.

        Actions applied as a consequence of the rule being triggered.

        :return: The triggered_action_types of this RuleViolationInfo.
        :rtype: List[str]
        """
        return self._triggered_action_types

    @triggered_action_types.setter
    def triggered_action_types(self, triggered_action_types):
        """Sets the triggered_action_types of this RuleViolationInfo.

        Actions applied as a consequence of the rule being triggered.

        :param triggered_action_types: The triggered_action_types of this RuleViolationInfo.
        :type triggered_action_types: List[str]
        """
        allowed_values = ["ACTION_TYPE_UNSPECIFIED", "DRIVE_BLOCK_EXTERNAL_SHARING", "DRIVE_WARN_ON_EXTERNAL_SHARING", "DELETE_WEBPROTECT_EVIDENCE", "ALERT", "RULE_ACTIVATE", "RULE_DEACTIVATE"]  # noqa: E501
        if not set(triggered_action_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `triggered_action_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(triggered_action_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._triggered_action_types = triggered_action_types

    @property
    def triggering_user_email(self):
        """Gets the triggering_user_email of this RuleViolationInfo.

        Email of the user who caused the violation. Value could be empty if not applicable, for example, a violation found by drive continuous scan.

        :return: The triggering_user_email of this RuleViolationInfo.
        :rtype: str
        """
        return self._triggering_user_email

    @triggering_user_email.setter
    def triggering_user_email(self, triggering_user_email):
        """Sets the triggering_user_email of this RuleViolationInfo.

        Email of the user who caused the violation. Value could be empty if not applicable, for example, a violation found by drive continuous scan.

        :param triggering_user_email: The triggering_user_email of this RuleViolationInfo.
        :type triggering_user_email: str
        """

        self._triggering_user_email = triggering_user_email
