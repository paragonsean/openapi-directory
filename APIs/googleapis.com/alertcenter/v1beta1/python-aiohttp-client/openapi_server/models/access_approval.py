# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.support_ticket import SupportTicket
from openapi_server import util


class AccessApproval(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, justification_reason: List[str]=None, office_location: str=None, products: List[str]=None, request_id: str=None, scope: str=None, tickets: List[SupportTicket]=None):
        """AccessApproval - a model defined in OpenAPI

        :param justification_reason: The justification_reason of this AccessApproval.
        :param office_location: The office_location of this AccessApproval.
        :param products: The products of this AccessApproval.
        :param request_id: The request_id of this AccessApproval.
        :param scope: The scope of this AccessApproval.
        :param tickets: The tickets of this AccessApproval.
        """
        self.openapi_types = {
            'justification_reason': List[str],
            'office_location': str,
            'products': List[str],
            'request_id': str,
            'scope': str,
            'tickets': List[SupportTicket]
        }

        self.attribute_map = {
            'justification_reason': 'justificationReason',
            'office_location': 'officeLocation',
            'products': 'products',
            'request_id': 'requestId',
            'scope': 'scope',
            'tickets': 'tickets'
        }

        self._justification_reason = justification_reason
        self._office_location = office_location
        self._products = products
        self._request_id = request_id
        self._scope = scope
        self._tickets = tickets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessApproval':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessApproval of this AccessApproval.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def justification_reason(self):
        """Gets the justification_reason of this AccessApproval.

        Justification for data access based on justification enums.

        :return: The justification_reason of this AccessApproval.
        :rtype: List[str]
        """
        return self._justification_reason

    @justification_reason.setter
    def justification_reason(self, justification_reason):
        """Sets the justification_reason of this AccessApproval.

        Justification for data access based on justification enums.

        :param justification_reason: The justification_reason of this AccessApproval.
        :type justification_reason: List[str]
        """
        allowed_values = ["JUSTIFICATION_UNSPECIFIED", "CUSTOMER_INITIATED_SUPPORT", "GOOGLE_INITIATED_REVIEW", "GOOGLE_INITIATED_SERVICE", "THIRD_PARTY_DATA_REQUEST", "GOOGLE_RESPONSE_TO_PRODUCTION_ALERT"]  # noqa: E501
        if not set(justification_reason).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `justification_reason` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(justification_reason) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._justification_reason = justification_reason

    @property
    def office_location(self):
        """Gets the office_location of this AccessApproval.

        Office location of Google staff requesting access such as \"US\".

        :return: The office_location of this AccessApproval.
        :rtype: str
        """
        return self._office_location

    @office_location.setter
    def office_location(self, office_location):
        """Sets the office_location of this AccessApproval.

        Office location of Google staff requesting access such as \"US\".

        :param office_location: The office_location of this AccessApproval.
        :type office_location: str
        """

        self._office_location = office_location

    @property
    def products(self):
        """Gets the products of this AccessApproval.

        Products within scope of the Access Approvals request.

        :return: The products of this AccessApproval.
        :rtype: List[str]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this AccessApproval.

        Products within scope of the Access Approvals request.

        :param products: The products of this AccessApproval.
        :type products: List[str]
        """

        self._products = products

    @property
    def request_id(self):
        """Gets the request_id of this AccessApproval.

        ID of the Access Approvals request. This is a helpful field when requesting support from Google.

        :return: The request_id of this AccessApproval.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this AccessApproval.

        ID of the Access Approvals request. This is a helpful field when requesting support from Google.

        :param request_id: The request_id of this AccessApproval.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def scope(self):
        """Gets the scope of this AccessApproval.

        Scope of access, also known as a resource. This is further narrowed down by the product field.

        :return: The scope of this AccessApproval.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AccessApproval.

        Scope of access, also known as a resource. This is further narrowed down by the product field.

        :param scope: The scope of this AccessApproval.
        :type scope: str
        """

        self._scope = scope

    @property
    def tickets(self):
        """Gets the tickets of this AccessApproval.

        Support tickets related to this Access Approvals request. Populated if there is an associated case number.

        :return: The tickets of this AccessApproval.
        :rtype: List[SupportTicket]
        """
        return self._tickets

    @tickets.setter
    def tickets(self, tickets):
        """Sets the tickets of this AccessApproval.

        Support tickets related to this Access Approvals request. Populated if there is an associated case number.

        :param tickets: The tickets of this AccessApproval.
        :type tickets: List[SupportTicket]
        """

        self._tickets = tickets
