# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alert_metadata import AlertMetadata
from openapi_server import util


class Alert(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_id: str=None, create_time: str=None, customer_id: str=None, data: Dict[str, object]=None, deleted: bool=None, end_time: str=None, etag: str=None, metadata: AlertMetadata=None, security_investigation_tool_link: str=None, source: str=None, start_time: str=None, type: str=None, update_time: str=None):
        """Alert - a model defined in OpenAPI

        :param alert_id: The alert_id of this Alert.
        :param create_time: The create_time of this Alert.
        :param customer_id: The customer_id of this Alert.
        :param data: The data of this Alert.
        :param deleted: The deleted of this Alert.
        :param end_time: The end_time of this Alert.
        :param etag: The etag of this Alert.
        :param metadata: The metadata of this Alert.
        :param security_investigation_tool_link: The security_investigation_tool_link of this Alert.
        :param source: The source of this Alert.
        :param start_time: The start_time of this Alert.
        :param type: The type of this Alert.
        :param update_time: The update_time of this Alert.
        """
        self.openapi_types = {
            'alert_id': str,
            'create_time': str,
            'customer_id': str,
            'data': Dict[str, object],
            'deleted': bool,
            'end_time': str,
            'etag': str,
            'metadata': AlertMetadata,
            'security_investigation_tool_link': str,
            'source': str,
            'start_time': str,
            'type': str,
            'update_time': str
        }

        self.attribute_map = {
            'alert_id': 'alertId',
            'create_time': 'createTime',
            'customer_id': 'customerId',
            'data': 'data',
            'deleted': 'deleted',
            'end_time': 'endTime',
            'etag': 'etag',
            'metadata': 'metadata',
            'security_investigation_tool_link': 'securityInvestigationToolLink',
            'source': 'source',
            'start_time': 'startTime',
            'type': 'type',
            'update_time': 'updateTime'
        }

        self._alert_id = alert_id
        self._create_time = create_time
        self._customer_id = customer_id
        self._data = data
        self._deleted = deleted
        self._end_time = end_time
        self._etag = etag
        self._metadata = metadata
        self._security_investigation_tool_link = security_investigation_tool_link
        self._source = source
        self._start_time = start_time
        self._type = type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Alert':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Alert of this Alert.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_id(self):
        """Gets the alert_id of this Alert.

        Output only. The unique identifier for the alert.

        :return: The alert_id of this Alert.
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this Alert.

        Output only. The unique identifier for the alert.

        :param alert_id: The alert_id of this Alert.
        :type alert_id: str
        """

        self._alert_id = alert_id

    @property
    def create_time(self):
        """Gets the create_time of this Alert.

        Output only. The time this alert was created.

        :return: The create_time of this Alert.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Alert.

        Output only. The time this alert was created.

        :param create_time: The create_time of this Alert.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def customer_id(self):
        """Gets the customer_id of this Alert.

        Output only. The unique identifier of the Google Workspace account of the customer.

        :return: The customer_id of this Alert.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Alert.

        Output only. The unique identifier of the Google Workspace account of the customer.

        :param customer_id: The customer_id of this Alert.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def data(self):
        """Gets the data of this Alert.

        Optional. The data associated with this alert, for example google.apps.alertcenter.type.DeviceCompromised.

        :return: The data of this Alert.
        :rtype: Dict[str, object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Alert.

        Optional. The data associated with this alert, for example google.apps.alertcenter.type.DeviceCompromised.

        :param data: The data of this Alert.
        :type data: Dict[str, object]
        """

        self._data = data

    @property
    def deleted(self):
        """Gets the deleted of this Alert.

        Output only. `True` if this alert is marked for deletion.

        :return: The deleted of this Alert.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Alert.

        Output only. `True` if this alert is marked for deletion.

        :param deleted: The deleted of this Alert.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def end_time(self):
        """Gets the end_time of this Alert.

        Optional. The time the event that caused this alert ceased being active. If provided, the end time must not be earlier than the start time. If not provided, it indicates an ongoing alert.

        :return: The end_time of this Alert.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Alert.

        Optional. The time the event that caused this alert ceased being active. If provided, the end time must not be earlier than the start time. If not provided, it indicates an ongoing alert.

        :param end_time: The end_time of this Alert.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def etag(self):
        """Gets the etag of this Alert.

        Optional. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of an alert from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform alert updates in order to avoid race conditions: An `etag` is returned in the response which contains alerts, and systems are expected to put that etag in the request to update alert to ensure that their change will be applied to the same version of the alert. If no `etag` is provided in the call to update alert, then the existing alert is overwritten blindly.

        :return: The etag of this Alert.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Alert.

        Optional. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of an alert from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform alert updates in order to avoid race conditions: An `etag` is returned in the response which contains alerts, and systems are expected to put that etag in the request to update alert to ensure that their change will be applied to the same version of the alert. If no `etag` is provided in the call to update alert, then the existing alert is overwritten blindly.

        :param etag: The etag of this Alert.
        :type etag: str
        """

        self._etag = etag

    @property
    def metadata(self):
        """Gets the metadata of this Alert.


        :return: The metadata of this Alert.
        :rtype: AlertMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Alert.


        :param metadata: The metadata of this Alert.
        :type metadata: AlertMetadata
        """

        self._metadata = metadata

    @property
    def security_investigation_tool_link(self):
        """Gets the security_investigation_tool_link of this Alert.

        Output only. An optional [Security Investigation Tool](https://support.google.com/a/answer/7575955) query for this alert.

        :return: The security_investigation_tool_link of this Alert.
        :rtype: str
        """
        return self._security_investigation_tool_link

    @security_investigation_tool_link.setter
    def security_investigation_tool_link(self, security_investigation_tool_link):
        """Sets the security_investigation_tool_link of this Alert.

        Output only. An optional [Security Investigation Tool](https://support.google.com/a/answer/7575955) query for this alert.

        :param security_investigation_tool_link: The security_investigation_tool_link of this Alert.
        :type security_investigation_tool_link: str
        """

        self._security_investigation_tool_link = security_investigation_tool_link

    @property
    def source(self):
        """Gets the source of this Alert.

        Required. A unique identifier for the system that reported the alert. This is output only after alert is created. Supported sources are any of the following: * Google Operations * Mobile device management * Gmail phishing * Data Loss Prevention * Domain wide takeout * State sponsored attack * Google identity * Apps outage

        :return: The source of this Alert.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Alert.

        Required. A unique identifier for the system that reported the alert. This is output only after alert is created. Supported sources are any of the following: * Google Operations * Mobile device management * Gmail phishing * Data Loss Prevention * Domain wide takeout * State sponsored attack * Google identity * Apps outage

        :param source: The source of this Alert.
        :type source: str
        """

        self._source = source

    @property
    def start_time(self):
        """Gets the start_time of this Alert.

        Required. The time the event that caused this alert was started or detected.

        :return: The start_time of this Alert.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Alert.

        Required. The time the event that caused this alert was started or detected.

        :param start_time: The start_time of this Alert.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def type(self):
        """Gets the type of this Alert.

        Required. The type of the alert. This is output only after alert is created. For a list of available alert types see [Google Workspace Alert types](https://developers.google.com/admin-sdk/alertcenter/reference/alert-types).

        :return: The type of this Alert.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Alert.

        Required. The type of the alert. This is output only after alert is created. For a list of available alert types see [Google Workspace Alert types](https://developers.google.com/admin-sdk/alertcenter/reference/alert-types).

        :param type: The type of this Alert.
        :type type: str
        """

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this Alert.

        Output only. The time this alert was last updated.

        :return: The update_time of this Alert.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Alert.

        Output only. The time this alert was last updated.

        :param update_time: The update_time of this Alert.
        :type update_time: str
        """

        self._update_time = update_time
