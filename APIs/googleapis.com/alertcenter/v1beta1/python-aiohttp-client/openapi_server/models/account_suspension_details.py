# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountSuspensionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abuse_reason: str=None, product_name: str=None):
        """AccountSuspensionDetails - a model defined in OpenAPI

        :param abuse_reason: The abuse_reason of this AccountSuspensionDetails.
        :param product_name: The product_name of this AccountSuspensionDetails.
        """
        self.openapi_types = {
            'abuse_reason': str,
            'product_name': str
        }

        self.attribute_map = {
            'abuse_reason': 'abuseReason',
            'product_name': 'productName'
        }

        self._abuse_reason = abuse_reason
        self._product_name = product_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountSuspensionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountSuspensionDetails of this AccountSuspensionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abuse_reason(self):
        """Gets the abuse_reason of this AccountSuspensionDetails.

        The reason why this account is receiving an account suspension warning.

        :return: The abuse_reason of this AccountSuspensionDetails.
        :rtype: str
        """
        return self._abuse_reason

    @abuse_reason.setter
    def abuse_reason(self, abuse_reason):
        """Sets the abuse_reason of this AccountSuspensionDetails.

        The reason why this account is receiving an account suspension warning.

        :param abuse_reason: The abuse_reason of this AccountSuspensionDetails.
        :type abuse_reason: str
        """
        allowed_values = ["ACCOUNT_SUSPENSION_ABUSE_REASON_UNSPECIFIED", "TOS_VIOLATION", "SPAM", "PHISHING", "TRAFFIC_PUMPING", "FRAUD", "NUMBER_HARVESTING", "PAYMENTS_FRAUD", "UNWANTED_CONTENT"]  # noqa: E501
        if abuse_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `abuse_reason` ({0}), must be one of {1}"
                .format(abuse_reason, allowed_values)
            )

        self._abuse_reason = abuse_reason

    @property
    def product_name(self):
        """Gets the product_name of this AccountSuspensionDetails.

        The name of the product being abused. This is restricted to only the following values: \"Gmail\" \"Google Workspace\" \"Payments\" \"Voice\" \"YouTube\" \"Other\"

        :return: The product_name of this AccountSuspensionDetails.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this AccountSuspensionDetails.

        The name of the product being abused. This is restricted to only the following values: \"Gmail\" \"Google Workspace\" \"Payments\" \"Voice\" \"YouTube\" \"Other\"

        :param product_name: The product_name of this AccountSuspensionDetails.
        :type product_name: str
        """

        self._product_name = product_name
