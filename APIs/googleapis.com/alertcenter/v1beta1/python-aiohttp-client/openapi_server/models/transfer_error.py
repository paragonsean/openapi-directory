# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransferError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, entity_type: str=None, id: str=None, invalid_reason: str=None, name: str=None):
        """TransferError - a model defined in OpenAPI

        :param email: The email of this TransferError.
        :param entity_type: The entity_type of this TransferError.
        :param id: The id of this TransferError.
        :param invalid_reason: The invalid_reason of this TransferError.
        :param name: The name of this TransferError.
        """
        self.openapi_types = {
            'email': str,
            'entity_type': str,
            'id': str,
            'invalid_reason': str,
            'name': str
        }

        self.attribute_map = {
            'email': 'email',
            'entity_type': 'entityType',
            'id': 'id',
            'invalid_reason': 'invalidReason',
            'name': 'name'
        }

        self._email = email
        self._entity_type = entity_type
        self._id = id
        self._invalid_reason = invalid_reason
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferError of this TransferError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this TransferError.

        User's email address. This may be unavailable if the entity was deleted.

        :return: The email of this TransferError.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this TransferError.

        User's email address. This may be unavailable if the entity was deleted.

        :param email: The email of this TransferError.
        :type email: str
        """

        self._email = email

    @property
    def entity_type(self):
        """Gets the entity_type of this TransferError.

        Type of entity being transferred to. For ring group members, this should always be USER.

        :return: The entity_type of this TransferError.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this TransferError.

        Type of entity being transferred to. For ring group members, this should always be USER.

        :param entity_type: The entity_type of this TransferError.
        :type entity_type: str
        """
        allowed_values = ["TRANSFER_ENTITY_TYPE_UNSPECIFIED", "TRANSFER_AUTO_ATTENDANT", "TRANSFER_RING_GROUP", "TRANSFER_USER"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def id(self):
        """Gets the id of this TransferError.

        Ring group or auto attendant ID. Not set for users.

        :return: The id of this TransferError.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransferError.

        Ring group or auto attendant ID. Not set for users.

        :param id: The id of this TransferError.
        :type id: str
        """

        self._id = id

    @property
    def invalid_reason(self):
        """Gets the invalid_reason of this TransferError.

        Reason for the error.

        :return: The invalid_reason of this TransferError.
        :rtype: str
        """
        return self._invalid_reason

    @invalid_reason.setter
    def invalid_reason(self, invalid_reason):
        """Sets the invalid_reason of this TransferError.

        Reason for the error.

        :param invalid_reason: The invalid_reason of this TransferError.
        :type invalid_reason: str
        """
        allowed_values = ["TRANSFER_INVALID_REASON_UNSPECIFIED", "TRANSFER_TARGET_DELETED", "UNLICENSED", "SUSPENDED", "NO_PHONE_NUMBER"]  # noqa: E501
        if invalid_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `invalid_reason` ({0}), must be one of {1}"
                .format(invalid_reason, allowed_values)
            )

        self._invalid_reason = invalid_reason

    @property
    def name(self):
        """Gets the name of this TransferError.

        User's full name, or the ring group / auto attendant name. This may be unavailable if the entity was deleted.

        :return: The name of this TransferError.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TransferError.

        User's full name, or the ring group / auto attendant name. This may be unavailable if the entity was deleted.

        :param name: The name of this TransferError.
        :type name: str
        """

        self._name = name
