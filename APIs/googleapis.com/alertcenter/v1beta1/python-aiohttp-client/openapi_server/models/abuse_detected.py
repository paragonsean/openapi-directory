# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_list import EntityList
from openapi_server import util


class AbuseDetected(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_details: EntityList=None, product: str=None, sub_alert_id: str=None, variation_type: str=None):
        """AbuseDetected - a model defined in OpenAPI

        :param additional_details: The additional_details of this AbuseDetected.
        :param product: The product of this AbuseDetected.
        :param sub_alert_id: The sub_alert_id of this AbuseDetected.
        :param variation_type: The variation_type of this AbuseDetected.
        """
        self.openapi_types = {
            'additional_details': EntityList,
            'product': str,
            'sub_alert_id': str,
            'variation_type': str
        }

        self.attribute_map = {
            'additional_details': 'additionalDetails',
            'product': 'product',
            'sub_alert_id': 'subAlertId',
            'variation_type': 'variationType'
        }

        self._additional_details = additional_details
        self._product = product
        self._sub_alert_id = sub_alert_id
        self._variation_type = variation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AbuseDetected':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AbuseDetected of this AbuseDetected.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_details(self):
        """Gets the additional_details of this AbuseDetected.


        :return: The additional_details of this AbuseDetected.
        :rtype: EntityList
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this AbuseDetected.


        :param additional_details: The additional_details of this AbuseDetected.
        :type additional_details: EntityList
        """

        self._additional_details = additional_details

    @property
    def product(self):
        """Gets the product of this AbuseDetected.

        Product that the abuse is originating from.

        :return: The product of this AbuseDetected.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this AbuseDetected.

        Product that the abuse is originating from.

        :param product: The product of this AbuseDetected.
        :type product: str
        """

        self._product = product

    @property
    def sub_alert_id(self):
        """Gets the sub_alert_id of this AbuseDetected.

        Unique identifier of each sub alert that is onboarded.

        :return: The sub_alert_id of this AbuseDetected.
        :rtype: str
        """
        return self._sub_alert_id

    @sub_alert_id.setter
    def sub_alert_id(self, sub_alert_id):
        """Sets the sub_alert_id of this AbuseDetected.

        Unique identifier of each sub alert that is onboarded.

        :param sub_alert_id: The sub_alert_id of this AbuseDetected.
        :type sub_alert_id: str
        """

        self._sub_alert_id = sub_alert_id

    @property
    def variation_type(self):
        """Gets the variation_type of this AbuseDetected.

        Variation of AbuseDetected alerts. The variation_type determines the texts displayed the alert details. This differs from sub_alert_id because each sub alert can have multiple variation_types, representing different stages of the alert.

        :return: The variation_type of this AbuseDetected.
        :rtype: str
        """
        return self._variation_type

    @variation_type.setter
    def variation_type(self, variation_type):
        """Sets the variation_type of this AbuseDetected.

        Variation of AbuseDetected alerts. The variation_type determines the texts displayed the alert details. This differs from sub_alert_id because each sub alert can have multiple variation_types, representing different stages of the alert.

        :param variation_type: The variation_type of this AbuseDetected.
        :type variation_type: str
        """
        allowed_values = ["ABUSE_DETECTED_VARIATION_TYPE_UNSPECIFIED", "DRIVE_ABUSIVE_CONTENT", "LIMITED_DISABLE"]  # noqa: E501
        if variation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `variation_type` ({0}), must be one of {1}"
                .format(variation_type, allowed_values)
            )

        self._variation_type = variation_type
