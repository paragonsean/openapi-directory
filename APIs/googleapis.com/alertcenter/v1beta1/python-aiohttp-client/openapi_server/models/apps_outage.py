# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.merge_info import MergeInfo
from openapi_server import util


class AppsOutage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dashboard_uri: str=None, incident_tracking_id: str=None, merge_info: MergeInfo=None, next_update_time: str=None, products: List[str]=None, resolution_time: str=None, status: str=None):
        """AppsOutage - a model defined in OpenAPI

        :param dashboard_uri: The dashboard_uri of this AppsOutage.
        :param incident_tracking_id: The incident_tracking_id of this AppsOutage.
        :param merge_info: The merge_info of this AppsOutage.
        :param next_update_time: The next_update_time of this AppsOutage.
        :param products: The products of this AppsOutage.
        :param resolution_time: The resolution_time of this AppsOutage.
        :param status: The status of this AppsOutage.
        """
        self.openapi_types = {
            'dashboard_uri': str,
            'incident_tracking_id': str,
            'merge_info': MergeInfo,
            'next_update_time': str,
            'products': List[str],
            'resolution_time': str,
            'status': str
        }

        self.attribute_map = {
            'dashboard_uri': 'dashboardUri',
            'incident_tracking_id': 'incidentTrackingId',
            'merge_info': 'mergeInfo',
            'next_update_time': 'nextUpdateTime',
            'products': 'products',
            'resolution_time': 'resolutionTime',
            'status': 'status'
        }

        self._dashboard_uri = dashboard_uri
        self._incident_tracking_id = incident_tracking_id
        self._merge_info = merge_info
        self._next_update_time = next_update_time
        self._products = products
        self._resolution_time = resolution_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppsOutage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppsOutage of this AppsOutage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dashboard_uri(self):
        """Gets the dashboard_uri of this AppsOutage.

        Link to the outage event in Google Workspace Status Dashboard

        :return: The dashboard_uri of this AppsOutage.
        :rtype: str
        """
        return self._dashboard_uri

    @dashboard_uri.setter
    def dashboard_uri(self, dashboard_uri):
        """Sets the dashboard_uri of this AppsOutage.

        Link to the outage event in Google Workspace Status Dashboard

        :param dashboard_uri: The dashboard_uri of this AppsOutage.
        :type dashboard_uri: str
        """

        self._dashboard_uri = dashboard_uri

    @property
    def incident_tracking_id(self):
        """Gets the incident_tracking_id of this AppsOutage.

        Incident tracking ID.

        :return: The incident_tracking_id of this AppsOutage.
        :rtype: str
        """
        return self._incident_tracking_id

    @incident_tracking_id.setter
    def incident_tracking_id(self, incident_tracking_id):
        """Sets the incident_tracking_id of this AppsOutage.

        Incident tracking ID.

        :param incident_tracking_id: The incident_tracking_id of this AppsOutage.
        :type incident_tracking_id: str
        """

        self._incident_tracking_id = incident_tracking_id

    @property
    def merge_info(self):
        """Gets the merge_info of this AppsOutage.


        :return: The merge_info of this AppsOutage.
        :rtype: MergeInfo
        """
        return self._merge_info

    @merge_info.setter
    def merge_info(self, merge_info):
        """Sets the merge_info of this AppsOutage.


        :param merge_info: The merge_info of this AppsOutage.
        :type merge_info: MergeInfo
        """

        self._merge_info = merge_info

    @property
    def next_update_time(self):
        """Gets the next_update_time of this AppsOutage.

        Timestamp by which the next update is expected to arrive.

        :return: The next_update_time of this AppsOutage.
        :rtype: str
        """
        return self._next_update_time

    @next_update_time.setter
    def next_update_time(self, next_update_time):
        """Sets the next_update_time of this AppsOutage.

        Timestamp by which the next update is expected to arrive.

        :param next_update_time: The next_update_time of this AppsOutage.
        :type next_update_time: str
        """

        self._next_update_time = next_update_time

    @property
    def products(self):
        """Gets the products of this AppsOutage.

        List of products impacted by the outage.

        :return: The products of this AppsOutage.
        :rtype: List[str]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this AppsOutage.

        List of products impacted by the outage.

        :param products: The products of this AppsOutage.
        :type products: List[str]
        """

        self._products = products

    @property
    def resolution_time(self):
        """Gets the resolution_time of this AppsOutage.

        Timestamp when the outage is expected to be resolved, or has confirmed resolution. Provided only when known.

        :return: The resolution_time of this AppsOutage.
        :rtype: str
        """
        return self._resolution_time

    @resolution_time.setter
    def resolution_time(self, resolution_time):
        """Sets the resolution_time of this AppsOutage.

        Timestamp when the outage is expected to be resolved, or has confirmed resolution. Provided only when known.

        :param resolution_time: The resolution_time of this AppsOutage.
        :type resolution_time: str
        """

        self._resolution_time = resolution_time

    @property
    def status(self):
        """Gets the status of this AppsOutage.

        Current outage status.

        :return: The status of this AppsOutage.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AppsOutage.

        Current outage status.

        :param status: The status of this AppsOutage.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "NEW", "ONGOING", "RESOLVED", "FALSE_POSITIVE", "PARTIALLY_RESOLVED", "MERGED", "DOWNGRADED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
