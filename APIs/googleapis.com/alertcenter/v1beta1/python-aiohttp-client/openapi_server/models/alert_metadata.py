# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlertMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_id: str=None, assignee: str=None, customer_id: str=None, etag: str=None, severity: str=None, status: str=None, update_time: str=None):
        """AlertMetadata - a model defined in OpenAPI

        :param alert_id: The alert_id of this AlertMetadata.
        :param assignee: The assignee of this AlertMetadata.
        :param customer_id: The customer_id of this AlertMetadata.
        :param etag: The etag of this AlertMetadata.
        :param severity: The severity of this AlertMetadata.
        :param status: The status of this AlertMetadata.
        :param update_time: The update_time of this AlertMetadata.
        """
        self.openapi_types = {
            'alert_id': str,
            'assignee': str,
            'customer_id': str,
            'etag': str,
            'severity': str,
            'status': str,
            'update_time': str
        }

        self.attribute_map = {
            'alert_id': 'alertId',
            'assignee': 'assignee',
            'customer_id': 'customerId',
            'etag': 'etag',
            'severity': 'severity',
            'status': 'status',
            'update_time': 'updateTime'
        }

        self._alert_id = alert_id
        self._assignee = assignee
        self._customer_id = customer_id
        self._etag = etag
        self._severity = severity
        self._status = status
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertMetadata of this AlertMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_id(self):
        """Gets the alert_id of this AlertMetadata.

        Output only. The alert identifier.

        :return: The alert_id of this AlertMetadata.
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this AlertMetadata.

        Output only. The alert identifier.

        :param alert_id: The alert_id of this AlertMetadata.
        :type alert_id: str
        """

        self._alert_id = alert_id

    @property
    def assignee(self):
        """Gets the assignee of this AlertMetadata.

        The email address of the user assigned to the alert.

        :return: The assignee of this AlertMetadata.
        :rtype: str
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this AlertMetadata.

        The email address of the user assigned to the alert.

        :param assignee: The assignee of this AlertMetadata.
        :type assignee: str
        """

        self._assignee = assignee

    @property
    def customer_id(self):
        """Gets the customer_id of this AlertMetadata.

        Output only. The unique identifier of the Google Workspace account of the customer.

        :return: The customer_id of this AlertMetadata.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this AlertMetadata.

        Output only. The unique identifier of the Google Workspace account of the customer.

        :param customer_id: The customer_id of this AlertMetadata.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def etag(self):
        """Gets the etag of this AlertMetadata.

        Optional. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of an alert metadata from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform metadata updates in order to avoid race conditions: An `etag` is returned in the response which contains alert metadata, and systems are expected to put that etag in the request to update alert metadata to ensure that their change will be applied to the same version of the alert metadata. If no `etag` is provided in the call to update alert metadata, then the existing alert metadata is overwritten blindly.

        :return: The etag of this AlertMetadata.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this AlertMetadata.

        Optional. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of an alert metadata from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform metadata updates in order to avoid race conditions: An `etag` is returned in the response which contains alert metadata, and systems are expected to put that etag in the request to update alert metadata to ensure that their change will be applied to the same version of the alert metadata. If no `etag` is provided in the call to update alert metadata, then the existing alert metadata is overwritten blindly.

        :param etag: The etag of this AlertMetadata.
        :type etag: str
        """

        self._etag = etag

    @property
    def severity(self):
        """Gets the severity of this AlertMetadata.

        The severity value of the alert. Alert Center will set this field at alert creation time, default's to an empty string when it could not be determined. The supported values for update actions on this field are the following: * HIGH * MEDIUM * LOW

        :return: The severity of this AlertMetadata.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this AlertMetadata.

        The severity value of the alert. Alert Center will set this field at alert creation time, default's to an empty string when it could not be determined. The supported values for update actions on this field are the following: * HIGH * MEDIUM * LOW

        :param severity: The severity of this AlertMetadata.
        :type severity: str
        """

        self._severity = severity

    @property
    def status(self):
        """Gets the status of this AlertMetadata.

        The current status of the alert. The supported values are the following: * NOT_STARTED * IN_PROGRESS * CLOSED

        :return: The status of this AlertMetadata.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AlertMetadata.

        The current status of the alert. The supported values are the following: * NOT_STARTED * IN_PROGRESS * CLOSED

        :param status: The status of this AlertMetadata.
        :type status: str
        """

        self._status = status

    @property
    def update_time(self):
        """Gets the update_time of this AlertMetadata.

        Output only. The time this metadata was last updated.

        :return: The update_time of this AlertMetadata.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this AlertMetadata.

        Output only. The time this metadata was last updated.

        :param update_time: The update_time of this AlertMetadata.
        :type update_time: str
        """

        self._update_time = update_time
