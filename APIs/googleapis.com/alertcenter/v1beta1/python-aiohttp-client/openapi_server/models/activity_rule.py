# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActivityRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_names: List[str]=None, create_time: str=None, description: str=None, display_name: str=None, name: str=None, query: str=None, superseded_alerts: List[str]=None, superseding_alert: str=None, threshold: str=None, trigger_source: str=None, update_time: str=None, window_size: str=None):
        """ActivityRule - a model defined in OpenAPI

        :param action_names: The action_names of this ActivityRule.
        :param create_time: The create_time of this ActivityRule.
        :param description: The description of this ActivityRule.
        :param display_name: The display_name of this ActivityRule.
        :param name: The name of this ActivityRule.
        :param query: The query of this ActivityRule.
        :param superseded_alerts: The superseded_alerts of this ActivityRule.
        :param superseding_alert: The superseding_alert of this ActivityRule.
        :param threshold: The threshold of this ActivityRule.
        :param trigger_source: The trigger_source of this ActivityRule.
        :param update_time: The update_time of this ActivityRule.
        :param window_size: The window_size of this ActivityRule.
        """
        self.openapi_types = {
            'action_names': List[str],
            'create_time': str,
            'description': str,
            'display_name': str,
            'name': str,
            'query': str,
            'superseded_alerts': List[str],
            'superseding_alert': str,
            'threshold': str,
            'trigger_source': str,
            'update_time': str,
            'window_size': str
        }

        self.attribute_map = {
            'action_names': 'actionNames',
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'name': 'name',
            'query': 'query',
            'superseded_alerts': 'supersededAlerts',
            'superseding_alert': 'supersedingAlert',
            'threshold': 'threshold',
            'trigger_source': 'triggerSource',
            'update_time': 'updateTime',
            'window_size': 'windowSize'
        }

        self._action_names = action_names
        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._name = name
        self._query = query
        self._superseded_alerts = superseded_alerts
        self._superseding_alert = superseding_alert
        self._threshold = threshold
        self._trigger_source = trigger_source
        self._update_time = update_time
        self._window_size = window_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityRule of this ActivityRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_names(self):
        """Gets the action_names of this ActivityRule.

        List of action names associated with the rule threshold.

        :return: The action_names of this ActivityRule.
        :rtype: List[str]
        """
        return self._action_names

    @action_names.setter
    def action_names(self, action_names):
        """Sets the action_names of this ActivityRule.

        List of action names associated with the rule threshold.

        :param action_names: The action_names of this ActivityRule.
        :type action_names: List[str]
        """

        self._action_names = action_names

    @property
    def create_time(self):
        """Gets the create_time of this ActivityRule.

        Rule create timestamp.

        :return: The create_time of this ActivityRule.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ActivityRule.

        Rule create timestamp.

        :param create_time: The create_time of this ActivityRule.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ActivityRule.

        Description of the rule.

        :return: The description of this ActivityRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivityRule.

        Description of the rule.

        :param description: The description of this ActivityRule.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ActivityRule.

        Alert display name.

        :return: The display_name of this ActivityRule.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ActivityRule.

        Alert display name.

        :param display_name: The display_name of this ActivityRule.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this ActivityRule.

        Rule name.

        :return: The name of this ActivityRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivityRule.

        Rule name.

        :param name: The name of this ActivityRule.
        :type name: str
        """

        self._name = name

    @property
    def query(self):
        """Gets the query of this ActivityRule.

        Query that is used to get the data from the associated source.

        :return: The query of this ActivityRule.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ActivityRule.

        Query that is used to get the data from the associated source.

        :param query: The query of this ActivityRule.
        :type query: str
        """

        self._query = query

    @property
    def superseded_alerts(self):
        """Gets the superseded_alerts of this ActivityRule.

        List of alert IDs superseded by this alert. It is used to indicate that this alert is essentially extension of superseded alerts and we found the relationship after creating these alerts.

        :return: The superseded_alerts of this ActivityRule.
        :rtype: List[str]
        """
        return self._superseded_alerts

    @superseded_alerts.setter
    def superseded_alerts(self, superseded_alerts):
        """Sets the superseded_alerts of this ActivityRule.

        List of alert IDs superseded by this alert. It is used to indicate that this alert is essentially extension of superseded alerts and we found the relationship after creating these alerts.

        :param superseded_alerts: The superseded_alerts of this ActivityRule.
        :type superseded_alerts: List[str]
        """

        self._superseded_alerts = superseded_alerts

    @property
    def superseding_alert(self):
        """Gets the superseding_alert of this ActivityRule.

        Alert ID superseding this alert. It is used to indicate that superseding alert is essentially extension of this alert and we found the relationship after creating both alerts.

        :return: The superseding_alert of this ActivityRule.
        :rtype: str
        """
        return self._superseding_alert

    @superseding_alert.setter
    def superseding_alert(self, superseding_alert):
        """Sets the superseding_alert of this ActivityRule.

        Alert ID superseding this alert. It is used to indicate that superseding alert is essentially extension of this alert and we found the relationship after creating both alerts.

        :param superseding_alert: The superseding_alert of this ActivityRule.
        :type superseding_alert: str
        """

        self._superseding_alert = superseding_alert

    @property
    def threshold(self):
        """Gets the threshold of this ActivityRule.

        Alert threshold is for example “COUNT > 5”.

        :return: The threshold of this ActivityRule.
        :rtype: str
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this ActivityRule.

        Alert threshold is for example “COUNT > 5”.

        :param threshold: The threshold of this ActivityRule.
        :type threshold: str
        """

        self._threshold = threshold

    @property
    def trigger_source(self):
        """Gets the trigger_source of this ActivityRule.

        The trigger sources for this rule. * GMAIL_EVENTS * DEVICE_EVENTS * USER_EVENTS

        :return: The trigger_source of this ActivityRule.
        :rtype: str
        """
        return self._trigger_source

    @trigger_source.setter
    def trigger_source(self, trigger_source):
        """Sets the trigger_source of this ActivityRule.

        The trigger sources for this rule. * GMAIL_EVENTS * DEVICE_EVENTS * USER_EVENTS

        :param trigger_source: The trigger_source of this ActivityRule.
        :type trigger_source: str
        """

        self._trigger_source = trigger_source

    @property
    def update_time(self):
        """Gets the update_time of this ActivityRule.

        The timestamp of the last update to the rule.

        :return: The update_time of this ActivityRule.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ActivityRule.

        The timestamp of the last update to the rule.

        :param update_time: The update_time of this ActivityRule.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def window_size(self):
        """Gets the window_size of this ActivityRule.

        Rule window size. Possible values are 1 hour or 24 hours.

        :return: The window_size of this ActivityRule.
        :rtype: str
        """
        return self._window_size

    @window_size.setter
    def window_size(self, window_size):
        """Sets the window_size of this ActivityRule.

        Rule window size. Possible values are 1 hour or 24 hours.

        :param window_size: The window_size of this ActivityRule.
        :type window_size: str
        """

        self._window_size = window_size
