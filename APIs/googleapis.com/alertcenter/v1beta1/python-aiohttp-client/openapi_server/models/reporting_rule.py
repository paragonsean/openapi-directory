# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportingRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_details: str=None, name: str=None, query: str=None):
        """ReportingRule - a model defined in OpenAPI

        :param alert_details: The alert_details of this ReportingRule.
        :param name: The name of this ReportingRule.
        :param query: The query of this ReportingRule.
        """
        self.openapi_types = {
            'alert_details': str,
            'name': str,
            'query': str
        }

        self.attribute_map = {
            'alert_details': 'alertDetails',
            'name': 'name',
            'query': 'query'
        }

        self._alert_details = alert_details
        self._name = name
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportingRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportingRule of this ReportingRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_details(self):
        """Gets the alert_details of this ReportingRule.

        Any other associated alert details, for example, AlertConfiguration.

        :return: The alert_details of this ReportingRule.
        :rtype: str
        """
        return self._alert_details

    @alert_details.setter
    def alert_details(self, alert_details):
        """Sets the alert_details of this ReportingRule.

        Any other associated alert details, for example, AlertConfiguration.

        :param alert_details: The alert_details of this ReportingRule.
        :type alert_details: str
        """

        self._alert_details = alert_details

    @property
    def name(self):
        """Gets the name of this ReportingRule.

        Rule name

        :return: The name of this ReportingRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportingRule.

        Rule name

        :param name: The name of this ReportingRule.
        :type name: str
        """

        self._name = name

    @property
    def query(self):
        """Gets the query of this ReportingRule.

        Alert Rule query Sample Query query { condition { filter { expected_application_id: 777491262838 expected_event_name: \"indexable_content_change\" filter_op: IN } } conjunction_operator: OR }

        :return: The query of this ReportingRule.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ReportingRule.

        Alert Rule query Sample Query query { condition { filter { expected_application_id: 777491262838 expected_event_name: \"indexable_content_change\" filter_op: IN } } conjunction_operator: OR }

        :param query: The query of this ReportingRule.
        :type query: str
        """

        self._query = query
