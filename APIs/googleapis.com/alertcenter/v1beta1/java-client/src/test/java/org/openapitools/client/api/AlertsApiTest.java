/*
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Alert;
import org.openapitools.client.model.AlertFeedback;
import org.openapitools.client.model.AlertMetadata;
import org.openapitools.client.model.BatchDeleteAlertsRequest;
import org.openapitools.client.model.BatchDeleteAlertsResponse;
import org.openapitools.client.model.BatchUndeleteAlertsRequest;
import org.openapitools.client.model.BatchUndeleteAlertsResponse;
import org.openapitools.client.model.ListAlertFeedbackResponse;
import org.openapitools.client.model.ListAlertsResponse;
import org.openapitools.client.model.UndeleteAlertRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AlertsApi
 */
@Disabled
public class AlertsApiTest {

    private final AlertsApi api = new AlertsApi();

    /**
     * Performs batch delete operation on alerts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertcenterAlertsBatchDeleteTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchDeleteAlertsRequest batchDeleteAlertsRequest = null;
        BatchDeleteAlertsResponse response = api.alertcenterAlertsBatchDelete($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchDeleteAlertsRequest);
        // TODO: test validations
    }

    /**
     * Performs batch undelete operation on alerts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertcenterAlertsBatchUndeleteTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchUndeleteAlertsRequest batchUndeleteAlertsRequest = null;
        BatchUndeleteAlertsResponse response = api.alertcenterAlertsBatchUndelete($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchUndeleteAlertsRequest);
        // TODO: test validations
    }

    /**
     * Marks the specified alert for deletion. An alert that has been marked for deletion is removed from Alert Center after 30 days. Marking an alert for deletion has no effect on an alert which has already been marked for deletion. Attempting to mark a nonexistent alert for deletion results in a &#x60;NOT_FOUND&#x60; error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertcenterAlertsDeleteTest() throws ApiException {
        String alertId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customerId = null;
        Object response = api.alertcenterAlertsDelete(alertId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customerId);
        // TODO: test validations
    }

    /**
     * Creates new feedback for an alert. Attempting to create a feedback for a non-existent alert returns &#x60;NOT_FOUND&#x60; error. Attempting to create a feedback for an alert that is marked for deletion returns &#x60;FAILED_PRECONDITION&#39; error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertcenterAlertsFeedbackCreateTest() throws ApiException {
        String alertId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customerId = null;
        AlertFeedback alertFeedback = null;
        AlertFeedback response = api.alertcenterAlertsFeedbackCreate(alertId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customerId, alertFeedback);
        // TODO: test validations
    }

    /**
     * Lists all the feedback for an alert. Attempting to list feedbacks for a non-existent alert returns &#x60;NOT_FOUND&#x60; error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertcenterAlertsFeedbackListTest() throws ApiException {
        String alertId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customerId = null;
        String filter = null;
        ListAlertFeedbackResponse response = api.alertcenterAlertsFeedbackList(alertId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customerId, filter);
        // TODO: test validations
    }

    /**
     * Gets the specified alert. Attempting to get a nonexistent alert returns &#x60;NOT_FOUND&#x60; error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertcenterAlertsGetTest() throws ApiException {
        String alertId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customerId = null;
        Alert response = api.alertcenterAlertsGet(alertId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customerId);
        // TODO: test validations
    }

    /**
     * Returns the metadata of an alert. Attempting to get metadata for a non-existent alert returns &#x60;NOT_FOUND&#x60; error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertcenterAlertsGetMetadataTest() throws ApiException {
        String alertId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customerId = null;
        AlertMetadata response = api.alertcenterAlertsGetMetadata(alertId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customerId);
        // TODO: test validations
    }

    /**
     * Lists the alerts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertcenterAlertsListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customerId = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAlertsResponse response = api.alertcenterAlertsList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customerId, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Restores, or \&quot;undeletes\&quot;, an alert that was marked for deletion within the past 30 days. Attempting to undelete an alert which was marked for deletion over 30 days ago (which has been removed from the Alert Center database) or a nonexistent alert returns a &#x60;NOT_FOUND&#x60; error. Attempting to undelete an alert which has not been marked for deletion has no effect.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertcenterAlertsUndeleteTest() throws ApiException {
        String alertId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UndeleteAlertRequest undeleteAlertRequest = null;
        Alert response = api.alertcenterAlertsUndelete(alertId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, undeleteAlertRequest);
        // TODO: test validations
    }

}
