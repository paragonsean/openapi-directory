/*
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Alerts from Google Workspace Security Center rules service configured by an admin.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:29.687014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivityRule {
  public static final String SERIALIZED_NAME_ACTION_NAMES = "actionNames";
  @SerializedName(SERIALIZED_NAME_ACTION_NAMES)
  private List<String> actionNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_SUPERSEDED_ALERTS = "supersededAlerts";
  @SerializedName(SERIALIZED_NAME_SUPERSEDED_ALERTS)
  private List<String> supersededAlerts = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPERSEDING_ALERT = "supersedingAlert";
  @SerializedName(SERIALIZED_NAME_SUPERSEDING_ALERT)
  private String supersedingAlert;

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private String threshold;

  public static final String SERIALIZED_NAME_TRIGGER_SOURCE = "triggerSource";
  @SerializedName(SERIALIZED_NAME_TRIGGER_SOURCE)
  private String triggerSource;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_WINDOW_SIZE = "windowSize";
  @SerializedName(SERIALIZED_NAME_WINDOW_SIZE)
  private String windowSize;

  public ActivityRule() {
  }

  public ActivityRule actionNames(List<String> actionNames) {
    this.actionNames = actionNames;
    return this;
  }

  public ActivityRule addActionNamesItem(String actionNamesItem) {
    if (this.actionNames == null) {
      this.actionNames = new ArrayList<>();
    }
    this.actionNames.add(actionNamesItem);
    return this;
  }

  /**
   * List of action names associated with the rule threshold.
   * @return actionNames
   */
  @javax.annotation.Nullable
  public List<String> getActionNames() {
    return actionNames;
  }

  public void setActionNames(List<String> actionNames) {
    this.actionNames = actionNames;
  }


  public ActivityRule createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Rule create timestamp.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public ActivityRule description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the rule.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ActivityRule displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Alert display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ActivityRule name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Rule name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ActivityRule query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Query that is used to get the data from the associated source.
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public ActivityRule supersededAlerts(List<String> supersededAlerts) {
    this.supersededAlerts = supersededAlerts;
    return this;
  }

  public ActivityRule addSupersededAlertsItem(String supersededAlertsItem) {
    if (this.supersededAlerts == null) {
      this.supersededAlerts = new ArrayList<>();
    }
    this.supersededAlerts.add(supersededAlertsItem);
    return this;
  }

  /**
   * List of alert IDs superseded by this alert. It is used to indicate that this alert is essentially extension of superseded alerts and we found the relationship after creating these alerts.
   * @return supersededAlerts
   */
  @javax.annotation.Nullable
  public List<String> getSupersededAlerts() {
    return supersededAlerts;
  }

  public void setSupersededAlerts(List<String> supersededAlerts) {
    this.supersededAlerts = supersededAlerts;
  }


  public ActivityRule supersedingAlert(String supersedingAlert) {
    this.supersedingAlert = supersedingAlert;
    return this;
  }

  /**
   * Alert ID superseding this alert. It is used to indicate that superseding alert is essentially extension of this alert and we found the relationship after creating both alerts.
   * @return supersedingAlert
   */
  @javax.annotation.Nullable
  public String getSupersedingAlert() {
    return supersedingAlert;
  }

  public void setSupersedingAlert(String supersedingAlert) {
    this.supersedingAlert = supersedingAlert;
  }


  public ActivityRule threshold(String threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * Alert threshold is for example “COUNT &gt; 5”.
   * @return threshold
   */
  @javax.annotation.Nullable
  public String getThreshold() {
    return threshold;
  }

  public void setThreshold(String threshold) {
    this.threshold = threshold;
  }


  public ActivityRule triggerSource(String triggerSource) {
    this.triggerSource = triggerSource;
    return this;
  }

  /**
   * The trigger sources for this rule. * GMAIL_EVENTS * DEVICE_EVENTS * USER_EVENTS
   * @return triggerSource
   */
  @javax.annotation.Nullable
  public String getTriggerSource() {
    return triggerSource;
  }

  public void setTriggerSource(String triggerSource) {
    this.triggerSource = triggerSource;
  }


  public ActivityRule updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * The timestamp of the last update to the rule.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  public ActivityRule windowSize(String windowSize) {
    this.windowSize = windowSize;
    return this;
  }

  /**
   * Rule window size. Possible values are 1 hour or 24 hours.
   * @return windowSize
   */
  @javax.annotation.Nullable
  public String getWindowSize() {
    return windowSize;
  }

  public void setWindowSize(String windowSize) {
    this.windowSize = windowSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityRule activityRule = (ActivityRule) o;
    return Objects.equals(this.actionNames, activityRule.actionNames) &&
        Objects.equals(this.createTime, activityRule.createTime) &&
        Objects.equals(this.description, activityRule.description) &&
        Objects.equals(this.displayName, activityRule.displayName) &&
        Objects.equals(this.name, activityRule.name) &&
        Objects.equals(this.query, activityRule.query) &&
        Objects.equals(this.supersededAlerts, activityRule.supersededAlerts) &&
        Objects.equals(this.supersedingAlert, activityRule.supersedingAlert) &&
        Objects.equals(this.threshold, activityRule.threshold) &&
        Objects.equals(this.triggerSource, activityRule.triggerSource) &&
        Objects.equals(this.updateTime, activityRule.updateTime) &&
        Objects.equals(this.windowSize, activityRule.windowSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionNames, createTime, description, displayName, name, query, supersededAlerts, supersedingAlert, threshold, triggerSource, updateTime, windowSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityRule {\n");
    sb.append("    actionNames: ").append(toIndentedString(actionNames)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    supersededAlerts: ").append(toIndentedString(supersededAlerts)).append("\n");
    sb.append("    supersedingAlert: ").append(toIndentedString(supersedingAlert)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    triggerSource: ").append(toIndentedString(triggerSource)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    windowSize: ").append(toIndentedString(windowSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionNames");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("query");
    openapiFields.add("supersededAlerts");
    openapiFields.add("supersedingAlert");
    openapiFields.add("threshold");
    openapiFields.add("triggerSource");
    openapiFields.add("updateTime");
    openapiFields.add("windowSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivityRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivityRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivityRule is not found in the empty JSON string", ActivityRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivityRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivityRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("actionNames") != null && !jsonObj.get("actionNames").isJsonNull() && !jsonObj.get("actionNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionNames` to be an array in the JSON string but got `%s`", jsonObj.get("actionNames").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supersededAlerts") != null && !jsonObj.get("supersededAlerts").isJsonNull() && !jsonObj.get("supersededAlerts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supersededAlerts` to be an array in the JSON string but got `%s`", jsonObj.get("supersededAlerts").toString()));
      }
      if ((jsonObj.get("supersedingAlert") != null && !jsonObj.get("supersedingAlert").isJsonNull()) && !jsonObj.get("supersedingAlert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supersedingAlert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supersedingAlert").toString()));
      }
      if ((jsonObj.get("threshold") != null && !jsonObj.get("threshold").isJsonNull()) && !jsonObj.get("threshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threshold").toString()));
      }
      if ((jsonObj.get("triggerSource") != null && !jsonObj.get("triggerSource").isJsonNull()) && !jsonObj.get("triggerSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerSource").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("windowSize") != null && !jsonObj.get("windowSize").isJsonNull()) && !jsonObj.get("windowSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `windowSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("windowSize").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivityRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivityRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivityRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivityRule.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivityRule>() {
           @Override
           public void write(JsonWriter out, ActivityRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivityRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivityRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivityRule
   * @throws IOException if the JSON string is invalid with respect to ActivityRule
   */
  public static ActivityRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivityRule.class);
  }

  /**
   * Convert an instance of ActivityRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

