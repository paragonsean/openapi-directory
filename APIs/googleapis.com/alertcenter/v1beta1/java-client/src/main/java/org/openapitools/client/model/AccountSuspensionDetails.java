/*
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about why an account is receiving an account suspension warning.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:29.687014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountSuspensionDetails {
  /**
   * The reason why this account is receiving an account suspension warning.
   */
  @JsonAdapter(AbuseReasonEnum.Adapter.class)
  public enum AbuseReasonEnum {
    ACCOUNT_SUSPENSION_ABUSE_REASON_UNSPECIFIED("ACCOUNT_SUSPENSION_ABUSE_REASON_UNSPECIFIED"),
    
    TOS_VIOLATION("TOS_VIOLATION"),
    
    SPAM("SPAM"),
    
    PHISHING("PHISHING"),
    
    TRAFFIC_PUMPING("TRAFFIC_PUMPING"),
    
    FRAUD("FRAUD"),
    
    NUMBER_HARVESTING("NUMBER_HARVESTING"),
    
    PAYMENTS_FRAUD("PAYMENTS_FRAUD"),
    
    UNWANTED_CONTENT("UNWANTED_CONTENT");

    private String value;

    AbuseReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AbuseReasonEnum fromValue(String value) {
      for (AbuseReasonEnum b : AbuseReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AbuseReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AbuseReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AbuseReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AbuseReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AbuseReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ABUSE_REASON = "abuseReason";
  @SerializedName(SERIALIZED_NAME_ABUSE_REASON)
  private AbuseReasonEnum abuseReason;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "productName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public AccountSuspensionDetails() {
  }

  public AccountSuspensionDetails abuseReason(AbuseReasonEnum abuseReason) {
    this.abuseReason = abuseReason;
    return this;
  }

  /**
   * The reason why this account is receiving an account suspension warning.
   * @return abuseReason
   */
  @javax.annotation.Nullable
  public AbuseReasonEnum getAbuseReason() {
    return abuseReason;
  }

  public void setAbuseReason(AbuseReasonEnum abuseReason) {
    this.abuseReason = abuseReason;
  }


  public AccountSuspensionDetails productName(String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * The name of the product being abused. This is restricted to only the following values: \&quot;Gmail\&quot; \&quot;Google Workspace\&quot; \&quot;Payments\&quot; \&quot;Voice\&quot; \&quot;YouTube\&quot; \&quot;Other\&quot;
   * @return productName
   */
  @javax.annotation.Nullable
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountSuspensionDetails accountSuspensionDetails = (AccountSuspensionDetails) o;
    return Objects.equals(this.abuseReason, accountSuspensionDetails.abuseReason) &&
        Objects.equals(this.productName, accountSuspensionDetails.productName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abuseReason, productName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountSuspensionDetails {\n");
    sb.append("    abuseReason: ").append(toIndentedString(abuseReason)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abuseReason");
    openapiFields.add("productName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountSuspensionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountSuspensionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountSuspensionDetails is not found in the empty JSON string", AccountSuspensionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountSuspensionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountSuspensionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("abuseReason") != null && !jsonObj.get("abuseReason").isJsonNull()) && !jsonObj.get("abuseReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abuseReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abuseReason").toString()));
      }
      // validate the optional field `abuseReason`
      if (jsonObj.get("abuseReason") != null && !jsonObj.get("abuseReason").isJsonNull()) {
        AbuseReasonEnum.validateJsonElement(jsonObj.get("abuseReason"));
      }
      if ((jsonObj.get("productName") != null && !jsonObj.get("productName").isJsonNull()) && !jsonObj.get("productName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountSuspensionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountSuspensionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountSuspensionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountSuspensionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountSuspensionDetails>() {
           @Override
           public void write(JsonWriter out, AccountSuspensionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountSuspensionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountSuspensionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountSuspensionDetails
   * @throws IOException if the JSON string is invalid with respect to AccountSuspensionDetails
   */
  public static AccountSuspensionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountSuspensionDetails.class);
  }

  /**
   * Convert an instance of AccountSuspensionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

