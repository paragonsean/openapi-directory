/*
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MatchInfo;
import org.openapitools.client.model.ResourceInfo;
import org.openapitools.client.model.RuleInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Common alert information about violated rules that are configured by Google Workspace administrators.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:29.687014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RuleViolationInfo {
  /**
   * Source of the data.
   */
  @JsonAdapter(DataSourceEnum.Adapter.class)
  public enum DataSourceEnum {
    DATA_SOURCE_UNSPECIFIED("DATA_SOURCE_UNSPECIFIED"),
    
    DRIVE("DRIVE");

    private String value;

    DataSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataSourceEnum fromValue(String value) {
      for (DataSourceEnum b : DataSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_SOURCE = "dataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private DataSourceEnum dataSource;

  public static final String SERIALIZED_NAME_MATCH_INFO = "matchInfo";
  @SerializedName(SERIALIZED_NAME_MATCH_INFO)
  private List<MatchInfo> matchInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<String> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_INFO = "resourceInfo";
  @SerializedName(SERIALIZED_NAME_RESOURCE_INFO)
  private ResourceInfo resourceInfo;

  public static final String SERIALIZED_NAME_RULE_INFO = "ruleInfo";
  @SerializedName(SERIALIZED_NAME_RULE_INFO)
  private RuleInfo ruleInfo;

  /**
   * Gets or Sets suppressedActionTypes
   */
  @JsonAdapter(SuppressedActionTypesEnum.Adapter.class)
  public enum SuppressedActionTypesEnum {
    ACTION_TYPE_UNSPECIFIED("ACTION_TYPE_UNSPECIFIED"),
    
    DRIVE_BLOCK_EXTERNAL_SHARING("DRIVE_BLOCK_EXTERNAL_SHARING"),
    
    DRIVE_WARN_ON_EXTERNAL_SHARING("DRIVE_WARN_ON_EXTERNAL_SHARING"),
    
    DELETE_WEBPROTECT_EVIDENCE("DELETE_WEBPROTECT_EVIDENCE"),
    
    ALERT("ALERT"),
    
    RULE_ACTIVATE("RULE_ACTIVATE"),
    
    RULE_DEACTIVATE("RULE_DEACTIVATE");

    private String value;

    SuppressedActionTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuppressedActionTypesEnum fromValue(String value) {
      for (SuppressedActionTypesEnum b : SuppressedActionTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuppressedActionTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuppressedActionTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuppressedActionTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuppressedActionTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuppressedActionTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPRESSED_ACTION_TYPES = "suppressedActionTypes";
  @SerializedName(SERIALIZED_NAME_SUPPRESSED_ACTION_TYPES)
  private List<SuppressedActionTypesEnum> suppressedActionTypes = new ArrayList<>();

  /**
   * Trigger of the rule.
   */
  @JsonAdapter(TriggerEnum.Adapter.class)
  public enum TriggerEnum {
    TRIGGER_UNSPECIFIED("TRIGGER_UNSPECIFIED"),
    
    DRIVE_SHARE("DRIVE_SHARE");

    private String value;

    TriggerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerEnum fromValue(String value) {
      for (TriggerEnum b : TriggerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriggerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriggerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TriggerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private TriggerEnum trigger;

  public static final String SERIALIZED_NAME_TRIGGERED_ACTION_INFO = "triggeredActionInfo";
  @SerializedName(SERIALIZED_NAME_TRIGGERED_ACTION_INFO)
  private List<Object> triggeredActionInfo = new ArrayList<>();

  /**
   * Gets or Sets triggeredActionTypes
   */
  @JsonAdapter(TriggeredActionTypesEnum.Adapter.class)
  public enum TriggeredActionTypesEnum {
    ACTION_TYPE_UNSPECIFIED("ACTION_TYPE_UNSPECIFIED"),
    
    DRIVE_BLOCK_EXTERNAL_SHARING("DRIVE_BLOCK_EXTERNAL_SHARING"),
    
    DRIVE_WARN_ON_EXTERNAL_SHARING("DRIVE_WARN_ON_EXTERNAL_SHARING"),
    
    DELETE_WEBPROTECT_EVIDENCE("DELETE_WEBPROTECT_EVIDENCE"),
    
    ALERT("ALERT"),
    
    RULE_ACTIVATE("RULE_ACTIVATE"),
    
    RULE_DEACTIVATE("RULE_DEACTIVATE");

    private String value;

    TriggeredActionTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggeredActionTypesEnum fromValue(String value) {
      for (TriggeredActionTypesEnum b : TriggeredActionTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriggeredActionTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggeredActionTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggeredActionTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriggeredActionTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TriggeredActionTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIGGERED_ACTION_TYPES = "triggeredActionTypes";
  @SerializedName(SERIALIZED_NAME_TRIGGERED_ACTION_TYPES)
  private List<TriggeredActionTypesEnum> triggeredActionTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIGGERING_USER_EMAIL = "triggeringUserEmail";
  @SerializedName(SERIALIZED_NAME_TRIGGERING_USER_EMAIL)
  private String triggeringUserEmail;

  public RuleViolationInfo() {
  }

  public RuleViolationInfo dataSource(DataSourceEnum dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Source of the data.
   * @return dataSource
   */
  @javax.annotation.Nullable
  public DataSourceEnum getDataSource() {
    return dataSource;
  }

  public void setDataSource(DataSourceEnum dataSource) {
    this.dataSource = dataSource;
  }


  public RuleViolationInfo matchInfo(List<MatchInfo> matchInfo) {
    this.matchInfo = matchInfo;
    return this;
  }

  public RuleViolationInfo addMatchInfoItem(MatchInfo matchInfoItem) {
    if (this.matchInfo == null) {
      this.matchInfo = new ArrayList<>();
    }
    this.matchInfo.add(matchInfoItem);
    return this;
  }

  /**
   * List of matches that were found in the resource content.
   * @return matchInfo
   */
  @javax.annotation.Nullable
  public List<MatchInfo> getMatchInfo() {
    return matchInfo;
  }

  public void setMatchInfo(List<MatchInfo> matchInfo) {
    this.matchInfo = matchInfo;
  }


  public RuleViolationInfo recipients(List<String> recipients) {
    this.recipients = recipients;
    return this;
  }

  public RuleViolationInfo addRecipientsItem(String recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * Resource recipients. For Drive, they are grantees that the Drive file was shared with at the time of rule triggering. Valid values include user emails, group emails, domains, or &#39;anyone&#39; if the file was publicly accessible. If the file was private the recipients list will be empty. For Gmail, they are emails of the users or groups that the Gmail message was sent to.
   * @return recipients
   */
  @javax.annotation.Nullable
  public List<String> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<String> recipients) {
    this.recipients = recipients;
  }


  public RuleViolationInfo resourceInfo(ResourceInfo resourceInfo) {
    this.resourceInfo = resourceInfo;
    return this;
  }

  /**
   * Get resourceInfo
   * @return resourceInfo
   */
  @javax.annotation.Nullable
  public ResourceInfo getResourceInfo() {
    return resourceInfo;
  }

  public void setResourceInfo(ResourceInfo resourceInfo) {
    this.resourceInfo = resourceInfo;
  }


  public RuleViolationInfo ruleInfo(RuleInfo ruleInfo) {
    this.ruleInfo = ruleInfo;
    return this;
  }

  /**
   * Get ruleInfo
   * @return ruleInfo
   */
  @javax.annotation.Nullable
  public RuleInfo getRuleInfo() {
    return ruleInfo;
  }

  public void setRuleInfo(RuleInfo ruleInfo) {
    this.ruleInfo = ruleInfo;
  }


  public RuleViolationInfo suppressedActionTypes(List<SuppressedActionTypesEnum> suppressedActionTypes) {
    this.suppressedActionTypes = suppressedActionTypes;
    return this;
  }

  public RuleViolationInfo addSuppressedActionTypesItem(SuppressedActionTypesEnum suppressedActionTypesItem) {
    if (this.suppressedActionTypes == null) {
      this.suppressedActionTypes = new ArrayList<>();
    }
    this.suppressedActionTypes.add(suppressedActionTypesItem);
    return this;
  }

  /**
   * Actions suppressed due to other actions with higher priority.
   * @return suppressedActionTypes
   */
  @javax.annotation.Nullable
  public List<SuppressedActionTypesEnum> getSuppressedActionTypes() {
    return suppressedActionTypes;
  }

  public void setSuppressedActionTypes(List<SuppressedActionTypesEnum> suppressedActionTypes) {
    this.suppressedActionTypes = suppressedActionTypes;
  }


  public RuleViolationInfo trigger(TriggerEnum trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * Trigger of the rule.
   * @return trigger
   */
  @javax.annotation.Nullable
  public TriggerEnum getTrigger() {
    return trigger;
  }

  public void setTrigger(TriggerEnum trigger) {
    this.trigger = trigger;
  }


  public RuleViolationInfo triggeredActionInfo(List<Object> triggeredActionInfo) {
    this.triggeredActionInfo = triggeredActionInfo;
    return this;
  }

  public RuleViolationInfo addTriggeredActionInfoItem(Object triggeredActionInfoItem) {
    if (this.triggeredActionInfo == null) {
      this.triggeredActionInfo = new ArrayList<>();
    }
    this.triggeredActionInfo.add(triggeredActionInfoItem);
    return this;
  }

  /**
   * Metadata related to the triggered actions.
   * @return triggeredActionInfo
   */
  @javax.annotation.Nullable
  public List<Object> getTriggeredActionInfo() {
    return triggeredActionInfo;
  }

  public void setTriggeredActionInfo(List<Object> triggeredActionInfo) {
    this.triggeredActionInfo = triggeredActionInfo;
  }


  public RuleViolationInfo triggeredActionTypes(List<TriggeredActionTypesEnum> triggeredActionTypes) {
    this.triggeredActionTypes = triggeredActionTypes;
    return this;
  }

  public RuleViolationInfo addTriggeredActionTypesItem(TriggeredActionTypesEnum triggeredActionTypesItem) {
    if (this.triggeredActionTypes == null) {
      this.triggeredActionTypes = new ArrayList<>();
    }
    this.triggeredActionTypes.add(triggeredActionTypesItem);
    return this;
  }

  /**
   * Actions applied as a consequence of the rule being triggered.
   * @return triggeredActionTypes
   */
  @javax.annotation.Nullable
  public List<TriggeredActionTypesEnum> getTriggeredActionTypes() {
    return triggeredActionTypes;
  }

  public void setTriggeredActionTypes(List<TriggeredActionTypesEnum> triggeredActionTypes) {
    this.triggeredActionTypes = triggeredActionTypes;
  }


  public RuleViolationInfo triggeringUserEmail(String triggeringUserEmail) {
    this.triggeringUserEmail = triggeringUserEmail;
    return this;
  }

  /**
   * Email of the user who caused the violation. Value could be empty if not applicable, for example, a violation found by drive continuous scan.
   * @return triggeringUserEmail
   */
  @javax.annotation.Nullable
  public String getTriggeringUserEmail() {
    return triggeringUserEmail;
  }

  public void setTriggeringUserEmail(String triggeringUserEmail) {
    this.triggeringUserEmail = triggeringUserEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleViolationInfo ruleViolationInfo = (RuleViolationInfo) o;
    return Objects.equals(this.dataSource, ruleViolationInfo.dataSource) &&
        Objects.equals(this.matchInfo, ruleViolationInfo.matchInfo) &&
        Objects.equals(this.recipients, ruleViolationInfo.recipients) &&
        Objects.equals(this.resourceInfo, ruleViolationInfo.resourceInfo) &&
        Objects.equals(this.ruleInfo, ruleViolationInfo.ruleInfo) &&
        Objects.equals(this.suppressedActionTypes, ruleViolationInfo.suppressedActionTypes) &&
        Objects.equals(this.trigger, ruleViolationInfo.trigger) &&
        Objects.equals(this.triggeredActionInfo, ruleViolationInfo.triggeredActionInfo) &&
        Objects.equals(this.triggeredActionTypes, ruleViolationInfo.triggeredActionTypes) &&
        Objects.equals(this.triggeringUserEmail, ruleViolationInfo.triggeringUserEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSource, matchInfo, recipients, resourceInfo, ruleInfo, suppressedActionTypes, trigger, triggeredActionInfo, triggeredActionTypes, triggeringUserEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleViolationInfo {\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    matchInfo: ").append(toIndentedString(matchInfo)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    resourceInfo: ").append(toIndentedString(resourceInfo)).append("\n");
    sb.append("    ruleInfo: ").append(toIndentedString(ruleInfo)).append("\n");
    sb.append("    suppressedActionTypes: ").append(toIndentedString(suppressedActionTypes)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    triggeredActionInfo: ").append(toIndentedString(triggeredActionInfo)).append("\n");
    sb.append("    triggeredActionTypes: ").append(toIndentedString(triggeredActionTypes)).append("\n");
    sb.append("    triggeringUserEmail: ").append(toIndentedString(triggeringUserEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSource");
    openapiFields.add("matchInfo");
    openapiFields.add("recipients");
    openapiFields.add("resourceInfo");
    openapiFields.add("ruleInfo");
    openapiFields.add("suppressedActionTypes");
    openapiFields.add("trigger");
    openapiFields.add("triggeredActionInfo");
    openapiFields.add("triggeredActionTypes");
    openapiFields.add("triggeringUserEmail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuleViolationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleViolationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleViolationInfo is not found in the empty JSON string", RuleViolationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleViolationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleViolationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSource") != null && !jsonObj.get("dataSource").isJsonNull()) && !jsonObj.get("dataSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSource").toString()));
      }
      // validate the optional field `dataSource`
      if (jsonObj.get("dataSource") != null && !jsonObj.get("dataSource").isJsonNull()) {
        DataSourceEnum.validateJsonElement(jsonObj.get("dataSource"));
      }
      if (jsonObj.get("matchInfo") != null && !jsonObj.get("matchInfo").isJsonNull()) {
        JsonArray jsonArraymatchInfo = jsonObj.getAsJsonArray("matchInfo");
        if (jsonArraymatchInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("matchInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `matchInfo` to be an array in the JSON string but got `%s`", jsonObj.get("matchInfo").toString()));
          }

          // validate the optional field `matchInfo` (array)
          for (int i = 0; i < jsonArraymatchInfo.size(); i++) {
            MatchInfo.validateJsonElement(jsonArraymatchInfo.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull() && !jsonObj.get("recipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
      }
      // validate the optional field `resourceInfo`
      if (jsonObj.get("resourceInfo") != null && !jsonObj.get("resourceInfo").isJsonNull()) {
        ResourceInfo.validateJsonElement(jsonObj.get("resourceInfo"));
      }
      // validate the optional field `ruleInfo`
      if (jsonObj.get("ruleInfo") != null && !jsonObj.get("ruleInfo").isJsonNull()) {
        RuleInfo.validateJsonElement(jsonObj.get("ruleInfo"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("suppressedActionTypes") != null && !jsonObj.get("suppressedActionTypes").isJsonNull() && !jsonObj.get("suppressedActionTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suppressedActionTypes` to be an array in the JSON string but got `%s`", jsonObj.get("suppressedActionTypes").toString()));
      }
      if ((jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) && !jsonObj.get("trigger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger").toString()));
      }
      // validate the optional field `trigger`
      if (jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) {
        TriggerEnum.validateJsonElement(jsonObj.get("trigger"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("triggeredActionInfo") != null && !jsonObj.get("triggeredActionInfo").isJsonNull() && !jsonObj.get("triggeredActionInfo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggeredActionInfo` to be an array in the JSON string but got `%s`", jsonObj.get("triggeredActionInfo").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("triggeredActionTypes") != null && !jsonObj.get("triggeredActionTypes").isJsonNull() && !jsonObj.get("triggeredActionTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggeredActionTypes` to be an array in the JSON string but got `%s`", jsonObj.get("triggeredActionTypes").toString()));
      }
      if ((jsonObj.get("triggeringUserEmail") != null && !jsonObj.get("triggeringUserEmail").isJsonNull()) && !jsonObj.get("triggeringUserEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggeringUserEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggeringUserEmail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleViolationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleViolationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleViolationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleViolationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleViolationInfo>() {
           @Override
           public void write(JsonWriter out, RuleViolationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleViolationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuleViolationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuleViolationInfo
   * @throws IOException if the JSON string is invalid with respect to RuleViolationInfo
   */
  public static RuleViolationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleViolationInfo.class);
  }

  /**
   * Convert an instance of RuleViolationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

