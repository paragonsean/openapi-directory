/*
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DomainId;
import org.openapitools.client.model.GmailMessageInfo;
import org.openapitools.client.model.MaliciousEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Proto for all phishing alerts with common payload. Supported types are any of the following: * User reported phishing * User reported spam spike * Suspicious message reported * Phishing reclassification * Malware reclassification * Gmail potential employee spoofing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:29.687014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MailPhishing {
  public static final String SERIALIZED_NAME_DOMAIN_ID = "domainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  private DomainId domainId;

  public static final String SERIALIZED_NAME_IS_INTERNAL = "isInternal";
  @SerializedName(SERIALIZED_NAME_IS_INTERNAL)
  private Boolean isInternal;

  public static final String SERIALIZED_NAME_MALICIOUS_ENTITY = "maliciousEntity";
  @SerializedName(SERIALIZED_NAME_MALICIOUS_ENTITY)
  private MaliciousEntity maliciousEntity;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<GmailMessageInfo> messages = new ArrayList<>();

  /**
   * System actions on the messages.
   */
  @JsonAdapter(SystemActionTypeEnum.Adapter.class)
  public enum SystemActionTypeEnum {
    SYSTEM_ACTION_TYPE_UNSPECIFIED("SYSTEM_ACTION_TYPE_UNSPECIFIED"),
    
    NO_OPERATION("NO_OPERATION"),
    
    REMOVED_FROM_INBOX("REMOVED_FROM_INBOX");

    private String value;

    SystemActionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SystemActionTypeEnum fromValue(String value) {
      for (SystemActionTypeEnum b : SystemActionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SystemActionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SystemActionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SystemActionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SystemActionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SystemActionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYSTEM_ACTION_TYPE = "systemActionType";
  @SerializedName(SERIALIZED_NAME_SYSTEM_ACTION_TYPE)
  private SystemActionTypeEnum systemActionType;

  public MailPhishing() {
  }

  public MailPhishing domainId(DomainId domainId) {
    this.domainId = domainId;
    return this;
  }

  /**
   * Get domainId
   * @return domainId
   */
  @javax.annotation.Nullable
  public DomainId getDomainId() {
    return domainId;
  }

  public void setDomainId(DomainId domainId) {
    this.domainId = domainId;
  }


  public MailPhishing isInternal(Boolean isInternal) {
    this.isInternal = isInternal;
    return this;
  }

  /**
   * If &#x60;true&#x60;, the email originated from within the organization.
   * @return isInternal
   */
  @javax.annotation.Nullable
  public Boolean getIsInternal() {
    return isInternal;
  }

  public void setIsInternal(Boolean isInternal) {
    this.isInternal = isInternal;
  }


  public MailPhishing maliciousEntity(MaliciousEntity maliciousEntity) {
    this.maliciousEntity = maliciousEntity;
    return this;
  }

  /**
   * Get maliciousEntity
   * @return maliciousEntity
   */
  @javax.annotation.Nullable
  public MaliciousEntity getMaliciousEntity() {
    return maliciousEntity;
  }

  public void setMaliciousEntity(MaliciousEntity maliciousEntity) {
    this.maliciousEntity = maliciousEntity;
  }


  public MailPhishing messages(List<GmailMessageInfo> messages) {
    this.messages = messages;
    return this;
  }

  public MailPhishing addMessagesItem(GmailMessageInfo messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * The list of messages contained by this alert.
   * @return messages
   */
  @javax.annotation.Nullable
  public List<GmailMessageInfo> getMessages() {
    return messages;
  }

  public void setMessages(List<GmailMessageInfo> messages) {
    this.messages = messages;
  }


  public MailPhishing systemActionType(SystemActionTypeEnum systemActionType) {
    this.systemActionType = systemActionType;
    return this;
  }

  /**
   * System actions on the messages.
   * @return systemActionType
   */
  @javax.annotation.Nullable
  public SystemActionTypeEnum getSystemActionType() {
    return systemActionType;
  }

  public void setSystemActionType(SystemActionTypeEnum systemActionType) {
    this.systemActionType = systemActionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MailPhishing mailPhishing = (MailPhishing) o;
    return Objects.equals(this.domainId, mailPhishing.domainId) &&
        Objects.equals(this.isInternal, mailPhishing.isInternal) &&
        Objects.equals(this.maliciousEntity, mailPhishing.maliciousEntity) &&
        Objects.equals(this.messages, mailPhishing.messages) &&
        Objects.equals(this.systemActionType, mailPhishing.systemActionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainId, isInternal, maliciousEntity, messages, systemActionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MailPhishing {\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    isInternal: ").append(toIndentedString(isInternal)).append("\n");
    sb.append("    maliciousEntity: ").append(toIndentedString(maliciousEntity)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    systemActionType: ").append(toIndentedString(systemActionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domainId");
    openapiFields.add("isInternal");
    openapiFields.add("maliciousEntity");
    openapiFields.add("messages");
    openapiFields.add("systemActionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MailPhishing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MailPhishing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MailPhishing is not found in the empty JSON string", MailPhishing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MailPhishing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MailPhishing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `domainId`
      if (jsonObj.get("domainId") != null && !jsonObj.get("domainId").isJsonNull()) {
        DomainId.validateJsonElement(jsonObj.get("domainId"));
      }
      // validate the optional field `maliciousEntity`
      if (jsonObj.get("maliciousEntity") != null && !jsonObj.get("maliciousEntity").isJsonNull()) {
        MaliciousEntity.validateJsonElement(jsonObj.get("maliciousEntity"));
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            GmailMessageInfo.validateJsonElement(jsonArraymessages.get(i));
          };
        }
      }
      if ((jsonObj.get("systemActionType") != null && !jsonObj.get("systemActionType").isJsonNull()) && !jsonObj.get("systemActionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemActionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemActionType").toString()));
      }
      // validate the optional field `systemActionType`
      if (jsonObj.get("systemActionType") != null && !jsonObj.get("systemActionType").isJsonNull()) {
        SystemActionTypeEnum.validateJsonElement(jsonObj.get("systemActionType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MailPhishing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MailPhishing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MailPhishing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MailPhishing.class));

       return (TypeAdapter<T>) new TypeAdapter<MailPhishing>() {
           @Override
           public void write(JsonWriter out, MailPhishing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MailPhishing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MailPhishing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MailPhishing
   * @throws IOException if the JSON string is invalid with respect to MailPhishing
   */
  public static MailPhishing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MailPhishing.class);
  }

  /**
   * Convert an instance of MailPhishing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

