/*
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Attachment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An incident reported by Google Operations for a Google Workspace application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:29.687014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleOperations {
  public static final String SERIALIZED_NAME_AFFECTED_USER_EMAILS = "affectedUserEmails";
  @SerializedName(SERIALIZED_NAME_AFFECTED_USER_EMAILS)
  private List<String> affectedUserEmails = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTACHMENT_DATA = "attachmentData";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_DATA)
  private Attachment attachmentData;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private String header;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public GoogleOperations() {
  }

  public GoogleOperations affectedUserEmails(List<String> affectedUserEmails) {
    this.affectedUserEmails = affectedUserEmails;
    return this;
  }

  public GoogleOperations addAffectedUserEmailsItem(String affectedUserEmailsItem) {
    if (this.affectedUserEmails == null) {
      this.affectedUserEmails = new ArrayList<>();
    }
    this.affectedUserEmails.add(affectedUserEmailsItem);
    return this;
  }

  /**
   * The list of emails which correspond to the users directly affected by the incident.
   * @return affectedUserEmails
   */
  @javax.annotation.Nullable
  public List<String> getAffectedUserEmails() {
    return affectedUserEmails;
  }

  public void setAffectedUserEmails(List<String> affectedUserEmails) {
    this.affectedUserEmails = affectedUserEmails;
  }


  public GoogleOperations attachmentData(Attachment attachmentData) {
    this.attachmentData = attachmentData;
    return this;
  }

  /**
   * Get attachmentData
   * @return attachmentData
   */
  @javax.annotation.Nullable
  public Attachment getAttachmentData() {
    return attachmentData;
  }

  public void setAttachmentData(Attachment attachmentData) {
    this.attachmentData = attachmentData;
  }


  public GoogleOperations description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A detailed, freeform incident description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleOperations domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Customer domain for email template personalization.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public GoogleOperations header(String header) {
    this.header = header;
    return this;
  }

  /**
   * A header to display above the incident message. Typically used to attach a localized notice on the timeline for followup comms translations.
   * @return header
   */
  @javax.annotation.Nullable
  public String getHeader() {
    return header;
  }

  public void setHeader(String header) {
    this.header = header;
  }


  public GoogleOperations title(String title) {
    this.title = title;
    return this;
  }

  /**
   * A one-line incident description.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleOperations googleOperations = (GoogleOperations) o;
    return Objects.equals(this.affectedUserEmails, googleOperations.affectedUserEmails) &&
        Objects.equals(this.attachmentData, googleOperations.attachmentData) &&
        Objects.equals(this.description, googleOperations.description) &&
        Objects.equals(this.domain, googleOperations.domain) &&
        Objects.equals(this.header, googleOperations.header) &&
        Objects.equals(this.title, googleOperations.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedUserEmails, attachmentData, description, domain, header, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleOperations {\n");
    sb.append("    affectedUserEmails: ").append(toIndentedString(affectedUserEmails)).append("\n");
    sb.append("    attachmentData: ").append(toIndentedString(attachmentData)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affectedUserEmails");
    openapiFields.add("attachmentData");
    openapiFields.add("description");
    openapiFields.add("domain");
    openapiFields.add("header");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleOperations
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleOperations.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleOperations is not found in the empty JSON string", GoogleOperations.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleOperations.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleOperations` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("affectedUserEmails") != null && !jsonObj.get("affectedUserEmails").isJsonNull() && !jsonObj.get("affectedUserEmails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `affectedUserEmails` to be an array in the JSON string but got `%s`", jsonObj.get("affectedUserEmails").toString()));
      }
      // validate the optional field `attachmentData`
      if (jsonObj.get("attachmentData") != null && !jsonObj.get("attachmentData").isJsonNull()) {
        Attachment.validateJsonElement(jsonObj.get("attachmentData"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) && !jsonObj.get("header").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleOperations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleOperations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleOperations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleOperations.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleOperations>() {
           @Override
           public void write(JsonWriter out, GoogleOperations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleOperations read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleOperations given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleOperations
   * @throws IOException if the JSON string is invalid with respect to GoogleOperations
   */
  public static GoogleOperations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleOperations.class);
  }

  /**
   * Convert an instance of GoogleOperations to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

