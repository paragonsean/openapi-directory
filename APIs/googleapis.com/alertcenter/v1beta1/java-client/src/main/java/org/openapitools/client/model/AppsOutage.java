/*
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MergeInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An outage incident reported for a Google Workspace service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:29.687014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppsOutage {
  public static final String SERIALIZED_NAME_DASHBOARD_URI = "dashboardUri";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_URI)
  private String dashboardUri;

  public static final String SERIALIZED_NAME_INCIDENT_TRACKING_ID = "incidentTrackingId";
  @SerializedName(SERIALIZED_NAME_INCIDENT_TRACKING_ID)
  private String incidentTrackingId;

  public static final String SERIALIZED_NAME_MERGE_INFO = "mergeInfo";
  @SerializedName(SERIALIZED_NAME_MERGE_INFO)
  private MergeInfo mergeInfo;

  public static final String SERIALIZED_NAME_NEXT_UPDATE_TIME = "nextUpdateTime";
  @SerializedName(SERIALIZED_NAME_NEXT_UPDATE_TIME)
  private String nextUpdateTime;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<String> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOLUTION_TIME = "resolutionTime";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_TIME)
  private String resolutionTime;

  /**
   * Current outage status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STATUS_UNSPECIFIED("STATUS_UNSPECIFIED"),
    
    NEW("NEW"),
    
    ONGOING("ONGOING"),
    
    RESOLVED("RESOLVED"),
    
    FALSE_POSITIVE("FALSE_POSITIVE"),
    
    PARTIALLY_RESOLVED("PARTIALLY_RESOLVED"),
    
    MERGED("MERGED"),
    
    DOWNGRADED("DOWNGRADED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public AppsOutage() {
  }

  public AppsOutage dashboardUri(String dashboardUri) {
    this.dashboardUri = dashboardUri;
    return this;
  }

  /**
   * Link to the outage event in Google Workspace Status Dashboard
   * @return dashboardUri
   */
  @javax.annotation.Nullable
  public String getDashboardUri() {
    return dashboardUri;
  }

  public void setDashboardUri(String dashboardUri) {
    this.dashboardUri = dashboardUri;
  }


  public AppsOutage incidentTrackingId(String incidentTrackingId) {
    this.incidentTrackingId = incidentTrackingId;
    return this;
  }

  /**
   * Incident tracking ID.
   * @return incidentTrackingId
   */
  @javax.annotation.Nullable
  public String getIncidentTrackingId() {
    return incidentTrackingId;
  }

  public void setIncidentTrackingId(String incidentTrackingId) {
    this.incidentTrackingId = incidentTrackingId;
  }


  public AppsOutage mergeInfo(MergeInfo mergeInfo) {
    this.mergeInfo = mergeInfo;
    return this;
  }

  /**
   * Get mergeInfo
   * @return mergeInfo
   */
  @javax.annotation.Nullable
  public MergeInfo getMergeInfo() {
    return mergeInfo;
  }

  public void setMergeInfo(MergeInfo mergeInfo) {
    this.mergeInfo = mergeInfo;
  }


  public AppsOutage nextUpdateTime(String nextUpdateTime) {
    this.nextUpdateTime = nextUpdateTime;
    return this;
  }

  /**
   * Timestamp by which the next update is expected to arrive.
   * @return nextUpdateTime
   */
  @javax.annotation.Nullable
  public String getNextUpdateTime() {
    return nextUpdateTime;
  }

  public void setNextUpdateTime(String nextUpdateTime) {
    this.nextUpdateTime = nextUpdateTime;
  }


  public AppsOutage products(List<String> products) {
    this.products = products;
    return this;
  }

  public AppsOutage addProductsItem(String productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * List of products impacted by the outage.
   * @return products
   */
  @javax.annotation.Nullable
  public List<String> getProducts() {
    return products;
  }

  public void setProducts(List<String> products) {
    this.products = products;
  }


  public AppsOutage resolutionTime(String resolutionTime) {
    this.resolutionTime = resolutionTime;
    return this;
  }

  /**
   * Timestamp when the outage is expected to be resolved, or has confirmed resolution. Provided only when known.
   * @return resolutionTime
   */
  @javax.annotation.Nullable
  public String getResolutionTime() {
    return resolutionTime;
  }

  public void setResolutionTime(String resolutionTime) {
    this.resolutionTime = resolutionTime;
  }


  public AppsOutage status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Current outage status.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppsOutage appsOutage = (AppsOutage) o;
    return Objects.equals(this.dashboardUri, appsOutage.dashboardUri) &&
        Objects.equals(this.incidentTrackingId, appsOutage.incidentTrackingId) &&
        Objects.equals(this.mergeInfo, appsOutage.mergeInfo) &&
        Objects.equals(this.nextUpdateTime, appsOutage.nextUpdateTime) &&
        Objects.equals(this.products, appsOutage.products) &&
        Objects.equals(this.resolutionTime, appsOutage.resolutionTime) &&
        Objects.equals(this.status, appsOutage.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dashboardUri, incidentTrackingId, mergeInfo, nextUpdateTime, products, resolutionTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppsOutage {\n");
    sb.append("    dashboardUri: ").append(toIndentedString(dashboardUri)).append("\n");
    sb.append("    incidentTrackingId: ").append(toIndentedString(incidentTrackingId)).append("\n");
    sb.append("    mergeInfo: ").append(toIndentedString(mergeInfo)).append("\n");
    sb.append("    nextUpdateTime: ").append(toIndentedString(nextUpdateTime)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    resolutionTime: ").append(toIndentedString(resolutionTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dashboardUri");
    openapiFields.add("incidentTrackingId");
    openapiFields.add("mergeInfo");
    openapiFields.add("nextUpdateTime");
    openapiFields.add("products");
    openapiFields.add("resolutionTime");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppsOutage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppsOutage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppsOutage is not found in the empty JSON string", AppsOutage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppsOutage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppsOutage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dashboardUri") != null && !jsonObj.get("dashboardUri").isJsonNull()) && !jsonObj.get("dashboardUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashboardUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashboardUri").toString()));
      }
      if ((jsonObj.get("incidentTrackingId") != null && !jsonObj.get("incidentTrackingId").isJsonNull()) && !jsonObj.get("incidentTrackingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incidentTrackingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incidentTrackingId").toString()));
      }
      // validate the optional field `mergeInfo`
      if (jsonObj.get("mergeInfo") != null && !jsonObj.get("mergeInfo").isJsonNull()) {
        MergeInfo.validateJsonElement(jsonObj.get("mergeInfo"));
      }
      if ((jsonObj.get("nextUpdateTime") != null && !jsonObj.get("nextUpdateTime").isJsonNull()) && !jsonObj.get("nextUpdateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextUpdateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextUpdateTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull() && !jsonObj.get("products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
      }
      if ((jsonObj.get("resolutionTime") != null && !jsonObj.get("resolutionTime").isJsonNull()) && !jsonObj.get("resolutionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolutionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolutionTime").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppsOutage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppsOutage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppsOutage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppsOutage.class));

       return (TypeAdapter<T>) new TypeAdapter<AppsOutage>() {
           @Override
           public void write(JsonWriter out, AppsOutage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppsOutage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppsOutage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppsOutage
   * @throws IOException if the JSON string is invalid with respect to AppsOutage
   */
  public static AppsOutage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppsOutage.class);
  }

  /**
   * Convert an instance of AppsOutage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

