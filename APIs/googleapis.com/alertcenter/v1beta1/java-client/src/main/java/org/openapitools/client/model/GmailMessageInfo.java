/*
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of a message in phishing spike alert.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:29.687014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GmailMessageInfo {
  public static final String SERIALIZED_NAME_ATTACHMENTS_SHA256_HASH = "attachmentsSha256Hash";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS_SHA256_HASH)
  private List<String> attachmentsSha256Hash = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_MD5_HASH_MESSAGE_BODY = "md5HashMessageBody";
  @SerializedName(SERIALIZED_NAME_MD5_HASH_MESSAGE_BODY)
  private String md5HashMessageBody;

  public static final String SERIALIZED_NAME_MD5_HASH_SUBJECT = "md5HashSubject";
  @SerializedName(SERIALIZED_NAME_MD5_HASH_SUBJECT)
  private String md5HashSubject;

  public static final String SERIALIZED_NAME_MESSAGE_BODY_SNIPPET = "messageBodySnippet";
  @SerializedName(SERIALIZED_NAME_MESSAGE_BODY_SNIPPET)
  private String messageBodySnippet;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private String recipient;

  public static final String SERIALIZED_NAME_SENT_TIME = "sentTime";
  @SerializedName(SERIALIZED_NAME_SENT_TIME)
  private String sentTime;

  public static final String SERIALIZED_NAME_SUBJECT_TEXT = "subjectText";
  @SerializedName(SERIALIZED_NAME_SUBJECT_TEXT)
  private String subjectText;

  public GmailMessageInfo() {
  }

  public GmailMessageInfo attachmentsSha256Hash(List<String> attachmentsSha256Hash) {
    this.attachmentsSha256Hash = attachmentsSha256Hash;
    return this;
  }

  public GmailMessageInfo addAttachmentsSha256HashItem(String attachmentsSha256HashItem) {
    if (this.attachmentsSha256Hash == null) {
      this.attachmentsSha256Hash = new ArrayList<>();
    }
    this.attachmentsSha256Hash.add(attachmentsSha256HashItem);
    return this;
  }

  /**
   * The &#x60;SHA256&#x60; hash of email&#39;s attachment and all MIME parts.
   * @return attachmentsSha256Hash
   */
  @javax.annotation.Nullable
  public List<String> getAttachmentsSha256Hash() {
    return attachmentsSha256Hash;
  }

  public void setAttachmentsSha256Hash(List<String> attachmentsSha256Hash) {
    this.attachmentsSha256Hash = attachmentsSha256Hash;
  }


  public GmailMessageInfo date(String date) {
    this.date = date;
    return this;
  }

  /**
   * The date of the event related to this email.
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public GmailMessageInfo md5HashMessageBody(String md5HashMessageBody) {
    this.md5HashMessageBody = md5HashMessageBody;
    return this;
  }

  /**
   * The hash of the message body text.
   * @return md5HashMessageBody
   */
  @javax.annotation.Nullable
  public String getMd5HashMessageBody() {
    return md5HashMessageBody;
  }

  public void setMd5HashMessageBody(String md5HashMessageBody) {
    this.md5HashMessageBody = md5HashMessageBody;
  }


  public GmailMessageInfo md5HashSubject(String md5HashSubject) {
    this.md5HashSubject = md5HashSubject;
    return this;
  }

  /**
   * The MD5 Hash of email&#39;s subject (only available for reported emails).
   * @return md5HashSubject
   */
  @javax.annotation.Nullable
  public String getMd5HashSubject() {
    return md5HashSubject;
  }

  public void setMd5HashSubject(String md5HashSubject) {
    this.md5HashSubject = md5HashSubject;
  }


  public GmailMessageInfo messageBodySnippet(String messageBodySnippet) {
    this.messageBodySnippet = messageBodySnippet;
    return this;
  }

  /**
   * The snippet of the message body text (only available for reported emails).
   * @return messageBodySnippet
   */
  @javax.annotation.Nullable
  public String getMessageBodySnippet() {
    return messageBodySnippet;
  }

  public void setMessageBodySnippet(String messageBodySnippet) {
    this.messageBodySnippet = messageBodySnippet;
  }


  public GmailMessageInfo messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * The message ID.
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public GmailMessageInfo recipient(String recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * The recipient of this email.
   * @return recipient
   */
  @javax.annotation.Nullable
  public String getRecipient() {
    return recipient;
  }

  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }


  public GmailMessageInfo sentTime(String sentTime) {
    this.sentTime = sentTime;
    return this;
  }

  /**
   * The sent time of the email.
   * @return sentTime
   */
  @javax.annotation.Nullable
  public String getSentTime() {
    return sentTime;
  }

  public void setSentTime(String sentTime) {
    this.sentTime = sentTime;
  }


  public GmailMessageInfo subjectText(String subjectText) {
    this.subjectText = subjectText;
    return this;
  }

  /**
   * The email subject text (only available for reported emails).
   * @return subjectText
   */
  @javax.annotation.Nullable
  public String getSubjectText() {
    return subjectText;
  }

  public void setSubjectText(String subjectText) {
    this.subjectText = subjectText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GmailMessageInfo gmailMessageInfo = (GmailMessageInfo) o;
    return Objects.equals(this.attachmentsSha256Hash, gmailMessageInfo.attachmentsSha256Hash) &&
        Objects.equals(this.date, gmailMessageInfo.date) &&
        Objects.equals(this.md5HashMessageBody, gmailMessageInfo.md5HashMessageBody) &&
        Objects.equals(this.md5HashSubject, gmailMessageInfo.md5HashSubject) &&
        Objects.equals(this.messageBodySnippet, gmailMessageInfo.messageBodySnippet) &&
        Objects.equals(this.messageId, gmailMessageInfo.messageId) &&
        Objects.equals(this.recipient, gmailMessageInfo.recipient) &&
        Objects.equals(this.sentTime, gmailMessageInfo.sentTime) &&
        Objects.equals(this.subjectText, gmailMessageInfo.subjectText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachmentsSha256Hash, date, md5HashMessageBody, md5HashSubject, messageBodySnippet, messageId, recipient, sentTime, subjectText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GmailMessageInfo {\n");
    sb.append("    attachmentsSha256Hash: ").append(toIndentedString(attachmentsSha256Hash)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    md5HashMessageBody: ").append(toIndentedString(md5HashMessageBody)).append("\n");
    sb.append("    md5HashSubject: ").append(toIndentedString(md5HashSubject)).append("\n");
    sb.append("    messageBodySnippet: ").append(toIndentedString(messageBodySnippet)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    sentTime: ").append(toIndentedString(sentTime)).append("\n");
    sb.append("    subjectText: ").append(toIndentedString(subjectText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachmentsSha256Hash");
    openapiFields.add("date");
    openapiFields.add("md5HashMessageBody");
    openapiFields.add("md5HashSubject");
    openapiFields.add("messageBodySnippet");
    openapiFields.add("messageId");
    openapiFields.add("recipient");
    openapiFields.add("sentTime");
    openapiFields.add("subjectText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GmailMessageInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GmailMessageInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GmailMessageInfo is not found in the empty JSON string", GmailMessageInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GmailMessageInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GmailMessageInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("attachmentsSha256Hash") != null && !jsonObj.get("attachmentsSha256Hash").isJsonNull() && !jsonObj.get("attachmentsSha256Hash").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachmentsSha256Hash` to be an array in the JSON string but got `%s`", jsonObj.get("attachmentsSha256Hash").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("md5HashMessageBody") != null && !jsonObj.get("md5HashMessageBody").isJsonNull()) && !jsonObj.get("md5HashMessageBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `md5HashMessageBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("md5HashMessageBody").toString()));
      }
      if ((jsonObj.get("md5HashSubject") != null && !jsonObj.get("md5HashSubject").isJsonNull()) && !jsonObj.get("md5HashSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `md5HashSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("md5HashSubject").toString()));
      }
      if ((jsonObj.get("messageBodySnippet") != null && !jsonObj.get("messageBodySnippet").isJsonNull()) && !jsonObj.get("messageBodySnippet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageBodySnippet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageBodySnippet").toString()));
      }
      if ((jsonObj.get("messageId") != null && !jsonObj.get("messageId").isJsonNull()) && !jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if ((jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonNull()) && !jsonObj.get("recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient").toString()));
      }
      if ((jsonObj.get("sentTime") != null && !jsonObj.get("sentTime").isJsonNull()) && !jsonObj.get("sentTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentTime").toString()));
      }
      if ((jsonObj.get("subjectText") != null && !jsonObj.get("subjectText").isJsonNull()) && !jsonObj.get("subjectText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GmailMessageInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GmailMessageInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GmailMessageInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GmailMessageInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GmailMessageInfo>() {
           @Override
           public void write(JsonWriter out, GmailMessageInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GmailMessageInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GmailMessageInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GmailMessageInfo
   * @throws IOException if the JSON string is invalid with respect to GmailMessageInfo
   */
  public static GmailMessageInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GmailMessageInfo.class);
  }

  /**
   * Convert an instance of GmailMessageInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

