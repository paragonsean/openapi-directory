/*
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PrimaryAdminChangedEvent;
import org.openapitools.client.model.SSOProfileCreatedEvent;
import org.openapitools.client.model.SSOProfileDeletedEvent;
import org.openapitools.client.model.SSOProfileUpdatedEvent;
import org.openapitools.client.model.SuperAdminPasswordResetEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Alert that is triggered when Sensitive Admin Action occur in customer account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:29.687014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SensitiveAdminAction {
  public static final String SERIALIZED_NAME_ACTOR_EMAIL = "actorEmail";
  @SerializedName(SERIALIZED_NAME_ACTOR_EMAIL)
  private String actorEmail;

  public static final String SERIALIZED_NAME_EVENT_TIME = "eventTime";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME)
  private String eventTime;

  public static final String SERIALIZED_NAME_PRIMARY_ADMIN_CHANGED_EVENT = "primaryAdminChangedEvent";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ADMIN_CHANGED_EVENT)
  private PrimaryAdminChangedEvent primaryAdminChangedEvent;

  public static final String SERIALIZED_NAME_SSO_PROFILE_CREATED_EVENT = "ssoProfileCreatedEvent";
  @SerializedName(SERIALIZED_NAME_SSO_PROFILE_CREATED_EVENT)
  private SSOProfileCreatedEvent ssoProfileCreatedEvent;

  public static final String SERIALIZED_NAME_SSO_PROFILE_DELETED_EVENT = "ssoProfileDeletedEvent";
  @SerializedName(SERIALIZED_NAME_SSO_PROFILE_DELETED_EVENT)
  private SSOProfileDeletedEvent ssoProfileDeletedEvent;

  public static final String SERIALIZED_NAME_SSO_PROFILE_UPDATED_EVENT = "ssoProfileUpdatedEvent";
  @SerializedName(SERIALIZED_NAME_SSO_PROFILE_UPDATED_EVENT)
  private SSOProfileUpdatedEvent ssoProfileUpdatedEvent;

  public static final String SERIALIZED_NAME_SUPER_ADMIN_PASSWORD_RESET_EVENT = "superAdminPasswordResetEvent";
  @SerializedName(SERIALIZED_NAME_SUPER_ADMIN_PASSWORD_RESET_EVENT)
  private SuperAdminPasswordResetEvent superAdminPasswordResetEvent;

  public SensitiveAdminAction() {
  }

  public SensitiveAdminAction actorEmail(String actorEmail) {
    this.actorEmail = actorEmail;
    return this;
  }

  /**
   * Email of person who performed the action
   * @return actorEmail
   */
  @javax.annotation.Nullable
  public String getActorEmail() {
    return actorEmail;
  }

  public void setActorEmail(String actorEmail) {
    this.actorEmail = actorEmail;
  }


  public SensitiveAdminAction eventTime(String eventTime) {
    this.eventTime = eventTime;
    return this;
  }

  /**
   * The time at which event occurred
   * @return eventTime
   */
  @javax.annotation.Nullable
  public String getEventTime() {
    return eventTime;
  }

  public void setEventTime(String eventTime) {
    this.eventTime = eventTime;
  }


  public SensitiveAdminAction primaryAdminChangedEvent(PrimaryAdminChangedEvent primaryAdminChangedEvent) {
    this.primaryAdminChangedEvent = primaryAdminChangedEvent;
    return this;
  }

  /**
   * Get primaryAdminChangedEvent
   * @return primaryAdminChangedEvent
   */
  @javax.annotation.Nullable
  public PrimaryAdminChangedEvent getPrimaryAdminChangedEvent() {
    return primaryAdminChangedEvent;
  }

  public void setPrimaryAdminChangedEvent(PrimaryAdminChangedEvent primaryAdminChangedEvent) {
    this.primaryAdminChangedEvent = primaryAdminChangedEvent;
  }


  public SensitiveAdminAction ssoProfileCreatedEvent(SSOProfileCreatedEvent ssoProfileCreatedEvent) {
    this.ssoProfileCreatedEvent = ssoProfileCreatedEvent;
    return this;
  }

  /**
   * Get ssoProfileCreatedEvent
   * @return ssoProfileCreatedEvent
   */
  @javax.annotation.Nullable
  public SSOProfileCreatedEvent getSsoProfileCreatedEvent() {
    return ssoProfileCreatedEvent;
  }

  public void setSsoProfileCreatedEvent(SSOProfileCreatedEvent ssoProfileCreatedEvent) {
    this.ssoProfileCreatedEvent = ssoProfileCreatedEvent;
  }


  public SensitiveAdminAction ssoProfileDeletedEvent(SSOProfileDeletedEvent ssoProfileDeletedEvent) {
    this.ssoProfileDeletedEvent = ssoProfileDeletedEvent;
    return this;
  }

  /**
   * Get ssoProfileDeletedEvent
   * @return ssoProfileDeletedEvent
   */
  @javax.annotation.Nullable
  public SSOProfileDeletedEvent getSsoProfileDeletedEvent() {
    return ssoProfileDeletedEvent;
  }

  public void setSsoProfileDeletedEvent(SSOProfileDeletedEvent ssoProfileDeletedEvent) {
    this.ssoProfileDeletedEvent = ssoProfileDeletedEvent;
  }


  public SensitiveAdminAction ssoProfileUpdatedEvent(SSOProfileUpdatedEvent ssoProfileUpdatedEvent) {
    this.ssoProfileUpdatedEvent = ssoProfileUpdatedEvent;
    return this;
  }

  /**
   * Get ssoProfileUpdatedEvent
   * @return ssoProfileUpdatedEvent
   */
  @javax.annotation.Nullable
  public SSOProfileUpdatedEvent getSsoProfileUpdatedEvent() {
    return ssoProfileUpdatedEvent;
  }

  public void setSsoProfileUpdatedEvent(SSOProfileUpdatedEvent ssoProfileUpdatedEvent) {
    this.ssoProfileUpdatedEvent = ssoProfileUpdatedEvent;
  }


  public SensitiveAdminAction superAdminPasswordResetEvent(SuperAdminPasswordResetEvent superAdminPasswordResetEvent) {
    this.superAdminPasswordResetEvent = superAdminPasswordResetEvent;
    return this;
  }

  /**
   * Get superAdminPasswordResetEvent
   * @return superAdminPasswordResetEvent
   */
  @javax.annotation.Nullable
  public SuperAdminPasswordResetEvent getSuperAdminPasswordResetEvent() {
    return superAdminPasswordResetEvent;
  }

  public void setSuperAdminPasswordResetEvent(SuperAdminPasswordResetEvent superAdminPasswordResetEvent) {
    this.superAdminPasswordResetEvent = superAdminPasswordResetEvent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SensitiveAdminAction sensitiveAdminAction = (SensitiveAdminAction) o;
    return Objects.equals(this.actorEmail, sensitiveAdminAction.actorEmail) &&
        Objects.equals(this.eventTime, sensitiveAdminAction.eventTime) &&
        Objects.equals(this.primaryAdminChangedEvent, sensitiveAdminAction.primaryAdminChangedEvent) &&
        Objects.equals(this.ssoProfileCreatedEvent, sensitiveAdminAction.ssoProfileCreatedEvent) &&
        Objects.equals(this.ssoProfileDeletedEvent, sensitiveAdminAction.ssoProfileDeletedEvent) &&
        Objects.equals(this.ssoProfileUpdatedEvent, sensitiveAdminAction.ssoProfileUpdatedEvent) &&
        Objects.equals(this.superAdminPasswordResetEvent, sensitiveAdminAction.superAdminPasswordResetEvent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actorEmail, eventTime, primaryAdminChangedEvent, ssoProfileCreatedEvent, ssoProfileDeletedEvent, ssoProfileUpdatedEvent, superAdminPasswordResetEvent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SensitiveAdminAction {\n");
    sb.append("    actorEmail: ").append(toIndentedString(actorEmail)).append("\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    primaryAdminChangedEvent: ").append(toIndentedString(primaryAdminChangedEvent)).append("\n");
    sb.append("    ssoProfileCreatedEvent: ").append(toIndentedString(ssoProfileCreatedEvent)).append("\n");
    sb.append("    ssoProfileDeletedEvent: ").append(toIndentedString(ssoProfileDeletedEvent)).append("\n");
    sb.append("    ssoProfileUpdatedEvent: ").append(toIndentedString(ssoProfileUpdatedEvent)).append("\n");
    sb.append("    superAdminPasswordResetEvent: ").append(toIndentedString(superAdminPasswordResetEvent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actorEmail");
    openapiFields.add("eventTime");
    openapiFields.add("primaryAdminChangedEvent");
    openapiFields.add("ssoProfileCreatedEvent");
    openapiFields.add("ssoProfileDeletedEvent");
    openapiFields.add("ssoProfileUpdatedEvent");
    openapiFields.add("superAdminPasswordResetEvent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SensitiveAdminAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SensitiveAdminAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SensitiveAdminAction is not found in the empty JSON string", SensitiveAdminAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SensitiveAdminAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SensitiveAdminAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actorEmail") != null && !jsonObj.get("actorEmail").isJsonNull()) && !jsonObj.get("actorEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actorEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actorEmail").toString()));
      }
      if ((jsonObj.get("eventTime") != null && !jsonObj.get("eventTime").isJsonNull()) && !jsonObj.get("eventTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventTime").toString()));
      }
      // validate the optional field `primaryAdminChangedEvent`
      if (jsonObj.get("primaryAdminChangedEvent") != null && !jsonObj.get("primaryAdminChangedEvent").isJsonNull()) {
        PrimaryAdminChangedEvent.validateJsonElement(jsonObj.get("primaryAdminChangedEvent"));
      }
      // validate the optional field `ssoProfileCreatedEvent`
      if (jsonObj.get("ssoProfileCreatedEvent") != null && !jsonObj.get("ssoProfileCreatedEvent").isJsonNull()) {
        SSOProfileCreatedEvent.validateJsonElement(jsonObj.get("ssoProfileCreatedEvent"));
      }
      // validate the optional field `ssoProfileDeletedEvent`
      if (jsonObj.get("ssoProfileDeletedEvent") != null && !jsonObj.get("ssoProfileDeletedEvent").isJsonNull()) {
        SSOProfileDeletedEvent.validateJsonElement(jsonObj.get("ssoProfileDeletedEvent"));
      }
      // validate the optional field `ssoProfileUpdatedEvent`
      if (jsonObj.get("ssoProfileUpdatedEvent") != null && !jsonObj.get("ssoProfileUpdatedEvent").isJsonNull()) {
        SSOProfileUpdatedEvent.validateJsonElement(jsonObj.get("ssoProfileUpdatedEvent"));
      }
      // validate the optional field `superAdminPasswordResetEvent`
      if (jsonObj.get("superAdminPasswordResetEvent") != null && !jsonObj.get("superAdminPasswordResetEvent").isJsonNull()) {
        SuperAdminPasswordResetEvent.validateJsonElement(jsonObj.get("superAdminPasswordResetEvent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SensitiveAdminAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SensitiveAdminAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SensitiveAdminAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SensitiveAdminAction.class));

       return (TypeAdapter<T>) new TypeAdapter<SensitiveAdminAction>() {
           @Override
           public void write(JsonWriter out, SensitiveAdminAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SensitiveAdminAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SensitiveAdminAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SensitiveAdminAction
   * @throws IOException if the JSON string is invalid with respect to SensitiveAdminAction
   */
  public static SensitiveAdminAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SensitiveAdminAction.class);
  }

  /**
   * Convert an instance of SensitiveAdminAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

