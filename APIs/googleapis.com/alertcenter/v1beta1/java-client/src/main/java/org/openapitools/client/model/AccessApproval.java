/*
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SupportTicket;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Alert that is triggered when Google support requests to access customer data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:29.687014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccessApproval {
  /**
   * Gets or Sets justificationReason
   */
  @JsonAdapter(JustificationReasonEnum.Adapter.class)
  public enum JustificationReasonEnum {
    JUSTIFICATION_UNSPECIFIED("JUSTIFICATION_UNSPECIFIED"),
    
    CUSTOMER_INITIATED_SUPPORT("CUSTOMER_INITIATED_SUPPORT"),
    
    GOOGLE_INITIATED_REVIEW("GOOGLE_INITIATED_REVIEW"),
    
    GOOGLE_INITIATED_SERVICE("GOOGLE_INITIATED_SERVICE"),
    
    THIRD_PARTY_DATA_REQUEST("THIRD_PARTY_DATA_REQUEST"),
    
    GOOGLE_RESPONSE_TO_PRODUCTION_ALERT("GOOGLE_RESPONSE_TO_PRODUCTION_ALERT");

    private String value;

    JustificationReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JustificationReasonEnum fromValue(String value) {
      for (JustificationReasonEnum b : JustificationReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JustificationReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JustificationReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JustificationReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JustificationReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JustificationReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JUSTIFICATION_REASON = "justificationReason";
  @SerializedName(SERIALIZED_NAME_JUSTIFICATION_REASON)
  private List<JustificationReasonEnum> justificationReason = new ArrayList<>();

  public static final String SERIALIZED_NAME_OFFICE_LOCATION = "officeLocation";
  @SerializedName(SERIALIZED_NAME_OFFICE_LOCATION)
  private String officeLocation;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<String> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_TICKETS = "tickets";
  @SerializedName(SERIALIZED_NAME_TICKETS)
  private List<SupportTicket> tickets = new ArrayList<>();

  public AccessApproval() {
  }

  public AccessApproval justificationReason(List<JustificationReasonEnum> justificationReason) {
    this.justificationReason = justificationReason;
    return this;
  }

  public AccessApproval addJustificationReasonItem(JustificationReasonEnum justificationReasonItem) {
    if (this.justificationReason == null) {
      this.justificationReason = new ArrayList<>();
    }
    this.justificationReason.add(justificationReasonItem);
    return this;
  }

  /**
   * Justification for data access based on justification enums.
   * @return justificationReason
   */
  @javax.annotation.Nullable
  public List<JustificationReasonEnum> getJustificationReason() {
    return justificationReason;
  }

  public void setJustificationReason(List<JustificationReasonEnum> justificationReason) {
    this.justificationReason = justificationReason;
  }


  public AccessApproval officeLocation(String officeLocation) {
    this.officeLocation = officeLocation;
    return this;
  }

  /**
   * Office location of Google staff requesting access such as \&quot;US\&quot;.
   * @return officeLocation
   */
  @javax.annotation.Nullable
  public String getOfficeLocation() {
    return officeLocation;
  }

  public void setOfficeLocation(String officeLocation) {
    this.officeLocation = officeLocation;
  }


  public AccessApproval products(List<String> products) {
    this.products = products;
    return this;
  }

  public AccessApproval addProductsItem(String productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * Products within scope of the Access Approvals request.
   * @return products
   */
  @javax.annotation.Nullable
  public List<String> getProducts() {
    return products;
  }

  public void setProducts(List<String> products) {
    this.products = products;
  }


  public AccessApproval requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * ID of the Access Approvals request. This is a helpful field when requesting support from Google.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public AccessApproval scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Scope of access, also known as a resource. This is further narrowed down by the product field.
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public AccessApproval tickets(List<SupportTicket> tickets) {
    this.tickets = tickets;
    return this;
  }

  public AccessApproval addTicketsItem(SupportTicket ticketsItem) {
    if (this.tickets == null) {
      this.tickets = new ArrayList<>();
    }
    this.tickets.add(ticketsItem);
    return this;
  }

  /**
   * Support tickets related to this Access Approvals request. Populated if there is an associated case number.
   * @return tickets
   */
  @javax.annotation.Nullable
  public List<SupportTicket> getTickets() {
    return tickets;
  }

  public void setTickets(List<SupportTicket> tickets) {
    this.tickets = tickets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessApproval accessApproval = (AccessApproval) o;
    return Objects.equals(this.justificationReason, accessApproval.justificationReason) &&
        Objects.equals(this.officeLocation, accessApproval.officeLocation) &&
        Objects.equals(this.products, accessApproval.products) &&
        Objects.equals(this.requestId, accessApproval.requestId) &&
        Objects.equals(this.scope, accessApproval.scope) &&
        Objects.equals(this.tickets, accessApproval.tickets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(justificationReason, officeLocation, products, requestId, scope, tickets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessApproval {\n");
    sb.append("    justificationReason: ").append(toIndentedString(justificationReason)).append("\n");
    sb.append("    officeLocation: ").append(toIndentedString(officeLocation)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    tickets: ").append(toIndentedString(tickets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("justificationReason");
    openapiFields.add("officeLocation");
    openapiFields.add("products");
    openapiFields.add("requestId");
    openapiFields.add("scope");
    openapiFields.add("tickets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccessApproval
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessApproval.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessApproval is not found in the empty JSON string", AccessApproval.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessApproval.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessApproval` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("justificationReason") != null && !jsonObj.get("justificationReason").isJsonNull() && !jsonObj.get("justificationReason").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `justificationReason` to be an array in the JSON string but got `%s`", jsonObj.get("justificationReason").toString()));
      }
      if ((jsonObj.get("officeLocation") != null && !jsonObj.get("officeLocation").isJsonNull()) && !jsonObj.get("officeLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `officeLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("officeLocation").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull() && !jsonObj.get("products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if (jsonObj.get("tickets") != null && !jsonObj.get("tickets").isJsonNull()) {
        JsonArray jsonArraytickets = jsonObj.getAsJsonArray("tickets");
        if (jsonArraytickets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tickets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tickets` to be an array in the JSON string but got `%s`", jsonObj.get("tickets").toString()));
          }

          // validate the optional field `tickets` (array)
          for (int i = 0; i < jsonArraytickets.size(); i++) {
            SupportTicket.validateJsonElement(jsonArraytickets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessApproval.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessApproval' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessApproval> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessApproval.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessApproval>() {
           @Override
           public void write(JsonWriter out, AccessApproval value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessApproval read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccessApproval given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccessApproval
   * @throws IOException if the JSON string is invalid with respect to AccessApproval
   */
  public static AccessApproval fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessApproval.class);
  }

  /**
   * Convert an instance of AccessApproval to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

