/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountSuspensionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountSuspensionDetails::OAIAccountSuspensionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountSuspensionDetails::OAIAccountSuspensionDetails() {
    this->initializeModel();
}

OAIAccountSuspensionDetails::~OAIAccountSuspensionDetails() {}

void OAIAccountSuspensionDetails::initializeModel() {

    m_abuse_reason_isSet = false;
    m_abuse_reason_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;
}

void OAIAccountSuspensionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountSuspensionDetails::fromJsonObject(QJsonObject json) {

    m_abuse_reason_isValid = ::OpenAPI::fromJsonValue(m_abuse_reason, json[QString("abuseReason")]);
    m_abuse_reason_isSet = !json[QString("abuseReason")].isNull() && m_abuse_reason_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("productName")]);
    m_product_name_isSet = !json[QString("productName")].isNull() && m_product_name_isValid;
}

QString OAIAccountSuspensionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountSuspensionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_abuse_reason_isSet) {
        obj.insert(QString("abuseReason"), ::OpenAPI::toJsonValue(m_abuse_reason));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("productName"), ::OpenAPI::toJsonValue(m_product_name));
    }
    return obj;
}

QString OAIAccountSuspensionDetails::getAbuseReason() const {
    return m_abuse_reason;
}
void OAIAccountSuspensionDetails::setAbuseReason(const QString &abuse_reason) {
    m_abuse_reason = abuse_reason;
    m_abuse_reason_isSet = true;
}

bool OAIAccountSuspensionDetails::is_abuse_reason_Set() const{
    return m_abuse_reason_isSet;
}

bool OAIAccountSuspensionDetails::is_abuse_reason_Valid() const{
    return m_abuse_reason_isValid;
}

QString OAIAccountSuspensionDetails::getProductName() const {
    return m_product_name;
}
void OAIAccountSuspensionDetails::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAIAccountSuspensionDetails::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAIAccountSuspensionDetails::is_product_name_Valid() const{
    return m_product_name_isValid;
}

bool OAIAccountSuspensionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abuse_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountSuspensionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
