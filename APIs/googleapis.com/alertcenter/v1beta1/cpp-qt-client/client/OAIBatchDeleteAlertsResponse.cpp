/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDeleteAlertsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDeleteAlertsResponse::OAIBatchDeleteAlertsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDeleteAlertsResponse::OAIBatchDeleteAlertsResponse() {
    this->initializeModel();
}

OAIBatchDeleteAlertsResponse::~OAIBatchDeleteAlertsResponse() {}

void OAIBatchDeleteAlertsResponse::initializeModel() {

    m_failed_alert_status_isSet = false;
    m_failed_alert_status_isValid = false;

    m_success_alert_ids_isSet = false;
    m_success_alert_ids_isValid = false;
}

void OAIBatchDeleteAlertsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDeleteAlertsResponse::fromJsonObject(QJsonObject json) {

    m_failed_alert_status_isValid = ::OpenAPI::fromJsonValue(m_failed_alert_status, json[QString("failedAlertStatus")]);
    m_failed_alert_status_isSet = !json[QString("failedAlertStatus")].isNull() && m_failed_alert_status_isValid;

    m_success_alert_ids_isValid = ::OpenAPI::fromJsonValue(m_success_alert_ids, json[QString("successAlertIds")]);
    m_success_alert_ids_isSet = !json[QString("successAlertIds")].isNull() && m_success_alert_ids_isValid;
}

QString OAIBatchDeleteAlertsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDeleteAlertsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_alert_status.size() > 0) {
        obj.insert(QString("failedAlertStatus"), ::OpenAPI::toJsonValue(m_failed_alert_status));
    }
    if (m_success_alert_ids.size() > 0) {
        obj.insert(QString("successAlertIds"), ::OpenAPI::toJsonValue(m_success_alert_ids));
    }
    return obj;
}

QMap<QString, OAIStatus> OAIBatchDeleteAlertsResponse::getFailedAlertStatus() const {
    return m_failed_alert_status;
}
void OAIBatchDeleteAlertsResponse::setFailedAlertStatus(const QMap<QString, OAIStatus> &failed_alert_status) {
    m_failed_alert_status = failed_alert_status;
    m_failed_alert_status_isSet = true;
}

bool OAIBatchDeleteAlertsResponse::is_failed_alert_status_Set() const{
    return m_failed_alert_status_isSet;
}

bool OAIBatchDeleteAlertsResponse::is_failed_alert_status_Valid() const{
    return m_failed_alert_status_isValid;
}

QList<QString> OAIBatchDeleteAlertsResponse::getSuccessAlertIds() const {
    return m_success_alert_ids;
}
void OAIBatchDeleteAlertsResponse::setSuccessAlertIds(const QList<QString> &success_alert_ids) {
    m_success_alert_ids = success_alert_ids;
    m_success_alert_ids_isSet = true;
}

bool OAIBatchDeleteAlertsResponse::is_success_alert_ids_Set() const{
    return m_success_alert_ids_isSet;
}

bool OAIBatchDeleteAlertsResponse::is_success_alert_ids_Valid() const{
    return m_success_alert_ids_isValid;
}

bool OAIBatchDeleteAlertsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_alert_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_alert_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDeleteAlertsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
