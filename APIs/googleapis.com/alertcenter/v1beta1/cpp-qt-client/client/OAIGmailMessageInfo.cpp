/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGmailMessageInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGmailMessageInfo::OAIGmailMessageInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGmailMessageInfo::OAIGmailMessageInfo() {
    this->initializeModel();
}

OAIGmailMessageInfo::~OAIGmailMessageInfo() {}

void OAIGmailMessageInfo::initializeModel() {

    m_attachments_sha256_hash_isSet = false;
    m_attachments_sha256_hash_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_md5_hash_message_body_isSet = false;
    m_md5_hash_message_body_isValid = false;

    m_md5_hash_subject_isSet = false;
    m_md5_hash_subject_isValid = false;

    m_message_body_snippet_isSet = false;
    m_message_body_snippet_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;

    m_sent_time_isSet = false;
    m_sent_time_isValid = false;

    m_subject_text_isSet = false;
    m_subject_text_isValid = false;
}

void OAIGmailMessageInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGmailMessageInfo::fromJsonObject(QJsonObject json) {

    m_attachments_sha256_hash_isValid = ::OpenAPI::fromJsonValue(m_attachments_sha256_hash, json[QString("attachmentsSha256Hash")]);
    m_attachments_sha256_hash_isSet = !json[QString("attachmentsSha256Hash")].isNull() && m_attachments_sha256_hash_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_md5_hash_message_body_isValid = ::OpenAPI::fromJsonValue(m_md5_hash_message_body, json[QString("md5HashMessageBody")]);
    m_md5_hash_message_body_isSet = !json[QString("md5HashMessageBody")].isNull() && m_md5_hash_message_body_isValid;

    m_md5_hash_subject_isValid = ::OpenAPI::fromJsonValue(m_md5_hash_subject, json[QString("md5HashSubject")]);
    m_md5_hash_subject_isSet = !json[QString("md5HashSubject")].isNull() && m_md5_hash_subject_isValid;

    m_message_body_snippet_isValid = ::OpenAPI::fromJsonValue(m_message_body_snippet, json[QString("messageBodySnippet")]);
    m_message_body_snippet_isSet = !json[QString("messageBodySnippet")].isNull() && m_message_body_snippet_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(m_recipient, json[QString("recipient")]);
    m_recipient_isSet = !json[QString("recipient")].isNull() && m_recipient_isValid;

    m_sent_time_isValid = ::OpenAPI::fromJsonValue(m_sent_time, json[QString("sentTime")]);
    m_sent_time_isSet = !json[QString("sentTime")].isNull() && m_sent_time_isValid;

    m_subject_text_isValid = ::OpenAPI::fromJsonValue(m_subject_text, json[QString("subjectText")]);
    m_subject_text_isSet = !json[QString("subjectText")].isNull() && m_subject_text_isValid;
}

QString OAIGmailMessageInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGmailMessageInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments_sha256_hash.size() > 0) {
        obj.insert(QString("attachmentsSha256Hash"), ::OpenAPI::toJsonValue(m_attachments_sha256_hash));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_md5_hash_message_body_isSet) {
        obj.insert(QString("md5HashMessageBody"), ::OpenAPI::toJsonValue(m_md5_hash_message_body));
    }
    if (m_md5_hash_subject_isSet) {
        obj.insert(QString("md5HashSubject"), ::OpenAPI::toJsonValue(m_md5_hash_subject));
    }
    if (m_message_body_snippet_isSet) {
        obj.insert(QString("messageBodySnippet"), ::OpenAPI::toJsonValue(m_message_body_snippet));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_recipient_isSet) {
        obj.insert(QString("recipient"), ::OpenAPI::toJsonValue(m_recipient));
    }
    if (m_sent_time_isSet) {
        obj.insert(QString("sentTime"), ::OpenAPI::toJsonValue(m_sent_time));
    }
    if (m_subject_text_isSet) {
        obj.insert(QString("subjectText"), ::OpenAPI::toJsonValue(m_subject_text));
    }
    return obj;
}

QList<QString> OAIGmailMessageInfo::getAttachmentsSha256Hash() const {
    return m_attachments_sha256_hash;
}
void OAIGmailMessageInfo::setAttachmentsSha256Hash(const QList<QString> &attachments_sha256_hash) {
    m_attachments_sha256_hash = attachments_sha256_hash;
    m_attachments_sha256_hash_isSet = true;
}

bool OAIGmailMessageInfo::is_attachments_sha256_hash_Set() const{
    return m_attachments_sha256_hash_isSet;
}

bool OAIGmailMessageInfo::is_attachments_sha256_hash_Valid() const{
    return m_attachments_sha256_hash_isValid;
}

QString OAIGmailMessageInfo::getDate() const {
    return m_date;
}
void OAIGmailMessageInfo::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGmailMessageInfo::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGmailMessageInfo::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIGmailMessageInfo::getMd5HashMessageBody() const {
    return m_md5_hash_message_body;
}
void OAIGmailMessageInfo::setMd5HashMessageBody(const QString &md5_hash_message_body) {
    m_md5_hash_message_body = md5_hash_message_body;
    m_md5_hash_message_body_isSet = true;
}

bool OAIGmailMessageInfo::is_md5_hash_message_body_Set() const{
    return m_md5_hash_message_body_isSet;
}

bool OAIGmailMessageInfo::is_md5_hash_message_body_Valid() const{
    return m_md5_hash_message_body_isValid;
}

QString OAIGmailMessageInfo::getMd5HashSubject() const {
    return m_md5_hash_subject;
}
void OAIGmailMessageInfo::setMd5HashSubject(const QString &md5_hash_subject) {
    m_md5_hash_subject = md5_hash_subject;
    m_md5_hash_subject_isSet = true;
}

bool OAIGmailMessageInfo::is_md5_hash_subject_Set() const{
    return m_md5_hash_subject_isSet;
}

bool OAIGmailMessageInfo::is_md5_hash_subject_Valid() const{
    return m_md5_hash_subject_isValid;
}

QString OAIGmailMessageInfo::getMessageBodySnippet() const {
    return m_message_body_snippet;
}
void OAIGmailMessageInfo::setMessageBodySnippet(const QString &message_body_snippet) {
    m_message_body_snippet = message_body_snippet;
    m_message_body_snippet_isSet = true;
}

bool OAIGmailMessageInfo::is_message_body_snippet_Set() const{
    return m_message_body_snippet_isSet;
}

bool OAIGmailMessageInfo::is_message_body_snippet_Valid() const{
    return m_message_body_snippet_isValid;
}

QString OAIGmailMessageInfo::getMessageId() const {
    return m_message_id;
}
void OAIGmailMessageInfo::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIGmailMessageInfo::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIGmailMessageInfo::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIGmailMessageInfo::getRecipient() const {
    return m_recipient;
}
void OAIGmailMessageInfo::setRecipient(const QString &recipient) {
    m_recipient = recipient;
    m_recipient_isSet = true;
}

bool OAIGmailMessageInfo::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAIGmailMessageInfo::is_recipient_Valid() const{
    return m_recipient_isValid;
}

QString OAIGmailMessageInfo::getSentTime() const {
    return m_sent_time;
}
void OAIGmailMessageInfo::setSentTime(const QString &sent_time) {
    m_sent_time = sent_time;
    m_sent_time_isSet = true;
}

bool OAIGmailMessageInfo::is_sent_time_Set() const{
    return m_sent_time_isSet;
}

bool OAIGmailMessageInfo::is_sent_time_Valid() const{
    return m_sent_time_isValid;
}

QString OAIGmailMessageInfo::getSubjectText() const {
    return m_subject_text;
}
void OAIGmailMessageInfo::setSubjectText(const QString &subject_text) {
    m_subject_text = subject_text;
    m_subject_text_isSet = true;
}

bool OAIGmailMessageInfo::is_subject_text_Set() const{
    return m_subject_text_isSet;
}

bool OAIGmailMessageInfo::is_subject_text_Valid() const{
    return m_subject_text_isValid;
}

bool OAIGmailMessageInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments_sha256_hash.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md5_hash_message_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md5_hash_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_body_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGmailMessageInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
