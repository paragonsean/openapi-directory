/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlert::OAIAlert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlert::OAIAlert() {
    this->initializeModel();
}

OAIAlert::~OAIAlert() {}

void OAIAlert::initializeModel() {

    m_alert_id_isSet = false;
    m_alert_id_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_security_investigation_tool_link_isSet = false;
    m_security_investigation_tool_link_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIAlert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlert::fromJsonObject(QJsonObject json) {

    m_alert_id_isValid = ::OpenAPI::fromJsonValue(m_alert_id, json[QString("alertId")]);
    m_alert_id_isSet = !json[QString("alertId")].isNull() && m_alert_id_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_security_investigation_tool_link_isValid = ::OpenAPI::fromJsonValue(m_security_investigation_tool_link, json[QString("securityInvestigationToolLink")]);
    m_security_investigation_tool_link_isSet = !json[QString("securityInvestigationToolLink")].isNull() && m_security_investigation_tool_link_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIAlert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlert::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_id_isSet) {
        obj.insert(QString("alertId"), ::OpenAPI::toJsonValue(m_alert_id));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_security_investigation_tool_link_isSet) {
        obj.insert(QString("securityInvestigationToolLink"), ::OpenAPI::toJsonValue(m_security_investigation_tool_link));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIAlert::getAlertId() const {
    return m_alert_id;
}
void OAIAlert::setAlertId(const QString &alert_id) {
    m_alert_id = alert_id;
    m_alert_id_isSet = true;
}

bool OAIAlert::is_alert_id_Set() const{
    return m_alert_id_isSet;
}

bool OAIAlert::is_alert_id_Valid() const{
    return m_alert_id_isValid;
}

QString OAIAlert::getCreateTime() const {
    return m_create_time;
}
void OAIAlert::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIAlert::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIAlert::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIAlert::getCustomerId() const {
    return m_customer_id;
}
void OAIAlert::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIAlert::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIAlert::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QMap<QString, QJsonValue> OAIAlert::getData() const {
    return m_data;
}
void OAIAlert::setData(const QMap<QString, QJsonValue> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIAlert::is_data_Set() const{
    return m_data_isSet;
}

bool OAIAlert::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIAlert::isDeleted() const {
    return m_deleted;
}
void OAIAlert::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIAlert::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIAlert::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIAlert::getEndTime() const {
    return m_end_time;
}
void OAIAlert::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIAlert::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIAlert::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIAlert::getEtag() const {
    return m_etag;
}
void OAIAlert::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIAlert::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIAlert::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIAlertMetadata OAIAlert::getMetadata() const {
    return m_metadata;
}
void OAIAlert::setMetadata(const OAIAlertMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIAlert::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIAlert::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIAlert::getSecurityInvestigationToolLink() const {
    return m_security_investigation_tool_link;
}
void OAIAlert::setSecurityInvestigationToolLink(const QString &security_investigation_tool_link) {
    m_security_investigation_tool_link = security_investigation_tool_link;
    m_security_investigation_tool_link_isSet = true;
}

bool OAIAlert::is_security_investigation_tool_link_Set() const{
    return m_security_investigation_tool_link_isSet;
}

bool OAIAlert::is_security_investigation_tool_link_Valid() const{
    return m_security_investigation_tool_link_isValid;
}

QString OAIAlert::getSource() const {
    return m_source;
}
void OAIAlert::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAlert::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAlert::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIAlert::getStartTime() const {
    return m_start_time;
}
void OAIAlert::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIAlert::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIAlert::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIAlert::getType() const {
    return m_type;
}
void OAIAlert::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAlert::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAlert::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAlert::getUpdateTime() const {
    return m_update_time;
}
void OAIAlert::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIAlert::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIAlert::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIAlert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_investigation_tool_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlert::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
