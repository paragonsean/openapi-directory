/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityList::OAIEntityList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityList::OAIEntityList() {
    this->initializeModel();
}

OAIEntityList::~OAIEntityList() {}

void OAIEntityList::initializeModel() {

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIEntityList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityList::fromJsonObject(QJsonObject json) {

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIEntityList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityList::asJsonObject() const {
    QJsonObject obj;
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<OAIEntity> OAIEntityList::getEntities() const {
    return m_entities;
}
void OAIEntityList::setEntities(const QList<OAIEntity> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIEntityList::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIEntityList::is_entities_Valid() const{
    return m_entities_isValid;
}

QList<QString> OAIEntityList::getHeaders() const {
    return m_headers;
}
void OAIEntityList::setHeaders(const QList<QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIEntityList::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIEntityList::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIEntityList::getName() const {
    return m_name;
}
void OAIEntityList::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEntityList::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEntityList::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIEntityList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
