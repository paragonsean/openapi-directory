/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceCompromisedSecurityDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceCompromisedSecurityDetail::OAIDeviceCompromisedSecurityDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceCompromisedSecurityDetail::OAIDeviceCompromisedSecurityDetail() {
    this->initializeModel();
}

OAIDeviceCompromisedSecurityDetail::~OAIDeviceCompromisedSecurityDetail() {}

void OAIDeviceCompromisedSecurityDetail::initializeModel() {

    m_device_compromised_state_isSet = false;
    m_device_compromised_state_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_device_model_isSet = false;
    m_device_model_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_ios_vendor_id_isSet = false;
    m_ios_vendor_id_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;
}

void OAIDeviceCompromisedSecurityDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceCompromisedSecurityDetail::fromJsonObject(QJsonObject json) {

    m_device_compromised_state_isValid = ::OpenAPI::fromJsonValue(m_device_compromised_state, json[QString("deviceCompromisedState")]);
    m_device_compromised_state_isSet = !json[QString("deviceCompromisedState")].isNull() && m_device_compromised_state_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_device_model_isValid = ::OpenAPI::fromJsonValue(m_device_model, json[QString("deviceModel")]);
    m_device_model_isSet = !json[QString("deviceModel")].isNull() && m_device_model_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_ios_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_ios_vendor_id, json[QString("iosVendorId")]);
    m_ios_vendor_id_isSet = !json[QString("iosVendorId")].isNull() && m_ios_vendor_id_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;
}

QString OAIDeviceCompromisedSecurityDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceCompromisedSecurityDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_device_compromised_state_isSet) {
        obj.insert(QString("deviceCompromisedState"), ::OpenAPI::toJsonValue(m_device_compromised_state));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_device_model_isSet) {
        obj.insert(QString("deviceModel"), ::OpenAPI::toJsonValue(m_device_model));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_ios_vendor_id_isSet) {
        obj.insert(QString("iosVendorId"), ::OpenAPI::toJsonValue(m_ios_vendor_id));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    return obj;
}

QString OAIDeviceCompromisedSecurityDetail::getDeviceCompromisedState() const {
    return m_device_compromised_state;
}
void OAIDeviceCompromisedSecurityDetail::setDeviceCompromisedState(const QString &device_compromised_state) {
    m_device_compromised_state = device_compromised_state;
    m_device_compromised_state_isSet = true;
}

bool OAIDeviceCompromisedSecurityDetail::is_device_compromised_state_Set() const{
    return m_device_compromised_state_isSet;
}

bool OAIDeviceCompromisedSecurityDetail::is_device_compromised_state_Valid() const{
    return m_device_compromised_state_isValid;
}

QString OAIDeviceCompromisedSecurityDetail::getDeviceId() const {
    return m_device_id;
}
void OAIDeviceCompromisedSecurityDetail::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIDeviceCompromisedSecurityDetail::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIDeviceCompromisedSecurityDetail::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIDeviceCompromisedSecurityDetail::getDeviceModel() const {
    return m_device_model;
}
void OAIDeviceCompromisedSecurityDetail::setDeviceModel(const QString &device_model) {
    m_device_model = device_model;
    m_device_model_isSet = true;
}

bool OAIDeviceCompromisedSecurityDetail::is_device_model_Set() const{
    return m_device_model_isSet;
}

bool OAIDeviceCompromisedSecurityDetail::is_device_model_Valid() const{
    return m_device_model_isValid;
}

QString OAIDeviceCompromisedSecurityDetail::getDeviceType() const {
    return m_device_type;
}
void OAIDeviceCompromisedSecurityDetail::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIDeviceCompromisedSecurityDetail::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIDeviceCompromisedSecurityDetail::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QString OAIDeviceCompromisedSecurityDetail::getIosVendorId() const {
    return m_ios_vendor_id;
}
void OAIDeviceCompromisedSecurityDetail::setIosVendorId(const QString &ios_vendor_id) {
    m_ios_vendor_id = ios_vendor_id;
    m_ios_vendor_id_isSet = true;
}

bool OAIDeviceCompromisedSecurityDetail::is_ios_vendor_id_Set() const{
    return m_ios_vendor_id_isSet;
}

bool OAIDeviceCompromisedSecurityDetail::is_ios_vendor_id_Valid() const{
    return m_ios_vendor_id_isValid;
}

QString OAIDeviceCompromisedSecurityDetail::getResourceId() const {
    return m_resource_id;
}
void OAIDeviceCompromisedSecurityDetail::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIDeviceCompromisedSecurityDetail::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIDeviceCompromisedSecurityDetail::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIDeviceCompromisedSecurityDetail::getSerialNumber() const {
    return m_serial_number;
}
void OAIDeviceCompromisedSecurityDetail::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIDeviceCompromisedSecurityDetail::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIDeviceCompromisedSecurityDetail::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

bool OAIDeviceCompromisedSecurityDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_compromised_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ios_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceCompromisedSecurityDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
