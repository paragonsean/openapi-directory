/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityRule::OAIActivityRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityRule::OAIActivityRule() {
    this->initializeModel();
}

OAIActivityRule::~OAIActivityRule() {}

void OAIActivityRule::initializeModel() {

    m_action_names_isSet = false;
    m_action_names_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_superseded_alerts_isSet = false;
    m_superseded_alerts_isValid = false;

    m_superseding_alert_isSet = false;
    m_superseding_alert_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;

    m_trigger_source_isSet = false;
    m_trigger_source_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_window_size_isSet = false;
    m_window_size_isValid = false;
}

void OAIActivityRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityRule::fromJsonObject(QJsonObject json) {

    m_action_names_isValid = ::OpenAPI::fromJsonValue(m_action_names, json[QString("actionNames")]);
    m_action_names_isSet = !json[QString("actionNames")].isNull() && m_action_names_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_superseded_alerts_isValid = ::OpenAPI::fromJsonValue(m_superseded_alerts, json[QString("supersededAlerts")]);
    m_superseded_alerts_isSet = !json[QString("supersededAlerts")].isNull() && m_superseded_alerts_isValid;

    m_superseding_alert_isValid = ::OpenAPI::fromJsonValue(m_superseding_alert, json[QString("supersedingAlert")]);
    m_superseding_alert_isSet = !json[QString("supersedingAlert")].isNull() && m_superseding_alert_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;

    m_trigger_source_isValid = ::OpenAPI::fromJsonValue(m_trigger_source, json[QString("triggerSource")]);
    m_trigger_source_isSet = !json[QString("triggerSource")].isNull() && m_trigger_source_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_window_size_isValid = ::OpenAPI::fromJsonValue(m_window_size, json[QString("windowSize")]);
    m_window_size_isSet = !json[QString("windowSize")].isNull() && m_window_size_isValid;
}

QString OAIActivityRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityRule::asJsonObject() const {
    QJsonObject obj;
    if (m_action_names.size() > 0) {
        obj.insert(QString("actionNames"), ::OpenAPI::toJsonValue(m_action_names));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_superseded_alerts.size() > 0) {
        obj.insert(QString("supersededAlerts"), ::OpenAPI::toJsonValue(m_superseded_alerts));
    }
    if (m_superseding_alert_isSet) {
        obj.insert(QString("supersedingAlert"), ::OpenAPI::toJsonValue(m_superseding_alert));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    if (m_trigger_source_isSet) {
        obj.insert(QString("triggerSource"), ::OpenAPI::toJsonValue(m_trigger_source));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_window_size_isSet) {
        obj.insert(QString("windowSize"), ::OpenAPI::toJsonValue(m_window_size));
    }
    return obj;
}

QList<QString> OAIActivityRule::getActionNames() const {
    return m_action_names;
}
void OAIActivityRule::setActionNames(const QList<QString> &action_names) {
    m_action_names = action_names;
    m_action_names_isSet = true;
}

bool OAIActivityRule::is_action_names_Set() const{
    return m_action_names_isSet;
}

bool OAIActivityRule::is_action_names_Valid() const{
    return m_action_names_isValid;
}

QString OAIActivityRule::getCreateTime() const {
    return m_create_time;
}
void OAIActivityRule::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIActivityRule::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIActivityRule::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIActivityRule::getDescription() const {
    return m_description;
}
void OAIActivityRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIActivityRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIActivityRule::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIActivityRule::getDisplayName() const {
    return m_display_name;
}
void OAIActivityRule::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIActivityRule::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIActivityRule::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIActivityRule::getName() const {
    return m_name;
}
void OAIActivityRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIActivityRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIActivityRule::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIActivityRule::getQuery() const {
    return m_query;
}
void OAIActivityRule::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIActivityRule::is_query_Set() const{
    return m_query_isSet;
}

bool OAIActivityRule::is_query_Valid() const{
    return m_query_isValid;
}

QList<QString> OAIActivityRule::getSupersededAlerts() const {
    return m_superseded_alerts;
}
void OAIActivityRule::setSupersededAlerts(const QList<QString> &superseded_alerts) {
    m_superseded_alerts = superseded_alerts;
    m_superseded_alerts_isSet = true;
}

bool OAIActivityRule::is_superseded_alerts_Set() const{
    return m_superseded_alerts_isSet;
}

bool OAIActivityRule::is_superseded_alerts_Valid() const{
    return m_superseded_alerts_isValid;
}

QString OAIActivityRule::getSupersedingAlert() const {
    return m_superseding_alert;
}
void OAIActivityRule::setSupersedingAlert(const QString &superseding_alert) {
    m_superseding_alert = superseding_alert;
    m_superseding_alert_isSet = true;
}

bool OAIActivityRule::is_superseding_alert_Set() const{
    return m_superseding_alert_isSet;
}

bool OAIActivityRule::is_superseding_alert_Valid() const{
    return m_superseding_alert_isValid;
}

QString OAIActivityRule::getThreshold() const {
    return m_threshold;
}
void OAIActivityRule::setThreshold(const QString &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIActivityRule::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIActivityRule::is_threshold_Valid() const{
    return m_threshold_isValid;
}

QString OAIActivityRule::getTriggerSource() const {
    return m_trigger_source;
}
void OAIActivityRule::setTriggerSource(const QString &trigger_source) {
    m_trigger_source = trigger_source;
    m_trigger_source_isSet = true;
}

bool OAIActivityRule::is_trigger_source_Set() const{
    return m_trigger_source_isSet;
}

bool OAIActivityRule::is_trigger_source_Valid() const{
    return m_trigger_source_isValid;
}

QString OAIActivityRule::getUpdateTime() const {
    return m_update_time;
}
void OAIActivityRule::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIActivityRule::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIActivityRule::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIActivityRule::getWindowSize() const {
    return m_window_size;
}
void OAIActivityRule::setWindowSize(const QString &window_size) {
    m_window_size = window_size;
    m_window_size_isSet = true;
}

bool OAIActivityRule::is_window_size_Set() const{
    return m_window_size_isSet;
}

bool OAIActivityRule::is_window_size_Valid() const{
    return m_window_size_isValid;
}

bool OAIActivityRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_superseded_alerts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_superseding_alert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
