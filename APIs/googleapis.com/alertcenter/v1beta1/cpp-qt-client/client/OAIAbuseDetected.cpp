/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAbuseDetected.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAbuseDetected::OAIAbuseDetected(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAbuseDetected::OAIAbuseDetected() {
    this->initializeModel();
}

OAIAbuseDetected::~OAIAbuseDetected() {}

void OAIAbuseDetected::initializeModel() {

    m_additional_details_isSet = false;
    m_additional_details_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_sub_alert_id_isSet = false;
    m_sub_alert_id_isValid = false;

    m_variation_type_isSet = false;
    m_variation_type_isValid = false;
}

void OAIAbuseDetected::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAbuseDetected::fromJsonObject(QJsonObject json) {

    m_additional_details_isValid = ::OpenAPI::fromJsonValue(m_additional_details, json[QString("additionalDetails")]);
    m_additional_details_isSet = !json[QString("additionalDetails")].isNull() && m_additional_details_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_sub_alert_id_isValid = ::OpenAPI::fromJsonValue(m_sub_alert_id, json[QString("subAlertId")]);
    m_sub_alert_id_isSet = !json[QString("subAlertId")].isNull() && m_sub_alert_id_isValid;

    m_variation_type_isValid = ::OpenAPI::fromJsonValue(m_variation_type, json[QString("variationType")]);
    m_variation_type_isSet = !json[QString("variationType")].isNull() && m_variation_type_isValid;
}

QString OAIAbuseDetected::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAbuseDetected::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_details.isSet()) {
        obj.insert(QString("additionalDetails"), ::OpenAPI::toJsonValue(m_additional_details));
    }
    if (m_product_isSet) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_sub_alert_id_isSet) {
        obj.insert(QString("subAlertId"), ::OpenAPI::toJsonValue(m_sub_alert_id));
    }
    if (m_variation_type_isSet) {
        obj.insert(QString("variationType"), ::OpenAPI::toJsonValue(m_variation_type));
    }
    return obj;
}

OAIEntityList OAIAbuseDetected::getAdditionalDetails() const {
    return m_additional_details;
}
void OAIAbuseDetected::setAdditionalDetails(const OAIEntityList &additional_details) {
    m_additional_details = additional_details;
    m_additional_details_isSet = true;
}

bool OAIAbuseDetected::is_additional_details_Set() const{
    return m_additional_details_isSet;
}

bool OAIAbuseDetected::is_additional_details_Valid() const{
    return m_additional_details_isValid;
}

QString OAIAbuseDetected::getProduct() const {
    return m_product;
}
void OAIAbuseDetected::setProduct(const QString &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIAbuseDetected::is_product_Set() const{
    return m_product_isSet;
}

bool OAIAbuseDetected::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIAbuseDetected::getSubAlertId() const {
    return m_sub_alert_id;
}
void OAIAbuseDetected::setSubAlertId(const QString &sub_alert_id) {
    m_sub_alert_id = sub_alert_id;
    m_sub_alert_id_isSet = true;
}

bool OAIAbuseDetected::is_sub_alert_id_Set() const{
    return m_sub_alert_id_isSet;
}

bool OAIAbuseDetected::is_sub_alert_id_Valid() const{
    return m_sub_alert_id_isValid;
}

QString OAIAbuseDetected::getVariationType() const {
    return m_variation_type;
}
void OAIAbuseDetected::setVariationType(const QString &variation_type) {
    m_variation_type = variation_type;
    m_variation_type_isSet = true;
}

bool OAIAbuseDetected::is_variation_type_Set() const{
    return m_variation_type_isSet;
}

bool OAIAbuseDetected::is_variation_type_Valid() const{
    return m_variation_type_isValid;
}

bool OAIAbuseDetected::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_alert_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variation_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAbuseDetected::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
