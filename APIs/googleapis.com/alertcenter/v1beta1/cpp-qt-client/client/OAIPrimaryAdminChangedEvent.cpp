/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrimaryAdminChangedEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrimaryAdminChangedEvent::OAIPrimaryAdminChangedEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrimaryAdminChangedEvent::OAIPrimaryAdminChangedEvent() {
    this->initializeModel();
}

OAIPrimaryAdminChangedEvent::~OAIPrimaryAdminChangedEvent() {}

void OAIPrimaryAdminChangedEvent::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_previous_admin_email_isSet = false;
    m_previous_admin_email_isValid = false;

    m_updated_admin_email_isSet = false;
    m_updated_admin_email_isValid = false;
}

void OAIPrimaryAdminChangedEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrimaryAdminChangedEvent::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_previous_admin_email_isValid = ::OpenAPI::fromJsonValue(m_previous_admin_email, json[QString("previousAdminEmail")]);
    m_previous_admin_email_isSet = !json[QString("previousAdminEmail")].isNull() && m_previous_admin_email_isValid;

    m_updated_admin_email_isValid = ::OpenAPI::fromJsonValue(m_updated_admin_email, json[QString("updatedAdminEmail")]);
    m_updated_admin_email_isSet = !json[QString("updatedAdminEmail")].isNull() && m_updated_admin_email_isValid;
}

QString OAIPrimaryAdminChangedEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrimaryAdminChangedEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_previous_admin_email_isSet) {
        obj.insert(QString("previousAdminEmail"), ::OpenAPI::toJsonValue(m_previous_admin_email));
    }
    if (m_updated_admin_email_isSet) {
        obj.insert(QString("updatedAdminEmail"), ::OpenAPI::toJsonValue(m_updated_admin_email));
    }
    return obj;
}

QString OAIPrimaryAdminChangedEvent::getDomain() const {
    return m_domain;
}
void OAIPrimaryAdminChangedEvent::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIPrimaryAdminChangedEvent::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIPrimaryAdminChangedEvent::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIPrimaryAdminChangedEvent::getPreviousAdminEmail() const {
    return m_previous_admin_email;
}
void OAIPrimaryAdminChangedEvent::setPreviousAdminEmail(const QString &previous_admin_email) {
    m_previous_admin_email = previous_admin_email;
    m_previous_admin_email_isSet = true;
}

bool OAIPrimaryAdminChangedEvent::is_previous_admin_email_Set() const{
    return m_previous_admin_email_isSet;
}

bool OAIPrimaryAdminChangedEvent::is_previous_admin_email_Valid() const{
    return m_previous_admin_email_isValid;
}

QString OAIPrimaryAdminChangedEvent::getUpdatedAdminEmail() const {
    return m_updated_admin_email;
}
void OAIPrimaryAdminChangedEvent::setUpdatedAdminEmail(const QString &updated_admin_email) {
    m_updated_admin_email = updated_admin_email;
    m_updated_admin_email_isSet = true;
}

bool OAIPrimaryAdminChangedEvent::is_updated_admin_email_Set() const{
    return m_updated_admin_email_isSet;
}

bool OAIPrimaryAdminChangedEvent::is_updated_admin_email_Valid() const{
    return m_updated_admin_email_isValid;
}

bool OAIPrimaryAdminChangedEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_admin_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_admin_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrimaryAdminChangedEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
