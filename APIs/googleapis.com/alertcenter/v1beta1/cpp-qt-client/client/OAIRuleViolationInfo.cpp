/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleViolationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleViolationInfo::OAIRuleViolationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleViolationInfo::OAIRuleViolationInfo() {
    this->initializeModel();
}

OAIRuleViolationInfo::~OAIRuleViolationInfo() {}

void OAIRuleViolationInfo::initializeModel() {

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_match_info_isSet = false;
    m_match_info_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_resource_info_isSet = false;
    m_resource_info_isValid = false;

    m_rule_info_isSet = false;
    m_rule_info_isValid = false;

    m_suppressed_action_types_isSet = false;
    m_suppressed_action_types_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_triggered_action_info_isSet = false;
    m_triggered_action_info_isValid = false;

    m_triggered_action_types_isSet = false;
    m_triggered_action_types_isValid = false;

    m_triggering_user_email_isSet = false;
    m_triggering_user_email_isValid = false;
}

void OAIRuleViolationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleViolationInfo::fromJsonObject(QJsonObject json) {

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("dataSource")]);
    m_data_source_isSet = !json[QString("dataSource")].isNull() && m_data_source_isValid;

    m_match_info_isValid = ::OpenAPI::fromJsonValue(m_match_info, json[QString("matchInfo")]);
    m_match_info_isSet = !json[QString("matchInfo")].isNull() && m_match_info_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_resource_info_isValid = ::OpenAPI::fromJsonValue(m_resource_info, json[QString("resourceInfo")]);
    m_resource_info_isSet = !json[QString("resourceInfo")].isNull() && m_resource_info_isValid;

    m_rule_info_isValid = ::OpenAPI::fromJsonValue(m_rule_info, json[QString("ruleInfo")]);
    m_rule_info_isSet = !json[QString("ruleInfo")].isNull() && m_rule_info_isValid;

    m_suppressed_action_types_isValid = ::OpenAPI::fromJsonValue(m_suppressed_action_types, json[QString("suppressedActionTypes")]);
    m_suppressed_action_types_isSet = !json[QString("suppressedActionTypes")].isNull() && m_suppressed_action_types_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_triggered_action_info_isValid = ::OpenAPI::fromJsonValue(m_triggered_action_info, json[QString("triggeredActionInfo")]);
    m_triggered_action_info_isSet = !json[QString("triggeredActionInfo")].isNull() && m_triggered_action_info_isValid;

    m_triggered_action_types_isValid = ::OpenAPI::fromJsonValue(m_triggered_action_types, json[QString("triggeredActionTypes")]);
    m_triggered_action_types_isSet = !json[QString("triggeredActionTypes")].isNull() && m_triggered_action_types_isValid;

    m_triggering_user_email_isValid = ::OpenAPI::fromJsonValue(m_triggering_user_email, json[QString("triggeringUserEmail")]);
    m_triggering_user_email_isSet = !json[QString("triggeringUserEmail")].isNull() && m_triggering_user_email_isValid;
}

QString OAIRuleViolationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleViolationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_isSet) {
        obj.insert(QString("dataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_match_info.size() > 0) {
        obj.insert(QString("matchInfo"), ::OpenAPI::toJsonValue(m_match_info));
    }
    if (m_recipients.size() > 0) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_resource_info.isSet()) {
        obj.insert(QString("resourceInfo"), ::OpenAPI::toJsonValue(m_resource_info));
    }
    if (m_rule_info.isSet()) {
        obj.insert(QString("ruleInfo"), ::OpenAPI::toJsonValue(m_rule_info));
    }
    if (m_suppressed_action_types.size() > 0) {
        obj.insert(QString("suppressedActionTypes"), ::OpenAPI::toJsonValue(m_suppressed_action_types));
    }
    if (m_trigger_isSet) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    if (m_triggered_action_info.size() > 0) {
        obj.insert(QString("triggeredActionInfo"), ::OpenAPI::toJsonValue(m_triggered_action_info));
    }
    if (m_triggered_action_types.size() > 0) {
        obj.insert(QString("triggeredActionTypes"), ::OpenAPI::toJsonValue(m_triggered_action_types));
    }
    if (m_triggering_user_email_isSet) {
        obj.insert(QString("triggeringUserEmail"), ::OpenAPI::toJsonValue(m_triggering_user_email));
    }
    return obj;
}

QString OAIRuleViolationInfo::getDataSource() const {
    return m_data_source;
}
void OAIRuleViolationInfo::setDataSource(const QString &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIRuleViolationInfo::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIRuleViolationInfo::is_data_source_Valid() const{
    return m_data_source_isValid;
}

QList<OAIMatchInfo> OAIRuleViolationInfo::getMatchInfo() const {
    return m_match_info;
}
void OAIRuleViolationInfo::setMatchInfo(const QList<OAIMatchInfo> &match_info) {
    m_match_info = match_info;
    m_match_info_isSet = true;
}

bool OAIRuleViolationInfo::is_match_info_Set() const{
    return m_match_info_isSet;
}

bool OAIRuleViolationInfo::is_match_info_Valid() const{
    return m_match_info_isValid;
}

QList<QString> OAIRuleViolationInfo::getRecipients() const {
    return m_recipients;
}
void OAIRuleViolationInfo::setRecipients(const QList<QString> &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIRuleViolationInfo::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIRuleViolationInfo::is_recipients_Valid() const{
    return m_recipients_isValid;
}

OAIResourceInfo OAIRuleViolationInfo::getResourceInfo() const {
    return m_resource_info;
}
void OAIRuleViolationInfo::setResourceInfo(const OAIResourceInfo &resource_info) {
    m_resource_info = resource_info;
    m_resource_info_isSet = true;
}

bool OAIRuleViolationInfo::is_resource_info_Set() const{
    return m_resource_info_isSet;
}

bool OAIRuleViolationInfo::is_resource_info_Valid() const{
    return m_resource_info_isValid;
}

OAIRuleInfo OAIRuleViolationInfo::getRuleInfo() const {
    return m_rule_info;
}
void OAIRuleViolationInfo::setRuleInfo(const OAIRuleInfo &rule_info) {
    m_rule_info = rule_info;
    m_rule_info_isSet = true;
}

bool OAIRuleViolationInfo::is_rule_info_Set() const{
    return m_rule_info_isSet;
}

bool OAIRuleViolationInfo::is_rule_info_Valid() const{
    return m_rule_info_isValid;
}

QList<QString> OAIRuleViolationInfo::getSuppressedActionTypes() const {
    return m_suppressed_action_types;
}
void OAIRuleViolationInfo::setSuppressedActionTypes(const QList<QString> &suppressed_action_types) {
    m_suppressed_action_types = suppressed_action_types;
    m_suppressed_action_types_isSet = true;
}

bool OAIRuleViolationInfo::is_suppressed_action_types_Set() const{
    return m_suppressed_action_types_isSet;
}

bool OAIRuleViolationInfo::is_suppressed_action_types_Valid() const{
    return m_suppressed_action_types_isValid;
}

QString OAIRuleViolationInfo::getTrigger() const {
    return m_trigger;
}
void OAIRuleViolationInfo::setTrigger(const QString &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIRuleViolationInfo::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIRuleViolationInfo::is_trigger_Valid() const{
    return m_trigger_isValid;
}

QList<OAIObject> OAIRuleViolationInfo::getTriggeredActionInfo() const {
    return m_triggered_action_info;
}
void OAIRuleViolationInfo::setTriggeredActionInfo(const QList<OAIObject> &triggered_action_info) {
    m_triggered_action_info = triggered_action_info;
    m_triggered_action_info_isSet = true;
}

bool OAIRuleViolationInfo::is_triggered_action_info_Set() const{
    return m_triggered_action_info_isSet;
}

bool OAIRuleViolationInfo::is_triggered_action_info_Valid() const{
    return m_triggered_action_info_isValid;
}

QList<QString> OAIRuleViolationInfo::getTriggeredActionTypes() const {
    return m_triggered_action_types;
}
void OAIRuleViolationInfo::setTriggeredActionTypes(const QList<QString> &triggered_action_types) {
    m_triggered_action_types = triggered_action_types;
    m_triggered_action_types_isSet = true;
}

bool OAIRuleViolationInfo::is_triggered_action_types_Set() const{
    return m_triggered_action_types_isSet;
}

bool OAIRuleViolationInfo::is_triggered_action_types_Valid() const{
    return m_triggered_action_types_isValid;
}

QString OAIRuleViolationInfo::getTriggeringUserEmail() const {
    return m_triggering_user_email;
}
void OAIRuleViolationInfo::setTriggeringUserEmail(const QString &triggering_user_email) {
    m_triggering_user_email = triggering_user_email;
    m_triggering_user_email_isSet = true;
}

bool OAIRuleViolationInfo::is_triggering_user_email_Set() const{
    return m_triggering_user_email_isSet;
}

bool OAIRuleViolationInfo::is_triggering_user_email_Valid() const{
    return m_triggering_user_email_isValid;
}

bool OAIRuleViolationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suppressed_action_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggered_action_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggered_action_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggering_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleViolationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
