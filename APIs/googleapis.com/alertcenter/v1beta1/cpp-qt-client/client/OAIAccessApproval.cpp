/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessApproval.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessApproval::OAIAccessApproval(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessApproval::OAIAccessApproval() {
    this->initializeModel();
}

OAIAccessApproval::~OAIAccessApproval() {}

void OAIAccessApproval::initializeModel() {

    m_justification_reason_isSet = false;
    m_justification_reason_isValid = false;

    m_office_location_isSet = false;
    m_office_location_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_tickets_isSet = false;
    m_tickets_isValid = false;
}

void OAIAccessApproval::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessApproval::fromJsonObject(QJsonObject json) {

    m_justification_reason_isValid = ::OpenAPI::fromJsonValue(m_justification_reason, json[QString("justificationReason")]);
    m_justification_reason_isSet = !json[QString("justificationReason")].isNull() && m_justification_reason_isValid;

    m_office_location_isValid = ::OpenAPI::fromJsonValue(m_office_location, json[QString("officeLocation")]);
    m_office_location_isSet = !json[QString("officeLocation")].isNull() && m_office_location_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_tickets_isValid = ::OpenAPI::fromJsonValue(m_tickets, json[QString("tickets")]);
    m_tickets_isSet = !json[QString("tickets")].isNull() && m_tickets_isValid;
}

QString OAIAccessApproval::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessApproval::asJsonObject() const {
    QJsonObject obj;
    if (m_justification_reason.size() > 0) {
        obj.insert(QString("justificationReason"), ::OpenAPI::toJsonValue(m_justification_reason));
    }
    if (m_office_location_isSet) {
        obj.insert(QString("officeLocation"), ::OpenAPI::toJsonValue(m_office_location));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_tickets.size() > 0) {
        obj.insert(QString("tickets"), ::OpenAPI::toJsonValue(m_tickets));
    }
    return obj;
}

QList<QString> OAIAccessApproval::getJustificationReason() const {
    return m_justification_reason;
}
void OAIAccessApproval::setJustificationReason(const QList<QString> &justification_reason) {
    m_justification_reason = justification_reason;
    m_justification_reason_isSet = true;
}

bool OAIAccessApproval::is_justification_reason_Set() const{
    return m_justification_reason_isSet;
}

bool OAIAccessApproval::is_justification_reason_Valid() const{
    return m_justification_reason_isValid;
}

QString OAIAccessApproval::getOfficeLocation() const {
    return m_office_location;
}
void OAIAccessApproval::setOfficeLocation(const QString &office_location) {
    m_office_location = office_location;
    m_office_location_isSet = true;
}

bool OAIAccessApproval::is_office_location_Set() const{
    return m_office_location_isSet;
}

bool OAIAccessApproval::is_office_location_Valid() const{
    return m_office_location_isValid;
}

QList<QString> OAIAccessApproval::getProducts() const {
    return m_products;
}
void OAIAccessApproval::setProducts(const QList<QString> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIAccessApproval::is_products_Set() const{
    return m_products_isSet;
}

bool OAIAccessApproval::is_products_Valid() const{
    return m_products_isValid;
}

QString OAIAccessApproval::getRequestId() const {
    return m_request_id;
}
void OAIAccessApproval::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIAccessApproval::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIAccessApproval::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIAccessApproval::getScope() const {
    return m_scope;
}
void OAIAccessApproval::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIAccessApproval::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIAccessApproval::is_scope_Valid() const{
    return m_scope_isValid;
}

QList<OAISupportTicket> OAIAccessApproval::getTickets() const {
    return m_tickets;
}
void OAIAccessApproval::setTickets(const QList<OAISupportTicket> &tickets) {
    m_tickets = tickets;
    m_tickets_isSet = true;
}

bool OAIAccessApproval::is_tickets_Set() const{
    return m_tickets_isSet;
}

bool OAIAccessApproval::is_tickets_Valid() const{
    return m_tickets_isValid;
}

bool OAIAccessApproval::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_justification_reason.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tickets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessApproval::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
