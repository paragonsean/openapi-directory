/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsv.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsv::OAICsv(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsv::OAICsv() {
    this->initializeModel();
}

OAICsv::~OAICsv() {}

void OAICsv::initializeModel() {

    m_data_rows_isSet = false;
    m_data_rows_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;
}

void OAICsv::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsv::fromJsonObject(QJsonObject json) {

    m_data_rows_isValid = ::OpenAPI::fromJsonValue(m_data_rows, json[QString("dataRows")]);
    m_data_rows_isSet = !json[QString("dataRows")].isNull() && m_data_rows_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;
}

QString OAICsv::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsv::asJsonObject() const {
    QJsonObject obj;
    if (m_data_rows.size() > 0) {
        obj.insert(QString("dataRows"), ::OpenAPI::toJsonValue(m_data_rows));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    return obj;
}

QList<OAICsvRow> OAICsv::getDataRows() const {
    return m_data_rows;
}
void OAICsv::setDataRows(const QList<OAICsvRow> &data_rows) {
    m_data_rows = data_rows;
    m_data_rows_isSet = true;
}

bool OAICsv::is_data_rows_Set() const{
    return m_data_rows_isSet;
}

bool OAICsv::is_data_rows_Valid() const{
    return m_data_rows_isValid;
}

QList<QString> OAICsv::getHeaders() const {
    return m_headers;
}
void OAICsv::setHeaders(const QList<QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAICsv::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAICsv::is_headers_Valid() const{
    return m_headers_isValid;
}

bool OAICsv::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsv::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
