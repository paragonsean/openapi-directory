/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppsOutage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppsOutage::OAIAppsOutage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppsOutage::OAIAppsOutage() {
    this->initializeModel();
}

OAIAppsOutage::~OAIAppsOutage() {}

void OAIAppsOutage::initializeModel() {

    m_dashboard_uri_isSet = false;
    m_dashboard_uri_isValid = false;

    m_incident_tracking_id_isSet = false;
    m_incident_tracking_id_isValid = false;

    m_merge_info_isSet = false;
    m_merge_info_isValid = false;

    m_next_update_time_isSet = false;
    m_next_update_time_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_resolution_time_isSet = false;
    m_resolution_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAppsOutage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppsOutage::fromJsonObject(QJsonObject json) {

    m_dashboard_uri_isValid = ::OpenAPI::fromJsonValue(m_dashboard_uri, json[QString("dashboardUri")]);
    m_dashboard_uri_isSet = !json[QString("dashboardUri")].isNull() && m_dashboard_uri_isValid;

    m_incident_tracking_id_isValid = ::OpenAPI::fromJsonValue(m_incident_tracking_id, json[QString("incidentTrackingId")]);
    m_incident_tracking_id_isSet = !json[QString("incidentTrackingId")].isNull() && m_incident_tracking_id_isValid;

    m_merge_info_isValid = ::OpenAPI::fromJsonValue(m_merge_info, json[QString("mergeInfo")]);
    m_merge_info_isSet = !json[QString("mergeInfo")].isNull() && m_merge_info_isValid;

    m_next_update_time_isValid = ::OpenAPI::fromJsonValue(m_next_update_time, json[QString("nextUpdateTime")]);
    m_next_update_time_isSet = !json[QString("nextUpdateTime")].isNull() && m_next_update_time_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_resolution_time_isValid = ::OpenAPI::fromJsonValue(m_resolution_time, json[QString("resolutionTime")]);
    m_resolution_time_isSet = !json[QString("resolutionTime")].isNull() && m_resolution_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIAppsOutage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppsOutage::asJsonObject() const {
    QJsonObject obj;
    if (m_dashboard_uri_isSet) {
        obj.insert(QString("dashboardUri"), ::OpenAPI::toJsonValue(m_dashboard_uri));
    }
    if (m_incident_tracking_id_isSet) {
        obj.insert(QString("incidentTrackingId"), ::OpenAPI::toJsonValue(m_incident_tracking_id));
    }
    if (m_merge_info.isSet()) {
        obj.insert(QString("mergeInfo"), ::OpenAPI::toJsonValue(m_merge_info));
    }
    if (m_next_update_time_isSet) {
        obj.insert(QString("nextUpdateTime"), ::OpenAPI::toJsonValue(m_next_update_time));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_resolution_time_isSet) {
        obj.insert(QString("resolutionTime"), ::OpenAPI::toJsonValue(m_resolution_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIAppsOutage::getDashboardUri() const {
    return m_dashboard_uri;
}
void OAIAppsOutage::setDashboardUri(const QString &dashboard_uri) {
    m_dashboard_uri = dashboard_uri;
    m_dashboard_uri_isSet = true;
}

bool OAIAppsOutage::is_dashboard_uri_Set() const{
    return m_dashboard_uri_isSet;
}

bool OAIAppsOutage::is_dashboard_uri_Valid() const{
    return m_dashboard_uri_isValid;
}

QString OAIAppsOutage::getIncidentTrackingId() const {
    return m_incident_tracking_id;
}
void OAIAppsOutage::setIncidentTrackingId(const QString &incident_tracking_id) {
    m_incident_tracking_id = incident_tracking_id;
    m_incident_tracking_id_isSet = true;
}

bool OAIAppsOutage::is_incident_tracking_id_Set() const{
    return m_incident_tracking_id_isSet;
}

bool OAIAppsOutage::is_incident_tracking_id_Valid() const{
    return m_incident_tracking_id_isValid;
}

OAIMergeInfo OAIAppsOutage::getMergeInfo() const {
    return m_merge_info;
}
void OAIAppsOutage::setMergeInfo(const OAIMergeInfo &merge_info) {
    m_merge_info = merge_info;
    m_merge_info_isSet = true;
}

bool OAIAppsOutage::is_merge_info_Set() const{
    return m_merge_info_isSet;
}

bool OAIAppsOutage::is_merge_info_Valid() const{
    return m_merge_info_isValid;
}

QString OAIAppsOutage::getNextUpdateTime() const {
    return m_next_update_time;
}
void OAIAppsOutage::setNextUpdateTime(const QString &next_update_time) {
    m_next_update_time = next_update_time;
    m_next_update_time_isSet = true;
}

bool OAIAppsOutage::is_next_update_time_Set() const{
    return m_next_update_time_isSet;
}

bool OAIAppsOutage::is_next_update_time_Valid() const{
    return m_next_update_time_isValid;
}

QList<QString> OAIAppsOutage::getProducts() const {
    return m_products;
}
void OAIAppsOutage::setProducts(const QList<QString> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIAppsOutage::is_products_Set() const{
    return m_products_isSet;
}

bool OAIAppsOutage::is_products_Valid() const{
    return m_products_isValid;
}

QString OAIAppsOutage::getResolutionTime() const {
    return m_resolution_time;
}
void OAIAppsOutage::setResolutionTime(const QString &resolution_time) {
    m_resolution_time = resolution_time;
    m_resolution_time_isSet = true;
}

bool OAIAppsOutage::is_resolution_time_Set() const{
    return m_resolution_time_isSet;
}

bool OAIAppsOutage::is_resolution_time_Valid() const{
    return m_resolution_time_isValid;
}

QString OAIAppsOutage::getStatus() const {
    return m_status;
}
void OAIAppsOutage::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAppsOutage::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAppsOutage::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAppsOutage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dashboard_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incident_tracking_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppsOutage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
