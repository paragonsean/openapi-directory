/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserDefinedDetectorInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserDefinedDetectorInfo::OAIUserDefinedDetectorInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserDefinedDetectorInfo::OAIUserDefinedDetectorInfo() {
    this->initializeModel();
}

OAIUserDefinedDetectorInfo::~OAIUserDefinedDetectorInfo() {}

void OAIUserDefinedDetectorInfo::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;
}

void OAIUserDefinedDetectorInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserDefinedDetectorInfo::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;
}

QString OAIUserDefinedDetectorInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserDefinedDetectorInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    return obj;
}

QString OAIUserDefinedDetectorInfo::getDisplayName() const {
    return m_display_name;
}
void OAIUserDefinedDetectorInfo::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUserDefinedDetectorInfo::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUserDefinedDetectorInfo::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUserDefinedDetectorInfo::getResourceName() const {
    return m_resource_name;
}
void OAIUserDefinedDetectorInfo::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIUserDefinedDetectorInfo::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIUserDefinedDetectorInfo::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

bool OAIUserDefinedDetectorInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserDefinedDetectorInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
