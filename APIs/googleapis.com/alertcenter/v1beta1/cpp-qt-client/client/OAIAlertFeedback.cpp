/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertFeedback.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertFeedback::OAIAlertFeedback(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertFeedback::OAIAlertFeedback() {
    this->initializeModel();
}

OAIAlertFeedback::~OAIAlertFeedback() {}

void OAIAlertFeedback::initializeModel() {

    m_alert_id_isSet = false;
    m_alert_id_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_feedback_id_isSet = false;
    m_feedback_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAlertFeedback::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertFeedback::fromJsonObject(QJsonObject json) {

    m_alert_id_isValid = ::OpenAPI::fromJsonValue(m_alert_id, json[QString("alertId")]);
    m_alert_id_isSet = !json[QString("alertId")].isNull() && m_alert_id_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_feedback_id_isValid = ::OpenAPI::fromJsonValue(m_feedback_id, json[QString("feedbackId")]);
    m_feedback_id_isSet = !json[QString("feedbackId")].isNull() && m_feedback_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAlertFeedback::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertFeedback::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_id_isSet) {
        obj.insert(QString("alertId"), ::OpenAPI::toJsonValue(m_alert_id));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_feedback_id_isSet) {
        obj.insert(QString("feedbackId"), ::OpenAPI::toJsonValue(m_feedback_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAlertFeedback::getAlertId() const {
    return m_alert_id;
}
void OAIAlertFeedback::setAlertId(const QString &alert_id) {
    m_alert_id = alert_id;
    m_alert_id_isSet = true;
}

bool OAIAlertFeedback::is_alert_id_Set() const{
    return m_alert_id_isSet;
}

bool OAIAlertFeedback::is_alert_id_Valid() const{
    return m_alert_id_isValid;
}

QString OAIAlertFeedback::getCreateTime() const {
    return m_create_time;
}
void OAIAlertFeedback::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIAlertFeedback::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIAlertFeedback::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIAlertFeedback::getCustomerId() const {
    return m_customer_id;
}
void OAIAlertFeedback::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIAlertFeedback::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIAlertFeedback::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIAlertFeedback::getEmail() const {
    return m_email;
}
void OAIAlertFeedback::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAlertFeedback::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAlertFeedback::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAlertFeedback::getFeedbackId() const {
    return m_feedback_id;
}
void OAIAlertFeedback::setFeedbackId(const QString &feedback_id) {
    m_feedback_id = feedback_id;
    m_feedback_id_isSet = true;
}

bool OAIAlertFeedback::is_feedback_id_Set() const{
    return m_feedback_id_isSet;
}

bool OAIAlertFeedback::is_feedback_id_Valid() const{
    return m_feedback_id_isValid;
}

QString OAIAlertFeedback::getType() const {
    return m_type;
}
void OAIAlertFeedback::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAlertFeedback::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAlertFeedback::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAlertFeedback::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertFeedback::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
