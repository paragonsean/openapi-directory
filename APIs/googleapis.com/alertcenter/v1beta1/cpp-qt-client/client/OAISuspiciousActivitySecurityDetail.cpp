/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuspiciousActivitySecurityDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuspiciousActivitySecurityDetail::OAISuspiciousActivitySecurityDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuspiciousActivitySecurityDetail::OAISuspiciousActivitySecurityDetail() {
    this->initializeModel();
}

OAISuspiciousActivitySecurityDetail::~OAISuspiciousActivitySecurityDetail() {}

void OAISuspiciousActivitySecurityDetail::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_device_model_isSet = false;
    m_device_model_isValid = false;

    m_device_property_isSet = false;
    m_device_property_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_ios_vendor_id_isSet = false;
    m_ios_vendor_id_isValid = false;

    m_new_value_isSet = false;
    m_new_value_isValid = false;

    m_old_value_isSet = false;
    m_old_value_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;
}

void OAISuspiciousActivitySecurityDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuspiciousActivitySecurityDetail::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_device_model_isValid = ::OpenAPI::fromJsonValue(m_device_model, json[QString("deviceModel")]);
    m_device_model_isSet = !json[QString("deviceModel")].isNull() && m_device_model_isValid;

    m_device_property_isValid = ::OpenAPI::fromJsonValue(m_device_property, json[QString("deviceProperty")]);
    m_device_property_isSet = !json[QString("deviceProperty")].isNull() && m_device_property_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_ios_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_ios_vendor_id, json[QString("iosVendorId")]);
    m_ios_vendor_id_isSet = !json[QString("iosVendorId")].isNull() && m_ios_vendor_id_isValid;

    m_new_value_isValid = ::OpenAPI::fromJsonValue(m_new_value, json[QString("newValue")]);
    m_new_value_isSet = !json[QString("newValue")].isNull() && m_new_value_isValid;

    m_old_value_isValid = ::OpenAPI::fromJsonValue(m_old_value, json[QString("oldValue")]);
    m_old_value_isSet = !json[QString("oldValue")].isNull() && m_old_value_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;
}

QString OAISuspiciousActivitySecurityDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuspiciousActivitySecurityDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_device_model_isSet) {
        obj.insert(QString("deviceModel"), ::OpenAPI::toJsonValue(m_device_model));
    }
    if (m_device_property_isSet) {
        obj.insert(QString("deviceProperty"), ::OpenAPI::toJsonValue(m_device_property));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_ios_vendor_id_isSet) {
        obj.insert(QString("iosVendorId"), ::OpenAPI::toJsonValue(m_ios_vendor_id));
    }
    if (m_new_value_isSet) {
        obj.insert(QString("newValue"), ::OpenAPI::toJsonValue(m_new_value));
    }
    if (m_old_value_isSet) {
        obj.insert(QString("oldValue"), ::OpenAPI::toJsonValue(m_old_value));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    return obj;
}

QString OAISuspiciousActivitySecurityDetail::getDeviceId() const {
    return m_device_id;
}
void OAISuspiciousActivitySecurityDetail::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAISuspiciousActivitySecurityDetail::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAISuspiciousActivitySecurityDetail::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAISuspiciousActivitySecurityDetail::getDeviceModel() const {
    return m_device_model;
}
void OAISuspiciousActivitySecurityDetail::setDeviceModel(const QString &device_model) {
    m_device_model = device_model;
    m_device_model_isSet = true;
}

bool OAISuspiciousActivitySecurityDetail::is_device_model_Set() const{
    return m_device_model_isSet;
}

bool OAISuspiciousActivitySecurityDetail::is_device_model_Valid() const{
    return m_device_model_isValid;
}

QString OAISuspiciousActivitySecurityDetail::getDeviceProperty() const {
    return m_device_property;
}
void OAISuspiciousActivitySecurityDetail::setDeviceProperty(const QString &device_property) {
    m_device_property = device_property;
    m_device_property_isSet = true;
}

bool OAISuspiciousActivitySecurityDetail::is_device_property_Set() const{
    return m_device_property_isSet;
}

bool OAISuspiciousActivitySecurityDetail::is_device_property_Valid() const{
    return m_device_property_isValid;
}

QString OAISuspiciousActivitySecurityDetail::getDeviceType() const {
    return m_device_type;
}
void OAISuspiciousActivitySecurityDetail::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAISuspiciousActivitySecurityDetail::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAISuspiciousActivitySecurityDetail::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QString OAISuspiciousActivitySecurityDetail::getIosVendorId() const {
    return m_ios_vendor_id;
}
void OAISuspiciousActivitySecurityDetail::setIosVendorId(const QString &ios_vendor_id) {
    m_ios_vendor_id = ios_vendor_id;
    m_ios_vendor_id_isSet = true;
}

bool OAISuspiciousActivitySecurityDetail::is_ios_vendor_id_Set() const{
    return m_ios_vendor_id_isSet;
}

bool OAISuspiciousActivitySecurityDetail::is_ios_vendor_id_Valid() const{
    return m_ios_vendor_id_isValid;
}

QString OAISuspiciousActivitySecurityDetail::getNewValue() const {
    return m_new_value;
}
void OAISuspiciousActivitySecurityDetail::setNewValue(const QString &new_value) {
    m_new_value = new_value;
    m_new_value_isSet = true;
}

bool OAISuspiciousActivitySecurityDetail::is_new_value_Set() const{
    return m_new_value_isSet;
}

bool OAISuspiciousActivitySecurityDetail::is_new_value_Valid() const{
    return m_new_value_isValid;
}

QString OAISuspiciousActivitySecurityDetail::getOldValue() const {
    return m_old_value;
}
void OAISuspiciousActivitySecurityDetail::setOldValue(const QString &old_value) {
    m_old_value = old_value;
    m_old_value_isSet = true;
}

bool OAISuspiciousActivitySecurityDetail::is_old_value_Set() const{
    return m_old_value_isSet;
}

bool OAISuspiciousActivitySecurityDetail::is_old_value_Valid() const{
    return m_old_value_isValid;
}

QString OAISuspiciousActivitySecurityDetail::getResourceId() const {
    return m_resource_id;
}
void OAISuspiciousActivitySecurityDetail::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAISuspiciousActivitySecurityDetail::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAISuspiciousActivitySecurityDetail::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAISuspiciousActivitySecurityDetail::getSerialNumber() const {
    return m_serial_number;
}
void OAISuspiciousActivitySecurityDetail::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAISuspiciousActivitySecurityDetail::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAISuspiciousActivitySecurityDetail::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

bool OAISuspiciousActivitySecurityDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ios_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuspiciousActivitySecurityDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
