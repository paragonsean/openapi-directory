/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleOperations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleOperations::OAIGoogleOperations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleOperations::OAIGoogleOperations() {
    this->initializeModel();
}

OAIGoogleOperations::~OAIGoogleOperations() {}

void OAIGoogleOperations::initializeModel() {

    m_affected_user_emails_isSet = false;
    m_affected_user_emails_isValid = false;

    m_attachment_data_isSet = false;
    m_attachment_data_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIGoogleOperations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleOperations::fromJsonObject(QJsonObject json) {

    m_affected_user_emails_isValid = ::OpenAPI::fromJsonValue(m_affected_user_emails, json[QString("affectedUserEmails")]);
    m_affected_user_emails_isSet = !json[QString("affectedUserEmails")].isNull() && m_affected_user_emails_isValid;

    m_attachment_data_isValid = ::OpenAPI::fromJsonValue(m_attachment_data, json[QString("attachmentData")]);
    m_attachment_data_isSet = !json[QString("attachmentData")].isNull() && m_attachment_data_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIGoogleOperations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleOperations::asJsonObject() const {
    QJsonObject obj;
    if (m_affected_user_emails.size() > 0) {
        obj.insert(QString("affectedUserEmails"), ::OpenAPI::toJsonValue(m_affected_user_emails));
    }
    if (m_attachment_data.isSet()) {
        obj.insert(QString("attachmentData"), ::OpenAPI::toJsonValue(m_attachment_data));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_header_isSet) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<QString> OAIGoogleOperations::getAffectedUserEmails() const {
    return m_affected_user_emails;
}
void OAIGoogleOperations::setAffectedUserEmails(const QList<QString> &affected_user_emails) {
    m_affected_user_emails = affected_user_emails;
    m_affected_user_emails_isSet = true;
}

bool OAIGoogleOperations::is_affected_user_emails_Set() const{
    return m_affected_user_emails_isSet;
}

bool OAIGoogleOperations::is_affected_user_emails_Valid() const{
    return m_affected_user_emails_isValid;
}

OAIAttachment OAIGoogleOperations::getAttachmentData() const {
    return m_attachment_data;
}
void OAIGoogleOperations::setAttachmentData(const OAIAttachment &attachment_data) {
    m_attachment_data = attachment_data;
    m_attachment_data_isSet = true;
}

bool OAIGoogleOperations::is_attachment_data_Set() const{
    return m_attachment_data_isSet;
}

bool OAIGoogleOperations::is_attachment_data_Valid() const{
    return m_attachment_data_isValid;
}

QString OAIGoogleOperations::getDescription() const {
    return m_description;
}
void OAIGoogleOperations::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleOperations::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleOperations::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleOperations::getDomain() const {
    return m_domain;
}
void OAIGoogleOperations::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIGoogleOperations::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIGoogleOperations::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIGoogleOperations::getHeader() const {
    return m_header;
}
void OAIGoogleOperations::setHeader(const QString &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIGoogleOperations::is_header_Set() const{
    return m_header_isSet;
}

bool OAIGoogleOperations::is_header_Valid() const{
    return m_header_isValid;
}

QString OAIGoogleOperations::getTitle() const {
    return m_title;
}
void OAIGoogleOperations::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGoogleOperations::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGoogleOperations::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIGoogleOperations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affected_user_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleOperations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
