/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatchInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatchInfo::OAIMatchInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatchInfo::OAIMatchInfo() {
    this->initializeModel();
}

OAIMatchInfo::~OAIMatchInfo() {}

void OAIMatchInfo::initializeModel() {

    m_predefined_detector_isSet = false;
    m_predefined_detector_isValid = false;

    m_user_defined_detector_isSet = false;
    m_user_defined_detector_isValid = false;
}

void OAIMatchInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatchInfo::fromJsonObject(QJsonObject json) {

    m_predefined_detector_isValid = ::OpenAPI::fromJsonValue(m_predefined_detector, json[QString("predefinedDetector")]);
    m_predefined_detector_isSet = !json[QString("predefinedDetector")].isNull() && m_predefined_detector_isValid;

    m_user_defined_detector_isValid = ::OpenAPI::fromJsonValue(m_user_defined_detector, json[QString("userDefinedDetector")]);
    m_user_defined_detector_isSet = !json[QString("userDefinedDetector")].isNull() && m_user_defined_detector_isValid;
}

QString OAIMatchInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatchInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_predefined_detector.isSet()) {
        obj.insert(QString("predefinedDetector"), ::OpenAPI::toJsonValue(m_predefined_detector));
    }
    if (m_user_defined_detector.isSet()) {
        obj.insert(QString("userDefinedDetector"), ::OpenAPI::toJsonValue(m_user_defined_detector));
    }
    return obj;
}

OAIPredefinedDetectorInfo OAIMatchInfo::getPredefinedDetector() const {
    return m_predefined_detector;
}
void OAIMatchInfo::setPredefinedDetector(const OAIPredefinedDetectorInfo &predefined_detector) {
    m_predefined_detector = predefined_detector;
    m_predefined_detector_isSet = true;
}

bool OAIMatchInfo::is_predefined_detector_Set() const{
    return m_predefined_detector_isSet;
}

bool OAIMatchInfo::is_predefined_detector_Valid() const{
    return m_predefined_detector_isValid;
}

OAIUserDefinedDetectorInfo OAIMatchInfo::getUserDefinedDetector() const {
    return m_user_defined_detector;
}
void OAIMatchInfo::setUserDefinedDetector(const OAIUserDefinedDetectorInfo &user_defined_detector) {
    m_user_defined_detector = user_defined_detector;
    m_user_defined_detector_isSet = true;
}

bool OAIMatchInfo::is_user_defined_detector_Set() const{
    return m_user_defined_detector_isSet;
}

bool OAIMatchInfo::is_user_defined_detector_Valid() const{
    return m_user_defined_detector_isValid;
}

bool OAIMatchInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_predefined_detector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_defined_detector.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatchInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
