/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AlertFeedback model module.
 * @module model/AlertFeedback
 * @version v1beta1
 */
class AlertFeedback {
    /**
     * Constructs a new <code>AlertFeedback</code>.
     * A customer feedback about an alert.
     * @alias module:model/AlertFeedback
     */
    constructor() { 
        
        AlertFeedback.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlertFeedback</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlertFeedback} obj Optional instance to populate.
     * @return {module:model/AlertFeedback} The populated <code>AlertFeedback</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlertFeedback();

            if (data.hasOwnProperty('alertId')) {
                obj['alertId'] = ApiClient.convertToType(data['alertId'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('feedbackId')) {
                obj['feedbackId'] = ApiClient.convertToType(data['feedbackId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlertFeedback</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlertFeedback</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alertId'] && !(typeof data['alertId'] === 'string' || data['alertId'] instanceof String)) {
            throw new Error("Expected the field `alertId` to be a primitive type in the JSON string but got " + data['alertId']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['feedbackId'] && !(typeof data['feedbackId'] === 'string' || data['feedbackId'] instanceof String)) {
            throw new Error("Expected the field `feedbackId` to be a primitive type in the JSON string but got " + data['feedbackId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Output only. The alert identifier.
 * @member {String} alertId
 */
AlertFeedback.prototype['alertId'] = undefined;

/**
 * Output only. The time this feedback was created.
 * @member {String} createTime
 */
AlertFeedback.prototype['createTime'] = undefined;

/**
 * Output only. The unique identifier of the Google Workspace account of the customer.
 * @member {String} customerId
 */
AlertFeedback.prototype['customerId'] = undefined;

/**
 * Output only. The email of the user that provided the feedback.
 * @member {String} email
 */
AlertFeedback.prototype['email'] = undefined;

/**
 * Output only. The unique identifier for the feedback.
 * @member {String} feedbackId
 */
AlertFeedback.prototype['feedbackId'] = undefined;

/**
 * Required. The type of the feedback.
 * @member {module:model/AlertFeedback.TypeEnum} type
 */
AlertFeedback.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AlertFeedback['TypeEnum'] = {

    /**
     * value: "ALERT_FEEDBACK_TYPE_UNSPECIFIED"
     * @const
     */
    "ALERT_FEEDBACK_TYPE_UNSPECIFIED": "ALERT_FEEDBACK_TYPE_UNSPECIFIED",

    /**
     * value: "NOT_USEFUL"
     * @const
     */
    "NOT_USEFUL": "NOT_USEFUL",

    /**
     * value: "SOMEWHAT_USEFUL"
     * @const
     */
    "SOMEWHAT_USEFUL": "SOMEWHAT_USEFUL",

    /**
     * value: "VERY_USEFUL"
     * @const
     */
    "VERY_USEFUL": "VERY_USEFUL"
};



export default AlertFeedback;

