/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CsvRow from './CsvRow';

/**
 * The Csv model module.
 * @module model/Csv
 * @version v1beta1
 */
class Csv {
    /**
     * Constructs a new <code>Csv</code>.
     * A representation of a CSV file attachment, as a list of column headers and a list of data rows.
     * @alias module:model/Csv
     */
    constructor() { 
        
        Csv.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Csv</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Csv} obj Optional instance to populate.
     * @return {module:model/Csv} The populated <code>Csv</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Csv();

            if (data.hasOwnProperty('dataRows')) {
                obj['dataRows'] = ApiClient.convertToType(data['dataRows'], [CsvRow]);
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Csv</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Csv</code>.
     */
    static validateJSON(data) {
        if (data['dataRows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataRows'])) {
                throw new Error("Expected the field `dataRows` to be an array in the JSON data but got " + data['dataRows']);
            }
            // validate the optional field `dataRows` (array)
            for (const item of data['dataRows']) {
                CsvRow.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['headers'])) {
            throw new Error("Expected the field `headers` to be an array in the JSON data but got " + data['headers']);
        }

        return true;
    }


}



/**
 * The list of data rows in a CSV file, as string arrays rather than as a single comma-separated string.
 * @member {Array.<module:model/CsvRow>} dataRows
 */
Csv.prototype['dataRows'] = undefined;

/**
 * The list of headers for data columns in a CSV file.
 * @member {Array.<String>} headers
 */
Csv.prototype['headers'] = undefined;






export default Csv;

