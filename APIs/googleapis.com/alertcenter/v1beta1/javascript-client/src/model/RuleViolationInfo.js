/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MatchInfo from './MatchInfo';
import ResourceInfo from './ResourceInfo';
import RuleInfo from './RuleInfo';

/**
 * The RuleViolationInfo model module.
 * @module model/RuleViolationInfo
 * @version v1beta1
 */
class RuleViolationInfo {
    /**
     * Constructs a new <code>RuleViolationInfo</code>.
     * Common alert information about violated rules that are configured by Google Workspace administrators.
     * @alias module:model/RuleViolationInfo
     */
    constructor() { 
        
        RuleViolationInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RuleViolationInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuleViolationInfo} obj Optional instance to populate.
     * @return {module:model/RuleViolationInfo} The populated <code>RuleViolationInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuleViolationInfo();

            if (data.hasOwnProperty('dataSource')) {
                obj['dataSource'] = ApiClient.convertToType(data['dataSource'], 'String');
            }
            if (data.hasOwnProperty('matchInfo')) {
                obj['matchInfo'] = ApiClient.convertToType(data['matchInfo'], [MatchInfo]);
            }
            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], ['String']);
            }
            if (data.hasOwnProperty('resourceInfo')) {
                obj['resourceInfo'] = ResourceInfo.constructFromObject(data['resourceInfo']);
            }
            if (data.hasOwnProperty('ruleInfo')) {
                obj['ruleInfo'] = RuleInfo.constructFromObject(data['ruleInfo']);
            }
            if (data.hasOwnProperty('suppressedActionTypes')) {
                obj['suppressedActionTypes'] = ApiClient.convertToType(data['suppressedActionTypes'], ['String']);
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = ApiClient.convertToType(data['trigger'], 'String');
            }
            if (data.hasOwnProperty('triggeredActionInfo')) {
                obj['triggeredActionInfo'] = ApiClient.convertToType(data['triggeredActionInfo'], [Object]);
            }
            if (data.hasOwnProperty('triggeredActionTypes')) {
                obj['triggeredActionTypes'] = ApiClient.convertToType(data['triggeredActionTypes'], ['String']);
            }
            if (data.hasOwnProperty('triggeringUserEmail')) {
                obj['triggeringUserEmail'] = ApiClient.convertToType(data['triggeringUserEmail'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RuleViolationInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RuleViolationInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataSource'] && !(typeof data['dataSource'] === 'string' || data['dataSource'] instanceof String)) {
            throw new Error("Expected the field `dataSource` to be a primitive type in the JSON string but got " + data['dataSource']);
        }
        if (data['matchInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['matchInfo'])) {
                throw new Error("Expected the field `matchInfo` to be an array in the JSON data but got " + data['matchInfo']);
            }
            // validate the optional field `matchInfo` (array)
            for (const item of data['matchInfo']) {
                MatchInfo.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['recipients'])) {
            throw new Error("Expected the field `recipients` to be an array in the JSON data but got " + data['recipients']);
        }
        // validate the optional field `resourceInfo`
        if (data['resourceInfo']) { // data not null
          ResourceInfo.validateJSON(data['resourceInfo']);
        }
        // validate the optional field `ruleInfo`
        if (data['ruleInfo']) { // data not null
          RuleInfo.validateJSON(data['ruleInfo']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['suppressedActionTypes'])) {
            throw new Error("Expected the field `suppressedActionTypes` to be an array in the JSON data but got " + data['suppressedActionTypes']);
        }
        // ensure the json data is a string
        if (data['trigger'] && !(typeof data['trigger'] === 'string' || data['trigger'] instanceof String)) {
            throw new Error("Expected the field `trigger` to be a primitive type in the JSON string but got " + data['trigger']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['triggeredActionInfo'])) {
            throw new Error("Expected the field `triggeredActionInfo` to be an array in the JSON data but got " + data['triggeredActionInfo']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['triggeredActionTypes'])) {
            throw new Error("Expected the field `triggeredActionTypes` to be an array in the JSON data but got " + data['triggeredActionTypes']);
        }
        // ensure the json data is a string
        if (data['triggeringUserEmail'] && !(typeof data['triggeringUserEmail'] === 'string' || data['triggeringUserEmail'] instanceof String)) {
            throw new Error("Expected the field `triggeringUserEmail` to be a primitive type in the JSON string but got " + data['triggeringUserEmail']);
        }

        return true;
    }


}



/**
 * Source of the data.
 * @member {module:model/RuleViolationInfo.DataSourceEnum} dataSource
 */
RuleViolationInfo.prototype['dataSource'] = undefined;

/**
 * List of matches that were found in the resource content.
 * @member {Array.<module:model/MatchInfo>} matchInfo
 */
RuleViolationInfo.prototype['matchInfo'] = undefined;

/**
 * Resource recipients. For Drive, they are grantees that the Drive file was shared with at the time of rule triggering. Valid values include user emails, group emails, domains, or 'anyone' if the file was publicly accessible. If the file was private the recipients list will be empty. For Gmail, they are emails of the users or groups that the Gmail message was sent to.
 * @member {Array.<String>} recipients
 */
RuleViolationInfo.prototype['recipients'] = undefined;

/**
 * @member {module:model/ResourceInfo} resourceInfo
 */
RuleViolationInfo.prototype['resourceInfo'] = undefined;

/**
 * @member {module:model/RuleInfo} ruleInfo
 */
RuleViolationInfo.prototype['ruleInfo'] = undefined;

/**
 * Actions suppressed due to other actions with higher priority.
 * @member {Array.<module:model/RuleViolationInfo.SuppressedActionTypesEnum>} suppressedActionTypes
 */
RuleViolationInfo.prototype['suppressedActionTypes'] = undefined;

/**
 * Trigger of the rule.
 * @member {module:model/RuleViolationInfo.TriggerEnum} trigger
 */
RuleViolationInfo.prototype['trigger'] = undefined;

/**
 * Metadata related to the triggered actions.
 * @member {Array.<Object>} triggeredActionInfo
 */
RuleViolationInfo.prototype['triggeredActionInfo'] = undefined;

/**
 * Actions applied as a consequence of the rule being triggered.
 * @member {Array.<module:model/RuleViolationInfo.TriggeredActionTypesEnum>} triggeredActionTypes
 */
RuleViolationInfo.prototype['triggeredActionTypes'] = undefined;

/**
 * Email of the user who caused the violation. Value could be empty if not applicable, for example, a violation found by drive continuous scan.
 * @member {String} triggeringUserEmail
 */
RuleViolationInfo.prototype['triggeringUserEmail'] = undefined;





/**
 * Allowed values for the <code>dataSource</code> property.
 * @enum {String}
 * @readonly
 */
RuleViolationInfo['DataSourceEnum'] = {

    /**
     * value: "DATA_SOURCE_UNSPECIFIED"
     * @const
     */
    "DATA_SOURCE_UNSPECIFIED": "DATA_SOURCE_UNSPECIFIED",

    /**
     * value: "DRIVE"
     * @const
     */
    "DRIVE": "DRIVE"
};


/**
 * Allowed values for the <code>suppressedActionTypes</code> property.
 * @enum {String}
 * @readonly
 */
RuleViolationInfo['SuppressedActionTypesEnum'] = {

    /**
     * value: "ACTION_TYPE_UNSPECIFIED"
     * @const
     */
    "ACTION_TYPE_UNSPECIFIED": "ACTION_TYPE_UNSPECIFIED",

    /**
     * value: "DRIVE_BLOCK_EXTERNAL_SHARING"
     * @const
     */
    "DRIVE_BLOCK_EXTERNAL_SHARING": "DRIVE_BLOCK_EXTERNAL_SHARING",

    /**
     * value: "DRIVE_WARN_ON_EXTERNAL_SHARING"
     * @const
     */
    "DRIVE_WARN_ON_EXTERNAL_SHARING": "DRIVE_WARN_ON_EXTERNAL_SHARING",

    /**
     * value: "DELETE_WEBPROTECT_EVIDENCE"
     * @const
     */
    "DELETE_WEBPROTECT_EVIDENCE": "DELETE_WEBPROTECT_EVIDENCE",

    /**
     * value: "ALERT"
     * @const
     */
    "ALERT": "ALERT",

    /**
     * value: "RULE_ACTIVATE"
     * @const
     */
    "RULE_ACTIVATE": "RULE_ACTIVATE",

    /**
     * value: "RULE_DEACTIVATE"
     * @const
     */
    "RULE_DEACTIVATE": "RULE_DEACTIVATE"
};


/**
 * Allowed values for the <code>trigger</code> property.
 * @enum {String}
 * @readonly
 */
RuleViolationInfo['TriggerEnum'] = {

    /**
     * value: "TRIGGER_UNSPECIFIED"
     * @const
     */
    "TRIGGER_UNSPECIFIED": "TRIGGER_UNSPECIFIED",

    /**
     * value: "DRIVE_SHARE"
     * @const
     */
    "DRIVE_SHARE": "DRIVE_SHARE"
};


/**
 * Allowed values for the <code>triggeredActionTypes</code> property.
 * @enum {String}
 * @readonly
 */
RuleViolationInfo['TriggeredActionTypesEnum'] = {

    /**
     * value: "ACTION_TYPE_UNSPECIFIED"
     * @const
     */
    "ACTION_TYPE_UNSPECIFIED": "ACTION_TYPE_UNSPECIFIED",

    /**
     * value: "DRIVE_BLOCK_EXTERNAL_SHARING"
     * @const
     */
    "DRIVE_BLOCK_EXTERNAL_SHARING": "DRIVE_BLOCK_EXTERNAL_SHARING",

    /**
     * value: "DRIVE_WARN_ON_EXTERNAL_SHARING"
     * @const
     */
    "DRIVE_WARN_ON_EXTERNAL_SHARING": "DRIVE_WARN_ON_EXTERNAL_SHARING",

    /**
     * value: "DELETE_WEBPROTECT_EVIDENCE"
     * @const
     */
    "DELETE_WEBPROTECT_EVIDENCE": "DELETE_WEBPROTECT_EVIDENCE",

    /**
     * value: "ALERT"
     * @const
     */
    "ALERT": "ALERT",

    /**
     * value: "RULE_ACTIVATE"
     * @const
     */
    "RULE_ACTIVATE": "RULE_ACTIVATE",

    /**
     * value: "RULE_DEACTIVATE"
     * @const
     */
    "RULE_DEACTIVATE": "RULE_DEACTIVATE"
};



export default RuleViolationInfo;

