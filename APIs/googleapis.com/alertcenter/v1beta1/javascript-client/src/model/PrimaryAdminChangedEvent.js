/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PrimaryAdminChangedEvent model module.
 * @module model/PrimaryAdminChangedEvent
 * @version v1beta1
 */
class PrimaryAdminChangedEvent {
    /**
     * Constructs a new <code>PrimaryAdminChangedEvent</code>.
     * Event occurred when primary admin changed in customer&#39;s account. The event are being received from insight forwarder
     * @alias module:model/PrimaryAdminChangedEvent
     */
    constructor() { 
        
        PrimaryAdminChangedEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PrimaryAdminChangedEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrimaryAdminChangedEvent} obj Optional instance to populate.
     * @return {module:model/PrimaryAdminChangedEvent} The populated <code>PrimaryAdminChangedEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrimaryAdminChangedEvent();

            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('previousAdminEmail')) {
                obj['previousAdminEmail'] = ApiClient.convertToType(data['previousAdminEmail'], 'String');
            }
            if (data.hasOwnProperty('updatedAdminEmail')) {
                obj['updatedAdminEmail'] = ApiClient.convertToType(data['updatedAdminEmail'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrimaryAdminChangedEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrimaryAdminChangedEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['previousAdminEmail'] && !(typeof data['previousAdminEmail'] === 'string' || data['previousAdminEmail'] instanceof String)) {
            throw new Error("Expected the field `previousAdminEmail` to be a primitive type in the JSON string but got " + data['previousAdminEmail']);
        }
        // ensure the json data is a string
        if (data['updatedAdminEmail'] && !(typeof data['updatedAdminEmail'] === 'string' || data['updatedAdminEmail'] instanceof String)) {
            throw new Error("Expected the field `updatedAdminEmail` to be a primitive type in the JSON string but got " + data['updatedAdminEmail']);
        }

        return true;
    }


}



/**
 * domain in which actioned occurred
 * @member {String} domain
 */
PrimaryAdminChangedEvent.prototype['domain'] = undefined;

/**
 * Email of person who was the primary admin before the action
 * @member {String} previousAdminEmail
 */
PrimaryAdminChangedEvent.prototype['previousAdminEmail'] = undefined;

/**
 * Email of person who is the primary admin after the action
 * @member {String} updatedAdminEmail
 */
PrimaryAdminChangedEvent.prototype['updatedAdminEmail'] = undefined;






export default PrimaryAdminChangedEvent;

