/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransferError model module.
 * @module model/TransferError
 * @version v1beta1
 */
class TransferError {
    /**
     * Constructs a new <code>TransferError</code>.
     * Details for an invalid transfer or forward.
     * @alias module:model/TransferError
     */
    constructor() { 
        
        TransferError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransferError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferError} obj Optional instance to populate.
     * @return {module:model/TransferError} The populated <code>TransferError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferError();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('invalidReason')) {
                obj['invalidReason'] = ApiClient.convertToType(data['invalidReason'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['entityType'] && !(typeof data['entityType'] === 'string' || data['entityType'] instanceof String)) {
            throw new Error("Expected the field `entityType` to be a primitive type in the JSON string but got " + data['entityType']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['invalidReason'] && !(typeof data['invalidReason'] === 'string' || data['invalidReason'] instanceof String)) {
            throw new Error("Expected the field `invalidReason` to be a primitive type in the JSON string but got " + data['invalidReason']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * User's email address. This may be unavailable if the entity was deleted.
 * @member {String} email
 */
TransferError.prototype['email'] = undefined;

/**
 * Type of entity being transferred to. For ring group members, this should always be USER.
 * @member {module:model/TransferError.EntityTypeEnum} entityType
 */
TransferError.prototype['entityType'] = undefined;

/**
 * Ring group or auto attendant ID. Not set for users.
 * @member {String} id
 */
TransferError.prototype['id'] = undefined;

/**
 * Reason for the error.
 * @member {module:model/TransferError.InvalidReasonEnum} invalidReason
 */
TransferError.prototype['invalidReason'] = undefined;

/**
 * User's full name, or the ring group / auto attendant name. This may be unavailable if the entity was deleted.
 * @member {String} name
 */
TransferError.prototype['name'] = undefined;





/**
 * Allowed values for the <code>entityType</code> property.
 * @enum {String}
 * @readonly
 */
TransferError['EntityTypeEnum'] = {

    /**
     * value: "TRANSFER_ENTITY_TYPE_UNSPECIFIED"
     * @const
     */
    "ENTITY_TYPE_UNSPECIFIED": "TRANSFER_ENTITY_TYPE_UNSPECIFIED",

    /**
     * value: "TRANSFER_AUTO_ATTENDANT"
     * @const
     */
    "AUTO_ATTENDANT": "TRANSFER_AUTO_ATTENDANT",

    /**
     * value: "TRANSFER_RING_GROUP"
     * @const
     */
    "RING_GROUP": "TRANSFER_RING_GROUP",

    /**
     * value: "TRANSFER_USER"
     * @const
     */
    "USER": "TRANSFER_USER"
};


/**
 * Allowed values for the <code>invalidReason</code> property.
 * @enum {String}
 * @readonly
 */
TransferError['InvalidReasonEnum'] = {

    /**
     * value: "TRANSFER_INVALID_REASON_UNSPECIFIED"
     * @const
     */
    "TRANSFER_INVALID_REASON_UNSPECIFIED": "TRANSFER_INVALID_REASON_UNSPECIFIED",

    /**
     * value: "TRANSFER_TARGET_DELETED"
     * @const
     */
    "TRANSFER_TARGET_DELETED": "TRANSFER_TARGET_DELETED",

    /**
     * value: "UNLICENSED"
     * @const
     */
    "UNLICENSED": "UNLICENSED",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED",

    /**
     * value: "NO_PHONE_NUMBER"
     * @const
     */
    "NO_PHONE_NUMBER": "NO_PHONE_NUMBER"
};



export default TransferError;

