/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AlertMetadata model module.
 * @module model/AlertMetadata
 * @version v1beta1
 */
class AlertMetadata {
    /**
     * Constructs a new <code>AlertMetadata</code>.
     * An alert metadata.
     * @alias module:model/AlertMetadata
     */
    constructor() { 
        
        AlertMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlertMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlertMetadata} obj Optional instance to populate.
     * @return {module:model/AlertMetadata} The populated <code>AlertMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlertMetadata();

            if (data.hasOwnProperty('alertId')) {
                obj['alertId'] = ApiClient.convertToType(data['alertId'], 'String');
            }
            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = ApiClient.convertToType(data['assignee'], 'String');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlertMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlertMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alertId'] && !(typeof data['alertId'] === 'string' || data['alertId'] instanceof String)) {
            throw new Error("Expected the field `alertId` to be a primitive type in the JSON string but got " + data['alertId']);
        }
        // ensure the json data is a string
        if (data['assignee'] && !(typeof data['assignee'] === 'string' || data['assignee'] instanceof String)) {
            throw new Error("Expected the field `assignee` to be a primitive type in the JSON string but got " + data['assignee']);
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The alert identifier.
 * @member {String} alertId
 */
AlertMetadata.prototype['alertId'] = undefined;

/**
 * The email address of the user assigned to the alert.
 * @member {String} assignee
 */
AlertMetadata.prototype['assignee'] = undefined;

/**
 * Output only. The unique identifier of the Google Workspace account of the customer.
 * @member {String} customerId
 */
AlertMetadata.prototype['customerId'] = undefined;

/**
 * Optional. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of an alert metadata from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform metadata updates in order to avoid race conditions: An `etag` is returned in the response which contains alert metadata, and systems are expected to put that etag in the request to update alert metadata to ensure that their change will be applied to the same version of the alert metadata. If no `etag` is provided in the call to update alert metadata, then the existing alert metadata is overwritten blindly.
 * @member {String} etag
 */
AlertMetadata.prototype['etag'] = undefined;

/**
 * The severity value of the alert. Alert Center will set this field at alert creation time, default's to an empty string when it could not be determined. The supported values for update actions on this field are the following: * HIGH * MEDIUM * LOW
 * @member {String} severity
 */
AlertMetadata.prototype['severity'] = undefined;

/**
 * The current status of the alert. The supported values are the following: * NOT_STARTED * IN_PROGRESS * CLOSED
 * @member {String} status
 */
AlertMetadata.prototype['status'] = undefined;

/**
 * Output only. The time this metadata was last updated.
 * @member {String} updateTime
 */
AlertMetadata.prototype['updateTime'] = undefined;






export default AlertMetadata;

