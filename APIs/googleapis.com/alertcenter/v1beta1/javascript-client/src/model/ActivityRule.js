/**
 * Google Workspace Alert Center API
 * Manages alerts on issues affecting your domain. Note: The current version of this API (v1beta1) is available to all Google Workspace customers. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ActivityRule model module.
 * @module model/ActivityRule
 * @version v1beta1
 */
class ActivityRule {
    /**
     * Constructs a new <code>ActivityRule</code>.
     * Alerts from Google Workspace Security Center rules service configured by an admin.
     * @alias module:model/ActivityRule
     */
    constructor() { 
        
        ActivityRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActivityRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivityRule} obj Optional instance to populate.
     * @return {module:model/ActivityRule} The populated <code>ActivityRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivityRule();

            if (data.hasOwnProperty('actionNames')) {
                obj['actionNames'] = ApiClient.convertToType(data['actionNames'], ['String']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('supersededAlerts')) {
                obj['supersededAlerts'] = ApiClient.convertToType(data['supersededAlerts'], ['String']);
            }
            if (data.hasOwnProperty('supersedingAlert')) {
                obj['supersedingAlert'] = ApiClient.convertToType(data['supersedingAlert'], 'String');
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'String');
            }
            if (data.hasOwnProperty('triggerSource')) {
                obj['triggerSource'] = ApiClient.convertToType(data['triggerSource'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('windowSize')) {
                obj['windowSize'] = ApiClient.convertToType(data['windowSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActivityRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActivityRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['actionNames'])) {
            throw new Error("Expected the field `actionNames` to be an array in the JSON data but got " + data['actionNames']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supersededAlerts'])) {
            throw new Error("Expected the field `supersededAlerts` to be an array in the JSON data but got " + data['supersededAlerts']);
        }
        // ensure the json data is a string
        if (data['supersedingAlert'] && !(typeof data['supersedingAlert'] === 'string' || data['supersedingAlert'] instanceof String)) {
            throw new Error("Expected the field `supersedingAlert` to be a primitive type in the JSON string but got " + data['supersedingAlert']);
        }
        // ensure the json data is a string
        if (data['threshold'] && !(typeof data['threshold'] === 'string' || data['threshold'] instanceof String)) {
            throw new Error("Expected the field `threshold` to be a primitive type in the JSON string but got " + data['threshold']);
        }
        // ensure the json data is a string
        if (data['triggerSource'] && !(typeof data['triggerSource'] === 'string' || data['triggerSource'] instanceof String)) {
            throw new Error("Expected the field `triggerSource` to be a primitive type in the JSON string but got " + data['triggerSource']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['windowSize'] && !(typeof data['windowSize'] === 'string' || data['windowSize'] instanceof String)) {
            throw new Error("Expected the field `windowSize` to be a primitive type in the JSON string but got " + data['windowSize']);
        }

        return true;
    }


}



/**
 * List of action names associated with the rule threshold.
 * @member {Array.<String>} actionNames
 */
ActivityRule.prototype['actionNames'] = undefined;

/**
 * Rule create timestamp.
 * @member {String} createTime
 */
ActivityRule.prototype['createTime'] = undefined;

/**
 * Description of the rule.
 * @member {String} description
 */
ActivityRule.prototype['description'] = undefined;

/**
 * Alert display name.
 * @member {String} displayName
 */
ActivityRule.prototype['displayName'] = undefined;

/**
 * Rule name.
 * @member {String} name
 */
ActivityRule.prototype['name'] = undefined;

/**
 * Query that is used to get the data from the associated source.
 * @member {String} query
 */
ActivityRule.prototype['query'] = undefined;

/**
 * List of alert IDs superseded by this alert. It is used to indicate that this alert is essentially extension of superseded alerts and we found the relationship after creating these alerts.
 * @member {Array.<String>} supersededAlerts
 */
ActivityRule.prototype['supersededAlerts'] = undefined;

/**
 * Alert ID superseding this alert. It is used to indicate that superseding alert is essentially extension of this alert and we found the relationship after creating both alerts.
 * @member {String} supersedingAlert
 */
ActivityRule.prototype['supersedingAlert'] = undefined;

/**
 * Alert threshold is for example “COUNT > 5”.
 * @member {String} threshold
 */
ActivityRule.prototype['threshold'] = undefined;

/**
 * The trigger sources for this rule. * GMAIL_EVENTS * DEVICE_EVENTS * USER_EVENTS
 * @member {String} triggerSource
 */
ActivityRule.prototype['triggerSource'] = undefined;

/**
 * The timestamp of the last update to the rule.
 * @member {String} updateTime
 */
ActivityRule.prototype['updateTime'] = undefined;

/**
 * Rule window size. Possible values are 1 hour or 24 hours.
 * @member {String} windowSize
 */
ActivityRule.prototype['windowSize'] = undefined;






export default ActivityRule;

