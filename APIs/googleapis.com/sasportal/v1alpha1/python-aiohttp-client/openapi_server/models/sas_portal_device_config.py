# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sas_portal_device_air_interface import SasPortalDeviceAirInterface
from openapi_server.models.sas_portal_device_model import SasPortalDeviceModel
from openapi_server.models.sas_portal_installation_params import SasPortalInstallationParams
from openapi_server import util


class SasPortalDeviceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, air_interface: SasPortalDeviceAirInterface=None, call_sign: str=None, category: str=None, installation_params: SasPortalInstallationParams=None, is_signed: bool=None, measurement_capabilities: List[str]=None, model: SasPortalDeviceModel=None, state: str=None, update_time: str=None, user_id: str=None):
        """SasPortalDeviceConfig - a model defined in OpenAPI

        :param air_interface: The air_interface of this SasPortalDeviceConfig.
        :param call_sign: The call_sign of this SasPortalDeviceConfig.
        :param category: The category of this SasPortalDeviceConfig.
        :param installation_params: The installation_params of this SasPortalDeviceConfig.
        :param is_signed: The is_signed of this SasPortalDeviceConfig.
        :param measurement_capabilities: The measurement_capabilities of this SasPortalDeviceConfig.
        :param model: The model of this SasPortalDeviceConfig.
        :param state: The state of this SasPortalDeviceConfig.
        :param update_time: The update_time of this SasPortalDeviceConfig.
        :param user_id: The user_id of this SasPortalDeviceConfig.
        """
        self.openapi_types = {
            'air_interface': SasPortalDeviceAirInterface,
            'call_sign': str,
            'category': str,
            'installation_params': SasPortalInstallationParams,
            'is_signed': bool,
            'measurement_capabilities': List[str],
            'model': SasPortalDeviceModel,
            'state': str,
            'update_time': str,
            'user_id': str
        }

        self.attribute_map = {
            'air_interface': 'airInterface',
            'call_sign': 'callSign',
            'category': 'category',
            'installation_params': 'installationParams',
            'is_signed': 'isSigned',
            'measurement_capabilities': 'measurementCapabilities',
            'model': 'model',
            'state': 'state',
            'update_time': 'updateTime',
            'user_id': 'userId'
        }

        self._air_interface = air_interface
        self._call_sign = call_sign
        self._category = category
        self._installation_params = installation_params
        self._is_signed = is_signed
        self._measurement_capabilities = measurement_capabilities
        self._model = model
        self._state = state
        self._update_time = update_time
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SasPortalDeviceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SasPortalDeviceConfig of this SasPortalDeviceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def air_interface(self):
        """Gets the air_interface of this SasPortalDeviceConfig.


        :return: The air_interface of this SasPortalDeviceConfig.
        :rtype: SasPortalDeviceAirInterface
        """
        return self._air_interface

    @air_interface.setter
    def air_interface(self, air_interface):
        """Sets the air_interface of this SasPortalDeviceConfig.


        :param air_interface: The air_interface of this SasPortalDeviceConfig.
        :type air_interface: SasPortalDeviceAirInterface
        """

        self._air_interface = air_interface

    @property
    def call_sign(self):
        """Gets the call_sign of this SasPortalDeviceConfig.

        The call sign of the device operator.

        :return: The call_sign of this SasPortalDeviceConfig.
        :rtype: str
        """
        return self._call_sign

    @call_sign.setter
    def call_sign(self, call_sign):
        """Sets the call_sign of this SasPortalDeviceConfig.

        The call sign of the device operator.

        :param call_sign: The call_sign of this SasPortalDeviceConfig.
        :type call_sign: str
        """

        self._call_sign = call_sign

    @property
    def category(self):
        """Gets the category of this SasPortalDeviceConfig.

        FCC category of the device.

        :return: The category of this SasPortalDeviceConfig.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SasPortalDeviceConfig.

        FCC category of the device.

        :param category: The category of this SasPortalDeviceConfig.
        :type category: str
        """
        allowed_values = ["DEVICE_CATEGORY_UNSPECIFIED", "DEVICE_CATEGORY_A", "DEVICE_CATEGORY_B"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def installation_params(self):
        """Gets the installation_params of this SasPortalDeviceConfig.


        :return: The installation_params of this SasPortalDeviceConfig.
        :rtype: SasPortalInstallationParams
        """
        return self._installation_params

    @installation_params.setter
    def installation_params(self, installation_params):
        """Sets the installation_params of this SasPortalDeviceConfig.


        :param installation_params: The installation_params of this SasPortalDeviceConfig.
        :type installation_params: SasPortalInstallationParams
        """

        self._installation_params = installation_params

    @property
    def is_signed(self):
        """Gets the is_signed of this SasPortalDeviceConfig.

        Output only. Whether the configuration has been signed by a CPI.

        :return: The is_signed of this SasPortalDeviceConfig.
        :rtype: bool
        """
        return self._is_signed

    @is_signed.setter
    def is_signed(self, is_signed):
        """Sets the is_signed of this SasPortalDeviceConfig.

        Output only. Whether the configuration has been signed by a CPI.

        :param is_signed: The is_signed of this SasPortalDeviceConfig.
        :type is_signed: bool
        """

        self._is_signed = is_signed

    @property
    def measurement_capabilities(self):
        """Gets the measurement_capabilities of this SasPortalDeviceConfig.

        Measurement reporting capabilities of the device.

        :return: The measurement_capabilities of this SasPortalDeviceConfig.
        :rtype: List[str]
        """
        return self._measurement_capabilities

    @measurement_capabilities.setter
    def measurement_capabilities(self, measurement_capabilities):
        """Sets the measurement_capabilities of this SasPortalDeviceConfig.

        Measurement reporting capabilities of the device.

        :param measurement_capabilities: The measurement_capabilities of this SasPortalDeviceConfig.
        :type measurement_capabilities: List[str]
        """
        allowed_values = ["MEASUREMENT_CAPABILITY_UNSPECIFIED", "MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITH_GRANT", "MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITHOUT_GRANT"]  # noqa: E501
        if not set(measurement_capabilities).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `measurement_capabilities` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(measurement_capabilities) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._measurement_capabilities = measurement_capabilities

    @property
    def model(self):
        """Gets the model of this SasPortalDeviceConfig.


        :return: The model of this SasPortalDeviceConfig.
        :rtype: SasPortalDeviceModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this SasPortalDeviceConfig.


        :param model: The model of this SasPortalDeviceConfig.
        :type model: SasPortalDeviceModel
        """

        self._model = model

    @property
    def state(self):
        """Gets the state of this SasPortalDeviceConfig.

        State of the configuration.

        :return: The state of this SasPortalDeviceConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SasPortalDeviceConfig.

        State of the configuration.

        :param state: The state of this SasPortalDeviceConfig.
        :type state: str
        """
        allowed_values = ["DEVICE_CONFIG_STATE_UNSPECIFIED", "DRAFT", "FINAL"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this SasPortalDeviceConfig.

        Output only. The last time the device configuration was edited.

        :return: The update_time of this SasPortalDeviceConfig.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this SasPortalDeviceConfig.

        Output only. The last time the device configuration was edited.

        :param update_time: The update_time of this SasPortalDeviceConfig.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def user_id(self):
        """Gets the user_id of this SasPortalDeviceConfig.

        The identifier of a device user.

        :return: The user_id of this SasPortalDeviceConfig.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SasPortalDeviceConfig.

        The identifier of a device user.

        :param user_id: The user_id of this SasPortalDeviceConfig.
        :type user_id: str
        """

        self._user_id = user_id
