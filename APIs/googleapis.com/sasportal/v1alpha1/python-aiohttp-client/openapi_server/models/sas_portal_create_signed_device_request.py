# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SasPortalCreateSignedDeviceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoded_device: str=None, installer_id: str=None):
        """SasPortalCreateSignedDeviceRequest - a model defined in OpenAPI

        :param encoded_device: The encoded_device of this SasPortalCreateSignedDeviceRequest.
        :param installer_id: The installer_id of this SasPortalCreateSignedDeviceRequest.
        """
        self.openapi_types = {
            'encoded_device': str,
            'installer_id': str
        }

        self.attribute_map = {
            'encoded_device': 'encodedDevice',
            'installer_id': 'installerId'
        }

        self._encoded_device = encoded_device
        self._installer_id = installer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SasPortalCreateSignedDeviceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SasPortalCreateSignedDeviceRequest of this SasPortalCreateSignedDeviceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoded_device(self):
        """Gets the encoded_device of this SasPortalCreateSignedDeviceRequest.

        Required. JSON Web Token signed using a CPI private key. Payload must be the JSON encoding of the device. The user_id field must be set.

        :return: The encoded_device of this SasPortalCreateSignedDeviceRequest.
        :rtype: str
        """
        return self._encoded_device

    @encoded_device.setter
    def encoded_device(self, encoded_device):
        """Sets the encoded_device of this SasPortalCreateSignedDeviceRequest.

        Required. JSON Web Token signed using a CPI private key. Payload must be the JSON encoding of the device. The user_id field must be set.

        :param encoded_device: The encoded_device of this SasPortalCreateSignedDeviceRequest.
        :type encoded_device: str
        """

        self._encoded_device = encoded_device

    @property
    def installer_id(self):
        """Gets the installer_id of this SasPortalCreateSignedDeviceRequest.

        Required. Unique installer id (CPI ID) from the Certified Professional Installers database.

        :return: The installer_id of this SasPortalCreateSignedDeviceRequest.
        :rtype: str
        """
        return self._installer_id

    @installer_id.setter
    def installer_id(self, installer_id):
        """Sets the installer_id of this SasPortalCreateSignedDeviceRequest.

        Required. Unique installer id (CPI ID) from the Certified Professional Installers database.

        :param installer_id: The installer_id of this SasPortalCreateSignedDeviceRequest.
        :type installer_id: str
        """

        self._installer_id = installer_id
