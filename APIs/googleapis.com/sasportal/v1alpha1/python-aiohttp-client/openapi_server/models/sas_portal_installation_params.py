# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SasPortalInstallationParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, antenna_azimuth: int=None, antenna_beamwidth: int=None, antenna_downtilt: int=None, antenna_gain: int=None, antenna_model: str=None, cpe_cbsd_indication: bool=None, eirp_capability: int=None, height: float=None, height_type: str=None, horizontal_accuracy: float=None, indoor_deployment: bool=None, latitude: float=None, longitude: float=None, vertical_accuracy: float=None):
        """SasPortalInstallationParams - a model defined in OpenAPI

        :param antenna_azimuth: The antenna_azimuth of this SasPortalInstallationParams.
        :param antenna_beamwidth: The antenna_beamwidth of this SasPortalInstallationParams.
        :param antenna_downtilt: The antenna_downtilt of this SasPortalInstallationParams.
        :param antenna_gain: The antenna_gain of this SasPortalInstallationParams.
        :param antenna_model: The antenna_model of this SasPortalInstallationParams.
        :param cpe_cbsd_indication: The cpe_cbsd_indication of this SasPortalInstallationParams.
        :param eirp_capability: The eirp_capability of this SasPortalInstallationParams.
        :param height: The height of this SasPortalInstallationParams.
        :param height_type: The height_type of this SasPortalInstallationParams.
        :param horizontal_accuracy: The horizontal_accuracy of this SasPortalInstallationParams.
        :param indoor_deployment: The indoor_deployment of this SasPortalInstallationParams.
        :param latitude: The latitude of this SasPortalInstallationParams.
        :param longitude: The longitude of this SasPortalInstallationParams.
        :param vertical_accuracy: The vertical_accuracy of this SasPortalInstallationParams.
        """
        self.openapi_types = {
            'antenna_azimuth': int,
            'antenna_beamwidth': int,
            'antenna_downtilt': int,
            'antenna_gain': int,
            'antenna_model': str,
            'cpe_cbsd_indication': bool,
            'eirp_capability': int,
            'height': float,
            'height_type': str,
            'horizontal_accuracy': float,
            'indoor_deployment': bool,
            'latitude': float,
            'longitude': float,
            'vertical_accuracy': float
        }

        self.attribute_map = {
            'antenna_azimuth': 'antennaAzimuth',
            'antenna_beamwidth': 'antennaBeamwidth',
            'antenna_downtilt': 'antennaDowntilt',
            'antenna_gain': 'antennaGain',
            'antenna_model': 'antennaModel',
            'cpe_cbsd_indication': 'cpeCbsdIndication',
            'eirp_capability': 'eirpCapability',
            'height': 'height',
            'height_type': 'heightType',
            'horizontal_accuracy': 'horizontalAccuracy',
            'indoor_deployment': 'indoorDeployment',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'vertical_accuracy': 'verticalAccuracy'
        }

        self._antenna_azimuth = antenna_azimuth
        self._antenna_beamwidth = antenna_beamwidth
        self._antenna_downtilt = antenna_downtilt
        self._antenna_gain = antenna_gain
        self._antenna_model = antenna_model
        self._cpe_cbsd_indication = cpe_cbsd_indication
        self._eirp_capability = eirp_capability
        self._height = height
        self._height_type = height_type
        self._horizontal_accuracy = horizontal_accuracy
        self._indoor_deployment = indoor_deployment
        self._latitude = latitude
        self._longitude = longitude
        self._vertical_accuracy = vertical_accuracy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SasPortalInstallationParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SasPortalInstallationParams of this SasPortalInstallationParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def antenna_azimuth(self):
        """Gets the antenna_azimuth of this SasPortalInstallationParams.

        Boresight direction of the horizontal plane of the antenna in degrees with respect to true north. The value of this parameter is an integer with a value between 0 and 359 inclusive. A value of 0 degrees means true north; a value of 90 degrees means east. This parameter is optional for Category A devices and conditional for Category B devices.

        :return: The antenna_azimuth of this SasPortalInstallationParams.
        :rtype: int
        """
        return self._antenna_azimuth

    @antenna_azimuth.setter
    def antenna_azimuth(self, antenna_azimuth):
        """Sets the antenna_azimuth of this SasPortalInstallationParams.

        Boresight direction of the horizontal plane of the antenna in degrees with respect to true north. The value of this parameter is an integer with a value between 0 and 359 inclusive. A value of 0 degrees means true north; a value of 90 degrees means east. This parameter is optional for Category A devices and conditional for Category B devices.

        :param antenna_azimuth: The antenna_azimuth of this SasPortalInstallationParams.
        :type antenna_azimuth: int
        """

        self._antenna_azimuth = antenna_azimuth

    @property
    def antenna_beamwidth(self):
        """Gets the antenna_beamwidth of this SasPortalInstallationParams.

        3-dB antenna beamwidth of the antenna in the horizontal-plane in degrees. This parameter is an unsigned integer having a value between 0 and 360 (degrees) inclusive; it is optional for Category A devices and conditional for Category B devices.

        :return: The antenna_beamwidth of this SasPortalInstallationParams.
        :rtype: int
        """
        return self._antenna_beamwidth

    @antenna_beamwidth.setter
    def antenna_beamwidth(self, antenna_beamwidth):
        """Sets the antenna_beamwidth of this SasPortalInstallationParams.

        3-dB antenna beamwidth of the antenna in the horizontal-plane in degrees. This parameter is an unsigned integer having a value between 0 and 360 (degrees) inclusive; it is optional for Category A devices and conditional for Category B devices.

        :param antenna_beamwidth: The antenna_beamwidth of this SasPortalInstallationParams.
        :type antenna_beamwidth: int
        """

        self._antenna_beamwidth = antenna_beamwidth

    @property
    def antenna_downtilt(self):
        """Gets the antenna_downtilt of this SasPortalInstallationParams.

        Antenna downtilt in degrees and is an integer with a value between -90 and +90 inclusive; a negative value means the antenna is tilted up (above horizontal). This parameter is optional for Category A devices and conditional for Category B devices.

        :return: The antenna_downtilt of this SasPortalInstallationParams.
        :rtype: int
        """
        return self._antenna_downtilt

    @antenna_downtilt.setter
    def antenna_downtilt(self, antenna_downtilt):
        """Sets the antenna_downtilt of this SasPortalInstallationParams.

        Antenna downtilt in degrees and is an integer with a value between -90 and +90 inclusive; a negative value means the antenna is tilted up (above horizontal). This parameter is optional for Category A devices and conditional for Category B devices.

        :param antenna_downtilt: The antenna_downtilt of this SasPortalInstallationParams.
        :type antenna_downtilt: int
        """

        self._antenna_downtilt = antenna_downtilt

    @property
    def antenna_gain(self):
        """Gets the antenna_gain of this SasPortalInstallationParams.

        Peak antenna gain in dBi. This parameter is an integer with a value between -127 and +128 (dBi) inclusive.

        :return: The antenna_gain of this SasPortalInstallationParams.
        :rtype: int
        """
        return self._antenna_gain

    @antenna_gain.setter
    def antenna_gain(self, antenna_gain):
        """Sets the antenna_gain of this SasPortalInstallationParams.

        Peak antenna gain in dBi. This parameter is an integer with a value between -127 and +128 (dBi) inclusive.

        :param antenna_gain: The antenna_gain of this SasPortalInstallationParams.
        :type antenna_gain: int
        """

        self._antenna_gain = antenna_gain

    @property
    def antenna_model(self):
        """Gets the antenna_model of this SasPortalInstallationParams.

        If an external antenna is used, the antenna model is optionally provided in this field. The string has a maximum length of 128 octets.

        :return: The antenna_model of this SasPortalInstallationParams.
        :rtype: str
        """
        return self._antenna_model

    @antenna_model.setter
    def antenna_model(self, antenna_model):
        """Sets the antenna_model of this SasPortalInstallationParams.

        If an external antenna is used, the antenna model is optionally provided in this field. The string has a maximum length of 128 octets.

        :param antenna_model: The antenna_model of this SasPortalInstallationParams.
        :type antenna_model: str
        """

        self._antenna_model = antenna_model

    @property
    def cpe_cbsd_indication(self):
        """Gets the cpe_cbsd_indication of this SasPortalInstallationParams.

        If present, this parameter specifies whether the CBSD is a CPE-CBSD or not.

        :return: The cpe_cbsd_indication of this SasPortalInstallationParams.
        :rtype: bool
        """
        return self._cpe_cbsd_indication

    @cpe_cbsd_indication.setter
    def cpe_cbsd_indication(self, cpe_cbsd_indication):
        """Sets the cpe_cbsd_indication of this SasPortalInstallationParams.

        If present, this parameter specifies whether the CBSD is a CPE-CBSD or not.

        :param cpe_cbsd_indication: The cpe_cbsd_indication of this SasPortalInstallationParams.
        :type cpe_cbsd_indication: bool
        """

        self._cpe_cbsd_indication = cpe_cbsd_indication

    @property
    def eirp_capability(self):
        """Gets the eirp_capability of this SasPortalInstallationParams.

        This parameter is the maximum device EIRP in units of dBm/10MHz and is an integer with a value between -127 and +47 (dBm/10 MHz) inclusive. If not included, SAS interprets it as maximum allowable EIRP in units of dBm/10MHz for device category.

        :return: The eirp_capability of this SasPortalInstallationParams.
        :rtype: int
        """
        return self._eirp_capability

    @eirp_capability.setter
    def eirp_capability(self, eirp_capability):
        """Sets the eirp_capability of this SasPortalInstallationParams.

        This parameter is the maximum device EIRP in units of dBm/10MHz and is an integer with a value between -127 and +47 (dBm/10 MHz) inclusive. If not included, SAS interprets it as maximum allowable EIRP in units of dBm/10MHz for device category.

        :param eirp_capability: The eirp_capability of this SasPortalInstallationParams.
        :type eirp_capability: int
        """

        self._eirp_capability = eirp_capability

    @property
    def height(self):
        """Gets the height of this SasPortalInstallationParams.

        Device antenna height in meters. When the `heightType` parameter value is \"AGL\", the antenna height should be given relative to ground level. When the `heightType` parameter value is \"AMSL\", it is given with respect to WGS84 datum.

        :return: The height of this SasPortalInstallationParams.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this SasPortalInstallationParams.

        Device antenna height in meters. When the `heightType` parameter value is \"AGL\", the antenna height should be given relative to ground level. When the `heightType` parameter value is \"AMSL\", it is given with respect to WGS84 datum.

        :param height: The height of this SasPortalInstallationParams.
        :type height: float
        """

        self._height = height

    @property
    def height_type(self):
        """Gets the height_type of this SasPortalInstallationParams.

        Specifies how the height is measured.

        :return: The height_type of this SasPortalInstallationParams.
        :rtype: str
        """
        return self._height_type

    @height_type.setter
    def height_type(self, height_type):
        """Sets the height_type of this SasPortalInstallationParams.

        Specifies how the height is measured.

        :param height_type: The height_type of this SasPortalInstallationParams.
        :type height_type: str
        """
        allowed_values = ["HEIGHT_TYPE_UNSPECIFIED", "HEIGHT_TYPE_AGL", "HEIGHT_TYPE_AMSL"]  # noqa: E501
        if height_type not in allowed_values:
            raise ValueError(
                "Invalid value for `height_type` ({0}), must be one of {1}"
                .format(height_type, allowed_values)
            )

        self._height_type = height_type

    @property
    def horizontal_accuracy(self):
        """Gets the horizontal_accuracy of this SasPortalInstallationParams.

        A positive number in meters to indicate accuracy of the device antenna horizontal location. This optional parameter should only be present if its value is less than the FCC requirement of 50 meters.

        :return: The horizontal_accuracy of this SasPortalInstallationParams.
        :rtype: float
        """
        return self._horizontal_accuracy

    @horizontal_accuracy.setter
    def horizontal_accuracy(self, horizontal_accuracy):
        """Sets the horizontal_accuracy of this SasPortalInstallationParams.

        A positive number in meters to indicate accuracy of the device antenna horizontal location. This optional parameter should only be present if its value is less than the FCC requirement of 50 meters.

        :param horizontal_accuracy: The horizontal_accuracy of this SasPortalInstallationParams.
        :type horizontal_accuracy: float
        """

        self._horizontal_accuracy = horizontal_accuracy

    @property
    def indoor_deployment(self):
        """Gets the indoor_deployment of this SasPortalInstallationParams.

        Whether the device antenna is indoor or not. `true`: indoor. `false`: outdoor.

        :return: The indoor_deployment of this SasPortalInstallationParams.
        :rtype: bool
        """
        return self._indoor_deployment

    @indoor_deployment.setter
    def indoor_deployment(self, indoor_deployment):
        """Sets the indoor_deployment of this SasPortalInstallationParams.

        Whether the device antenna is indoor or not. `true`: indoor. `false`: outdoor.

        :param indoor_deployment: The indoor_deployment of this SasPortalInstallationParams.
        :type indoor_deployment: bool
        """

        self._indoor_deployment = indoor_deployment

    @property
    def latitude(self):
        """Gets the latitude of this SasPortalInstallationParams.

        Latitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed range is from -90.000000 to +90.000000. Positive values represent latitudes north of the equator; negative values south of the equator.

        :return: The latitude of this SasPortalInstallationParams.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this SasPortalInstallationParams.

        Latitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed range is from -90.000000 to +90.000000. Positive values represent latitudes north of the equator; negative values south of the equator.

        :param latitude: The latitude of this SasPortalInstallationParams.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this SasPortalInstallationParams.

        Longitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed range is from -180.000000 to +180.000000. Positive values represent longitudes east of the prime meridian; negative values west of the prime meridian.

        :return: The longitude of this SasPortalInstallationParams.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this SasPortalInstallationParams.

        Longitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed range is from -180.000000 to +180.000000. Positive values represent longitudes east of the prime meridian; negative values west of the prime meridian.

        :param longitude: The longitude of this SasPortalInstallationParams.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def vertical_accuracy(self):
        """Gets the vertical_accuracy of this SasPortalInstallationParams.

        A positive number in meters to indicate accuracy of the device antenna vertical location. This optional parameter should only be present if its value is less than the FCC requirement of 3 meters.

        :return: The vertical_accuracy of this SasPortalInstallationParams.
        :rtype: float
        """
        return self._vertical_accuracy

    @vertical_accuracy.setter
    def vertical_accuracy(self, vertical_accuracy):
        """Sets the vertical_accuracy of this SasPortalInstallationParams.

        A positive number in meters to indicate accuracy of the device antenna vertical location. This optional parameter should only be present if its value is less than the FCC requirement of 3 meters.

        :param vertical_accuracy: The vertical_accuracy of this SasPortalInstallationParams.
        :type vertical_accuracy: float
        """

        self._vertical_accuracy = vertical_accuracy
