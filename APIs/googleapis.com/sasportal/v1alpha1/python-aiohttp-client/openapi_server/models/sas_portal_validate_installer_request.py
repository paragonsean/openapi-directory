# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SasPortalValidateInstallerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoded_secret: str=None, installer_id: str=None, secret: str=None):
        """SasPortalValidateInstallerRequest - a model defined in OpenAPI

        :param encoded_secret: The encoded_secret of this SasPortalValidateInstallerRequest.
        :param installer_id: The installer_id of this SasPortalValidateInstallerRequest.
        :param secret: The secret of this SasPortalValidateInstallerRequest.
        """
        self.openapi_types = {
            'encoded_secret': str,
            'installer_id': str,
            'secret': str
        }

        self.attribute_map = {
            'encoded_secret': 'encodedSecret',
            'installer_id': 'installerId',
            'secret': 'secret'
        }

        self._encoded_secret = encoded_secret
        self._installer_id = installer_id
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SasPortalValidateInstallerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SasPortalValidateInstallerRequest of this SasPortalValidateInstallerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoded_secret(self):
        """Gets the encoded_secret of this SasPortalValidateInstallerRequest.

        Required. JSON Web Token signed using a CPI private key. Payload must include a \"secret\" claim whose value is the secret.

        :return: The encoded_secret of this SasPortalValidateInstallerRequest.
        :rtype: str
        """
        return self._encoded_secret

    @encoded_secret.setter
    def encoded_secret(self, encoded_secret):
        """Sets the encoded_secret of this SasPortalValidateInstallerRequest.

        Required. JSON Web Token signed using a CPI private key. Payload must include a \"secret\" claim whose value is the secret.

        :param encoded_secret: The encoded_secret of this SasPortalValidateInstallerRequest.
        :type encoded_secret: str
        """

        self._encoded_secret = encoded_secret

    @property
    def installer_id(self):
        """Gets the installer_id of this SasPortalValidateInstallerRequest.

        Required. Unique installer id (CPI ID) from the Certified Professional Installers database.

        :return: The installer_id of this SasPortalValidateInstallerRequest.
        :rtype: str
        """
        return self._installer_id

    @installer_id.setter
    def installer_id(self, installer_id):
        """Sets the installer_id of this SasPortalValidateInstallerRequest.

        Required. Unique installer id (CPI ID) from the Certified Professional Installers database.

        :param installer_id: The installer_id of this SasPortalValidateInstallerRequest.
        :type installer_id: str
        """

        self._installer_id = installer_id

    @property
    def secret(self):
        """Gets the secret of this SasPortalValidateInstallerRequest.

        Required. Secret returned by the GenerateSecret.

        :return: The secret of this SasPortalValidateInstallerRequest.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this SasPortalValidateInstallerRequest.

        Required. Secret returned by the GenerateSecret.

        :param secret: The secret of this SasPortalValidateInstallerRequest.
        :type secret: str
        """

        self._secret = secret
