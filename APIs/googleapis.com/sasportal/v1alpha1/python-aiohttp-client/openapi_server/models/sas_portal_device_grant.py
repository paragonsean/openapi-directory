# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sas_portal_dpa_move_list import SasPortalDpaMoveList
from openapi_server.models.sas_portal_frequency_range import SasPortalFrequencyRange
from openapi_server import util


class SasPortalDeviceGrant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_type: str=None, expire_time: str=None, frequency_range: SasPortalFrequencyRange=None, grant_id: str=None, last_heartbeat_transmit_expire_time: str=None, max_eirp: float=None, move_list: List[SasPortalDpaMoveList]=None, state: str=None, suspension_reason: List[str]=None):
        """SasPortalDeviceGrant - a model defined in OpenAPI

        :param channel_type: The channel_type of this SasPortalDeviceGrant.
        :param expire_time: The expire_time of this SasPortalDeviceGrant.
        :param frequency_range: The frequency_range of this SasPortalDeviceGrant.
        :param grant_id: The grant_id of this SasPortalDeviceGrant.
        :param last_heartbeat_transmit_expire_time: The last_heartbeat_transmit_expire_time of this SasPortalDeviceGrant.
        :param max_eirp: The max_eirp of this SasPortalDeviceGrant.
        :param move_list: The move_list of this SasPortalDeviceGrant.
        :param state: The state of this SasPortalDeviceGrant.
        :param suspension_reason: The suspension_reason of this SasPortalDeviceGrant.
        """
        self.openapi_types = {
            'channel_type': str,
            'expire_time': str,
            'frequency_range': SasPortalFrequencyRange,
            'grant_id': str,
            'last_heartbeat_transmit_expire_time': str,
            'max_eirp': float,
            'move_list': List[SasPortalDpaMoveList],
            'state': str,
            'suspension_reason': List[str]
        }

        self.attribute_map = {
            'channel_type': 'channelType',
            'expire_time': 'expireTime',
            'frequency_range': 'frequencyRange',
            'grant_id': 'grantId',
            'last_heartbeat_transmit_expire_time': 'lastHeartbeatTransmitExpireTime',
            'max_eirp': 'maxEirp',
            'move_list': 'moveList',
            'state': 'state',
            'suspension_reason': 'suspensionReason'
        }

        self._channel_type = channel_type
        self._expire_time = expire_time
        self._frequency_range = frequency_range
        self._grant_id = grant_id
        self._last_heartbeat_transmit_expire_time = last_heartbeat_transmit_expire_time
        self._max_eirp = max_eirp
        self._move_list = move_list
        self._state = state
        self._suspension_reason = suspension_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SasPortalDeviceGrant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SasPortalDeviceGrant of this SasPortalDeviceGrant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_type(self):
        """Gets the channel_type of this SasPortalDeviceGrant.

        Type of channel used.

        :return: The channel_type of this SasPortalDeviceGrant.
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this SasPortalDeviceGrant.

        Type of channel used.

        :param channel_type: The channel_type of this SasPortalDeviceGrant.
        :type channel_type: str
        """
        allowed_values = ["CHANNEL_TYPE_UNSPECIFIED", "CHANNEL_TYPE_GAA", "CHANNEL_TYPE_PAL"]  # noqa: E501
        if channel_type not in allowed_values:
            raise ValueError(
                "Invalid value for `channel_type` ({0}), must be one of {1}"
                .format(channel_type, allowed_values)
            )

        self._channel_type = channel_type

    @property
    def expire_time(self):
        """Gets the expire_time of this SasPortalDeviceGrant.

        The expiration time of the grant.

        :return: The expire_time of this SasPortalDeviceGrant.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this SasPortalDeviceGrant.

        The expiration time of the grant.

        :param expire_time: The expire_time of this SasPortalDeviceGrant.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def frequency_range(self):
        """Gets the frequency_range of this SasPortalDeviceGrant.


        :return: The frequency_range of this SasPortalDeviceGrant.
        :rtype: SasPortalFrequencyRange
        """
        return self._frequency_range

    @frequency_range.setter
    def frequency_range(self, frequency_range):
        """Sets the frequency_range of this SasPortalDeviceGrant.


        :param frequency_range: The frequency_range of this SasPortalDeviceGrant.
        :type frequency_range: SasPortalFrequencyRange
        """

        self._frequency_range = frequency_range

    @property
    def grant_id(self):
        """Gets the grant_id of this SasPortalDeviceGrant.

        Grant Id.

        :return: The grant_id of this SasPortalDeviceGrant.
        :rtype: str
        """
        return self._grant_id

    @grant_id.setter
    def grant_id(self, grant_id):
        """Sets the grant_id of this SasPortalDeviceGrant.

        Grant Id.

        :param grant_id: The grant_id of this SasPortalDeviceGrant.
        :type grant_id: str
        """

        self._grant_id = grant_id

    @property
    def last_heartbeat_transmit_expire_time(self):
        """Gets the last_heartbeat_transmit_expire_time of this SasPortalDeviceGrant.

        The transmit expiration time of the last heartbeat.

        :return: The last_heartbeat_transmit_expire_time of this SasPortalDeviceGrant.
        :rtype: str
        """
        return self._last_heartbeat_transmit_expire_time

    @last_heartbeat_transmit_expire_time.setter
    def last_heartbeat_transmit_expire_time(self, last_heartbeat_transmit_expire_time):
        """Sets the last_heartbeat_transmit_expire_time of this SasPortalDeviceGrant.

        The transmit expiration time of the last heartbeat.

        :param last_heartbeat_transmit_expire_time: The last_heartbeat_transmit_expire_time of this SasPortalDeviceGrant.
        :type last_heartbeat_transmit_expire_time: str
        """

        self._last_heartbeat_transmit_expire_time = last_heartbeat_transmit_expire_time

    @property
    def max_eirp(self):
        """Gets the max_eirp of this SasPortalDeviceGrant.

        Maximum Equivalent Isotropically Radiated Power (EIRP) permitted by the grant. The maximum EIRP is in units of dBm/MHz. The value of `maxEirp` represents the average (RMS) EIRP that would be measured by the procedure defined in FCC part 96.41(e)(3).

        :return: The max_eirp of this SasPortalDeviceGrant.
        :rtype: float
        """
        return self._max_eirp

    @max_eirp.setter
    def max_eirp(self, max_eirp):
        """Sets the max_eirp of this SasPortalDeviceGrant.

        Maximum Equivalent Isotropically Radiated Power (EIRP) permitted by the grant. The maximum EIRP is in units of dBm/MHz. The value of `maxEirp` represents the average (RMS) EIRP that would be measured by the procedure defined in FCC part 96.41(e)(3).

        :param max_eirp: The max_eirp of this SasPortalDeviceGrant.
        :type max_eirp: float
        """

        self._max_eirp = max_eirp

    @property
    def move_list(self):
        """Gets the move_list of this SasPortalDeviceGrant.

        The DPA move lists on which this grant appears.

        :return: The move_list of this SasPortalDeviceGrant.
        :rtype: List[SasPortalDpaMoveList]
        """
        return self._move_list

    @move_list.setter
    def move_list(self, move_list):
        """Sets the move_list of this SasPortalDeviceGrant.

        The DPA move lists on which this grant appears.

        :param move_list: The move_list of this SasPortalDeviceGrant.
        :type move_list: List[SasPortalDpaMoveList]
        """

        self._move_list = move_list

    @property
    def state(self):
        """Gets the state of this SasPortalDeviceGrant.

        State of the grant.

        :return: The state of this SasPortalDeviceGrant.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SasPortalDeviceGrant.

        State of the grant.

        :param state: The state of this SasPortalDeviceGrant.
        :type state: str
        """
        allowed_values = ["GRANT_STATE_UNSPECIFIED", "GRANT_STATE_GRANTED", "GRANT_STATE_TERMINATED", "GRANT_STATE_SUSPENDED", "GRANT_STATE_AUTHORIZED", "GRANT_STATE_EXPIRED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def suspension_reason(self):
        """Gets the suspension_reason of this SasPortalDeviceGrant.

        If the grant is suspended, the reason(s) for suspension.

        :return: The suspension_reason of this SasPortalDeviceGrant.
        :rtype: List[str]
        """
        return self._suspension_reason

    @suspension_reason.setter
    def suspension_reason(self, suspension_reason):
        """Sets the suspension_reason of this SasPortalDeviceGrant.

        If the grant is suspended, the reason(s) for suspension.

        :param suspension_reason: The suspension_reason of this SasPortalDeviceGrant.
        :type suspension_reason: List[str]
        """

        self._suspension_reason = suspension_reason
