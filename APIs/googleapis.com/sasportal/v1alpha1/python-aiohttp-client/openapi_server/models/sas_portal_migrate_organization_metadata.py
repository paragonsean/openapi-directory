# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SasPortalMigrateOrganizationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation_state: str=None):
        """SasPortalMigrateOrganizationMetadata - a model defined in OpenAPI

        :param operation_state: The operation_state of this SasPortalMigrateOrganizationMetadata.
        """
        self.openapi_types = {
            'operation_state': str
        }

        self.attribute_map = {
            'operation_state': 'operationState'
        }

        self._operation_state = operation_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SasPortalMigrateOrganizationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SasPortalMigrateOrganizationMetadata of this SasPortalMigrateOrganizationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation_state(self):
        """Gets the operation_state of this SasPortalMigrateOrganizationMetadata.

        Output only. Current operation state

        :return: The operation_state of this SasPortalMigrateOrganizationMetadata.
        :rtype: str
        """
        return self._operation_state

    @operation_state.setter
    def operation_state(self, operation_state):
        """Sets the operation_state of this SasPortalMigrateOrganizationMetadata.

        Output only. Current operation state

        :param operation_state: The operation_state of this SasPortalMigrateOrganizationMetadata.
        :type operation_state: str
        """
        allowed_values = ["OPERATION_STATE_UNSPECIFIED", "OPERATION_STATE_PENDING", "OPERATION_STATE_RUNNING", "OPERATION_STATE_SUCCEEDED", "OPERATION_STATE_FAILED"]  # noqa: E501
        if operation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_state` ({0}), must be one of {1}"
                .format(operation_state, allowed_values)
            )

        self._operation_state = operation_state
