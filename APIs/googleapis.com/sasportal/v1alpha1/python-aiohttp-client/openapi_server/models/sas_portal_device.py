# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sas_portal_channel_with_score import SasPortalChannelWithScore
from openapi_server.models.sas_portal_device_config import SasPortalDeviceConfig
from openapi_server.models.sas_portal_device_grant import SasPortalDeviceGrant
from openapi_server.models.sas_portal_device_metadata import SasPortalDeviceMetadata
from openapi_server.models.sas_portal_frequency_range import SasPortalFrequencyRange
from openapi_server import util


class SasPortalDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_config: SasPortalDeviceConfig=None, current_channels: List[SasPortalChannelWithScore]=None, device_metadata: SasPortalDeviceMetadata=None, display_name: str=None, fcc_id: str=None, grant_range_allowlists: List[SasPortalFrequencyRange]=None, grants: List[SasPortalDeviceGrant]=None, name: str=None, preloaded_config: SasPortalDeviceConfig=None, serial_number: str=None, state: str=None):
        """SasPortalDevice - a model defined in OpenAPI

        :param active_config: The active_config of this SasPortalDevice.
        :param current_channels: The current_channels of this SasPortalDevice.
        :param device_metadata: The device_metadata of this SasPortalDevice.
        :param display_name: The display_name of this SasPortalDevice.
        :param fcc_id: The fcc_id of this SasPortalDevice.
        :param grant_range_allowlists: The grant_range_allowlists of this SasPortalDevice.
        :param grants: The grants of this SasPortalDevice.
        :param name: The name of this SasPortalDevice.
        :param preloaded_config: The preloaded_config of this SasPortalDevice.
        :param serial_number: The serial_number of this SasPortalDevice.
        :param state: The state of this SasPortalDevice.
        """
        self.openapi_types = {
            'active_config': SasPortalDeviceConfig,
            'current_channels': List[SasPortalChannelWithScore],
            'device_metadata': SasPortalDeviceMetadata,
            'display_name': str,
            'fcc_id': str,
            'grant_range_allowlists': List[SasPortalFrequencyRange],
            'grants': List[SasPortalDeviceGrant],
            'name': str,
            'preloaded_config': SasPortalDeviceConfig,
            'serial_number': str,
            'state': str
        }

        self.attribute_map = {
            'active_config': 'activeConfig',
            'current_channels': 'currentChannels',
            'device_metadata': 'deviceMetadata',
            'display_name': 'displayName',
            'fcc_id': 'fccId',
            'grant_range_allowlists': 'grantRangeAllowlists',
            'grants': 'grants',
            'name': 'name',
            'preloaded_config': 'preloadedConfig',
            'serial_number': 'serialNumber',
            'state': 'state'
        }

        self._active_config = active_config
        self._current_channels = current_channels
        self._device_metadata = device_metadata
        self._display_name = display_name
        self._fcc_id = fcc_id
        self._grant_range_allowlists = grant_range_allowlists
        self._grants = grants
        self._name = name
        self._preloaded_config = preloaded_config
        self._serial_number = serial_number
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SasPortalDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SasPortalDevice of this SasPortalDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_config(self):
        """Gets the active_config of this SasPortalDevice.


        :return: The active_config of this SasPortalDevice.
        :rtype: SasPortalDeviceConfig
        """
        return self._active_config

    @active_config.setter
    def active_config(self, active_config):
        """Sets the active_config of this SasPortalDevice.


        :param active_config: The active_config of this SasPortalDevice.
        :type active_config: SasPortalDeviceConfig
        """

        self._active_config = active_config

    @property
    def current_channels(self):
        """Gets the current_channels of this SasPortalDevice.

        Output only. Current channels with scores.

        :return: The current_channels of this SasPortalDevice.
        :rtype: List[SasPortalChannelWithScore]
        """
        return self._current_channels

    @current_channels.setter
    def current_channels(self, current_channels):
        """Sets the current_channels of this SasPortalDevice.

        Output only. Current channels with scores.

        :param current_channels: The current_channels of this SasPortalDevice.
        :type current_channels: List[SasPortalChannelWithScore]
        """

        self._current_channels = current_channels

    @property
    def device_metadata(self):
        """Gets the device_metadata of this SasPortalDevice.


        :return: The device_metadata of this SasPortalDevice.
        :rtype: SasPortalDeviceMetadata
        """
        return self._device_metadata

    @device_metadata.setter
    def device_metadata(self, device_metadata):
        """Sets the device_metadata of this SasPortalDevice.


        :param device_metadata: The device_metadata of this SasPortalDevice.
        :type device_metadata: SasPortalDeviceMetadata
        """

        self._device_metadata = device_metadata

    @property
    def display_name(self):
        """Gets the display_name of this SasPortalDevice.

        Device display name.

        :return: The display_name of this SasPortalDevice.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SasPortalDevice.

        Device display name.

        :param display_name: The display_name of this SasPortalDevice.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def fcc_id(self):
        """Gets the fcc_id of this SasPortalDevice.

        The FCC identifier of the device. Refer to https://www.fcc.gov/oet/ea/fccid for FccID format. Accept underscores and periods because some test-SAS customers use them.

        :return: The fcc_id of this SasPortalDevice.
        :rtype: str
        """
        return self._fcc_id

    @fcc_id.setter
    def fcc_id(self, fcc_id):
        """Sets the fcc_id of this SasPortalDevice.

        The FCC identifier of the device. Refer to https://www.fcc.gov/oet/ea/fccid for FccID format. Accept underscores and periods because some test-SAS customers use them.

        :param fcc_id: The fcc_id of this SasPortalDevice.
        :type fcc_id: str
        """

        self._fcc_id = fcc_id

    @property
    def grant_range_allowlists(self):
        """Gets the grant_range_allowlists of this SasPortalDevice.

        Only ranges that are within the allowlists are available for new grants.

        :return: The grant_range_allowlists of this SasPortalDevice.
        :rtype: List[SasPortalFrequencyRange]
        """
        return self._grant_range_allowlists

    @grant_range_allowlists.setter
    def grant_range_allowlists(self, grant_range_allowlists):
        """Sets the grant_range_allowlists of this SasPortalDevice.

        Only ranges that are within the allowlists are available for new grants.

        :param grant_range_allowlists: The grant_range_allowlists of this SasPortalDevice.
        :type grant_range_allowlists: List[SasPortalFrequencyRange]
        """

        self._grant_range_allowlists = grant_range_allowlists

    @property
    def grants(self):
        """Gets the grants of this SasPortalDevice.

        Output only. Grants held by the device.

        :return: The grants of this SasPortalDevice.
        :rtype: List[SasPortalDeviceGrant]
        """
        return self._grants

    @grants.setter
    def grants(self, grants):
        """Sets the grants of this SasPortalDevice.

        Output only. Grants held by the device.

        :param grants: The grants of this SasPortalDevice.
        :type grants: List[SasPortalDeviceGrant]
        """

        self._grants = grants

    @property
    def name(self):
        """Gets the name of this SasPortalDevice.

        Output only. The resource path name.

        :return: The name of this SasPortalDevice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SasPortalDevice.

        Output only. The resource path name.

        :param name: The name of this SasPortalDevice.
        :type name: str
        """

        self._name = name

    @property
    def preloaded_config(self):
        """Gets the preloaded_config of this SasPortalDevice.


        :return: The preloaded_config of this SasPortalDevice.
        :rtype: SasPortalDeviceConfig
        """
        return self._preloaded_config

    @preloaded_config.setter
    def preloaded_config(self, preloaded_config):
        """Sets the preloaded_config of this SasPortalDevice.


        :param preloaded_config: The preloaded_config of this SasPortalDevice.
        :type preloaded_config: SasPortalDeviceConfig
        """

        self._preloaded_config = preloaded_config

    @property
    def serial_number(self):
        """Gets the serial_number of this SasPortalDevice.

        A serial number assigned to the device by the device manufacturer.

        :return: The serial_number of this SasPortalDevice.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this SasPortalDevice.

        A serial number assigned to the device by the device manufacturer.

        :param serial_number: The serial_number of this SasPortalDevice.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def state(self):
        """Gets the state of this SasPortalDevice.

        Output only. Device state.

        :return: The state of this SasPortalDevice.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SasPortalDevice.

        Output only. Device state.

        :param state: The state of this SasPortalDevice.
        :type state: str
        """
        allowed_values = ["DEVICE_STATE_UNSPECIFIED", "RESERVED", "REGISTERED", "DEREGISTERED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
