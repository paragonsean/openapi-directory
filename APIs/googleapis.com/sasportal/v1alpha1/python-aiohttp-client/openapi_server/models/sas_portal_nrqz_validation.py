# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SasPortalNrqzValidation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_id: str=None, cpi_id: str=None, latitude: float=None, longitude: float=None, state: str=None):
        """SasPortalNrqzValidation - a model defined in OpenAPI

        :param case_id: The case_id of this SasPortalNrqzValidation.
        :param cpi_id: The cpi_id of this SasPortalNrqzValidation.
        :param latitude: The latitude of this SasPortalNrqzValidation.
        :param longitude: The longitude of this SasPortalNrqzValidation.
        :param state: The state of this SasPortalNrqzValidation.
        """
        self.openapi_types = {
            'case_id': str,
            'cpi_id': str,
            'latitude': float,
            'longitude': float,
            'state': str
        }

        self.attribute_map = {
            'case_id': 'caseId',
            'cpi_id': 'cpiId',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'state': 'state'
        }

        self._case_id = case_id
        self._cpi_id = cpi_id
        self._latitude = latitude
        self._longitude = longitude
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SasPortalNrqzValidation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SasPortalNrqzValidation of this SasPortalNrqzValidation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_id(self):
        """Gets the case_id of this SasPortalNrqzValidation.

        Validation case ID.

        :return: The case_id of this SasPortalNrqzValidation.
        :rtype: str
        """
        return self._case_id

    @case_id.setter
    def case_id(self, case_id):
        """Sets the case_id of this SasPortalNrqzValidation.

        Validation case ID.

        :param case_id: The case_id of this SasPortalNrqzValidation.
        :type case_id: str
        """

        self._case_id = case_id

    @property
    def cpi_id(self):
        """Gets the cpi_id of this SasPortalNrqzValidation.

        CPI who signed the validation.

        :return: The cpi_id of this SasPortalNrqzValidation.
        :rtype: str
        """
        return self._cpi_id

    @cpi_id.setter
    def cpi_id(self, cpi_id):
        """Sets the cpi_id of this SasPortalNrqzValidation.

        CPI who signed the validation.

        :param cpi_id: The cpi_id of this SasPortalNrqzValidation.
        :type cpi_id: str
        """

        self._cpi_id = cpi_id

    @property
    def latitude(self):
        """Gets the latitude of this SasPortalNrqzValidation.

        Device latitude that's associated with the validation.

        :return: The latitude of this SasPortalNrqzValidation.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this SasPortalNrqzValidation.

        Device latitude that's associated with the validation.

        :param latitude: The latitude of this SasPortalNrqzValidation.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this SasPortalNrqzValidation.

        Device longitude that's associated with the validation.

        :return: The longitude of this SasPortalNrqzValidation.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this SasPortalNrqzValidation.

        Device longitude that's associated with the validation.

        :param longitude: The longitude of this SasPortalNrqzValidation.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def state(self):
        """Gets the state of this SasPortalNrqzValidation.

        State of the NRQZ validation info.

        :return: The state of this SasPortalNrqzValidation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SasPortalNrqzValidation.

        State of the NRQZ validation info.

        :param state: The state of this SasPortalNrqzValidation.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "DRAFT", "FINAL"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
