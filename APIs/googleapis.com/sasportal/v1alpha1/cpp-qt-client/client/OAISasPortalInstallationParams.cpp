/**
 * SAS Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISasPortalInstallationParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISasPortalInstallationParams::OAISasPortalInstallationParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISasPortalInstallationParams::OAISasPortalInstallationParams() {
    this->initializeModel();
}

OAISasPortalInstallationParams::~OAISasPortalInstallationParams() {}

void OAISasPortalInstallationParams::initializeModel() {

    m_antenna_azimuth_isSet = false;
    m_antenna_azimuth_isValid = false;

    m_antenna_beamwidth_isSet = false;
    m_antenna_beamwidth_isValid = false;

    m_antenna_downtilt_isSet = false;
    m_antenna_downtilt_isValid = false;

    m_antenna_gain_isSet = false;
    m_antenna_gain_isValid = false;

    m_antenna_model_isSet = false;
    m_antenna_model_isValid = false;

    m_cpe_cbsd_indication_isSet = false;
    m_cpe_cbsd_indication_isValid = false;

    m_eirp_capability_isSet = false;
    m_eirp_capability_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_height_type_isSet = false;
    m_height_type_isValid = false;

    m_horizontal_accuracy_isSet = false;
    m_horizontal_accuracy_isValid = false;

    m_indoor_deployment_isSet = false;
    m_indoor_deployment_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_vertical_accuracy_isSet = false;
    m_vertical_accuracy_isValid = false;
}

void OAISasPortalInstallationParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISasPortalInstallationParams::fromJsonObject(QJsonObject json) {

    m_antenna_azimuth_isValid = ::OpenAPI::fromJsonValue(m_antenna_azimuth, json[QString("antennaAzimuth")]);
    m_antenna_azimuth_isSet = !json[QString("antennaAzimuth")].isNull() && m_antenna_azimuth_isValid;

    m_antenna_beamwidth_isValid = ::OpenAPI::fromJsonValue(m_antenna_beamwidth, json[QString("antennaBeamwidth")]);
    m_antenna_beamwidth_isSet = !json[QString("antennaBeamwidth")].isNull() && m_antenna_beamwidth_isValid;

    m_antenna_downtilt_isValid = ::OpenAPI::fromJsonValue(m_antenna_downtilt, json[QString("antennaDowntilt")]);
    m_antenna_downtilt_isSet = !json[QString("antennaDowntilt")].isNull() && m_antenna_downtilt_isValid;

    m_antenna_gain_isValid = ::OpenAPI::fromJsonValue(m_antenna_gain, json[QString("antennaGain")]);
    m_antenna_gain_isSet = !json[QString("antennaGain")].isNull() && m_antenna_gain_isValid;

    m_antenna_model_isValid = ::OpenAPI::fromJsonValue(m_antenna_model, json[QString("antennaModel")]);
    m_antenna_model_isSet = !json[QString("antennaModel")].isNull() && m_antenna_model_isValid;

    m_cpe_cbsd_indication_isValid = ::OpenAPI::fromJsonValue(m_cpe_cbsd_indication, json[QString("cpeCbsdIndication")]);
    m_cpe_cbsd_indication_isSet = !json[QString("cpeCbsdIndication")].isNull() && m_cpe_cbsd_indication_isValid;

    m_eirp_capability_isValid = ::OpenAPI::fromJsonValue(m_eirp_capability, json[QString("eirpCapability")]);
    m_eirp_capability_isSet = !json[QString("eirpCapability")].isNull() && m_eirp_capability_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_height_type_isValid = ::OpenAPI::fromJsonValue(m_height_type, json[QString("heightType")]);
    m_height_type_isSet = !json[QString("heightType")].isNull() && m_height_type_isValid;

    m_horizontal_accuracy_isValid = ::OpenAPI::fromJsonValue(m_horizontal_accuracy, json[QString("horizontalAccuracy")]);
    m_horizontal_accuracy_isSet = !json[QString("horizontalAccuracy")].isNull() && m_horizontal_accuracy_isValid;

    m_indoor_deployment_isValid = ::OpenAPI::fromJsonValue(m_indoor_deployment, json[QString("indoorDeployment")]);
    m_indoor_deployment_isSet = !json[QString("indoorDeployment")].isNull() && m_indoor_deployment_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_vertical_accuracy_isValid = ::OpenAPI::fromJsonValue(m_vertical_accuracy, json[QString("verticalAccuracy")]);
    m_vertical_accuracy_isSet = !json[QString("verticalAccuracy")].isNull() && m_vertical_accuracy_isValid;
}

QString OAISasPortalInstallationParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISasPortalInstallationParams::asJsonObject() const {
    QJsonObject obj;
    if (m_antenna_azimuth_isSet) {
        obj.insert(QString("antennaAzimuth"), ::OpenAPI::toJsonValue(m_antenna_azimuth));
    }
    if (m_antenna_beamwidth_isSet) {
        obj.insert(QString("antennaBeamwidth"), ::OpenAPI::toJsonValue(m_antenna_beamwidth));
    }
    if (m_antenna_downtilt_isSet) {
        obj.insert(QString("antennaDowntilt"), ::OpenAPI::toJsonValue(m_antenna_downtilt));
    }
    if (m_antenna_gain_isSet) {
        obj.insert(QString("antennaGain"), ::OpenAPI::toJsonValue(m_antenna_gain));
    }
    if (m_antenna_model_isSet) {
        obj.insert(QString("antennaModel"), ::OpenAPI::toJsonValue(m_antenna_model));
    }
    if (m_cpe_cbsd_indication_isSet) {
        obj.insert(QString("cpeCbsdIndication"), ::OpenAPI::toJsonValue(m_cpe_cbsd_indication));
    }
    if (m_eirp_capability_isSet) {
        obj.insert(QString("eirpCapability"), ::OpenAPI::toJsonValue(m_eirp_capability));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_height_type_isSet) {
        obj.insert(QString("heightType"), ::OpenAPI::toJsonValue(m_height_type));
    }
    if (m_horizontal_accuracy_isSet) {
        obj.insert(QString("horizontalAccuracy"), ::OpenAPI::toJsonValue(m_horizontal_accuracy));
    }
    if (m_indoor_deployment_isSet) {
        obj.insert(QString("indoorDeployment"), ::OpenAPI::toJsonValue(m_indoor_deployment));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_vertical_accuracy_isSet) {
        obj.insert(QString("verticalAccuracy"), ::OpenAPI::toJsonValue(m_vertical_accuracy));
    }
    return obj;
}

qint32 OAISasPortalInstallationParams::getAntennaAzimuth() const {
    return m_antenna_azimuth;
}
void OAISasPortalInstallationParams::setAntennaAzimuth(const qint32 &antenna_azimuth) {
    m_antenna_azimuth = antenna_azimuth;
    m_antenna_azimuth_isSet = true;
}

bool OAISasPortalInstallationParams::is_antenna_azimuth_Set() const{
    return m_antenna_azimuth_isSet;
}

bool OAISasPortalInstallationParams::is_antenna_azimuth_Valid() const{
    return m_antenna_azimuth_isValid;
}

qint32 OAISasPortalInstallationParams::getAntennaBeamwidth() const {
    return m_antenna_beamwidth;
}
void OAISasPortalInstallationParams::setAntennaBeamwidth(const qint32 &antenna_beamwidth) {
    m_antenna_beamwidth = antenna_beamwidth;
    m_antenna_beamwidth_isSet = true;
}

bool OAISasPortalInstallationParams::is_antenna_beamwidth_Set() const{
    return m_antenna_beamwidth_isSet;
}

bool OAISasPortalInstallationParams::is_antenna_beamwidth_Valid() const{
    return m_antenna_beamwidth_isValid;
}

qint32 OAISasPortalInstallationParams::getAntennaDowntilt() const {
    return m_antenna_downtilt;
}
void OAISasPortalInstallationParams::setAntennaDowntilt(const qint32 &antenna_downtilt) {
    m_antenna_downtilt = antenna_downtilt;
    m_antenna_downtilt_isSet = true;
}

bool OAISasPortalInstallationParams::is_antenna_downtilt_Set() const{
    return m_antenna_downtilt_isSet;
}

bool OAISasPortalInstallationParams::is_antenna_downtilt_Valid() const{
    return m_antenna_downtilt_isValid;
}

qint32 OAISasPortalInstallationParams::getAntennaGain() const {
    return m_antenna_gain;
}
void OAISasPortalInstallationParams::setAntennaGain(const qint32 &antenna_gain) {
    m_antenna_gain = antenna_gain;
    m_antenna_gain_isSet = true;
}

bool OAISasPortalInstallationParams::is_antenna_gain_Set() const{
    return m_antenna_gain_isSet;
}

bool OAISasPortalInstallationParams::is_antenna_gain_Valid() const{
    return m_antenna_gain_isValid;
}

QString OAISasPortalInstallationParams::getAntennaModel() const {
    return m_antenna_model;
}
void OAISasPortalInstallationParams::setAntennaModel(const QString &antenna_model) {
    m_antenna_model = antenna_model;
    m_antenna_model_isSet = true;
}

bool OAISasPortalInstallationParams::is_antenna_model_Set() const{
    return m_antenna_model_isSet;
}

bool OAISasPortalInstallationParams::is_antenna_model_Valid() const{
    return m_antenna_model_isValid;
}

bool OAISasPortalInstallationParams::isCpeCbsdIndication() const {
    return m_cpe_cbsd_indication;
}
void OAISasPortalInstallationParams::setCpeCbsdIndication(const bool &cpe_cbsd_indication) {
    m_cpe_cbsd_indication = cpe_cbsd_indication;
    m_cpe_cbsd_indication_isSet = true;
}

bool OAISasPortalInstallationParams::is_cpe_cbsd_indication_Set() const{
    return m_cpe_cbsd_indication_isSet;
}

bool OAISasPortalInstallationParams::is_cpe_cbsd_indication_Valid() const{
    return m_cpe_cbsd_indication_isValid;
}

qint32 OAISasPortalInstallationParams::getEirpCapability() const {
    return m_eirp_capability;
}
void OAISasPortalInstallationParams::setEirpCapability(const qint32 &eirp_capability) {
    m_eirp_capability = eirp_capability;
    m_eirp_capability_isSet = true;
}

bool OAISasPortalInstallationParams::is_eirp_capability_Set() const{
    return m_eirp_capability_isSet;
}

bool OAISasPortalInstallationParams::is_eirp_capability_Valid() const{
    return m_eirp_capability_isValid;
}

double OAISasPortalInstallationParams::getHeight() const {
    return m_height;
}
void OAISasPortalInstallationParams::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAISasPortalInstallationParams::is_height_Set() const{
    return m_height_isSet;
}

bool OAISasPortalInstallationParams::is_height_Valid() const{
    return m_height_isValid;
}

QString OAISasPortalInstallationParams::getHeightType() const {
    return m_height_type;
}
void OAISasPortalInstallationParams::setHeightType(const QString &height_type) {
    m_height_type = height_type;
    m_height_type_isSet = true;
}

bool OAISasPortalInstallationParams::is_height_type_Set() const{
    return m_height_type_isSet;
}

bool OAISasPortalInstallationParams::is_height_type_Valid() const{
    return m_height_type_isValid;
}

double OAISasPortalInstallationParams::getHorizontalAccuracy() const {
    return m_horizontal_accuracy;
}
void OAISasPortalInstallationParams::setHorizontalAccuracy(const double &horizontal_accuracy) {
    m_horizontal_accuracy = horizontal_accuracy;
    m_horizontal_accuracy_isSet = true;
}

bool OAISasPortalInstallationParams::is_horizontal_accuracy_Set() const{
    return m_horizontal_accuracy_isSet;
}

bool OAISasPortalInstallationParams::is_horizontal_accuracy_Valid() const{
    return m_horizontal_accuracy_isValid;
}

bool OAISasPortalInstallationParams::isIndoorDeployment() const {
    return m_indoor_deployment;
}
void OAISasPortalInstallationParams::setIndoorDeployment(const bool &indoor_deployment) {
    m_indoor_deployment = indoor_deployment;
    m_indoor_deployment_isSet = true;
}

bool OAISasPortalInstallationParams::is_indoor_deployment_Set() const{
    return m_indoor_deployment_isSet;
}

bool OAISasPortalInstallationParams::is_indoor_deployment_Valid() const{
    return m_indoor_deployment_isValid;
}

double OAISasPortalInstallationParams::getLatitude() const {
    return m_latitude;
}
void OAISasPortalInstallationParams::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAISasPortalInstallationParams::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAISasPortalInstallationParams::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAISasPortalInstallationParams::getLongitude() const {
    return m_longitude;
}
void OAISasPortalInstallationParams::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAISasPortalInstallationParams::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAISasPortalInstallationParams::is_longitude_Valid() const{
    return m_longitude_isValid;
}

double OAISasPortalInstallationParams::getVerticalAccuracy() const {
    return m_vertical_accuracy;
}
void OAISasPortalInstallationParams::setVerticalAccuracy(const double &vertical_accuracy) {
    m_vertical_accuracy = vertical_accuracy;
    m_vertical_accuracy_isSet = true;
}

bool OAISasPortalInstallationParams::is_vertical_accuracy_Set() const{
    return m_vertical_accuracy_isSet;
}

bool OAISasPortalInstallationParams::is_vertical_accuracy_Valid() const{
    return m_vertical_accuracy_isValid;
}

bool OAISasPortalInstallationParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_antenna_azimuth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_antenna_beamwidth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_antenna_downtilt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_antenna_gain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_antenna_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpe_cbsd_indication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eirp_capability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indoor_deployment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISasPortalInstallationParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
