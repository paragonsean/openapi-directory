/**
 * SAS Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISasPortalGcpProjectDeployment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISasPortalGcpProjectDeployment::OAISasPortalGcpProjectDeployment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISasPortalGcpProjectDeployment::OAISasPortalGcpProjectDeployment() {
    this->initializeModel();
}

OAISasPortalGcpProjectDeployment::~OAISasPortalGcpProjectDeployment() {}

void OAISasPortalGcpProjectDeployment::initializeModel() {

    m_deployment_isSet = false;
    m_deployment_isValid = false;

    m_has_enabled_analytics_isSet = false;
    m_has_enabled_analytics_isValid = false;
}

void OAISasPortalGcpProjectDeployment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISasPortalGcpProjectDeployment::fromJsonObject(QJsonObject json) {

    m_deployment_isValid = ::OpenAPI::fromJsonValue(m_deployment, json[QString("deployment")]);
    m_deployment_isSet = !json[QString("deployment")].isNull() && m_deployment_isValid;

    m_has_enabled_analytics_isValid = ::OpenAPI::fromJsonValue(m_has_enabled_analytics, json[QString("hasEnabledAnalytics")]);
    m_has_enabled_analytics_isSet = !json[QString("hasEnabledAnalytics")].isNull() && m_has_enabled_analytics_isValid;
}

QString OAISasPortalGcpProjectDeployment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISasPortalGcpProjectDeployment::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment.isSet()) {
        obj.insert(QString("deployment"), ::OpenAPI::toJsonValue(m_deployment));
    }
    if (m_has_enabled_analytics_isSet) {
        obj.insert(QString("hasEnabledAnalytics"), ::OpenAPI::toJsonValue(m_has_enabled_analytics));
    }
    return obj;
}

OAISasPortalDeployment OAISasPortalGcpProjectDeployment::getDeployment() const {
    return m_deployment;
}
void OAISasPortalGcpProjectDeployment::setDeployment(const OAISasPortalDeployment &deployment) {
    m_deployment = deployment;
    m_deployment_isSet = true;
}

bool OAISasPortalGcpProjectDeployment::is_deployment_Set() const{
    return m_deployment_isSet;
}

bool OAISasPortalGcpProjectDeployment::is_deployment_Valid() const{
    return m_deployment_isValid;
}

bool OAISasPortalGcpProjectDeployment::isHasEnabledAnalytics() const {
    return m_has_enabled_analytics;
}
void OAISasPortalGcpProjectDeployment::setHasEnabledAnalytics(const bool &has_enabled_analytics) {
    m_has_enabled_analytics = has_enabled_analytics;
    m_has_enabled_analytics_isSet = true;
}

bool OAISasPortalGcpProjectDeployment::is_has_enabled_analytics_Set() const{
    return m_has_enabled_analytics_isSet;
}

bool OAISasPortalGcpProjectDeployment::is_has_enabled_analytics_Valid() const{
    return m_has_enabled_analytics_isValid;
}

bool OAISasPortalGcpProjectDeployment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_enabled_analytics_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISasPortalGcpProjectDeployment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
