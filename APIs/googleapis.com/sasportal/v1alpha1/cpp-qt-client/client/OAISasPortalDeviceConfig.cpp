/**
 * SAS Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISasPortalDeviceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISasPortalDeviceConfig::OAISasPortalDeviceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISasPortalDeviceConfig::OAISasPortalDeviceConfig() {
    this->initializeModel();
}

OAISasPortalDeviceConfig::~OAISasPortalDeviceConfig() {}

void OAISasPortalDeviceConfig::initializeModel() {

    m_air_interface_isSet = false;
    m_air_interface_isValid = false;

    m_call_sign_isSet = false;
    m_call_sign_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_installation_params_isSet = false;
    m_installation_params_isValid = false;

    m_is_signed_isSet = false;
    m_is_signed_isValid = false;

    m_measurement_capabilities_isSet = false;
    m_measurement_capabilities_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAISasPortalDeviceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISasPortalDeviceConfig::fromJsonObject(QJsonObject json) {

    m_air_interface_isValid = ::OpenAPI::fromJsonValue(m_air_interface, json[QString("airInterface")]);
    m_air_interface_isSet = !json[QString("airInterface")].isNull() && m_air_interface_isValid;

    m_call_sign_isValid = ::OpenAPI::fromJsonValue(m_call_sign, json[QString("callSign")]);
    m_call_sign_isSet = !json[QString("callSign")].isNull() && m_call_sign_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_installation_params_isValid = ::OpenAPI::fromJsonValue(m_installation_params, json[QString("installationParams")]);
    m_installation_params_isSet = !json[QString("installationParams")].isNull() && m_installation_params_isValid;

    m_is_signed_isValid = ::OpenAPI::fromJsonValue(m_is_signed, json[QString("isSigned")]);
    m_is_signed_isSet = !json[QString("isSigned")].isNull() && m_is_signed_isValid;

    m_measurement_capabilities_isValid = ::OpenAPI::fromJsonValue(m_measurement_capabilities, json[QString("measurementCapabilities")]);
    m_measurement_capabilities_isSet = !json[QString("measurementCapabilities")].isNull() && m_measurement_capabilities_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAISasPortalDeviceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISasPortalDeviceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_air_interface.isSet()) {
        obj.insert(QString("airInterface"), ::OpenAPI::toJsonValue(m_air_interface));
    }
    if (m_call_sign_isSet) {
        obj.insert(QString("callSign"), ::OpenAPI::toJsonValue(m_call_sign));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_installation_params.isSet()) {
        obj.insert(QString("installationParams"), ::OpenAPI::toJsonValue(m_installation_params));
    }
    if (m_is_signed_isSet) {
        obj.insert(QString("isSigned"), ::OpenAPI::toJsonValue(m_is_signed));
    }
    if (m_measurement_capabilities.size() > 0) {
        obj.insert(QString("measurementCapabilities"), ::OpenAPI::toJsonValue(m_measurement_capabilities));
    }
    if (m_model.isSet()) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAISasPortalDeviceAirInterface OAISasPortalDeviceConfig::getAirInterface() const {
    return m_air_interface;
}
void OAISasPortalDeviceConfig::setAirInterface(const OAISasPortalDeviceAirInterface &air_interface) {
    m_air_interface = air_interface;
    m_air_interface_isSet = true;
}

bool OAISasPortalDeviceConfig::is_air_interface_Set() const{
    return m_air_interface_isSet;
}

bool OAISasPortalDeviceConfig::is_air_interface_Valid() const{
    return m_air_interface_isValid;
}

QString OAISasPortalDeviceConfig::getCallSign() const {
    return m_call_sign;
}
void OAISasPortalDeviceConfig::setCallSign(const QString &call_sign) {
    m_call_sign = call_sign;
    m_call_sign_isSet = true;
}

bool OAISasPortalDeviceConfig::is_call_sign_Set() const{
    return m_call_sign_isSet;
}

bool OAISasPortalDeviceConfig::is_call_sign_Valid() const{
    return m_call_sign_isValid;
}

QString OAISasPortalDeviceConfig::getCategory() const {
    return m_category;
}
void OAISasPortalDeviceConfig::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAISasPortalDeviceConfig::is_category_Set() const{
    return m_category_isSet;
}

bool OAISasPortalDeviceConfig::is_category_Valid() const{
    return m_category_isValid;
}

OAISasPortalInstallationParams OAISasPortalDeviceConfig::getInstallationParams() const {
    return m_installation_params;
}
void OAISasPortalDeviceConfig::setInstallationParams(const OAISasPortalInstallationParams &installation_params) {
    m_installation_params = installation_params;
    m_installation_params_isSet = true;
}

bool OAISasPortalDeviceConfig::is_installation_params_Set() const{
    return m_installation_params_isSet;
}

bool OAISasPortalDeviceConfig::is_installation_params_Valid() const{
    return m_installation_params_isValid;
}

bool OAISasPortalDeviceConfig::isIsSigned() const {
    return m_is_signed;
}
void OAISasPortalDeviceConfig::setIsSigned(const bool &is_signed) {
    m_is_signed = is_signed;
    m_is_signed_isSet = true;
}

bool OAISasPortalDeviceConfig::is_is_signed_Set() const{
    return m_is_signed_isSet;
}

bool OAISasPortalDeviceConfig::is_is_signed_Valid() const{
    return m_is_signed_isValid;
}

QList<QString> OAISasPortalDeviceConfig::getMeasurementCapabilities() const {
    return m_measurement_capabilities;
}
void OAISasPortalDeviceConfig::setMeasurementCapabilities(const QList<QString> &measurement_capabilities) {
    m_measurement_capabilities = measurement_capabilities;
    m_measurement_capabilities_isSet = true;
}

bool OAISasPortalDeviceConfig::is_measurement_capabilities_Set() const{
    return m_measurement_capabilities_isSet;
}

bool OAISasPortalDeviceConfig::is_measurement_capabilities_Valid() const{
    return m_measurement_capabilities_isValid;
}

OAISasPortalDeviceModel OAISasPortalDeviceConfig::getModel() const {
    return m_model;
}
void OAISasPortalDeviceConfig::setModel(const OAISasPortalDeviceModel &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAISasPortalDeviceConfig::is_model_Set() const{
    return m_model_isSet;
}

bool OAISasPortalDeviceConfig::is_model_Valid() const{
    return m_model_isValid;
}

QString OAISasPortalDeviceConfig::getState() const {
    return m_state;
}
void OAISasPortalDeviceConfig::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISasPortalDeviceConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAISasPortalDeviceConfig::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISasPortalDeviceConfig::getUpdateTime() const {
    return m_update_time;
}
void OAISasPortalDeviceConfig::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAISasPortalDeviceConfig::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAISasPortalDeviceConfig::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAISasPortalDeviceConfig::getUserId() const {
    return m_user_id;
}
void OAISasPortalDeviceConfig::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAISasPortalDeviceConfig::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAISasPortalDeviceConfig::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAISasPortalDeviceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_air_interface.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_sign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installation_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_signed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISasPortalDeviceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
