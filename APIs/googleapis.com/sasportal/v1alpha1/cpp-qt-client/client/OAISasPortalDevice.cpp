/**
 * SAS Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISasPortalDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISasPortalDevice::OAISasPortalDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISasPortalDevice::OAISasPortalDevice() {
    this->initializeModel();
}

OAISasPortalDevice::~OAISasPortalDevice() {}

void OAISasPortalDevice::initializeModel() {

    m_active_config_isSet = false;
    m_active_config_isValid = false;

    m_current_channels_isSet = false;
    m_current_channels_isValid = false;

    m_device_metadata_isSet = false;
    m_device_metadata_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_fcc_id_isSet = false;
    m_fcc_id_isValid = false;

    m_grant_range_allowlists_isSet = false;
    m_grant_range_allowlists_isValid = false;

    m_grants_isSet = false;
    m_grants_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preloaded_config_isSet = false;
    m_preloaded_config_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAISasPortalDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISasPortalDevice::fromJsonObject(QJsonObject json) {

    m_active_config_isValid = ::OpenAPI::fromJsonValue(m_active_config, json[QString("activeConfig")]);
    m_active_config_isSet = !json[QString("activeConfig")].isNull() && m_active_config_isValid;

    m_current_channels_isValid = ::OpenAPI::fromJsonValue(m_current_channels, json[QString("currentChannels")]);
    m_current_channels_isSet = !json[QString("currentChannels")].isNull() && m_current_channels_isValid;

    m_device_metadata_isValid = ::OpenAPI::fromJsonValue(m_device_metadata, json[QString("deviceMetadata")]);
    m_device_metadata_isSet = !json[QString("deviceMetadata")].isNull() && m_device_metadata_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_fcc_id_isValid = ::OpenAPI::fromJsonValue(m_fcc_id, json[QString("fccId")]);
    m_fcc_id_isSet = !json[QString("fccId")].isNull() && m_fcc_id_isValid;

    m_grant_range_allowlists_isValid = ::OpenAPI::fromJsonValue(m_grant_range_allowlists, json[QString("grantRangeAllowlists")]);
    m_grant_range_allowlists_isSet = !json[QString("grantRangeAllowlists")].isNull() && m_grant_range_allowlists_isValid;

    m_grants_isValid = ::OpenAPI::fromJsonValue(m_grants, json[QString("grants")]);
    m_grants_isSet = !json[QString("grants")].isNull() && m_grants_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preloaded_config_isValid = ::OpenAPI::fromJsonValue(m_preloaded_config, json[QString("preloadedConfig")]);
    m_preloaded_config_isSet = !json[QString("preloadedConfig")].isNull() && m_preloaded_config_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAISasPortalDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISasPortalDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_active_config.isSet()) {
        obj.insert(QString("activeConfig"), ::OpenAPI::toJsonValue(m_active_config));
    }
    if (m_current_channels.size() > 0) {
        obj.insert(QString("currentChannels"), ::OpenAPI::toJsonValue(m_current_channels));
    }
    if (m_device_metadata.isSet()) {
        obj.insert(QString("deviceMetadata"), ::OpenAPI::toJsonValue(m_device_metadata));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_fcc_id_isSet) {
        obj.insert(QString("fccId"), ::OpenAPI::toJsonValue(m_fcc_id));
    }
    if (m_grant_range_allowlists.size() > 0) {
        obj.insert(QString("grantRangeAllowlists"), ::OpenAPI::toJsonValue(m_grant_range_allowlists));
    }
    if (m_grants.size() > 0) {
        obj.insert(QString("grants"), ::OpenAPI::toJsonValue(m_grants));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preloaded_config.isSet()) {
        obj.insert(QString("preloadedConfig"), ::OpenAPI::toJsonValue(m_preloaded_config));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAISasPortalDeviceConfig OAISasPortalDevice::getActiveConfig() const {
    return m_active_config;
}
void OAISasPortalDevice::setActiveConfig(const OAISasPortalDeviceConfig &active_config) {
    m_active_config = active_config;
    m_active_config_isSet = true;
}

bool OAISasPortalDevice::is_active_config_Set() const{
    return m_active_config_isSet;
}

bool OAISasPortalDevice::is_active_config_Valid() const{
    return m_active_config_isValid;
}

QList<OAISasPortalChannelWithScore> OAISasPortalDevice::getCurrentChannels() const {
    return m_current_channels;
}
void OAISasPortalDevice::setCurrentChannels(const QList<OAISasPortalChannelWithScore> &current_channels) {
    m_current_channels = current_channels;
    m_current_channels_isSet = true;
}

bool OAISasPortalDevice::is_current_channels_Set() const{
    return m_current_channels_isSet;
}

bool OAISasPortalDevice::is_current_channels_Valid() const{
    return m_current_channels_isValid;
}

OAISasPortalDeviceMetadata OAISasPortalDevice::getDeviceMetadata() const {
    return m_device_metadata;
}
void OAISasPortalDevice::setDeviceMetadata(const OAISasPortalDeviceMetadata &device_metadata) {
    m_device_metadata = device_metadata;
    m_device_metadata_isSet = true;
}

bool OAISasPortalDevice::is_device_metadata_Set() const{
    return m_device_metadata_isSet;
}

bool OAISasPortalDevice::is_device_metadata_Valid() const{
    return m_device_metadata_isValid;
}

QString OAISasPortalDevice::getDisplayName() const {
    return m_display_name;
}
void OAISasPortalDevice::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISasPortalDevice::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISasPortalDevice::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAISasPortalDevice::getFccId() const {
    return m_fcc_id;
}
void OAISasPortalDevice::setFccId(const QString &fcc_id) {
    m_fcc_id = fcc_id;
    m_fcc_id_isSet = true;
}

bool OAISasPortalDevice::is_fcc_id_Set() const{
    return m_fcc_id_isSet;
}

bool OAISasPortalDevice::is_fcc_id_Valid() const{
    return m_fcc_id_isValid;
}

QList<OAISasPortalFrequencyRange> OAISasPortalDevice::getGrantRangeAllowlists() const {
    return m_grant_range_allowlists;
}
void OAISasPortalDevice::setGrantRangeAllowlists(const QList<OAISasPortalFrequencyRange> &grant_range_allowlists) {
    m_grant_range_allowlists = grant_range_allowlists;
    m_grant_range_allowlists_isSet = true;
}

bool OAISasPortalDevice::is_grant_range_allowlists_Set() const{
    return m_grant_range_allowlists_isSet;
}

bool OAISasPortalDevice::is_grant_range_allowlists_Valid() const{
    return m_grant_range_allowlists_isValid;
}

QList<OAISasPortalDeviceGrant> OAISasPortalDevice::getGrants() const {
    return m_grants;
}
void OAISasPortalDevice::setGrants(const QList<OAISasPortalDeviceGrant> &grants) {
    m_grants = grants;
    m_grants_isSet = true;
}

bool OAISasPortalDevice::is_grants_Set() const{
    return m_grants_isSet;
}

bool OAISasPortalDevice::is_grants_Valid() const{
    return m_grants_isValid;
}

QString OAISasPortalDevice::getName() const {
    return m_name;
}
void OAISasPortalDevice::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISasPortalDevice::is_name_Set() const{
    return m_name_isSet;
}

bool OAISasPortalDevice::is_name_Valid() const{
    return m_name_isValid;
}

OAISasPortalDeviceConfig OAISasPortalDevice::getPreloadedConfig() const {
    return m_preloaded_config;
}
void OAISasPortalDevice::setPreloadedConfig(const OAISasPortalDeviceConfig &preloaded_config) {
    m_preloaded_config = preloaded_config;
    m_preloaded_config_isSet = true;
}

bool OAISasPortalDevice::is_preloaded_config_Set() const{
    return m_preloaded_config_isSet;
}

bool OAISasPortalDevice::is_preloaded_config_Valid() const{
    return m_preloaded_config_isValid;
}

QString OAISasPortalDevice::getSerialNumber() const {
    return m_serial_number;
}
void OAISasPortalDevice::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAISasPortalDevice::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAISasPortalDevice::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAISasPortalDevice::getState() const {
    return m_state;
}
void OAISasPortalDevice::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISasPortalDevice::is_state_Set() const{
    return m_state_isSet;
}

bool OAISasPortalDevice::is_state_Valid() const{
    return m_state_isValid;
}

bool OAISasPortalDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fcc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_range_allowlists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_grants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preloaded_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISasPortalDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
