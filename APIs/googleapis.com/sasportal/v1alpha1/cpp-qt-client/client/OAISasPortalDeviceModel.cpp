/**
 * SAS Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISasPortalDeviceModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISasPortalDeviceModel::OAISasPortalDeviceModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISasPortalDeviceModel::OAISasPortalDeviceModel() {
    this->initializeModel();
}

OAISasPortalDeviceModel::~OAISasPortalDeviceModel() {}

void OAISasPortalDeviceModel::initializeModel() {

    m_firmware_version_isSet = false;
    m_firmware_version_isValid = false;

    m_hardware_version_isSet = false;
    m_hardware_version_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_software_version_isSet = false;
    m_software_version_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;
}

void OAISasPortalDeviceModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISasPortalDeviceModel::fromJsonObject(QJsonObject json) {

    m_firmware_version_isValid = ::OpenAPI::fromJsonValue(m_firmware_version, json[QString("firmwareVersion")]);
    m_firmware_version_isSet = !json[QString("firmwareVersion")].isNull() && m_firmware_version_isValid;

    m_hardware_version_isValid = ::OpenAPI::fromJsonValue(m_hardware_version, json[QString("hardwareVersion")]);
    m_hardware_version_isSet = !json[QString("hardwareVersion")].isNull() && m_hardware_version_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_software_version_isValid = ::OpenAPI::fromJsonValue(m_software_version, json[QString("softwareVersion")]);
    m_software_version_isSet = !json[QString("softwareVersion")].isNull() && m_software_version_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;
}

QString OAISasPortalDeviceModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISasPortalDeviceModel::asJsonObject() const {
    QJsonObject obj;
    if (m_firmware_version_isSet) {
        obj.insert(QString("firmwareVersion"), ::OpenAPI::toJsonValue(m_firmware_version));
    }
    if (m_hardware_version_isSet) {
        obj.insert(QString("hardwareVersion"), ::OpenAPI::toJsonValue(m_hardware_version));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_software_version_isSet) {
        obj.insert(QString("softwareVersion"), ::OpenAPI::toJsonValue(m_software_version));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    return obj;
}

QString OAISasPortalDeviceModel::getFirmwareVersion() const {
    return m_firmware_version;
}
void OAISasPortalDeviceModel::setFirmwareVersion(const QString &firmware_version) {
    m_firmware_version = firmware_version;
    m_firmware_version_isSet = true;
}

bool OAISasPortalDeviceModel::is_firmware_version_Set() const{
    return m_firmware_version_isSet;
}

bool OAISasPortalDeviceModel::is_firmware_version_Valid() const{
    return m_firmware_version_isValid;
}

QString OAISasPortalDeviceModel::getHardwareVersion() const {
    return m_hardware_version;
}
void OAISasPortalDeviceModel::setHardwareVersion(const QString &hardware_version) {
    m_hardware_version = hardware_version;
    m_hardware_version_isSet = true;
}

bool OAISasPortalDeviceModel::is_hardware_version_Set() const{
    return m_hardware_version_isSet;
}

bool OAISasPortalDeviceModel::is_hardware_version_Valid() const{
    return m_hardware_version_isValid;
}

QString OAISasPortalDeviceModel::getName() const {
    return m_name;
}
void OAISasPortalDeviceModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISasPortalDeviceModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAISasPortalDeviceModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISasPortalDeviceModel::getSoftwareVersion() const {
    return m_software_version;
}
void OAISasPortalDeviceModel::setSoftwareVersion(const QString &software_version) {
    m_software_version = software_version;
    m_software_version_isSet = true;
}

bool OAISasPortalDeviceModel::is_software_version_Set() const{
    return m_software_version_isSet;
}

bool OAISasPortalDeviceModel::is_software_version_Valid() const{
    return m_software_version_isValid;
}

QString OAISasPortalDeviceModel::getVendor() const {
    return m_vendor;
}
void OAISasPortalDeviceModel::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAISasPortalDeviceModel::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAISasPortalDeviceModel::is_vendor_Valid() const{
    return m_vendor_isValid;
}

bool OAISasPortalDeviceModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_firmware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hardware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISasPortalDeviceModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
