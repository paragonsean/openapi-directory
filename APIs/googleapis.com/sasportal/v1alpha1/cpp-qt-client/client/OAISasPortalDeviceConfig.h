/**
 * SAS Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISasPortalDeviceConfig.h
 *
 * Information about the device configuration.
 */

#ifndef OAISasPortalDeviceConfig_H
#define OAISasPortalDeviceConfig_H

#include <QJsonObject>

#include "OAISasPortalDeviceAirInterface.h"
#include "OAISasPortalDeviceModel.h"
#include "OAISasPortalInstallationParams.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISasPortalDeviceAirInterface;
class OAISasPortalInstallationParams;
class OAISasPortalDeviceModel;

class OAISasPortalDeviceConfig : public OAIObject {
public:
    OAISasPortalDeviceConfig();
    OAISasPortalDeviceConfig(QString json);
    ~OAISasPortalDeviceConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISasPortalDeviceAirInterface getAirInterface() const;
    void setAirInterface(const OAISasPortalDeviceAirInterface &air_interface);
    bool is_air_interface_Set() const;
    bool is_air_interface_Valid() const;

    QString getCallSign() const;
    void setCallSign(const QString &call_sign);
    bool is_call_sign_Set() const;
    bool is_call_sign_Valid() const;

    QString getCategory() const;
    void setCategory(const QString &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    OAISasPortalInstallationParams getInstallationParams() const;
    void setInstallationParams(const OAISasPortalInstallationParams &installation_params);
    bool is_installation_params_Set() const;
    bool is_installation_params_Valid() const;

    bool isIsSigned() const;
    void setIsSigned(const bool &is_signed);
    bool is_is_signed_Set() const;
    bool is_is_signed_Valid() const;

    QList<QString> getMeasurementCapabilities() const;
    void setMeasurementCapabilities(const QList<QString> &measurement_capabilities);
    bool is_measurement_capabilities_Set() const;
    bool is_measurement_capabilities_Valid() const;

    OAISasPortalDeviceModel getModel() const;
    void setModel(const OAISasPortalDeviceModel &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISasPortalDeviceAirInterface m_air_interface;
    bool m_air_interface_isSet;
    bool m_air_interface_isValid;

    QString m_call_sign;
    bool m_call_sign_isSet;
    bool m_call_sign_isValid;

    QString m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    OAISasPortalInstallationParams m_installation_params;
    bool m_installation_params_isSet;
    bool m_installation_params_isValid;

    bool m_is_signed;
    bool m_is_signed_isSet;
    bool m_is_signed_isValid;

    QList<QString> m_measurement_capabilities;
    bool m_measurement_capabilities_isSet;
    bool m_measurement_capabilities_isValid;

    OAISasPortalDeviceModel m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISasPortalDeviceConfig)

#endif // OAISasPortalDeviceConfig_H
