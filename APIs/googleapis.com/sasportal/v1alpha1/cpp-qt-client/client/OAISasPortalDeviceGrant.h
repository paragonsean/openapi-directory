/**
 * SAS Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISasPortalDeviceGrant.h
 *
 * Device grant. It is an authorization provided by the Spectrum Access System to a device to transmit using specified operating parameters after a successful heartbeat by the device.
 */

#ifndef OAISasPortalDeviceGrant_H
#define OAISasPortalDeviceGrant_H

#include <QJsonObject>

#include "OAISasPortalDpaMoveList.h"
#include "OAISasPortalFrequencyRange.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISasPortalFrequencyRange;
class OAISasPortalDpaMoveList;

class OAISasPortalDeviceGrant : public OAIObject {
public:
    OAISasPortalDeviceGrant();
    OAISasPortalDeviceGrant(QString json);
    ~OAISasPortalDeviceGrant() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChannelType() const;
    void setChannelType(const QString &channel_type);
    bool is_channel_type_Set() const;
    bool is_channel_type_Valid() const;

    QString getExpireTime() const;
    void setExpireTime(const QString &expire_time);
    bool is_expire_time_Set() const;
    bool is_expire_time_Valid() const;

    OAISasPortalFrequencyRange getFrequencyRange() const;
    void setFrequencyRange(const OAISasPortalFrequencyRange &frequency_range);
    bool is_frequency_range_Set() const;
    bool is_frequency_range_Valid() const;

    QString getGrantId() const;
    void setGrantId(const QString &grant_id);
    bool is_grant_id_Set() const;
    bool is_grant_id_Valid() const;

    QString getLastHeartbeatTransmitExpireTime() const;
    void setLastHeartbeatTransmitExpireTime(const QString &last_heartbeat_transmit_expire_time);
    bool is_last_heartbeat_transmit_expire_time_Set() const;
    bool is_last_heartbeat_transmit_expire_time_Valid() const;

    double getMaxEirp() const;
    void setMaxEirp(const double &max_eirp);
    bool is_max_eirp_Set() const;
    bool is_max_eirp_Valid() const;

    QList<OAISasPortalDpaMoveList> getMoveList() const;
    void setMoveList(const QList<OAISasPortalDpaMoveList> &move_list);
    bool is_move_list_Set() const;
    bool is_move_list_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QList<QString> getSuspensionReason() const;
    void setSuspensionReason(const QList<QString> &suspension_reason);
    bool is_suspension_reason_Set() const;
    bool is_suspension_reason_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_channel_type;
    bool m_channel_type_isSet;
    bool m_channel_type_isValid;

    QString m_expire_time;
    bool m_expire_time_isSet;
    bool m_expire_time_isValid;

    OAISasPortalFrequencyRange m_frequency_range;
    bool m_frequency_range_isSet;
    bool m_frequency_range_isValid;

    QString m_grant_id;
    bool m_grant_id_isSet;
    bool m_grant_id_isValid;

    QString m_last_heartbeat_transmit_expire_time;
    bool m_last_heartbeat_transmit_expire_time_isSet;
    bool m_last_heartbeat_transmit_expire_time_isValid;

    double m_max_eirp;
    bool m_max_eirp_isSet;
    bool m_max_eirp_isValid;

    QList<OAISasPortalDpaMoveList> m_move_list;
    bool m_move_list_isSet;
    bool m_move_list_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QList<QString> m_suspension_reason;
    bool m_suspension_reason_isSet;
    bool m_suspension_reason_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISasPortalDeviceGrant)

#endif // OAISasPortalDeviceGrant_H
