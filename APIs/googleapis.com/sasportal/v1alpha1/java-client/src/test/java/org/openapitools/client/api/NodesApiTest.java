/*
 * SAS Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.SasPortalCreateSignedDeviceRequest;
import org.openapitools.client.model.SasPortalDeployment;
import org.openapitools.client.model.SasPortalDevice;
import org.openapitools.client.model.SasPortalListDeploymentsResponse;
import org.openapitools.client.model.SasPortalListDevicesResponse;
import org.openapitools.client.model.SasPortalListNodesResponse;
import org.openapitools.client.model.SasPortalMoveNodeRequest;
import org.openapitools.client.model.SasPortalNode;
import org.openapitools.client.model.SasPortalOperation;
import org.openapitools.client.model.SasPortalSignDeviceRequest;
import org.openapitools.client.model.SasPortalUpdateSignedDeviceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NodesApi
 */
@Disabled
public class NodesApiTest {

    private final NodesApi api = new NodesApi();

    /**
     * Signs a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sasportalNodesDevicesSignDeviceTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SasPortalSignDeviceRequest sasPortalSignDeviceRequest = null;
        Object response = api.sasportalNodesDevicesSignDevice(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sasPortalSignDeviceRequest);
        // TODO: test validations
    }

    /**
     * Updates a signed device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sasportalNodesDevicesUpdateSignedTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SasPortalUpdateSignedDeviceRequest sasPortalUpdateSignedDeviceRequest = null;
        SasPortalDevice response = api.sasportalNodesDevicesUpdateSigned(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sasPortalUpdateSignedDeviceRequest);
        // TODO: test validations
    }

    /**
     * Deletes a node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sasportalNodesNodesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.sasportalNodesNodesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a new deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sasportalNodesNodesDeploymentsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SasPortalDeployment sasPortalDeployment = null;
        SasPortalDeployment response = api.sasportalNodesNodesDeploymentsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sasPortalDeployment);
        // TODO: test validations
    }

    /**
     * Lists deployments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sasportalNodesNodesDeploymentsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        SasPortalListDeploymentsResponse response = api.sasportalNodesNodesDeploymentsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a device under a node or customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sasportalNodesNodesDevicesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SasPortalDevice sasPortalDevice = null;
        SasPortalDevice response = api.sasportalNodesNodesDevicesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sasPortalDevice);
        // TODO: test validations
    }

    /**
     * Creates a signed device under a node or customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sasportalNodesNodesDevicesCreateSignedTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SasPortalCreateSignedDeviceRequest sasPortalCreateSignedDeviceRequest = null;
        SasPortalDevice response = api.sasportalNodesNodesDevicesCreateSigned(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sasPortalCreateSignedDeviceRequest);
        // TODO: test validations
    }

    /**
     * Lists devices under a node or customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sasportalNodesNodesDevicesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        SasPortalListDevicesResponse response = api.sasportalNodesNodesDevicesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Returns a requested node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sasportalNodesNodesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SasPortalNode response = api.sasportalNodesNodesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Moves a node under another node or customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sasportalNodesNodesMoveTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SasPortalMoveNodeRequest sasPortalMoveNodeRequest = null;
        SasPortalOperation response = api.sasportalNodesNodesMove(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sasPortalMoveNodeRequest);
        // TODO: test validations
    }

    /**
     * Creates a new node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sasportalNodesNodesNodesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SasPortalNode sasPortalNode = null;
        SasPortalNode response = api.sasportalNodesNodesNodesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sasPortalNode);
        // TODO: test validations
    }

    /**
     * Lists nodes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sasportalNodesNodesNodesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        SasPortalListNodesResponse response = api.sasportalNodesNodesNodesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates an existing node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sasportalNodesNodesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        SasPortalNode sasPortalNode = null;
        SasPortalNode response = api.sasportalNodesNodesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, sasPortalNode);
        // TODO: test validations
    }

}
