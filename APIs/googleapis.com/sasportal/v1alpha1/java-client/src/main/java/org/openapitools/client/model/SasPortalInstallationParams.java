/*
 * SAS Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the device installation parameters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:46.807330-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SasPortalInstallationParams {
  public static final String SERIALIZED_NAME_ANTENNA_AZIMUTH = "antennaAzimuth";
  @SerializedName(SERIALIZED_NAME_ANTENNA_AZIMUTH)
  private Integer antennaAzimuth;

  public static final String SERIALIZED_NAME_ANTENNA_BEAMWIDTH = "antennaBeamwidth";
  @SerializedName(SERIALIZED_NAME_ANTENNA_BEAMWIDTH)
  private Integer antennaBeamwidth;

  public static final String SERIALIZED_NAME_ANTENNA_DOWNTILT = "antennaDowntilt";
  @SerializedName(SERIALIZED_NAME_ANTENNA_DOWNTILT)
  private Integer antennaDowntilt;

  public static final String SERIALIZED_NAME_ANTENNA_GAIN = "antennaGain";
  @SerializedName(SERIALIZED_NAME_ANTENNA_GAIN)
  private Integer antennaGain;

  public static final String SERIALIZED_NAME_ANTENNA_MODEL = "antennaModel";
  @SerializedName(SERIALIZED_NAME_ANTENNA_MODEL)
  private String antennaModel;

  public static final String SERIALIZED_NAME_CPE_CBSD_INDICATION = "cpeCbsdIndication";
  @SerializedName(SERIALIZED_NAME_CPE_CBSD_INDICATION)
  private Boolean cpeCbsdIndication;

  public static final String SERIALIZED_NAME_EIRP_CAPABILITY = "eirpCapability";
  @SerializedName(SERIALIZED_NAME_EIRP_CAPABILITY)
  private Integer eirpCapability;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Double height;

  /**
   * Specifies how the height is measured.
   */
  @JsonAdapter(HeightTypeEnum.Adapter.class)
  public enum HeightTypeEnum {
    UNSPECIFIED("HEIGHT_TYPE_UNSPECIFIED"),
    
    AGL("HEIGHT_TYPE_AGL"),
    
    AMSL("HEIGHT_TYPE_AMSL");

    private String value;

    HeightTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HeightTypeEnum fromValue(String value) {
      for (HeightTypeEnum b : HeightTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HeightTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HeightTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HeightTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HeightTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HeightTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEIGHT_TYPE = "heightType";
  @SerializedName(SERIALIZED_NAME_HEIGHT_TYPE)
  private HeightTypeEnum heightType;

  public static final String SERIALIZED_NAME_HORIZONTAL_ACCURACY = "horizontalAccuracy";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_ACCURACY)
  private Double horizontalAccuracy;

  public static final String SERIALIZED_NAME_INDOOR_DEPLOYMENT = "indoorDeployment";
  @SerializedName(SERIALIZED_NAME_INDOOR_DEPLOYMENT)
  private Boolean indoorDeployment;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_VERTICAL_ACCURACY = "verticalAccuracy";
  @SerializedName(SERIALIZED_NAME_VERTICAL_ACCURACY)
  private Double verticalAccuracy;

  public SasPortalInstallationParams() {
  }

  public SasPortalInstallationParams antennaAzimuth(Integer antennaAzimuth) {
    this.antennaAzimuth = antennaAzimuth;
    return this;
  }

  /**
   * Boresight direction of the horizontal plane of the antenna in degrees with respect to true north. The value of this parameter is an integer with a value between 0 and 359 inclusive. A value of 0 degrees means true north; a value of 90 degrees means east. This parameter is optional for Category A devices and conditional for Category B devices.
   * @return antennaAzimuth
   */
  @javax.annotation.Nullable
  public Integer getAntennaAzimuth() {
    return antennaAzimuth;
  }

  public void setAntennaAzimuth(Integer antennaAzimuth) {
    this.antennaAzimuth = antennaAzimuth;
  }


  public SasPortalInstallationParams antennaBeamwidth(Integer antennaBeamwidth) {
    this.antennaBeamwidth = antennaBeamwidth;
    return this;
  }

  /**
   * 3-dB antenna beamwidth of the antenna in the horizontal-plane in degrees. This parameter is an unsigned integer having a value between 0 and 360 (degrees) inclusive; it is optional for Category A devices and conditional for Category B devices.
   * @return antennaBeamwidth
   */
  @javax.annotation.Nullable
  public Integer getAntennaBeamwidth() {
    return antennaBeamwidth;
  }

  public void setAntennaBeamwidth(Integer antennaBeamwidth) {
    this.antennaBeamwidth = antennaBeamwidth;
  }


  public SasPortalInstallationParams antennaDowntilt(Integer antennaDowntilt) {
    this.antennaDowntilt = antennaDowntilt;
    return this;
  }

  /**
   * Antenna downtilt in degrees and is an integer with a value between -90 and +90 inclusive; a negative value means the antenna is tilted up (above horizontal). This parameter is optional for Category A devices and conditional for Category B devices.
   * @return antennaDowntilt
   */
  @javax.annotation.Nullable
  public Integer getAntennaDowntilt() {
    return antennaDowntilt;
  }

  public void setAntennaDowntilt(Integer antennaDowntilt) {
    this.antennaDowntilt = antennaDowntilt;
  }


  public SasPortalInstallationParams antennaGain(Integer antennaGain) {
    this.antennaGain = antennaGain;
    return this;
  }

  /**
   * Peak antenna gain in dBi. This parameter is an integer with a value between -127 and +128 (dBi) inclusive.
   * @return antennaGain
   */
  @javax.annotation.Nullable
  public Integer getAntennaGain() {
    return antennaGain;
  }

  public void setAntennaGain(Integer antennaGain) {
    this.antennaGain = antennaGain;
  }


  public SasPortalInstallationParams antennaModel(String antennaModel) {
    this.antennaModel = antennaModel;
    return this;
  }

  /**
   * If an external antenna is used, the antenna model is optionally provided in this field. The string has a maximum length of 128 octets.
   * @return antennaModel
   */
  @javax.annotation.Nullable
  public String getAntennaModel() {
    return antennaModel;
  }

  public void setAntennaModel(String antennaModel) {
    this.antennaModel = antennaModel;
  }


  public SasPortalInstallationParams cpeCbsdIndication(Boolean cpeCbsdIndication) {
    this.cpeCbsdIndication = cpeCbsdIndication;
    return this;
  }

  /**
   * If present, this parameter specifies whether the CBSD is a CPE-CBSD or not.
   * @return cpeCbsdIndication
   */
  @javax.annotation.Nullable
  public Boolean getCpeCbsdIndication() {
    return cpeCbsdIndication;
  }

  public void setCpeCbsdIndication(Boolean cpeCbsdIndication) {
    this.cpeCbsdIndication = cpeCbsdIndication;
  }


  public SasPortalInstallationParams eirpCapability(Integer eirpCapability) {
    this.eirpCapability = eirpCapability;
    return this;
  }

  /**
   * This parameter is the maximum device EIRP in units of dBm/10MHz and is an integer with a value between -127 and +47 (dBm/10 MHz) inclusive. If not included, SAS interprets it as maximum allowable EIRP in units of dBm/10MHz for device category.
   * @return eirpCapability
   */
  @javax.annotation.Nullable
  public Integer getEirpCapability() {
    return eirpCapability;
  }

  public void setEirpCapability(Integer eirpCapability) {
    this.eirpCapability = eirpCapability;
  }


  public SasPortalInstallationParams height(Double height) {
    this.height = height;
    return this;
  }

  /**
   * Device antenna height in meters. When the &#x60;heightType&#x60; parameter value is \&quot;AGL\&quot;, the antenna height should be given relative to ground level. When the &#x60;heightType&#x60; parameter value is \&quot;AMSL\&quot;, it is given with respect to WGS84 datum.
   * @return height
   */
  @javax.annotation.Nullable
  public Double getHeight() {
    return height;
  }

  public void setHeight(Double height) {
    this.height = height;
  }


  public SasPortalInstallationParams heightType(HeightTypeEnum heightType) {
    this.heightType = heightType;
    return this;
  }

  /**
   * Specifies how the height is measured.
   * @return heightType
   */
  @javax.annotation.Nullable
  public HeightTypeEnum getHeightType() {
    return heightType;
  }

  public void setHeightType(HeightTypeEnum heightType) {
    this.heightType = heightType;
  }


  public SasPortalInstallationParams horizontalAccuracy(Double horizontalAccuracy) {
    this.horizontalAccuracy = horizontalAccuracy;
    return this;
  }

  /**
   * A positive number in meters to indicate accuracy of the device antenna horizontal location. This optional parameter should only be present if its value is less than the FCC requirement of 50 meters.
   * @return horizontalAccuracy
   */
  @javax.annotation.Nullable
  public Double getHorizontalAccuracy() {
    return horizontalAccuracy;
  }

  public void setHorizontalAccuracy(Double horizontalAccuracy) {
    this.horizontalAccuracy = horizontalAccuracy;
  }


  public SasPortalInstallationParams indoorDeployment(Boolean indoorDeployment) {
    this.indoorDeployment = indoorDeployment;
    return this;
  }

  /**
   * Whether the device antenna is indoor or not. &#x60;true&#x60;: indoor. &#x60;false&#x60;: outdoor.
   * @return indoorDeployment
   */
  @javax.annotation.Nullable
  public Boolean getIndoorDeployment() {
    return indoorDeployment;
  }

  public void setIndoorDeployment(Boolean indoorDeployment) {
    this.indoorDeployment = indoorDeployment;
  }


  public SasPortalInstallationParams latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Latitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed range is from -90.000000 to +90.000000. Positive values represent latitudes north of the equator; negative values south of the equator.
   * @return latitude
   */
  @javax.annotation.Nullable
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public SasPortalInstallationParams longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Longitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed range is from -180.000000 to +180.000000. Positive values represent longitudes east of the prime meridian; negative values west of the prime meridian.
   * @return longitude
   */
  @javax.annotation.Nullable
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public SasPortalInstallationParams verticalAccuracy(Double verticalAccuracy) {
    this.verticalAccuracy = verticalAccuracy;
    return this;
  }

  /**
   * A positive number in meters to indicate accuracy of the device antenna vertical location. This optional parameter should only be present if its value is less than the FCC requirement of 3 meters.
   * @return verticalAccuracy
   */
  @javax.annotation.Nullable
  public Double getVerticalAccuracy() {
    return verticalAccuracy;
  }

  public void setVerticalAccuracy(Double verticalAccuracy) {
    this.verticalAccuracy = verticalAccuracy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SasPortalInstallationParams sasPortalInstallationParams = (SasPortalInstallationParams) o;
    return Objects.equals(this.antennaAzimuth, sasPortalInstallationParams.antennaAzimuth) &&
        Objects.equals(this.antennaBeamwidth, sasPortalInstallationParams.antennaBeamwidth) &&
        Objects.equals(this.antennaDowntilt, sasPortalInstallationParams.antennaDowntilt) &&
        Objects.equals(this.antennaGain, sasPortalInstallationParams.antennaGain) &&
        Objects.equals(this.antennaModel, sasPortalInstallationParams.antennaModel) &&
        Objects.equals(this.cpeCbsdIndication, sasPortalInstallationParams.cpeCbsdIndication) &&
        Objects.equals(this.eirpCapability, sasPortalInstallationParams.eirpCapability) &&
        Objects.equals(this.height, sasPortalInstallationParams.height) &&
        Objects.equals(this.heightType, sasPortalInstallationParams.heightType) &&
        Objects.equals(this.horizontalAccuracy, sasPortalInstallationParams.horizontalAccuracy) &&
        Objects.equals(this.indoorDeployment, sasPortalInstallationParams.indoorDeployment) &&
        Objects.equals(this.latitude, sasPortalInstallationParams.latitude) &&
        Objects.equals(this.longitude, sasPortalInstallationParams.longitude) &&
        Objects.equals(this.verticalAccuracy, sasPortalInstallationParams.verticalAccuracy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(antennaAzimuth, antennaBeamwidth, antennaDowntilt, antennaGain, antennaModel, cpeCbsdIndication, eirpCapability, height, heightType, horizontalAccuracy, indoorDeployment, latitude, longitude, verticalAccuracy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SasPortalInstallationParams {\n");
    sb.append("    antennaAzimuth: ").append(toIndentedString(antennaAzimuth)).append("\n");
    sb.append("    antennaBeamwidth: ").append(toIndentedString(antennaBeamwidth)).append("\n");
    sb.append("    antennaDowntilt: ").append(toIndentedString(antennaDowntilt)).append("\n");
    sb.append("    antennaGain: ").append(toIndentedString(antennaGain)).append("\n");
    sb.append("    antennaModel: ").append(toIndentedString(antennaModel)).append("\n");
    sb.append("    cpeCbsdIndication: ").append(toIndentedString(cpeCbsdIndication)).append("\n");
    sb.append("    eirpCapability: ").append(toIndentedString(eirpCapability)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    heightType: ").append(toIndentedString(heightType)).append("\n");
    sb.append("    horizontalAccuracy: ").append(toIndentedString(horizontalAccuracy)).append("\n");
    sb.append("    indoorDeployment: ").append(toIndentedString(indoorDeployment)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    verticalAccuracy: ").append(toIndentedString(verticalAccuracy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("antennaAzimuth");
    openapiFields.add("antennaBeamwidth");
    openapiFields.add("antennaDowntilt");
    openapiFields.add("antennaGain");
    openapiFields.add("antennaModel");
    openapiFields.add("cpeCbsdIndication");
    openapiFields.add("eirpCapability");
    openapiFields.add("height");
    openapiFields.add("heightType");
    openapiFields.add("horizontalAccuracy");
    openapiFields.add("indoorDeployment");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("verticalAccuracy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SasPortalInstallationParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SasPortalInstallationParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SasPortalInstallationParams is not found in the empty JSON string", SasPortalInstallationParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SasPortalInstallationParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SasPortalInstallationParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("antennaModel") != null && !jsonObj.get("antennaModel").isJsonNull()) && !jsonObj.get("antennaModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `antennaModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("antennaModel").toString()));
      }
      if ((jsonObj.get("heightType") != null && !jsonObj.get("heightType").isJsonNull()) && !jsonObj.get("heightType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `heightType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("heightType").toString()));
      }
      // validate the optional field `heightType`
      if (jsonObj.get("heightType") != null && !jsonObj.get("heightType").isJsonNull()) {
        HeightTypeEnum.validateJsonElement(jsonObj.get("heightType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SasPortalInstallationParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SasPortalInstallationParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SasPortalInstallationParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SasPortalInstallationParams.class));

       return (TypeAdapter<T>) new TypeAdapter<SasPortalInstallationParams>() {
           @Override
           public void write(JsonWriter out, SasPortalInstallationParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SasPortalInstallationParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SasPortalInstallationParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SasPortalInstallationParams
   * @throws IOException if the JSON string is invalid with respect to SasPortalInstallationParams
   */
  public static SasPortalInstallationParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SasPortalInstallationParams.class);
  }

  /**
   * Convert an instance of SasPortalInstallationParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

