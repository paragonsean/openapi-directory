/*
 * SAS Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SasPortalDpaMoveList;
import org.openapitools.client.model.SasPortalFrequencyRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Device grant. It is an authorization provided by the Spectrum Access System to a device to transmit using specified operating parameters after a successful heartbeat by the device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:46.807330-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SasPortalDeviceGrant {
  /**
   * Type of channel used.
   */
  @JsonAdapter(ChannelTypeEnum.Adapter.class)
  public enum ChannelTypeEnum {
    UNSPECIFIED("CHANNEL_TYPE_UNSPECIFIED"),
    
    GAA("CHANNEL_TYPE_GAA"),
    
    PAL("CHANNEL_TYPE_PAL");

    private String value;

    ChannelTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelTypeEnum fromValue(String value) {
      for (ChannelTypeEnum b : ChannelTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChannelTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChannelTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChannelTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANNEL_TYPE = "channelType";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TYPE)
  private ChannelTypeEnum channelType;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_FREQUENCY_RANGE = "frequencyRange";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_RANGE)
  private SasPortalFrequencyRange frequencyRange;

  public static final String SERIALIZED_NAME_GRANT_ID = "grantId";
  @SerializedName(SERIALIZED_NAME_GRANT_ID)
  private String grantId;

  public static final String SERIALIZED_NAME_LAST_HEARTBEAT_TRANSMIT_EXPIRE_TIME = "lastHeartbeatTransmitExpireTime";
  @SerializedName(SERIALIZED_NAME_LAST_HEARTBEAT_TRANSMIT_EXPIRE_TIME)
  private String lastHeartbeatTransmitExpireTime;

  public static final String SERIALIZED_NAME_MAX_EIRP = "maxEirp";
  @SerializedName(SERIALIZED_NAME_MAX_EIRP)
  private Double maxEirp;

  public static final String SERIALIZED_NAME_MOVE_LIST = "moveList";
  @SerializedName(SERIALIZED_NAME_MOVE_LIST)
  private List<SasPortalDpaMoveList> moveList = new ArrayList<>();

  /**
   * State of the grant.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UNSPECIFIED("GRANT_STATE_UNSPECIFIED"),
    
    GRANTED("GRANT_STATE_GRANTED"),
    
    TERMINATED("GRANT_STATE_TERMINATED"),
    
    SUSPENDED("GRANT_STATE_SUSPENDED"),
    
    AUTHORIZED("GRANT_STATE_AUTHORIZED"),
    
    EXPIRED("GRANT_STATE_EXPIRED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SUSPENSION_REASON = "suspensionReason";
  @SerializedName(SERIALIZED_NAME_SUSPENSION_REASON)
  private List<String> suspensionReason = new ArrayList<>();

  public SasPortalDeviceGrant() {
  }

  public SasPortalDeviceGrant channelType(ChannelTypeEnum channelType) {
    this.channelType = channelType;
    return this;
  }

  /**
   * Type of channel used.
   * @return channelType
   */
  @javax.annotation.Nullable
  public ChannelTypeEnum getChannelType() {
    return channelType;
  }

  public void setChannelType(ChannelTypeEnum channelType) {
    this.channelType = channelType;
  }


  public SasPortalDeviceGrant expireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * The expiration time of the grant.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(String expireTime) {
    this.expireTime = expireTime;
  }


  public SasPortalDeviceGrant frequencyRange(SasPortalFrequencyRange frequencyRange) {
    this.frequencyRange = frequencyRange;
    return this;
  }

  /**
   * Get frequencyRange
   * @return frequencyRange
   */
  @javax.annotation.Nullable
  public SasPortalFrequencyRange getFrequencyRange() {
    return frequencyRange;
  }

  public void setFrequencyRange(SasPortalFrequencyRange frequencyRange) {
    this.frequencyRange = frequencyRange;
  }


  public SasPortalDeviceGrant grantId(String grantId) {
    this.grantId = grantId;
    return this;
  }

  /**
   * Grant Id.
   * @return grantId
   */
  @javax.annotation.Nullable
  public String getGrantId() {
    return grantId;
  }

  public void setGrantId(String grantId) {
    this.grantId = grantId;
  }


  public SasPortalDeviceGrant lastHeartbeatTransmitExpireTime(String lastHeartbeatTransmitExpireTime) {
    this.lastHeartbeatTransmitExpireTime = lastHeartbeatTransmitExpireTime;
    return this;
  }

  /**
   * The transmit expiration time of the last heartbeat.
   * @return lastHeartbeatTransmitExpireTime
   */
  @javax.annotation.Nullable
  public String getLastHeartbeatTransmitExpireTime() {
    return lastHeartbeatTransmitExpireTime;
  }

  public void setLastHeartbeatTransmitExpireTime(String lastHeartbeatTransmitExpireTime) {
    this.lastHeartbeatTransmitExpireTime = lastHeartbeatTransmitExpireTime;
  }


  public SasPortalDeviceGrant maxEirp(Double maxEirp) {
    this.maxEirp = maxEirp;
    return this;
  }

  /**
   * Maximum Equivalent Isotropically Radiated Power (EIRP) permitted by the grant. The maximum EIRP is in units of dBm/MHz. The value of &#x60;maxEirp&#x60; represents the average (RMS) EIRP that would be measured by the procedure defined in FCC part 96.41(e)(3).
   * @return maxEirp
   */
  @javax.annotation.Nullable
  public Double getMaxEirp() {
    return maxEirp;
  }

  public void setMaxEirp(Double maxEirp) {
    this.maxEirp = maxEirp;
  }


  public SasPortalDeviceGrant moveList(List<SasPortalDpaMoveList> moveList) {
    this.moveList = moveList;
    return this;
  }

  public SasPortalDeviceGrant addMoveListItem(SasPortalDpaMoveList moveListItem) {
    if (this.moveList == null) {
      this.moveList = new ArrayList<>();
    }
    this.moveList.add(moveListItem);
    return this;
  }

  /**
   * The DPA move lists on which this grant appears.
   * @return moveList
   */
  @javax.annotation.Nullable
  public List<SasPortalDpaMoveList> getMoveList() {
    return moveList;
  }

  public void setMoveList(List<SasPortalDpaMoveList> moveList) {
    this.moveList = moveList;
  }


  public SasPortalDeviceGrant state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of the grant.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public SasPortalDeviceGrant suspensionReason(List<String> suspensionReason) {
    this.suspensionReason = suspensionReason;
    return this;
  }

  public SasPortalDeviceGrant addSuspensionReasonItem(String suspensionReasonItem) {
    if (this.suspensionReason == null) {
      this.suspensionReason = new ArrayList<>();
    }
    this.suspensionReason.add(suspensionReasonItem);
    return this;
  }

  /**
   * If the grant is suspended, the reason(s) for suspension.
   * @return suspensionReason
   */
  @javax.annotation.Nullable
  public List<String> getSuspensionReason() {
    return suspensionReason;
  }

  public void setSuspensionReason(List<String> suspensionReason) {
    this.suspensionReason = suspensionReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SasPortalDeviceGrant sasPortalDeviceGrant = (SasPortalDeviceGrant) o;
    return Objects.equals(this.channelType, sasPortalDeviceGrant.channelType) &&
        Objects.equals(this.expireTime, sasPortalDeviceGrant.expireTime) &&
        Objects.equals(this.frequencyRange, sasPortalDeviceGrant.frequencyRange) &&
        Objects.equals(this.grantId, sasPortalDeviceGrant.grantId) &&
        Objects.equals(this.lastHeartbeatTransmitExpireTime, sasPortalDeviceGrant.lastHeartbeatTransmitExpireTime) &&
        Objects.equals(this.maxEirp, sasPortalDeviceGrant.maxEirp) &&
        Objects.equals(this.moveList, sasPortalDeviceGrant.moveList) &&
        Objects.equals(this.state, sasPortalDeviceGrant.state) &&
        Objects.equals(this.suspensionReason, sasPortalDeviceGrant.suspensionReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelType, expireTime, frequencyRange, grantId, lastHeartbeatTransmitExpireTime, maxEirp, moveList, state, suspensionReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SasPortalDeviceGrant {\n");
    sb.append("    channelType: ").append(toIndentedString(channelType)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    frequencyRange: ").append(toIndentedString(frequencyRange)).append("\n");
    sb.append("    grantId: ").append(toIndentedString(grantId)).append("\n");
    sb.append("    lastHeartbeatTransmitExpireTime: ").append(toIndentedString(lastHeartbeatTransmitExpireTime)).append("\n");
    sb.append("    maxEirp: ").append(toIndentedString(maxEirp)).append("\n");
    sb.append("    moveList: ").append(toIndentedString(moveList)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    suspensionReason: ").append(toIndentedString(suspensionReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channelType");
    openapiFields.add("expireTime");
    openapiFields.add("frequencyRange");
    openapiFields.add("grantId");
    openapiFields.add("lastHeartbeatTransmitExpireTime");
    openapiFields.add("maxEirp");
    openapiFields.add("moveList");
    openapiFields.add("state");
    openapiFields.add("suspensionReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SasPortalDeviceGrant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SasPortalDeviceGrant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SasPortalDeviceGrant is not found in the empty JSON string", SasPortalDeviceGrant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SasPortalDeviceGrant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SasPortalDeviceGrant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("channelType") != null && !jsonObj.get("channelType").isJsonNull()) && !jsonObj.get("channelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelType").toString()));
      }
      // validate the optional field `channelType`
      if (jsonObj.get("channelType") != null && !jsonObj.get("channelType").isJsonNull()) {
        ChannelTypeEnum.validateJsonElement(jsonObj.get("channelType"));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      // validate the optional field `frequencyRange`
      if (jsonObj.get("frequencyRange") != null && !jsonObj.get("frequencyRange").isJsonNull()) {
        SasPortalFrequencyRange.validateJsonElement(jsonObj.get("frequencyRange"));
      }
      if ((jsonObj.get("grantId") != null && !jsonObj.get("grantId").isJsonNull()) && !jsonObj.get("grantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grantId").toString()));
      }
      if ((jsonObj.get("lastHeartbeatTransmitExpireTime") != null && !jsonObj.get("lastHeartbeatTransmitExpireTime").isJsonNull()) && !jsonObj.get("lastHeartbeatTransmitExpireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastHeartbeatTransmitExpireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastHeartbeatTransmitExpireTime").toString()));
      }
      if (jsonObj.get("moveList") != null && !jsonObj.get("moveList").isJsonNull()) {
        JsonArray jsonArraymoveList = jsonObj.getAsJsonArray("moveList");
        if (jsonArraymoveList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("moveList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `moveList` to be an array in the JSON string but got `%s`", jsonObj.get("moveList").toString()));
          }

          // validate the optional field `moveList` (array)
          for (int i = 0; i < jsonArraymoveList.size(); i++) {
            SasPortalDpaMoveList.validateJsonElement(jsonArraymoveList.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("suspensionReason") != null && !jsonObj.get("suspensionReason").isJsonNull() && !jsonObj.get("suspensionReason").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suspensionReason` to be an array in the JSON string but got `%s`", jsonObj.get("suspensionReason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SasPortalDeviceGrant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SasPortalDeviceGrant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SasPortalDeviceGrant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SasPortalDeviceGrant.class));

       return (TypeAdapter<T>) new TypeAdapter<SasPortalDeviceGrant>() {
           @Override
           public void write(JsonWriter out, SasPortalDeviceGrant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SasPortalDeviceGrant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SasPortalDeviceGrant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SasPortalDeviceGrant
   * @throws IOException if the JSON string is invalid with respect to SasPortalDeviceGrant
   */
  public static SasPortalDeviceGrant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SasPortalDeviceGrant.class);
  }

  /**
   * Convert an instance of SasPortalDeviceGrant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

