/*
 * SAS Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SasPortalDeviceAirInterface;
import org.openapitools.client.model.SasPortalDeviceModel;
import org.openapitools.client.model.SasPortalInstallationParams;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the device configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:46.807330-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SasPortalDeviceConfig {
  public static final String SERIALIZED_NAME_AIR_INTERFACE = "airInterface";
  @SerializedName(SERIALIZED_NAME_AIR_INTERFACE)
  private SasPortalDeviceAirInterface airInterface;

  public static final String SERIALIZED_NAME_CALL_SIGN = "callSign";
  @SerializedName(SERIALIZED_NAME_CALL_SIGN)
  private String callSign;

  /**
   * FCC category of the device.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    UNSPECIFIED("DEVICE_CATEGORY_UNSPECIFIED"),
    
    A("DEVICE_CATEGORY_A"),
    
    B("DEVICE_CATEGORY_B");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_INSTALLATION_PARAMS = "installationParams";
  @SerializedName(SERIALIZED_NAME_INSTALLATION_PARAMS)
  private SasPortalInstallationParams installationParams;

  public static final String SERIALIZED_NAME_IS_SIGNED = "isSigned";
  @SerializedName(SERIALIZED_NAME_IS_SIGNED)
  private Boolean isSigned;

  /**
   * Gets or Sets measurementCapabilities
   */
  @JsonAdapter(MeasurementCapabilitiesEnum.Adapter.class)
  public enum MeasurementCapabilitiesEnum {
    UNSPECIFIED("MEASUREMENT_CAPABILITY_UNSPECIFIED"),
    
    RECEIVED_POWER_WITH_GRANT("MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITH_GRANT"),
    
    RECEIVED_POWER_WITHOUT_GRANT("MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITHOUT_GRANT");

    private String value;

    MeasurementCapabilitiesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MeasurementCapabilitiesEnum fromValue(String value) {
      for (MeasurementCapabilitiesEnum b : MeasurementCapabilitiesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MeasurementCapabilitiesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MeasurementCapabilitiesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MeasurementCapabilitiesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MeasurementCapabilitiesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MeasurementCapabilitiesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEASUREMENT_CAPABILITIES = "measurementCapabilities";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_CAPABILITIES)
  private List<MeasurementCapabilitiesEnum> measurementCapabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private SasPortalDeviceModel model;

  /**
   * State of the configuration.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DEVICE_CONFIG_STATE_UNSPECIFIED("DEVICE_CONFIG_STATE_UNSPECIFIED"),
    
    DRAFT("DRAFT"),
    
    FINAL("FINAL");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public SasPortalDeviceConfig() {
  }

  public SasPortalDeviceConfig airInterface(SasPortalDeviceAirInterface airInterface) {
    this.airInterface = airInterface;
    return this;
  }

  /**
   * Get airInterface
   * @return airInterface
   */
  @javax.annotation.Nullable
  public SasPortalDeviceAirInterface getAirInterface() {
    return airInterface;
  }

  public void setAirInterface(SasPortalDeviceAirInterface airInterface) {
    this.airInterface = airInterface;
  }


  public SasPortalDeviceConfig callSign(String callSign) {
    this.callSign = callSign;
    return this;
  }

  /**
   * The call sign of the device operator.
   * @return callSign
   */
  @javax.annotation.Nullable
  public String getCallSign() {
    return callSign;
  }

  public void setCallSign(String callSign) {
    this.callSign = callSign;
  }


  public SasPortalDeviceConfig category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * FCC category of the device.
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public SasPortalDeviceConfig installationParams(SasPortalInstallationParams installationParams) {
    this.installationParams = installationParams;
    return this;
  }

  /**
   * Get installationParams
   * @return installationParams
   */
  @javax.annotation.Nullable
  public SasPortalInstallationParams getInstallationParams() {
    return installationParams;
  }

  public void setInstallationParams(SasPortalInstallationParams installationParams) {
    this.installationParams = installationParams;
  }


  public SasPortalDeviceConfig isSigned(Boolean isSigned) {
    this.isSigned = isSigned;
    return this;
  }

  /**
   * Output only. Whether the configuration has been signed by a CPI.
   * @return isSigned
   */
  @javax.annotation.Nullable
  public Boolean getIsSigned() {
    return isSigned;
  }

  public void setIsSigned(Boolean isSigned) {
    this.isSigned = isSigned;
  }


  public SasPortalDeviceConfig measurementCapabilities(List<MeasurementCapabilitiesEnum> measurementCapabilities) {
    this.measurementCapabilities = measurementCapabilities;
    return this;
  }

  public SasPortalDeviceConfig addMeasurementCapabilitiesItem(MeasurementCapabilitiesEnum measurementCapabilitiesItem) {
    if (this.measurementCapabilities == null) {
      this.measurementCapabilities = new ArrayList<>();
    }
    this.measurementCapabilities.add(measurementCapabilitiesItem);
    return this;
  }

  /**
   * Measurement reporting capabilities of the device.
   * @return measurementCapabilities
   */
  @javax.annotation.Nullable
  public List<MeasurementCapabilitiesEnum> getMeasurementCapabilities() {
    return measurementCapabilities;
  }

  public void setMeasurementCapabilities(List<MeasurementCapabilitiesEnum> measurementCapabilities) {
    this.measurementCapabilities = measurementCapabilities;
  }


  public SasPortalDeviceConfig model(SasPortalDeviceModel model) {
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public SasPortalDeviceModel getModel() {
    return model;
  }

  public void setModel(SasPortalDeviceModel model) {
    this.model = model;
  }


  public SasPortalDeviceConfig state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of the configuration.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public SasPortalDeviceConfig updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Output only. The last time the device configuration was edited.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  public SasPortalDeviceConfig userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The identifier of a device user.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SasPortalDeviceConfig sasPortalDeviceConfig = (SasPortalDeviceConfig) o;
    return Objects.equals(this.airInterface, sasPortalDeviceConfig.airInterface) &&
        Objects.equals(this.callSign, sasPortalDeviceConfig.callSign) &&
        Objects.equals(this.category, sasPortalDeviceConfig.category) &&
        Objects.equals(this.installationParams, sasPortalDeviceConfig.installationParams) &&
        Objects.equals(this.isSigned, sasPortalDeviceConfig.isSigned) &&
        Objects.equals(this.measurementCapabilities, sasPortalDeviceConfig.measurementCapabilities) &&
        Objects.equals(this.model, sasPortalDeviceConfig.model) &&
        Objects.equals(this.state, sasPortalDeviceConfig.state) &&
        Objects.equals(this.updateTime, sasPortalDeviceConfig.updateTime) &&
        Objects.equals(this.userId, sasPortalDeviceConfig.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airInterface, callSign, category, installationParams, isSigned, measurementCapabilities, model, state, updateTime, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SasPortalDeviceConfig {\n");
    sb.append("    airInterface: ").append(toIndentedString(airInterface)).append("\n");
    sb.append("    callSign: ").append(toIndentedString(callSign)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    installationParams: ").append(toIndentedString(installationParams)).append("\n");
    sb.append("    isSigned: ").append(toIndentedString(isSigned)).append("\n");
    sb.append("    measurementCapabilities: ").append(toIndentedString(measurementCapabilities)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("airInterface");
    openapiFields.add("callSign");
    openapiFields.add("category");
    openapiFields.add("installationParams");
    openapiFields.add("isSigned");
    openapiFields.add("measurementCapabilities");
    openapiFields.add("model");
    openapiFields.add("state");
    openapiFields.add("updateTime");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SasPortalDeviceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SasPortalDeviceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SasPortalDeviceConfig is not found in the empty JSON string", SasPortalDeviceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SasPortalDeviceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SasPortalDeviceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `airInterface`
      if (jsonObj.get("airInterface") != null && !jsonObj.get("airInterface").isJsonNull()) {
        SasPortalDeviceAirInterface.validateJsonElement(jsonObj.get("airInterface"));
      }
      if ((jsonObj.get("callSign") != null && !jsonObj.get("callSign").isJsonNull()) && !jsonObj.get("callSign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callSign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callSign").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      // validate the optional field `installationParams`
      if (jsonObj.get("installationParams") != null && !jsonObj.get("installationParams").isJsonNull()) {
        SasPortalInstallationParams.validateJsonElement(jsonObj.get("installationParams"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("measurementCapabilities") != null && !jsonObj.get("measurementCapabilities").isJsonNull() && !jsonObj.get("measurementCapabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementCapabilities` to be an array in the JSON string but got `%s`", jsonObj.get("measurementCapabilities").toString()));
      }
      // validate the optional field `model`
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) {
        SasPortalDeviceModel.validateJsonElement(jsonObj.get("model"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SasPortalDeviceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SasPortalDeviceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SasPortalDeviceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SasPortalDeviceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SasPortalDeviceConfig>() {
           @Override
           public void write(JsonWriter out, SasPortalDeviceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SasPortalDeviceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SasPortalDeviceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SasPortalDeviceConfig
   * @throws IOException if the JSON string is invalid with respect to SasPortalDeviceConfig
   */
  public static SasPortalDeviceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SasPortalDeviceConfig.class);
  }

  /**
   * Convert an instance of SasPortalDeviceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

