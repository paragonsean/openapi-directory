/*
 * SAS Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the device&#39;s air interface.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:46.807330-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SasPortalDeviceAirInterface {
  /**
   * Conditional. This field specifies the radio access technology that is used for the CBSD.
   */
  @JsonAdapter(RadioTechnologyEnum.Adapter.class)
  public enum RadioTechnologyEnum {
    RADIO_TECHNOLOGY_UNSPECIFIED("RADIO_TECHNOLOGY_UNSPECIFIED"),
    
    E_UTRA("E_UTRA"),
    
    CAMBIUM_NETWORKS("CAMBIUM_NETWORKS"),
    
    FOUR_G_BBW_SAA_1("FOUR_G_BBW_SAA_1"),
    
    NR("NR"),
    
    DOODLE_CBRS("DOODLE_CBRS"),
    
    CW("CW"),
    
    REDLINE("REDLINE"),
    
    TARANA_WIRELESS("TARANA_WIRELESS");

    private String value;

    RadioTechnologyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RadioTechnologyEnum fromValue(String value) {
      for (RadioTechnologyEnum b : RadioTechnologyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RadioTechnologyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RadioTechnologyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RadioTechnologyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RadioTechnologyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RadioTechnologyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RADIO_TECHNOLOGY = "radioTechnology";
  @SerializedName(SERIALIZED_NAME_RADIO_TECHNOLOGY)
  private RadioTechnologyEnum radioTechnology;

  public static final String SERIALIZED_NAME_SUPPORTED_SPEC = "supportedSpec";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_SPEC)
  private String supportedSpec;

  public SasPortalDeviceAirInterface() {
  }

  public SasPortalDeviceAirInterface radioTechnology(RadioTechnologyEnum radioTechnology) {
    this.radioTechnology = radioTechnology;
    return this;
  }

  /**
   * Conditional. This field specifies the radio access technology that is used for the CBSD.
   * @return radioTechnology
   */
  @javax.annotation.Nullable
  public RadioTechnologyEnum getRadioTechnology() {
    return radioTechnology;
  }

  public void setRadioTechnology(RadioTechnologyEnum radioTechnology) {
    this.radioTechnology = radioTechnology;
  }


  public SasPortalDeviceAirInterface supportedSpec(String supportedSpec) {
    this.supportedSpec = supportedSpec;
    return this;
  }

  /**
   * Optional. This field is related to the &#x60;radioTechnology&#x60; and provides the air interface specification that the CBSD is compliant with at the time of registration.
   * @return supportedSpec
   */
  @javax.annotation.Nullable
  public String getSupportedSpec() {
    return supportedSpec;
  }

  public void setSupportedSpec(String supportedSpec) {
    this.supportedSpec = supportedSpec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SasPortalDeviceAirInterface sasPortalDeviceAirInterface = (SasPortalDeviceAirInterface) o;
    return Objects.equals(this.radioTechnology, sasPortalDeviceAirInterface.radioTechnology) &&
        Objects.equals(this.supportedSpec, sasPortalDeviceAirInterface.supportedSpec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(radioTechnology, supportedSpec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SasPortalDeviceAirInterface {\n");
    sb.append("    radioTechnology: ").append(toIndentedString(radioTechnology)).append("\n");
    sb.append("    supportedSpec: ").append(toIndentedString(supportedSpec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("radioTechnology");
    openapiFields.add("supportedSpec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SasPortalDeviceAirInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SasPortalDeviceAirInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SasPortalDeviceAirInterface is not found in the empty JSON string", SasPortalDeviceAirInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SasPortalDeviceAirInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SasPortalDeviceAirInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("radioTechnology") != null && !jsonObj.get("radioTechnology").isJsonNull()) && !jsonObj.get("radioTechnology").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radioTechnology` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radioTechnology").toString()));
      }
      // validate the optional field `radioTechnology`
      if (jsonObj.get("radioTechnology") != null && !jsonObj.get("radioTechnology").isJsonNull()) {
        RadioTechnologyEnum.validateJsonElement(jsonObj.get("radioTechnology"));
      }
      if ((jsonObj.get("supportedSpec") != null && !jsonObj.get("supportedSpec").isJsonNull()) && !jsonObj.get("supportedSpec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedSpec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportedSpec").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SasPortalDeviceAirInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SasPortalDeviceAirInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SasPortalDeviceAirInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SasPortalDeviceAirInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<SasPortalDeviceAirInterface>() {
           @Override
           public void write(JsonWriter out, SasPortalDeviceAirInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SasPortalDeviceAirInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SasPortalDeviceAirInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SasPortalDeviceAirInterface
   * @throws IOException if the JSON string is invalid with respect to SasPortalDeviceAirInterface
   */
  public static SasPortalDeviceAirInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SasPortalDeviceAirInterface.class);
  }

  /**
   * Convert an instance of SasPortalDeviceAirInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

