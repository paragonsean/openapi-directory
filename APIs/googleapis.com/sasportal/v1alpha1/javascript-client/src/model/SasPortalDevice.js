/**
 * SAS Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SasPortalChannelWithScore from './SasPortalChannelWithScore';
import SasPortalDeviceConfig from './SasPortalDeviceConfig';
import SasPortalDeviceGrant from './SasPortalDeviceGrant';
import SasPortalDeviceMetadata from './SasPortalDeviceMetadata';
import SasPortalFrequencyRange from './SasPortalFrequencyRange';

/**
 * The SasPortalDevice model module.
 * @module model/SasPortalDevice
 * @version v1alpha1
 */
class SasPortalDevice {
    /**
     * Constructs a new <code>SasPortalDevice</code>.
     * @alias module:model/SasPortalDevice
     */
    constructor() { 
        
        SasPortalDevice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SasPortalDevice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SasPortalDevice} obj Optional instance to populate.
     * @return {module:model/SasPortalDevice} The populated <code>SasPortalDevice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SasPortalDevice();

            if (data.hasOwnProperty('activeConfig')) {
                obj['activeConfig'] = SasPortalDeviceConfig.constructFromObject(data['activeConfig']);
            }
            if (data.hasOwnProperty('currentChannels')) {
                obj['currentChannels'] = ApiClient.convertToType(data['currentChannels'], [SasPortalChannelWithScore]);
            }
            if (data.hasOwnProperty('deviceMetadata')) {
                obj['deviceMetadata'] = SasPortalDeviceMetadata.constructFromObject(data['deviceMetadata']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('fccId')) {
                obj['fccId'] = ApiClient.convertToType(data['fccId'], 'String');
            }
            if (data.hasOwnProperty('grantRangeAllowlists')) {
                obj['grantRangeAllowlists'] = ApiClient.convertToType(data['grantRangeAllowlists'], [SasPortalFrequencyRange]);
            }
            if (data.hasOwnProperty('grants')) {
                obj['grants'] = ApiClient.convertToType(data['grants'], [SasPortalDeviceGrant]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('preloadedConfig')) {
                obj['preloadedConfig'] = SasPortalDeviceConfig.constructFromObject(data['preloadedConfig']);
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SasPortalDevice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SasPortalDevice</code>.
     */
    static validateJSON(data) {
        // validate the optional field `activeConfig`
        if (data['activeConfig']) { // data not null
          SasPortalDeviceConfig.validateJSON(data['activeConfig']);
        }
        if (data['currentChannels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['currentChannels'])) {
                throw new Error("Expected the field `currentChannels` to be an array in the JSON data but got " + data['currentChannels']);
            }
            // validate the optional field `currentChannels` (array)
            for (const item of data['currentChannels']) {
                SasPortalChannelWithScore.validateJSON(item);
            };
        }
        // validate the optional field `deviceMetadata`
        if (data['deviceMetadata']) { // data not null
          SasPortalDeviceMetadata.validateJSON(data['deviceMetadata']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['fccId'] && !(typeof data['fccId'] === 'string' || data['fccId'] instanceof String)) {
            throw new Error("Expected the field `fccId` to be a primitive type in the JSON string but got " + data['fccId']);
        }
        if (data['grantRangeAllowlists']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['grantRangeAllowlists'])) {
                throw new Error("Expected the field `grantRangeAllowlists` to be an array in the JSON data but got " + data['grantRangeAllowlists']);
            }
            // validate the optional field `grantRangeAllowlists` (array)
            for (const item of data['grantRangeAllowlists']) {
                SasPortalFrequencyRange.validateJSON(item);
            };
        }
        if (data['grants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['grants'])) {
                throw new Error("Expected the field `grants` to be an array in the JSON data but got " + data['grants']);
            }
            // validate the optional field `grants` (array)
            for (const item of data['grants']) {
                SasPortalDeviceGrant.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `preloadedConfig`
        if (data['preloadedConfig']) { // data not null
          SasPortalDeviceConfig.validateJSON(data['preloadedConfig']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/SasPortalDeviceConfig} activeConfig
 */
SasPortalDevice.prototype['activeConfig'] = undefined;

/**
 * Output only. Current channels with scores.
 * @member {Array.<module:model/SasPortalChannelWithScore>} currentChannels
 */
SasPortalDevice.prototype['currentChannels'] = undefined;

/**
 * @member {module:model/SasPortalDeviceMetadata} deviceMetadata
 */
SasPortalDevice.prototype['deviceMetadata'] = undefined;

/**
 * Device display name.
 * @member {String} displayName
 */
SasPortalDevice.prototype['displayName'] = undefined;

/**
 * The FCC identifier of the device. Refer to https://www.fcc.gov/oet/ea/fccid for FccID format. Accept underscores and periods because some test-SAS customers use them.
 * @member {String} fccId
 */
SasPortalDevice.prototype['fccId'] = undefined;

/**
 * Only ranges that are within the allowlists are available for new grants.
 * @member {Array.<module:model/SasPortalFrequencyRange>} grantRangeAllowlists
 */
SasPortalDevice.prototype['grantRangeAllowlists'] = undefined;

/**
 * Output only. Grants held by the device.
 * @member {Array.<module:model/SasPortalDeviceGrant>} grants
 */
SasPortalDevice.prototype['grants'] = undefined;

/**
 * Output only. The resource path name.
 * @member {String} name
 */
SasPortalDevice.prototype['name'] = undefined;

/**
 * @member {module:model/SasPortalDeviceConfig} preloadedConfig
 */
SasPortalDevice.prototype['preloadedConfig'] = undefined;

/**
 * A serial number assigned to the device by the device manufacturer.
 * @member {String} serialNumber
 */
SasPortalDevice.prototype['serialNumber'] = undefined;

/**
 * Output only. Device state.
 * @member {module:model/SasPortalDevice.StateEnum} state
 */
SasPortalDevice.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
SasPortalDevice['StateEnum'] = {

    /**
     * value: "DEVICE_STATE_UNSPECIFIED"
     * @const
     */
    "DEVICE_STATE_UNSPECIFIED": "DEVICE_STATE_UNSPECIFIED",

    /**
     * value: "RESERVED"
     * @const
     */
    "RESERVED": "RESERVED",

    /**
     * value: "REGISTERED"
     * @const
     */
    "REGISTERED": "REGISTERED",

    /**
     * value: "DEREGISTERED"
     * @const
     */
    "DEREGISTERED": "DEREGISTERED"
};



export default SasPortalDevice;

