/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest() {
    this->initializeModel();
}

OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::~OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest() {}

void OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::initializeModel() {

    m_entity_filter_isSet = false;
    m_entity_filter_isValid = false;

    m_input_url_isSet = false;
    m_input_url_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;
}

void OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::fromJsonObject(QJsonObject json) {

    m_entity_filter_isValid = ::OpenAPI::fromJsonValue(m_entity_filter, json[QString("entityFilter")]);
    m_entity_filter_isSet = !json[QString("entityFilter")].isNull() && m_entity_filter_isValid;

    m_input_url_isValid = ::OpenAPI::fromJsonValue(m_input_url, json[QString("inputUrl")]);
    m_input_url_isSet = !json[QString("inputUrl")].isNull() && m_input_url_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;
}

QString OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_filter.isSet()) {
        obj.insert(QString("entityFilter"), ::OpenAPI::toJsonValue(m_entity_filter));
    }
    if (m_input_url_isSet) {
        obj.insert(QString("inputUrl"), ::OpenAPI::toJsonValue(m_input_url));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    return obj;
}

OAIGoogleDatastoreAdminV1beta1EntityFilter OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::getEntityFilter() const {
    return m_entity_filter;
}
void OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::setEntityFilter(const OAIGoogleDatastoreAdminV1beta1EntityFilter &entity_filter) {
    m_entity_filter = entity_filter;
    m_entity_filter_isSet = true;
}

bool OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::is_entity_filter_Set() const{
    return m_entity_filter_isSet;
}

bool OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::is_entity_filter_Valid() const{
    return m_entity_filter_isValid;
}

QString OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::getInputUrl() const {
    return m_input_url;
}
void OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::setInputUrl(const QString &input_url) {
    m_input_url = input_url;
    m_input_url_isSet = true;
}

bool OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::is_input_url_Set() const{
    return m_input_url_isSet;
}

bool OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::is_input_url_Valid() const{
    return m_input_url_isValid;
}

QMap<QString, QString> OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::getLabels() const {
    return m_labels;
}
void OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::is_labels_Valid() const{
    return m_labels_isValid;
}

bool OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDatastoreAdminV1beta1ImportEntitiesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
