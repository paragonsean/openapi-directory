/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDatastoreAdminV1beta1EntityFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDatastoreAdminV1beta1EntityFilter::OAIGoogleDatastoreAdminV1beta1EntityFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDatastoreAdminV1beta1EntityFilter::OAIGoogleDatastoreAdminV1beta1EntityFilter() {
    this->initializeModel();
}

OAIGoogleDatastoreAdminV1beta1EntityFilter::~OAIGoogleDatastoreAdminV1beta1EntityFilter() {}

void OAIGoogleDatastoreAdminV1beta1EntityFilter::initializeModel() {

    m_kinds_isSet = false;
    m_kinds_isValid = false;

    m_namespace_ids_isSet = false;
    m_namespace_ids_isValid = false;
}

void OAIGoogleDatastoreAdminV1beta1EntityFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDatastoreAdminV1beta1EntityFilter::fromJsonObject(QJsonObject json) {

    m_kinds_isValid = ::OpenAPI::fromJsonValue(m_kinds, json[QString("kinds")]);
    m_kinds_isSet = !json[QString("kinds")].isNull() && m_kinds_isValid;

    m_namespace_ids_isValid = ::OpenAPI::fromJsonValue(m_namespace_ids, json[QString("namespaceIds")]);
    m_namespace_ids_isSet = !json[QString("namespaceIds")].isNull() && m_namespace_ids_isValid;
}

QString OAIGoogleDatastoreAdminV1beta1EntityFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDatastoreAdminV1beta1EntityFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_kinds.size() > 0) {
        obj.insert(QString("kinds"), ::OpenAPI::toJsonValue(m_kinds));
    }
    if (m_namespace_ids.size() > 0) {
        obj.insert(QString("namespaceIds"), ::OpenAPI::toJsonValue(m_namespace_ids));
    }
    return obj;
}

QList<QString> OAIGoogleDatastoreAdminV1beta1EntityFilter::getKinds() const {
    return m_kinds;
}
void OAIGoogleDatastoreAdminV1beta1EntityFilter::setKinds(const QList<QString> &kinds) {
    m_kinds = kinds;
    m_kinds_isSet = true;
}

bool OAIGoogleDatastoreAdminV1beta1EntityFilter::is_kinds_Set() const{
    return m_kinds_isSet;
}

bool OAIGoogleDatastoreAdminV1beta1EntityFilter::is_kinds_Valid() const{
    return m_kinds_isValid;
}

QList<QString> OAIGoogleDatastoreAdminV1beta1EntityFilter::getNamespaceIds() const {
    return m_namespace_ids;
}
void OAIGoogleDatastoreAdminV1beta1EntityFilter::setNamespaceIds(const QList<QString> &namespace_ids) {
    m_namespace_ids = namespace_ids;
    m_namespace_ids_isSet = true;
}

bool OAIGoogleDatastoreAdminV1beta1EntityFilter::is_namespace_ids_Set() const{
    return m_namespace_ids_isSet;
}

bool OAIGoogleDatastoreAdminV1beta1EntityFilter::is_namespace_ids_Valid() const{
    return m_namespace_ids_isValid;
}

bool OAIGoogleDatastoreAdminV1beta1EntityFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kinds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDatastoreAdminV1beta1EntityFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
