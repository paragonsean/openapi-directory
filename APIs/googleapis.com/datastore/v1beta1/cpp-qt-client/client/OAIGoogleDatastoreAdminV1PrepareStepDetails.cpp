/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDatastoreAdminV1PrepareStepDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDatastoreAdminV1PrepareStepDetails::OAIGoogleDatastoreAdminV1PrepareStepDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDatastoreAdminV1PrepareStepDetails::OAIGoogleDatastoreAdminV1PrepareStepDetails() {
    this->initializeModel();
}

OAIGoogleDatastoreAdminV1PrepareStepDetails::~OAIGoogleDatastoreAdminV1PrepareStepDetails() {}

void OAIGoogleDatastoreAdminV1PrepareStepDetails::initializeModel() {

    m_concurrency_mode_isSet = false;
    m_concurrency_mode_isValid = false;
}

void OAIGoogleDatastoreAdminV1PrepareStepDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDatastoreAdminV1PrepareStepDetails::fromJsonObject(QJsonObject json) {

    m_concurrency_mode_isValid = ::OpenAPI::fromJsonValue(m_concurrency_mode, json[QString("concurrencyMode")]);
    m_concurrency_mode_isSet = !json[QString("concurrencyMode")].isNull() && m_concurrency_mode_isValid;
}

QString OAIGoogleDatastoreAdminV1PrepareStepDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDatastoreAdminV1PrepareStepDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_concurrency_mode_isSet) {
        obj.insert(QString("concurrencyMode"), ::OpenAPI::toJsonValue(m_concurrency_mode));
    }
    return obj;
}

QString OAIGoogleDatastoreAdminV1PrepareStepDetails::getConcurrencyMode() const {
    return m_concurrency_mode;
}
void OAIGoogleDatastoreAdminV1PrepareStepDetails::setConcurrencyMode(const QString &concurrency_mode) {
    m_concurrency_mode = concurrency_mode;
    m_concurrency_mode_isSet = true;
}

bool OAIGoogleDatastoreAdminV1PrepareStepDetails::is_concurrency_mode_Set() const{
    return m_concurrency_mode_isSet;
}

bool OAIGoogleDatastoreAdminV1PrepareStepDetails::is_concurrency_mode_Valid() const{
    return m_concurrency_mode_isValid;
}

bool OAIGoogleDatastoreAdminV1PrepareStepDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concurrency_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDatastoreAdminV1PrepareStepDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
