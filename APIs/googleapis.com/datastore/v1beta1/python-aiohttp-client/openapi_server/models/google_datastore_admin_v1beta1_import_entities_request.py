# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_datastore_admin_v1beta1_entity_filter import GoogleDatastoreAdminV1beta1EntityFilter
from openapi_server import util


class GoogleDatastoreAdminV1beta1ImportEntitiesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_filter: GoogleDatastoreAdminV1beta1EntityFilter=None, input_url: str=None, labels: Dict[str, str]=None):
        """GoogleDatastoreAdminV1beta1ImportEntitiesRequest - a model defined in OpenAPI

        :param entity_filter: The entity_filter of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.
        :param input_url: The input_url of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.
        :param labels: The labels of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.
        """
        self.openapi_types = {
            'entity_filter': GoogleDatastoreAdminV1beta1EntityFilter,
            'input_url': str,
            'labels': Dict[str, str]
        }

        self.attribute_map = {
            'entity_filter': 'entityFilter',
            'input_url': 'inputUrl',
            'labels': 'labels'
        }

        self._entity_filter = entity_filter
        self._input_url = input_url
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleDatastoreAdminV1beta1ImportEntitiesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleDatastoreAdminV1beta1ImportEntitiesRequest of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_filter(self):
        """Gets the entity_filter of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.


        :return: The entity_filter of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.
        :rtype: GoogleDatastoreAdminV1beta1EntityFilter
        """
        return self._entity_filter

    @entity_filter.setter
    def entity_filter(self, entity_filter):
        """Sets the entity_filter of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.


        :param entity_filter: The entity_filter of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.
        :type entity_filter: GoogleDatastoreAdminV1beta1EntityFilter
        """

        self._entity_filter = entity_filter

    @property
    def input_url(self):
        """Gets the input_url of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.

        The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So input_url should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where `BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written by the ExportEntities operation. For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). For more information, see google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.

        :return: The input_url of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.
        :rtype: str
        """
        return self._input_url

    @input_url.setter
    def input_url(self, input_url):
        """Sets the input_url of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.

        The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So input_url should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where `BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written by the ExportEntities operation. For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). For more information, see google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.

        :param input_url: The input_url of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.
        :type input_url: str
        """

        self._input_url = input_url

    @property
    def labels(self):
        """Gets the labels of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.

        Client-assigned labels.

        :return: The labels of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.

        Client-assigned labels.

        :param labels: The labels of this GoogleDatastoreAdminV1beta1ImportEntitiesRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels
