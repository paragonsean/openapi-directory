# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_datastore_admin_v1beta1_entity_filter import GoogleDatastoreAdminV1beta1EntityFilter
from openapi_server import util


class GoogleDatastoreAdminV1beta1ExportEntitiesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_filter: GoogleDatastoreAdminV1beta1EntityFilter=None, labels: Dict[str, str]=None, output_url_prefix: str=None):
        """GoogleDatastoreAdminV1beta1ExportEntitiesRequest - a model defined in OpenAPI

        :param entity_filter: The entity_filter of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.
        :param labels: The labels of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.
        :param output_url_prefix: The output_url_prefix of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.
        """
        self.openapi_types = {
            'entity_filter': GoogleDatastoreAdminV1beta1EntityFilter,
            'labels': Dict[str, str],
            'output_url_prefix': str
        }

        self.attribute_map = {
            'entity_filter': 'entityFilter',
            'labels': 'labels',
            'output_url_prefix': 'outputUrlPrefix'
        }

        self._entity_filter = entity_filter
        self._labels = labels
        self._output_url_prefix = output_url_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleDatastoreAdminV1beta1ExportEntitiesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleDatastoreAdminV1beta1ExportEntitiesRequest of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_filter(self):
        """Gets the entity_filter of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.


        :return: The entity_filter of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.
        :rtype: GoogleDatastoreAdminV1beta1EntityFilter
        """
        return self._entity_filter

    @entity_filter.setter
    def entity_filter(self, entity_filter):
        """Sets the entity_filter of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.


        :param entity_filter: The entity_filter of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.
        :type entity_filter: GoogleDatastoreAdminV1beta1EntityFilter
        """

        self._entity_filter = entity_filter

    @property
    def labels(self):
        """Gets the labels of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.

        Client-assigned labels.

        :return: The labels of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.

        Client-assigned labels.

        :param labels: The labels of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def output_url_prefix(self):
        """Gets the output_url_prefix of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.

        Location for the export metadata and data files. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So output_url_prefix should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace). For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). The resulting files will be nested deeper than the specified URL prefix. The final output URL will be provided in the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url field. That value should be used for subsequent ImportEntities operations. By nesting the data files deeper, the same Cloud Storage bucket can be used in multiple ExportEntities operations without conflict.

        :return: The output_url_prefix of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.
        :rtype: str
        """
        return self._output_url_prefix

    @output_url_prefix.setter
    def output_url_prefix(self, output_url_prefix):
        """Sets the output_url_prefix of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.

        Location for the export metadata and data files. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So output_url_prefix should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace). For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). The resulting files will be nested deeper than the specified URL prefix. The final output URL will be provided in the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url field. That value should be used for subsequent ImportEntities operations. By nesting the data files deeper, the same Cloud Storage bucket can be used in multiple ExportEntities operations without conflict.

        :param output_url_prefix: The output_url_prefix of this GoogleDatastoreAdminV1beta1ExportEntitiesRequest.
        :type output_url_prefix: str
        """

        self._output_url_prefix = output_url_prefix
