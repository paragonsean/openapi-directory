/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleDatastoreAdminV1EntityFilter model module.
 * @module model/GoogleDatastoreAdminV1EntityFilter
 * @version v1beta1
 */
class GoogleDatastoreAdminV1EntityFilter {
    /**
     * Constructs a new <code>GoogleDatastoreAdminV1EntityFilter</code>.
     * Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds&#x3D;[], namespace_ids&#x3D;[] Kinds Foo and Bar in all namespaces: kinds&#x3D;[&#39;Foo&#39;, &#39;Bar&#39;], namespace_ids&#x3D;[] Kinds Foo and Bar only in the default namespace: kinds&#x3D;[&#39;Foo&#39;, &#39;Bar&#39;], namespace_ids&#x3D;[&#39;&#39;] Kinds Foo and Bar in both the default and Baz namespaces: kinds&#x3D;[&#39;Foo&#39;, &#39;Bar&#39;], namespace_ids&#x3D;[&#39;&#39;, &#39;Baz&#39;] The entire Baz namespace: kinds&#x3D;[], namespace_ids&#x3D;[&#39;Baz&#39;]
     * @alias module:model/GoogleDatastoreAdminV1EntityFilter
     */
    constructor() { 
        
        GoogleDatastoreAdminV1EntityFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleDatastoreAdminV1EntityFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleDatastoreAdminV1EntityFilter} obj Optional instance to populate.
     * @return {module:model/GoogleDatastoreAdminV1EntityFilter} The populated <code>GoogleDatastoreAdminV1EntityFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleDatastoreAdminV1EntityFilter();

            if (data.hasOwnProperty('kinds')) {
                obj['kinds'] = ApiClient.convertToType(data['kinds'], ['String']);
            }
            if (data.hasOwnProperty('namespaceIds')) {
                obj['namespaceIds'] = ApiClient.convertToType(data['namespaceIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleDatastoreAdminV1EntityFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleDatastoreAdminV1EntityFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['kinds'])) {
            throw new Error("Expected the field `kinds` to be an array in the JSON data but got " + data['kinds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['namespaceIds'])) {
            throw new Error("Expected the field `namespaceIds` to be an array in the JSON data but got " + data['namespaceIds']);
        }

        return true;
    }


}



/**
 * If empty, then this represents all kinds.
 * @member {Array.<String>} kinds
 */
GoogleDatastoreAdminV1EntityFilter.prototype['kinds'] = undefined;

/**
 * An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.
 * @member {Array.<String>} namespaceIds
 */
GoogleDatastoreAdminV1EntityFilter.prototype['namespaceIds'] = undefined;






export default GoogleDatastoreAdminV1EntityFilter;

