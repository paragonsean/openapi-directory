/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBeginTransactionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBeginTransactionRequest::OAIBeginTransactionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBeginTransactionRequest::OAIBeginTransactionRequest() {
    this->initializeModel();
}

OAIBeginTransactionRequest::~OAIBeginTransactionRequest() {}

void OAIBeginTransactionRequest::initializeModel() {

    m_database_id_isSet = false;
    m_database_id_isValid = false;

    m_transaction_options_isSet = false;
    m_transaction_options_isValid = false;
}

void OAIBeginTransactionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBeginTransactionRequest::fromJsonObject(QJsonObject json) {

    m_database_id_isValid = ::OpenAPI::fromJsonValue(m_database_id, json[QString("databaseId")]);
    m_database_id_isSet = !json[QString("databaseId")].isNull() && m_database_id_isValid;

    m_transaction_options_isValid = ::OpenAPI::fromJsonValue(m_transaction_options, json[QString("transactionOptions")]);
    m_transaction_options_isSet = !json[QString("transactionOptions")].isNull() && m_transaction_options_isValid;
}

QString OAIBeginTransactionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBeginTransactionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_database_id_isSet) {
        obj.insert(QString("databaseId"), ::OpenAPI::toJsonValue(m_database_id));
    }
    if (m_transaction_options.isSet()) {
        obj.insert(QString("transactionOptions"), ::OpenAPI::toJsonValue(m_transaction_options));
    }
    return obj;
}

QString OAIBeginTransactionRequest::getDatabaseId() const {
    return m_database_id;
}
void OAIBeginTransactionRequest::setDatabaseId(const QString &database_id) {
    m_database_id = database_id;
    m_database_id_isSet = true;
}

bool OAIBeginTransactionRequest::is_database_id_Set() const{
    return m_database_id_isSet;
}

bool OAIBeginTransactionRequest::is_database_id_Valid() const{
    return m_database_id_isValid;
}

OAITransactionOptions OAIBeginTransactionRequest::getTransactionOptions() const {
    return m_transaction_options;
}
void OAIBeginTransactionRequest::setTransactionOptions(const OAITransactionOptions &transaction_options) {
    m_transaction_options = transaction_options;
    m_transaction_options_isSet = true;
}

bool OAIBeginTransactionRequest::is_transaction_options_Set() const{
    return m_transaction_options_isSet;
}

bool OAIBeginTransactionRequest::is_transaction_options_Valid() const{
    return m_transaction_options_isValid;
}

bool OAIBeginTransactionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBeginTransactionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
