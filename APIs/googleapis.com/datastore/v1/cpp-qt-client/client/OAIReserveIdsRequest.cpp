/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReserveIdsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReserveIdsRequest::OAIReserveIdsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReserveIdsRequest::OAIReserveIdsRequest() {
    this->initializeModel();
}

OAIReserveIdsRequest::~OAIReserveIdsRequest() {}

void OAIReserveIdsRequest::initializeModel() {

    m_database_id_isSet = false;
    m_database_id_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;
}

void OAIReserveIdsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReserveIdsRequest::fromJsonObject(QJsonObject json) {

    m_database_id_isValid = ::OpenAPI::fromJsonValue(m_database_id, json[QString("databaseId")]);
    m_database_id_isSet = !json[QString("databaseId")].isNull() && m_database_id_isValid;

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("keys")]);
    m_keys_isSet = !json[QString("keys")].isNull() && m_keys_isValid;
}

QString OAIReserveIdsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReserveIdsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_database_id_isSet) {
        obj.insert(QString("databaseId"), ::OpenAPI::toJsonValue(m_database_id));
    }
    if (m_keys.size() > 0) {
        obj.insert(QString("keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    return obj;
}

QString OAIReserveIdsRequest::getDatabaseId() const {
    return m_database_id;
}
void OAIReserveIdsRequest::setDatabaseId(const QString &database_id) {
    m_database_id = database_id;
    m_database_id_isSet = true;
}

bool OAIReserveIdsRequest::is_database_id_Set() const{
    return m_database_id_isSet;
}

bool OAIReserveIdsRequest::is_database_id_Valid() const{
    return m_database_id_isValid;
}

QList<OAIKey> OAIReserveIdsRequest::getKeys() const {
    return m_keys;
}
void OAIReserveIdsRequest::setKeys(const QList<OAIKey> &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAIReserveIdsRequest::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAIReserveIdsRequest::is_keys_Valid() const{
    return m_keys_isValid;
}

bool OAIReserveIdsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReserveIdsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
