/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDatastoreAdminV1Index.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDatastoreAdminV1Index::OAIGoogleDatastoreAdminV1Index(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDatastoreAdminV1Index::OAIGoogleDatastoreAdminV1Index() {
    this->initializeModel();
}

OAIGoogleDatastoreAdminV1Index::~OAIGoogleDatastoreAdminV1Index() {}

void OAIGoogleDatastoreAdminV1Index::initializeModel() {

    m_ancestor_isSet = false;
    m_ancestor_isValid = false;

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIGoogleDatastoreAdminV1Index::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDatastoreAdminV1Index::fromJsonObject(QJsonObject json) {

    m_ancestor_isValid = ::OpenAPI::fromJsonValue(m_ancestor, json[QString("ancestor")]);
    m_ancestor_isSet = !json[QString("ancestor")].isNull() && m_ancestor_isValid;

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("indexId")]);
    m_index_id_isSet = !json[QString("indexId")].isNull() && m_index_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIGoogleDatastoreAdminV1Index::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDatastoreAdminV1Index::asJsonObject() const {
    QJsonObject obj;
    if (m_ancestor_isSet) {
        obj.insert(QString("ancestor"), ::OpenAPI::toJsonValue(m_ancestor));
    }
    if (m_index_id_isSet) {
        obj.insert(QString("indexId"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIGoogleDatastoreAdminV1Index::getAncestor() const {
    return m_ancestor;
}
void OAIGoogleDatastoreAdminV1Index::setAncestor(const QString &ancestor) {
    m_ancestor = ancestor;
    m_ancestor_isSet = true;
}

bool OAIGoogleDatastoreAdminV1Index::is_ancestor_Set() const{
    return m_ancestor_isSet;
}

bool OAIGoogleDatastoreAdminV1Index::is_ancestor_Valid() const{
    return m_ancestor_isValid;
}

QString OAIGoogleDatastoreAdminV1Index::getIndexId() const {
    return m_index_id;
}
void OAIGoogleDatastoreAdminV1Index::setIndexId(const QString &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAIGoogleDatastoreAdminV1Index::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAIGoogleDatastoreAdminV1Index::is_index_id_Valid() const{
    return m_index_id_isValid;
}

QString OAIGoogleDatastoreAdminV1Index::getKind() const {
    return m_kind;
}
void OAIGoogleDatastoreAdminV1Index::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIGoogleDatastoreAdminV1Index::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIGoogleDatastoreAdminV1Index::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIGoogleDatastoreAdminV1Index::getProjectId() const {
    return m_project_id;
}
void OAIGoogleDatastoreAdminV1Index::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIGoogleDatastoreAdminV1Index::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIGoogleDatastoreAdminV1Index::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QList<OAIGoogleDatastoreAdminV1IndexedProperty> OAIGoogleDatastoreAdminV1Index::getProperties() const {
    return m_properties;
}
void OAIGoogleDatastoreAdminV1Index::setProperties(const QList<OAIGoogleDatastoreAdminV1IndexedProperty> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIGoogleDatastoreAdminV1Index::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIGoogleDatastoreAdminV1Index::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIGoogleDatastoreAdminV1Index::getState() const {
    return m_state;
}
void OAIGoogleDatastoreAdminV1Index::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleDatastoreAdminV1Index::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleDatastoreAdminV1Index::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIGoogleDatastoreAdminV1Index::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ancestor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDatastoreAdminV1Index::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
