/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRunAggregationQueryRequest.h
 *
 * The request for Datastore.RunAggregationQuery.
 */

#ifndef OAIRunAggregationQueryRequest_H
#define OAIRunAggregationQueryRequest_H

#include <QJsonObject>

#include "OAIAggregationQuery.h"
#include "OAIGqlQuery.h"
#include "OAIPartitionId.h"
#include "OAIReadOptions.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAggregationQuery;
class OAIGqlQuery;
class OAIPartitionId;
class OAIReadOptions;

class OAIRunAggregationQueryRequest : public OAIObject {
public:
    OAIRunAggregationQueryRequest();
    OAIRunAggregationQueryRequest(QString json);
    ~OAIRunAggregationQueryRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAggregationQuery getAggregationQuery() const;
    void setAggregationQuery(const OAIAggregationQuery &aggregation_query);
    bool is_aggregation_query_Set() const;
    bool is_aggregation_query_Valid() const;

    QString getDatabaseId() const;
    void setDatabaseId(const QString &database_id);
    bool is_database_id_Set() const;
    bool is_database_id_Valid() const;

    OAIGqlQuery getGqlQuery() const;
    void setGqlQuery(const OAIGqlQuery &gql_query);
    bool is_gql_query_Set() const;
    bool is_gql_query_Valid() const;

    OAIPartitionId getPartitionId() const;
    void setPartitionId(const OAIPartitionId &partition_id);
    bool is_partition_id_Set() const;
    bool is_partition_id_Valid() const;

    OAIReadOptions getReadOptions() const;
    void setReadOptions(const OAIReadOptions &read_options);
    bool is_read_options_Set() const;
    bool is_read_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAggregationQuery m_aggregation_query;
    bool m_aggregation_query_isSet;
    bool m_aggregation_query_isValid;

    QString m_database_id;
    bool m_database_id_isSet;
    bool m_database_id_isValid;

    OAIGqlQuery m_gql_query;
    bool m_gql_query_isSet;
    bool m_gql_query_isValid;

    OAIPartitionId m_partition_id;
    bool m_partition_id_isSet;
    bool m_partition_id_isValid;

    OAIReadOptions m_read_options;
    bool m_read_options_isSet;
    bool m_read_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRunAggregationQueryRequest)

#endif // OAIRunAggregationQueryRequest_H
