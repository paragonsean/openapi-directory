/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIValue.h
 *
 * A message that can hold any of the supported value types and associated metadata.
 */

#ifndef OAIValue_H
#define OAIValue_H

#include <QJsonObject>

#include "OAIArrayValue.h"
#include "OAIEntity.h"
#include "OAIKey.h"
#include "OAILatLng.h"
#include <QByteArray>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIArrayValue;
class OAIEntity;
class OAILatLng;
class OAIKey;

class OAIValue : public OAIObject {
public:
    OAIValue();
    OAIValue(QString json);
    ~OAIValue() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIArrayValue getArrayValue() const;
    void setArrayValue(const OAIArrayValue &array_value);
    bool is_array_value_Set() const;
    bool is_array_value_Valid() const;

    QByteArray getBlobValue() const;
    void setBlobValue(const QByteArray &blob_value);
    bool is_blob_value_Set() const;
    bool is_blob_value_Valid() const;

    bool isBooleanValue() const;
    void setBooleanValue(const bool &boolean_value);
    bool is_boolean_value_Set() const;
    bool is_boolean_value_Valid() const;

    double getDoubleValue() const;
    void setDoubleValue(const double &double_value);
    bool is_double_value_Set() const;
    bool is_double_value_Valid() const;

    OAIEntity getEntityValue() const;
    void setEntityValue(const OAIEntity &entity_value);
    bool is_entity_value_Set() const;
    bool is_entity_value_Valid() const;

    bool isExcludeFromIndexes() const;
    void setExcludeFromIndexes(const bool &exclude_from_indexes);
    bool is_exclude_from_indexes_Set() const;
    bool is_exclude_from_indexes_Valid() const;

    OAILatLng getGeoPointValue() const;
    void setGeoPointValue(const OAILatLng &geo_point_value);
    bool is_geo_point_value_Set() const;
    bool is_geo_point_value_Valid() const;

    QString getIntegerValue() const;
    void setIntegerValue(const QString &integer_value);
    bool is_integer_value_Set() const;
    bool is_integer_value_Valid() const;

    OAIKey getKeyValue() const;
    void setKeyValue(const OAIKey &key_value);
    bool is_key_value_Set() const;
    bool is_key_value_Valid() const;

    qint32 getMeaning() const;
    void setMeaning(const qint32 &meaning);
    bool is_meaning_Set() const;
    bool is_meaning_Valid() const;

    QString getNullValue() const;
    void setNullValue(const QString &null_value);
    bool is_null_value_Set() const;
    bool is_null_value_Valid() const;

    QString getStringValue() const;
    void setStringValue(const QString &string_value);
    bool is_string_value_Set() const;
    bool is_string_value_Valid() const;

    QString getTimestampValue() const;
    void setTimestampValue(const QString &timestamp_value);
    bool is_timestamp_value_Set() const;
    bool is_timestamp_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIArrayValue m_array_value;
    bool m_array_value_isSet;
    bool m_array_value_isValid;

    QByteArray m_blob_value;
    bool m_blob_value_isSet;
    bool m_blob_value_isValid;

    bool m_boolean_value;
    bool m_boolean_value_isSet;
    bool m_boolean_value_isValid;

    double m_double_value;
    bool m_double_value_isSet;
    bool m_double_value_isValid;

    OAIEntity m_entity_value;
    bool m_entity_value_isSet;
    bool m_entity_value_isValid;

    bool m_exclude_from_indexes;
    bool m_exclude_from_indexes_isSet;
    bool m_exclude_from_indexes_isValid;

    OAILatLng m_geo_point_value;
    bool m_geo_point_value_isSet;
    bool m_geo_point_value_isValid;

    QString m_integer_value;
    bool m_integer_value_isSet;
    bool m_integer_value_isValid;

    OAIKey m_key_value;
    bool m_key_value_isSet;
    bool m_key_value_isValid;

    qint32 m_meaning;
    bool m_meaning_isSet;
    bool m_meaning_isValid;

    QString m_null_value;
    bool m_null_value_isSet;
    bool m_null_value_isValid;

    QString m_string_value;
    bool m_string_value_isSet;
    bool m_string_value_isValid;

    QString m_timestamp_value;
    bool m_timestamp_value_isSet;
    bool m_timestamp_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIValue)

#endif // OAIValue_H
