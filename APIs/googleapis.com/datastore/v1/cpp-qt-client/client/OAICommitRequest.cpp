/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitRequest::OAICommitRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitRequest::OAICommitRequest() {
    this->initializeModel();
}

OAICommitRequest::~OAICommitRequest() {}

void OAICommitRequest::initializeModel() {

    m_database_id_isSet = false;
    m_database_id_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_mutations_isSet = false;
    m_mutations_isValid = false;

    m_single_use_transaction_isSet = false;
    m_single_use_transaction_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;
}

void OAICommitRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitRequest::fromJsonObject(QJsonObject json) {

    m_database_id_isValid = ::OpenAPI::fromJsonValue(m_database_id, json[QString("databaseId")]);
    m_database_id_isSet = !json[QString("databaseId")].isNull() && m_database_id_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_mutations_isValid = ::OpenAPI::fromJsonValue(m_mutations, json[QString("mutations")]);
    m_mutations_isSet = !json[QString("mutations")].isNull() && m_mutations_isValid;

    m_single_use_transaction_isValid = ::OpenAPI::fromJsonValue(m_single_use_transaction, json[QString("singleUseTransaction")]);
    m_single_use_transaction_isSet = !json[QString("singleUseTransaction")].isNull() && m_single_use_transaction_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;
}

QString OAICommitRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_database_id_isSet) {
        obj.insert(QString("databaseId"), ::OpenAPI::toJsonValue(m_database_id));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_mutations.size() > 0) {
        obj.insert(QString("mutations"), ::OpenAPI::toJsonValue(m_mutations));
    }
    if (m_single_use_transaction.isSet()) {
        obj.insert(QString("singleUseTransaction"), ::OpenAPI::toJsonValue(m_single_use_transaction));
    }
    if (m_transaction_isSet) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    return obj;
}

QString OAICommitRequest::getDatabaseId() const {
    return m_database_id;
}
void OAICommitRequest::setDatabaseId(const QString &database_id) {
    m_database_id = database_id;
    m_database_id_isSet = true;
}

bool OAICommitRequest::is_database_id_Set() const{
    return m_database_id_isSet;
}

bool OAICommitRequest::is_database_id_Valid() const{
    return m_database_id_isValid;
}

QString OAICommitRequest::getMode() const {
    return m_mode;
}
void OAICommitRequest::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAICommitRequest::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAICommitRequest::is_mode_Valid() const{
    return m_mode_isValid;
}

QList<OAIMutation> OAICommitRequest::getMutations() const {
    return m_mutations;
}
void OAICommitRequest::setMutations(const QList<OAIMutation> &mutations) {
    m_mutations = mutations;
    m_mutations_isSet = true;
}

bool OAICommitRequest::is_mutations_Set() const{
    return m_mutations_isSet;
}

bool OAICommitRequest::is_mutations_Valid() const{
    return m_mutations_isValid;
}

OAITransactionOptions OAICommitRequest::getSingleUseTransaction() const {
    return m_single_use_transaction;
}
void OAICommitRequest::setSingleUseTransaction(const OAITransactionOptions &single_use_transaction) {
    m_single_use_transaction = single_use_transaction;
    m_single_use_transaction_isSet = true;
}

bool OAICommitRequest::is_single_use_transaction_Set() const{
    return m_single_use_transaction_isSet;
}

bool OAICommitRequest::is_single_use_transaction_Valid() const{
    return m_single_use_transaction_isValid;
}

QByteArray OAICommitRequest::getTransaction() const {
    return m_transaction;
}
void OAICommitRequest::setTransaction(const QByteArray &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAICommitRequest::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAICommitRequest::is_transaction_Valid() const{
    return m_transaction_isValid;
}

bool OAICommitRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_use_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
