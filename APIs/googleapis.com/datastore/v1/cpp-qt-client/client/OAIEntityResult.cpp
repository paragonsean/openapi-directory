/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityResult::OAIEntityResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityResult::OAIEntityResult() {
    this->initializeModel();
}

OAIEntityResult::~OAIEntityResult() {}

void OAIEntityResult::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIEntityResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityResult::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIEntityResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityResult::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_entity.isSet()) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIEntityResult::getCreateTime() const {
    return m_create_time;
}
void OAIEntityResult::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIEntityResult::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIEntityResult::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QByteArray OAIEntityResult::getCursor() const {
    return m_cursor;
}
void OAIEntityResult::setCursor(const QByteArray &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAIEntityResult::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAIEntityResult::is_cursor_Valid() const{
    return m_cursor_isValid;
}

OAIEntity OAIEntityResult::getEntity() const {
    return m_entity;
}
void OAIEntityResult::setEntity(const OAIEntity &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIEntityResult::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIEntityResult::is_entity_Valid() const{
    return m_entity_isValid;
}

QString OAIEntityResult::getUpdateTime() const {
    return m_update_time;
}
void OAIEntityResult::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIEntityResult::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIEntityResult::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIEntityResult::getVersion() const {
    return m_version;
}
void OAIEntityResult::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIEntityResult::is_version_Set() const{
    return m_version_isSet;
}

bool OAIEntityResult::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIEntityResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
