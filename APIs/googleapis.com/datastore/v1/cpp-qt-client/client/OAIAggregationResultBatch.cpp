/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregationResultBatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregationResultBatch::OAIAggregationResultBatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregationResultBatch::OAIAggregationResultBatch() {
    this->initializeModel();
}

OAIAggregationResultBatch::~OAIAggregationResultBatch() {}

void OAIAggregationResultBatch::initializeModel() {

    m_aggregation_results_isSet = false;
    m_aggregation_results_isValid = false;

    m_more_results_isSet = false;
    m_more_results_isValid = false;

    m_read_time_isSet = false;
    m_read_time_isValid = false;
}

void OAIAggregationResultBatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregationResultBatch::fromJsonObject(QJsonObject json) {

    m_aggregation_results_isValid = ::OpenAPI::fromJsonValue(m_aggregation_results, json[QString("aggregationResults")]);
    m_aggregation_results_isSet = !json[QString("aggregationResults")].isNull() && m_aggregation_results_isValid;

    m_more_results_isValid = ::OpenAPI::fromJsonValue(m_more_results, json[QString("moreResults")]);
    m_more_results_isSet = !json[QString("moreResults")].isNull() && m_more_results_isValid;

    m_read_time_isValid = ::OpenAPI::fromJsonValue(m_read_time, json[QString("readTime")]);
    m_read_time_isSet = !json[QString("readTime")].isNull() && m_read_time_isValid;
}

QString OAIAggregationResultBatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregationResultBatch::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_results.size() > 0) {
        obj.insert(QString("aggregationResults"), ::OpenAPI::toJsonValue(m_aggregation_results));
    }
    if (m_more_results_isSet) {
        obj.insert(QString("moreResults"), ::OpenAPI::toJsonValue(m_more_results));
    }
    if (m_read_time_isSet) {
        obj.insert(QString("readTime"), ::OpenAPI::toJsonValue(m_read_time));
    }
    return obj;
}

QList<OAIAggregationResult> OAIAggregationResultBatch::getAggregationResults() const {
    return m_aggregation_results;
}
void OAIAggregationResultBatch::setAggregationResults(const QList<OAIAggregationResult> &aggregation_results) {
    m_aggregation_results = aggregation_results;
    m_aggregation_results_isSet = true;
}

bool OAIAggregationResultBatch::is_aggregation_results_Set() const{
    return m_aggregation_results_isSet;
}

bool OAIAggregationResultBatch::is_aggregation_results_Valid() const{
    return m_aggregation_results_isValid;
}

QString OAIAggregationResultBatch::getMoreResults() const {
    return m_more_results;
}
void OAIAggregationResultBatch::setMoreResults(const QString &more_results) {
    m_more_results = more_results;
    m_more_results_isSet = true;
}

bool OAIAggregationResultBatch::is_more_results_Set() const{
    return m_more_results_isSet;
}

bool OAIAggregationResultBatch::is_more_results_Valid() const{
    return m_more_results_isValid;
}

QString OAIAggregationResultBatch::getReadTime() const {
    return m_read_time;
}
void OAIAggregationResultBatch::setReadTime(const QString &read_time) {
    m_read_time = read_time;
    m_read_time_isSet = true;
}

bool OAIAggregationResultBatch::is_read_time_Set() const{
    return m_read_time_isSet;
}

bool OAIAggregationResultBatch::is_read_time_Valid() const{
    return m_read_time_isValid;
}

bool OAIAggregationResultBatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregationResultBatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
