/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILookupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILookupResponse::OAILookupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILookupResponse::OAILookupResponse() {
    this->initializeModel();
}

OAILookupResponse::~OAILookupResponse() {}

void OAILookupResponse::initializeModel() {

    m_deferred_isSet = false;
    m_deferred_isValid = false;

    m_found_isSet = false;
    m_found_isValid = false;

    m_missing_isSet = false;
    m_missing_isValid = false;

    m_read_time_isSet = false;
    m_read_time_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;
}

void OAILookupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILookupResponse::fromJsonObject(QJsonObject json) {

    m_deferred_isValid = ::OpenAPI::fromJsonValue(m_deferred, json[QString("deferred")]);
    m_deferred_isSet = !json[QString("deferred")].isNull() && m_deferred_isValid;

    m_found_isValid = ::OpenAPI::fromJsonValue(m_found, json[QString("found")]);
    m_found_isSet = !json[QString("found")].isNull() && m_found_isValid;

    m_missing_isValid = ::OpenAPI::fromJsonValue(m_missing, json[QString("missing")]);
    m_missing_isSet = !json[QString("missing")].isNull() && m_missing_isValid;

    m_read_time_isValid = ::OpenAPI::fromJsonValue(m_read_time, json[QString("readTime")]);
    m_read_time_isSet = !json[QString("readTime")].isNull() && m_read_time_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;
}

QString OAILookupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILookupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_deferred.size() > 0) {
        obj.insert(QString("deferred"), ::OpenAPI::toJsonValue(m_deferred));
    }
    if (m_found.size() > 0) {
        obj.insert(QString("found"), ::OpenAPI::toJsonValue(m_found));
    }
    if (m_missing.size() > 0) {
        obj.insert(QString("missing"), ::OpenAPI::toJsonValue(m_missing));
    }
    if (m_read_time_isSet) {
        obj.insert(QString("readTime"), ::OpenAPI::toJsonValue(m_read_time));
    }
    if (m_transaction_isSet) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    return obj;
}

QList<OAIKey> OAILookupResponse::getDeferred() const {
    return m_deferred;
}
void OAILookupResponse::setDeferred(const QList<OAIKey> &deferred) {
    m_deferred = deferred;
    m_deferred_isSet = true;
}

bool OAILookupResponse::is_deferred_Set() const{
    return m_deferred_isSet;
}

bool OAILookupResponse::is_deferred_Valid() const{
    return m_deferred_isValid;
}

QList<OAIEntityResult> OAILookupResponse::getFound() const {
    return m_found;
}
void OAILookupResponse::setFound(const QList<OAIEntityResult> &found) {
    m_found = found;
    m_found_isSet = true;
}

bool OAILookupResponse::is_found_Set() const{
    return m_found_isSet;
}

bool OAILookupResponse::is_found_Valid() const{
    return m_found_isValid;
}

QList<OAIEntityResult> OAILookupResponse::getMissing() const {
    return m_missing;
}
void OAILookupResponse::setMissing(const QList<OAIEntityResult> &missing) {
    m_missing = missing;
    m_missing_isSet = true;
}

bool OAILookupResponse::is_missing_Set() const{
    return m_missing_isSet;
}

bool OAILookupResponse::is_missing_Valid() const{
    return m_missing_isValid;
}

QString OAILookupResponse::getReadTime() const {
    return m_read_time;
}
void OAILookupResponse::setReadTime(const QString &read_time) {
    m_read_time = read_time;
    m_read_time_isSet = true;
}

bool OAILookupResponse::is_read_time_Set() const{
    return m_read_time_isSet;
}

bool OAILookupResponse::is_read_time_Valid() const{
    return m_read_time_isValid;
}

QByteArray OAILookupResponse::getTransaction() const {
    return m_transaction;
}
void OAILookupResponse::setTransaction(const QByteArray &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAILookupResponse::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAILookupResponse::is_transaction_Valid() const{
    return m_transaction_isValid;
}

bool OAILookupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deferred.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_found.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILookupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
