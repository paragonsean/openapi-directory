/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDatastoreAdminV1beta1CommonMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDatastoreAdminV1beta1CommonMetadata::OAIGoogleDatastoreAdminV1beta1CommonMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDatastoreAdminV1beta1CommonMetadata::OAIGoogleDatastoreAdminV1beta1CommonMetadata() {
    this->initializeModel();
}

OAIGoogleDatastoreAdminV1beta1CommonMetadata::~OAIGoogleDatastoreAdminV1beta1CommonMetadata() {}

void OAIGoogleDatastoreAdminV1beta1CommonMetadata::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIGoogleDatastoreAdminV1beta1CommonMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDatastoreAdminV1beta1CommonMetadata::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIGoogleDatastoreAdminV1beta1CommonMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDatastoreAdminV1beta1CommonMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIGoogleDatastoreAdminV1beta1CommonMetadata::getEndTime() const {
    return m_end_time;
}
void OAIGoogleDatastoreAdminV1beta1CommonMetadata::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGoogleDatastoreAdminV1beta1CommonMetadata::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGoogleDatastoreAdminV1beta1CommonMetadata::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QMap<QString, QString> OAIGoogleDatastoreAdminV1beta1CommonMetadata::getLabels() const {
    return m_labels;
}
void OAIGoogleDatastoreAdminV1beta1CommonMetadata::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleDatastoreAdminV1beta1CommonMetadata::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleDatastoreAdminV1beta1CommonMetadata::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGoogleDatastoreAdminV1beta1CommonMetadata::getOperationType() const {
    return m_operation_type;
}
void OAIGoogleDatastoreAdminV1beta1CommonMetadata::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAIGoogleDatastoreAdminV1beta1CommonMetadata::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAIGoogleDatastoreAdminV1beta1CommonMetadata::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

QString OAIGoogleDatastoreAdminV1beta1CommonMetadata::getStartTime() const {
    return m_start_time;
}
void OAIGoogleDatastoreAdminV1beta1CommonMetadata::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGoogleDatastoreAdminV1beta1CommonMetadata::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGoogleDatastoreAdminV1beta1CommonMetadata::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIGoogleDatastoreAdminV1beta1CommonMetadata::getState() const {
    return m_state;
}
void OAIGoogleDatastoreAdminV1beta1CommonMetadata::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleDatastoreAdminV1beta1CommonMetadata::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleDatastoreAdminV1beta1CommonMetadata::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIGoogleDatastoreAdminV1beta1CommonMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDatastoreAdminV1beta1CommonMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
