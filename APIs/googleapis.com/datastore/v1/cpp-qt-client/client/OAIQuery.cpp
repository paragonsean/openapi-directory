/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuery::OAIQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuery::OAIQuery() {
    this->initializeModel();
}

OAIQuery::~OAIQuery() {}

void OAIQuery::initializeModel() {

    m_distinct_on_isSet = false;
    m_distinct_on_isValid = false;

    m_end_cursor_isSet = false;
    m_end_cursor_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_projection_isSet = false;
    m_projection_isValid = false;

    m_start_cursor_isSet = false;
    m_start_cursor_isValid = false;
}

void OAIQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuery::fromJsonObject(QJsonObject json) {

    m_distinct_on_isValid = ::OpenAPI::fromJsonValue(m_distinct_on, json[QString("distinctOn")]);
    m_distinct_on_isSet = !json[QString("distinctOn")].isNull() && m_distinct_on_isValid;

    m_end_cursor_isValid = ::OpenAPI::fromJsonValue(m_end_cursor, json[QString("endCursor")]);
    m_end_cursor_isSet = !json[QString("endCursor")].isNull() && m_end_cursor_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_projection_isValid = ::OpenAPI::fromJsonValue(m_projection, json[QString("projection")]);
    m_projection_isSet = !json[QString("projection")].isNull() && m_projection_isValid;

    m_start_cursor_isValid = ::OpenAPI::fromJsonValue(m_start_cursor, json[QString("startCursor")]);
    m_start_cursor_isSet = !json[QString("startCursor")].isNull() && m_start_cursor_isValid;
}

QString OAIQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_distinct_on.size() > 0) {
        obj.insert(QString("distinctOn"), ::OpenAPI::toJsonValue(m_distinct_on));
    }
    if (m_end_cursor_isSet) {
        obj.insert(QString("endCursor"), ::OpenAPI::toJsonValue(m_end_cursor));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_kind.size() > 0) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_order.size() > 0) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_projection.size() > 0) {
        obj.insert(QString("projection"), ::OpenAPI::toJsonValue(m_projection));
    }
    if (m_start_cursor_isSet) {
        obj.insert(QString("startCursor"), ::OpenAPI::toJsonValue(m_start_cursor));
    }
    return obj;
}

QList<OAIPropertyReference> OAIQuery::getDistinctOn() const {
    return m_distinct_on;
}
void OAIQuery::setDistinctOn(const QList<OAIPropertyReference> &distinct_on) {
    m_distinct_on = distinct_on;
    m_distinct_on_isSet = true;
}

bool OAIQuery::is_distinct_on_Set() const{
    return m_distinct_on_isSet;
}

bool OAIQuery::is_distinct_on_Valid() const{
    return m_distinct_on_isValid;
}

QByteArray OAIQuery::getEndCursor() const {
    return m_end_cursor;
}
void OAIQuery::setEndCursor(const QByteArray &end_cursor) {
    m_end_cursor = end_cursor;
    m_end_cursor_isSet = true;
}

bool OAIQuery::is_end_cursor_Set() const{
    return m_end_cursor_isSet;
}

bool OAIQuery::is_end_cursor_Valid() const{
    return m_end_cursor_isValid;
}

OAIFilter OAIQuery::getFilter() const {
    return m_filter;
}
void OAIQuery::setFilter(const OAIFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIQuery::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIQuery::is_filter_Valid() const{
    return m_filter_isValid;
}

QList<OAIKindExpression> OAIQuery::getKind() const {
    return m_kind;
}
void OAIQuery::setKind(const QList<OAIKindExpression> &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIQuery::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIQuery::is_kind_Valid() const{
    return m_kind_isValid;
}

qint32 OAIQuery::getLimit() const {
    return m_limit;
}
void OAIQuery::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIQuery::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIQuery::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIQuery::getOffset() const {
    return m_offset;
}
void OAIQuery::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIQuery::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIQuery::is_offset_Valid() const{
    return m_offset_isValid;
}

QList<OAIPropertyOrder> OAIQuery::getOrder() const {
    return m_order;
}
void OAIQuery::setOrder(const QList<OAIPropertyOrder> &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIQuery::is_order_Set() const{
    return m_order_isSet;
}

bool OAIQuery::is_order_Valid() const{
    return m_order_isValid;
}

QList<OAIProjection> OAIQuery::getProjection() const {
    return m_projection;
}
void OAIQuery::setProjection(const QList<OAIProjection> &projection) {
    m_projection = projection;
    m_projection_isSet = true;
}

bool OAIQuery::is_projection_Set() const{
    return m_projection_isSet;
}

bool OAIQuery::is_projection_Valid() const{
    return m_projection_isValid;
}

QByteArray OAIQuery::getStartCursor() const {
    return m_start_cursor;
}
void OAIQuery::setStartCursor(const QByteArray &start_cursor) {
    m_start_cursor = start_cursor;
    m_start_cursor_isSet = true;
}

bool OAIQuery::is_start_cursor_Set() const{
    return m_start_cursor_isSet;
}

bool OAIQuery::is_start_cursor_Valid() const{
    return m_start_cursor_isValid;
}

bool OAIQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distinct_on.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_projection.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
