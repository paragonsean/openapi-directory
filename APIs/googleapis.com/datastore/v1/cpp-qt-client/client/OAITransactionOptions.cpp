/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionOptions::OAITransactionOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionOptions::OAITransactionOptions() {
    this->initializeModel();
}

OAITransactionOptions::~OAITransactionOptions() {}

void OAITransactionOptions::initializeModel() {

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_read_write_isSet = false;
    m_read_write_isValid = false;
}

void OAITransactionOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionOptions::fromJsonObject(QJsonObject json) {

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_read_write_isValid = ::OpenAPI::fromJsonValue(m_read_write, json[QString("readWrite")]);
    m_read_write_isSet = !json[QString("readWrite")].isNull() && m_read_write_isValid;
}

QString OAITransactionOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_read_only.isSet()) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_read_write.isSet()) {
        obj.insert(QString("readWrite"), ::OpenAPI::toJsonValue(m_read_write));
    }
    return obj;
}

OAIReadOnly OAITransactionOptions::getReadOnly() const {
    return m_read_only;
}
void OAITransactionOptions::setReadOnly(const OAIReadOnly &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAITransactionOptions::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAITransactionOptions::is_read_only_Valid() const{
    return m_read_only_isValid;
}

OAIReadWrite OAITransactionOptions::getReadWrite() const {
    return m_read_write;
}
void OAITransactionOptions::setReadWrite(const OAIReadWrite &read_write) {
    m_read_write = read_write;
    m_read_write_isSet = true;
}

bool OAITransactionOptions::is_read_write_Set() const{
    return m_read_write_isSet;
}

bool OAITransactionOptions::is_read_write_Valid() const{
    return m_read_write_isValid;
}

bool OAITransactionOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_read_only.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_write.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
