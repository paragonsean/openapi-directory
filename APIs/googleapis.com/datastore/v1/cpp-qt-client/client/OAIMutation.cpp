/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMutation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMutation::OAIMutation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMutation::OAIMutation() {
    this->initializeModel();
}

OAIMutation::~OAIMutation() {}

void OAIMutation::initializeModel() {

    m_base_version_isSet = false;
    m_base_version_isValid = false;

    m_r_delete_isSet = false;
    m_r_delete_isValid = false;

    m_insert_isSet = false;
    m_insert_isValid = false;

    m_update_isSet = false;
    m_update_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_upsert_isSet = false;
    m_upsert_isValid = false;
}

void OAIMutation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMutation::fromJsonObject(QJsonObject json) {

    m_base_version_isValid = ::OpenAPI::fromJsonValue(m_base_version, json[QString("baseVersion")]);
    m_base_version_isSet = !json[QString("baseVersion")].isNull() && m_base_version_isValid;

    m_r_delete_isValid = ::OpenAPI::fromJsonValue(m_r_delete, json[QString("delete")]);
    m_r_delete_isSet = !json[QString("delete")].isNull() && m_r_delete_isValid;

    m_insert_isValid = ::OpenAPI::fromJsonValue(m_insert, json[QString("insert")]);
    m_insert_isSet = !json[QString("insert")].isNull() && m_insert_isValid;

    m_update_isValid = ::OpenAPI::fromJsonValue(m_update, json[QString("update")]);
    m_update_isSet = !json[QString("update")].isNull() && m_update_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_upsert_isValid = ::OpenAPI::fromJsonValue(m_upsert, json[QString("upsert")]);
    m_upsert_isSet = !json[QString("upsert")].isNull() && m_upsert_isValid;
}

QString OAIMutation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMutation::asJsonObject() const {
    QJsonObject obj;
    if (m_base_version_isSet) {
        obj.insert(QString("baseVersion"), ::OpenAPI::toJsonValue(m_base_version));
    }
    if (m_r_delete.isSet()) {
        obj.insert(QString("delete"), ::OpenAPI::toJsonValue(m_r_delete));
    }
    if (m_insert.isSet()) {
        obj.insert(QString("insert"), ::OpenAPI::toJsonValue(m_insert));
    }
    if (m_update.isSet()) {
        obj.insert(QString("update"), ::OpenAPI::toJsonValue(m_update));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_upsert.isSet()) {
        obj.insert(QString("upsert"), ::OpenAPI::toJsonValue(m_upsert));
    }
    return obj;
}

QString OAIMutation::getBaseVersion() const {
    return m_base_version;
}
void OAIMutation::setBaseVersion(const QString &base_version) {
    m_base_version = base_version;
    m_base_version_isSet = true;
}

bool OAIMutation::is_base_version_Set() const{
    return m_base_version_isSet;
}

bool OAIMutation::is_base_version_Valid() const{
    return m_base_version_isValid;
}

OAIKey OAIMutation::getRDelete() const {
    return m_r_delete;
}
void OAIMutation::setRDelete(const OAIKey &r_delete) {
    m_r_delete = r_delete;
    m_r_delete_isSet = true;
}

bool OAIMutation::is_r_delete_Set() const{
    return m_r_delete_isSet;
}

bool OAIMutation::is_r_delete_Valid() const{
    return m_r_delete_isValid;
}

OAIEntity OAIMutation::getInsert() const {
    return m_insert;
}
void OAIMutation::setInsert(const OAIEntity &insert) {
    m_insert = insert;
    m_insert_isSet = true;
}

bool OAIMutation::is_insert_Set() const{
    return m_insert_isSet;
}

bool OAIMutation::is_insert_Valid() const{
    return m_insert_isValid;
}

OAIEntity OAIMutation::getUpdate() const {
    return m_update;
}
void OAIMutation::setUpdate(const OAIEntity &update) {
    m_update = update;
    m_update_isSet = true;
}

bool OAIMutation::is_update_Set() const{
    return m_update_isSet;
}

bool OAIMutation::is_update_Valid() const{
    return m_update_isValid;
}

QString OAIMutation::getUpdateTime() const {
    return m_update_time;
}
void OAIMutation::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIMutation::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIMutation::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIEntity OAIMutation::getUpsert() const {
    return m_upsert;
}
void OAIMutation::setUpsert(const OAIEntity &upsert) {
    m_upsert = upsert;
    m_upsert_isSet = true;
}

bool OAIMutation::is_upsert_Set() const{
    return m_upsert_isSet;
}

bool OAIMutation::is_upsert_Valid() const{
    return m_upsert_isValid;
}

bool OAIMutation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_delete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upsert.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMutation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
