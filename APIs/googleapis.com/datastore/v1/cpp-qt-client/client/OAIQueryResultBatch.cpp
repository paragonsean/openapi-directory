/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryResultBatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryResultBatch::OAIQueryResultBatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryResultBatch::OAIQueryResultBatch() {
    this->initializeModel();
}

OAIQueryResultBatch::~OAIQueryResultBatch() {}

void OAIQueryResultBatch::initializeModel() {

    m_end_cursor_isSet = false;
    m_end_cursor_isValid = false;

    m_entity_result_type_isSet = false;
    m_entity_result_type_isValid = false;

    m_entity_results_isSet = false;
    m_entity_results_isValid = false;

    m_more_results_isSet = false;
    m_more_results_isValid = false;

    m_read_time_isSet = false;
    m_read_time_isValid = false;

    m_skipped_cursor_isSet = false;
    m_skipped_cursor_isValid = false;

    m_skipped_results_isSet = false;
    m_skipped_results_isValid = false;

    m_snapshot_version_isSet = false;
    m_snapshot_version_isValid = false;
}

void OAIQueryResultBatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryResultBatch::fromJsonObject(QJsonObject json) {

    m_end_cursor_isValid = ::OpenAPI::fromJsonValue(m_end_cursor, json[QString("endCursor")]);
    m_end_cursor_isSet = !json[QString("endCursor")].isNull() && m_end_cursor_isValid;

    m_entity_result_type_isValid = ::OpenAPI::fromJsonValue(m_entity_result_type, json[QString("entityResultType")]);
    m_entity_result_type_isSet = !json[QString("entityResultType")].isNull() && m_entity_result_type_isValid;

    m_entity_results_isValid = ::OpenAPI::fromJsonValue(m_entity_results, json[QString("entityResults")]);
    m_entity_results_isSet = !json[QString("entityResults")].isNull() && m_entity_results_isValid;

    m_more_results_isValid = ::OpenAPI::fromJsonValue(m_more_results, json[QString("moreResults")]);
    m_more_results_isSet = !json[QString("moreResults")].isNull() && m_more_results_isValid;

    m_read_time_isValid = ::OpenAPI::fromJsonValue(m_read_time, json[QString("readTime")]);
    m_read_time_isSet = !json[QString("readTime")].isNull() && m_read_time_isValid;

    m_skipped_cursor_isValid = ::OpenAPI::fromJsonValue(m_skipped_cursor, json[QString("skippedCursor")]);
    m_skipped_cursor_isSet = !json[QString("skippedCursor")].isNull() && m_skipped_cursor_isValid;

    m_skipped_results_isValid = ::OpenAPI::fromJsonValue(m_skipped_results, json[QString("skippedResults")]);
    m_skipped_results_isSet = !json[QString("skippedResults")].isNull() && m_skipped_results_isValid;

    m_snapshot_version_isValid = ::OpenAPI::fromJsonValue(m_snapshot_version, json[QString("snapshotVersion")]);
    m_snapshot_version_isSet = !json[QString("snapshotVersion")].isNull() && m_snapshot_version_isValid;
}

QString OAIQueryResultBatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryResultBatch::asJsonObject() const {
    QJsonObject obj;
    if (m_end_cursor_isSet) {
        obj.insert(QString("endCursor"), ::OpenAPI::toJsonValue(m_end_cursor));
    }
    if (m_entity_result_type_isSet) {
        obj.insert(QString("entityResultType"), ::OpenAPI::toJsonValue(m_entity_result_type));
    }
    if (m_entity_results.size() > 0) {
        obj.insert(QString("entityResults"), ::OpenAPI::toJsonValue(m_entity_results));
    }
    if (m_more_results_isSet) {
        obj.insert(QString("moreResults"), ::OpenAPI::toJsonValue(m_more_results));
    }
    if (m_read_time_isSet) {
        obj.insert(QString("readTime"), ::OpenAPI::toJsonValue(m_read_time));
    }
    if (m_skipped_cursor_isSet) {
        obj.insert(QString("skippedCursor"), ::OpenAPI::toJsonValue(m_skipped_cursor));
    }
    if (m_skipped_results_isSet) {
        obj.insert(QString("skippedResults"), ::OpenAPI::toJsonValue(m_skipped_results));
    }
    if (m_snapshot_version_isSet) {
        obj.insert(QString("snapshotVersion"), ::OpenAPI::toJsonValue(m_snapshot_version));
    }
    return obj;
}

QByteArray OAIQueryResultBatch::getEndCursor() const {
    return m_end_cursor;
}
void OAIQueryResultBatch::setEndCursor(const QByteArray &end_cursor) {
    m_end_cursor = end_cursor;
    m_end_cursor_isSet = true;
}

bool OAIQueryResultBatch::is_end_cursor_Set() const{
    return m_end_cursor_isSet;
}

bool OAIQueryResultBatch::is_end_cursor_Valid() const{
    return m_end_cursor_isValid;
}

QString OAIQueryResultBatch::getEntityResultType() const {
    return m_entity_result_type;
}
void OAIQueryResultBatch::setEntityResultType(const QString &entity_result_type) {
    m_entity_result_type = entity_result_type;
    m_entity_result_type_isSet = true;
}

bool OAIQueryResultBatch::is_entity_result_type_Set() const{
    return m_entity_result_type_isSet;
}

bool OAIQueryResultBatch::is_entity_result_type_Valid() const{
    return m_entity_result_type_isValid;
}

QList<OAIEntityResult> OAIQueryResultBatch::getEntityResults() const {
    return m_entity_results;
}
void OAIQueryResultBatch::setEntityResults(const QList<OAIEntityResult> &entity_results) {
    m_entity_results = entity_results;
    m_entity_results_isSet = true;
}

bool OAIQueryResultBatch::is_entity_results_Set() const{
    return m_entity_results_isSet;
}

bool OAIQueryResultBatch::is_entity_results_Valid() const{
    return m_entity_results_isValid;
}

QString OAIQueryResultBatch::getMoreResults() const {
    return m_more_results;
}
void OAIQueryResultBatch::setMoreResults(const QString &more_results) {
    m_more_results = more_results;
    m_more_results_isSet = true;
}

bool OAIQueryResultBatch::is_more_results_Set() const{
    return m_more_results_isSet;
}

bool OAIQueryResultBatch::is_more_results_Valid() const{
    return m_more_results_isValid;
}

QString OAIQueryResultBatch::getReadTime() const {
    return m_read_time;
}
void OAIQueryResultBatch::setReadTime(const QString &read_time) {
    m_read_time = read_time;
    m_read_time_isSet = true;
}

bool OAIQueryResultBatch::is_read_time_Set() const{
    return m_read_time_isSet;
}

bool OAIQueryResultBatch::is_read_time_Valid() const{
    return m_read_time_isValid;
}

QByteArray OAIQueryResultBatch::getSkippedCursor() const {
    return m_skipped_cursor;
}
void OAIQueryResultBatch::setSkippedCursor(const QByteArray &skipped_cursor) {
    m_skipped_cursor = skipped_cursor;
    m_skipped_cursor_isSet = true;
}

bool OAIQueryResultBatch::is_skipped_cursor_Set() const{
    return m_skipped_cursor_isSet;
}

bool OAIQueryResultBatch::is_skipped_cursor_Valid() const{
    return m_skipped_cursor_isValid;
}

qint32 OAIQueryResultBatch::getSkippedResults() const {
    return m_skipped_results;
}
void OAIQueryResultBatch::setSkippedResults(const qint32 &skipped_results) {
    m_skipped_results = skipped_results;
    m_skipped_results_isSet = true;
}

bool OAIQueryResultBatch::is_skipped_results_Set() const{
    return m_skipped_results_isSet;
}

bool OAIQueryResultBatch::is_skipped_results_Valid() const{
    return m_skipped_results_isValid;
}

QString OAIQueryResultBatch::getSnapshotVersion() const {
    return m_snapshot_version;
}
void OAIQueryResultBatch::setSnapshotVersion(const QString &snapshot_version) {
    m_snapshot_version = snapshot_version;
    m_snapshot_version_isSet = true;
}

bool OAIQueryResultBatch::is_snapshot_version_Set() const{
    return m_snapshot_version_isSet;
}

bool OAIQueryResultBatch::is_snapshot_version_Valid() const{
    return m_snapshot_version_isValid;
}

bool OAIQueryResultBatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_result_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryResultBatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
