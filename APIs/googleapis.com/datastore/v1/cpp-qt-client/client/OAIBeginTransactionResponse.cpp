/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBeginTransactionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBeginTransactionResponse::OAIBeginTransactionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBeginTransactionResponse::OAIBeginTransactionResponse() {
    this->initializeModel();
}

OAIBeginTransactionResponse::~OAIBeginTransactionResponse() {}

void OAIBeginTransactionResponse::initializeModel() {

    m_transaction_isSet = false;
    m_transaction_isValid = false;
}

void OAIBeginTransactionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBeginTransactionResponse::fromJsonObject(QJsonObject json) {

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;
}

QString OAIBeginTransactionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBeginTransactionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_transaction_isSet) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    return obj;
}

QByteArray OAIBeginTransactionResponse::getTransaction() const {
    return m_transaction;
}
void OAIBeginTransactionResponse::setTransaction(const QByteArray &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIBeginTransactionResponse::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIBeginTransactionResponse::is_transaction_Valid() const{
    return m_transaction_isValid;
}

bool OAIBeginTransactionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transaction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBeginTransactionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
