# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation_query import AggregationQuery
from openapi_server.models.aggregation_result_batch import AggregationResultBatch
from openapi_server import util


class RunAggregationQueryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch: AggregationResultBatch=None, query: AggregationQuery=None, transaction: str=None):
        """RunAggregationQueryResponse - a model defined in OpenAPI

        :param batch: The batch of this RunAggregationQueryResponse.
        :param query: The query of this RunAggregationQueryResponse.
        :param transaction: The transaction of this RunAggregationQueryResponse.
        """
        self.openapi_types = {
            'batch': AggregationResultBatch,
            'query': AggregationQuery,
            'transaction': str
        }

        self.attribute_map = {
            'batch': 'batch',
            'query': 'query',
            'transaction': 'transaction'
        }

        self._batch = batch
        self._query = query
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunAggregationQueryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunAggregationQueryResponse of this RunAggregationQueryResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch(self):
        """Gets the batch of this RunAggregationQueryResponse.


        :return: The batch of this RunAggregationQueryResponse.
        :rtype: AggregationResultBatch
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this RunAggregationQueryResponse.


        :param batch: The batch of this RunAggregationQueryResponse.
        :type batch: AggregationResultBatch
        """

        self._batch = batch

    @property
    def query(self):
        """Gets the query of this RunAggregationQueryResponse.


        :return: The query of this RunAggregationQueryResponse.
        :rtype: AggregationQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this RunAggregationQueryResponse.


        :param query: The query of this RunAggregationQueryResponse.
        :type query: AggregationQuery
        """

        self._query = query

    @property
    def transaction(self):
        """Gets the transaction of this RunAggregationQueryResponse.

        The identifier of the transaction that was started as part of this RunAggregationQuery request. Set only when ReadOptions.new_transaction was set in RunAggregationQueryRequest.read_options.

        :return: The transaction of this RunAggregationQueryResponse.
        :rtype: str
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this RunAggregationQueryResponse.

        The identifier of the transaction that was started as part of this RunAggregationQuery request. Set only when ReadOptions.new_transaction was set in RunAggregationQueryRequest.read_options.

        :param transaction: The transaction of this RunAggregationQueryResponse.
        :type transaction: str
        """

        self._transaction = transaction
