# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_result import EntityResult
from openapi_server import util


class QueryResultBatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_cursor: str=None, entity_result_type: str=None, entity_results: List[EntityResult]=None, more_results: str=None, read_time: str=None, skipped_cursor: str=None, skipped_results: int=None, snapshot_version: str=None):
        """QueryResultBatch - a model defined in OpenAPI

        :param end_cursor: The end_cursor of this QueryResultBatch.
        :param entity_result_type: The entity_result_type of this QueryResultBatch.
        :param entity_results: The entity_results of this QueryResultBatch.
        :param more_results: The more_results of this QueryResultBatch.
        :param read_time: The read_time of this QueryResultBatch.
        :param skipped_cursor: The skipped_cursor of this QueryResultBatch.
        :param skipped_results: The skipped_results of this QueryResultBatch.
        :param snapshot_version: The snapshot_version of this QueryResultBatch.
        """
        self.openapi_types = {
            'end_cursor': str,
            'entity_result_type': str,
            'entity_results': List[EntityResult],
            'more_results': str,
            'read_time': str,
            'skipped_cursor': str,
            'skipped_results': int,
            'snapshot_version': str
        }

        self.attribute_map = {
            'end_cursor': 'endCursor',
            'entity_result_type': 'entityResultType',
            'entity_results': 'entityResults',
            'more_results': 'moreResults',
            'read_time': 'readTime',
            'skipped_cursor': 'skippedCursor',
            'skipped_results': 'skippedResults',
            'snapshot_version': 'snapshotVersion'
        }

        self._end_cursor = end_cursor
        self._entity_result_type = entity_result_type
        self._entity_results = entity_results
        self._more_results = more_results
        self._read_time = read_time
        self._skipped_cursor = skipped_cursor
        self._skipped_results = skipped_results
        self._snapshot_version = snapshot_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryResultBatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryResultBatch of this QueryResultBatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_cursor(self):
        """Gets the end_cursor of this QueryResultBatch.

        A cursor that points to the position after the last result in the batch.

        :return: The end_cursor of this QueryResultBatch.
        :rtype: str
        """
        return self._end_cursor

    @end_cursor.setter
    def end_cursor(self, end_cursor):
        """Sets the end_cursor of this QueryResultBatch.

        A cursor that points to the position after the last result in the batch.

        :param end_cursor: The end_cursor of this QueryResultBatch.
        :type end_cursor: str
        """

        self._end_cursor = end_cursor

    @property
    def entity_result_type(self):
        """Gets the entity_result_type of this QueryResultBatch.

        The result type for every entity in `entity_results`.

        :return: The entity_result_type of this QueryResultBatch.
        :rtype: str
        """
        return self._entity_result_type

    @entity_result_type.setter
    def entity_result_type(self, entity_result_type):
        """Sets the entity_result_type of this QueryResultBatch.

        The result type for every entity in `entity_results`.

        :param entity_result_type: The entity_result_type of this QueryResultBatch.
        :type entity_result_type: str
        """
        allowed_values = ["RESULT_TYPE_UNSPECIFIED", "FULL", "PROJECTION", "KEY_ONLY"]  # noqa: E501
        if entity_result_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_result_type` ({0}), must be one of {1}"
                .format(entity_result_type, allowed_values)
            )

        self._entity_result_type = entity_result_type

    @property
    def entity_results(self):
        """Gets the entity_results of this QueryResultBatch.

        The results for this batch.

        :return: The entity_results of this QueryResultBatch.
        :rtype: List[EntityResult]
        """
        return self._entity_results

    @entity_results.setter
    def entity_results(self, entity_results):
        """Sets the entity_results of this QueryResultBatch.

        The results for this batch.

        :param entity_results: The entity_results of this QueryResultBatch.
        :type entity_results: List[EntityResult]
        """

        self._entity_results = entity_results

    @property
    def more_results(self):
        """Gets the more_results of this QueryResultBatch.

        The state of the query after the current batch.

        :return: The more_results of this QueryResultBatch.
        :rtype: str
        """
        return self._more_results

    @more_results.setter
    def more_results(self, more_results):
        """Sets the more_results of this QueryResultBatch.

        The state of the query after the current batch.

        :param more_results: The more_results of this QueryResultBatch.
        :type more_results: str
        """
        allowed_values = ["MORE_RESULTS_TYPE_UNSPECIFIED", "NOT_FINISHED", "MORE_RESULTS_AFTER_LIMIT", "MORE_RESULTS_AFTER_CURSOR", "NO_MORE_RESULTS"]  # noqa: E501
        if more_results not in allowed_values:
            raise ValueError(
                "Invalid value for `more_results` ({0}), must be one of {1}"
                .format(more_results, allowed_values)
            )

        self._more_results = more_results

    @property
    def read_time(self):
        """Gets the read_time of this QueryResultBatch.

        Read timestamp this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches. This value will not be set for eventually consistent queries in Cloud Datastore.

        :return: The read_time of this QueryResultBatch.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time):
        """Sets the read_time of this QueryResultBatch.

        Read timestamp this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches. This value will not be set for eventually consistent queries in Cloud Datastore.

        :param read_time: The read_time of this QueryResultBatch.
        :type read_time: str
        """

        self._read_time = read_time

    @property
    def skipped_cursor(self):
        """Gets the skipped_cursor of this QueryResultBatch.

        A cursor that points to the position after the last skipped result. Will be set when `skipped_results` != 0.

        :return: The skipped_cursor of this QueryResultBatch.
        :rtype: str
        """
        return self._skipped_cursor

    @skipped_cursor.setter
    def skipped_cursor(self, skipped_cursor):
        """Sets the skipped_cursor of this QueryResultBatch.

        A cursor that points to the position after the last skipped result. Will be set when `skipped_results` != 0.

        :param skipped_cursor: The skipped_cursor of this QueryResultBatch.
        :type skipped_cursor: str
        """

        self._skipped_cursor = skipped_cursor

    @property
    def skipped_results(self):
        """Gets the skipped_results of this QueryResultBatch.

        The number of results skipped, typically because of an offset.

        :return: The skipped_results of this QueryResultBatch.
        :rtype: int
        """
        return self._skipped_results

    @skipped_results.setter
    def skipped_results(self, skipped_results):
        """Sets the skipped_results of this QueryResultBatch.

        The number of results skipped, typically because of an offset.

        :param skipped_results: The skipped_results of this QueryResultBatch.
        :type skipped_results: int
        """

        self._skipped_results = skipped_results

    @property
    def snapshot_version(self):
        """Gets the snapshot_version of this QueryResultBatch.

        The version number of the snapshot this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater snapshot version number. Each batch's snapshot version is valid for all preceding batches. The value will be zero for eventually consistent queries.

        :return: The snapshot_version of this QueryResultBatch.
        :rtype: str
        """
        return self._snapshot_version

    @snapshot_version.setter
    def snapshot_version(self, snapshot_version):
        """Sets the snapshot_version of this QueryResultBatch.

        The version number of the snapshot this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater snapshot version number. Each batch's snapshot version is valid for all preceding batches. The value will be zero for eventually consistent queries.

        :param snapshot_version: The snapshot_version of this QueryResultBatch.
        :type snapshot_version: str
        """

        self._snapshot_version = snapshot_version
