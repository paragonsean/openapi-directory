# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleDatastoreAdminV1RedirectWritesStepDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concurrency_mode: str=None):
        """GoogleDatastoreAdminV1RedirectWritesStepDetails - a model defined in OpenAPI

        :param concurrency_mode: The concurrency_mode of this GoogleDatastoreAdminV1RedirectWritesStepDetails.
        """
        self.openapi_types = {
            'concurrency_mode': str
        }

        self.attribute_map = {
            'concurrency_mode': 'concurrencyMode'
        }

        self._concurrency_mode = concurrency_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleDatastoreAdminV1RedirectWritesStepDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleDatastoreAdminV1RedirectWritesStepDetails of this GoogleDatastoreAdminV1RedirectWritesStepDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concurrency_mode(self):
        """Gets the concurrency_mode of this GoogleDatastoreAdminV1RedirectWritesStepDetails.

        Ths concurrency mode for this database.

        :return: The concurrency_mode of this GoogleDatastoreAdminV1RedirectWritesStepDetails.
        :rtype: str
        """
        return self._concurrency_mode

    @concurrency_mode.setter
    def concurrency_mode(self, concurrency_mode):
        """Sets the concurrency_mode of this GoogleDatastoreAdminV1RedirectWritesStepDetails.

        Ths concurrency mode for this database.

        :param concurrency_mode: The concurrency_mode of this GoogleDatastoreAdminV1RedirectWritesStepDetails.
        :type concurrency_mode: str
        """
        allowed_values = ["CONCURRENCY_MODE_UNSPECIFIED", "PESSIMISTIC", "OPTIMISTIC", "OPTIMISTIC_WITH_ENTITY_GROUPS"]  # noqa: E501
        if concurrency_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `concurrency_mode` ({0}), must be one of {1}"
                .format(concurrency_mode, allowed_values)
            )

        self._concurrency_mode = concurrency_mode
