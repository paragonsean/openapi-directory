# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleDatastoreAdminV1beta1CommonMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, labels: Dict[str, str]=None, operation_type: str=None, start_time: str=None, state: str=None):
        """GoogleDatastoreAdminV1beta1CommonMetadata - a model defined in OpenAPI

        :param end_time: The end_time of this GoogleDatastoreAdminV1beta1CommonMetadata.
        :param labels: The labels of this GoogleDatastoreAdminV1beta1CommonMetadata.
        :param operation_type: The operation_type of this GoogleDatastoreAdminV1beta1CommonMetadata.
        :param start_time: The start_time of this GoogleDatastoreAdminV1beta1CommonMetadata.
        :param state: The state of this GoogleDatastoreAdminV1beta1CommonMetadata.
        """
        self.openapi_types = {
            'end_time': str,
            'labels': Dict[str, str],
            'operation_type': str,
            'start_time': str,
            'state': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'labels': 'labels',
            'operation_type': 'operationType',
            'start_time': 'startTime',
            'state': 'state'
        }

        self._end_time = end_time
        self._labels = labels
        self._operation_type = operation_type
        self._start_time = start_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleDatastoreAdminV1beta1CommonMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleDatastoreAdminV1beta1CommonMetadata of this GoogleDatastoreAdminV1beta1CommonMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this GoogleDatastoreAdminV1beta1CommonMetadata.

        The time the operation ended, either successfully or otherwise.

        :return: The end_time of this GoogleDatastoreAdminV1beta1CommonMetadata.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GoogleDatastoreAdminV1beta1CommonMetadata.

        The time the operation ended, either successfully or otherwise.

        :param end_time: The end_time of this GoogleDatastoreAdminV1beta1CommonMetadata.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def labels(self):
        """Gets the labels of this GoogleDatastoreAdminV1beta1CommonMetadata.

        The client-assigned labels which were provided when the operation was created. May also include additional labels.

        :return: The labels of this GoogleDatastoreAdminV1beta1CommonMetadata.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleDatastoreAdminV1beta1CommonMetadata.

        The client-assigned labels which were provided when the operation was created. May also include additional labels.

        :param labels: The labels of this GoogleDatastoreAdminV1beta1CommonMetadata.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def operation_type(self):
        """Gets the operation_type of this GoogleDatastoreAdminV1beta1CommonMetadata.

        The type of the operation. Can be used as a filter in ListOperationsRequest.

        :return: The operation_type of this GoogleDatastoreAdminV1beta1CommonMetadata.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this GoogleDatastoreAdminV1beta1CommonMetadata.

        The type of the operation. Can be used as a filter in ListOperationsRequest.

        :param operation_type: The operation_type of this GoogleDatastoreAdminV1beta1CommonMetadata.
        :type operation_type: str
        """
        allowed_values = ["OPERATION_TYPE_UNSPECIFIED", "EXPORT_ENTITIES", "IMPORT_ENTITIES"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type

    @property
    def start_time(self):
        """Gets the start_time of this GoogleDatastoreAdminV1beta1CommonMetadata.

        The time that work began on the operation.

        :return: The start_time of this GoogleDatastoreAdminV1beta1CommonMetadata.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleDatastoreAdminV1beta1CommonMetadata.

        The time that work began on the operation.

        :param start_time: The start_time of this GoogleDatastoreAdminV1beta1CommonMetadata.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this GoogleDatastoreAdminV1beta1CommonMetadata.

        The current state of the Operation.

        :return: The state of this GoogleDatastoreAdminV1beta1CommonMetadata.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleDatastoreAdminV1beta1CommonMetadata.

        The current state of the Operation.

        :param state: The state of this GoogleDatastoreAdminV1beta1CommonMetadata.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "INITIALIZING", "PROCESSING", "CANCELLING", "FINALIZING", "SUCCESSFUL", "FAILED", "CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
