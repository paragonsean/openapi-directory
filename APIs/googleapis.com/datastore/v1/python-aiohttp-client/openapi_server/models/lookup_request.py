# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key import Key
from openapi_server.models.read_options import ReadOptions
from openapi_server import util


class LookupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_id: str=None, keys: List[Key]=None, read_options: ReadOptions=None):
        """LookupRequest - a model defined in OpenAPI

        :param database_id: The database_id of this LookupRequest.
        :param keys: The keys of this LookupRequest.
        :param read_options: The read_options of this LookupRequest.
        """
        self.openapi_types = {
            'database_id': str,
            'keys': List[Key],
            'read_options': ReadOptions
        }

        self.attribute_map = {
            'database_id': 'databaseId',
            'keys': 'keys',
            'read_options': 'readOptions'
        }

        self._database_id = database_id
        self._keys = keys
        self._read_options = read_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LookupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LookupRequest of this LookupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_id(self):
        """Gets the database_id of this LookupRequest.

        The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.

        :return: The database_id of this LookupRequest.
        :rtype: str
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """Sets the database_id of this LookupRequest.

        The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.

        :param database_id: The database_id of this LookupRequest.
        :type database_id: str
        """

        self._database_id = database_id

    @property
    def keys(self):
        """Gets the keys of this LookupRequest.

        Required. Keys of entities to look up.

        :return: The keys of this LookupRequest.
        :rtype: List[Key]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this LookupRequest.

        Required. Keys of entities to look up.

        :param keys: The keys of this LookupRequest.
        :type keys: List[Key]
        """

        self._keys = keys

    @property
    def read_options(self):
        """Gets the read_options of this LookupRequest.


        :return: The read_options of this LookupRequest.
        :rtype: ReadOptions
        """
        return self._read_options

    @read_options.setter
    def read_options(self, read_options):
        """Sets the read_options of this LookupRequest.


        :param read_options: The read_options of this LookupRequest.
        :type read_options: ReadOptions
        """

        self._read_options = read_options
