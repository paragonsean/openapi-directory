# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partition_id import PartitionId
from openapi_server.models.path_element import PathElement
from openapi_server import util


class Key(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, partition_id: PartitionId=None, path: List[PathElement]=None):
        """Key - a model defined in OpenAPI

        :param partition_id: The partition_id of this Key.
        :param path: The path of this Key.
        """
        self.openapi_types = {
            'partition_id': PartitionId,
            'path': List[PathElement]
        }

        self.attribute_map = {
            'partition_id': 'partitionId',
            'path': 'path'
        }

        self._partition_id = partition_id
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Key':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Key of this Key.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def partition_id(self):
        """Gets the partition_id of this Key.


        :return: The partition_id of this Key.
        :rtype: PartitionId
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this Key.


        :param partition_id: The partition_id of this Key.
        :type partition_id: PartitionId
        """

        self._partition_id = partition_id

    @property
    def path(self):
        """Gets the path of this Key.

        The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements.

        :return: The path of this Key.
        :rtype: List[PathElement]
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Key.

        The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements.

        :param path: The path of this Key.
        :type path: List[PathElement]
        """

        self._path = path
