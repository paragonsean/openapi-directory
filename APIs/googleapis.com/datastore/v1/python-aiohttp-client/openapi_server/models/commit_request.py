# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mutation import Mutation
from openapi_server.models.transaction_options import TransactionOptions
from openapi_server import util


class CommitRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_id: str=None, mode: str=None, mutations: List[Mutation]=None, single_use_transaction: TransactionOptions=None, transaction: str=None):
        """CommitRequest - a model defined in OpenAPI

        :param database_id: The database_id of this CommitRequest.
        :param mode: The mode of this CommitRequest.
        :param mutations: The mutations of this CommitRequest.
        :param single_use_transaction: The single_use_transaction of this CommitRequest.
        :param transaction: The transaction of this CommitRequest.
        """
        self.openapi_types = {
            'database_id': str,
            'mode': str,
            'mutations': List[Mutation],
            'single_use_transaction': TransactionOptions,
            'transaction': str
        }

        self.attribute_map = {
            'database_id': 'databaseId',
            'mode': 'mode',
            'mutations': 'mutations',
            'single_use_transaction': 'singleUseTransaction',
            'transaction': 'transaction'
        }

        self._database_id = database_id
        self._mode = mode
        self._mutations = mutations
        self._single_use_transaction = single_use_transaction
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommitRequest of this CommitRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_id(self):
        """Gets the database_id of this CommitRequest.

        The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.

        :return: The database_id of this CommitRequest.
        :rtype: str
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """Sets the database_id of this CommitRequest.

        The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.

        :param database_id: The database_id of this CommitRequest.
        :type database_id: str
        """

        self._database_id = database_id

    @property
    def mode(self):
        """Gets the mode of this CommitRequest.

        The type of commit to perform. Defaults to `TRANSACTIONAL`.

        :return: The mode of this CommitRequest.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this CommitRequest.

        The type of commit to perform. Defaults to `TRANSACTIONAL`.

        :param mode: The mode of this CommitRequest.
        :type mode: str
        """
        allowed_values = ["MODE_UNSPECIFIED", "TRANSACTIONAL", "NON_TRANSACTIONAL"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def mutations(self):
        """Gets the mutations of this CommitRequest.

        The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity.

        :return: The mutations of this CommitRequest.
        :rtype: List[Mutation]
        """
        return self._mutations

    @mutations.setter
    def mutations(self, mutations):
        """Sets the mutations of this CommitRequest.

        The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity.

        :param mutations: The mutations of this CommitRequest.
        :type mutations: List[Mutation]
        """

        self._mutations = mutations

    @property
    def single_use_transaction(self):
        """Gets the single_use_transaction of this CommitRequest.


        :return: The single_use_transaction of this CommitRequest.
        :rtype: TransactionOptions
        """
        return self._single_use_transaction

    @single_use_transaction.setter
    def single_use_transaction(self, single_use_transaction):
        """Sets the single_use_transaction of this CommitRequest.


        :param single_use_transaction: The single_use_transaction of this CommitRequest.
        :type single_use_transaction: TransactionOptions
        """

        self._single_use_transaction = single_use_transaction

    @property
    def transaction(self):
        """Gets the transaction of this CommitRequest.

        The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction.

        :return: The transaction of this CommitRequest.
        :rtype: str
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this CommitRequest.

        The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction.

        :param transaction: The transaction of this CommitRequest.
        :type transaction: str
        """

        self._transaction = transaction
