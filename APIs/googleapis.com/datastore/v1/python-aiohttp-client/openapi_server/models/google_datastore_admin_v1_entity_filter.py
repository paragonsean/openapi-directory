# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleDatastoreAdminV1EntityFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kinds: List[str]=None, namespace_ids: List[str]=None):
        """GoogleDatastoreAdminV1EntityFilter - a model defined in OpenAPI

        :param kinds: The kinds of this GoogleDatastoreAdminV1EntityFilter.
        :param namespace_ids: The namespace_ids of this GoogleDatastoreAdminV1EntityFilter.
        """
        self.openapi_types = {
            'kinds': List[str],
            'namespace_ids': List[str]
        }

        self.attribute_map = {
            'kinds': 'kinds',
            'namespace_ids': 'namespaceIds'
        }

        self._kinds = kinds
        self._namespace_ids = namespace_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleDatastoreAdminV1EntityFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleDatastoreAdminV1EntityFilter of this GoogleDatastoreAdminV1EntityFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kinds(self):
        """Gets the kinds of this GoogleDatastoreAdminV1EntityFilter.

        If empty, then this represents all kinds.

        :return: The kinds of this GoogleDatastoreAdminV1EntityFilter.
        :rtype: List[str]
        """
        return self._kinds

    @kinds.setter
    def kinds(self, kinds):
        """Sets the kinds of this GoogleDatastoreAdminV1EntityFilter.

        If empty, then this represents all kinds.

        :param kinds: The kinds of this GoogleDatastoreAdminV1EntityFilter.
        :type kinds: List[str]
        """

        self._kinds = kinds

    @property
    def namespace_ids(self):
        """Gets the namespace_ids of this GoogleDatastoreAdminV1EntityFilter.

        An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.

        :return: The namespace_ids of this GoogleDatastoreAdminV1EntityFilter.
        :rtype: List[str]
        """
        return self._namespace_ids

    @namespace_ids.setter
    def namespace_ids(self, namespace_ids):
        """Sets the namespace_ids of this GoogleDatastoreAdminV1EntityFilter.

        An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.

        :param namespace_ids: The namespace_ids of this GoogleDatastoreAdminV1EntityFilter.
        :type namespace_ids: List[str]
        """

        self._namespace_ids = namespace_ids
