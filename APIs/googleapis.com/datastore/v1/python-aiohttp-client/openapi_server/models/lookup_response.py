# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_result import EntityResult
from openapi_server.models.key import Key
from openapi_server import util


class LookupResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deferred: List[Key]=None, found: List[EntityResult]=None, missing: List[EntityResult]=None, read_time: str=None, transaction: str=None):
        """LookupResponse - a model defined in OpenAPI

        :param deferred: The deferred of this LookupResponse.
        :param found: The found of this LookupResponse.
        :param missing: The missing of this LookupResponse.
        :param read_time: The read_time of this LookupResponse.
        :param transaction: The transaction of this LookupResponse.
        """
        self.openapi_types = {
            'deferred': List[Key],
            'found': List[EntityResult],
            'missing': List[EntityResult],
            'read_time': str,
            'transaction': str
        }

        self.attribute_map = {
            'deferred': 'deferred',
            'found': 'found',
            'missing': 'missing',
            'read_time': 'readTime',
            'transaction': 'transaction'
        }

        self._deferred = deferred
        self._found = found
        self._missing = missing
        self._read_time = read_time
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LookupResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LookupResponse of this LookupResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deferred(self):
        """Gets the deferred of this LookupResponse.

        A list of keys that were not looked up due to resource constraints. The order of results in this field is undefined and has no relation to the order of the keys in the input.

        :return: The deferred of this LookupResponse.
        :rtype: List[Key]
        """
        return self._deferred

    @deferred.setter
    def deferred(self, deferred):
        """Sets the deferred of this LookupResponse.

        A list of keys that were not looked up due to resource constraints. The order of results in this field is undefined and has no relation to the order of the keys in the input.

        :param deferred: The deferred of this LookupResponse.
        :type deferred: List[Key]
        """

        self._deferred = deferred

    @property
    def found(self):
        """Gets the found of this LookupResponse.

        Entities found as `ResultType.FULL` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.

        :return: The found of this LookupResponse.
        :rtype: List[EntityResult]
        """
        return self._found

    @found.setter
    def found(self, found):
        """Sets the found of this LookupResponse.

        Entities found as `ResultType.FULL` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.

        :param found: The found of this LookupResponse.
        :type found: List[EntityResult]
        """

        self._found = found

    @property
    def missing(self):
        """Gets the missing of this LookupResponse.

        Entities not found as `ResultType.KEY_ONLY` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.

        :return: The missing of this LookupResponse.
        :rtype: List[EntityResult]
        """
        return self._missing

    @missing.setter
    def missing(self, missing):
        """Sets the missing of this LookupResponse.

        Entities not found as `ResultType.KEY_ONLY` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.

        :param missing: The missing of this LookupResponse.
        :type missing: List[EntityResult]
        """

        self._missing = missing

    @property
    def read_time(self):
        """Gets the read_time of this LookupResponse.

        The time at which these entities were read or found missing.

        :return: The read_time of this LookupResponse.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time):
        """Sets the read_time of this LookupResponse.

        The time at which these entities were read or found missing.

        :param read_time: The read_time of this LookupResponse.
        :type read_time: str
        """

        self._read_time = read_time

    @property
    def transaction(self):
        """Gets the transaction of this LookupResponse.

        The identifier of the transaction that was started as part of this Lookup request. Set only when ReadOptions.new_transaction was set in LookupRequest.read_options.

        :return: The transaction of this LookupResponse.
        :rtype: str
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this LookupResponse.

        The identifier of the transaction that was started as part of this Lookup request. Set only when ReadOptions.new_transaction was set in LookupRequest.read_options.

        :param transaction: The transaction of this LookupResponse.
        :type transaction: str
        """

        self._transaction = transaction
