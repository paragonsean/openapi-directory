# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_datastore_admin_v1_indexed_property import GoogleDatastoreAdminV1IndexedProperty
from openapi_server import util


class GoogleDatastoreAdminV1Index(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ancestor: str=None, index_id: str=None, kind: str=None, project_id: str=None, properties: List[GoogleDatastoreAdminV1IndexedProperty]=None, state: str=None):
        """GoogleDatastoreAdminV1Index - a model defined in OpenAPI

        :param ancestor: The ancestor of this GoogleDatastoreAdminV1Index.
        :param index_id: The index_id of this GoogleDatastoreAdminV1Index.
        :param kind: The kind of this GoogleDatastoreAdminV1Index.
        :param project_id: The project_id of this GoogleDatastoreAdminV1Index.
        :param properties: The properties of this GoogleDatastoreAdminV1Index.
        :param state: The state of this GoogleDatastoreAdminV1Index.
        """
        self.openapi_types = {
            'ancestor': str,
            'index_id': str,
            'kind': str,
            'project_id': str,
            'properties': List[GoogleDatastoreAdminV1IndexedProperty],
            'state': str
        }

        self.attribute_map = {
            'ancestor': 'ancestor',
            'index_id': 'indexId',
            'kind': 'kind',
            'project_id': 'projectId',
            'properties': 'properties',
            'state': 'state'
        }

        self._ancestor = ancestor
        self._index_id = index_id
        self._kind = kind
        self._project_id = project_id
        self._properties = properties
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleDatastoreAdminV1Index':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleDatastoreAdminV1Index of this GoogleDatastoreAdminV1Index.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ancestor(self):
        """Gets the ancestor of this GoogleDatastoreAdminV1Index.

        Required. The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED.

        :return: The ancestor of this GoogleDatastoreAdminV1Index.
        :rtype: str
        """
        return self._ancestor

    @ancestor.setter
    def ancestor(self, ancestor):
        """Sets the ancestor of this GoogleDatastoreAdminV1Index.

        Required. The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED.

        :param ancestor: The ancestor of this GoogleDatastoreAdminV1Index.
        :type ancestor: str
        """
        allowed_values = ["ANCESTOR_MODE_UNSPECIFIED", "NONE", "ALL_ANCESTORS"]  # noqa: E501
        if ancestor not in allowed_values:
            raise ValueError(
                "Invalid value for `ancestor` ({0}), must be one of {1}"
                .format(ancestor, allowed_values)
            )

        self._ancestor = ancestor

    @property
    def index_id(self):
        """Gets the index_id of this GoogleDatastoreAdminV1Index.

        Output only. The resource ID of the index.

        :return: The index_id of this GoogleDatastoreAdminV1Index.
        :rtype: str
        """
        return self._index_id

    @index_id.setter
    def index_id(self, index_id):
        """Sets the index_id of this GoogleDatastoreAdminV1Index.

        Output only. The resource ID of the index.

        :param index_id: The index_id of this GoogleDatastoreAdminV1Index.
        :type index_id: str
        """

        self._index_id = index_id

    @property
    def kind(self):
        """Gets the kind of this GoogleDatastoreAdminV1Index.

        Required. The entity kind to which this index applies.

        :return: The kind of this GoogleDatastoreAdminV1Index.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this GoogleDatastoreAdminV1Index.

        Required. The entity kind to which this index applies.

        :param kind: The kind of this GoogleDatastoreAdminV1Index.
        :type kind: str
        """

        self._kind = kind

    @property
    def project_id(self):
        """Gets the project_id of this GoogleDatastoreAdminV1Index.

        Output only. Project ID.

        :return: The project_id of this GoogleDatastoreAdminV1Index.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GoogleDatastoreAdminV1Index.

        Output only. Project ID.

        :param project_id: The project_id of this GoogleDatastoreAdminV1Index.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def properties(self):
        """Gets the properties of this GoogleDatastoreAdminV1Index.

        Required. An ordered sequence of property names and their index attributes. Requires: * A maximum of 100 properties.

        :return: The properties of this GoogleDatastoreAdminV1Index.
        :rtype: List[GoogleDatastoreAdminV1IndexedProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this GoogleDatastoreAdminV1Index.

        Required. An ordered sequence of property names and their index attributes. Requires: * A maximum of 100 properties.

        :param properties: The properties of this GoogleDatastoreAdminV1Index.
        :type properties: List[GoogleDatastoreAdminV1IndexedProperty]
        """

        self._properties = properties

    @property
    def state(self):
        """Gets the state of this GoogleDatastoreAdminV1Index.

        Output only. The state of the index.

        :return: The state of this GoogleDatastoreAdminV1Index.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleDatastoreAdminV1Index.

        Output only. The state of the index.

        :param state: The state of this GoogleDatastoreAdminV1Index.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "READY", "DELETING", "ERROR"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
