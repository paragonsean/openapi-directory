# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, migration_state: str=None, migration_step: str=None):
        """GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata - a model defined in OpenAPI

        :param migration_state: The migration_state of this GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.
        :param migration_step: The migration_step of this GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.
        """
        self.openapi_types = {
            'migration_state': str,
            'migration_step': str
        }

        self.attribute_map = {
            'migration_state': 'migrationState',
            'migration_step': 'migrationStep'
        }

        self._migration_state = migration_state
        self._migration_step = migration_step

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata of this GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def migration_state(self):
        """Gets the migration_state of this GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.

        The current state of migration from Cloud Datastore to Cloud Firestore in Datastore mode.

        :return: The migration_state of this GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.
        :rtype: str
        """
        return self._migration_state

    @migration_state.setter
    def migration_state(self, migration_state):
        """Sets the migration_state of this GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.

        The current state of migration from Cloud Datastore to Cloud Firestore in Datastore mode.

        :param migration_state: The migration_state of this GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.
        :type migration_state: str
        """
        allowed_values = ["MIGRATION_STATE_UNSPECIFIED", "RUNNING", "PAUSED", "COMPLETE"]  # noqa: E501
        if migration_state not in allowed_values:
            raise ValueError(
                "Invalid value for `migration_state` ({0}), must be one of {1}"
                .format(migration_state, allowed_values)
            )

        self._migration_state = migration_state

    @property
    def migration_step(self):
        """Gets the migration_step of this GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.

        The current step of migration from Cloud Datastore to Cloud Firestore in Datastore mode.

        :return: The migration_step of this GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.
        :rtype: str
        """
        return self._migration_step

    @migration_step.setter
    def migration_step(self, migration_step):
        """Sets the migration_step of this GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.

        The current step of migration from Cloud Datastore to Cloud Firestore in Datastore mode.

        :param migration_step: The migration_step of this GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.
        :type migration_step: str
        """
        allowed_values = ["MIGRATION_STEP_UNSPECIFIED", "PREPARE", "START", "APPLY_WRITES_SYNCHRONOUSLY", "COPY_AND_VERIFY", "REDIRECT_EVENTUALLY_CONSISTENT_READS", "REDIRECT_STRONGLY_CONSISTENT_READS", "REDIRECT_WRITES"]  # noqa: E501
        if migration_step not in allowed_values:
            raise ValueError(
                "Invalid value for `migration_step` ({0}), must be one of {1}"
                .format(migration_step, allowed_values)
            )

        self._migration_step = migration_step
