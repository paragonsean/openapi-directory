# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.composite_filter import CompositeFilter
from openapi_server.models.property_filter import PropertyFilter
from openapi_server import util


class Filter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, composite_filter: CompositeFilter=None, property_filter: PropertyFilter=None):
        """Filter - a model defined in OpenAPI

        :param composite_filter: The composite_filter of this Filter.
        :param property_filter: The property_filter of this Filter.
        """
        self.openapi_types = {
            'composite_filter': CompositeFilter,
            'property_filter': PropertyFilter
        }

        self.attribute_map = {
            'composite_filter': 'compositeFilter',
            'property_filter': 'propertyFilter'
        }

        self._composite_filter = composite_filter
        self._property_filter = property_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Filter of this Filter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def composite_filter(self):
        """Gets the composite_filter of this Filter.


        :return: The composite_filter of this Filter.
        :rtype: CompositeFilter
        """
        return self._composite_filter

    @composite_filter.setter
    def composite_filter(self, composite_filter):
        """Sets the composite_filter of this Filter.


        :param composite_filter: The composite_filter of this Filter.
        :type composite_filter: CompositeFilter
        """

        self._composite_filter = composite_filter

    @property
    def property_filter(self):
        """Gets the property_filter of this Filter.


        :return: The property_filter of this Filter.
        :rtype: PropertyFilter
        """
        return self._property_filter

    @property_filter.setter
    def property_filter(self, property_filter):
        """Sets the property_filter of this Filter.


        :param property_filter: The property_filter of this Filter.
        :type property_filter: PropertyFilter
        """

        self._property_filter = property_filter
