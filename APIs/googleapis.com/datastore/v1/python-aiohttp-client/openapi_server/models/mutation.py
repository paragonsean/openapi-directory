# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity import Entity
from openapi_server.models.key import Key
from openapi_server import util


class Mutation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_version: str=None, delete: Key=None, insert: Entity=None, update: Entity=None, update_time: str=None, upsert: Entity=None):
        """Mutation - a model defined in OpenAPI

        :param base_version: The base_version of this Mutation.
        :param delete: The delete of this Mutation.
        :param insert: The insert of this Mutation.
        :param update: The update of this Mutation.
        :param update_time: The update_time of this Mutation.
        :param upsert: The upsert of this Mutation.
        """
        self.openapi_types = {
            'base_version': str,
            'delete': Key,
            'insert': Entity,
            'update': Entity,
            'update_time': str,
            'upsert': Entity
        }

        self.attribute_map = {
            'base_version': 'baseVersion',
            'delete': 'delete',
            'insert': 'insert',
            'update': 'update',
            'update_time': 'updateTime',
            'upsert': 'upsert'
        }

        self._base_version = base_version
        self._delete = delete
        self._insert = insert
        self._update = update
        self._update_time = update_time
        self._upsert = upsert

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Mutation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Mutation of this Mutation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_version(self):
        """Gets the base_version of this Mutation.

        The version of the entity that this mutation is being applied to. If this does not match the current version on the server, the mutation conflicts.

        :return: The base_version of this Mutation.
        :rtype: str
        """
        return self._base_version

    @base_version.setter
    def base_version(self, base_version):
        """Sets the base_version of this Mutation.

        The version of the entity that this mutation is being applied to. If this does not match the current version on the server, the mutation conflicts.

        :param base_version: The base_version of this Mutation.
        :type base_version: str
        """

        self._base_version = base_version

    @property
    def delete(self):
        """Gets the delete of this Mutation.


        :return: The delete of this Mutation.
        :rtype: Key
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this Mutation.


        :param delete: The delete of this Mutation.
        :type delete: Key
        """

        self._delete = delete

    @property
    def insert(self):
        """Gets the insert of this Mutation.


        :return: The insert of this Mutation.
        :rtype: Entity
        """
        return self._insert

    @insert.setter
    def insert(self, insert):
        """Sets the insert of this Mutation.


        :param insert: The insert of this Mutation.
        :type insert: Entity
        """

        self._insert = insert

    @property
    def update(self):
        """Gets the update of this Mutation.


        :return: The update of this Mutation.
        :rtype: Entity
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this Mutation.


        :param update: The update of this Mutation.
        :type update: Entity
        """

        self._update = update

    @property
    def update_time(self):
        """Gets the update_time of this Mutation.

        The update time of the entity that this mutation is being applied to. If this does not match the current update time on the server, the mutation conflicts.

        :return: The update_time of this Mutation.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Mutation.

        The update time of the entity that this mutation is being applied to. If this does not match the current update time on the server, the mutation conflicts.

        :param update_time: The update_time of this Mutation.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def upsert(self):
        """Gets the upsert of this Mutation.


        :return: The upsert of this Mutation.
        :rtype: Entity
        """
        return self._upsert

    @upsert.setter
    def upsert(self, upsert):
        """Sets the upsert of this Mutation.


        :param upsert: The upsert of this Mutation.
        :type upsert: Entity
        """

        self._upsert = upsert
