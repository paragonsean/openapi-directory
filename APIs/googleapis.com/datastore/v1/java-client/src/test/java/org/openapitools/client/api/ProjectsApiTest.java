/*
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AllocateIdsRequest;
import org.openapitools.client.model.AllocateIdsResponse;
import org.openapitools.client.model.BeginTransactionRequest;
import org.openapitools.client.model.BeginTransactionResponse;
import org.openapitools.client.model.CommitRequest;
import org.openapitools.client.model.CommitResponse;
import org.openapitools.client.model.GoogleDatastoreAdminV1ExportEntitiesRequest;
import org.openapitools.client.model.GoogleDatastoreAdminV1ImportEntitiesRequest;
import org.openapitools.client.model.GoogleDatastoreAdminV1Index;
import org.openapitools.client.model.GoogleDatastoreAdminV1ListIndexesResponse;
import org.openapitools.client.model.GoogleLongrunningListOperationsResponse;
import org.openapitools.client.model.GoogleLongrunningOperation;
import org.openapitools.client.model.LookupRequest;
import org.openapitools.client.model.LookupResponse;
import org.openapitools.client.model.ReserveIdsRequest;
import org.openapitools.client.model.RollbackRequest;
import org.openapitools.client.model.RunAggregationQueryRequest;
import org.openapitools.client.model.RunAggregationQueryResponse;
import org.openapitools.client.model.RunQueryRequest;
import org.openapitools.client.model.RunQueryResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsAllocateIdsTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AllocateIdsRequest allocateIdsRequest = null;
        AllocateIdsResponse response = api.datastoreProjectsAllocateIds(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allocateIdsRequest);
        // TODO: test validations
    }

    /**
     * Begins a new transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsBeginTransactionTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BeginTransactionRequest beginTransactionRequest = null;
        BeginTransactionResponse response = api.datastoreProjectsBeginTransaction(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, beginTransactionRequest);
        // TODO: test validations
    }

    /**
     * Commits a transaction, optionally creating, deleting or modifying some entities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsCommitTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CommitRequest commitRequest = null;
        CommitResponse response = api.datastoreProjectsCommit(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, commitRequest);
        // TODO: test validations
    }

    /**
     * Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsExportTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleDatastoreAdminV1ExportEntitiesRequest googleDatastoreAdminV1ExportEntitiesRequest = null;
        GoogleLongrunningOperation response = api.datastoreProjectsExport(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleDatastoreAdminV1ExportEntitiesRequest);
        // TODO: test validations
    }

    /**
     * Imports entities into Google Cloud Datastore. Existing entities with the same key are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportEntities operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Datastore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsImportTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleDatastoreAdminV1ImportEntitiesRequest googleDatastoreAdminV1ImportEntitiesRequest = null;
        GoogleLongrunningOperation response = api.datastoreProjectsImport(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleDatastoreAdminV1ImportEntitiesRequest);
        // TODO: test validations
    }

    /**
     * Creates the specified index. A newly created index&#39;s initial state is &#x60;CREATING&#x60;. On completion of the returned google.longrunning.Operation, the state will be &#x60;READY&#x60;. If the index already exists, the call will return an &#x60;ALREADY_EXISTS&#x60; status. During index creation, the process could result in an error, in which case the index will move to the &#x60;ERROR&#x60; state. The process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsIndexesCreateTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleDatastoreAdminV1Index googleDatastoreAdminV1Index = null;
        GoogleLongrunningOperation response = api.datastoreProjectsIndexesCreate(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleDatastoreAdminV1Index);
        // TODO: test validations
    }

    /**
     * Deletes an existing index. An index can only be deleted if it is in a &#x60;READY&#x60; or &#x60;ERROR&#x60; state. On successful execution of the request, the index will be in a &#x60;DELETING&#x60; state. And on completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the &#x60;ERROR&#x60; state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsIndexesDeleteTest() throws ApiException {
        String projectId = null;
        String indexId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleLongrunningOperation response = api.datastoreProjectsIndexesDelete(projectId, indexId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets an index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsIndexesGetTest() throws ApiException {
        String projectId = null;
        String indexId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleDatastoreAdminV1Index response = api.datastoreProjectsIndexesGet(projectId, indexId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsIndexesListTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleDatastoreAdminV1ListIndexesResponse response = api.datastoreProjectsIndexesList(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Looks up entities by key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsLookupTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LookupRequest lookupRequest = null;
        LookupResponse response = api.datastoreProjectsLookup(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, lookupRequest);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.datastoreProjectsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsOperationsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.datastoreProjectsOperationsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsOperationsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleLongrunningOperation response = api.datastoreProjectsOperationsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleLongrunningListOperationsResponse response = api.datastoreProjectsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Prevents the supplied keys&#39; IDs from being auto-allocated by Cloud Datastore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsReserveIdsTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReserveIdsRequest reserveIdsRequest = null;
        Object response = api.datastoreProjectsReserveIds(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reserveIdsRequest);
        // TODO: test validations
    }

    /**
     * Rolls back a transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsRollbackTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RollbackRequest rollbackRequest = null;
        Object response = api.datastoreProjectsRollback(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, rollbackRequest);
        // TODO: test validations
    }

    /**
     * Runs an aggregation query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsRunAggregationQueryTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RunAggregationQueryRequest runAggregationQueryRequest = null;
        RunAggregationQueryResponse response = api.datastoreProjectsRunAggregationQuery(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, runAggregationQueryRequest);
        // TODO: test validations
    }

    /**
     * Queries for entities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsRunQueryTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RunQueryRequest runQueryRequest = null;
        RunQueryResponse response = api.datastoreProjectsRunQuery(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, runQueryRequest);
        // TODO: test validations
    }

}
