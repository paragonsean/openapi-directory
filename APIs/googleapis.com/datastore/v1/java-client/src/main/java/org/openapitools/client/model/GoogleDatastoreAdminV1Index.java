/*
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleDatastoreAdminV1IndexedProperty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Datastore composite index definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:25.506673-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDatastoreAdminV1Index {
  /**
   * Required. The index&#39;s ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED.
   */
  @JsonAdapter(AncestorEnum.Adapter.class)
  public enum AncestorEnum {
    ANCESTOR_MODE_UNSPECIFIED("ANCESTOR_MODE_UNSPECIFIED"),
    
    NONE("NONE"),
    
    ALL_ANCESTORS("ALL_ANCESTORS");

    private String value;

    AncestorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AncestorEnum fromValue(String value) {
      for (AncestorEnum b : AncestorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AncestorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AncestorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AncestorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AncestorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AncestorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANCESTOR = "ancestor";
  @SerializedName(SERIALIZED_NAME_ANCESTOR)
  private AncestorEnum ancestor;

  public static final String SERIALIZED_NAME_INDEX_ID = "indexId";
  @SerializedName(SERIALIZED_NAME_INDEX_ID)
  private String indexId;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<GoogleDatastoreAdminV1IndexedProperty> properties = new ArrayList<>();

  /**
   * Output only. The state of the index.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    READY("READY"),
    
    DELETING("DELETING"),
    
    ERROR("ERROR");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public GoogleDatastoreAdminV1Index() {
  }

  public GoogleDatastoreAdminV1Index(
     String indexId, 
     String projectId, 
     StateEnum state
  ) {
    this();
    this.indexId = indexId;
    this.projectId = projectId;
    this.state = state;
  }

  public GoogleDatastoreAdminV1Index ancestor(AncestorEnum ancestor) {
    this.ancestor = ancestor;
    return this;
  }

  /**
   * Required. The index&#39;s ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED.
   * @return ancestor
   */
  @javax.annotation.Nullable
  public AncestorEnum getAncestor() {
    return ancestor;
  }

  public void setAncestor(AncestorEnum ancestor) {
    this.ancestor = ancestor;
  }


  /**
   * Output only. The resource ID of the index.
   * @return indexId
   */
  @javax.annotation.Nullable
  public String getIndexId() {
    return indexId;
  }



  public GoogleDatastoreAdminV1Index kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Required. The entity kind to which this index applies.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  /**
   * Output only. Project ID.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }



  public GoogleDatastoreAdminV1Index properties(List<GoogleDatastoreAdminV1IndexedProperty> properties) {
    this.properties = properties;
    return this;
  }

  public GoogleDatastoreAdminV1Index addPropertiesItem(GoogleDatastoreAdminV1IndexedProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

  /**
   * Required. An ordered sequence of property names and their index attributes. Requires: * A maximum of 100 properties.
   * @return properties
   */
  @javax.annotation.Nullable
  public List<GoogleDatastoreAdminV1IndexedProperty> getProperties() {
    return properties;
  }

  public void setProperties(List<GoogleDatastoreAdminV1IndexedProperty> properties) {
    this.properties = properties;
  }


  /**
   * Output only. The state of the index.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDatastoreAdminV1Index googleDatastoreAdminV1Index = (GoogleDatastoreAdminV1Index) o;
    return Objects.equals(this.ancestor, googleDatastoreAdminV1Index.ancestor) &&
        Objects.equals(this.indexId, googleDatastoreAdminV1Index.indexId) &&
        Objects.equals(this.kind, googleDatastoreAdminV1Index.kind) &&
        Objects.equals(this.projectId, googleDatastoreAdminV1Index.projectId) &&
        Objects.equals(this.properties, googleDatastoreAdminV1Index.properties) &&
        Objects.equals(this.state, googleDatastoreAdminV1Index.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ancestor, indexId, kind, projectId, properties, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDatastoreAdminV1Index {\n");
    sb.append("    ancestor: ").append(toIndentedString(ancestor)).append("\n");
    sb.append("    indexId: ").append(toIndentedString(indexId)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ancestor");
    openapiFields.add("indexId");
    openapiFields.add("kind");
    openapiFields.add("projectId");
    openapiFields.add("properties");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDatastoreAdminV1Index
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDatastoreAdminV1Index.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDatastoreAdminV1Index is not found in the empty JSON string", GoogleDatastoreAdminV1Index.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDatastoreAdminV1Index.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDatastoreAdminV1Index` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ancestor") != null && !jsonObj.get("ancestor").isJsonNull()) && !jsonObj.get("ancestor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ancestor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ancestor").toString()));
      }
      // validate the optional field `ancestor`
      if (jsonObj.get("ancestor") != null && !jsonObj.get("ancestor").isJsonNull()) {
        AncestorEnum.validateJsonElement(jsonObj.get("ancestor"));
      }
      if ((jsonObj.get("indexId") != null && !jsonObj.get("indexId").isJsonNull()) && !jsonObj.get("indexId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indexId").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            GoogleDatastoreAdminV1IndexedProperty.validateJsonElement(jsonArrayproperties.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDatastoreAdminV1Index.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDatastoreAdminV1Index' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDatastoreAdminV1Index> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDatastoreAdminV1Index.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDatastoreAdminV1Index>() {
           @Override
           public void write(JsonWriter out, GoogleDatastoreAdminV1Index value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDatastoreAdminV1Index read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDatastoreAdminV1Index given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDatastoreAdminV1Index
   * @throws IOException if the JSON string is invalid with respect to GoogleDatastoreAdminV1Index
   */
  public static GoogleDatastoreAdminV1Index fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDatastoreAdminV1Index.class);
  }

  /**
   * Convert an instance of GoogleDatastoreAdminV1Index to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

