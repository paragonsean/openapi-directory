/*
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleDatastoreAdminV1EntityFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request for google.datastore.admin.v1.DatastoreAdmin.ImportEntities.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:25.506673-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDatastoreAdminV1ImportEntitiesRequest {
  public static final String SERIALIZED_NAME_ENTITY_FILTER = "entityFilter";
  @SerializedName(SERIALIZED_NAME_ENTITY_FILTER)
  private GoogleDatastoreAdminV1EntityFilter entityFilter;

  public static final String SERIALIZED_NAME_INPUT_URL = "inputUrl";
  @SerializedName(SERIALIZED_NAME_INPUT_URL)
  private String inputUrl;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public GoogleDatastoreAdminV1ImportEntitiesRequest() {
  }

  public GoogleDatastoreAdminV1ImportEntitiesRequest entityFilter(GoogleDatastoreAdminV1EntityFilter entityFilter) {
    this.entityFilter = entityFilter;
    return this;
  }

  /**
   * Get entityFilter
   * @return entityFilter
   */
  @javax.annotation.Nullable
  public GoogleDatastoreAdminV1EntityFilter getEntityFilter() {
    return entityFilter;
  }

  public void setEntityFilter(GoogleDatastoreAdminV1EntityFilter entityFilter) {
    this.entityFilter = entityFilter;
  }


  public GoogleDatastoreAdminV1ImportEntitiesRequest inputUrl(String inputUrl) {
    this.inputUrl = inputUrl;
    return this;
  }

  /**
   * Required. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So input_url should be of the form: &#x60;gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE&#x60;, where &#x60;BUCKET_NAME&#x60; is the name of the Cloud Storage bucket, &#x60;NAMESPACE_PATH&#x60; is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace), and &#x60;OVERALL_EXPORT_METADATA_FILE&#x60; is the metadata file written by the ExportEntities operation. For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). For more information, see google.datastore.admin.v1.ExportEntitiesResponse.output_url.
   * @return inputUrl
   */
  @javax.annotation.Nullable
  public String getInputUrl() {
    return inputUrl;
  }

  public void setInputUrl(String inputUrl) {
    this.inputUrl = inputUrl;
  }


  public GoogleDatastoreAdminV1ImportEntitiesRequest labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public GoogleDatastoreAdminV1ImportEntitiesRequest putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Client-assigned labels.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDatastoreAdminV1ImportEntitiesRequest googleDatastoreAdminV1ImportEntitiesRequest = (GoogleDatastoreAdminV1ImportEntitiesRequest) o;
    return Objects.equals(this.entityFilter, googleDatastoreAdminV1ImportEntitiesRequest.entityFilter) &&
        Objects.equals(this.inputUrl, googleDatastoreAdminV1ImportEntitiesRequest.inputUrl) &&
        Objects.equals(this.labels, googleDatastoreAdminV1ImportEntitiesRequest.labels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityFilter, inputUrl, labels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDatastoreAdminV1ImportEntitiesRequest {\n");
    sb.append("    entityFilter: ").append(toIndentedString(entityFilter)).append("\n");
    sb.append("    inputUrl: ").append(toIndentedString(inputUrl)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entityFilter");
    openapiFields.add("inputUrl");
    openapiFields.add("labels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDatastoreAdminV1ImportEntitiesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDatastoreAdminV1ImportEntitiesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDatastoreAdminV1ImportEntitiesRequest is not found in the empty JSON string", GoogleDatastoreAdminV1ImportEntitiesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDatastoreAdminV1ImportEntitiesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDatastoreAdminV1ImportEntitiesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `entityFilter`
      if (jsonObj.get("entityFilter") != null && !jsonObj.get("entityFilter").isJsonNull()) {
        GoogleDatastoreAdminV1EntityFilter.validateJsonElement(jsonObj.get("entityFilter"));
      }
      if ((jsonObj.get("inputUrl") != null && !jsonObj.get("inputUrl").isJsonNull()) && !jsonObj.get("inputUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDatastoreAdminV1ImportEntitiesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDatastoreAdminV1ImportEntitiesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDatastoreAdminV1ImportEntitiesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDatastoreAdminV1ImportEntitiesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDatastoreAdminV1ImportEntitiesRequest>() {
           @Override
           public void write(JsonWriter out, GoogleDatastoreAdminV1ImportEntitiesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDatastoreAdminV1ImportEntitiesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDatastoreAdminV1ImportEntitiesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDatastoreAdminV1ImportEntitiesRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleDatastoreAdminV1ImportEntitiesRequest
   */
  public static GoogleDatastoreAdminV1ImportEntitiesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDatastoreAdminV1ImportEntitiesRequest.class);
  }

  /**
   * Convert an instance of GoogleDatastoreAdminV1ImportEntitiesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

