/*
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntityResult;
import org.openapitools.client.model.Key;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response for Datastore.Lookup.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:25.506673-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LookupResponse {
  public static final String SERIALIZED_NAME_DEFERRED = "deferred";
  @SerializedName(SERIALIZED_NAME_DEFERRED)
  private List<Key> deferred = new ArrayList<>();

  public static final String SERIALIZED_NAME_FOUND = "found";
  @SerializedName(SERIALIZED_NAME_FOUND)
  private List<EntityResult> found = new ArrayList<>();

  public static final String SERIALIZED_NAME_MISSING = "missing";
  @SerializedName(SERIALIZED_NAME_MISSING)
  private List<EntityResult> missing = new ArrayList<>();

  public static final String SERIALIZED_NAME_READ_TIME = "readTime";
  @SerializedName(SERIALIZED_NAME_READ_TIME)
  private String readTime;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private byte[] transaction;

  public LookupResponse() {
  }

  public LookupResponse deferred(List<Key> deferred) {
    this.deferred = deferred;
    return this;
  }

  public LookupResponse addDeferredItem(Key deferredItem) {
    if (this.deferred == null) {
      this.deferred = new ArrayList<>();
    }
    this.deferred.add(deferredItem);
    return this;
  }

  /**
   * A list of keys that were not looked up due to resource constraints. The order of results in this field is undefined and has no relation to the order of the keys in the input.
   * @return deferred
   */
  @javax.annotation.Nullable
  public List<Key> getDeferred() {
    return deferred;
  }

  public void setDeferred(List<Key> deferred) {
    this.deferred = deferred;
  }


  public LookupResponse found(List<EntityResult> found) {
    this.found = found;
    return this;
  }

  public LookupResponse addFoundItem(EntityResult foundItem) {
    if (this.found == null) {
      this.found = new ArrayList<>();
    }
    this.found.add(foundItem);
    return this;
  }

  /**
   * Entities found as &#x60;ResultType.FULL&#x60; entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.
   * @return found
   */
  @javax.annotation.Nullable
  public List<EntityResult> getFound() {
    return found;
  }

  public void setFound(List<EntityResult> found) {
    this.found = found;
  }


  public LookupResponse missing(List<EntityResult> missing) {
    this.missing = missing;
    return this;
  }

  public LookupResponse addMissingItem(EntityResult missingItem) {
    if (this.missing == null) {
      this.missing = new ArrayList<>();
    }
    this.missing.add(missingItem);
    return this;
  }

  /**
   * Entities not found as &#x60;ResultType.KEY_ONLY&#x60; entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.
   * @return missing
   */
  @javax.annotation.Nullable
  public List<EntityResult> getMissing() {
    return missing;
  }

  public void setMissing(List<EntityResult> missing) {
    this.missing = missing;
  }


  public LookupResponse readTime(String readTime) {
    this.readTime = readTime;
    return this;
  }

  /**
   * The time at which these entities were read or found missing.
   * @return readTime
   */
  @javax.annotation.Nullable
  public String getReadTime() {
    return readTime;
  }

  public void setReadTime(String readTime) {
    this.readTime = readTime;
  }


  public LookupResponse transaction(byte[] transaction) {
    this.transaction = transaction;
    return this;
  }

  /**
   * The identifier of the transaction that was started as part of this Lookup request. Set only when ReadOptions.new_transaction was set in LookupRequest.read_options.
   * @return transaction
   */
  @javax.annotation.Nullable
  public byte[] getTransaction() {
    return transaction;
  }

  public void setTransaction(byte[] transaction) {
    this.transaction = transaction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookupResponse lookupResponse = (LookupResponse) o;
    return Objects.equals(this.deferred, lookupResponse.deferred) &&
        Objects.equals(this.found, lookupResponse.found) &&
        Objects.equals(this.missing, lookupResponse.missing) &&
        Objects.equals(this.readTime, lookupResponse.readTime) &&
        Arrays.equals(this.transaction, lookupResponse.transaction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deferred, found, missing, readTime, Arrays.hashCode(transaction));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookupResponse {\n");
    sb.append("    deferred: ").append(toIndentedString(deferred)).append("\n");
    sb.append("    found: ").append(toIndentedString(found)).append("\n");
    sb.append("    missing: ").append(toIndentedString(missing)).append("\n");
    sb.append("    readTime: ").append(toIndentedString(readTime)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deferred");
    openapiFields.add("found");
    openapiFields.add("missing");
    openapiFields.add("readTime");
    openapiFields.add("transaction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LookupResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LookupResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LookupResponse is not found in the empty JSON string", LookupResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LookupResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LookupResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("deferred") != null && !jsonObj.get("deferred").isJsonNull()) {
        JsonArray jsonArraydeferred = jsonObj.getAsJsonArray("deferred");
        if (jsonArraydeferred != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deferred").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deferred` to be an array in the JSON string but got `%s`", jsonObj.get("deferred").toString()));
          }

          // validate the optional field `deferred` (array)
          for (int i = 0; i < jsonArraydeferred.size(); i++) {
            Key.validateJsonElement(jsonArraydeferred.get(i));
          };
        }
      }
      if (jsonObj.get("found") != null && !jsonObj.get("found").isJsonNull()) {
        JsonArray jsonArrayfound = jsonObj.getAsJsonArray("found");
        if (jsonArrayfound != null) {
          // ensure the json data is an array
          if (!jsonObj.get("found").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `found` to be an array in the JSON string but got `%s`", jsonObj.get("found").toString()));
          }

          // validate the optional field `found` (array)
          for (int i = 0; i < jsonArrayfound.size(); i++) {
            EntityResult.validateJsonElement(jsonArrayfound.get(i));
          };
        }
      }
      if (jsonObj.get("missing") != null && !jsonObj.get("missing").isJsonNull()) {
        JsonArray jsonArraymissing = jsonObj.getAsJsonArray("missing");
        if (jsonArraymissing != null) {
          // ensure the json data is an array
          if (!jsonObj.get("missing").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `missing` to be an array in the JSON string but got `%s`", jsonObj.get("missing").toString()));
          }

          // validate the optional field `missing` (array)
          for (int i = 0; i < jsonArraymissing.size(); i++) {
            EntityResult.validateJsonElement(jsonArraymissing.get(i));
          };
        }
      }
      if ((jsonObj.get("readTime") != null && !jsonObj.get("readTime").isJsonNull()) && !jsonObj.get("readTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LookupResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LookupResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LookupResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LookupResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<LookupResponse>() {
           @Override
           public void write(JsonWriter out, LookupResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LookupResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LookupResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LookupResponse
   * @throws IOException if the JSON string is invalid with respect to LookupResponse
   */
  public static LookupResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LookupResponse.class);
  }

  /**
   * Convert an instance of LookupResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

