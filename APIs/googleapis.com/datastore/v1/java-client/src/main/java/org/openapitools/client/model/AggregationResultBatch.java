/*
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AggregationResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A batch of aggregation results produced by an aggregation query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:25.506673-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AggregationResultBatch {
  public static final String SERIALIZED_NAME_AGGREGATION_RESULTS = "aggregationResults";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_RESULTS)
  private List<AggregationResult> aggregationResults = new ArrayList<>();

  /**
   * The state of the query after the current batch. Only COUNT(*) aggregations are supported in the initial launch. Therefore, expected result type is limited to &#x60;NO_MORE_RESULTS&#x60;.
   */
  @JsonAdapter(MoreResultsEnum.Adapter.class)
  public enum MoreResultsEnum {
    MORE_RESULTS_TYPE_UNSPECIFIED("MORE_RESULTS_TYPE_UNSPECIFIED"),
    
    NOT_FINISHED("NOT_FINISHED"),
    
    MORE_RESULTS_AFTER_LIMIT("MORE_RESULTS_AFTER_LIMIT"),
    
    MORE_RESULTS_AFTER_CURSOR("MORE_RESULTS_AFTER_CURSOR"),
    
    NO_MORE_RESULTS("NO_MORE_RESULTS");

    private String value;

    MoreResultsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MoreResultsEnum fromValue(String value) {
      for (MoreResultsEnum b : MoreResultsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MoreResultsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MoreResultsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MoreResultsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MoreResultsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MoreResultsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MORE_RESULTS = "moreResults";
  @SerializedName(SERIALIZED_NAME_MORE_RESULTS)
  private MoreResultsEnum moreResults;

  public static final String SERIALIZED_NAME_READ_TIME = "readTime";
  @SerializedName(SERIALIZED_NAME_READ_TIME)
  private String readTime;

  public AggregationResultBatch() {
  }

  public AggregationResultBatch aggregationResults(List<AggregationResult> aggregationResults) {
    this.aggregationResults = aggregationResults;
    return this;
  }

  public AggregationResultBatch addAggregationResultsItem(AggregationResult aggregationResultsItem) {
    if (this.aggregationResults == null) {
      this.aggregationResults = new ArrayList<>();
    }
    this.aggregationResults.add(aggregationResultsItem);
    return this;
  }

  /**
   * The aggregation results for this batch.
   * @return aggregationResults
   */
  @javax.annotation.Nullable
  public List<AggregationResult> getAggregationResults() {
    return aggregationResults;
  }

  public void setAggregationResults(List<AggregationResult> aggregationResults) {
    this.aggregationResults = aggregationResults;
  }


  public AggregationResultBatch moreResults(MoreResultsEnum moreResults) {
    this.moreResults = moreResults;
    return this;
  }

  /**
   * The state of the query after the current batch. Only COUNT(*) aggregations are supported in the initial launch. Therefore, expected result type is limited to &#x60;NO_MORE_RESULTS&#x60;.
   * @return moreResults
   */
  @javax.annotation.Nullable
  public MoreResultsEnum getMoreResults() {
    return moreResults;
  }

  public void setMoreResults(MoreResultsEnum moreResults) {
    this.moreResults = moreResults;
  }


  public AggregationResultBatch readTime(String readTime) {
    this.readTime = readTime;
    return this;
  }

  /**
   * Read timestamp this batch was returned from. In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch&#39;s read timestamp is valid for all preceding batches.
   * @return readTime
   */
  @javax.annotation.Nullable
  public String getReadTime() {
    return readTime;
  }

  public void setReadTime(String readTime) {
    this.readTime = readTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregationResultBatch aggregationResultBatch = (AggregationResultBatch) o;
    return Objects.equals(this.aggregationResults, aggregationResultBatch.aggregationResults) &&
        Objects.equals(this.moreResults, aggregationResultBatch.moreResults) &&
        Objects.equals(this.readTime, aggregationResultBatch.readTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationResults, moreResults, readTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregationResultBatch {\n");
    sb.append("    aggregationResults: ").append(toIndentedString(aggregationResults)).append("\n");
    sb.append("    moreResults: ").append(toIndentedString(moreResults)).append("\n");
    sb.append("    readTime: ").append(toIndentedString(readTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregationResults");
    openapiFields.add("moreResults");
    openapiFields.add("readTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AggregationResultBatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AggregationResultBatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AggregationResultBatch is not found in the empty JSON string", AggregationResultBatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AggregationResultBatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AggregationResultBatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("aggregationResults") != null && !jsonObj.get("aggregationResults").isJsonNull()) {
        JsonArray jsonArrayaggregationResults = jsonObj.getAsJsonArray("aggregationResults");
        if (jsonArrayaggregationResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aggregationResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aggregationResults` to be an array in the JSON string but got `%s`", jsonObj.get("aggregationResults").toString()));
          }

          // validate the optional field `aggregationResults` (array)
          for (int i = 0; i < jsonArrayaggregationResults.size(); i++) {
            AggregationResult.validateJsonElement(jsonArrayaggregationResults.get(i));
          };
        }
      }
      if ((jsonObj.get("moreResults") != null && !jsonObj.get("moreResults").isJsonNull()) && !jsonObj.get("moreResults").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moreResults` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moreResults").toString()));
      }
      // validate the optional field `moreResults`
      if (jsonObj.get("moreResults") != null && !jsonObj.get("moreResults").isJsonNull()) {
        MoreResultsEnum.validateJsonElement(jsonObj.get("moreResults"));
      }
      if ((jsonObj.get("readTime") != null && !jsonObj.get("readTime").isJsonNull()) && !jsonObj.get("readTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AggregationResultBatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AggregationResultBatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AggregationResultBatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AggregationResultBatch.class));

       return (TypeAdapter<T>) new TypeAdapter<AggregationResultBatch>() {
           @Override
           public void write(JsonWriter out, AggregationResultBatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AggregationResultBatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AggregationResultBatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AggregationResultBatch
   * @throws IOException if the JSON string is invalid with respect to AggregationResultBatch
   */
  public static AggregationResultBatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AggregationResultBatch.class);
  }

  /**
   * Convert an instance of AggregationResultBatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

