/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GqlQueryParameter from './GqlQueryParameter';

/**
 * The GqlQuery model module.
 * @module model/GqlQuery
 * @version v1
 */
class GqlQuery {
    /**
     * Constructs a new <code>GqlQuery</code>.
     * A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
     * @alias module:model/GqlQuery
     */
    constructor() { 
        
        GqlQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GqlQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GqlQuery} obj Optional instance to populate.
     * @return {module:model/GqlQuery} The populated <code>GqlQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GqlQuery();

            if (data.hasOwnProperty('allowLiterals')) {
                obj['allowLiterals'] = ApiClient.convertToType(data['allowLiterals'], 'Boolean');
            }
            if (data.hasOwnProperty('namedBindings')) {
                obj['namedBindings'] = ApiClient.convertToType(data['namedBindings'], {'String': GqlQueryParameter});
            }
            if (data.hasOwnProperty('positionalBindings')) {
                obj['positionalBindings'] = ApiClient.convertToType(data['positionalBindings'], [GqlQueryParameter]);
            }
            if (data.hasOwnProperty('queryString')) {
                obj['queryString'] = ApiClient.convertToType(data['queryString'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GqlQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GqlQuery</code>.
     */
    static validateJSON(data) {
        if (data['positionalBindings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['positionalBindings'])) {
                throw new Error("Expected the field `positionalBindings` to be an array in the JSON data but got " + data['positionalBindings']);
            }
            // validate the optional field `positionalBindings` (array)
            for (const item of data['positionalBindings']) {
                GqlQueryParameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['queryString'] && !(typeof data['queryString'] === 'string' || data['queryString'] instanceof String)) {
            throw new Error("Expected the field `queryString` to be a primitive type in the JSON string but got " + data['queryString']);
        }

        return true;
    }


}



/**
 * When false, the query string must not contain any literals and instead must bind all values. For example, `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while `SELECT * FROM Kind WHERE a = @value` is.
 * @member {Boolean} allowLiterals
 */
GqlQuery.prototype['allowLiterals'] = undefined;

/**
 * For each non-reserved named binding site in the query string, there must be a named parameter with that name, but not necessarily the inverse. Key must match regex `A-Za-z_$*`, must not match regex `__.*__`, and must not be `\"\"`.
 * @member {Object.<String, module:model/GqlQueryParameter>} namedBindings
 */
GqlQuery.prototype['namedBindings'] = undefined;

/**
 * Numbered binding site @1 references the first numbered parameter, effectively using 1-based indexing, rather than the usual 0. For each binding site numbered i in `query_string`, there must be an i-th numbered parameter. The inverse must also be true.
 * @member {Array.<module:model/GqlQueryParameter>} positionalBindings
 */
GqlQuery.prototype['positionalBindings'] = undefined;

/**
 * A string of the format described [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
 * @member {String} queryString
 */
GqlQuery.prototype['queryString'] = undefined;






export default GqlQuery;

