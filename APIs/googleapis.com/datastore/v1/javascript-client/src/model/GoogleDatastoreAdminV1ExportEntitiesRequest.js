/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleDatastoreAdminV1EntityFilter from './GoogleDatastoreAdminV1EntityFilter';

/**
 * The GoogleDatastoreAdminV1ExportEntitiesRequest model module.
 * @module model/GoogleDatastoreAdminV1ExportEntitiesRequest
 * @version v1
 */
class GoogleDatastoreAdminV1ExportEntitiesRequest {
    /**
     * Constructs a new <code>GoogleDatastoreAdminV1ExportEntitiesRequest</code>.
     * The request for google.datastore.admin.v1.DatastoreAdmin.ExportEntities.
     * @alias module:model/GoogleDatastoreAdminV1ExportEntitiesRequest
     */
    constructor() { 
        
        GoogleDatastoreAdminV1ExportEntitiesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleDatastoreAdminV1ExportEntitiesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleDatastoreAdminV1ExportEntitiesRequest} obj Optional instance to populate.
     * @return {module:model/GoogleDatastoreAdminV1ExportEntitiesRequest} The populated <code>GoogleDatastoreAdminV1ExportEntitiesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleDatastoreAdminV1ExportEntitiesRequest();

            if (data.hasOwnProperty('entityFilter')) {
                obj['entityFilter'] = GoogleDatastoreAdminV1EntityFilter.constructFromObject(data['entityFilter']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('outputUrlPrefix')) {
                obj['outputUrlPrefix'] = ApiClient.convertToType(data['outputUrlPrefix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleDatastoreAdminV1ExportEntitiesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleDatastoreAdminV1ExportEntitiesRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `entityFilter`
        if (data['entityFilter']) { // data not null
          GoogleDatastoreAdminV1EntityFilter.validateJSON(data['entityFilter']);
        }
        // ensure the json data is a string
        if (data['outputUrlPrefix'] && !(typeof data['outputUrlPrefix'] === 'string' || data['outputUrlPrefix'] instanceof String)) {
            throw new Error("Expected the field `outputUrlPrefix` to be a primitive type in the JSON string but got " + data['outputUrlPrefix']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleDatastoreAdminV1EntityFilter} entityFilter
 */
GoogleDatastoreAdminV1ExportEntitiesRequest.prototype['entityFilter'] = undefined;

/**
 * Client-assigned labels.
 * @member {Object.<String, String>} labels
 */
GoogleDatastoreAdminV1ExportEntitiesRequest.prototype['labels'] = undefined;

/**
 * Required. Location for the export metadata and data files. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So output_url_prefix should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace). For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). The resulting files will be nested deeper than the specified URL prefix. The final output URL will be provided in the google.datastore.admin.v1.ExportEntitiesResponse.output_url field. That value should be used for subsequent ImportEntities operations. By nesting the data files deeper, the same Cloud Storage bucket can be used in multiple ExportEntities operations without conflict.
 * @member {String} outputUrlPrefix
 */
GoogleDatastoreAdminV1ExportEntitiesRequest.prototype['outputUrlPrefix'] = undefined;






export default GoogleDatastoreAdminV1ExportEntitiesRequest;

