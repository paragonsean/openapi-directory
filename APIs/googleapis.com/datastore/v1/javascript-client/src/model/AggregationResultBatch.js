/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AggregationResult from './AggregationResult';

/**
 * The AggregationResultBatch model module.
 * @module model/AggregationResultBatch
 * @version v1
 */
class AggregationResultBatch {
    /**
     * Constructs a new <code>AggregationResultBatch</code>.
     * A batch of aggregation results produced by an aggregation query.
     * @alias module:model/AggregationResultBatch
     */
    constructor() { 
        
        AggregationResultBatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AggregationResultBatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AggregationResultBatch} obj Optional instance to populate.
     * @return {module:model/AggregationResultBatch} The populated <code>AggregationResultBatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AggregationResultBatch();

            if (data.hasOwnProperty('aggregationResults')) {
                obj['aggregationResults'] = ApiClient.convertToType(data['aggregationResults'], [AggregationResult]);
            }
            if (data.hasOwnProperty('moreResults')) {
                obj['moreResults'] = ApiClient.convertToType(data['moreResults'], 'String');
            }
            if (data.hasOwnProperty('readTime')) {
                obj['readTime'] = ApiClient.convertToType(data['readTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AggregationResultBatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AggregationResultBatch</code>.
     */
    static validateJSON(data) {
        if (data['aggregationResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['aggregationResults'])) {
                throw new Error("Expected the field `aggregationResults` to be an array in the JSON data but got " + data['aggregationResults']);
            }
            // validate the optional field `aggregationResults` (array)
            for (const item of data['aggregationResults']) {
                AggregationResult.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['moreResults'] && !(typeof data['moreResults'] === 'string' || data['moreResults'] instanceof String)) {
            throw new Error("Expected the field `moreResults` to be a primitive type in the JSON string but got " + data['moreResults']);
        }
        // ensure the json data is a string
        if (data['readTime'] && !(typeof data['readTime'] === 'string' || data['readTime'] instanceof String)) {
            throw new Error("Expected the field `readTime` to be a primitive type in the JSON string but got " + data['readTime']);
        }

        return true;
    }


}



/**
 * The aggregation results for this batch.
 * @member {Array.<module:model/AggregationResult>} aggregationResults
 */
AggregationResultBatch.prototype['aggregationResults'] = undefined;

/**
 * The state of the query after the current batch. Only COUNT(*) aggregations are supported in the initial launch. Therefore, expected result type is limited to `NO_MORE_RESULTS`.
 * @member {module:model/AggregationResultBatch.MoreResultsEnum} moreResults
 */
AggregationResultBatch.prototype['moreResults'] = undefined;

/**
 * Read timestamp this batch was returned from. In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches.
 * @member {String} readTime
 */
AggregationResultBatch.prototype['readTime'] = undefined;





/**
 * Allowed values for the <code>moreResults</code> property.
 * @enum {String}
 * @readonly
 */
AggregationResultBatch['MoreResultsEnum'] = {

    /**
     * value: "MORE_RESULTS_TYPE_UNSPECIFIED"
     * @const
     */
    "MORE_RESULTS_TYPE_UNSPECIFIED": "MORE_RESULTS_TYPE_UNSPECIFIED",

    /**
     * value: "NOT_FINISHED"
     * @const
     */
    "NOT_FINISHED": "NOT_FINISHED",

    /**
     * value: "MORE_RESULTS_AFTER_LIMIT"
     * @const
     */
    "MORE_RESULTS_AFTER_LIMIT": "MORE_RESULTS_AFTER_LIMIT",

    /**
     * value: "MORE_RESULTS_AFTER_CURSOR"
     * @const
     */
    "MORE_RESULTS_AFTER_CURSOR": "MORE_RESULTS_AFTER_CURSOR",

    /**
     * value: "NO_MORE_RESULTS"
     * @const
     */
    "NO_MORE_RESULTS": "NO_MORE_RESULTS"
};



export default AggregationResultBatch;

