/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GqlQuery from './GqlQuery';
import PartitionId from './PartitionId';
import Query from './Query';
import ReadOptions from './ReadOptions';

/**
 * The RunQueryRequest model module.
 * @module model/RunQueryRequest
 * @version v1
 */
class RunQueryRequest {
    /**
     * Constructs a new <code>RunQueryRequest</code>.
     * The request for Datastore.RunQuery.
     * @alias module:model/RunQueryRequest
     */
    constructor() { 
        
        RunQueryRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RunQueryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunQueryRequest} obj Optional instance to populate.
     * @return {module:model/RunQueryRequest} The populated <code>RunQueryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunQueryRequest();

            if (data.hasOwnProperty('databaseId')) {
                obj['databaseId'] = ApiClient.convertToType(data['databaseId'], 'String');
            }
            if (data.hasOwnProperty('gqlQuery')) {
                obj['gqlQuery'] = GqlQuery.constructFromObject(data['gqlQuery']);
            }
            if (data.hasOwnProperty('partitionId')) {
                obj['partitionId'] = PartitionId.constructFromObject(data['partitionId']);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = Query.constructFromObject(data['query']);
            }
            if (data.hasOwnProperty('readOptions')) {
                obj['readOptions'] = ReadOptions.constructFromObject(data['readOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunQueryRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunQueryRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['databaseId'] && !(typeof data['databaseId'] === 'string' || data['databaseId'] instanceof String)) {
            throw new Error("Expected the field `databaseId` to be a primitive type in the JSON string but got " + data['databaseId']);
        }
        // validate the optional field `gqlQuery`
        if (data['gqlQuery']) { // data not null
          GqlQuery.validateJSON(data['gqlQuery']);
        }
        // validate the optional field `partitionId`
        if (data['partitionId']) { // data not null
          PartitionId.validateJSON(data['partitionId']);
        }
        // validate the optional field `query`
        if (data['query']) { // data not null
          Query.validateJSON(data['query']);
        }
        // validate the optional field `readOptions`
        if (data['readOptions']) { // data not null
          ReadOptions.validateJSON(data['readOptions']);
        }

        return true;
    }


}



/**
 * The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.
 * @member {String} databaseId
 */
RunQueryRequest.prototype['databaseId'] = undefined;

/**
 * @member {module:model/GqlQuery} gqlQuery
 */
RunQueryRequest.prototype['gqlQuery'] = undefined;

/**
 * @member {module:model/PartitionId} partitionId
 */
RunQueryRequest.prototype['partitionId'] = undefined;

/**
 * @member {module:model/Query} query
 */
RunQueryRequest.prototype['query'] = undefined;

/**
 * @member {module:model/ReadOptions} readOptions
 */
RunQueryRequest.prototype['readOptions'] = undefined;






export default RunQueryRequest;

