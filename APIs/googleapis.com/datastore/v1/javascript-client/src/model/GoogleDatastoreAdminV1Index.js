/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleDatastoreAdminV1IndexedProperty from './GoogleDatastoreAdminV1IndexedProperty';

/**
 * The GoogleDatastoreAdminV1Index model module.
 * @module model/GoogleDatastoreAdminV1Index
 * @version v1
 */
class GoogleDatastoreAdminV1Index {
    /**
     * Constructs a new <code>GoogleDatastoreAdminV1Index</code>.
     * Datastore composite index definition.
     * @alias module:model/GoogleDatastoreAdminV1Index
     */
    constructor() { 
        
        GoogleDatastoreAdminV1Index.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleDatastoreAdminV1Index</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleDatastoreAdminV1Index} obj Optional instance to populate.
     * @return {module:model/GoogleDatastoreAdminV1Index} The populated <code>GoogleDatastoreAdminV1Index</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleDatastoreAdminV1Index();

            if (data.hasOwnProperty('ancestor')) {
                obj['ancestor'] = ApiClient.convertToType(data['ancestor'], 'String');
            }
            if (data.hasOwnProperty('indexId')) {
                obj['indexId'] = ApiClient.convertToType(data['indexId'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], [GoogleDatastoreAdminV1IndexedProperty]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleDatastoreAdminV1Index</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleDatastoreAdminV1Index</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ancestor'] && !(typeof data['ancestor'] === 'string' || data['ancestor'] instanceof String)) {
            throw new Error("Expected the field `ancestor` to be a primitive type in the JSON string but got " + data['ancestor']);
        }
        // ensure the json data is a string
        if (data['indexId'] && !(typeof data['indexId'] === 'string' || data['indexId'] instanceof String)) {
            throw new Error("Expected the field `indexId` to be a primitive type in the JSON string but got " + data['indexId']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        if (data['properties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['properties'])) {
                throw new Error("Expected the field `properties` to be an array in the JSON data but got " + data['properties']);
            }
            // validate the optional field `properties` (array)
            for (const item of data['properties']) {
                GoogleDatastoreAdminV1IndexedProperty.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Required. The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED.
 * @member {module:model/GoogleDatastoreAdminV1Index.AncestorEnum} ancestor
 */
GoogleDatastoreAdminV1Index.prototype['ancestor'] = undefined;

/**
 * Output only. The resource ID of the index.
 * @member {String} indexId
 */
GoogleDatastoreAdminV1Index.prototype['indexId'] = undefined;

/**
 * Required. The entity kind to which this index applies.
 * @member {String} kind
 */
GoogleDatastoreAdminV1Index.prototype['kind'] = undefined;

/**
 * Output only. Project ID.
 * @member {String} projectId
 */
GoogleDatastoreAdminV1Index.prototype['projectId'] = undefined;

/**
 * Required. An ordered sequence of property names and their index attributes. Requires: * A maximum of 100 properties.
 * @member {Array.<module:model/GoogleDatastoreAdminV1IndexedProperty>} properties
 */
GoogleDatastoreAdminV1Index.prototype['properties'] = undefined;

/**
 * Output only. The state of the index.
 * @member {module:model/GoogleDatastoreAdminV1Index.StateEnum} state
 */
GoogleDatastoreAdminV1Index.prototype['state'] = undefined;





/**
 * Allowed values for the <code>ancestor</code> property.
 * @enum {String}
 * @readonly
 */
GoogleDatastoreAdminV1Index['AncestorEnum'] = {

    /**
     * value: "ANCESTOR_MODE_UNSPECIFIED"
     * @const
     */
    "ANCESTOR_MODE_UNSPECIFIED": "ANCESTOR_MODE_UNSPECIFIED",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "ALL_ANCESTORS"
     * @const
     */
    "ALL_ANCESTORS": "ALL_ANCESTORS"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleDatastoreAdminV1Index['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};



export default GoogleDatastoreAdminV1Index;

