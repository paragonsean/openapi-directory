/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityResult from './EntityResult';
import Key from './Key';

/**
 * The LookupResponse model module.
 * @module model/LookupResponse
 * @version v1
 */
class LookupResponse {
    /**
     * Constructs a new <code>LookupResponse</code>.
     * The response for Datastore.Lookup.
     * @alias module:model/LookupResponse
     */
    constructor() { 
        
        LookupResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LookupResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LookupResponse} obj Optional instance to populate.
     * @return {module:model/LookupResponse} The populated <code>LookupResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LookupResponse();

            if (data.hasOwnProperty('deferred')) {
                obj['deferred'] = ApiClient.convertToType(data['deferred'], [Key]);
            }
            if (data.hasOwnProperty('found')) {
                obj['found'] = ApiClient.convertToType(data['found'], [EntityResult]);
            }
            if (data.hasOwnProperty('missing')) {
                obj['missing'] = ApiClient.convertToType(data['missing'], [EntityResult]);
            }
            if (data.hasOwnProperty('readTime')) {
                obj['readTime'] = ApiClient.convertToType(data['readTime'], 'String');
            }
            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = ApiClient.convertToType(data['transaction'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LookupResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LookupResponse</code>.
     */
    static validateJSON(data) {
        if (data['deferred']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deferred'])) {
                throw new Error("Expected the field `deferred` to be an array in the JSON data but got " + data['deferred']);
            }
            // validate the optional field `deferred` (array)
            for (const item of data['deferred']) {
                Key.validateJSON(item);
            };
        }
        if (data['found']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['found'])) {
                throw new Error("Expected the field `found` to be an array in the JSON data but got " + data['found']);
            }
            // validate the optional field `found` (array)
            for (const item of data['found']) {
                EntityResult.validateJSON(item);
            };
        }
        if (data['missing']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['missing'])) {
                throw new Error("Expected the field `missing` to be an array in the JSON data but got " + data['missing']);
            }
            // validate the optional field `missing` (array)
            for (const item of data['missing']) {
                EntityResult.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['readTime'] && !(typeof data['readTime'] === 'string' || data['readTime'] instanceof String)) {
            throw new Error("Expected the field `readTime` to be a primitive type in the JSON string but got " + data['readTime']);
        }

        return true;
    }


}



/**
 * A list of keys that were not looked up due to resource constraints. The order of results in this field is undefined and has no relation to the order of the keys in the input.
 * @member {Array.<module:model/Key>} deferred
 */
LookupResponse.prototype['deferred'] = undefined;

/**
 * Entities found as `ResultType.FULL` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.
 * @member {Array.<module:model/EntityResult>} found
 */
LookupResponse.prototype['found'] = undefined;

/**
 * Entities not found as `ResultType.KEY_ONLY` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.
 * @member {Array.<module:model/EntityResult>} missing
 */
LookupResponse.prototype['missing'] = undefined;

/**
 * The time at which these entities were read or found missing.
 * @member {String} readTime
 */
LookupResponse.prototype['readTime'] = undefined;

/**
 * The identifier of the transaction that was started as part of this Lookup request. Set only when ReadOptions.new_transaction was set in LookupRequest.read_options.
 * @member {Blob} transaction
 */
LookupResponse.prototype['transaction'] = undefined;






export default LookupResponse;

