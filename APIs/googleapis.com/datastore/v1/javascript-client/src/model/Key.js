/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PartitionId from './PartitionId';
import PathElement from './PathElement';

/**
 * The Key model module.
 * @module model/Key
 * @version v1
 */
class Key {
    /**
     * Constructs a new <code>Key</code>.
     * A unique identifier for an entity. If a key&#39;s partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.
     * @alias module:model/Key
     */
    constructor() { 
        
        Key.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Key</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Key} obj Optional instance to populate.
     * @return {module:model/Key} The populated <code>Key</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Key();

            if (data.hasOwnProperty('partitionId')) {
                obj['partitionId'] = PartitionId.constructFromObject(data['partitionId']);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], [PathElement]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Key</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Key</code>.
     */
    static validateJSON(data) {
        // validate the optional field `partitionId`
        if (data['partitionId']) { // data not null
          PartitionId.validateJSON(data['partitionId']);
        }
        if (data['path']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['path'])) {
                throw new Error("Expected the field `path` to be an array in the JSON data but got " + data['path']);
            }
            // validate the optional field `path` (array)
            for (const item of data['path']) {
                PathElement.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/PartitionId} partitionId
 */
Key.prototype['partitionId'] = undefined;

/**
 * The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements.
 * @member {Array.<module:model/PathElement>} path
 */
Key.prototype['path'] = undefined;






export default Key;

