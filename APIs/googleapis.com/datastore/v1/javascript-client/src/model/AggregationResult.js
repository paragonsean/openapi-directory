/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Value from './Value';

/**
 * The AggregationResult model module.
 * @module model/AggregationResult
 * @version v1
 */
class AggregationResult {
    /**
     * Constructs a new <code>AggregationResult</code>.
     * The result of a single bucket from a Datastore aggregation query. The keys of &#x60;aggregate_properties&#x60; are the same for all results in an aggregation query, unlike entity queries which can have different fields present for each result.
     * @alias module:model/AggregationResult
     */
    constructor() { 
        
        AggregationResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AggregationResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AggregationResult} obj Optional instance to populate.
     * @return {module:model/AggregationResult} The populated <code>AggregationResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AggregationResult();

            if (data.hasOwnProperty('aggregateProperties')) {
                obj['aggregateProperties'] = ApiClient.convertToType(data['aggregateProperties'], {'String': Value});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AggregationResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AggregationResult</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The result of the aggregation functions, ex: `COUNT(*) AS total_entities`. The key is the alias assigned to the aggregation function on input and the size of this map equals the number of aggregation functions in the query.
 * @member {Object.<String, module:model/Value>} aggregateProperties
 */
AggregationResult.prototype['aggregateProperties'] = undefined;






export default AggregationResult;

