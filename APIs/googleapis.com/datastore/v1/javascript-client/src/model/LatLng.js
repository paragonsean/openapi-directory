/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LatLng model module.
 * @module model/LatLng
 * @version v1
 */
class LatLng {
    /**
     * Constructs a new <code>LatLng</code>.
     * An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
     * @alias module:model/LatLng
     */
    constructor() { 
        
        LatLng.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LatLng</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LatLng} obj Optional instance to populate.
     * @return {module:model/LatLng} The populated <code>LatLng</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LatLng();

            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LatLng</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LatLng</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The latitude in degrees. It must be in the range [-90.0, +90.0].
 * @member {Number} latitude
 */
LatLng.prototype['latitude'] = undefined;

/**
 * The longitude in degrees. It must be in the range [-180.0, +180.0].
 * @member {Number} longitude
 */
LatLng.prototype['longitude'] = undefined;






export default LatLng;

