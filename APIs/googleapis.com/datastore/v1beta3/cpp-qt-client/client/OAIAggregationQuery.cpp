/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregationQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregationQuery::OAIAggregationQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregationQuery::OAIAggregationQuery() {
    this->initializeModel();
}

OAIAggregationQuery::~OAIAggregationQuery() {}

void OAIAggregationQuery::initializeModel() {

    m_aggregations_isSet = false;
    m_aggregations_isValid = false;

    m_nested_query_isSet = false;
    m_nested_query_isValid = false;
}

void OAIAggregationQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregationQuery::fromJsonObject(QJsonObject json) {

    m_aggregations_isValid = ::OpenAPI::fromJsonValue(m_aggregations, json[QString("aggregations")]);
    m_aggregations_isSet = !json[QString("aggregations")].isNull() && m_aggregations_isValid;

    m_nested_query_isValid = ::OpenAPI::fromJsonValue(m_nested_query, json[QString("nestedQuery")]);
    m_nested_query_isSet = !json[QString("nestedQuery")].isNull() && m_nested_query_isValid;
}

QString OAIAggregationQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregationQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregations.size() > 0) {
        obj.insert(QString("aggregations"), ::OpenAPI::toJsonValue(m_aggregations));
    }
    if (m_nested_query.isSet()) {
        obj.insert(QString("nestedQuery"), ::OpenAPI::toJsonValue(m_nested_query));
    }
    return obj;
}

QList<OAIAggregation> OAIAggregationQuery::getAggregations() const {
    return m_aggregations;
}
void OAIAggregationQuery::setAggregations(const QList<OAIAggregation> &aggregations) {
    m_aggregations = aggregations;
    m_aggregations_isSet = true;
}

bool OAIAggregationQuery::is_aggregations_Set() const{
    return m_aggregations_isSet;
}

bool OAIAggregationQuery::is_aggregations_Valid() const{
    return m_aggregations_isValid;
}

OAIQuery OAIAggregationQuery::getNestedQuery() const {
    return m_nested_query;
}
void OAIAggregationQuery::setNestedQuery(const OAIQuery &nested_query) {
    m_nested_query = nested_query;
    m_nested_query_isSet = true;
}

bool OAIAggregationQuery::is_nested_query_Set() const{
    return m_nested_query_isSet;
}

bool OAIAggregationQuery::is_nested_query_Valid() const{
    return m_nested_query_isValid;
}

bool OAIAggregationQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nested_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregationQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
