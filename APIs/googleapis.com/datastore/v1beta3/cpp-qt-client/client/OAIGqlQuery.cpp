/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGqlQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGqlQuery::OAIGqlQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGqlQuery::OAIGqlQuery() {
    this->initializeModel();
}

OAIGqlQuery::~OAIGqlQuery() {}

void OAIGqlQuery::initializeModel() {

    m_allow_literals_isSet = false;
    m_allow_literals_isValid = false;

    m_named_bindings_isSet = false;
    m_named_bindings_isValid = false;

    m_positional_bindings_isSet = false;
    m_positional_bindings_isValid = false;

    m_query_string_isSet = false;
    m_query_string_isValid = false;
}

void OAIGqlQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGqlQuery::fromJsonObject(QJsonObject json) {

    m_allow_literals_isValid = ::OpenAPI::fromJsonValue(m_allow_literals, json[QString("allowLiterals")]);
    m_allow_literals_isSet = !json[QString("allowLiterals")].isNull() && m_allow_literals_isValid;

    m_named_bindings_isValid = ::OpenAPI::fromJsonValue(m_named_bindings, json[QString("namedBindings")]);
    m_named_bindings_isSet = !json[QString("namedBindings")].isNull() && m_named_bindings_isValid;

    m_positional_bindings_isValid = ::OpenAPI::fromJsonValue(m_positional_bindings, json[QString("positionalBindings")]);
    m_positional_bindings_isSet = !json[QString("positionalBindings")].isNull() && m_positional_bindings_isValid;

    m_query_string_isValid = ::OpenAPI::fromJsonValue(m_query_string, json[QString("queryString")]);
    m_query_string_isSet = !json[QString("queryString")].isNull() && m_query_string_isValid;
}

QString OAIGqlQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGqlQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_literals_isSet) {
        obj.insert(QString("allowLiterals"), ::OpenAPI::toJsonValue(m_allow_literals));
    }
    if (m_named_bindings.size() > 0) {
        obj.insert(QString("namedBindings"), ::OpenAPI::toJsonValue(m_named_bindings));
    }
    if (m_positional_bindings.size() > 0) {
        obj.insert(QString("positionalBindings"), ::OpenAPI::toJsonValue(m_positional_bindings));
    }
    if (m_query_string_isSet) {
        obj.insert(QString("queryString"), ::OpenAPI::toJsonValue(m_query_string));
    }
    return obj;
}

bool OAIGqlQuery::isAllowLiterals() const {
    return m_allow_literals;
}
void OAIGqlQuery::setAllowLiterals(const bool &allow_literals) {
    m_allow_literals = allow_literals;
    m_allow_literals_isSet = true;
}

bool OAIGqlQuery::is_allow_literals_Set() const{
    return m_allow_literals_isSet;
}

bool OAIGqlQuery::is_allow_literals_Valid() const{
    return m_allow_literals_isValid;
}

QMap<QString, OAIGqlQueryParameter> OAIGqlQuery::getNamedBindings() const {
    return m_named_bindings;
}
void OAIGqlQuery::setNamedBindings(const QMap<QString, OAIGqlQueryParameter> &named_bindings) {
    m_named_bindings = named_bindings;
    m_named_bindings_isSet = true;
}

bool OAIGqlQuery::is_named_bindings_Set() const{
    return m_named_bindings_isSet;
}

bool OAIGqlQuery::is_named_bindings_Valid() const{
    return m_named_bindings_isValid;
}

QList<OAIGqlQueryParameter> OAIGqlQuery::getPositionalBindings() const {
    return m_positional_bindings;
}
void OAIGqlQuery::setPositionalBindings(const QList<OAIGqlQueryParameter> &positional_bindings) {
    m_positional_bindings = positional_bindings;
    m_positional_bindings_isSet = true;
}

bool OAIGqlQuery::is_positional_bindings_Set() const{
    return m_positional_bindings_isSet;
}

bool OAIGqlQuery::is_positional_bindings_Valid() const{
    return m_positional_bindings_isValid;
}

QString OAIGqlQuery::getQueryString() const {
    return m_query_string;
}
void OAIGqlQuery::setQueryString(const QString &query_string) {
    m_query_string = query_string;
    m_query_string_isSet = true;
}

bool OAIGqlQuery::is_query_string_Set() const{
    return m_query_string_isSet;
}

bool OAIGqlQuery::is_query_string_Valid() const{
    return m_query_string_isValid;
}

bool OAIGqlQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_literals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_bindings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_positional_bindings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGqlQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
