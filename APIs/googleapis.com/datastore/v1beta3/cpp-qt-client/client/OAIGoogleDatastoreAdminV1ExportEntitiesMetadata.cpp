/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDatastoreAdminV1ExportEntitiesMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::OAIGoogleDatastoreAdminV1ExportEntitiesMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::OAIGoogleDatastoreAdminV1ExportEntitiesMetadata() {
    this->initializeModel();
}

OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::~OAIGoogleDatastoreAdminV1ExportEntitiesMetadata() {}

void OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::initializeModel() {

    m_common_isSet = false;
    m_common_isValid = false;

    m_entity_filter_isSet = false;
    m_entity_filter_isValid = false;

    m_output_url_prefix_isSet = false;
    m_output_url_prefix_isValid = false;

    m_progress_bytes_isSet = false;
    m_progress_bytes_isValid = false;

    m_progress_entities_isSet = false;
    m_progress_entities_isValid = false;
}

void OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::fromJsonObject(QJsonObject json) {

    m_common_isValid = ::OpenAPI::fromJsonValue(m_common, json[QString("common")]);
    m_common_isSet = !json[QString("common")].isNull() && m_common_isValid;

    m_entity_filter_isValid = ::OpenAPI::fromJsonValue(m_entity_filter, json[QString("entityFilter")]);
    m_entity_filter_isSet = !json[QString("entityFilter")].isNull() && m_entity_filter_isValid;

    m_output_url_prefix_isValid = ::OpenAPI::fromJsonValue(m_output_url_prefix, json[QString("outputUrlPrefix")]);
    m_output_url_prefix_isSet = !json[QString("outputUrlPrefix")].isNull() && m_output_url_prefix_isValid;

    m_progress_bytes_isValid = ::OpenAPI::fromJsonValue(m_progress_bytes, json[QString("progressBytes")]);
    m_progress_bytes_isSet = !json[QString("progressBytes")].isNull() && m_progress_bytes_isValid;

    m_progress_entities_isValid = ::OpenAPI::fromJsonValue(m_progress_entities, json[QString("progressEntities")]);
    m_progress_entities_isSet = !json[QString("progressEntities")].isNull() && m_progress_entities_isValid;
}

QString OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_common.isSet()) {
        obj.insert(QString("common"), ::OpenAPI::toJsonValue(m_common));
    }
    if (m_entity_filter.isSet()) {
        obj.insert(QString("entityFilter"), ::OpenAPI::toJsonValue(m_entity_filter));
    }
    if (m_output_url_prefix_isSet) {
        obj.insert(QString("outputUrlPrefix"), ::OpenAPI::toJsonValue(m_output_url_prefix));
    }
    if (m_progress_bytes.isSet()) {
        obj.insert(QString("progressBytes"), ::OpenAPI::toJsonValue(m_progress_bytes));
    }
    if (m_progress_entities.isSet()) {
        obj.insert(QString("progressEntities"), ::OpenAPI::toJsonValue(m_progress_entities));
    }
    return obj;
}

OAIGoogleDatastoreAdminV1CommonMetadata OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::getCommon() const {
    return m_common;
}
void OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::setCommon(const OAIGoogleDatastoreAdminV1CommonMetadata &common) {
    m_common = common;
    m_common_isSet = true;
}

bool OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::is_common_Set() const{
    return m_common_isSet;
}

bool OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::is_common_Valid() const{
    return m_common_isValid;
}

OAIGoogleDatastoreAdminV1EntityFilter OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::getEntityFilter() const {
    return m_entity_filter;
}
void OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::setEntityFilter(const OAIGoogleDatastoreAdminV1EntityFilter &entity_filter) {
    m_entity_filter = entity_filter;
    m_entity_filter_isSet = true;
}

bool OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::is_entity_filter_Set() const{
    return m_entity_filter_isSet;
}

bool OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::is_entity_filter_Valid() const{
    return m_entity_filter_isValid;
}

QString OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::getOutputUrlPrefix() const {
    return m_output_url_prefix;
}
void OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::setOutputUrlPrefix(const QString &output_url_prefix) {
    m_output_url_prefix = output_url_prefix;
    m_output_url_prefix_isSet = true;
}

bool OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::is_output_url_prefix_Set() const{
    return m_output_url_prefix_isSet;
}

bool OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::is_output_url_prefix_Valid() const{
    return m_output_url_prefix_isValid;
}

OAIGoogleDatastoreAdminV1Progress OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::getProgressBytes() const {
    return m_progress_bytes;
}
void OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::setProgressBytes(const OAIGoogleDatastoreAdminV1Progress &progress_bytes) {
    m_progress_bytes = progress_bytes;
    m_progress_bytes_isSet = true;
}

bool OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::is_progress_bytes_Set() const{
    return m_progress_bytes_isSet;
}

bool OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::is_progress_bytes_Valid() const{
    return m_progress_bytes_isValid;
}

OAIGoogleDatastoreAdminV1Progress OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::getProgressEntities() const {
    return m_progress_entities;
}
void OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::setProgressEntities(const OAIGoogleDatastoreAdminV1Progress &progress_entities) {
    m_progress_entities = progress_entities;
    m_progress_entities_isSet = true;
}

bool OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::is_progress_entities_Set() const{
    return m_progress_entities_isSet;
}

bool OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::is_progress_entities_Valid() const{
    return m_progress_entities_isValid;
}

bool OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_url_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_bytes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_entities.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDatastoreAdminV1ExportEntitiesMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
