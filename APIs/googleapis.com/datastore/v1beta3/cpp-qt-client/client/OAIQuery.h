/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQuery.h
 *
 * A query for entities.
 */

#ifndef OAIQuery_H
#define OAIQuery_H

#include <QJsonObject>

#include "OAIFilter.h"
#include "OAIKindExpression.h"
#include "OAIProjection.h"
#include "OAIPropertyOrder.h"
#include "OAIPropertyReference.h"
#include <QByteArray>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPropertyReference;
class OAIFilter;
class OAIKindExpression;
class OAIPropertyOrder;
class OAIProjection;

class OAIQuery : public OAIObject {
public:
    OAIQuery();
    OAIQuery(QString json);
    ~OAIQuery() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIPropertyReference> getDistinctOn() const;
    void setDistinctOn(const QList<OAIPropertyReference> &distinct_on);
    bool is_distinct_on_Set() const;
    bool is_distinct_on_Valid() const;

    QByteArray getEndCursor() const;
    void setEndCursor(const QByteArray &end_cursor);
    bool is_end_cursor_Set() const;
    bool is_end_cursor_Valid() const;

    OAIFilter getFilter() const;
    void setFilter(const OAIFilter &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    QList<OAIKindExpression> getKind() const;
    void setKind(const QList<OAIKindExpression> &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QList<OAIPropertyOrder> getOrder() const;
    void setOrder(const QList<OAIPropertyOrder> &order);
    bool is_order_Set() const;
    bool is_order_Valid() const;

    QList<OAIProjection> getProjection() const;
    void setProjection(const QList<OAIProjection> &projection);
    bool is_projection_Set() const;
    bool is_projection_Valid() const;

    QByteArray getStartCursor() const;
    void setStartCursor(const QByteArray &start_cursor);
    bool is_start_cursor_Set() const;
    bool is_start_cursor_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIPropertyReference> m_distinct_on;
    bool m_distinct_on_isSet;
    bool m_distinct_on_isValid;

    QByteArray m_end_cursor;
    bool m_end_cursor_isSet;
    bool m_end_cursor_isValid;

    OAIFilter m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    QList<OAIKindExpression> m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QList<OAIPropertyOrder> m_order;
    bool m_order_isSet;
    bool m_order_isValid;

    QList<OAIProjection> m_projection;
    bool m_projection_isSet;
    bool m_projection_isValid;

    QByteArray m_start_cursor;
    bool m_start_cursor_isSet;
    bool m_start_cursor_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQuery)

#endif // OAIQuery_H
