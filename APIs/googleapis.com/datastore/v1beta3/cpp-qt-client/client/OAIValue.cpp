/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValue::OAIValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValue::OAIValue() {
    this->initializeModel();
}

OAIValue::~OAIValue() {}

void OAIValue::initializeModel() {

    m_array_value_isSet = false;
    m_array_value_isValid = false;

    m_blob_value_isSet = false;
    m_blob_value_isValid = false;

    m_boolean_value_isSet = false;
    m_boolean_value_isValid = false;

    m_double_value_isSet = false;
    m_double_value_isValid = false;

    m_entity_value_isSet = false;
    m_entity_value_isValid = false;

    m_exclude_from_indexes_isSet = false;
    m_exclude_from_indexes_isValid = false;

    m_geo_point_value_isSet = false;
    m_geo_point_value_isValid = false;

    m_integer_value_isSet = false;
    m_integer_value_isValid = false;

    m_key_value_isSet = false;
    m_key_value_isValid = false;

    m_meaning_isSet = false;
    m_meaning_isValid = false;

    m_null_value_isSet = false;
    m_null_value_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;

    m_timestamp_value_isSet = false;
    m_timestamp_value_isValid = false;
}

void OAIValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValue::fromJsonObject(QJsonObject json) {

    m_array_value_isValid = ::OpenAPI::fromJsonValue(m_array_value, json[QString("arrayValue")]);
    m_array_value_isSet = !json[QString("arrayValue")].isNull() && m_array_value_isValid;

    m_blob_value_isValid = ::OpenAPI::fromJsonValue(m_blob_value, json[QString("blobValue")]);
    m_blob_value_isSet = !json[QString("blobValue")].isNull() && m_blob_value_isValid;

    m_boolean_value_isValid = ::OpenAPI::fromJsonValue(m_boolean_value, json[QString("booleanValue")]);
    m_boolean_value_isSet = !json[QString("booleanValue")].isNull() && m_boolean_value_isValid;

    m_double_value_isValid = ::OpenAPI::fromJsonValue(m_double_value, json[QString("doubleValue")]);
    m_double_value_isSet = !json[QString("doubleValue")].isNull() && m_double_value_isValid;

    m_entity_value_isValid = ::OpenAPI::fromJsonValue(m_entity_value, json[QString("entityValue")]);
    m_entity_value_isSet = !json[QString("entityValue")].isNull() && m_entity_value_isValid;

    m_exclude_from_indexes_isValid = ::OpenAPI::fromJsonValue(m_exclude_from_indexes, json[QString("excludeFromIndexes")]);
    m_exclude_from_indexes_isSet = !json[QString("excludeFromIndexes")].isNull() && m_exclude_from_indexes_isValid;

    m_geo_point_value_isValid = ::OpenAPI::fromJsonValue(m_geo_point_value, json[QString("geoPointValue")]);
    m_geo_point_value_isSet = !json[QString("geoPointValue")].isNull() && m_geo_point_value_isValid;

    m_integer_value_isValid = ::OpenAPI::fromJsonValue(m_integer_value, json[QString("integerValue")]);
    m_integer_value_isSet = !json[QString("integerValue")].isNull() && m_integer_value_isValid;

    m_key_value_isValid = ::OpenAPI::fromJsonValue(m_key_value, json[QString("keyValue")]);
    m_key_value_isSet = !json[QString("keyValue")].isNull() && m_key_value_isValid;

    m_meaning_isValid = ::OpenAPI::fromJsonValue(m_meaning, json[QString("meaning")]);
    m_meaning_isSet = !json[QString("meaning")].isNull() && m_meaning_isValid;

    m_null_value_isValid = ::OpenAPI::fromJsonValue(m_null_value, json[QString("nullValue")]);
    m_null_value_isSet = !json[QString("nullValue")].isNull() && m_null_value_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;

    m_timestamp_value_isValid = ::OpenAPI::fromJsonValue(m_timestamp_value, json[QString("timestampValue")]);
    m_timestamp_value_isSet = !json[QString("timestampValue")].isNull() && m_timestamp_value_isValid;
}

QString OAIValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValue::asJsonObject() const {
    QJsonObject obj;
    if (m_array_value.isSet()) {
        obj.insert(QString("arrayValue"), ::OpenAPI::toJsonValue(m_array_value));
    }
    if (m_blob_value_isSet) {
        obj.insert(QString("blobValue"), ::OpenAPI::toJsonValue(m_blob_value));
    }
    if (m_boolean_value_isSet) {
        obj.insert(QString("booleanValue"), ::OpenAPI::toJsonValue(m_boolean_value));
    }
    if (m_double_value_isSet) {
        obj.insert(QString("doubleValue"), ::OpenAPI::toJsonValue(m_double_value));
    }
    if (m_entity_value.isSet()) {
        obj.insert(QString("entityValue"), ::OpenAPI::toJsonValue(m_entity_value));
    }
    if (m_exclude_from_indexes_isSet) {
        obj.insert(QString("excludeFromIndexes"), ::OpenAPI::toJsonValue(m_exclude_from_indexes));
    }
    if (m_geo_point_value.isSet()) {
        obj.insert(QString("geoPointValue"), ::OpenAPI::toJsonValue(m_geo_point_value));
    }
    if (m_integer_value_isSet) {
        obj.insert(QString("integerValue"), ::OpenAPI::toJsonValue(m_integer_value));
    }
    if (m_key_value.isSet()) {
        obj.insert(QString("keyValue"), ::OpenAPI::toJsonValue(m_key_value));
    }
    if (m_meaning_isSet) {
        obj.insert(QString("meaning"), ::OpenAPI::toJsonValue(m_meaning));
    }
    if (m_null_value_isSet) {
        obj.insert(QString("nullValue"), ::OpenAPI::toJsonValue(m_null_value));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    if (m_timestamp_value_isSet) {
        obj.insert(QString("timestampValue"), ::OpenAPI::toJsonValue(m_timestamp_value));
    }
    return obj;
}

OAIArrayValue OAIValue::getArrayValue() const {
    return m_array_value;
}
void OAIValue::setArrayValue(const OAIArrayValue &array_value) {
    m_array_value = array_value;
    m_array_value_isSet = true;
}

bool OAIValue::is_array_value_Set() const{
    return m_array_value_isSet;
}

bool OAIValue::is_array_value_Valid() const{
    return m_array_value_isValid;
}

QByteArray OAIValue::getBlobValue() const {
    return m_blob_value;
}
void OAIValue::setBlobValue(const QByteArray &blob_value) {
    m_blob_value = blob_value;
    m_blob_value_isSet = true;
}

bool OAIValue::is_blob_value_Set() const{
    return m_blob_value_isSet;
}

bool OAIValue::is_blob_value_Valid() const{
    return m_blob_value_isValid;
}

bool OAIValue::isBooleanValue() const {
    return m_boolean_value;
}
void OAIValue::setBooleanValue(const bool &boolean_value) {
    m_boolean_value = boolean_value;
    m_boolean_value_isSet = true;
}

bool OAIValue::is_boolean_value_Set() const{
    return m_boolean_value_isSet;
}

bool OAIValue::is_boolean_value_Valid() const{
    return m_boolean_value_isValid;
}

double OAIValue::getDoubleValue() const {
    return m_double_value;
}
void OAIValue::setDoubleValue(const double &double_value) {
    m_double_value = double_value;
    m_double_value_isSet = true;
}

bool OAIValue::is_double_value_Set() const{
    return m_double_value_isSet;
}

bool OAIValue::is_double_value_Valid() const{
    return m_double_value_isValid;
}

OAIEntity OAIValue::getEntityValue() const {
    return m_entity_value;
}
void OAIValue::setEntityValue(const OAIEntity &entity_value) {
    m_entity_value = entity_value;
    m_entity_value_isSet = true;
}

bool OAIValue::is_entity_value_Set() const{
    return m_entity_value_isSet;
}

bool OAIValue::is_entity_value_Valid() const{
    return m_entity_value_isValid;
}

bool OAIValue::isExcludeFromIndexes() const {
    return m_exclude_from_indexes;
}
void OAIValue::setExcludeFromIndexes(const bool &exclude_from_indexes) {
    m_exclude_from_indexes = exclude_from_indexes;
    m_exclude_from_indexes_isSet = true;
}

bool OAIValue::is_exclude_from_indexes_Set() const{
    return m_exclude_from_indexes_isSet;
}

bool OAIValue::is_exclude_from_indexes_Valid() const{
    return m_exclude_from_indexes_isValid;
}

OAILatLng OAIValue::getGeoPointValue() const {
    return m_geo_point_value;
}
void OAIValue::setGeoPointValue(const OAILatLng &geo_point_value) {
    m_geo_point_value = geo_point_value;
    m_geo_point_value_isSet = true;
}

bool OAIValue::is_geo_point_value_Set() const{
    return m_geo_point_value_isSet;
}

bool OAIValue::is_geo_point_value_Valid() const{
    return m_geo_point_value_isValid;
}

QString OAIValue::getIntegerValue() const {
    return m_integer_value;
}
void OAIValue::setIntegerValue(const QString &integer_value) {
    m_integer_value = integer_value;
    m_integer_value_isSet = true;
}

bool OAIValue::is_integer_value_Set() const{
    return m_integer_value_isSet;
}

bool OAIValue::is_integer_value_Valid() const{
    return m_integer_value_isValid;
}

OAIKey OAIValue::getKeyValue() const {
    return m_key_value;
}
void OAIValue::setKeyValue(const OAIKey &key_value) {
    m_key_value = key_value;
    m_key_value_isSet = true;
}

bool OAIValue::is_key_value_Set() const{
    return m_key_value_isSet;
}

bool OAIValue::is_key_value_Valid() const{
    return m_key_value_isValid;
}

qint32 OAIValue::getMeaning() const {
    return m_meaning;
}
void OAIValue::setMeaning(const qint32 &meaning) {
    m_meaning = meaning;
    m_meaning_isSet = true;
}

bool OAIValue::is_meaning_Set() const{
    return m_meaning_isSet;
}

bool OAIValue::is_meaning_Valid() const{
    return m_meaning_isValid;
}

QString OAIValue::getNullValue() const {
    return m_null_value;
}
void OAIValue::setNullValue(const QString &null_value) {
    m_null_value = null_value;
    m_null_value_isSet = true;
}

bool OAIValue::is_null_value_Set() const{
    return m_null_value_isSet;
}

bool OAIValue::is_null_value_Valid() const{
    return m_null_value_isValid;
}

QString OAIValue::getStringValue() const {
    return m_string_value;
}
void OAIValue::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIValue::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIValue::is_string_value_Valid() const{
    return m_string_value_isValid;
}

QString OAIValue::getTimestampValue() const {
    return m_timestamp_value;
}
void OAIValue::setTimestampValue(const QString &timestamp_value) {
    m_timestamp_value = timestamp_value;
    m_timestamp_value_isSet = true;
}

bool OAIValue::is_timestamp_value_Set() const{
    return m_timestamp_value_isSet;
}

bool OAIValue::is_timestamp_value_Valid() const{
    return m_timestamp_value_isValid;
}

bool OAIValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_array_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blob_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boolean_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_from_indexes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_point_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meaning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
