/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQueryResultBatch.h
 *
 * A batch of results produced by a query.
 */

#ifndef OAIQueryResultBatch_H
#define OAIQueryResultBatch_H

#include <QJsonObject>

#include "OAIEntityResult.h"
#include <QByteArray>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEntityResult;

class OAIQueryResultBatch : public OAIObject {
public:
    OAIQueryResultBatch();
    OAIQueryResultBatch(QString json);
    ~OAIQueryResultBatch() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QByteArray getEndCursor() const;
    void setEndCursor(const QByteArray &end_cursor);
    bool is_end_cursor_Set() const;
    bool is_end_cursor_Valid() const;

    QString getEntityResultType() const;
    void setEntityResultType(const QString &entity_result_type);
    bool is_entity_result_type_Set() const;
    bool is_entity_result_type_Valid() const;

    QList<OAIEntityResult> getEntityResults() const;
    void setEntityResults(const QList<OAIEntityResult> &entity_results);
    bool is_entity_results_Set() const;
    bool is_entity_results_Valid() const;

    QString getMoreResults() const;
    void setMoreResults(const QString &more_results);
    bool is_more_results_Set() const;
    bool is_more_results_Valid() const;

    QString getReadTime() const;
    void setReadTime(const QString &read_time);
    bool is_read_time_Set() const;
    bool is_read_time_Valid() const;

    QByteArray getSkippedCursor() const;
    void setSkippedCursor(const QByteArray &skipped_cursor);
    bool is_skipped_cursor_Set() const;
    bool is_skipped_cursor_Valid() const;

    qint32 getSkippedResults() const;
    void setSkippedResults(const qint32 &skipped_results);
    bool is_skipped_results_Set() const;
    bool is_skipped_results_Valid() const;

    QString getSnapshotVersion() const;
    void setSnapshotVersion(const QString &snapshot_version);
    bool is_snapshot_version_Set() const;
    bool is_snapshot_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QByteArray m_end_cursor;
    bool m_end_cursor_isSet;
    bool m_end_cursor_isValid;

    QString m_entity_result_type;
    bool m_entity_result_type_isSet;
    bool m_entity_result_type_isValid;

    QList<OAIEntityResult> m_entity_results;
    bool m_entity_results_isSet;
    bool m_entity_results_isValid;

    QString m_more_results;
    bool m_more_results_isSet;
    bool m_more_results_isValid;

    QString m_read_time;
    bool m_read_time_isSet;
    bool m_read_time_isValid;

    QByteArray m_skipped_cursor;
    bool m_skipped_cursor_isSet;
    bool m_skipped_cursor_isValid;

    qint32 m_skipped_results;
    bool m_skipped_results_isSet;
    bool m_skipped_results_isValid;

    QString m_snapshot_version;
    bool m_snapshot_version_isSet;
    bool m_snapshot_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQueryResultBatch)

#endif // OAIQueryResultBatch_H
