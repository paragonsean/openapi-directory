/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMutationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMutationResult::OAIMutationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMutationResult::OAIMutationResult() {
    this->initializeModel();
}

OAIMutationResult::~OAIMutationResult() {}

void OAIMutationResult::initializeModel() {

    m_conflict_detected_isSet = false;
    m_conflict_detected_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIMutationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMutationResult::fromJsonObject(QJsonObject json) {

    m_conflict_detected_isValid = ::OpenAPI::fromJsonValue(m_conflict_detected, json[QString("conflictDetected")]);
    m_conflict_detected_isSet = !json[QString("conflictDetected")].isNull() && m_conflict_detected_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIMutationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMutationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_conflict_detected_isSet) {
        obj.insert(QString("conflictDetected"), ::OpenAPI::toJsonValue(m_conflict_detected));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_key.isSet()) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIMutationResult::isConflictDetected() const {
    return m_conflict_detected;
}
void OAIMutationResult::setConflictDetected(const bool &conflict_detected) {
    m_conflict_detected = conflict_detected;
    m_conflict_detected_isSet = true;
}

bool OAIMutationResult::is_conflict_detected_Set() const{
    return m_conflict_detected_isSet;
}

bool OAIMutationResult::is_conflict_detected_Valid() const{
    return m_conflict_detected_isValid;
}

QString OAIMutationResult::getCreateTime() const {
    return m_create_time;
}
void OAIMutationResult::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIMutationResult::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIMutationResult::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIKey OAIMutationResult::getKey() const {
    return m_key;
}
void OAIMutationResult::setKey(const OAIKey &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIMutationResult::is_key_Set() const{
    return m_key_isSet;
}

bool OAIMutationResult::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIMutationResult::getUpdateTime() const {
    return m_update_time;
}
void OAIMutationResult::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIMutationResult::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIMutationResult::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIMutationResult::getVersion() const {
    return m_version;
}
void OAIMutationResult::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIMutationResult::is_version_Set() const{
    return m_version_isSet;
}

bool OAIMutationResult::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIMutationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conflict_detected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMutationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
