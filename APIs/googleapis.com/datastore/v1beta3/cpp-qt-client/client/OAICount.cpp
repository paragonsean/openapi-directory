/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICount::OAICount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICount::OAICount() {
    this->initializeModel();
}

OAICount::~OAICount() {}

void OAICount::initializeModel() {

    m_up_to_isSet = false;
    m_up_to_isValid = false;
}

void OAICount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICount::fromJsonObject(QJsonObject json) {

    m_up_to_isValid = ::OpenAPI::fromJsonValue(m_up_to, json[QString("upTo")]);
    m_up_to_isSet = !json[QString("upTo")].isNull() && m_up_to_isValid;
}

QString OAICount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICount::asJsonObject() const {
    QJsonObject obj;
    if (m_up_to_isSet) {
        obj.insert(QString("upTo"), ::OpenAPI::toJsonValue(m_up_to));
    }
    return obj;
}

QString OAICount::getUpTo() const {
    return m_up_to;
}
void OAICount::setUpTo(const QString &up_to) {
    m_up_to = up_to;
    m_up_to_isSet = true;
}

bool OAICount::is_up_to_Set() const{
    return m_up_to_isSet;
}

bool OAICount::is_up_to_Valid() const{
    return m_up_to_isValid;
}

bool OAICount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_up_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
