/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPropertyOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPropertyOrder::OAIPropertyOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPropertyOrder::OAIPropertyOrder() {
    this->initializeModel();
}

OAIPropertyOrder::~OAIPropertyOrder() {}

void OAIPropertyOrder::initializeModel() {

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;
}

void OAIPropertyOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPropertyOrder::fromJsonObject(QJsonObject json) {

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;
}

QString OAIPropertyOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPropertyOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_property.isSet()) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    return obj;
}

QString OAIPropertyOrder::getDirection() const {
    return m_direction;
}
void OAIPropertyOrder::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIPropertyOrder::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIPropertyOrder::is_direction_Valid() const{
    return m_direction_isValid;
}

OAIPropertyReference OAIPropertyOrder::getProperty() const {
    return m_property;
}
void OAIPropertyOrder::setProperty(const OAIPropertyReference &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIPropertyOrder::is_property_Set() const{
    return m_property_isSet;
}

bool OAIPropertyOrder::is_property_Valid() const{
    return m_property_isValid;
}

bool OAIPropertyOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPropertyOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
