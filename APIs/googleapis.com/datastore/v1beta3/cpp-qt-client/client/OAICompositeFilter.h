/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICompositeFilter.h
 *
 * A filter that merges multiple other filters using the given operator.
 */

#ifndef OAICompositeFilter_H
#define OAICompositeFilter_H

#include <QJsonObject>

#include "OAIFilter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFilter;

class OAICompositeFilter : public OAIObject {
public:
    OAICompositeFilter();
    OAICompositeFilter(QString json);
    ~OAICompositeFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIFilter> getFilters() const;
    void setFilters(const QList<OAIFilter> &filters);
    bool is_filters_Set() const;
    bool is_filters_Valid() const;

    QString getOp() const;
    void setOp(const QString &op);
    bool is_op_Set() const;
    bool is_op_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIFilter> m_filters;
    bool m_filters_isSet;
    bool m_filters_isValid;

    QString m_op;
    bool m_op_isSet;
    bool m_op_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICompositeFilter)

#endif // OAICompositeFilter_H
