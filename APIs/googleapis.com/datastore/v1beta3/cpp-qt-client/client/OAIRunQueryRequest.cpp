/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunQueryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunQueryRequest::OAIRunQueryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunQueryRequest::OAIRunQueryRequest() {
    this->initializeModel();
}

OAIRunQueryRequest::~OAIRunQueryRequest() {}

void OAIRunQueryRequest::initializeModel() {

    m_gql_query_isSet = false;
    m_gql_query_isValid = false;

    m_partition_id_isSet = false;
    m_partition_id_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_read_options_isSet = false;
    m_read_options_isValid = false;
}

void OAIRunQueryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunQueryRequest::fromJsonObject(QJsonObject json) {

    m_gql_query_isValid = ::OpenAPI::fromJsonValue(m_gql_query, json[QString("gqlQuery")]);
    m_gql_query_isSet = !json[QString("gqlQuery")].isNull() && m_gql_query_isValid;

    m_partition_id_isValid = ::OpenAPI::fromJsonValue(m_partition_id, json[QString("partitionId")]);
    m_partition_id_isSet = !json[QString("partitionId")].isNull() && m_partition_id_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_read_options_isValid = ::OpenAPI::fromJsonValue(m_read_options, json[QString("readOptions")]);
    m_read_options_isSet = !json[QString("readOptions")].isNull() && m_read_options_isValid;
}

QString OAIRunQueryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunQueryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_gql_query.isSet()) {
        obj.insert(QString("gqlQuery"), ::OpenAPI::toJsonValue(m_gql_query));
    }
    if (m_partition_id.isSet()) {
        obj.insert(QString("partitionId"), ::OpenAPI::toJsonValue(m_partition_id));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_read_options.isSet()) {
        obj.insert(QString("readOptions"), ::OpenAPI::toJsonValue(m_read_options));
    }
    return obj;
}

OAIGqlQuery OAIRunQueryRequest::getGqlQuery() const {
    return m_gql_query;
}
void OAIRunQueryRequest::setGqlQuery(const OAIGqlQuery &gql_query) {
    m_gql_query = gql_query;
    m_gql_query_isSet = true;
}

bool OAIRunQueryRequest::is_gql_query_Set() const{
    return m_gql_query_isSet;
}

bool OAIRunQueryRequest::is_gql_query_Valid() const{
    return m_gql_query_isValid;
}

OAIPartitionId OAIRunQueryRequest::getPartitionId() const {
    return m_partition_id;
}
void OAIRunQueryRequest::setPartitionId(const OAIPartitionId &partition_id) {
    m_partition_id = partition_id;
    m_partition_id_isSet = true;
}

bool OAIRunQueryRequest::is_partition_id_Set() const{
    return m_partition_id_isSet;
}

bool OAIRunQueryRequest::is_partition_id_Valid() const{
    return m_partition_id_isValid;
}

OAIQuery OAIRunQueryRequest::getQuery() const {
    return m_query;
}
void OAIRunQueryRequest::setQuery(const OAIQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIRunQueryRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAIRunQueryRequest::is_query_Valid() const{
    return m_query_isValid;
}

OAIReadOptions OAIRunQueryRequest::getReadOptions() const {
    return m_read_options;
}
void OAIRunQueryRequest::setReadOptions(const OAIReadOptions &read_options) {
    m_read_options = read_options;
    m_read_options_isSet = true;
}

bool OAIRunQueryRequest::is_read_options_Set() const{
    return m_read_options_isSet;
}

bool OAIRunQueryRequest::is_read_options_Valid() const{
    return m_read_options_isValid;
}

bool OAIRunQueryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gql_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunQueryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
