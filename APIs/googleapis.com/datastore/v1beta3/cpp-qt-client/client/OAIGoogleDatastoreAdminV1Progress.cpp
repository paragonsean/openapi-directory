/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDatastoreAdminV1Progress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDatastoreAdminV1Progress::OAIGoogleDatastoreAdminV1Progress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDatastoreAdminV1Progress::OAIGoogleDatastoreAdminV1Progress() {
    this->initializeModel();
}

OAIGoogleDatastoreAdminV1Progress::~OAIGoogleDatastoreAdminV1Progress() {}

void OAIGoogleDatastoreAdminV1Progress::initializeModel() {

    m_work_completed_isSet = false;
    m_work_completed_isValid = false;

    m_work_estimated_isSet = false;
    m_work_estimated_isValid = false;
}

void OAIGoogleDatastoreAdminV1Progress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDatastoreAdminV1Progress::fromJsonObject(QJsonObject json) {

    m_work_completed_isValid = ::OpenAPI::fromJsonValue(m_work_completed, json[QString("workCompleted")]);
    m_work_completed_isSet = !json[QString("workCompleted")].isNull() && m_work_completed_isValid;

    m_work_estimated_isValid = ::OpenAPI::fromJsonValue(m_work_estimated, json[QString("workEstimated")]);
    m_work_estimated_isSet = !json[QString("workEstimated")].isNull() && m_work_estimated_isValid;
}

QString OAIGoogleDatastoreAdminV1Progress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDatastoreAdminV1Progress::asJsonObject() const {
    QJsonObject obj;
    if (m_work_completed_isSet) {
        obj.insert(QString("workCompleted"), ::OpenAPI::toJsonValue(m_work_completed));
    }
    if (m_work_estimated_isSet) {
        obj.insert(QString("workEstimated"), ::OpenAPI::toJsonValue(m_work_estimated));
    }
    return obj;
}

QString OAIGoogleDatastoreAdminV1Progress::getWorkCompleted() const {
    return m_work_completed;
}
void OAIGoogleDatastoreAdminV1Progress::setWorkCompleted(const QString &work_completed) {
    m_work_completed = work_completed;
    m_work_completed_isSet = true;
}

bool OAIGoogleDatastoreAdminV1Progress::is_work_completed_Set() const{
    return m_work_completed_isSet;
}

bool OAIGoogleDatastoreAdminV1Progress::is_work_completed_Valid() const{
    return m_work_completed_isValid;
}

QString OAIGoogleDatastoreAdminV1Progress::getWorkEstimated() const {
    return m_work_estimated;
}
void OAIGoogleDatastoreAdminV1Progress::setWorkEstimated(const QString &work_estimated) {
    m_work_estimated = work_estimated;
    m_work_estimated_isSet = true;
}

bool OAIGoogleDatastoreAdminV1Progress::is_work_estimated_Set() const{
    return m_work_estimated_isSet;
}

bool OAIGoogleDatastoreAdminV1Progress::is_work_estimated_Valid() const{
    return m_work_estimated_isValid;
}

bool OAIGoogleDatastoreAdminV1Progress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_work_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_estimated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDatastoreAdminV1Progress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
