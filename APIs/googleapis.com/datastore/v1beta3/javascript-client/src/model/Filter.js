/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompositeFilter from './CompositeFilter';
import PropertyFilter from './PropertyFilter';

/**
 * The Filter model module.
 * @module model/Filter
 * @version v1beta3
 */
class Filter {
    /**
     * Constructs a new <code>Filter</code>.
     * A holder for any type of filter.
     * @alias module:model/Filter
     */
    constructor() { 
        
        Filter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Filter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Filter} obj Optional instance to populate.
     * @return {module:model/Filter} The populated <code>Filter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Filter();

            if (data.hasOwnProperty('compositeFilter')) {
                obj['compositeFilter'] = CompositeFilter.constructFromObject(data['compositeFilter']);
            }
            if (data.hasOwnProperty('propertyFilter')) {
                obj['propertyFilter'] = PropertyFilter.constructFromObject(data['propertyFilter']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Filter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Filter</code>.
     */
    static validateJSON(data) {
        // validate the optional field `compositeFilter`
        if (data['compositeFilter']) { // data not null
          CompositeFilter.validateJSON(data['compositeFilter']);
        }
        // validate the optional field `propertyFilter`
        if (data['propertyFilter']) { // data not null
          PropertyFilter.validateJSON(data['propertyFilter']);
        }

        return true;
    }


}



/**
 * @member {module:model/CompositeFilter} compositeFilter
 */
Filter.prototype['compositeFilter'] = undefined;

/**
 * @member {module:model/PropertyFilter} propertyFilter
 */
Filter.prototype['propertyFilter'] = undefined;






export default Filter;

