/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Key from './Key';

/**
 * The MutationResult model module.
 * @module model/MutationResult
 * @version v1beta3
 */
class MutationResult {
    /**
     * Constructs a new <code>MutationResult</code>.
     * The result of applying a mutation.
     * @alias module:model/MutationResult
     */
    constructor() { 
        
        MutationResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MutationResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MutationResult} obj Optional instance to populate.
     * @return {module:model/MutationResult} The populated <code>MutationResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MutationResult();

            if (data.hasOwnProperty('conflictDetected')) {
                obj['conflictDetected'] = ApiClient.convertToType(data['conflictDetected'], 'Boolean');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = Key.constructFromObject(data['key']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MutationResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MutationResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `key`
        if (data['key']) { // data not null
          Key.validateJSON(data['key']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * Whether a conflict was detected for this mutation. Always false when a conflict detection strategy field is not set in the mutation.
 * @member {Boolean} conflictDetected
 */
MutationResult.prototype['conflictDetected'] = undefined;

/**
 * The create time of the entity. This field will not be set after a 'delete'.
 * @member {String} createTime
 */
MutationResult.prototype['createTime'] = undefined;

/**
 * @member {module:model/Key} key
 */
MutationResult.prototype['key'] = undefined;

/**
 * The update time of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the timestamp will be the update timestamp of the current entity. This field will not be set after a 'delete'.
 * @member {String} updateTime
 */
MutationResult.prototype['updateTime'] = undefined;

/**
 * The version of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the version will be the version of the current entity or, if no entity is present, a version that is strictly greater than the version of any previous entity and less than the version of any possible future entity.
 * @member {String} version
 */
MutationResult.prototype['version'] = undefined;






export default MutationResult;

