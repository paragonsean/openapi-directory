/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityResult from './EntityResult';

/**
 * The QueryResultBatch model module.
 * @module model/QueryResultBatch
 * @version v1beta3
 */
class QueryResultBatch {
    /**
     * Constructs a new <code>QueryResultBatch</code>.
     * A batch of results produced by a query.
     * @alias module:model/QueryResultBatch
     */
    constructor() { 
        
        QueryResultBatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryResultBatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryResultBatch} obj Optional instance to populate.
     * @return {module:model/QueryResultBatch} The populated <code>QueryResultBatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryResultBatch();

            if (data.hasOwnProperty('endCursor')) {
                obj['endCursor'] = ApiClient.convertToType(data['endCursor'], 'Blob');
            }
            if (data.hasOwnProperty('entityResultType')) {
                obj['entityResultType'] = ApiClient.convertToType(data['entityResultType'], 'String');
            }
            if (data.hasOwnProperty('entityResults')) {
                obj['entityResults'] = ApiClient.convertToType(data['entityResults'], [EntityResult]);
            }
            if (data.hasOwnProperty('moreResults')) {
                obj['moreResults'] = ApiClient.convertToType(data['moreResults'], 'String');
            }
            if (data.hasOwnProperty('readTime')) {
                obj['readTime'] = ApiClient.convertToType(data['readTime'], 'String');
            }
            if (data.hasOwnProperty('skippedCursor')) {
                obj['skippedCursor'] = ApiClient.convertToType(data['skippedCursor'], 'Blob');
            }
            if (data.hasOwnProperty('skippedResults')) {
                obj['skippedResults'] = ApiClient.convertToType(data['skippedResults'], 'Number');
            }
            if (data.hasOwnProperty('snapshotVersion')) {
                obj['snapshotVersion'] = ApiClient.convertToType(data['snapshotVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryResultBatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryResultBatch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['entityResultType'] && !(typeof data['entityResultType'] === 'string' || data['entityResultType'] instanceof String)) {
            throw new Error("Expected the field `entityResultType` to be a primitive type in the JSON string but got " + data['entityResultType']);
        }
        if (data['entityResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entityResults'])) {
                throw new Error("Expected the field `entityResults` to be an array in the JSON data but got " + data['entityResults']);
            }
            // validate the optional field `entityResults` (array)
            for (const item of data['entityResults']) {
                EntityResult.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['moreResults'] && !(typeof data['moreResults'] === 'string' || data['moreResults'] instanceof String)) {
            throw new Error("Expected the field `moreResults` to be a primitive type in the JSON string but got " + data['moreResults']);
        }
        // ensure the json data is a string
        if (data['readTime'] && !(typeof data['readTime'] === 'string' || data['readTime'] instanceof String)) {
            throw new Error("Expected the field `readTime` to be a primitive type in the JSON string but got " + data['readTime']);
        }
        // ensure the json data is a string
        if (data['snapshotVersion'] && !(typeof data['snapshotVersion'] === 'string' || data['snapshotVersion'] instanceof String)) {
            throw new Error("Expected the field `snapshotVersion` to be a primitive type in the JSON string but got " + data['snapshotVersion']);
        }

        return true;
    }


}



/**
 * A cursor that points to the position after the last result in the batch.
 * @member {Blob} endCursor
 */
QueryResultBatch.prototype['endCursor'] = undefined;

/**
 * The result type for every entity in `entity_results`.
 * @member {module:model/QueryResultBatch.EntityResultTypeEnum} entityResultType
 */
QueryResultBatch.prototype['entityResultType'] = undefined;

/**
 * The results for this batch.
 * @member {Array.<module:model/EntityResult>} entityResults
 */
QueryResultBatch.prototype['entityResults'] = undefined;

/**
 * The state of the query after the current batch.
 * @member {module:model/QueryResultBatch.MoreResultsEnum} moreResults
 */
QueryResultBatch.prototype['moreResults'] = undefined;

/**
 * Read timestamp this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches. This value will not be set for eventually consistent queries in Cloud Datastore.
 * @member {String} readTime
 */
QueryResultBatch.prototype['readTime'] = undefined;

/**
 * A cursor that points to the position after the last skipped result. Will be set when `skipped_results` != 0.
 * @member {Blob} skippedCursor
 */
QueryResultBatch.prototype['skippedCursor'] = undefined;

/**
 * The number of results skipped, typically because of an offset.
 * @member {Number} skippedResults
 */
QueryResultBatch.prototype['skippedResults'] = undefined;

/**
 * The version number of the snapshot this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater snapshot version number. Each batch's snapshot version is valid for all preceding batches. The value will be zero for eventually consistent queries.
 * @member {String} snapshotVersion
 */
QueryResultBatch.prototype['snapshotVersion'] = undefined;





/**
 * Allowed values for the <code>entityResultType</code> property.
 * @enum {String}
 * @readonly
 */
QueryResultBatch['EntityResultTypeEnum'] = {

    /**
     * value: "RESULT_TYPE_UNSPECIFIED"
     * @const
     */
    "RESULT_TYPE_UNSPECIFIED": "RESULT_TYPE_UNSPECIFIED",

    /**
     * value: "FULL"
     * @const
     */
    "FULL": "FULL",

    /**
     * value: "PROJECTION"
     * @const
     */
    "PROJECTION": "PROJECTION",

    /**
     * value: "KEY_ONLY"
     * @const
     */
    "KEY_ONLY": "KEY_ONLY"
};


/**
 * Allowed values for the <code>moreResults</code> property.
 * @enum {String}
 * @readonly
 */
QueryResultBatch['MoreResultsEnum'] = {

    /**
     * value: "MORE_RESULTS_TYPE_UNSPECIFIED"
     * @const
     */
    "MORE_RESULTS_TYPE_UNSPECIFIED": "MORE_RESULTS_TYPE_UNSPECIFIED",

    /**
     * value: "NOT_FINISHED"
     * @const
     */
    "NOT_FINISHED": "NOT_FINISHED",

    /**
     * value: "MORE_RESULTS_AFTER_LIMIT"
     * @const
     */
    "MORE_RESULTS_AFTER_LIMIT": "MORE_RESULTS_AFTER_LIMIT",

    /**
     * value: "MORE_RESULTS_AFTER_CURSOR"
     * @const
     */
    "MORE_RESULTS_AFTER_CURSOR": "MORE_RESULTS_AFTER_CURSOR",

    /**
     * value: "NO_MORE_RESULTS"
     * @const
     */
    "NO_MORE_RESULTS": "NO_MORE_RESULTS"
};



export default QueryResultBatch;

