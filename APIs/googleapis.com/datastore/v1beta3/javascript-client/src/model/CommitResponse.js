/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MutationResult from './MutationResult';

/**
 * The CommitResponse model module.
 * @module model/CommitResponse
 * @version v1beta3
 */
class CommitResponse {
    /**
     * Constructs a new <code>CommitResponse</code>.
     * The response for Datastore.Commit.
     * @alias module:model/CommitResponse
     */
    constructor() { 
        
        CommitResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommitResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommitResponse} obj Optional instance to populate.
     * @return {module:model/CommitResponse} The populated <code>CommitResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommitResponse();

            if (data.hasOwnProperty('commitTime')) {
                obj['commitTime'] = ApiClient.convertToType(data['commitTime'], 'String');
            }
            if (data.hasOwnProperty('indexUpdates')) {
                obj['indexUpdates'] = ApiClient.convertToType(data['indexUpdates'], 'Number');
            }
            if (data.hasOwnProperty('mutationResults')) {
                obj['mutationResults'] = ApiClient.convertToType(data['mutationResults'], [MutationResult]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommitResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommitResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commitTime'] && !(typeof data['commitTime'] === 'string' || data['commitTime'] instanceof String)) {
            throw new Error("Expected the field `commitTime` to be a primitive type in the JSON string but got " + data['commitTime']);
        }
        if (data['mutationResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mutationResults'])) {
                throw new Error("Expected the field `mutationResults` to be an array in the JSON data but got " + data['mutationResults']);
            }
            // validate the optional field `mutationResults` (array)
            for (const item of data['mutationResults']) {
                MutationResult.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The transaction commit timestamp. Not set for non-transactional commits.
 * @member {String} commitTime
 */
CommitResponse.prototype['commitTime'] = undefined;

/**
 * The number of index entries updated during the commit, or zero if none were updated.
 * @member {Number} indexUpdates
 */
CommitResponse.prototype['indexUpdates'] = undefined;

/**
 * The result of performing the mutations. The i-th mutation result corresponds to the i-th mutation in the request.
 * @member {Array.<module:model/MutationResult>} mutationResults
 */
CommitResponse.prototype['mutationResults'] = undefined;






export default CommitResponse;

