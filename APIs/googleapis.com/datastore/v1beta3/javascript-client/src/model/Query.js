/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Filter from './Filter';
import KindExpression from './KindExpression';
import Projection from './Projection';
import PropertyOrder from './PropertyOrder';
import PropertyReference from './PropertyReference';

/**
 * The Query model module.
 * @module model/Query
 * @version v1beta3
 */
class Query {
    /**
     * Constructs a new <code>Query</code>.
     * A query for entities.
     * @alias module:model/Query
     */
    constructor() { 
        
        Query.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Query</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Query} obj Optional instance to populate.
     * @return {module:model/Query} The populated <code>Query</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Query();

            if (data.hasOwnProperty('distinctOn')) {
                obj['distinctOn'] = ApiClient.convertToType(data['distinctOn'], [PropertyReference]);
            }
            if (data.hasOwnProperty('endCursor')) {
                obj['endCursor'] = ApiClient.convertToType(data['endCursor'], 'Blob');
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = Filter.constructFromObject(data['filter']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], [KindExpression]);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], [PropertyOrder]);
            }
            if (data.hasOwnProperty('projection')) {
                obj['projection'] = ApiClient.convertToType(data['projection'], [Projection]);
            }
            if (data.hasOwnProperty('startCursor')) {
                obj['startCursor'] = ApiClient.convertToType(data['startCursor'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Query</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Query</code>.
     */
    static validateJSON(data) {
        if (data['distinctOn']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['distinctOn'])) {
                throw new Error("Expected the field `distinctOn` to be an array in the JSON data but got " + data['distinctOn']);
            }
            // validate the optional field `distinctOn` (array)
            for (const item of data['distinctOn']) {
                PropertyReference.validateJSON(item);
            };
        }
        // validate the optional field `filter`
        if (data['filter']) { // data not null
          Filter.validateJSON(data['filter']);
        }
        if (data['kind']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['kind'])) {
                throw new Error("Expected the field `kind` to be an array in the JSON data but got " + data['kind']);
            }
            // validate the optional field `kind` (array)
            for (const item of data['kind']) {
                KindExpression.validateJSON(item);
            };
        }
        if (data['order']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['order'])) {
                throw new Error("Expected the field `order` to be an array in the JSON data but got " + data['order']);
            }
            // validate the optional field `order` (array)
            for (const item of data['order']) {
                PropertyOrder.validateJSON(item);
            };
        }
        if (data['projection']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['projection'])) {
                throw new Error("Expected the field `projection` to be an array in the JSON data but got " + data['projection']);
            }
            // validate the optional field `projection` (array)
            for (const item of data['projection']) {
                Projection.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The properties to make distinct. The query results will contain the first result for each distinct combination of values for the given properties (if empty, all results are returned). Requires: * If `order` is specified, the set of distinct on properties must appear before the non-distinct on properties in `order`.
 * @member {Array.<module:model/PropertyReference>} distinctOn
 */
Query.prototype['distinctOn'] = undefined;

/**
 * An ending point for the query results. Query cursors are returned in query result batches and [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
 * @member {Blob} endCursor
 */
Query.prototype['endCursor'] = undefined;

/**
 * @member {module:model/Filter} filter
 */
Query.prototype['filter'] = undefined;

/**
 * The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be specified.
 * @member {Array.<module:model/KindExpression>} kind
 */
Query.prototype['kind'] = undefined;

/**
 * The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be >= 0 if specified.
 * @member {Number} limit
 */
Query.prototype['limit'] = undefined;

/**
 * The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be >= 0 if specified.
 * @member {Number} offset
 */
Query.prototype['offset'] = undefined;

/**
 * The order to apply to the query results (if empty, order is unspecified).
 * @member {Array.<module:model/PropertyOrder>} order
 */
Query.prototype['order'] = undefined;

/**
 * The projection to return. Defaults to returning all properties.
 * @member {Array.<module:model/Projection>} projection
 */
Query.prototype['projection'] = undefined;

/**
 * A starting point for the query results. Query cursors are returned in query result batches and [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
 * @member {Blob} startCursor
 */
Query.prototype['startCursor'] = undefined;






export default Query;

