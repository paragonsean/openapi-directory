/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Entity from './Entity';
import Key from './Key';

/**
 * The Mutation model module.
 * @module model/Mutation
 * @version v1beta3
 */
class Mutation {
    /**
     * Constructs a new <code>Mutation</code>.
     * A mutation to apply to an entity.
     * @alias module:model/Mutation
     */
    constructor() { 
        
        Mutation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Mutation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Mutation} obj Optional instance to populate.
     * @return {module:model/Mutation} The populated <code>Mutation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Mutation();

            if (data.hasOwnProperty('baseVersion')) {
                obj['baseVersion'] = ApiClient.convertToType(data['baseVersion'], 'String');
            }
            if (data.hasOwnProperty('delete')) {
                obj['delete'] = Key.constructFromObject(data['delete']);
            }
            if (data.hasOwnProperty('insert')) {
                obj['insert'] = Entity.constructFromObject(data['insert']);
            }
            if (data.hasOwnProperty('update')) {
                obj['update'] = Entity.constructFromObject(data['update']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('upsert')) {
                obj['upsert'] = Entity.constructFromObject(data['upsert']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Mutation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Mutation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseVersion'] && !(typeof data['baseVersion'] === 'string' || data['baseVersion'] instanceof String)) {
            throw new Error("Expected the field `baseVersion` to be a primitive type in the JSON string but got " + data['baseVersion']);
        }
        // validate the optional field `delete`
        if (data['delete']) { // data not null
          Key.validateJSON(data['delete']);
        }
        // validate the optional field `insert`
        if (data['insert']) { // data not null
          Entity.validateJSON(data['insert']);
        }
        // validate the optional field `update`
        if (data['update']) { // data not null
          Entity.validateJSON(data['update']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `upsert`
        if (data['upsert']) { // data not null
          Entity.validateJSON(data['upsert']);
        }

        return true;
    }


}



/**
 * The version of the entity that this mutation is being applied to. If this does not match the current version on the server, the mutation conflicts.
 * @member {String} baseVersion
 */
Mutation.prototype['baseVersion'] = undefined;

/**
 * @member {module:model/Key} delete
 */
Mutation.prototype['delete'] = undefined;

/**
 * @member {module:model/Entity} insert
 */
Mutation.prototype['insert'] = undefined;

/**
 * @member {module:model/Entity} update
 */
Mutation.prototype['update'] = undefined;

/**
 * The update time of the entity that this mutation is being applied to. If this does not match the current update time on the server, the mutation conflicts.
 * @member {String} updateTime
 */
Mutation.prototype['updateTime'] = undefined;

/**
 * @member {module:model/Entity} upsert
 */
Mutation.prototype['upsert'] = undefined;






export default Mutation;

