/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Mutation from './Mutation';

/**
 * The CommitRequest model module.
 * @module model/CommitRequest
 * @version v1beta3
 */
class CommitRequest {
    /**
     * Constructs a new <code>CommitRequest</code>.
     * The request for Datastore.Commit.
     * @alias module:model/CommitRequest
     */
    constructor() { 
        
        CommitRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommitRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommitRequest} obj Optional instance to populate.
     * @return {module:model/CommitRequest} The populated <code>CommitRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommitRequest();

            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('mutations')) {
                obj['mutations'] = ApiClient.convertToType(data['mutations'], [Mutation]);
            }
            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = ApiClient.convertToType(data['transaction'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommitRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommitRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        if (data['mutations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mutations'])) {
                throw new Error("Expected the field `mutations` to be an array in the JSON data but got " + data['mutations']);
            }
            // validate the optional field `mutations` (array)
            for (const item of data['mutations']) {
                Mutation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The type of commit to perform. Defaults to `TRANSACTIONAL`.
 * @member {module:model/CommitRequest.ModeEnum} mode
 */
CommitRequest.prototype['mode'] = undefined;

/**
 * The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity.
 * @member {Array.<module:model/Mutation>} mutations
 */
CommitRequest.prototype['mutations'] = undefined;

/**
 * The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction.
 * @member {Blob} transaction
 */
CommitRequest.prototype['transaction'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
CommitRequest['ModeEnum'] = {

    /**
     * value: "MODE_UNSPECIFIED"
     * @const
     */
    "MODE_UNSPECIFIED": "MODE_UNSPECIFIED",

    /**
     * value: "TRANSACTIONAL"
     * @const
     */
    "TRANSACTIONAL": "TRANSACTIONAL",

    /**
     * value: "NON_TRANSACTIONAL"
     * @const
     */
    "NON_TRANSACTIONAL": "NON_TRANSACTIONAL"
};



export default CommitRequest;

