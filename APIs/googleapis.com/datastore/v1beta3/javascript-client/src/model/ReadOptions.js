/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReadOptions model module.
 * @module model/ReadOptions
 * @version v1beta3
 */
class ReadOptions {
    /**
     * Constructs a new <code>ReadOptions</code>.
     * The options shared by read requests.
     * @alias module:model/ReadOptions
     */
    constructor() { 
        
        ReadOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReadOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReadOptions} obj Optional instance to populate.
     * @return {module:model/ReadOptions} The populated <code>ReadOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReadOptions();

            if (data.hasOwnProperty('readConsistency')) {
                obj['readConsistency'] = ApiClient.convertToType(data['readConsistency'], 'String');
            }
            if (data.hasOwnProperty('readTime')) {
                obj['readTime'] = ApiClient.convertToType(data['readTime'], 'String');
            }
            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = ApiClient.convertToType(data['transaction'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReadOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReadOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['readConsistency'] && !(typeof data['readConsistency'] === 'string' || data['readConsistency'] instanceof String)) {
            throw new Error("Expected the field `readConsistency` to be a primitive type in the JSON string but got " + data['readConsistency']);
        }
        // ensure the json data is a string
        if (data['readTime'] && !(typeof data['readTime'] === 'string' || data['readTime'] instanceof String)) {
            throw new Error("Expected the field `readTime` to be a primitive type in the JSON string but got " + data['readTime']);
        }

        return true;
    }


}



/**
 * The non-transactional read consistency to use.
 * @member {module:model/ReadOptions.ReadConsistencyEnum} readConsistency
 */
ReadOptions.prototype['readConsistency'] = undefined;

/**
 * Reads entities as they were at the given time. This value is only supported for Cloud Firestore in Datastore mode. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.
 * @member {String} readTime
 */
ReadOptions.prototype['readTime'] = undefined;

/**
 * The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction.
 * @member {Blob} transaction
 */
ReadOptions.prototype['transaction'] = undefined;





/**
 * Allowed values for the <code>readConsistency</code> property.
 * @enum {String}
 * @readonly
 */
ReadOptions['ReadConsistencyEnum'] = {

    /**
     * value: "READ_CONSISTENCY_UNSPECIFIED"
     * @const
     */
    "READ_CONSISTENCY_UNSPECIFIED": "READ_CONSISTENCY_UNSPECIFIED",

    /**
     * value: "STRONG"
     * @const
     */
    "STRONG": "STRONG",

    /**
     * value: "EVENTUAL"
     * @const
     */
    "EVENTUAL": "EVENTUAL"
};



export default ReadOptions;

