/**
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PropertyReference from './PropertyReference';

/**
 * The Sum model module.
 * @module model/Sum
 * @version v1beta3
 */
class Sum {
    /**
     * Constructs a new <code>Sum</code>.
     * Sum of the values of the requested property. * Only numeric values will be aggregated. All non-numeric values including &#x60;NULL&#x60; are skipped. * If the aggregated values contain &#x60;NaN&#x60;, returns &#x60;NaN&#x60;. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns 0. * Returns a 64-bit integer if all aggregated numbers are integers and the sum result does not overflow. Otherwise, the result is returned as a double. Note that even if all the aggregated values are integers, the result is returned as a double if it cannot fit within a 64-bit signed integer. When this occurs, the returned value will lose precision. * When underflow occurs, floating-point aggregation is non-deterministic. This means that running the same query repeatedly without any changes to the underlying values could produce slightly different results each time. In those cases, values should be stored as integers over floating-point numbers.
     * @alias module:model/Sum
     */
    constructor() { 
        
        Sum.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Sum</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sum} obj Optional instance to populate.
     * @return {module:model/Sum} The populated <code>Sum</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sum();

            if (data.hasOwnProperty('property')) {
                obj['property'] = PropertyReference.constructFromObject(data['property']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sum</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sum</code>.
     */
    static validateJSON(data) {
        // validate the optional field `property`
        if (data['property']) { // data not null
          PropertyReference.validateJSON(data['property']);
        }

        return true;
    }


}



/**
 * @member {module:model/PropertyReference} property
 */
Sum.prototype['property'] = undefined;






export default Sum;

