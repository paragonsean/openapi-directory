/*
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AggregationQuery;
import org.openapitools.client.model.GqlQuery;
import org.openapitools.client.model.PartitionId;
import org.openapitools.client.model.ReadOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request for Datastore.RunAggregationQuery.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:22.618724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunAggregationQueryRequest {
  public static final String SERIALIZED_NAME_AGGREGATION_QUERY = "aggregationQuery";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_QUERY)
  private AggregationQuery aggregationQuery;

  public static final String SERIALIZED_NAME_GQL_QUERY = "gqlQuery";
  @SerializedName(SERIALIZED_NAME_GQL_QUERY)
  private GqlQuery gqlQuery;

  public static final String SERIALIZED_NAME_PARTITION_ID = "partitionId";
  @SerializedName(SERIALIZED_NAME_PARTITION_ID)
  private PartitionId partitionId;

  public static final String SERIALIZED_NAME_READ_OPTIONS = "readOptions";
  @SerializedName(SERIALIZED_NAME_READ_OPTIONS)
  private ReadOptions readOptions;

  public RunAggregationQueryRequest() {
  }

  public RunAggregationQueryRequest aggregationQuery(AggregationQuery aggregationQuery) {
    this.aggregationQuery = aggregationQuery;
    return this;
  }

  /**
   * Get aggregationQuery
   * @return aggregationQuery
   */
  @javax.annotation.Nullable
  public AggregationQuery getAggregationQuery() {
    return aggregationQuery;
  }

  public void setAggregationQuery(AggregationQuery aggregationQuery) {
    this.aggregationQuery = aggregationQuery;
  }


  public RunAggregationQueryRequest gqlQuery(GqlQuery gqlQuery) {
    this.gqlQuery = gqlQuery;
    return this;
  }

  /**
   * Get gqlQuery
   * @return gqlQuery
   */
  @javax.annotation.Nullable
  public GqlQuery getGqlQuery() {
    return gqlQuery;
  }

  public void setGqlQuery(GqlQuery gqlQuery) {
    this.gqlQuery = gqlQuery;
  }


  public RunAggregationQueryRequest partitionId(PartitionId partitionId) {
    this.partitionId = partitionId;
    return this;
  }

  /**
   * Get partitionId
   * @return partitionId
   */
  @javax.annotation.Nullable
  public PartitionId getPartitionId() {
    return partitionId;
  }

  public void setPartitionId(PartitionId partitionId) {
    this.partitionId = partitionId;
  }


  public RunAggregationQueryRequest readOptions(ReadOptions readOptions) {
    this.readOptions = readOptions;
    return this;
  }

  /**
   * Get readOptions
   * @return readOptions
   */
  @javax.annotation.Nullable
  public ReadOptions getReadOptions() {
    return readOptions;
  }

  public void setReadOptions(ReadOptions readOptions) {
    this.readOptions = readOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunAggregationQueryRequest runAggregationQueryRequest = (RunAggregationQueryRequest) o;
    return Objects.equals(this.aggregationQuery, runAggregationQueryRequest.aggregationQuery) &&
        Objects.equals(this.gqlQuery, runAggregationQueryRequest.gqlQuery) &&
        Objects.equals(this.partitionId, runAggregationQueryRequest.partitionId) &&
        Objects.equals(this.readOptions, runAggregationQueryRequest.readOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationQuery, gqlQuery, partitionId, readOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunAggregationQueryRequest {\n");
    sb.append("    aggregationQuery: ").append(toIndentedString(aggregationQuery)).append("\n");
    sb.append("    gqlQuery: ").append(toIndentedString(gqlQuery)).append("\n");
    sb.append("    partitionId: ").append(toIndentedString(partitionId)).append("\n");
    sb.append("    readOptions: ").append(toIndentedString(readOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregationQuery");
    openapiFields.add("gqlQuery");
    openapiFields.add("partitionId");
    openapiFields.add("readOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunAggregationQueryRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunAggregationQueryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunAggregationQueryRequest is not found in the empty JSON string", RunAggregationQueryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunAggregationQueryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunAggregationQueryRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aggregationQuery`
      if (jsonObj.get("aggregationQuery") != null && !jsonObj.get("aggregationQuery").isJsonNull()) {
        AggregationQuery.validateJsonElement(jsonObj.get("aggregationQuery"));
      }
      // validate the optional field `gqlQuery`
      if (jsonObj.get("gqlQuery") != null && !jsonObj.get("gqlQuery").isJsonNull()) {
        GqlQuery.validateJsonElement(jsonObj.get("gqlQuery"));
      }
      // validate the optional field `partitionId`
      if (jsonObj.get("partitionId") != null && !jsonObj.get("partitionId").isJsonNull()) {
        PartitionId.validateJsonElement(jsonObj.get("partitionId"));
      }
      // validate the optional field `readOptions`
      if (jsonObj.get("readOptions") != null && !jsonObj.get("readOptions").isJsonNull()) {
        ReadOptions.validateJsonElement(jsonObj.get("readOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunAggregationQueryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunAggregationQueryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunAggregationQueryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunAggregationQueryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RunAggregationQueryRequest>() {
           @Override
           public void write(JsonWriter out, RunAggregationQueryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunAggregationQueryRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunAggregationQueryRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunAggregationQueryRequest
   * @throws IOException if the JSON string is invalid with respect to RunAggregationQueryRequest
   */
  public static RunAggregationQueryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunAggregationQueryRequest.class);
  }

  /**
   * Convert an instance of RunAggregationQueryRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

