/*
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.KindExpression;
import org.openapitools.client.model.Projection;
import org.openapitools.client.model.PropertyOrder;
import org.openapitools.client.model.PropertyReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A query for entities.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:22.618724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Query {
  public static final String SERIALIZED_NAME_DISTINCT_ON = "distinctOn";
  @SerializedName(SERIALIZED_NAME_DISTINCT_ON)
  private List<PropertyReference> distinctOn = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_CURSOR = "endCursor";
  @SerializedName(SERIALIZED_NAME_END_CURSOR)
  private byte[] endCursor;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private Filter filter;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private List<KindExpression> kind = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private List<PropertyOrder> order = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECTION = "projection";
  @SerializedName(SERIALIZED_NAME_PROJECTION)
  private List<Projection> projection = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_CURSOR = "startCursor";
  @SerializedName(SERIALIZED_NAME_START_CURSOR)
  private byte[] startCursor;

  public Query() {
  }

  public Query distinctOn(List<PropertyReference> distinctOn) {
    this.distinctOn = distinctOn;
    return this;
  }

  public Query addDistinctOnItem(PropertyReference distinctOnItem) {
    if (this.distinctOn == null) {
      this.distinctOn = new ArrayList<>();
    }
    this.distinctOn.add(distinctOnItem);
    return this;
  }

  /**
   * The properties to make distinct. The query results will contain the first result for each distinct combination of values for the given properties (if empty, all results are returned). Requires: * If &#x60;order&#x60; is specified, the set of distinct on properties must appear before the non-distinct on properties in &#x60;order&#x60;.
   * @return distinctOn
   */
  @javax.annotation.Nullable
  public List<PropertyReference> getDistinctOn() {
    return distinctOn;
  }

  public void setDistinctOn(List<PropertyReference> distinctOn) {
    this.distinctOn = distinctOn;
  }


  public Query endCursor(byte[] endCursor) {
    this.endCursor = endCursor;
    return this;
  }

  /**
   * An ending point for the query results. Query cursors are returned in query result batches and [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   * @return endCursor
   */
  @javax.annotation.Nullable
  public byte[] getEndCursor() {
    return endCursor;
  }

  public void setEndCursor(byte[] endCursor) {
    this.endCursor = endCursor;
  }


  public Query filter(Filter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public Filter getFilter() {
    return filter;
  }

  public void setFilter(Filter filter) {
    this.filter = filter;
  }


  public Query kind(List<KindExpression> kind) {
    this.kind = kind;
    return this;
  }

  public Query addKindItem(KindExpression kindItem) {
    if (this.kind == null) {
      this.kind = new ArrayList<>();
    }
    this.kind.add(kindItem);
    return this;
  }

  /**
   * The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be specified.
   * @return kind
   */
  @javax.annotation.Nullable
  public List<KindExpression> getKind() {
    return kind;
  }

  public void setKind(List<KindExpression> kind) {
    this.kind = kind;
  }


  public Query limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be &gt;&#x3D; 0 if specified.
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public Query offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be &gt;&#x3D; 0 if specified.
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public Query order(List<PropertyOrder> order) {
    this.order = order;
    return this;
  }

  public Query addOrderItem(PropertyOrder orderItem) {
    if (this.order == null) {
      this.order = new ArrayList<>();
    }
    this.order.add(orderItem);
    return this;
  }

  /**
   * The order to apply to the query results (if empty, order is unspecified).
   * @return order
   */
  @javax.annotation.Nullable
  public List<PropertyOrder> getOrder() {
    return order;
  }

  public void setOrder(List<PropertyOrder> order) {
    this.order = order;
  }


  public Query projection(List<Projection> projection) {
    this.projection = projection;
    return this;
  }

  public Query addProjectionItem(Projection projectionItem) {
    if (this.projection == null) {
      this.projection = new ArrayList<>();
    }
    this.projection.add(projectionItem);
    return this;
  }

  /**
   * The projection to return. Defaults to returning all properties.
   * @return projection
   */
  @javax.annotation.Nullable
  public List<Projection> getProjection() {
    return projection;
  }

  public void setProjection(List<Projection> projection) {
    this.projection = projection;
  }


  public Query startCursor(byte[] startCursor) {
    this.startCursor = startCursor;
    return this;
  }

  /**
   * A starting point for the query results. Query cursors are returned in query result batches and [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   * @return startCursor
   */
  @javax.annotation.Nullable
  public byte[] getStartCursor() {
    return startCursor;
  }

  public void setStartCursor(byte[] startCursor) {
    this.startCursor = startCursor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Query query = (Query) o;
    return Objects.equals(this.distinctOn, query.distinctOn) &&
        Arrays.equals(this.endCursor, query.endCursor) &&
        Objects.equals(this.filter, query.filter) &&
        Objects.equals(this.kind, query.kind) &&
        Objects.equals(this.limit, query.limit) &&
        Objects.equals(this.offset, query.offset) &&
        Objects.equals(this.order, query.order) &&
        Objects.equals(this.projection, query.projection) &&
        Arrays.equals(this.startCursor, query.startCursor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distinctOn, Arrays.hashCode(endCursor), filter, kind, limit, offset, order, projection, Arrays.hashCode(startCursor));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Query {\n");
    sb.append("    distinctOn: ").append(toIndentedString(distinctOn)).append("\n");
    sb.append("    endCursor: ").append(toIndentedString(endCursor)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    projection: ").append(toIndentedString(projection)).append("\n");
    sb.append("    startCursor: ").append(toIndentedString(startCursor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distinctOn");
    openapiFields.add("endCursor");
    openapiFields.add("filter");
    openapiFields.add("kind");
    openapiFields.add("limit");
    openapiFields.add("offset");
    openapiFields.add("order");
    openapiFields.add("projection");
    openapiFields.add("startCursor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Query
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Query.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Query is not found in the empty JSON string", Query.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Query.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Query` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("distinctOn") != null && !jsonObj.get("distinctOn").isJsonNull()) {
        JsonArray jsonArraydistinctOn = jsonObj.getAsJsonArray("distinctOn");
        if (jsonArraydistinctOn != null) {
          // ensure the json data is an array
          if (!jsonObj.get("distinctOn").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `distinctOn` to be an array in the JSON string but got `%s`", jsonObj.get("distinctOn").toString()));
          }

          // validate the optional field `distinctOn` (array)
          for (int i = 0; i < jsonArraydistinctOn.size(); i++) {
            PropertyReference.validateJsonElement(jsonArraydistinctOn.get(i));
          };
        }
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        Filter.validateJsonElement(jsonObj.get("filter"));
      }
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        JsonArray jsonArraykind = jsonObj.getAsJsonArray("kind");
        if (jsonArraykind != null) {
          // ensure the json data is an array
          if (!jsonObj.get("kind").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `kind` to be an array in the JSON string but got `%s`", jsonObj.get("kind").toString()));
          }

          // validate the optional field `kind` (array)
          for (int i = 0; i < jsonArraykind.size(); i++) {
            KindExpression.validateJsonElement(jsonArraykind.get(i));
          };
        }
      }
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        JsonArray jsonArrayorder = jsonObj.getAsJsonArray("order");
        if (jsonArrayorder != null) {
          // ensure the json data is an array
          if (!jsonObj.get("order").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `order` to be an array in the JSON string but got `%s`", jsonObj.get("order").toString()));
          }

          // validate the optional field `order` (array)
          for (int i = 0; i < jsonArrayorder.size(); i++) {
            PropertyOrder.validateJsonElement(jsonArrayorder.get(i));
          };
        }
      }
      if (jsonObj.get("projection") != null && !jsonObj.get("projection").isJsonNull()) {
        JsonArray jsonArrayprojection = jsonObj.getAsJsonArray("projection");
        if (jsonArrayprojection != null) {
          // ensure the json data is an array
          if (!jsonObj.get("projection").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `projection` to be an array in the JSON string but got `%s`", jsonObj.get("projection").toString()));
          }

          // validate the optional field `projection` (array)
          for (int i = 0; i < jsonArrayprojection.size(); i++) {
            Projection.validateJsonElement(jsonArrayprojection.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Query.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Query' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Query> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Query.class));

       return (TypeAdapter<T>) new TypeAdapter<Query>() {
           @Override
           public void write(JsonWriter out, Query value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Query read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Query given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Query
   * @throws IOException if the JSON string is invalid with respect to Query
   */
  public static Query fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Query.class);
  }

  /**
   * Convert an instance of Query to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

