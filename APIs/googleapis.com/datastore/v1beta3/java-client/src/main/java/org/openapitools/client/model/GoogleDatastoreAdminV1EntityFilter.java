/*
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds&#x3D;[], namespace_ids&#x3D;[] Kinds Foo and Bar in all namespaces: kinds&#x3D;[&#39;Foo&#39;, &#39;Bar&#39;], namespace_ids&#x3D;[] Kinds Foo and Bar only in the default namespace: kinds&#x3D;[&#39;Foo&#39;, &#39;Bar&#39;], namespace_ids&#x3D;[&#39;&#39;] Kinds Foo and Bar in both the default and Baz namespaces: kinds&#x3D;[&#39;Foo&#39;, &#39;Bar&#39;], namespace_ids&#x3D;[&#39;&#39;, &#39;Baz&#39;] The entire Baz namespace: kinds&#x3D;[], namespace_ids&#x3D;[&#39;Baz&#39;]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:22.618724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDatastoreAdminV1EntityFilter {
  public static final String SERIALIZED_NAME_KINDS = "kinds";
  @SerializedName(SERIALIZED_NAME_KINDS)
  private List<String> kinds = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAMESPACE_IDS = "namespaceIds";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_IDS)
  private List<String> namespaceIds = new ArrayList<>();

  public GoogleDatastoreAdminV1EntityFilter() {
  }

  public GoogleDatastoreAdminV1EntityFilter kinds(List<String> kinds) {
    this.kinds = kinds;
    return this;
  }

  public GoogleDatastoreAdminV1EntityFilter addKindsItem(String kindsItem) {
    if (this.kinds == null) {
      this.kinds = new ArrayList<>();
    }
    this.kinds.add(kindsItem);
    return this;
  }

  /**
   * If empty, then this represents all kinds.
   * @return kinds
   */
  @javax.annotation.Nullable
  public List<String> getKinds() {
    return kinds;
  }

  public void setKinds(List<String> kinds) {
    this.kinds = kinds;
  }


  public GoogleDatastoreAdminV1EntityFilter namespaceIds(List<String> namespaceIds) {
    this.namespaceIds = namespaceIds;
    return this;
  }

  public GoogleDatastoreAdminV1EntityFilter addNamespaceIdsItem(String namespaceIdsItem) {
    if (this.namespaceIds == null) {
      this.namespaceIds = new ArrayList<>();
    }
    this.namespaceIds.add(namespaceIdsItem);
    return this;
  }

  /**
   * An empty list represents all namespaces. This is the preferred usage for projects that don&#39;t use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn&#39;t want to include them. Each namespace in this list must be unique.
   * @return namespaceIds
   */
  @javax.annotation.Nullable
  public List<String> getNamespaceIds() {
    return namespaceIds;
  }

  public void setNamespaceIds(List<String> namespaceIds) {
    this.namespaceIds = namespaceIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDatastoreAdminV1EntityFilter googleDatastoreAdminV1EntityFilter = (GoogleDatastoreAdminV1EntityFilter) o;
    return Objects.equals(this.kinds, googleDatastoreAdminV1EntityFilter.kinds) &&
        Objects.equals(this.namespaceIds, googleDatastoreAdminV1EntityFilter.namespaceIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kinds, namespaceIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDatastoreAdminV1EntityFilter {\n");
    sb.append("    kinds: ").append(toIndentedString(kinds)).append("\n");
    sb.append("    namespaceIds: ").append(toIndentedString(namespaceIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("kinds");
    openapiFields.add("namespaceIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDatastoreAdminV1EntityFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDatastoreAdminV1EntityFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDatastoreAdminV1EntityFilter is not found in the empty JSON string", GoogleDatastoreAdminV1EntityFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDatastoreAdminV1EntityFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDatastoreAdminV1EntityFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("kinds") != null && !jsonObj.get("kinds").isJsonNull() && !jsonObj.get("kinds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `kinds` to be an array in the JSON string but got `%s`", jsonObj.get("kinds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("namespaceIds") != null && !jsonObj.get("namespaceIds").isJsonNull() && !jsonObj.get("namespaceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespaceIds` to be an array in the JSON string but got `%s`", jsonObj.get("namespaceIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDatastoreAdminV1EntityFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDatastoreAdminV1EntityFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDatastoreAdminV1EntityFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDatastoreAdminV1EntityFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDatastoreAdminV1EntityFilter>() {
           @Override
           public void write(JsonWriter out, GoogleDatastoreAdminV1EntityFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDatastoreAdminV1EntityFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDatastoreAdminV1EntityFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDatastoreAdminV1EntityFilter
   * @throws IOException if the JSON string is invalid with respect to GoogleDatastoreAdminV1EntityFilter
   */
  public static GoogleDatastoreAdminV1EntityFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDatastoreAdminV1EntityFilter.class);
  }

  /**
   * Convert an instance of GoogleDatastoreAdminV1EntityFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

