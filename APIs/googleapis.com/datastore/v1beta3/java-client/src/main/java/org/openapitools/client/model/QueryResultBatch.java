/*
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntityResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A batch of results produced by a query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:22.618724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryResultBatch {
  public static final String SERIALIZED_NAME_END_CURSOR = "endCursor";
  @SerializedName(SERIALIZED_NAME_END_CURSOR)
  private byte[] endCursor;

  /**
   * The result type for every entity in &#x60;entity_results&#x60;.
   */
  @JsonAdapter(EntityResultTypeEnum.Adapter.class)
  public enum EntityResultTypeEnum {
    RESULT_TYPE_UNSPECIFIED("RESULT_TYPE_UNSPECIFIED"),
    
    FULL("FULL"),
    
    PROJECTION("PROJECTION"),
    
    KEY_ONLY("KEY_ONLY");

    private String value;

    EntityResultTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityResultTypeEnum fromValue(String value) {
      for (EntityResultTypeEnum b : EntityResultTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityResultTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityResultTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityResultTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityResultTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityResultTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_RESULT_TYPE = "entityResultType";
  @SerializedName(SERIALIZED_NAME_ENTITY_RESULT_TYPE)
  private EntityResultTypeEnum entityResultType;

  public static final String SERIALIZED_NAME_ENTITY_RESULTS = "entityResults";
  @SerializedName(SERIALIZED_NAME_ENTITY_RESULTS)
  private List<EntityResult> entityResults = new ArrayList<>();

  /**
   * The state of the query after the current batch.
   */
  @JsonAdapter(MoreResultsEnum.Adapter.class)
  public enum MoreResultsEnum {
    MORE_RESULTS_TYPE_UNSPECIFIED("MORE_RESULTS_TYPE_UNSPECIFIED"),
    
    NOT_FINISHED("NOT_FINISHED"),
    
    MORE_RESULTS_AFTER_LIMIT("MORE_RESULTS_AFTER_LIMIT"),
    
    MORE_RESULTS_AFTER_CURSOR("MORE_RESULTS_AFTER_CURSOR"),
    
    NO_MORE_RESULTS("NO_MORE_RESULTS");

    private String value;

    MoreResultsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MoreResultsEnum fromValue(String value) {
      for (MoreResultsEnum b : MoreResultsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MoreResultsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MoreResultsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MoreResultsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MoreResultsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MoreResultsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MORE_RESULTS = "moreResults";
  @SerializedName(SERIALIZED_NAME_MORE_RESULTS)
  private MoreResultsEnum moreResults;

  public static final String SERIALIZED_NAME_READ_TIME = "readTime";
  @SerializedName(SERIALIZED_NAME_READ_TIME)
  private String readTime;

  public static final String SERIALIZED_NAME_SKIPPED_CURSOR = "skippedCursor";
  @SerializedName(SERIALIZED_NAME_SKIPPED_CURSOR)
  private byte[] skippedCursor;

  public static final String SERIALIZED_NAME_SKIPPED_RESULTS = "skippedResults";
  @SerializedName(SERIALIZED_NAME_SKIPPED_RESULTS)
  private Integer skippedResults;

  public static final String SERIALIZED_NAME_SNAPSHOT_VERSION = "snapshotVersion";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_VERSION)
  private String snapshotVersion;

  public QueryResultBatch() {
  }

  public QueryResultBatch endCursor(byte[] endCursor) {
    this.endCursor = endCursor;
    return this;
  }

  /**
   * A cursor that points to the position after the last result in the batch.
   * @return endCursor
   */
  @javax.annotation.Nullable
  public byte[] getEndCursor() {
    return endCursor;
  }

  public void setEndCursor(byte[] endCursor) {
    this.endCursor = endCursor;
  }


  public QueryResultBatch entityResultType(EntityResultTypeEnum entityResultType) {
    this.entityResultType = entityResultType;
    return this;
  }

  /**
   * The result type for every entity in &#x60;entity_results&#x60;.
   * @return entityResultType
   */
  @javax.annotation.Nullable
  public EntityResultTypeEnum getEntityResultType() {
    return entityResultType;
  }

  public void setEntityResultType(EntityResultTypeEnum entityResultType) {
    this.entityResultType = entityResultType;
  }


  public QueryResultBatch entityResults(List<EntityResult> entityResults) {
    this.entityResults = entityResults;
    return this;
  }

  public QueryResultBatch addEntityResultsItem(EntityResult entityResultsItem) {
    if (this.entityResults == null) {
      this.entityResults = new ArrayList<>();
    }
    this.entityResults.add(entityResultsItem);
    return this;
  }

  /**
   * The results for this batch.
   * @return entityResults
   */
  @javax.annotation.Nullable
  public List<EntityResult> getEntityResults() {
    return entityResults;
  }

  public void setEntityResults(List<EntityResult> entityResults) {
    this.entityResults = entityResults;
  }


  public QueryResultBatch moreResults(MoreResultsEnum moreResults) {
    this.moreResults = moreResults;
    return this;
  }

  /**
   * The state of the query after the current batch.
   * @return moreResults
   */
  @javax.annotation.Nullable
  public MoreResultsEnum getMoreResults() {
    return moreResults;
  }

  public void setMoreResults(MoreResultsEnum moreResults) {
    this.moreResults = moreResults;
  }


  public QueryResultBatch readTime(String readTime) {
    this.readTime = readTime;
    return this;
  }

  /**
   * Read timestamp this batch was returned from. This applies to the range of results from the query&#39;s &#x60;start_cursor&#x60; (or the beginning of the query if no cursor was given) to this batch&#39;s &#x60;end_cursor&#x60; (not the query&#39;s &#x60;end_cursor&#x60;). In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch&#39;s read timestamp is valid for all preceding batches. This value will not be set for eventually consistent queries in Cloud Datastore.
   * @return readTime
   */
  @javax.annotation.Nullable
  public String getReadTime() {
    return readTime;
  }

  public void setReadTime(String readTime) {
    this.readTime = readTime;
  }


  public QueryResultBatch skippedCursor(byte[] skippedCursor) {
    this.skippedCursor = skippedCursor;
    return this;
  }

  /**
   * A cursor that points to the position after the last skipped result. Will be set when &#x60;skipped_results&#x60; !&#x3D; 0.
   * @return skippedCursor
   */
  @javax.annotation.Nullable
  public byte[] getSkippedCursor() {
    return skippedCursor;
  }

  public void setSkippedCursor(byte[] skippedCursor) {
    this.skippedCursor = skippedCursor;
  }


  public QueryResultBatch skippedResults(Integer skippedResults) {
    this.skippedResults = skippedResults;
    return this;
  }

  /**
   * The number of results skipped, typically because of an offset.
   * @return skippedResults
   */
  @javax.annotation.Nullable
  public Integer getSkippedResults() {
    return skippedResults;
  }

  public void setSkippedResults(Integer skippedResults) {
    this.skippedResults = skippedResults;
  }


  public QueryResultBatch snapshotVersion(String snapshotVersion) {
    this.snapshotVersion = snapshotVersion;
    return this;
  }

  /**
   * The version number of the snapshot this batch was returned from. This applies to the range of results from the query&#39;s &#x60;start_cursor&#x60; (or the beginning of the query if no cursor was given) to this batch&#39;s &#x60;end_cursor&#x60; (not the query&#39;s &#x60;end_cursor&#x60;). In a single transaction, subsequent query result batches for the same query can have a greater snapshot version number. Each batch&#39;s snapshot version is valid for all preceding batches. The value will be zero for eventually consistent queries.
   * @return snapshotVersion
   */
  @javax.annotation.Nullable
  public String getSnapshotVersion() {
    return snapshotVersion;
  }

  public void setSnapshotVersion(String snapshotVersion) {
    this.snapshotVersion = snapshotVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryResultBatch queryResultBatch = (QueryResultBatch) o;
    return Arrays.equals(this.endCursor, queryResultBatch.endCursor) &&
        Objects.equals(this.entityResultType, queryResultBatch.entityResultType) &&
        Objects.equals(this.entityResults, queryResultBatch.entityResults) &&
        Objects.equals(this.moreResults, queryResultBatch.moreResults) &&
        Objects.equals(this.readTime, queryResultBatch.readTime) &&
        Arrays.equals(this.skippedCursor, queryResultBatch.skippedCursor) &&
        Objects.equals(this.skippedResults, queryResultBatch.skippedResults) &&
        Objects.equals(this.snapshotVersion, queryResultBatch.snapshotVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(endCursor), entityResultType, entityResults, moreResults, readTime, Arrays.hashCode(skippedCursor), skippedResults, snapshotVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryResultBatch {\n");
    sb.append("    endCursor: ").append(toIndentedString(endCursor)).append("\n");
    sb.append("    entityResultType: ").append(toIndentedString(entityResultType)).append("\n");
    sb.append("    entityResults: ").append(toIndentedString(entityResults)).append("\n");
    sb.append("    moreResults: ").append(toIndentedString(moreResults)).append("\n");
    sb.append("    readTime: ").append(toIndentedString(readTime)).append("\n");
    sb.append("    skippedCursor: ").append(toIndentedString(skippedCursor)).append("\n");
    sb.append("    skippedResults: ").append(toIndentedString(skippedResults)).append("\n");
    sb.append("    snapshotVersion: ").append(toIndentedString(snapshotVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endCursor");
    openapiFields.add("entityResultType");
    openapiFields.add("entityResults");
    openapiFields.add("moreResults");
    openapiFields.add("readTime");
    openapiFields.add("skippedCursor");
    openapiFields.add("skippedResults");
    openapiFields.add("snapshotVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryResultBatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryResultBatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryResultBatch is not found in the empty JSON string", QueryResultBatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryResultBatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryResultBatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("entityResultType") != null && !jsonObj.get("entityResultType").isJsonNull()) && !jsonObj.get("entityResultType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityResultType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityResultType").toString()));
      }
      // validate the optional field `entityResultType`
      if (jsonObj.get("entityResultType") != null && !jsonObj.get("entityResultType").isJsonNull()) {
        EntityResultTypeEnum.validateJsonElement(jsonObj.get("entityResultType"));
      }
      if (jsonObj.get("entityResults") != null && !jsonObj.get("entityResults").isJsonNull()) {
        JsonArray jsonArrayentityResults = jsonObj.getAsJsonArray("entityResults");
        if (jsonArrayentityResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entityResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entityResults` to be an array in the JSON string but got `%s`", jsonObj.get("entityResults").toString()));
          }

          // validate the optional field `entityResults` (array)
          for (int i = 0; i < jsonArrayentityResults.size(); i++) {
            EntityResult.validateJsonElement(jsonArrayentityResults.get(i));
          };
        }
      }
      if ((jsonObj.get("moreResults") != null && !jsonObj.get("moreResults").isJsonNull()) && !jsonObj.get("moreResults").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moreResults` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moreResults").toString()));
      }
      // validate the optional field `moreResults`
      if (jsonObj.get("moreResults") != null && !jsonObj.get("moreResults").isJsonNull()) {
        MoreResultsEnum.validateJsonElement(jsonObj.get("moreResults"));
      }
      if ((jsonObj.get("readTime") != null && !jsonObj.get("readTime").isJsonNull()) && !jsonObj.get("readTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readTime").toString()));
      }
      if ((jsonObj.get("snapshotVersion") != null && !jsonObj.get("snapshotVersion").isJsonNull()) && !jsonObj.get("snapshotVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshotVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snapshotVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryResultBatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryResultBatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryResultBatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryResultBatch.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryResultBatch>() {
           @Override
           public void write(JsonWriter out, QueryResultBatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryResultBatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryResultBatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryResultBatch
   * @throws IOException if the JSON string is invalid with respect to QueryResultBatch
   */
  public static QueryResultBatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryResultBatch.class);
  }

  /**
   * Convert an instance of QueryResultBatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

