/*
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ArrayValue;
import org.openapitools.client.model.Entity;
import org.openapitools.client.model.Key;
import org.openapitools.client.model.LatLng;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A message that can hold any of the supported value types and associated metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:22.618724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Value {
  public static final String SERIALIZED_NAME_ARRAY_VALUE = "arrayValue";
  @SerializedName(SERIALIZED_NAME_ARRAY_VALUE)
  private ArrayValue arrayValue;

  public static final String SERIALIZED_NAME_BLOB_VALUE = "blobValue";
  @SerializedName(SERIALIZED_NAME_BLOB_VALUE)
  private byte[] blobValue;

  public static final String SERIALIZED_NAME_BOOLEAN_VALUE = "booleanValue";
  @SerializedName(SERIALIZED_NAME_BOOLEAN_VALUE)
  private Boolean booleanValue;

  public static final String SERIALIZED_NAME_DOUBLE_VALUE = "doubleValue";
  @SerializedName(SERIALIZED_NAME_DOUBLE_VALUE)
  private Double doubleValue;

  public static final String SERIALIZED_NAME_ENTITY_VALUE = "entityValue";
  @SerializedName(SERIALIZED_NAME_ENTITY_VALUE)
  private Entity entityValue;

  public static final String SERIALIZED_NAME_EXCLUDE_FROM_INDEXES = "excludeFromIndexes";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_FROM_INDEXES)
  private Boolean excludeFromIndexes;

  public static final String SERIALIZED_NAME_GEO_POINT_VALUE = "geoPointValue";
  @SerializedName(SERIALIZED_NAME_GEO_POINT_VALUE)
  private LatLng geoPointValue;

  public static final String SERIALIZED_NAME_INTEGER_VALUE = "integerValue";
  @SerializedName(SERIALIZED_NAME_INTEGER_VALUE)
  private String integerValue;

  public static final String SERIALIZED_NAME_KEY_VALUE = "keyValue";
  @SerializedName(SERIALIZED_NAME_KEY_VALUE)
  private Key keyValue;

  public static final String SERIALIZED_NAME_MEANING = "meaning";
  @SerializedName(SERIALIZED_NAME_MEANING)
  private Integer meaning;

  /**
   * A null value.
   */
  @JsonAdapter(NullValueEnum.Adapter.class)
  public enum NullValueEnum {
    NULL_VALUE("NULL_VALUE");

    private String value;

    NullValueEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NullValueEnum fromValue(String value) {
      for (NullValueEnum b : NullValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NullValueEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NullValueEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NullValueEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NullValueEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NullValueEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NULL_VALUE = "nullValue";
  @SerializedName(SERIALIZED_NAME_NULL_VALUE)
  private NullValueEnum nullValue;

  public static final String SERIALIZED_NAME_STRING_VALUE = "stringValue";
  @SerializedName(SERIALIZED_NAME_STRING_VALUE)
  private String stringValue;

  public static final String SERIALIZED_NAME_TIMESTAMP_VALUE = "timestampValue";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_VALUE)
  private String timestampValue;

  public Value() {
  }

  public Value arrayValue(ArrayValue arrayValue) {
    this.arrayValue = arrayValue;
    return this;
  }

  /**
   * Get arrayValue
   * @return arrayValue
   */
  @javax.annotation.Nullable
  public ArrayValue getArrayValue() {
    return arrayValue;
  }

  public void setArrayValue(ArrayValue arrayValue) {
    this.arrayValue = arrayValue;
  }


  public Value blobValue(byte[] blobValue) {
    this.blobValue = blobValue;
    return this;
  }

  /**
   * A blob value. May have at most 1,000,000 bytes. When &#x60;exclude_from_indexes&#x60; is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded.
   * @return blobValue
   */
  @javax.annotation.Nullable
  public byte[] getBlobValue() {
    return blobValue;
  }

  public void setBlobValue(byte[] blobValue) {
    this.blobValue = blobValue;
  }


  public Value booleanValue(Boolean booleanValue) {
    this.booleanValue = booleanValue;
    return this;
  }

  /**
   * A boolean value.
   * @return booleanValue
   */
  @javax.annotation.Nullable
  public Boolean getBooleanValue() {
    return booleanValue;
  }

  public void setBooleanValue(Boolean booleanValue) {
    this.booleanValue = booleanValue;
  }


  public Value doubleValue(Double doubleValue) {
    this.doubleValue = doubleValue;
    return this;
  }

  /**
   * A double value.
   * @return doubleValue
   */
  @javax.annotation.Nullable
  public Double getDoubleValue() {
    return doubleValue;
  }

  public void setDoubleValue(Double doubleValue) {
    this.doubleValue = doubleValue;
  }


  public Value entityValue(Entity entityValue) {
    this.entityValue = entityValue;
    return this;
  }

  /**
   * Get entityValue
   * @return entityValue
   */
  @javax.annotation.Nullable
  public Entity getEntityValue() {
    return entityValue;
  }

  public void setEntityValue(Entity entityValue) {
    this.entityValue = entityValue;
  }


  public Value excludeFromIndexes(Boolean excludeFromIndexes) {
    this.excludeFromIndexes = excludeFromIndexes;
    return this;
  }

  /**
   * If the value should be excluded from all indexes including those defined explicitly.
   * @return excludeFromIndexes
   */
  @javax.annotation.Nullable
  public Boolean getExcludeFromIndexes() {
    return excludeFromIndexes;
  }

  public void setExcludeFromIndexes(Boolean excludeFromIndexes) {
    this.excludeFromIndexes = excludeFromIndexes;
  }


  public Value geoPointValue(LatLng geoPointValue) {
    this.geoPointValue = geoPointValue;
    return this;
  }

  /**
   * Get geoPointValue
   * @return geoPointValue
   */
  @javax.annotation.Nullable
  public LatLng getGeoPointValue() {
    return geoPointValue;
  }

  public void setGeoPointValue(LatLng geoPointValue) {
    this.geoPointValue = geoPointValue;
  }


  public Value integerValue(String integerValue) {
    this.integerValue = integerValue;
    return this;
  }

  /**
   * An integer value.
   * @return integerValue
   */
  @javax.annotation.Nullable
  public String getIntegerValue() {
    return integerValue;
  }

  public void setIntegerValue(String integerValue) {
    this.integerValue = integerValue;
  }


  public Value keyValue(Key keyValue) {
    this.keyValue = keyValue;
    return this;
  }

  /**
   * Get keyValue
   * @return keyValue
   */
  @javax.annotation.Nullable
  public Key getKeyValue() {
    return keyValue;
  }

  public void setKeyValue(Key keyValue) {
    this.keyValue = keyValue;
  }


  public Value meaning(Integer meaning) {
    this.meaning = meaning;
    return this;
  }

  /**
   * The &#x60;meaning&#x60; field should only be populated for backwards compatibility.
   * @return meaning
   */
  @javax.annotation.Nullable
  public Integer getMeaning() {
    return meaning;
  }

  public void setMeaning(Integer meaning) {
    this.meaning = meaning;
  }


  public Value nullValue(NullValueEnum nullValue) {
    this.nullValue = nullValue;
    return this;
  }

  /**
   * A null value.
   * @return nullValue
   */
  @javax.annotation.Nullable
  public NullValueEnum getNullValue() {
    return nullValue;
  }

  public void setNullValue(NullValueEnum nullValue) {
    this.nullValue = nullValue;
  }


  public Value stringValue(String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  /**
   * A UTF-8 encoded string value. When &#x60;exclude_from_indexes&#x60; is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes.
   * @return stringValue
   */
  @javax.annotation.Nullable
  public String getStringValue() {
    return stringValue;
  }

  public void setStringValue(String stringValue) {
    this.stringValue = stringValue;
  }


  public Value timestampValue(String timestampValue) {
    this.timestampValue = timestampValue;
    return this;
  }

  /**
   * A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down.
   * @return timestampValue
   */
  @javax.annotation.Nullable
  public String getTimestampValue() {
    return timestampValue;
  }

  public void setTimestampValue(String timestampValue) {
    this.timestampValue = timestampValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Value value = (Value) o;
    return Objects.equals(this.arrayValue, value.arrayValue) &&
        Arrays.equals(this.blobValue, value.blobValue) &&
        Objects.equals(this.booleanValue, value.booleanValue) &&
        Objects.equals(this.doubleValue, value.doubleValue) &&
        Objects.equals(this.entityValue, value.entityValue) &&
        Objects.equals(this.excludeFromIndexes, value.excludeFromIndexes) &&
        Objects.equals(this.geoPointValue, value.geoPointValue) &&
        Objects.equals(this.integerValue, value.integerValue) &&
        Objects.equals(this.keyValue, value.keyValue) &&
        Objects.equals(this.meaning, value.meaning) &&
        Objects.equals(this.nullValue, value.nullValue) &&
        Objects.equals(this.stringValue, value.stringValue) &&
        Objects.equals(this.timestampValue, value.timestampValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrayValue, Arrays.hashCode(blobValue), booleanValue, doubleValue, entityValue, excludeFromIndexes, geoPointValue, integerValue, keyValue, meaning, nullValue, stringValue, timestampValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Value {\n");
    sb.append("    arrayValue: ").append(toIndentedString(arrayValue)).append("\n");
    sb.append("    blobValue: ").append(toIndentedString(blobValue)).append("\n");
    sb.append("    booleanValue: ").append(toIndentedString(booleanValue)).append("\n");
    sb.append("    doubleValue: ").append(toIndentedString(doubleValue)).append("\n");
    sb.append("    entityValue: ").append(toIndentedString(entityValue)).append("\n");
    sb.append("    excludeFromIndexes: ").append(toIndentedString(excludeFromIndexes)).append("\n");
    sb.append("    geoPointValue: ").append(toIndentedString(geoPointValue)).append("\n");
    sb.append("    integerValue: ").append(toIndentedString(integerValue)).append("\n");
    sb.append("    keyValue: ").append(toIndentedString(keyValue)).append("\n");
    sb.append("    meaning: ").append(toIndentedString(meaning)).append("\n");
    sb.append("    nullValue: ").append(toIndentedString(nullValue)).append("\n");
    sb.append("    stringValue: ").append(toIndentedString(stringValue)).append("\n");
    sb.append("    timestampValue: ").append(toIndentedString(timestampValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arrayValue");
    openapiFields.add("blobValue");
    openapiFields.add("booleanValue");
    openapiFields.add("doubleValue");
    openapiFields.add("entityValue");
    openapiFields.add("excludeFromIndexes");
    openapiFields.add("geoPointValue");
    openapiFields.add("integerValue");
    openapiFields.add("keyValue");
    openapiFields.add("meaning");
    openapiFields.add("nullValue");
    openapiFields.add("stringValue");
    openapiFields.add("timestampValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Value
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Value.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Value is not found in the empty JSON string", Value.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Value.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Value` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arrayValue`
      if (jsonObj.get("arrayValue") != null && !jsonObj.get("arrayValue").isJsonNull()) {
        ArrayValue.validateJsonElement(jsonObj.get("arrayValue"));
      }
      // validate the optional field `entityValue`
      if (jsonObj.get("entityValue") != null && !jsonObj.get("entityValue").isJsonNull()) {
        Entity.validateJsonElement(jsonObj.get("entityValue"));
      }
      // validate the optional field `geoPointValue`
      if (jsonObj.get("geoPointValue") != null && !jsonObj.get("geoPointValue").isJsonNull()) {
        LatLng.validateJsonElement(jsonObj.get("geoPointValue"));
      }
      if ((jsonObj.get("integerValue") != null && !jsonObj.get("integerValue").isJsonNull()) && !jsonObj.get("integerValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integerValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integerValue").toString()));
      }
      // validate the optional field `keyValue`
      if (jsonObj.get("keyValue") != null && !jsonObj.get("keyValue").isJsonNull()) {
        Key.validateJsonElement(jsonObj.get("keyValue"));
      }
      if ((jsonObj.get("nullValue") != null && !jsonObj.get("nullValue").isJsonNull()) && !jsonObj.get("nullValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nullValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nullValue").toString()));
      }
      // validate the optional field `nullValue`
      if (jsonObj.get("nullValue") != null && !jsonObj.get("nullValue").isJsonNull()) {
        NullValueEnum.validateJsonElement(jsonObj.get("nullValue"));
      }
      if ((jsonObj.get("stringValue") != null && !jsonObj.get("stringValue").isJsonNull()) && !jsonObj.get("stringValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stringValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stringValue").toString()));
      }
      if ((jsonObj.get("timestampValue") != null && !jsonObj.get("timestampValue").isJsonNull()) && !jsonObj.get("timestampValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestampValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestampValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Value.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Value' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Value> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Value.class));

       return (TypeAdapter<T>) new TypeAdapter<Value>() {
           @Override
           public void write(JsonWriter out, Value value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Value read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Value given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Value
   * @throws IOException if the JSON string is invalid with respect to Value
   */
  public static Value fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Value.class);
  }

  /**
   * Convert an instance of Value to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

