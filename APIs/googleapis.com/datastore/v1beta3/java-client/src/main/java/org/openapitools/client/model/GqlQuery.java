/*
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GqlQueryParameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:22.618724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GqlQuery {
  public static final String SERIALIZED_NAME_ALLOW_LITERALS = "allowLiterals";
  @SerializedName(SERIALIZED_NAME_ALLOW_LITERALS)
  private Boolean allowLiterals;

  public static final String SERIALIZED_NAME_NAMED_BINDINGS = "namedBindings";
  @SerializedName(SERIALIZED_NAME_NAMED_BINDINGS)
  private Map<String, GqlQueryParameter> namedBindings = new HashMap<>();

  public static final String SERIALIZED_NAME_POSITIONAL_BINDINGS = "positionalBindings";
  @SerializedName(SERIALIZED_NAME_POSITIONAL_BINDINGS)
  private List<GqlQueryParameter> positionalBindings = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY_STRING = "queryString";
  @SerializedName(SERIALIZED_NAME_QUERY_STRING)
  private String queryString;

  public GqlQuery() {
  }

  public GqlQuery allowLiterals(Boolean allowLiterals) {
    this.allowLiterals = allowLiterals;
    return this;
  }

  /**
   * When false, the query string must not contain any literals and instead must bind all values. For example, &#x60;SELECT * FROM Kind WHERE a &#x3D; &#39;string literal&#39;&#x60; is not allowed, while &#x60;SELECT * FROM Kind WHERE a &#x3D; @value&#x60; is.
   * @return allowLiterals
   */
  @javax.annotation.Nullable
  public Boolean getAllowLiterals() {
    return allowLiterals;
  }

  public void setAllowLiterals(Boolean allowLiterals) {
    this.allowLiterals = allowLiterals;
  }


  public GqlQuery namedBindings(Map<String, GqlQueryParameter> namedBindings) {
    this.namedBindings = namedBindings;
    return this;
  }

  public GqlQuery putNamedBindingsItem(String key, GqlQueryParameter namedBindingsItem) {
    if (this.namedBindings == null) {
      this.namedBindings = new HashMap<>();
    }
    this.namedBindings.put(key, namedBindingsItem);
    return this;
  }

  /**
   * For each non-reserved named binding site in the query string, there must be a named parameter with that name, but not necessarily the inverse. Key must match regex &#x60;A-Za-z_$*&#x60;, must not match regex &#x60;__.*__&#x60;, and must not be &#x60;\&quot;\&quot;&#x60;.
   * @return namedBindings
   */
  @javax.annotation.Nullable
  public Map<String, GqlQueryParameter> getNamedBindings() {
    return namedBindings;
  }

  public void setNamedBindings(Map<String, GqlQueryParameter> namedBindings) {
    this.namedBindings = namedBindings;
  }


  public GqlQuery positionalBindings(List<GqlQueryParameter> positionalBindings) {
    this.positionalBindings = positionalBindings;
    return this;
  }

  public GqlQuery addPositionalBindingsItem(GqlQueryParameter positionalBindingsItem) {
    if (this.positionalBindings == null) {
      this.positionalBindings = new ArrayList<>();
    }
    this.positionalBindings.add(positionalBindingsItem);
    return this;
  }

  /**
   * Numbered binding site @1 references the first numbered parameter, effectively using 1-based indexing, rather than the usual 0. For each binding site numbered i in &#x60;query_string&#x60;, there must be an i-th numbered parameter. The inverse must also be true.
   * @return positionalBindings
   */
  @javax.annotation.Nullable
  public List<GqlQueryParameter> getPositionalBindings() {
    return positionalBindings;
  }

  public void setPositionalBindings(List<GqlQueryParameter> positionalBindings) {
    this.positionalBindings = positionalBindings;
  }


  public GqlQuery queryString(String queryString) {
    this.queryString = queryString;
    return this;
  }

  /**
   * A string of the format described [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
   * @return queryString
   */
  @javax.annotation.Nullable
  public String getQueryString() {
    return queryString;
  }

  public void setQueryString(String queryString) {
    this.queryString = queryString;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GqlQuery gqlQuery = (GqlQuery) o;
    return Objects.equals(this.allowLiterals, gqlQuery.allowLiterals) &&
        Objects.equals(this.namedBindings, gqlQuery.namedBindings) &&
        Objects.equals(this.positionalBindings, gqlQuery.positionalBindings) &&
        Objects.equals(this.queryString, gqlQuery.queryString);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowLiterals, namedBindings, positionalBindings, queryString);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GqlQuery {\n");
    sb.append("    allowLiterals: ").append(toIndentedString(allowLiterals)).append("\n");
    sb.append("    namedBindings: ").append(toIndentedString(namedBindings)).append("\n");
    sb.append("    positionalBindings: ").append(toIndentedString(positionalBindings)).append("\n");
    sb.append("    queryString: ").append(toIndentedString(queryString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowLiterals");
    openapiFields.add("namedBindings");
    openapiFields.add("positionalBindings");
    openapiFields.add("queryString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GqlQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GqlQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GqlQuery is not found in the empty JSON string", GqlQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GqlQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GqlQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("positionalBindings") != null && !jsonObj.get("positionalBindings").isJsonNull()) {
        JsonArray jsonArraypositionalBindings = jsonObj.getAsJsonArray("positionalBindings");
        if (jsonArraypositionalBindings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("positionalBindings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `positionalBindings` to be an array in the JSON string but got `%s`", jsonObj.get("positionalBindings").toString()));
          }

          // validate the optional field `positionalBindings` (array)
          for (int i = 0; i < jsonArraypositionalBindings.size(); i++) {
            GqlQueryParameter.validateJsonElement(jsonArraypositionalBindings.get(i));
          };
        }
      }
      if ((jsonObj.get("queryString") != null && !jsonObj.get("queryString").isJsonNull()) && !jsonObj.get("queryString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GqlQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GqlQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GqlQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GqlQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<GqlQuery>() {
           @Override
           public void write(JsonWriter out, GqlQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GqlQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GqlQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GqlQuery
   * @throws IOException if the JSON string is invalid with respect to GqlQuery
   */
  public static GqlQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GqlQuery.class);
  }

  /**
   * Convert an instance of GqlQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

