/*
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Entity;
import org.openapitools.client.model.Key;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A mutation to apply to an entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:22.618724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Mutation {
  public static final String SERIALIZED_NAME_BASE_VERSION = "baseVersion";
  @SerializedName(SERIALIZED_NAME_BASE_VERSION)
  private String baseVersion;

  public static final String SERIALIZED_NAME_DELETE = "delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  private Key delete;

  public static final String SERIALIZED_NAME_INSERT = "insert";
  @SerializedName(SERIALIZED_NAME_INSERT)
  private Entity insert;

  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private Entity update;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_UPSERT = "upsert";
  @SerializedName(SERIALIZED_NAME_UPSERT)
  private Entity upsert;

  public Mutation() {
  }

  public Mutation baseVersion(String baseVersion) {
    this.baseVersion = baseVersion;
    return this;
  }

  /**
   * The version of the entity that this mutation is being applied to. If this does not match the current version on the server, the mutation conflicts.
   * @return baseVersion
   */
  @javax.annotation.Nullable
  public String getBaseVersion() {
    return baseVersion;
  }

  public void setBaseVersion(String baseVersion) {
    this.baseVersion = baseVersion;
  }


  public Mutation delete(Key delete) {
    this.delete = delete;
    return this;
  }

  /**
   * Get delete
   * @return delete
   */
  @javax.annotation.Nullable
  public Key getDelete() {
    return delete;
  }

  public void setDelete(Key delete) {
    this.delete = delete;
  }


  public Mutation insert(Entity insert) {
    this.insert = insert;
    return this;
  }

  /**
   * Get insert
   * @return insert
   */
  @javax.annotation.Nullable
  public Entity getInsert() {
    return insert;
  }

  public void setInsert(Entity insert) {
    this.insert = insert;
  }


  public Mutation update(Entity update) {
    this.update = update;
    return this;
  }

  /**
   * Get update
   * @return update
   */
  @javax.annotation.Nullable
  public Entity getUpdate() {
    return update;
  }

  public void setUpdate(Entity update) {
    this.update = update;
  }


  public Mutation updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * The update time of the entity that this mutation is being applied to. If this does not match the current update time on the server, the mutation conflicts.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  public Mutation upsert(Entity upsert) {
    this.upsert = upsert;
    return this;
  }

  /**
   * Get upsert
   * @return upsert
   */
  @javax.annotation.Nullable
  public Entity getUpsert() {
    return upsert;
  }

  public void setUpsert(Entity upsert) {
    this.upsert = upsert;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Mutation mutation = (Mutation) o;
    return Objects.equals(this.baseVersion, mutation.baseVersion) &&
        Objects.equals(this.delete, mutation.delete) &&
        Objects.equals(this.insert, mutation.insert) &&
        Objects.equals(this.update, mutation.update) &&
        Objects.equals(this.updateTime, mutation.updateTime) &&
        Objects.equals(this.upsert, mutation.upsert);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseVersion, delete, insert, update, updateTime, upsert);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Mutation {\n");
    sb.append("    baseVersion: ").append(toIndentedString(baseVersion)).append("\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    insert: ").append(toIndentedString(insert)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    upsert: ").append(toIndentedString(upsert)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseVersion");
    openapiFields.add("delete");
    openapiFields.add("insert");
    openapiFields.add("update");
    openapiFields.add("updateTime");
    openapiFields.add("upsert");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Mutation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Mutation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Mutation is not found in the empty JSON string", Mutation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Mutation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Mutation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baseVersion") != null && !jsonObj.get("baseVersion").isJsonNull()) && !jsonObj.get("baseVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseVersion").toString()));
      }
      // validate the optional field `delete`
      if (jsonObj.get("delete") != null && !jsonObj.get("delete").isJsonNull()) {
        Key.validateJsonElement(jsonObj.get("delete"));
      }
      // validate the optional field `insert`
      if (jsonObj.get("insert") != null && !jsonObj.get("insert").isJsonNull()) {
        Entity.validateJsonElement(jsonObj.get("insert"));
      }
      // validate the optional field `update`
      if (jsonObj.get("update") != null && !jsonObj.get("update").isJsonNull()) {
        Entity.validateJsonElement(jsonObj.get("update"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `upsert`
      if (jsonObj.get("upsert") != null && !jsonObj.get("upsert").isJsonNull()) {
        Entity.validateJsonElement(jsonObj.get("upsert"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Mutation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Mutation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Mutation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Mutation.class));

       return (TypeAdapter<T>) new TypeAdapter<Mutation>() {
           @Override
           public void write(JsonWriter out, Mutation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Mutation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Mutation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Mutation
   * @throws IOException if the JSON string is invalid with respect to Mutation
   */
  public static Mutation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Mutation.class);
  }

  /**
   * Convert an instance of Mutation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

