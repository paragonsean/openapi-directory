/*
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata for Datastore to Firestore migration operations. The DatastoreFirestoreMigration operation is not started by the end-user via an explicit \&quot;creation\&quot; method. This is an intentional deviation from the LRO design pattern. This singleton resource can be accessed at: \&quot;projects/{project_id}/operations/datastore-firestore-migration\&quot;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:22.618724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata {
  /**
   * The current state of migration from Cloud Datastore to Cloud Firestore in Datastore mode.
   */
  @JsonAdapter(MigrationStateEnum.Adapter.class)
  public enum MigrationStateEnum {
    MIGRATION_STATE_UNSPECIFIED("MIGRATION_STATE_UNSPECIFIED"),
    
    RUNNING("RUNNING"),
    
    PAUSED("PAUSED"),
    
    COMPLETE("COMPLETE");

    private String value;

    MigrationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MigrationStateEnum fromValue(String value) {
      for (MigrationStateEnum b : MigrationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MigrationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MigrationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MigrationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MigrationStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MigrationStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIGRATION_STATE = "migrationState";
  @SerializedName(SERIALIZED_NAME_MIGRATION_STATE)
  private MigrationStateEnum migrationState;

  /**
   * The current step of migration from Cloud Datastore to Cloud Firestore in Datastore mode.
   */
  @JsonAdapter(MigrationStepEnum.Adapter.class)
  public enum MigrationStepEnum {
    MIGRATION_STEP_UNSPECIFIED("MIGRATION_STEP_UNSPECIFIED"),
    
    PREPARE("PREPARE"),
    
    START("START"),
    
    APPLY_WRITES_SYNCHRONOUSLY("APPLY_WRITES_SYNCHRONOUSLY"),
    
    COPY_AND_VERIFY("COPY_AND_VERIFY"),
    
    REDIRECT_EVENTUALLY_CONSISTENT_READS("REDIRECT_EVENTUALLY_CONSISTENT_READS"),
    
    REDIRECT_STRONGLY_CONSISTENT_READS("REDIRECT_STRONGLY_CONSISTENT_READS"),
    
    REDIRECT_WRITES("REDIRECT_WRITES");

    private String value;

    MigrationStepEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MigrationStepEnum fromValue(String value) {
      for (MigrationStepEnum b : MigrationStepEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MigrationStepEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MigrationStepEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MigrationStepEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MigrationStepEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MigrationStepEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIGRATION_STEP = "migrationStep";
  @SerializedName(SERIALIZED_NAME_MIGRATION_STEP)
  private MigrationStepEnum migrationStep;

  public GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata() {
  }

  public GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata migrationState(MigrationStateEnum migrationState) {
    this.migrationState = migrationState;
    return this;
  }

  /**
   * The current state of migration from Cloud Datastore to Cloud Firestore in Datastore mode.
   * @return migrationState
   */
  @javax.annotation.Nullable
  public MigrationStateEnum getMigrationState() {
    return migrationState;
  }

  public void setMigrationState(MigrationStateEnum migrationState) {
    this.migrationState = migrationState;
  }


  public GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata migrationStep(MigrationStepEnum migrationStep) {
    this.migrationStep = migrationStep;
    return this;
  }

  /**
   * The current step of migration from Cloud Datastore to Cloud Firestore in Datastore mode.
   * @return migrationStep
   */
  @javax.annotation.Nullable
  public MigrationStepEnum getMigrationStep() {
    return migrationStep;
  }

  public void setMigrationStep(MigrationStepEnum migrationStep) {
    this.migrationStep = migrationStep;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata googleDatastoreAdminV1DatastoreFirestoreMigrationMetadata = (GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata) o;
    return Objects.equals(this.migrationState, googleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.migrationState) &&
        Objects.equals(this.migrationStep, googleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.migrationStep);
  }

  @Override
  public int hashCode() {
    return Objects.hash(migrationState, migrationStep);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata {\n");
    sb.append("    migrationState: ").append(toIndentedString(migrationState)).append("\n");
    sb.append("    migrationStep: ").append(toIndentedString(migrationStep)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("migrationState");
    openapiFields.add("migrationStep");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata is not found in the empty JSON string", GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("migrationState") != null && !jsonObj.get("migrationState").isJsonNull()) && !jsonObj.get("migrationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationState").toString()));
      }
      // validate the optional field `migrationState`
      if (jsonObj.get("migrationState") != null && !jsonObj.get("migrationState").isJsonNull()) {
        MigrationStateEnum.validateJsonElement(jsonObj.get("migrationState"));
      }
      if ((jsonObj.get("migrationStep") != null && !jsonObj.get("migrationStep").isJsonNull()) && !jsonObj.get("migrationStep").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationStep` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationStep").toString()));
      }
      // validate the optional field `migrationStep`
      if (jsonObj.get("migrationStep") != null && !jsonObj.get("migrationStep").isJsonNull()) {
        MigrationStepEnum.validateJsonElement(jsonObj.get("migrationStep"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata>() {
           @Override
           public void write(JsonWriter out, GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata
   * @throws IOException if the JSON string is invalid with respect to GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata
   */
  public static GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata.class);
  }

  /**
   * Convert an instance of GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

