/*
 * Cloud Datastore API
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. 
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AllocateIdsRequest;
import org.openapitools.client.model.AllocateIdsResponse;
import org.openapitools.client.model.BeginTransactionRequest;
import org.openapitools.client.model.BeginTransactionResponse;
import org.openapitools.client.model.CommitRequest;
import org.openapitools.client.model.CommitResponse;
import org.openapitools.client.model.LookupRequest;
import org.openapitools.client.model.LookupResponse;
import org.openapitools.client.model.ReserveIdsRequest;
import org.openapitools.client.model.RollbackRequest;
import org.openapitools.client.model.RunAggregationQueryRequest;
import org.openapitools.client.model.RunAggregationQueryResponse;
import org.openapitools.client.model.RunQueryRequest;
import org.openapitools.client.model.RunQueryResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsAllocateIdsTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AllocateIdsRequest allocateIdsRequest = null;
        AllocateIdsResponse response = api.datastoreProjectsAllocateIds(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allocateIdsRequest);
        // TODO: test validations
    }

    /**
     * Begins a new transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsBeginTransactionTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BeginTransactionRequest beginTransactionRequest = null;
        BeginTransactionResponse response = api.datastoreProjectsBeginTransaction(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, beginTransactionRequest);
        // TODO: test validations
    }

    /**
     * Commits a transaction, optionally creating, deleting or modifying some entities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsCommitTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CommitRequest commitRequest = null;
        CommitResponse response = api.datastoreProjectsCommit(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, commitRequest);
        // TODO: test validations
    }

    /**
     * Looks up entities by key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsLookupTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LookupRequest lookupRequest = null;
        LookupResponse response = api.datastoreProjectsLookup(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, lookupRequest);
        // TODO: test validations
    }

    /**
     * Prevents the supplied keys&#39; IDs from being auto-allocated by Cloud Datastore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsReserveIdsTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReserveIdsRequest reserveIdsRequest = null;
        Object response = api.datastoreProjectsReserveIds(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reserveIdsRequest);
        // TODO: test validations
    }

    /**
     * Rolls back a transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsRollbackTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RollbackRequest rollbackRequest = null;
        Object response = api.datastoreProjectsRollback(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, rollbackRequest);
        // TODO: test validations
    }

    /**
     * Runs an aggregation query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsRunAggregationQueryTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RunAggregationQueryRequest runAggregationQueryRequest = null;
        RunAggregationQueryResponse response = api.datastoreProjectsRunAggregationQuery(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, runAggregationQueryRequest);
        // TODO: test validations
    }

    /**
     * Queries for entities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastoreProjectsRunQueryTest() throws ApiException {
        String projectId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RunQueryRequest runQueryRequest = null;
        RunQueryResponse response = api.datastoreProjectsRunQuery(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, runQueryRequest);
        // TODO: test validations
    }

}
