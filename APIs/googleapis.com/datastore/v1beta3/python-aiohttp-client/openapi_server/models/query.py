# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter import Filter
from openapi_server.models.kind_expression import KindExpression
from openapi_server.models.projection import Projection
from openapi_server.models.property_order import PropertyOrder
from openapi_server.models.property_reference import PropertyReference
from openapi_server import util


class Query(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distinct_on: List[PropertyReference]=None, end_cursor: str=None, filter: Filter=None, kind: List[KindExpression]=None, limit: int=None, offset: int=None, order: List[PropertyOrder]=None, projection: List[Projection]=None, start_cursor: str=None):
        """Query - a model defined in OpenAPI

        :param distinct_on: The distinct_on of this Query.
        :param end_cursor: The end_cursor of this Query.
        :param filter: The filter of this Query.
        :param kind: The kind of this Query.
        :param limit: The limit of this Query.
        :param offset: The offset of this Query.
        :param order: The order of this Query.
        :param projection: The projection of this Query.
        :param start_cursor: The start_cursor of this Query.
        """
        self.openapi_types = {
            'distinct_on': List[PropertyReference],
            'end_cursor': str,
            'filter': Filter,
            'kind': List[KindExpression],
            'limit': int,
            'offset': int,
            'order': List[PropertyOrder],
            'projection': List[Projection],
            'start_cursor': str
        }

        self.attribute_map = {
            'distinct_on': 'distinctOn',
            'end_cursor': 'endCursor',
            'filter': 'filter',
            'kind': 'kind',
            'limit': 'limit',
            'offset': 'offset',
            'order': 'order',
            'projection': 'projection',
            'start_cursor': 'startCursor'
        }

        self._distinct_on = distinct_on
        self._end_cursor = end_cursor
        self._filter = filter
        self._kind = kind
        self._limit = limit
        self._offset = offset
        self._order = order
        self._projection = projection
        self._start_cursor = start_cursor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Query':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Query of this Query.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distinct_on(self):
        """Gets the distinct_on of this Query.

        The properties to make distinct. The query results will contain the first result for each distinct combination of values for the given properties (if empty, all results are returned). Requires: * If `order` is specified, the set of distinct on properties must appear before the non-distinct on properties in `order`.

        :return: The distinct_on of this Query.
        :rtype: List[PropertyReference]
        """
        return self._distinct_on

    @distinct_on.setter
    def distinct_on(self, distinct_on):
        """Sets the distinct_on of this Query.

        The properties to make distinct. The query results will contain the first result for each distinct combination of values for the given properties (if empty, all results are returned). Requires: * If `order` is specified, the set of distinct on properties must appear before the non-distinct on properties in `order`.

        :param distinct_on: The distinct_on of this Query.
        :type distinct_on: List[PropertyReference]
        """

        self._distinct_on = distinct_on

    @property
    def end_cursor(self):
        """Gets the end_cursor of this Query.

        An ending point for the query results. Query cursors are returned in query result batches and [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).

        :return: The end_cursor of this Query.
        :rtype: str
        """
        return self._end_cursor

    @end_cursor.setter
    def end_cursor(self, end_cursor):
        """Sets the end_cursor of this Query.

        An ending point for the query results. Query cursors are returned in query result batches and [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).

        :param end_cursor: The end_cursor of this Query.
        :type end_cursor: str
        """

        self._end_cursor = end_cursor

    @property
    def filter(self):
        """Gets the filter of this Query.


        :return: The filter of this Query.
        :rtype: Filter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Query.


        :param filter: The filter of this Query.
        :type filter: Filter
        """

        self._filter = filter

    @property
    def kind(self):
        """Gets the kind of this Query.

        The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be specified.

        :return: The kind of this Query.
        :rtype: List[KindExpression]
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Query.

        The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be specified.

        :param kind: The kind of this Query.
        :type kind: List[KindExpression]
        """

        self._kind = kind

    @property
    def limit(self):
        """Gets the limit of this Query.

        The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be >= 0 if specified.

        :return: The limit of this Query.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Query.

        The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be >= 0 if specified.

        :param limit: The limit of this Query.
        :type limit: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this Query.

        The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be >= 0 if specified.

        :return: The offset of this Query.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Query.

        The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be >= 0 if specified.

        :param offset: The offset of this Query.
        :type offset: int
        """

        self._offset = offset

    @property
    def order(self):
        """Gets the order of this Query.

        The order to apply to the query results (if empty, order is unspecified).

        :return: The order of this Query.
        :rtype: List[PropertyOrder]
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Query.

        The order to apply to the query results (if empty, order is unspecified).

        :param order: The order of this Query.
        :type order: List[PropertyOrder]
        """

        self._order = order

    @property
    def projection(self):
        """Gets the projection of this Query.

        The projection to return. Defaults to returning all properties.

        :return: The projection of this Query.
        :rtype: List[Projection]
        """
        return self._projection

    @projection.setter
    def projection(self, projection):
        """Sets the projection of this Query.

        The projection to return. Defaults to returning all properties.

        :param projection: The projection of this Query.
        :type projection: List[Projection]
        """

        self._projection = projection

    @property
    def start_cursor(self):
        """Gets the start_cursor of this Query.

        A starting point for the query results. Query cursors are returned in query result batches and [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).

        :return: The start_cursor of this Query.
        :rtype: str
        """
        return self._start_cursor

    @start_cursor.setter
    def start_cursor(self, start_cursor):
        """Sets the start_cursor of this Query.

        A starting point for the query results. Query cursors are returned in query result batches and [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).

        :param start_cursor: The start_cursor of this Query.
        :type start_cursor: str
        """

        self._start_cursor = start_cursor
