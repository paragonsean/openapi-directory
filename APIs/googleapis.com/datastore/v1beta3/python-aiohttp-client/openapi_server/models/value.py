# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.array_value import ArrayValue
from openapi_server.models.entity import Entity
from openapi_server.models.key import Key
from openapi_server.models.lat_lng import LatLng
from openapi_server import util


class Value(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, array_value: ArrayValue=None, blob_value: str=None, boolean_value: bool=None, double_value: float=None, entity_value: Entity=None, exclude_from_indexes: bool=None, geo_point_value: LatLng=None, integer_value: str=None, key_value: Key=None, meaning: int=None, null_value: str=None, string_value: str=None, timestamp_value: str=None):
        """Value - a model defined in OpenAPI

        :param array_value: The array_value of this Value.
        :param blob_value: The blob_value of this Value.
        :param boolean_value: The boolean_value of this Value.
        :param double_value: The double_value of this Value.
        :param entity_value: The entity_value of this Value.
        :param exclude_from_indexes: The exclude_from_indexes of this Value.
        :param geo_point_value: The geo_point_value of this Value.
        :param integer_value: The integer_value of this Value.
        :param key_value: The key_value of this Value.
        :param meaning: The meaning of this Value.
        :param null_value: The null_value of this Value.
        :param string_value: The string_value of this Value.
        :param timestamp_value: The timestamp_value of this Value.
        """
        self.openapi_types = {
            'array_value': ArrayValue,
            'blob_value': str,
            'boolean_value': bool,
            'double_value': float,
            'entity_value': Entity,
            'exclude_from_indexes': bool,
            'geo_point_value': LatLng,
            'integer_value': str,
            'key_value': Key,
            'meaning': int,
            'null_value': str,
            'string_value': str,
            'timestamp_value': str
        }

        self.attribute_map = {
            'array_value': 'arrayValue',
            'blob_value': 'blobValue',
            'boolean_value': 'booleanValue',
            'double_value': 'doubleValue',
            'entity_value': 'entityValue',
            'exclude_from_indexes': 'excludeFromIndexes',
            'geo_point_value': 'geoPointValue',
            'integer_value': 'integerValue',
            'key_value': 'keyValue',
            'meaning': 'meaning',
            'null_value': 'nullValue',
            'string_value': 'stringValue',
            'timestamp_value': 'timestampValue'
        }

        self._array_value = array_value
        self._blob_value = blob_value
        self._boolean_value = boolean_value
        self._double_value = double_value
        self._entity_value = entity_value
        self._exclude_from_indexes = exclude_from_indexes
        self._geo_point_value = geo_point_value
        self._integer_value = integer_value
        self._key_value = key_value
        self._meaning = meaning
        self._null_value = null_value
        self._string_value = string_value
        self._timestamp_value = timestamp_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Value':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Value of this Value.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def array_value(self):
        """Gets the array_value of this Value.


        :return: The array_value of this Value.
        :rtype: ArrayValue
        """
        return self._array_value

    @array_value.setter
    def array_value(self, array_value):
        """Sets the array_value of this Value.


        :param array_value: The array_value of this Value.
        :type array_value: ArrayValue
        """

        self._array_value = array_value

    @property
    def blob_value(self):
        """Gets the blob_value of this Value.

        A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded.

        :return: The blob_value of this Value.
        :rtype: str
        """
        return self._blob_value

    @blob_value.setter
    def blob_value(self, blob_value):
        """Sets the blob_value of this Value.

        A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded.

        :param blob_value: The blob_value of this Value.
        :type blob_value: str
        """

        self._blob_value = blob_value

    @property
    def boolean_value(self):
        """Gets the boolean_value of this Value.

        A boolean value.

        :return: The boolean_value of this Value.
        :rtype: bool
        """
        return self._boolean_value

    @boolean_value.setter
    def boolean_value(self, boolean_value):
        """Sets the boolean_value of this Value.

        A boolean value.

        :param boolean_value: The boolean_value of this Value.
        :type boolean_value: bool
        """

        self._boolean_value = boolean_value

    @property
    def double_value(self):
        """Gets the double_value of this Value.

        A double value.

        :return: The double_value of this Value.
        :rtype: float
        """
        return self._double_value

    @double_value.setter
    def double_value(self, double_value):
        """Sets the double_value of this Value.

        A double value.

        :param double_value: The double_value of this Value.
        :type double_value: float
        """

        self._double_value = double_value

    @property
    def entity_value(self):
        """Gets the entity_value of this Value.


        :return: The entity_value of this Value.
        :rtype: Entity
        """
        return self._entity_value

    @entity_value.setter
    def entity_value(self, entity_value):
        """Sets the entity_value of this Value.


        :param entity_value: The entity_value of this Value.
        :type entity_value: Entity
        """

        self._entity_value = entity_value

    @property
    def exclude_from_indexes(self):
        """Gets the exclude_from_indexes of this Value.

        If the value should be excluded from all indexes including those defined explicitly.

        :return: The exclude_from_indexes of this Value.
        :rtype: bool
        """
        return self._exclude_from_indexes

    @exclude_from_indexes.setter
    def exclude_from_indexes(self, exclude_from_indexes):
        """Sets the exclude_from_indexes of this Value.

        If the value should be excluded from all indexes including those defined explicitly.

        :param exclude_from_indexes: The exclude_from_indexes of this Value.
        :type exclude_from_indexes: bool
        """

        self._exclude_from_indexes = exclude_from_indexes

    @property
    def geo_point_value(self):
        """Gets the geo_point_value of this Value.


        :return: The geo_point_value of this Value.
        :rtype: LatLng
        """
        return self._geo_point_value

    @geo_point_value.setter
    def geo_point_value(self, geo_point_value):
        """Sets the geo_point_value of this Value.


        :param geo_point_value: The geo_point_value of this Value.
        :type geo_point_value: LatLng
        """

        self._geo_point_value = geo_point_value

    @property
    def integer_value(self):
        """Gets the integer_value of this Value.

        An integer value.

        :return: The integer_value of this Value.
        :rtype: str
        """
        return self._integer_value

    @integer_value.setter
    def integer_value(self, integer_value):
        """Sets the integer_value of this Value.

        An integer value.

        :param integer_value: The integer_value of this Value.
        :type integer_value: str
        """

        self._integer_value = integer_value

    @property
    def key_value(self):
        """Gets the key_value of this Value.


        :return: The key_value of this Value.
        :rtype: Key
        """
        return self._key_value

    @key_value.setter
    def key_value(self, key_value):
        """Sets the key_value of this Value.


        :param key_value: The key_value of this Value.
        :type key_value: Key
        """

        self._key_value = key_value

    @property
    def meaning(self):
        """Gets the meaning of this Value.

        The `meaning` field should only be populated for backwards compatibility.

        :return: The meaning of this Value.
        :rtype: int
        """
        return self._meaning

    @meaning.setter
    def meaning(self, meaning):
        """Sets the meaning of this Value.

        The `meaning` field should only be populated for backwards compatibility.

        :param meaning: The meaning of this Value.
        :type meaning: int
        """

        self._meaning = meaning

    @property
    def null_value(self):
        """Gets the null_value of this Value.

        A null value.

        :return: The null_value of this Value.
        :rtype: str
        """
        return self._null_value

    @null_value.setter
    def null_value(self, null_value):
        """Sets the null_value of this Value.

        A null value.

        :param null_value: The null_value of this Value.
        :type null_value: str
        """
        allowed_values = ["NULL_VALUE"]  # noqa: E501
        if null_value not in allowed_values:
            raise ValueError(
                "Invalid value for `null_value` ({0}), must be one of {1}"
                .format(null_value, allowed_values)
            )

        self._null_value = null_value

    @property
    def string_value(self):
        """Gets the string_value of this Value.

        A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes.

        :return: The string_value of this Value.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this Value.

        A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes.

        :param string_value: The string_value of this Value.
        :type string_value: str
        """

        self._string_value = string_value

    @property
    def timestamp_value(self):
        """Gets the timestamp_value of this Value.

        A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down.

        :return: The timestamp_value of this Value.
        :rtype: str
        """
        return self._timestamp_value

    @timestamp_value.setter
    def timestamp_value(self, timestamp_value):
        """Sets the timestamp_value of this Value.

        A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down.

        :param timestamp_value: The timestamp_value of this Value.
        :type timestamp_value: str
        """

        self._timestamp_value = timestamp_value
