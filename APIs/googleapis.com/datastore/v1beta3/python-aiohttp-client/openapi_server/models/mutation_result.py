# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key import Key
from openapi_server import util


class MutationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conflict_detected: bool=None, create_time: str=None, key: Key=None, update_time: str=None, version: str=None):
        """MutationResult - a model defined in OpenAPI

        :param conflict_detected: The conflict_detected of this MutationResult.
        :param create_time: The create_time of this MutationResult.
        :param key: The key of this MutationResult.
        :param update_time: The update_time of this MutationResult.
        :param version: The version of this MutationResult.
        """
        self.openapi_types = {
            'conflict_detected': bool,
            'create_time': str,
            'key': Key,
            'update_time': str,
            'version': str
        }

        self.attribute_map = {
            'conflict_detected': 'conflictDetected',
            'create_time': 'createTime',
            'key': 'key',
            'update_time': 'updateTime',
            'version': 'version'
        }

        self._conflict_detected = conflict_detected
        self._create_time = create_time
        self._key = key
        self._update_time = update_time
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MutationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MutationResult of this MutationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conflict_detected(self):
        """Gets the conflict_detected of this MutationResult.

        Whether a conflict was detected for this mutation. Always false when a conflict detection strategy field is not set in the mutation.

        :return: The conflict_detected of this MutationResult.
        :rtype: bool
        """
        return self._conflict_detected

    @conflict_detected.setter
    def conflict_detected(self, conflict_detected):
        """Sets the conflict_detected of this MutationResult.

        Whether a conflict was detected for this mutation. Always false when a conflict detection strategy field is not set in the mutation.

        :param conflict_detected: The conflict_detected of this MutationResult.
        :type conflict_detected: bool
        """

        self._conflict_detected = conflict_detected

    @property
    def create_time(self):
        """Gets the create_time of this MutationResult.

        The create time of the entity. This field will not be set after a 'delete'.

        :return: The create_time of this MutationResult.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this MutationResult.

        The create time of the entity. This field will not be set after a 'delete'.

        :param create_time: The create_time of this MutationResult.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def key(self):
        """Gets the key of this MutationResult.


        :return: The key of this MutationResult.
        :rtype: Key
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this MutationResult.


        :param key: The key of this MutationResult.
        :type key: Key
        """

        self._key = key

    @property
    def update_time(self):
        """Gets the update_time of this MutationResult.

        The update time of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the timestamp will be the update timestamp of the current entity. This field will not be set after a 'delete'.

        :return: The update_time of this MutationResult.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this MutationResult.

        The update time of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the timestamp will be the update timestamp of the current entity. This field will not be set after a 'delete'.

        :param update_time: The update_time of this MutationResult.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def version(self):
        """Gets the version of this MutationResult.

        The version of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the version will be the version of the current entity or, if no entity is present, a version that is strictly greater than the version of any previous entity and less than the version of any possible future entity.

        :return: The version of this MutationResult.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this MutationResult.

        The version of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the version will be the version of the current entity or, if no entity is present, a version that is strictly greater than the version of any previous entity and less than the version of any possible future entity.

        :param version: The version of this MutationResult.
        :type version: str
        """

        self._version = version
