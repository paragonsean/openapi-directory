# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gql_query_parameter import GqlQueryParameter
from openapi_server import util


class GqlQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_literals: bool=None, named_bindings: Dict[str, GqlQueryParameter]=None, positional_bindings: List[GqlQueryParameter]=None, query_string: str=None):
        """GqlQuery - a model defined in OpenAPI

        :param allow_literals: The allow_literals of this GqlQuery.
        :param named_bindings: The named_bindings of this GqlQuery.
        :param positional_bindings: The positional_bindings of this GqlQuery.
        :param query_string: The query_string of this GqlQuery.
        """
        self.openapi_types = {
            'allow_literals': bool,
            'named_bindings': Dict[str, GqlQueryParameter],
            'positional_bindings': List[GqlQueryParameter],
            'query_string': str
        }

        self.attribute_map = {
            'allow_literals': 'allowLiterals',
            'named_bindings': 'namedBindings',
            'positional_bindings': 'positionalBindings',
            'query_string': 'queryString'
        }

        self._allow_literals = allow_literals
        self._named_bindings = named_bindings
        self._positional_bindings = positional_bindings
        self._query_string = query_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GqlQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GqlQuery of this GqlQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_literals(self):
        """Gets the allow_literals of this GqlQuery.

        When false, the query string must not contain any literals and instead must bind all values. For example, `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while `SELECT * FROM Kind WHERE a = @value` is.

        :return: The allow_literals of this GqlQuery.
        :rtype: bool
        """
        return self._allow_literals

    @allow_literals.setter
    def allow_literals(self, allow_literals):
        """Sets the allow_literals of this GqlQuery.

        When false, the query string must not contain any literals and instead must bind all values. For example, `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while `SELECT * FROM Kind WHERE a = @value` is.

        :param allow_literals: The allow_literals of this GqlQuery.
        :type allow_literals: bool
        """

        self._allow_literals = allow_literals

    @property
    def named_bindings(self):
        """Gets the named_bindings of this GqlQuery.

        For each non-reserved named binding site in the query string, there must be a named parameter with that name, but not necessarily the inverse. Key must match regex `A-Za-z_$*`, must not match regex `__.*__`, and must not be `\"\"`.

        :return: The named_bindings of this GqlQuery.
        :rtype: Dict[str, GqlQueryParameter]
        """
        return self._named_bindings

    @named_bindings.setter
    def named_bindings(self, named_bindings):
        """Sets the named_bindings of this GqlQuery.

        For each non-reserved named binding site in the query string, there must be a named parameter with that name, but not necessarily the inverse. Key must match regex `A-Za-z_$*`, must not match regex `__.*__`, and must not be `\"\"`.

        :param named_bindings: The named_bindings of this GqlQuery.
        :type named_bindings: Dict[str, GqlQueryParameter]
        """

        self._named_bindings = named_bindings

    @property
    def positional_bindings(self):
        """Gets the positional_bindings of this GqlQuery.

        Numbered binding site @1 references the first numbered parameter, effectively using 1-based indexing, rather than the usual 0. For each binding site numbered i in `query_string`, there must be an i-th numbered parameter. The inverse must also be true.

        :return: The positional_bindings of this GqlQuery.
        :rtype: List[GqlQueryParameter]
        """
        return self._positional_bindings

    @positional_bindings.setter
    def positional_bindings(self, positional_bindings):
        """Sets the positional_bindings of this GqlQuery.

        Numbered binding site @1 references the first numbered parameter, effectively using 1-based indexing, rather than the usual 0. For each binding site numbered i in `query_string`, there must be an i-th numbered parameter. The inverse must also be true.

        :param positional_bindings: The positional_bindings of this GqlQuery.
        :type positional_bindings: List[GqlQueryParameter]
        """

        self._positional_bindings = positional_bindings

    @property
    def query_string(self):
        """Gets the query_string of this GqlQuery.

        A string of the format described [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).

        :return: The query_string of this GqlQuery.
        :rtype: str
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this GqlQuery.

        A string of the format described [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).

        :param query_string: The query_string of this GqlQuery.
        :type query_string: str
        """

        self._query_string = query_string
