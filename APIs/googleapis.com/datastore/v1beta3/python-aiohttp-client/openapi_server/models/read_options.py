# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReadOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, read_consistency: str=None, read_time: str=None, transaction: str=None):
        """ReadOptions - a model defined in OpenAPI

        :param read_consistency: The read_consistency of this ReadOptions.
        :param read_time: The read_time of this ReadOptions.
        :param transaction: The transaction of this ReadOptions.
        """
        self.openapi_types = {
            'read_consistency': str,
            'read_time': str,
            'transaction': str
        }

        self.attribute_map = {
            'read_consistency': 'readConsistency',
            'read_time': 'readTime',
            'transaction': 'transaction'
        }

        self._read_consistency = read_consistency
        self._read_time = read_time
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReadOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReadOptions of this ReadOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def read_consistency(self):
        """Gets the read_consistency of this ReadOptions.

        The non-transactional read consistency to use.

        :return: The read_consistency of this ReadOptions.
        :rtype: str
        """
        return self._read_consistency

    @read_consistency.setter
    def read_consistency(self, read_consistency):
        """Sets the read_consistency of this ReadOptions.

        The non-transactional read consistency to use.

        :param read_consistency: The read_consistency of this ReadOptions.
        :type read_consistency: str
        """
        allowed_values = ["READ_CONSISTENCY_UNSPECIFIED", "STRONG", "EVENTUAL"]  # noqa: E501
        if read_consistency not in allowed_values:
            raise ValueError(
                "Invalid value for `read_consistency` ({0}), must be one of {1}"
                .format(read_consistency, allowed_values)
            )

        self._read_consistency = read_consistency

    @property
    def read_time(self):
        """Gets the read_time of this ReadOptions.

        Reads entities as they were at the given time. This value is only supported for Cloud Firestore in Datastore mode. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.

        :return: The read_time of this ReadOptions.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time):
        """Sets the read_time of this ReadOptions.

        Reads entities as they were at the given time. This value is only supported for Cloud Firestore in Datastore mode. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.

        :param read_time: The read_time of this ReadOptions.
        :type read_time: str
        """

        self._read_time = read_time

    @property
    def transaction(self):
        """Gets the transaction of this ReadOptions.

        The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction.

        :return: The transaction of this ReadOptions.
        :rtype: str
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this ReadOptions.

        The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction.

        :param transaction: The transaction of this ReadOptions.
        :type transaction: str
        """

        self._transaction = transaction
