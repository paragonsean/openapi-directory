# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.property_reference import PropertyReference
from openapi_server.models.value import Value
from openapi_server import util


class PropertyFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, op: str=None, _property: PropertyReference=None, value: Value=None):
        """PropertyFilter - a model defined in OpenAPI

        :param op: The op of this PropertyFilter.
        :param _property: The _property of this PropertyFilter.
        :param value: The value of this PropertyFilter.
        """
        self.openapi_types = {
            'op': str,
            '_property': PropertyReference,
            'value': Value
        }

        self.attribute_map = {
            'op': 'op',
            '_property': 'property',
            'value': 'value'
        }

        self._op = op
        self.__property = _property
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PropertyFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PropertyFilter of this PropertyFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def op(self):
        """Gets the op of this PropertyFilter.

        The operator to filter by.

        :return: The op of this PropertyFilter.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this PropertyFilter.

        The operator to filter by.

        :param op: The op of this PropertyFilter.
        :type op: str
        """
        allowed_values = ["OPERATOR_UNSPECIFIED", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", "EQUAL", "IN", "NOT_EQUAL", "HAS_ANCESTOR", "NOT_IN"]  # noqa: E501
        if op not in allowed_values:
            raise ValueError(
                "Invalid value for `op` ({0}), must be one of {1}"
                .format(op, allowed_values)
            )

        self._op = op

    @property
    def _property(self):
        """Gets the _property of this PropertyFilter.


        :return: The _property of this PropertyFilter.
        :rtype: PropertyReference
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this PropertyFilter.


        :param _property: The _property of this PropertyFilter.
        :type _property: PropertyReference
        """

        self.__property = _property

    @property
    def value(self):
        """Gets the value of this PropertyFilter.


        :return: The value of this PropertyFilter.
        :rtype: Value
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PropertyFilter.


        :param value: The value of this PropertyFilter.
        :type value: Value
        """

        self._value = value
