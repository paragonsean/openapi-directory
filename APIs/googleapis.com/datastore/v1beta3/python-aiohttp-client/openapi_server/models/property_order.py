# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.property_reference import PropertyReference
from openapi_server import util


class PropertyOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direction: str=None, _property: PropertyReference=None):
        """PropertyOrder - a model defined in OpenAPI

        :param direction: The direction of this PropertyOrder.
        :param _property: The _property of this PropertyOrder.
        """
        self.openapi_types = {
            'direction': str,
            '_property': PropertyReference
        }

        self.attribute_map = {
            'direction': 'direction',
            '_property': 'property'
        }

        self._direction = direction
        self.__property = _property

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PropertyOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PropertyOrder of this PropertyOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direction(self):
        """Gets the direction of this PropertyOrder.

        The direction to order by. Defaults to `ASCENDING`.

        :return: The direction of this PropertyOrder.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this PropertyOrder.

        The direction to order by. Defaults to `ASCENDING`.

        :param direction: The direction of this PropertyOrder.
        :type direction: str
        """
        allowed_values = ["DIRECTION_UNSPECIFIED", "ASCENDING", "DESCENDING"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def _property(self):
        """Gets the _property of this PropertyOrder.


        :return: The _property of this PropertyOrder.
        :rtype: PropertyReference
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this PropertyOrder.


        :param _property: The _property of this PropertyOrder.
        :type _property: PropertyReference
        """

        self.__property = _property
