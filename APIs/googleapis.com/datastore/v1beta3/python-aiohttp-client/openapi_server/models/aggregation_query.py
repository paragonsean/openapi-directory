# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation import Aggregation
from openapi_server.models.query import Query
from openapi_server import util


class AggregationQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregations: List[Aggregation]=None, nested_query: Query=None):
        """AggregationQuery - a model defined in OpenAPI

        :param aggregations: The aggregations of this AggregationQuery.
        :param nested_query: The nested_query of this AggregationQuery.
        """
        self.openapi_types = {
            'aggregations': List[Aggregation],
            'nested_query': Query
        }

        self.attribute_map = {
            'aggregations': 'aggregations',
            'nested_query': 'nestedQuery'
        }

        self._aggregations = aggregations
        self._nested_query = nested_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregationQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregationQuery of this AggregationQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregations(self):
        """Gets the aggregations of this AggregationQuery.

        Optional. Series of aggregations to apply over the results of the `nested_query`. Requires: * A minimum of one and maximum of five aggregations per query.

        :return: The aggregations of this AggregationQuery.
        :rtype: List[Aggregation]
        """
        return self._aggregations

    @aggregations.setter
    def aggregations(self, aggregations):
        """Sets the aggregations of this AggregationQuery.

        Optional. Series of aggregations to apply over the results of the `nested_query`. Requires: * A minimum of one and maximum of five aggregations per query.

        :param aggregations: The aggregations of this AggregationQuery.
        :type aggregations: List[Aggregation]
        """

        self._aggregations = aggregations

    @property
    def nested_query(self):
        """Gets the nested_query of this AggregationQuery.


        :return: The nested_query of this AggregationQuery.
        :rtype: Query
        """
        return self._nested_query

    @nested_query.setter
    def nested_query(self, nested_query):
        """Sets the nested_query of this AggregationQuery.


        :param nested_query: The nested_query of this AggregationQuery.
        :type nested_query: Query
        """

        self._nested_query = nested_query
