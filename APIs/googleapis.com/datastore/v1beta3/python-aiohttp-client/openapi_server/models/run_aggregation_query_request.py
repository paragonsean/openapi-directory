# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation_query import AggregationQuery
from openapi_server.models.gql_query import GqlQuery
from openapi_server.models.partition_id import PartitionId
from openapi_server.models.read_options import ReadOptions
from openapi_server import util


class RunAggregationQueryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_query: AggregationQuery=None, gql_query: GqlQuery=None, partition_id: PartitionId=None, read_options: ReadOptions=None):
        """RunAggregationQueryRequest - a model defined in OpenAPI

        :param aggregation_query: The aggregation_query of this RunAggregationQueryRequest.
        :param gql_query: The gql_query of this RunAggregationQueryRequest.
        :param partition_id: The partition_id of this RunAggregationQueryRequest.
        :param read_options: The read_options of this RunAggregationQueryRequest.
        """
        self.openapi_types = {
            'aggregation_query': AggregationQuery,
            'gql_query': GqlQuery,
            'partition_id': PartitionId,
            'read_options': ReadOptions
        }

        self.attribute_map = {
            'aggregation_query': 'aggregationQuery',
            'gql_query': 'gqlQuery',
            'partition_id': 'partitionId',
            'read_options': 'readOptions'
        }

        self._aggregation_query = aggregation_query
        self._gql_query = gql_query
        self._partition_id = partition_id
        self._read_options = read_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunAggregationQueryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunAggregationQueryRequest of this RunAggregationQueryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_query(self):
        """Gets the aggregation_query of this RunAggregationQueryRequest.


        :return: The aggregation_query of this RunAggregationQueryRequest.
        :rtype: AggregationQuery
        """
        return self._aggregation_query

    @aggregation_query.setter
    def aggregation_query(self, aggregation_query):
        """Sets the aggregation_query of this RunAggregationQueryRequest.


        :param aggregation_query: The aggregation_query of this RunAggregationQueryRequest.
        :type aggregation_query: AggregationQuery
        """

        self._aggregation_query = aggregation_query

    @property
    def gql_query(self):
        """Gets the gql_query of this RunAggregationQueryRequest.


        :return: The gql_query of this RunAggregationQueryRequest.
        :rtype: GqlQuery
        """
        return self._gql_query

    @gql_query.setter
    def gql_query(self, gql_query):
        """Sets the gql_query of this RunAggregationQueryRequest.


        :param gql_query: The gql_query of this RunAggregationQueryRequest.
        :type gql_query: GqlQuery
        """

        self._gql_query = gql_query

    @property
    def partition_id(self):
        """Gets the partition_id of this RunAggregationQueryRequest.


        :return: The partition_id of this RunAggregationQueryRequest.
        :rtype: PartitionId
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this RunAggregationQueryRequest.


        :param partition_id: The partition_id of this RunAggregationQueryRequest.
        :type partition_id: PartitionId
        """

        self._partition_id = partition_id

    @property
    def read_options(self):
        """Gets the read_options of this RunAggregationQueryRequest.


        :return: The read_options of this RunAggregationQueryRequest.
        :rtype: ReadOptions
        """
        return self._read_options

    @read_options.setter
    def read_options(self, read_options):
        """Sets the read_options of this RunAggregationQueryRequest.


        :param read_options: The read_options of this RunAggregationQueryRequest.
        :type read_options: ReadOptions
        """

        self._read_options = read_options
