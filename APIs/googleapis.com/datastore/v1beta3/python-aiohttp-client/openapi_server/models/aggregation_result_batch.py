# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation_result import AggregationResult
from openapi_server import util


class AggregationResultBatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_results: List[AggregationResult]=None, more_results: str=None, read_time: str=None):
        """AggregationResultBatch - a model defined in OpenAPI

        :param aggregation_results: The aggregation_results of this AggregationResultBatch.
        :param more_results: The more_results of this AggregationResultBatch.
        :param read_time: The read_time of this AggregationResultBatch.
        """
        self.openapi_types = {
            'aggregation_results': List[AggregationResult],
            'more_results': str,
            'read_time': str
        }

        self.attribute_map = {
            'aggregation_results': 'aggregationResults',
            'more_results': 'moreResults',
            'read_time': 'readTime'
        }

        self._aggregation_results = aggregation_results
        self._more_results = more_results
        self._read_time = read_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregationResultBatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregationResultBatch of this AggregationResultBatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_results(self):
        """Gets the aggregation_results of this AggregationResultBatch.

        The aggregation results for this batch.

        :return: The aggregation_results of this AggregationResultBatch.
        :rtype: List[AggregationResult]
        """
        return self._aggregation_results

    @aggregation_results.setter
    def aggregation_results(self, aggregation_results):
        """Sets the aggregation_results of this AggregationResultBatch.

        The aggregation results for this batch.

        :param aggregation_results: The aggregation_results of this AggregationResultBatch.
        :type aggregation_results: List[AggregationResult]
        """

        self._aggregation_results = aggregation_results

    @property
    def more_results(self):
        """Gets the more_results of this AggregationResultBatch.

        The state of the query after the current batch. Only COUNT(*) aggregations are supported in the initial launch. Therefore, expected result type is limited to `NO_MORE_RESULTS`.

        :return: The more_results of this AggregationResultBatch.
        :rtype: str
        """
        return self._more_results

    @more_results.setter
    def more_results(self, more_results):
        """Sets the more_results of this AggregationResultBatch.

        The state of the query after the current batch. Only COUNT(*) aggregations are supported in the initial launch. Therefore, expected result type is limited to `NO_MORE_RESULTS`.

        :param more_results: The more_results of this AggregationResultBatch.
        :type more_results: str
        """
        allowed_values = ["MORE_RESULTS_TYPE_UNSPECIFIED", "NOT_FINISHED", "MORE_RESULTS_AFTER_LIMIT", "MORE_RESULTS_AFTER_CURSOR", "NO_MORE_RESULTS"]  # noqa: E501
        if more_results not in allowed_values:
            raise ValueError(
                "Invalid value for `more_results` ({0}), must be one of {1}"
                .format(more_results, allowed_values)
            )

        self._more_results = more_results

    @property
    def read_time(self):
        """Gets the read_time of this AggregationResultBatch.

        Read timestamp this batch was returned from. In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches.

        :return: The read_time of this AggregationResultBatch.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time):
        """Sets the read_time of this AggregationResultBatch.

        Read timestamp this batch was returned from. In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches.

        :param read_time: The read_time of this AggregationResultBatch.
        :type read_time: str
        """

        self._read_time = read_time
