/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFloodlightGroup.h
 *
 * A single Floodlight group.
 */

#ifndef OAIFloodlightGroup_H
#define OAIFloodlightGroup_H

#include <QJsonObject>

#include "OAIActiveViewVideoViewabilityMetricConfig.h"
#include "OAILookbackWindow.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIActiveViewVideoViewabilityMetricConfig;
class OAILookbackWindow;

class OAIFloodlightGroup : public OAIObject {
public:
    OAIFloodlightGroup();
    OAIFloodlightGroup(QString json);
    ~OAIFloodlightGroup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIActiveViewVideoViewabilityMetricConfig getActiveViewConfig() const;
    void setActiveViewConfig(const OAIActiveViewVideoViewabilityMetricConfig &active_view_config);
    bool is_active_view_config_Set() const;
    bool is_active_view_config_Valid() const;

    QMap<QString, QJsonValue> getCustomVariables() const;
    void setCustomVariables(const QMap<QString, QJsonValue> &custom_variables);
    bool is_custom_variables_Set() const;
    bool is_custom_variables_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getFloodlightGroupId() const;
    void setFloodlightGroupId(const QString &floodlight_group_id);
    bool is_floodlight_group_id_Set() const;
    bool is_floodlight_group_id_Valid() const;

    OAILookbackWindow getLookbackWindow() const;
    void setLookbackWindow(const OAILookbackWindow &lookback_window);
    bool is_lookback_window_Set() const;
    bool is_lookback_window_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getWebTagType() const;
    void setWebTagType(const QString &web_tag_type);
    bool is_web_tag_type_Set() const;
    bool is_web_tag_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIActiveViewVideoViewabilityMetricConfig m_active_view_config;
    bool m_active_view_config_isSet;
    bool m_active_view_config_isValid;

    QMap<QString, QJsonValue> m_custom_variables;
    bool m_custom_variables_isSet;
    bool m_custom_variables_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_floodlight_group_id;
    bool m_floodlight_group_id_isSet;
    bool m_floodlight_group_id_isValid;

    OAILookbackWindow m_lookback_window;
    bool m_lookback_window_isSet;
    bool m_lookback_window_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_web_tag_type;
    bool m_web_tag_type_isSet;
    bool m_web_tag_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFloodlightGroup)

#endif // OAIFloodlightGroup_H
