/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrackingFloodlightActivityConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrackingFloodlightActivityConfig::OAITrackingFloodlightActivityConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrackingFloodlightActivityConfig::OAITrackingFloodlightActivityConfig() {
    this->initializeModel();
}

OAITrackingFloodlightActivityConfig::~OAITrackingFloodlightActivityConfig() {}

void OAITrackingFloodlightActivityConfig::initializeModel() {

    m_floodlight_activity_id_isSet = false;
    m_floodlight_activity_id_isValid = false;

    m_post_click_lookback_window_days_isSet = false;
    m_post_click_lookback_window_days_isValid = false;

    m_post_view_lookback_window_days_isSet = false;
    m_post_view_lookback_window_days_isValid = false;
}

void OAITrackingFloodlightActivityConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrackingFloodlightActivityConfig::fromJsonObject(QJsonObject json) {

    m_floodlight_activity_id_isValid = ::OpenAPI::fromJsonValue(m_floodlight_activity_id, json[QString("floodlightActivityId")]);
    m_floodlight_activity_id_isSet = !json[QString("floodlightActivityId")].isNull() && m_floodlight_activity_id_isValid;

    m_post_click_lookback_window_days_isValid = ::OpenAPI::fromJsonValue(m_post_click_lookback_window_days, json[QString("postClickLookbackWindowDays")]);
    m_post_click_lookback_window_days_isSet = !json[QString("postClickLookbackWindowDays")].isNull() && m_post_click_lookback_window_days_isValid;

    m_post_view_lookback_window_days_isValid = ::OpenAPI::fromJsonValue(m_post_view_lookback_window_days, json[QString("postViewLookbackWindowDays")]);
    m_post_view_lookback_window_days_isSet = !json[QString("postViewLookbackWindowDays")].isNull() && m_post_view_lookback_window_days_isValid;
}

QString OAITrackingFloodlightActivityConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrackingFloodlightActivityConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_floodlight_activity_id_isSet) {
        obj.insert(QString("floodlightActivityId"), ::OpenAPI::toJsonValue(m_floodlight_activity_id));
    }
    if (m_post_click_lookback_window_days_isSet) {
        obj.insert(QString("postClickLookbackWindowDays"), ::OpenAPI::toJsonValue(m_post_click_lookback_window_days));
    }
    if (m_post_view_lookback_window_days_isSet) {
        obj.insert(QString("postViewLookbackWindowDays"), ::OpenAPI::toJsonValue(m_post_view_lookback_window_days));
    }
    return obj;
}

QString OAITrackingFloodlightActivityConfig::getFloodlightActivityId() const {
    return m_floodlight_activity_id;
}
void OAITrackingFloodlightActivityConfig::setFloodlightActivityId(const QString &floodlight_activity_id) {
    m_floodlight_activity_id = floodlight_activity_id;
    m_floodlight_activity_id_isSet = true;
}

bool OAITrackingFloodlightActivityConfig::is_floodlight_activity_id_Set() const{
    return m_floodlight_activity_id_isSet;
}

bool OAITrackingFloodlightActivityConfig::is_floodlight_activity_id_Valid() const{
    return m_floodlight_activity_id_isValid;
}

qint32 OAITrackingFloodlightActivityConfig::getPostClickLookbackWindowDays() const {
    return m_post_click_lookback_window_days;
}
void OAITrackingFloodlightActivityConfig::setPostClickLookbackWindowDays(const qint32 &post_click_lookback_window_days) {
    m_post_click_lookback_window_days = post_click_lookback_window_days;
    m_post_click_lookback_window_days_isSet = true;
}

bool OAITrackingFloodlightActivityConfig::is_post_click_lookback_window_days_Set() const{
    return m_post_click_lookback_window_days_isSet;
}

bool OAITrackingFloodlightActivityConfig::is_post_click_lookback_window_days_Valid() const{
    return m_post_click_lookback_window_days_isValid;
}

qint32 OAITrackingFloodlightActivityConfig::getPostViewLookbackWindowDays() const {
    return m_post_view_lookback_window_days;
}
void OAITrackingFloodlightActivityConfig::setPostViewLookbackWindowDays(const qint32 &post_view_lookback_window_days) {
    m_post_view_lookback_window_days = post_view_lookback_window_days;
    m_post_view_lookback_window_days_isSet = true;
}

bool OAITrackingFloodlightActivityConfig::is_post_view_lookback_window_days_Set() const{
    return m_post_view_lookback_window_days_isSet;
}

bool OAITrackingFloodlightActivityConfig::is_post_view_lookback_window_days_Valid() const{
    return m_post_view_lookback_window_days_isValid;
}

bool OAITrackingFloodlightActivityConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_floodlight_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_click_lookback_window_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_view_lookback_window_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrackingFloodlightActivityConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
