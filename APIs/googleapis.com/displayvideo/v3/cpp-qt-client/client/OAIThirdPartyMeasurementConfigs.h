/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIThirdPartyMeasurementConfigs.h
 *
 * Settings that control what third-party vendors are measuring specific line item metrics.
 */

#ifndef OAIThirdPartyMeasurementConfigs_H
#define OAIThirdPartyMeasurementConfigs_H

#include <QJsonObject>

#include "OAIThirdPartyVendorConfig.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIThirdPartyVendorConfig;

class OAIThirdPartyMeasurementConfigs : public OAIObject {
public:
    OAIThirdPartyMeasurementConfigs();
    OAIThirdPartyMeasurementConfigs(QString json);
    ~OAIThirdPartyMeasurementConfigs() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIThirdPartyVendorConfig> getBrandLiftVendorConfigs() const;
    void setBrandLiftVendorConfigs(const QList<OAIThirdPartyVendorConfig> &brand_lift_vendor_configs);
    bool is_brand_lift_vendor_configs_Set() const;
    bool is_brand_lift_vendor_configs_Valid() const;

    QList<OAIThirdPartyVendorConfig> getBrandSafetyVendorConfigs() const;
    void setBrandSafetyVendorConfigs(const QList<OAIThirdPartyVendorConfig> &brand_safety_vendor_configs);
    bool is_brand_safety_vendor_configs_Set() const;
    bool is_brand_safety_vendor_configs_Valid() const;

    QList<OAIThirdPartyVendorConfig> getReachVendorConfigs() const;
    void setReachVendorConfigs(const QList<OAIThirdPartyVendorConfig> &reach_vendor_configs);
    bool is_reach_vendor_configs_Set() const;
    bool is_reach_vendor_configs_Valid() const;

    QList<OAIThirdPartyVendorConfig> getViewabilityVendorConfigs() const;
    void setViewabilityVendorConfigs(const QList<OAIThirdPartyVendorConfig> &viewability_vendor_configs);
    bool is_viewability_vendor_configs_Set() const;
    bool is_viewability_vendor_configs_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIThirdPartyVendorConfig> m_brand_lift_vendor_configs;
    bool m_brand_lift_vendor_configs_isSet;
    bool m_brand_lift_vendor_configs_isValid;

    QList<OAIThirdPartyVendorConfig> m_brand_safety_vendor_configs;
    bool m_brand_safety_vendor_configs_isSet;
    bool m_brand_safety_vendor_configs_isValid;

    QList<OAIThirdPartyVendorConfig> m_reach_vendor_configs;
    bool m_reach_vendor_configs_isSet;
    bool m_reach_vendor_configs_isValid;

    QList<OAIThirdPartyVendorConfig> m_viewability_vendor_configs;
    bool m_viewability_vendor_configs_isSet;
    bool m_viewability_vendor_configs_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIThirdPartyMeasurementConfigs)

#endif // OAIThirdPartyMeasurementConfigs_H
