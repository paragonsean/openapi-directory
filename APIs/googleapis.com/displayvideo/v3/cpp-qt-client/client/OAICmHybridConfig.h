/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICmHybridConfig.h
 *
 * Settings for advertisers that use both Campaign Manager 360 (CM360) and third-party ad servers.
 */

#ifndef OAICmHybridConfig_H
#define OAICmHybridConfig_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICmHybridConfig : public OAIObject {
public:
    OAICmHybridConfig();
    OAICmHybridConfig(QString json);
    ~OAICmHybridConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCmAccountId() const;
    void setCmAccountId(const QString &cm_account_id);
    bool is_cm_account_id_Set() const;
    bool is_cm_account_id_Valid() const;

    QList<QString> getCmAdvertiserIds() const;
    void setCmAdvertiserIds(const QList<QString> &cm_advertiser_ids);
    bool is_cm_advertiser_ids_Set() const;
    bool is_cm_advertiser_ids_Valid() const;

    QString getCmFloodlightConfigId() const;
    void setCmFloodlightConfigId(const QString &cm_floodlight_config_id);
    bool is_cm_floodlight_config_id_Set() const;
    bool is_cm_floodlight_config_id_Valid() const;

    bool isCmFloodlightLinkingAuthorized() const;
    void setCmFloodlightLinkingAuthorized(const bool &cm_floodlight_linking_authorized);
    bool is_cm_floodlight_linking_authorized_Set() const;
    bool is_cm_floodlight_linking_authorized_Valid() const;

    QList<QString> getCmSyncableSiteIds() const;
    void setCmSyncableSiteIds(const QList<QString> &cm_syncable_site_ids);
    bool is_cm_syncable_site_ids_Set() const;
    bool is_cm_syncable_site_ids_Valid() const;

    bool isDv360ToCmCostReportingEnabled() const;
    void setDv360ToCmCostReportingEnabled(const bool &dv360_to_cm_cost_reporting_enabled);
    bool is_dv360_to_cm_cost_reporting_enabled_Set() const;
    bool is_dv360_to_cm_cost_reporting_enabled_Valid() const;

    bool isDv360ToCmDataSharingEnabled() const;
    void setDv360ToCmDataSharingEnabled(const bool &dv360_to_cm_data_sharing_enabled);
    bool is_dv360_to_cm_data_sharing_enabled_Set() const;
    bool is_dv360_to_cm_data_sharing_enabled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cm_account_id;
    bool m_cm_account_id_isSet;
    bool m_cm_account_id_isValid;

    QList<QString> m_cm_advertiser_ids;
    bool m_cm_advertiser_ids_isSet;
    bool m_cm_advertiser_ids_isValid;

    QString m_cm_floodlight_config_id;
    bool m_cm_floodlight_config_id_isSet;
    bool m_cm_floodlight_config_id_isValid;

    bool m_cm_floodlight_linking_authorized;
    bool m_cm_floodlight_linking_authorized_isSet;
    bool m_cm_floodlight_linking_authorized_isValid;

    QList<QString> m_cm_syncable_site_ids;
    bool m_cm_syncable_site_ids_isSet;
    bool m_cm_syncable_site_ids_isValid;

    bool m_dv360_to_cm_cost_reporting_enabled;
    bool m_dv360_to_cm_cost_reporting_enabled_isSet;
    bool m_dv360_to_cm_cost_reporting_enabled_isValid;

    bool m_dv360_to_cm_data_sharing_enabled;
    bool m_dv360_to_cm_data_sharing_enabled_isSet;
    bool m_dv360_to_cm_data_sharing_enabled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICmHybridConfig)

#endif // OAICmHybridConfig_H
