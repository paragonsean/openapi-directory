/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlgorithmRulesSignalComparison.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlgorithmRulesSignalComparison::OAIAlgorithmRulesSignalComparison(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlgorithmRulesSignalComparison::OAIAlgorithmRulesSignalComparison() {
    this->initializeModel();
}

OAIAlgorithmRulesSignalComparison::~OAIAlgorithmRulesSignalComparison() {}

void OAIAlgorithmRulesSignalComparison::initializeModel() {

    m_comparison_operator_isSet = false;
    m_comparison_operator_isValid = false;

    m_comparison_value_isSet = false;
    m_comparison_value_isValid = false;

    m_signal_isSet = false;
    m_signal_isValid = false;
}

void OAIAlgorithmRulesSignalComparison::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlgorithmRulesSignalComparison::fromJsonObject(QJsonObject json) {

    m_comparison_operator_isValid = ::OpenAPI::fromJsonValue(m_comparison_operator, json[QString("comparisonOperator")]);
    m_comparison_operator_isSet = !json[QString("comparisonOperator")].isNull() && m_comparison_operator_isValid;

    m_comparison_value_isValid = ::OpenAPI::fromJsonValue(m_comparison_value, json[QString("comparisonValue")]);
    m_comparison_value_isSet = !json[QString("comparisonValue")].isNull() && m_comparison_value_isValid;

    m_signal_isValid = ::OpenAPI::fromJsonValue(m_signal, json[QString("signal")]);
    m_signal_isSet = !json[QString("signal")].isNull() && m_signal_isValid;
}

QString OAIAlgorithmRulesSignalComparison::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlgorithmRulesSignalComparison::asJsonObject() const {
    QJsonObject obj;
    if (m_comparison_operator_isSet) {
        obj.insert(QString("comparisonOperator"), ::OpenAPI::toJsonValue(m_comparison_operator));
    }
    if (m_comparison_value.isSet()) {
        obj.insert(QString("comparisonValue"), ::OpenAPI::toJsonValue(m_comparison_value));
    }
    if (m_signal.isSet()) {
        obj.insert(QString("signal"), ::OpenAPI::toJsonValue(m_signal));
    }
    return obj;
}

QString OAIAlgorithmRulesSignalComparison::getComparisonOperator() const {
    return m_comparison_operator;
}
void OAIAlgorithmRulesSignalComparison::setComparisonOperator(const QString &comparison_operator) {
    m_comparison_operator = comparison_operator;
    m_comparison_operator_isSet = true;
}

bool OAIAlgorithmRulesSignalComparison::is_comparison_operator_Set() const{
    return m_comparison_operator_isSet;
}

bool OAIAlgorithmRulesSignalComparison::is_comparison_operator_Valid() const{
    return m_comparison_operator_isValid;
}

OAIAlgorithmRulesComparisonValue OAIAlgorithmRulesSignalComparison::getComparisonValue() const {
    return m_comparison_value;
}
void OAIAlgorithmRulesSignalComparison::setComparisonValue(const OAIAlgorithmRulesComparisonValue &comparison_value) {
    m_comparison_value = comparison_value;
    m_comparison_value_isSet = true;
}

bool OAIAlgorithmRulesSignalComparison::is_comparison_value_Set() const{
    return m_comparison_value_isSet;
}

bool OAIAlgorithmRulesSignalComparison::is_comparison_value_Valid() const{
    return m_comparison_value_isValid;
}

OAIAlgorithmRulesSignal OAIAlgorithmRulesSignalComparison::getSignal() const {
    return m_signal;
}
void OAIAlgorithmRulesSignalComparison::setSignal(const OAIAlgorithmRulesSignal &signal) {
    m_signal = signal;
    m_signal_isSet = true;
}

bool OAIAlgorithmRulesSignalComparison::is_signal_Set() const{
    return m_signal_isSet;
}

bool OAIAlgorithmRulesSignalComparison::is_signal_Valid() const{
    return m_signal_isValid;
}

bool OAIAlgorithmRulesSignalComparison::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comparison_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlgorithmRulesSignalComparison::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
