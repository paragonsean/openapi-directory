/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventorySourceStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventorySourceStatus::OAIInventorySourceStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventorySourceStatus::OAIInventorySourceStatus() {
    this->initializeModel();
}

OAIInventorySourceStatus::~OAIInventorySourceStatus() {}

void OAIInventorySourceStatus::initializeModel() {

    m_config_status_isSet = false;
    m_config_status_isValid = false;

    m_entity_pause_reason_isSet = false;
    m_entity_pause_reason_isValid = false;

    m_entity_status_isSet = false;
    m_entity_status_isValid = false;

    m_seller_pause_reason_isSet = false;
    m_seller_pause_reason_isValid = false;

    m_seller_status_isSet = false;
    m_seller_status_isValid = false;
}

void OAIInventorySourceStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventorySourceStatus::fromJsonObject(QJsonObject json) {

    m_config_status_isValid = ::OpenAPI::fromJsonValue(m_config_status, json[QString("configStatus")]);
    m_config_status_isSet = !json[QString("configStatus")].isNull() && m_config_status_isValid;

    m_entity_pause_reason_isValid = ::OpenAPI::fromJsonValue(m_entity_pause_reason, json[QString("entityPauseReason")]);
    m_entity_pause_reason_isSet = !json[QString("entityPauseReason")].isNull() && m_entity_pause_reason_isValid;

    m_entity_status_isValid = ::OpenAPI::fromJsonValue(m_entity_status, json[QString("entityStatus")]);
    m_entity_status_isSet = !json[QString("entityStatus")].isNull() && m_entity_status_isValid;

    m_seller_pause_reason_isValid = ::OpenAPI::fromJsonValue(m_seller_pause_reason, json[QString("sellerPauseReason")]);
    m_seller_pause_reason_isSet = !json[QString("sellerPauseReason")].isNull() && m_seller_pause_reason_isValid;

    m_seller_status_isValid = ::OpenAPI::fromJsonValue(m_seller_status, json[QString("sellerStatus")]);
    m_seller_status_isSet = !json[QString("sellerStatus")].isNull() && m_seller_status_isValid;
}

QString OAIInventorySourceStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventorySourceStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_config_status_isSet) {
        obj.insert(QString("configStatus"), ::OpenAPI::toJsonValue(m_config_status));
    }
    if (m_entity_pause_reason_isSet) {
        obj.insert(QString("entityPauseReason"), ::OpenAPI::toJsonValue(m_entity_pause_reason));
    }
    if (m_entity_status_isSet) {
        obj.insert(QString("entityStatus"), ::OpenAPI::toJsonValue(m_entity_status));
    }
    if (m_seller_pause_reason_isSet) {
        obj.insert(QString("sellerPauseReason"), ::OpenAPI::toJsonValue(m_seller_pause_reason));
    }
    if (m_seller_status_isSet) {
        obj.insert(QString("sellerStatus"), ::OpenAPI::toJsonValue(m_seller_status));
    }
    return obj;
}

QString OAIInventorySourceStatus::getConfigStatus() const {
    return m_config_status;
}
void OAIInventorySourceStatus::setConfigStatus(const QString &config_status) {
    m_config_status = config_status;
    m_config_status_isSet = true;
}

bool OAIInventorySourceStatus::is_config_status_Set() const{
    return m_config_status_isSet;
}

bool OAIInventorySourceStatus::is_config_status_Valid() const{
    return m_config_status_isValid;
}

QString OAIInventorySourceStatus::getEntityPauseReason() const {
    return m_entity_pause_reason;
}
void OAIInventorySourceStatus::setEntityPauseReason(const QString &entity_pause_reason) {
    m_entity_pause_reason = entity_pause_reason;
    m_entity_pause_reason_isSet = true;
}

bool OAIInventorySourceStatus::is_entity_pause_reason_Set() const{
    return m_entity_pause_reason_isSet;
}

bool OAIInventorySourceStatus::is_entity_pause_reason_Valid() const{
    return m_entity_pause_reason_isValid;
}

QString OAIInventorySourceStatus::getEntityStatus() const {
    return m_entity_status;
}
void OAIInventorySourceStatus::setEntityStatus(const QString &entity_status) {
    m_entity_status = entity_status;
    m_entity_status_isSet = true;
}

bool OAIInventorySourceStatus::is_entity_status_Set() const{
    return m_entity_status_isSet;
}

bool OAIInventorySourceStatus::is_entity_status_Valid() const{
    return m_entity_status_isValid;
}

QString OAIInventorySourceStatus::getSellerPauseReason() const {
    return m_seller_pause_reason;
}
void OAIInventorySourceStatus::setSellerPauseReason(const QString &seller_pause_reason) {
    m_seller_pause_reason = seller_pause_reason;
    m_seller_pause_reason_isSet = true;
}

bool OAIInventorySourceStatus::is_seller_pause_reason_Set() const{
    return m_seller_pause_reason_isSet;
}

bool OAIInventorySourceStatus::is_seller_pause_reason_Valid() const{
    return m_seller_pause_reason_isValid;
}

QString OAIInventorySourceStatus::getSellerStatus() const {
    return m_seller_status;
}
void OAIInventorySourceStatus::setSellerStatus(const QString &seller_status) {
    m_seller_status = seller_status;
    m_seller_status_isSet = true;
}

bool OAIInventorySourceStatus::is_seller_status_Set() const{
    return m_seller_status_isSet;
}

bool OAIInventorySourceStatus::is_seller_status_Valid() const{
    return m_seller_status_isValid;
}

bool OAIInventorySourceStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_pause_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_pause_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventorySourceStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
