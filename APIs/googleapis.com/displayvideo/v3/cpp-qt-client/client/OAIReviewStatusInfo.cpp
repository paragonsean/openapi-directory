/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReviewStatusInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReviewStatusInfo::OAIReviewStatusInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReviewStatusInfo::OAIReviewStatusInfo() {
    this->initializeModel();
}

OAIReviewStatusInfo::~OAIReviewStatusInfo() {}

void OAIReviewStatusInfo::initializeModel() {

    m_approval_status_isSet = false;
    m_approval_status_isValid = false;

    m_content_and_policy_review_status_isSet = false;
    m_content_and_policy_review_status_isValid = false;

    m_creative_and_landing_page_review_status_isSet = false;
    m_creative_and_landing_page_review_status_isValid = false;

    m_exchange_review_statuses_isSet = false;
    m_exchange_review_statuses_isValid = false;

    m_publisher_review_statuses_isSet = false;
    m_publisher_review_statuses_isValid = false;
}

void OAIReviewStatusInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReviewStatusInfo::fromJsonObject(QJsonObject json) {

    m_approval_status_isValid = ::OpenAPI::fromJsonValue(m_approval_status, json[QString("approvalStatus")]);
    m_approval_status_isSet = !json[QString("approvalStatus")].isNull() && m_approval_status_isValid;

    m_content_and_policy_review_status_isValid = ::OpenAPI::fromJsonValue(m_content_and_policy_review_status, json[QString("contentAndPolicyReviewStatus")]);
    m_content_and_policy_review_status_isSet = !json[QString("contentAndPolicyReviewStatus")].isNull() && m_content_and_policy_review_status_isValid;

    m_creative_and_landing_page_review_status_isValid = ::OpenAPI::fromJsonValue(m_creative_and_landing_page_review_status, json[QString("creativeAndLandingPageReviewStatus")]);
    m_creative_and_landing_page_review_status_isSet = !json[QString("creativeAndLandingPageReviewStatus")].isNull() && m_creative_and_landing_page_review_status_isValid;

    m_exchange_review_statuses_isValid = ::OpenAPI::fromJsonValue(m_exchange_review_statuses, json[QString("exchangeReviewStatuses")]);
    m_exchange_review_statuses_isSet = !json[QString("exchangeReviewStatuses")].isNull() && m_exchange_review_statuses_isValid;

    m_publisher_review_statuses_isValid = ::OpenAPI::fromJsonValue(m_publisher_review_statuses, json[QString("publisherReviewStatuses")]);
    m_publisher_review_statuses_isSet = !json[QString("publisherReviewStatuses")].isNull() && m_publisher_review_statuses_isValid;
}

QString OAIReviewStatusInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReviewStatusInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_approval_status_isSet) {
        obj.insert(QString("approvalStatus"), ::OpenAPI::toJsonValue(m_approval_status));
    }
    if (m_content_and_policy_review_status_isSet) {
        obj.insert(QString("contentAndPolicyReviewStatus"), ::OpenAPI::toJsonValue(m_content_and_policy_review_status));
    }
    if (m_creative_and_landing_page_review_status_isSet) {
        obj.insert(QString("creativeAndLandingPageReviewStatus"), ::OpenAPI::toJsonValue(m_creative_and_landing_page_review_status));
    }
    if (m_exchange_review_statuses.size() > 0) {
        obj.insert(QString("exchangeReviewStatuses"), ::OpenAPI::toJsonValue(m_exchange_review_statuses));
    }
    if (m_publisher_review_statuses.size() > 0) {
        obj.insert(QString("publisherReviewStatuses"), ::OpenAPI::toJsonValue(m_publisher_review_statuses));
    }
    return obj;
}

QString OAIReviewStatusInfo::getApprovalStatus() const {
    return m_approval_status;
}
void OAIReviewStatusInfo::setApprovalStatus(const QString &approval_status) {
    m_approval_status = approval_status;
    m_approval_status_isSet = true;
}

bool OAIReviewStatusInfo::is_approval_status_Set() const{
    return m_approval_status_isSet;
}

bool OAIReviewStatusInfo::is_approval_status_Valid() const{
    return m_approval_status_isValid;
}

QString OAIReviewStatusInfo::getContentAndPolicyReviewStatus() const {
    return m_content_and_policy_review_status;
}
void OAIReviewStatusInfo::setContentAndPolicyReviewStatus(const QString &content_and_policy_review_status) {
    m_content_and_policy_review_status = content_and_policy_review_status;
    m_content_and_policy_review_status_isSet = true;
}

bool OAIReviewStatusInfo::is_content_and_policy_review_status_Set() const{
    return m_content_and_policy_review_status_isSet;
}

bool OAIReviewStatusInfo::is_content_and_policy_review_status_Valid() const{
    return m_content_and_policy_review_status_isValid;
}

QString OAIReviewStatusInfo::getCreativeAndLandingPageReviewStatus() const {
    return m_creative_and_landing_page_review_status;
}
void OAIReviewStatusInfo::setCreativeAndLandingPageReviewStatus(const QString &creative_and_landing_page_review_status) {
    m_creative_and_landing_page_review_status = creative_and_landing_page_review_status;
    m_creative_and_landing_page_review_status_isSet = true;
}

bool OAIReviewStatusInfo::is_creative_and_landing_page_review_status_Set() const{
    return m_creative_and_landing_page_review_status_isSet;
}

bool OAIReviewStatusInfo::is_creative_and_landing_page_review_status_Valid() const{
    return m_creative_and_landing_page_review_status_isValid;
}

QList<OAIExchangeReviewStatus> OAIReviewStatusInfo::getExchangeReviewStatuses() const {
    return m_exchange_review_statuses;
}
void OAIReviewStatusInfo::setExchangeReviewStatuses(const QList<OAIExchangeReviewStatus> &exchange_review_statuses) {
    m_exchange_review_statuses = exchange_review_statuses;
    m_exchange_review_statuses_isSet = true;
}

bool OAIReviewStatusInfo::is_exchange_review_statuses_Set() const{
    return m_exchange_review_statuses_isSet;
}

bool OAIReviewStatusInfo::is_exchange_review_statuses_Valid() const{
    return m_exchange_review_statuses_isValid;
}

QList<OAIPublisherReviewStatus> OAIReviewStatusInfo::getPublisherReviewStatuses() const {
    return m_publisher_review_statuses;
}
void OAIReviewStatusInfo::setPublisherReviewStatuses(const QList<OAIPublisherReviewStatus> &publisher_review_statuses) {
    m_publisher_review_statuses = publisher_review_statuses;
    m_publisher_review_statuses_isSet = true;
}

bool OAIReviewStatusInfo::is_publisher_review_statuses_Set() const{
    return m_publisher_review_statuses_isSet;
}

bool OAIReviewStatusInfo::is_publisher_review_statuses_Valid() const{
    return m_publisher_review_statuses_isValid;
}

bool OAIReviewStatusInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approval_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_and_policy_review_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_and_landing_page_review_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_review_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_review_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReviewStatusInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
