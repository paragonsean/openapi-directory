/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirstAndThirdPartyAudience.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirstAndThirdPartyAudience::OAIFirstAndThirdPartyAudience(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirstAndThirdPartyAudience::OAIFirstAndThirdPartyAudience() {
    this->initializeModel();
}

OAIFirstAndThirdPartyAudience::~OAIFirstAndThirdPartyAudience() {}

void OAIFirstAndThirdPartyAudience::initializeModel() {

    m_active_display_audience_size_isSet = false;
    m_active_display_audience_size_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_audience_source_isSet = false;
    m_audience_source_isValid = false;

    m_audience_type_isSet = false;
    m_audience_type_isValid = false;

    m_contact_info_list_isSet = false;
    m_contact_info_list_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_audience_size_isSet = false;
    m_display_audience_size_isValid = false;

    m_display_desktop_audience_size_isSet = false;
    m_display_desktop_audience_size_isValid = false;

    m_display_mobile_app_audience_size_isSet = false;
    m_display_mobile_app_audience_size_isValid = false;

    m_display_mobile_web_audience_size_isSet = false;
    m_display_mobile_web_audience_size_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_first_and_third_party_audience_id_isSet = false;
    m_first_and_third_party_audience_id_isValid = false;

    m_first_and_third_party_audience_type_isSet = false;
    m_first_and_third_party_audience_type_isValid = false;

    m_gmail_audience_size_isSet = false;
    m_gmail_audience_size_isValid = false;

    m_membership_duration_days_isSet = false;
    m_membership_duration_days_isValid = false;

    m_mobile_device_id_list_isSet = false;
    m_mobile_device_id_list_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_youtube_audience_size_isSet = false;
    m_youtube_audience_size_isValid = false;
}

void OAIFirstAndThirdPartyAudience::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirstAndThirdPartyAudience::fromJsonObject(QJsonObject json) {

    m_active_display_audience_size_isValid = ::OpenAPI::fromJsonValue(m_active_display_audience_size, json[QString("activeDisplayAudienceSize")]);
    m_active_display_audience_size_isSet = !json[QString("activeDisplayAudienceSize")].isNull() && m_active_display_audience_size_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_audience_source_isValid = ::OpenAPI::fromJsonValue(m_audience_source, json[QString("audienceSource")]);
    m_audience_source_isSet = !json[QString("audienceSource")].isNull() && m_audience_source_isValid;

    m_audience_type_isValid = ::OpenAPI::fromJsonValue(m_audience_type, json[QString("audienceType")]);
    m_audience_type_isSet = !json[QString("audienceType")].isNull() && m_audience_type_isValid;

    m_contact_info_list_isValid = ::OpenAPI::fromJsonValue(m_contact_info_list, json[QString("contactInfoList")]);
    m_contact_info_list_isSet = !json[QString("contactInfoList")].isNull() && m_contact_info_list_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_audience_size_isValid = ::OpenAPI::fromJsonValue(m_display_audience_size, json[QString("displayAudienceSize")]);
    m_display_audience_size_isSet = !json[QString("displayAudienceSize")].isNull() && m_display_audience_size_isValid;

    m_display_desktop_audience_size_isValid = ::OpenAPI::fromJsonValue(m_display_desktop_audience_size, json[QString("displayDesktopAudienceSize")]);
    m_display_desktop_audience_size_isSet = !json[QString("displayDesktopAudienceSize")].isNull() && m_display_desktop_audience_size_isValid;

    m_display_mobile_app_audience_size_isValid = ::OpenAPI::fromJsonValue(m_display_mobile_app_audience_size, json[QString("displayMobileAppAudienceSize")]);
    m_display_mobile_app_audience_size_isSet = !json[QString("displayMobileAppAudienceSize")].isNull() && m_display_mobile_app_audience_size_isValid;

    m_display_mobile_web_audience_size_isValid = ::OpenAPI::fromJsonValue(m_display_mobile_web_audience_size, json[QString("displayMobileWebAudienceSize")]);
    m_display_mobile_web_audience_size_isSet = !json[QString("displayMobileWebAudienceSize")].isNull() && m_display_mobile_web_audience_size_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_first_and_third_party_audience_id_isValid = ::OpenAPI::fromJsonValue(m_first_and_third_party_audience_id, json[QString("firstAndThirdPartyAudienceId")]);
    m_first_and_third_party_audience_id_isSet = !json[QString("firstAndThirdPartyAudienceId")].isNull() && m_first_and_third_party_audience_id_isValid;

    m_first_and_third_party_audience_type_isValid = ::OpenAPI::fromJsonValue(m_first_and_third_party_audience_type, json[QString("firstAndThirdPartyAudienceType")]);
    m_first_and_third_party_audience_type_isSet = !json[QString("firstAndThirdPartyAudienceType")].isNull() && m_first_and_third_party_audience_type_isValid;

    m_gmail_audience_size_isValid = ::OpenAPI::fromJsonValue(m_gmail_audience_size, json[QString("gmailAudienceSize")]);
    m_gmail_audience_size_isSet = !json[QString("gmailAudienceSize")].isNull() && m_gmail_audience_size_isValid;

    m_membership_duration_days_isValid = ::OpenAPI::fromJsonValue(m_membership_duration_days, json[QString("membershipDurationDays")]);
    m_membership_duration_days_isSet = !json[QString("membershipDurationDays")].isNull() && m_membership_duration_days_isValid;

    m_mobile_device_id_list_isValid = ::OpenAPI::fromJsonValue(m_mobile_device_id_list, json[QString("mobileDeviceIdList")]);
    m_mobile_device_id_list_isSet = !json[QString("mobileDeviceIdList")].isNull() && m_mobile_device_id_list_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_youtube_audience_size_isValid = ::OpenAPI::fromJsonValue(m_youtube_audience_size, json[QString("youtubeAudienceSize")]);
    m_youtube_audience_size_isSet = !json[QString("youtubeAudienceSize")].isNull() && m_youtube_audience_size_isValid;
}

QString OAIFirstAndThirdPartyAudience::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirstAndThirdPartyAudience::asJsonObject() const {
    QJsonObject obj;
    if (m_active_display_audience_size_isSet) {
        obj.insert(QString("activeDisplayAudienceSize"), ::OpenAPI::toJsonValue(m_active_display_audience_size));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_audience_source_isSet) {
        obj.insert(QString("audienceSource"), ::OpenAPI::toJsonValue(m_audience_source));
    }
    if (m_audience_type_isSet) {
        obj.insert(QString("audienceType"), ::OpenAPI::toJsonValue(m_audience_type));
    }
    if (m_contact_info_list.isSet()) {
        obj.insert(QString("contactInfoList"), ::OpenAPI::toJsonValue(m_contact_info_list));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_audience_size_isSet) {
        obj.insert(QString("displayAudienceSize"), ::OpenAPI::toJsonValue(m_display_audience_size));
    }
    if (m_display_desktop_audience_size_isSet) {
        obj.insert(QString("displayDesktopAudienceSize"), ::OpenAPI::toJsonValue(m_display_desktop_audience_size));
    }
    if (m_display_mobile_app_audience_size_isSet) {
        obj.insert(QString("displayMobileAppAudienceSize"), ::OpenAPI::toJsonValue(m_display_mobile_app_audience_size));
    }
    if (m_display_mobile_web_audience_size_isSet) {
        obj.insert(QString("displayMobileWebAudienceSize"), ::OpenAPI::toJsonValue(m_display_mobile_web_audience_size));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_first_and_third_party_audience_id_isSet) {
        obj.insert(QString("firstAndThirdPartyAudienceId"), ::OpenAPI::toJsonValue(m_first_and_third_party_audience_id));
    }
    if (m_first_and_third_party_audience_type_isSet) {
        obj.insert(QString("firstAndThirdPartyAudienceType"), ::OpenAPI::toJsonValue(m_first_and_third_party_audience_type));
    }
    if (m_gmail_audience_size_isSet) {
        obj.insert(QString("gmailAudienceSize"), ::OpenAPI::toJsonValue(m_gmail_audience_size));
    }
    if (m_membership_duration_days_isSet) {
        obj.insert(QString("membershipDurationDays"), ::OpenAPI::toJsonValue(m_membership_duration_days));
    }
    if (m_mobile_device_id_list.isSet()) {
        obj.insert(QString("mobileDeviceIdList"), ::OpenAPI::toJsonValue(m_mobile_device_id_list));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_youtube_audience_size_isSet) {
        obj.insert(QString("youtubeAudienceSize"), ::OpenAPI::toJsonValue(m_youtube_audience_size));
    }
    return obj;
}

QString OAIFirstAndThirdPartyAudience::getActiveDisplayAudienceSize() const {
    return m_active_display_audience_size;
}
void OAIFirstAndThirdPartyAudience::setActiveDisplayAudienceSize(const QString &active_display_audience_size) {
    m_active_display_audience_size = active_display_audience_size;
    m_active_display_audience_size_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_active_display_audience_size_Set() const{
    return m_active_display_audience_size_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_active_display_audience_size_Valid() const{
    return m_active_display_audience_size_isValid;
}

QString OAIFirstAndThirdPartyAudience::getAppId() const {
    return m_app_id;
}
void OAIFirstAndThirdPartyAudience::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIFirstAndThirdPartyAudience::getAudienceSource() const {
    return m_audience_source;
}
void OAIFirstAndThirdPartyAudience::setAudienceSource(const QString &audience_source) {
    m_audience_source = audience_source;
    m_audience_source_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_audience_source_Set() const{
    return m_audience_source_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_audience_source_Valid() const{
    return m_audience_source_isValid;
}

QString OAIFirstAndThirdPartyAudience::getAudienceType() const {
    return m_audience_type;
}
void OAIFirstAndThirdPartyAudience::setAudienceType(const QString &audience_type) {
    m_audience_type = audience_type;
    m_audience_type_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_audience_type_Set() const{
    return m_audience_type_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_audience_type_Valid() const{
    return m_audience_type_isValid;
}

OAIContactInfoList OAIFirstAndThirdPartyAudience::getContactInfoList() const {
    return m_contact_info_list;
}
void OAIFirstAndThirdPartyAudience::setContactInfoList(const OAIContactInfoList &contact_info_list) {
    m_contact_info_list = contact_info_list;
    m_contact_info_list_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_contact_info_list_Set() const{
    return m_contact_info_list_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_contact_info_list_Valid() const{
    return m_contact_info_list_isValid;
}

QString OAIFirstAndThirdPartyAudience::getDescription() const {
    return m_description;
}
void OAIFirstAndThirdPartyAudience::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFirstAndThirdPartyAudience::getDisplayAudienceSize() const {
    return m_display_audience_size;
}
void OAIFirstAndThirdPartyAudience::setDisplayAudienceSize(const QString &display_audience_size) {
    m_display_audience_size = display_audience_size;
    m_display_audience_size_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_display_audience_size_Set() const{
    return m_display_audience_size_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_display_audience_size_Valid() const{
    return m_display_audience_size_isValid;
}

QString OAIFirstAndThirdPartyAudience::getDisplayDesktopAudienceSize() const {
    return m_display_desktop_audience_size;
}
void OAIFirstAndThirdPartyAudience::setDisplayDesktopAudienceSize(const QString &display_desktop_audience_size) {
    m_display_desktop_audience_size = display_desktop_audience_size;
    m_display_desktop_audience_size_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_display_desktop_audience_size_Set() const{
    return m_display_desktop_audience_size_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_display_desktop_audience_size_Valid() const{
    return m_display_desktop_audience_size_isValid;
}

QString OAIFirstAndThirdPartyAudience::getDisplayMobileAppAudienceSize() const {
    return m_display_mobile_app_audience_size;
}
void OAIFirstAndThirdPartyAudience::setDisplayMobileAppAudienceSize(const QString &display_mobile_app_audience_size) {
    m_display_mobile_app_audience_size = display_mobile_app_audience_size;
    m_display_mobile_app_audience_size_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_display_mobile_app_audience_size_Set() const{
    return m_display_mobile_app_audience_size_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_display_mobile_app_audience_size_Valid() const{
    return m_display_mobile_app_audience_size_isValid;
}

QString OAIFirstAndThirdPartyAudience::getDisplayMobileWebAudienceSize() const {
    return m_display_mobile_web_audience_size;
}
void OAIFirstAndThirdPartyAudience::setDisplayMobileWebAudienceSize(const QString &display_mobile_web_audience_size) {
    m_display_mobile_web_audience_size = display_mobile_web_audience_size;
    m_display_mobile_web_audience_size_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_display_mobile_web_audience_size_Set() const{
    return m_display_mobile_web_audience_size_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_display_mobile_web_audience_size_Valid() const{
    return m_display_mobile_web_audience_size_isValid;
}

QString OAIFirstAndThirdPartyAudience::getDisplayName() const {
    return m_display_name;
}
void OAIFirstAndThirdPartyAudience::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIFirstAndThirdPartyAudience::getFirstAndThirdPartyAudienceId() const {
    return m_first_and_third_party_audience_id;
}
void OAIFirstAndThirdPartyAudience::setFirstAndThirdPartyAudienceId(const QString &first_and_third_party_audience_id) {
    m_first_and_third_party_audience_id = first_and_third_party_audience_id;
    m_first_and_third_party_audience_id_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_first_and_third_party_audience_id_Set() const{
    return m_first_and_third_party_audience_id_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_first_and_third_party_audience_id_Valid() const{
    return m_first_and_third_party_audience_id_isValid;
}

QString OAIFirstAndThirdPartyAudience::getFirstAndThirdPartyAudienceType() const {
    return m_first_and_third_party_audience_type;
}
void OAIFirstAndThirdPartyAudience::setFirstAndThirdPartyAudienceType(const QString &first_and_third_party_audience_type) {
    m_first_and_third_party_audience_type = first_and_third_party_audience_type;
    m_first_and_third_party_audience_type_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_first_and_third_party_audience_type_Set() const{
    return m_first_and_third_party_audience_type_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_first_and_third_party_audience_type_Valid() const{
    return m_first_and_third_party_audience_type_isValid;
}

QString OAIFirstAndThirdPartyAudience::getGmailAudienceSize() const {
    return m_gmail_audience_size;
}
void OAIFirstAndThirdPartyAudience::setGmailAudienceSize(const QString &gmail_audience_size) {
    m_gmail_audience_size = gmail_audience_size;
    m_gmail_audience_size_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_gmail_audience_size_Set() const{
    return m_gmail_audience_size_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_gmail_audience_size_Valid() const{
    return m_gmail_audience_size_isValid;
}

QString OAIFirstAndThirdPartyAudience::getMembershipDurationDays() const {
    return m_membership_duration_days;
}
void OAIFirstAndThirdPartyAudience::setMembershipDurationDays(const QString &membership_duration_days) {
    m_membership_duration_days = membership_duration_days;
    m_membership_duration_days_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_membership_duration_days_Set() const{
    return m_membership_duration_days_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_membership_duration_days_Valid() const{
    return m_membership_duration_days_isValid;
}

OAIMobileDeviceIdList OAIFirstAndThirdPartyAudience::getMobileDeviceIdList() const {
    return m_mobile_device_id_list;
}
void OAIFirstAndThirdPartyAudience::setMobileDeviceIdList(const OAIMobileDeviceIdList &mobile_device_id_list) {
    m_mobile_device_id_list = mobile_device_id_list;
    m_mobile_device_id_list_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_mobile_device_id_list_Set() const{
    return m_mobile_device_id_list_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_mobile_device_id_list_Valid() const{
    return m_mobile_device_id_list_isValid;
}

QString OAIFirstAndThirdPartyAudience::getName() const {
    return m_name;
}
void OAIFirstAndThirdPartyAudience::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFirstAndThirdPartyAudience::getYoutubeAudienceSize() const {
    return m_youtube_audience_size;
}
void OAIFirstAndThirdPartyAudience::setYoutubeAudienceSize(const QString &youtube_audience_size) {
    m_youtube_audience_size = youtube_audience_size;
    m_youtube_audience_size_isSet = true;
}

bool OAIFirstAndThirdPartyAudience::is_youtube_audience_size_Set() const{
    return m_youtube_audience_size_isSet;
}

bool OAIFirstAndThirdPartyAudience::is_youtube_audience_size_Valid() const{
    return m_youtube_audience_size_isValid;
}

bool OAIFirstAndThirdPartyAudience::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_display_audience_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audience_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audience_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_info_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_audience_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_desktop_audience_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_mobile_app_audience_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_mobile_web_audience_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_and_third_party_audience_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_and_third_party_audience_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gmail_audience_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_duration_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_device_id_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_youtube_audience_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirstAndThirdPartyAudience::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
