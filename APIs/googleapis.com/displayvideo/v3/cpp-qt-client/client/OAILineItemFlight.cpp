/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineItemFlight.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineItemFlight::OAILineItemFlight(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineItemFlight::OAILineItemFlight() {
    this->initializeModel();
}

OAILineItemFlight::~OAILineItemFlight() {}

void OAILineItemFlight::initializeModel() {

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_flight_date_type_isSet = false;
    m_flight_date_type_isValid = false;
}

void OAILineItemFlight::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineItemFlight::fromJsonObject(QJsonObject json) {

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("dateRange")]);
    m_date_range_isSet = !json[QString("dateRange")].isNull() && m_date_range_isValid;

    m_flight_date_type_isValid = ::OpenAPI::fromJsonValue(m_flight_date_type, json[QString("flightDateType")]);
    m_flight_date_type_isSet = !json[QString("flightDateType")].isNull() && m_flight_date_type_isValid;
}

QString OAILineItemFlight::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineItemFlight::asJsonObject() const {
    QJsonObject obj;
    if (m_date_range.isSet()) {
        obj.insert(QString("dateRange"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_flight_date_type_isSet) {
        obj.insert(QString("flightDateType"), ::OpenAPI::toJsonValue(m_flight_date_type));
    }
    return obj;
}

OAIDateRange OAILineItemFlight::getDateRange() const {
    return m_date_range;
}
void OAILineItemFlight::setDateRange(const OAIDateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAILineItemFlight::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAILineItemFlight::is_date_range_Valid() const{
    return m_date_range_isValid;
}

QString OAILineItemFlight::getFlightDateType() const {
    return m_flight_date_type;
}
void OAILineItemFlight::setFlightDateType(const QString &flight_date_type) {
    m_flight_date_type = flight_date_type;
    m_flight_date_type_isSet = true;
}

bool OAILineItemFlight::is_flight_date_type_Set() const{
    return m_flight_date_type_isSet;
}

bool OAILineItemFlight::is_flight_date_type_Valid() const{
    return m_flight_date_type_isValid;
}

bool OAILineItemFlight::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_date_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineItemFlight::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
