/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICampaign.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICampaign::OAICampaign(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICampaign::OAICampaign() {
    this->initializeModel();
}

OAICampaign::~OAICampaign() {}

void OAICampaign::initializeModel() {

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_campaign_budgets_isSet = false;
    m_campaign_budgets_isValid = false;

    m_campaign_flight_isSet = false;
    m_campaign_flight_isValid = false;

    m_campaign_goal_isSet = false;
    m_campaign_goal_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_entity_status_isSet = false;
    m_entity_status_isValid = false;

    m_frequency_cap_isSet = false;
    m_frequency_cap_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAICampaign::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICampaign::fromJsonObject(QJsonObject json) {

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_campaign_budgets_isValid = ::OpenAPI::fromJsonValue(m_campaign_budgets, json[QString("campaignBudgets")]);
    m_campaign_budgets_isSet = !json[QString("campaignBudgets")].isNull() && m_campaign_budgets_isValid;

    m_campaign_flight_isValid = ::OpenAPI::fromJsonValue(m_campaign_flight, json[QString("campaignFlight")]);
    m_campaign_flight_isSet = !json[QString("campaignFlight")].isNull() && m_campaign_flight_isValid;

    m_campaign_goal_isValid = ::OpenAPI::fromJsonValue(m_campaign_goal, json[QString("campaignGoal")]);
    m_campaign_goal_isSet = !json[QString("campaignGoal")].isNull() && m_campaign_goal_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaignId")]);
    m_campaign_id_isSet = !json[QString("campaignId")].isNull() && m_campaign_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_entity_status_isValid = ::OpenAPI::fromJsonValue(m_entity_status, json[QString("entityStatus")]);
    m_entity_status_isSet = !json[QString("entityStatus")].isNull() && m_entity_status_isValid;

    m_frequency_cap_isValid = ::OpenAPI::fromJsonValue(m_frequency_cap, json[QString("frequencyCap")]);
    m_frequency_cap_isSet = !json[QString("frequencyCap")].isNull() && m_frequency_cap_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAICampaign::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICampaign::asJsonObject() const {
    QJsonObject obj;
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_campaign_budgets.size() > 0) {
        obj.insert(QString("campaignBudgets"), ::OpenAPI::toJsonValue(m_campaign_budgets));
    }
    if (m_campaign_flight.isSet()) {
        obj.insert(QString("campaignFlight"), ::OpenAPI::toJsonValue(m_campaign_flight));
    }
    if (m_campaign_goal.isSet()) {
        obj.insert(QString("campaignGoal"), ::OpenAPI::toJsonValue(m_campaign_goal));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_entity_status_isSet) {
        obj.insert(QString("entityStatus"), ::OpenAPI::toJsonValue(m_entity_status));
    }
    if (m_frequency_cap.isSet()) {
        obj.insert(QString("frequencyCap"), ::OpenAPI::toJsonValue(m_frequency_cap));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAICampaign::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAICampaign::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAICampaign::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAICampaign::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

QList<OAICampaignBudget> OAICampaign::getCampaignBudgets() const {
    return m_campaign_budgets;
}
void OAICampaign::setCampaignBudgets(const QList<OAICampaignBudget> &campaign_budgets) {
    m_campaign_budgets = campaign_budgets;
    m_campaign_budgets_isSet = true;
}

bool OAICampaign::is_campaign_budgets_Set() const{
    return m_campaign_budgets_isSet;
}

bool OAICampaign::is_campaign_budgets_Valid() const{
    return m_campaign_budgets_isValid;
}

OAICampaignFlight OAICampaign::getCampaignFlight() const {
    return m_campaign_flight;
}
void OAICampaign::setCampaignFlight(const OAICampaignFlight &campaign_flight) {
    m_campaign_flight = campaign_flight;
    m_campaign_flight_isSet = true;
}

bool OAICampaign::is_campaign_flight_Set() const{
    return m_campaign_flight_isSet;
}

bool OAICampaign::is_campaign_flight_Valid() const{
    return m_campaign_flight_isValid;
}

OAICampaignGoal OAICampaign::getCampaignGoal() const {
    return m_campaign_goal;
}
void OAICampaign::setCampaignGoal(const OAICampaignGoal &campaign_goal) {
    m_campaign_goal = campaign_goal;
    m_campaign_goal_isSet = true;
}

bool OAICampaign::is_campaign_goal_Set() const{
    return m_campaign_goal_isSet;
}

bool OAICampaign::is_campaign_goal_Valid() const{
    return m_campaign_goal_isValid;
}

QString OAICampaign::getCampaignId() const {
    return m_campaign_id;
}
void OAICampaign::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAICampaign::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAICampaign::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

QString OAICampaign::getDisplayName() const {
    return m_display_name;
}
void OAICampaign::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICampaign::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICampaign::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICampaign::getEntityStatus() const {
    return m_entity_status;
}
void OAICampaign::setEntityStatus(const QString &entity_status) {
    m_entity_status = entity_status;
    m_entity_status_isSet = true;
}

bool OAICampaign::is_entity_status_Set() const{
    return m_entity_status_isSet;
}

bool OAICampaign::is_entity_status_Valid() const{
    return m_entity_status_isValid;
}

OAIFrequencyCap OAICampaign::getFrequencyCap() const {
    return m_frequency_cap;
}
void OAICampaign::setFrequencyCap(const OAIFrequencyCap &frequency_cap) {
    m_frequency_cap = frequency_cap;
    m_frequency_cap_isSet = true;
}

bool OAICampaign::is_frequency_cap_Set() const{
    return m_frequency_cap_isSet;
}

bool OAICampaign::is_frequency_cap_Valid() const{
    return m_frequency_cap_isValid;
}

QString OAICampaign::getName() const {
    return m_name;
}
void OAICampaign::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICampaign::is_name_Set() const{
    return m_name_isSet;
}

bool OAICampaign::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICampaign::getUpdateTime() const {
    return m_update_time;
}
void OAICampaign::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICampaign::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICampaign::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAICampaign::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_budgets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_flight.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_goal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_cap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICampaign::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
