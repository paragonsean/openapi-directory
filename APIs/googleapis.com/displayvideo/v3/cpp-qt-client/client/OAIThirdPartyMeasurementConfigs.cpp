/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThirdPartyMeasurementConfigs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThirdPartyMeasurementConfigs::OAIThirdPartyMeasurementConfigs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThirdPartyMeasurementConfigs::OAIThirdPartyMeasurementConfigs() {
    this->initializeModel();
}

OAIThirdPartyMeasurementConfigs::~OAIThirdPartyMeasurementConfigs() {}

void OAIThirdPartyMeasurementConfigs::initializeModel() {

    m_brand_lift_vendor_configs_isSet = false;
    m_brand_lift_vendor_configs_isValid = false;

    m_brand_safety_vendor_configs_isSet = false;
    m_brand_safety_vendor_configs_isValid = false;

    m_reach_vendor_configs_isSet = false;
    m_reach_vendor_configs_isValid = false;

    m_viewability_vendor_configs_isSet = false;
    m_viewability_vendor_configs_isValid = false;
}

void OAIThirdPartyMeasurementConfigs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThirdPartyMeasurementConfigs::fromJsonObject(QJsonObject json) {

    m_brand_lift_vendor_configs_isValid = ::OpenAPI::fromJsonValue(m_brand_lift_vendor_configs, json[QString("brandLiftVendorConfigs")]);
    m_brand_lift_vendor_configs_isSet = !json[QString("brandLiftVendorConfigs")].isNull() && m_brand_lift_vendor_configs_isValid;

    m_brand_safety_vendor_configs_isValid = ::OpenAPI::fromJsonValue(m_brand_safety_vendor_configs, json[QString("brandSafetyVendorConfigs")]);
    m_brand_safety_vendor_configs_isSet = !json[QString("brandSafetyVendorConfigs")].isNull() && m_brand_safety_vendor_configs_isValid;

    m_reach_vendor_configs_isValid = ::OpenAPI::fromJsonValue(m_reach_vendor_configs, json[QString("reachVendorConfigs")]);
    m_reach_vendor_configs_isSet = !json[QString("reachVendorConfigs")].isNull() && m_reach_vendor_configs_isValid;

    m_viewability_vendor_configs_isValid = ::OpenAPI::fromJsonValue(m_viewability_vendor_configs, json[QString("viewabilityVendorConfigs")]);
    m_viewability_vendor_configs_isSet = !json[QString("viewabilityVendorConfigs")].isNull() && m_viewability_vendor_configs_isValid;
}

QString OAIThirdPartyMeasurementConfigs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThirdPartyMeasurementConfigs::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_lift_vendor_configs.size() > 0) {
        obj.insert(QString("brandLiftVendorConfigs"), ::OpenAPI::toJsonValue(m_brand_lift_vendor_configs));
    }
    if (m_brand_safety_vendor_configs.size() > 0) {
        obj.insert(QString("brandSafetyVendorConfigs"), ::OpenAPI::toJsonValue(m_brand_safety_vendor_configs));
    }
    if (m_reach_vendor_configs.size() > 0) {
        obj.insert(QString("reachVendorConfigs"), ::OpenAPI::toJsonValue(m_reach_vendor_configs));
    }
    if (m_viewability_vendor_configs.size() > 0) {
        obj.insert(QString("viewabilityVendorConfigs"), ::OpenAPI::toJsonValue(m_viewability_vendor_configs));
    }
    return obj;
}

QList<OAIThirdPartyVendorConfig> OAIThirdPartyMeasurementConfigs::getBrandLiftVendorConfigs() const {
    return m_brand_lift_vendor_configs;
}
void OAIThirdPartyMeasurementConfigs::setBrandLiftVendorConfigs(const QList<OAIThirdPartyVendorConfig> &brand_lift_vendor_configs) {
    m_brand_lift_vendor_configs = brand_lift_vendor_configs;
    m_brand_lift_vendor_configs_isSet = true;
}

bool OAIThirdPartyMeasurementConfigs::is_brand_lift_vendor_configs_Set() const{
    return m_brand_lift_vendor_configs_isSet;
}

bool OAIThirdPartyMeasurementConfigs::is_brand_lift_vendor_configs_Valid() const{
    return m_brand_lift_vendor_configs_isValid;
}

QList<OAIThirdPartyVendorConfig> OAIThirdPartyMeasurementConfigs::getBrandSafetyVendorConfigs() const {
    return m_brand_safety_vendor_configs;
}
void OAIThirdPartyMeasurementConfigs::setBrandSafetyVendorConfigs(const QList<OAIThirdPartyVendorConfig> &brand_safety_vendor_configs) {
    m_brand_safety_vendor_configs = brand_safety_vendor_configs;
    m_brand_safety_vendor_configs_isSet = true;
}

bool OAIThirdPartyMeasurementConfigs::is_brand_safety_vendor_configs_Set() const{
    return m_brand_safety_vendor_configs_isSet;
}

bool OAIThirdPartyMeasurementConfigs::is_brand_safety_vendor_configs_Valid() const{
    return m_brand_safety_vendor_configs_isValid;
}

QList<OAIThirdPartyVendorConfig> OAIThirdPartyMeasurementConfigs::getReachVendorConfigs() const {
    return m_reach_vendor_configs;
}
void OAIThirdPartyMeasurementConfigs::setReachVendorConfigs(const QList<OAIThirdPartyVendorConfig> &reach_vendor_configs) {
    m_reach_vendor_configs = reach_vendor_configs;
    m_reach_vendor_configs_isSet = true;
}

bool OAIThirdPartyMeasurementConfigs::is_reach_vendor_configs_Set() const{
    return m_reach_vendor_configs_isSet;
}

bool OAIThirdPartyMeasurementConfigs::is_reach_vendor_configs_Valid() const{
    return m_reach_vendor_configs_isValid;
}

QList<OAIThirdPartyVendorConfig> OAIThirdPartyMeasurementConfigs::getViewabilityVendorConfigs() const {
    return m_viewability_vendor_configs;
}
void OAIThirdPartyMeasurementConfigs::setViewabilityVendorConfigs(const QList<OAIThirdPartyVendorConfig> &viewability_vendor_configs) {
    m_viewability_vendor_configs = viewability_vendor_configs;
    m_viewability_vendor_configs_isSet = true;
}

bool OAIThirdPartyMeasurementConfigs::is_viewability_vendor_configs_Set() const{
    return m_viewability_vendor_configs_isSet;
}

bool OAIThirdPartyMeasurementConfigs::is_viewability_vendor_configs_Valid() const{
    return m_viewability_vendor_configs_isValid;
}

bool OAIThirdPartyMeasurementConfigs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_lift_vendor_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_safety_vendor_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reach_vendor_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewability_vendor_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThirdPartyMeasurementConfigs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
