/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchTargetingOptionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchTargetingOptionsRequest::OAISearchTargetingOptionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchTargetingOptionsRequest::OAISearchTargetingOptionsRequest() {
    this->initializeModel();
}

OAISearchTargetingOptionsRequest::~OAISearchTargetingOptionsRequest() {}

void OAISearchTargetingOptionsRequest::initializeModel() {

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_business_chain_search_terms_isSet = false;
    m_business_chain_search_terms_isValid = false;

    m_geo_region_search_terms_isSet = false;
    m_geo_region_search_terms_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_poi_search_terms_isSet = false;
    m_poi_search_terms_isValid = false;
}

void OAISearchTargetingOptionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchTargetingOptionsRequest::fromJsonObject(QJsonObject json) {

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_business_chain_search_terms_isValid = ::OpenAPI::fromJsonValue(m_business_chain_search_terms, json[QString("businessChainSearchTerms")]);
    m_business_chain_search_terms_isSet = !json[QString("businessChainSearchTerms")].isNull() && m_business_chain_search_terms_isValid;

    m_geo_region_search_terms_isValid = ::OpenAPI::fromJsonValue(m_geo_region_search_terms, json[QString("geoRegionSearchTerms")]);
    m_geo_region_search_terms_isSet = !json[QString("geoRegionSearchTerms")].isNull() && m_geo_region_search_terms_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_poi_search_terms_isValid = ::OpenAPI::fromJsonValue(m_poi_search_terms, json[QString("poiSearchTerms")]);
    m_poi_search_terms_isSet = !json[QString("poiSearchTerms")].isNull() && m_poi_search_terms_isValid;
}

QString OAISearchTargetingOptionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchTargetingOptionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_business_chain_search_terms.isSet()) {
        obj.insert(QString("businessChainSearchTerms"), ::OpenAPI::toJsonValue(m_business_chain_search_terms));
    }
    if (m_geo_region_search_terms.isSet()) {
        obj.insert(QString("geoRegionSearchTerms"), ::OpenAPI::toJsonValue(m_geo_region_search_terms));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_poi_search_terms.isSet()) {
        obj.insert(QString("poiSearchTerms"), ::OpenAPI::toJsonValue(m_poi_search_terms));
    }
    return obj;
}

QString OAISearchTargetingOptionsRequest::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAISearchTargetingOptionsRequest::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAISearchTargetingOptionsRequest::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAISearchTargetingOptionsRequest::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

OAIBusinessChainSearchTerms OAISearchTargetingOptionsRequest::getBusinessChainSearchTerms() const {
    return m_business_chain_search_terms;
}
void OAISearchTargetingOptionsRequest::setBusinessChainSearchTerms(const OAIBusinessChainSearchTerms &business_chain_search_terms) {
    m_business_chain_search_terms = business_chain_search_terms;
    m_business_chain_search_terms_isSet = true;
}

bool OAISearchTargetingOptionsRequest::is_business_chain_search_terms_Set() const{
    return m_business_chain_search_terms_isSet;
}

bool OAISearchTargetingOptionsRequest::is_business_chain_search_terms_Valid() const{
    return m_business_chain_search_terms_isValid;
}

OAIGeoRegionSearchTerms OAISearchTargetingOptionsRequest::getGeoRegionSearchTerms() const {
    return m_geo_region_search_terms;
}
void OAISearchTargetingOptionsRequest::setGeoRegionSearchTerms(const OAIGeoRegionSearchTerms &geo_region_search_terms) {
    m_geo_region_search_terms = geo_region_search_terms;
    m_geo_region_search_terms_isSet = true;
}

bool OAISearchTargetingOptionsRequest::is_geo_region_search_terms_Set() const{
    return m_geo_region_search_terms_isSet;
}

bool OAISearchTargetingOptionsRequest::is_geo_region_search_terms_Valid() const{
    return m_geo_region_search_terms_isValid;
}

qint32 OAISearchTargetingOptionsRequest::getPageSize() const {
    return m_page_size;
}
void OAISearchTargetingOptionsRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAISearchTargetingOptionsRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAISearchTargetingOptionsRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAISearchTargetingOptionsRequest::getPageToken() const {
    return m_page_token;
}
void OAISearchTargetingOptionsRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAISearchTargetingOptionsRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAISearchTargetingOptionsRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

OAIPoiSearchTerms OAISearchTargetingOptionsRequest::getPoiSearchTerms() const {
    return m_poi_search_terms;
}
void OAISearchTargetingOptionsRequest::setPoiSearchTerms(const OAIPoiSearchTerms &poi_search_terms) {
    m_poi_search_terms = poi_search_terms;
    m_poi_search_terms_isSet = true;
}

bool OAISearchTargetingOptionsRequest::is_poi_search_terms_Set() const{
    return m_poi_search_terms_isSet;
}

bool OAISearchTargetingOptionsRequest::is_poi_search_terms_Valid() const{
    return m_poi_search_terms_isValid;
}

bool OAISearchTargetingOptionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_chain_search_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_region_search_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poi_search_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchTargetingOptionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
