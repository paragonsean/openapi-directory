/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITranscode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITranscode::OAITranscode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITranscode::OAITranscode() {
    this->initializeModel();
}

OAITranscode::~OAITranscode() {}

void OAITranscode::initializeModel() {

    m_audio_bit_rate_kbps_isSet = false;
    m_audio_bit_rate_kbps_isValid = false;

    m_audio_sample_rate_hz_isSet = false;
    m_audio_sample_rate_hz_isValid = false;

    m_bit_rate_kbps_isSet = false;
    m_bit_rate_kbps_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_file_size_bytes_isSet = false;
    m_file_size_bytes_isValid = false;

    m_frame_rate_isSet = false;
    m_frame_rate_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_transcoded_isSet = false;
    m_transcoded_isValid = false;
}

void OAITranscode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITranscode::fromJsonObject(QJsonObject json) {

    m_audio_bit_rate_kbps_isValid = ::OpenAPI::fromJsonValue(m_audio_bit_rate_kbps, json[QString("audioBitRateKbps")]);
    m_audio_bit_rate_kbps_isSet = !json[QString("audioBitRateKbps")].isNull() && m_audio_bit_rate_kbps_isValid;

    m_audio_sample_rate_hz_isValid = ::OpenAPI::fromJsonValue(m_audio_sample_rate_hz, json[QString("audioSampleRateHz")]);
    m_audio_sample_rate_hz_isSet = !json[QString("audioSampleRateHz")].isNull() && m_audio_sample_rate_hz_isValid;

    m_bit_rate_kbps_isValid = ::OpenAPI::fromJsonValue(m_bit_rate_kbps, json[QString("bitRateKbps")]);
    m_bit_rate_kbps_isSet = !json[QString("bitRateKbps")].isNull() && m_bit_rate_kbps_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_file_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_file_size_bytes, json[QString("fileSizeBytes")]);
    m_file_size_bytes_isSet = !json[QString("fileSizeBytes")].isNull() && m_file_size_bytes_isValid;

    m_frame_rate_isValid = ::OpenAPI::fromJsonValue(m_frame_rate, json[QString("frameRate")]);
    m_frame_rate_isSet = !json[QString("frameRate")].isNull() && m_frame_rate_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_transcoded_isValid = ::OpenAPI::fromJsonValue(m_transcoded, json[QString("transcoded")]);
    m_transcoded_isSet = !json[QString("transcoded")].isNull() && m_transcoded_isValid;
}

QString OAITranscode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITranscode::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_bit_rate_kbps_isSet) {
        obj.insert(QString("audioBitRateKbps"), ::OpenAPI::toJsonValue(m_audio_bit_rate_kbps));
    }
    if (m_audio_sample_rate_hz_isSet) {
        obj.insert(QString("audioSampleRateHz"), ::OpenAPI::toJsonValue(m_audio_sample_rate_hz));
    }
    if (m_bit_rate_kbps_isSet) {
        obj.insert(QString("bitRateKbps"), ::OpenAPI::toJsonValue(m_bit_rate_kbps));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_file_size_bytes_isSet) {
        obj.insert(QString("fileSizeBytes"), ::OpenAPI::toJsonValue(m_file_size_bytes));
    }
    if (m_frame_rate_isSet) {
        obj.insert(QString("frameRate"), ::OpenAPI::toJsonValue(m_frame_rate));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_transcoded_isSet) {
        obj.insert(QString("transcoded"), ::OpenAPI::toJsonValue(m_transcoded));
    }
    return obj;
}

QString OAITranscode::getAudioBitRateKbps() const {
    return m_audio_bit_rate_kbps;
}
void OAITranscode::setAudioBitRateKbps(const QString &audio_bit_rate_kbps) {
    m_audio_bit_rate_kbps = audio_bit_rate_kbps;
    m_audio_bit_rate_kbps_isSet = true;
}

bool OAITranscode::is_audio_bit_rate_kbps_Set() const{
    return m_audio_bit_rate_kbps_isSet;
}

bool OAITranscode::is_audio_bit_rate_kbps_Valid() const{
    return m_audio_bit_rate_kbps_isValid;
}

QString OAITranscode::getAudioSampleRateHz() const {
    return m_audio_sample_rate_hz;
}
void OAITranscode::setAudioSampleRateHz(const QString &audio_sample_rate_hz) {
    m_audio_sample_rate_hz = audio_sample_rate_hz;
    m_audio_sample_rate_hz_isSet = true;
}

bool OAITranscode::is_audio_sample_rate_hz_Set() const{
    return m_audio_sample_rate_hz_isSet;
}

bool OAITranscode::is_audio_sample_rate_hz_Valid() const{
    return m_audio_sample_rate_hz_isValid;
}

QString OAITranscode::getBitRateKbps() const {
    return m_bit_rate_kbps;
}
void OAITranscode::setBitRateKbps(const QString &bit_rate_kbps) {
    m_bit_rate_kbps = bit_rate_kbps;
    m_bit_rate_kbps_isSet = true;
}

bool OAITranscode::is_bit_rate_kbps_Set() const{
    return m_bit_rate_kbps_isSet;
}

bool OAITranscode::is_bit_rate_kbps_Valid() const{
    return m_bit_rate_kbps_isValid;
}

OAIDimensions OAITranscode::getDimensions() const {
    return m_dimensions;
}
void OAITranscode::setDimensions(const OAIDimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAITranscode::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAITranscode::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAITranscode::getFileSizeBytes() const {
    return m_file_size_bytes;
}
void OAITranscode::setFileSizeBytes(const QString &file_size_bytes) {
    m_file_size_bytes = file_size_bytes;
    m_file_size_bytes_isSet = true;
}

bool OAITranscode::is_file_size_bytes_Set() const{
    return m_file_size_bytes_isSet;
}

bool OAITranscode::is_file_size_bytes_Valid() const{
    return m_file_size_bytes_isValid;
}

float OAITranscode::getFrameRate() const {
    return m_frame_rate;
}
void OAITranscode::setFrameRate(const float &frame_rate) {
    m_frame_rate = frame_rate;
    m_frame_rate_isSet = true;
}

bool OAITranscode::is_frame_rate_Set() const{
    return m_frame_rate_isSet;
}

bool OAITranscode::is_frame_rate_Valid() const{
    return m_frame_rate_isValid;
}

QString OAITranscode::getMimeType() const {
    return m_mime_type;
}
void OAITranscode::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAITranscode::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAITranscode::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAITranscode::getName() const {
    return m_name;
}
void OAITranscode::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITranscode::is_name_Set() const{
    return m_name_isSet;
}

bool OAITranscode::is_name_Valid() const{
    return m_name_isValid;
}

bool OAITranscode::isTranscoded() const {
    return m_transcoded;
}
void OAITranscode::setTranscoded(const bool &transcoded) {
    m_transcoded = transcoded;
    m_transcoded_isSet = true;
}

bool OAITranscode::is_transcoded_Set() const{
    return m_transcoded_isSet;
}

bool OAITranscode::is_transcoded_Valid() const{
    return m_transcoded_isValid;
}

bool OAITranscode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_bit_rate_kbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_sample_rate_hz_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bit_rate_kbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcoded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITranscode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
