/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductFeedData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductFeedData::OAIProductFeedData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductFeedData::OAIProductFeedData() {
    this->initializeModel();
}

OAIProductFeedData::~OAIProductFeedData() {}

void OAIProductFeedData::initializeModel() {

    m_is_feed_disabled_isSet = false;
    m_is_feed_disabled_isValid = false;

    m_product_match_dimensions_isSet = false;
    m_product_match_dimensions_isValid = false;

    m_product_match_type_isSet = false;
    m_product_match_type_isValid = false;
}

void OAIProductFeedData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductFeedData::fromJsonObject(QJsonObject json) {

    m_is_feed_disabled_isValid = ::OpenAPI::fromJsonValue(m_is_feed_disabled, json[QString("isFeedDisabled")]);
    m_is_feed_disabled_isSet = !json[QString("isFeedDisabled")].isNull() && m_is_feed_disabled_isValid;

    m_product_match_dimensions_isValid = ::OpenAPI::fromJsonValue(m_product_match_dimensions, json[QString("productMatchDimensions")]);
    m_product_match_dimensions_isSet = !json[QString("productMatchDimensions")].isNull() && m_product_match_dimensions_isValid;

    m_product_match_type_isValid = ::OpenAPI::fromJsonValue(m_product_match_type, json[QString("productMatchType")]);
    m_product_match_type_isSet = !json[QString("productMatchType")].isNull() && m_product_match_type_isValid;
}

QString OAIProductFeedData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductFeedData::asJsonObject() const {
    QJsonObject obj;
    if (m_is_feed_disabled_isSet) {
        obj.insert(QString("isFeedDisabled"), ::OpenAPI::toJsonValue(m_is_feed_disabled));
    }
    if (m_product_match_dimensions.size() > 0) {
        obj.insert(QString("productMatchDimensions"), ::OpenAPI::toJsonValue(m_product_match_dimensions));
    }
    if (m_product_match_type_isSet) {
        obj.insert(QString("productMatchType"), ::OpenAPI::toJsonValue(m_product_match_type));
    }
    return obj;
}

bool OAIProductFeedData::isIsFeedDisabled() const {
    return m_is_feed_disabled;
}
void OAIProductFeedData::setIsFeedDisabled(const bool &is_feed_disabled) {
    m_is_feed_disabled = is_feed_disabled;
    m_is_feed_disabled_isSet = true;
}

bool OAIProductFeedData::is_is_feed_disabled_Set() const{
    return m_is_feed_disabled_isSet;
}

bool OAIProductFeedData::is_is_feed_disabled_Valid() const{
    return m_is_feed_disabled_isValid;
}

QList<OAIProductMatchDimension> OAIProductFeedData::getProductMatchDimensions() const {
    return m_product_match_dimensions;
}
void OAIProductFeedData::setProductMatchDimensions(const QList<OAIProductMatchDimension> &product_match_dimensions) {
    m_product_match_dimensions = product_match_dimensions;
    m_product_match_dimensions_isSet = true;
}

bool OAIProductFeedData::is_product_match_dimensions_Set() const{
    return m_product_match_dimensions_isSet;
}

bool OAIProductFeedData::is_product_match_dimensions_Valid() const{
    return m_product_match_dimensions_isValid;
}

QString OAIProductFeedData::getProductMatchType() const {
    return m_product_match_type;
}
void OAIProductFeedData::setProductMatchType(const QString &product_match_type) {
    m_product_match_type = product_match_type;
    m_product_match_type_isSet = true;
}

bool OAIProductFeedData::is_product_match_type_Set() const{
    return m_product_match_type_isSet;
}

bool OAIProductFeedData::is_product_match_type_Valid() const{
    return m_product_match_type_isValid;
}

bool OAIProductFeedData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_feed_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_match_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_match_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductFeedData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
