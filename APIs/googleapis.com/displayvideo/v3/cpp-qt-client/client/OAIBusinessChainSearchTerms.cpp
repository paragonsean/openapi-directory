/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBusinessChainSearchTerms.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBusinessChainSearchTerms::OAIBusinessChainSearchTerms(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBusinessChainSearchTerms::OAIBusinessChainSearchTerms() {
    this->initializeModel();
}

OAIBusinessChainSearchTerms::~OAIBusinessChainSearchTerms() {}

void OAIBusinessChainSearchTerms::initializeModel() {

    m_business_chain_query_isSet = false;
    m_business_chain_query_isValid = false;

    m_region_query_isSet = false;
    m_region_query_isValid = false;
}

void OAIBusinessChainSearchTerms::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBusinessChainSearchTerms::fromJsonObject(QJsonObject json) {

    m_business_chain_query_isValid = ::OpenAPI::fromJsonValue(m_business_chain_query, json[QString("businessChainQuery")]);
    m_business_chain_query_isSet = !json[QString("businessChainQuery")].isNull() && m_business_chain_query_isValid;

    m_region_query_isValid = ::OpenAPI::fromJsonValue(m_region_query, json[QString("regionQuery")]);
    m_region_query_isSet = !json[QString("regionQuery")].isNull() && m_region_query_isValid;
}

QString OAIBusinessChainSearchTerms::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBusinessChainSearchTerms::asJsonObject() const {
    QJsonObject obj;
    if (m_business_chain_query_isSet) {
        obj.insert(QString("businessChainQuery"), ::OpenAPI::toJsonValue(m_business_chain_query));
    }
    if (m_region_query_isSet) {
        obj.insert(QString("regionQuery"), ::OpenAPI::toJsonValue(m_region_query));
    }
    return obj;
}

QString OAIBusinessChainSearchTerms::getBusinessChainQuery() const {
    return m_business_chain_query;
}
void OAIBusinessChainSearchTerms::setBusinessChainQuery(const QString &business_chain_query) {
    m_business_chain_query = business_chain_query;
    m_business_chain_query_isSet = true;
}

bool OAIBusinessChainSearchTerms::is_business_chain_query_Set() const{
    return m_business_chain_query_isSet;
}

bool OAIBusinessChainSearchTerms::is_business_chain_query_Valid() const{
    return m_business_chain_query_isValid;
}

QString OAIBusinessChainSearchTerms::getRegionQuery() const {
    return m_region_query;
}
void OAIBusinessChainSearchTerms::setRegionQuery(const QString &region_query) {
    m_region_query = region_query;
    m_region_query_isSet = true;
}

bool OAIBusinessChainSearchTerms::is_region_query_Set() const{
    return m_region_query_isSet;
}

bool OAIBusinessChainSearchTerms::is_region_query_Valid() const{
    return m_region_query_isValid;
}

bool OAIBusinessChainSearchTerms::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_chain_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBusinessChainSearchTerms::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
