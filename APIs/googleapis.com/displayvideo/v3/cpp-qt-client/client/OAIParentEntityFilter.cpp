/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParentEntityFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParentEntityFilter::OAIParentEntityFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParentEntityFilter::OAIParentEntityFilter() {
    this->initializeModel();
}

OAIParentEntityFilter::~OAIParentEntityFilter() {}

void OAIParentEntityFilter::initializeModel() {

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_filter_ids_isSet = false;
    m_filter_ids_isValid = false;

    m_filter_type_isSet = false;
    m_filter_type_isValid = false;
}

void OAIParentEntityFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParentEntityFilter::fromJsonObject(QJsonObject json) {

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("fileType")]);
    m_file_type_isSet = !json[QString("fileType")].isNull() && m_file_type_isValid;

    m_filter_ids_isValid = ::OpenAPI::fromJsonValue(m_filter_ids, json[QString("filterIds")]);
    m_filter_ids_isSet = !json[QString("filterIds")].isNull() && m_filter_ids_isValid;

    m_filter_type_isValid = ::OpenAPI::fromJsonValue(m_filter_type, json[QString("filterType")]);
    m_filter_type_isSet = !json[QString("filterType")].isNull() && m_filter_type_isValid;
}

QString OAIParentEntityFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParentEntityFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_file_type.size() > 0) {
        obj.insert(QString("fileType"), ::OpenAPI::toJsonValue(m_file_type));
    }
    if (m_filter_ids.size() > 0) {
        obj.insert(QString("filterIds"), ::OpenAPI::toJsonValue(m_filter_ids));
    }
    if (m_filter_type_isSet) {
        obj.insert(QString("filterType"), ::OpenAPI::toJsonValue(m_filter_type));
    }
    return obj;
}

QList<QString> OAIParentEntityFilter::getFileType() const {
    return m_file_type;
}
void OAIParentEntityFilter::setFileType(const QList<QString> &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAIParentEntityFilter::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAIParentEntityFilter::is_file_type_Valid() const{
    return m_file_type_isValid;
}

QList<QString> OAIParentEntityFilter::getFilterIds() const {
    return m_filter_ids;
}
void OAIParentEntityFilter::setFilterIds(const QList<QString> &filter_ids) {
    m_filter_ids = filter_ids;
    m_filter_ids_isSet = true;
}

bool OAIParentEntityFilter::is_filter_ids_Set() const{
    return m_filter_ids_isSet;
}

bool OAIParentEntityFilter::is_filter_ids_Valid() const{
    return m_filter_ids_isValid;
}

QString OAIParentEntityFilter::getFilterType() const {
    return m_filter_type;
}
void OAIParentEntityFilter::setFilterType(const QString &filter_type) {
    m_filter_type = filter_type;
    m_filter_type_isSet = true;
}

bool OAIParentEntityFilter::is_filter_type_Set() const{
    return m_filter_type_isSet;
}

bool OAIParentEntityFilter::is_filter_type_Valid() const{
    return m_filter_type_isValid;
}

bool OAIParentEntityFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParentEntityFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
