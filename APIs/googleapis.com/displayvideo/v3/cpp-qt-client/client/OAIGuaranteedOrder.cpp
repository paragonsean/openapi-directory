/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGuaranteedOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGuaranteedOrder::OAIGuaranteedOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGuaranteedOrder::OAIGuaranteedOrder() {
    this->initializeModel();
}

OAIGuaranteedOrder::~OAIGuaranteedOrder() {}

void OAIGuaranteedOrder::initializeModel() {

    m_default_advertiser_id_isSet = false;
    m_default_advertiser_id_isValid = false;

    m_default_campaign_id_isSet = false;
    m_default_campaign_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_exchange_isSet = false;
    m_exchange_isValid = false;

    m_guaranteed_order_id_isSet = false;
    m_guaranteed_order_id_isValid = false;

    m_legacy_guaranteed_order_id_isSet = false;
    m_legacy_guaranteed_order_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_publisher_name_isSet = false;
    m_publisher_name_isValid = false;

    m_read_access_inherited_isSet = false;
    m_read_access_inherited_isValid = false;

    m_read_advertiser_ids_isSet = false;
    m_read_advertiser_ids_isValid = false;

    m_read_write_advertiser_id_isSet = false;
    m_read_write_advertiser_id_isValid = false;

    m_read_write_partner_id_isSet = false;
    m_read_write_partner_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGuaranteedOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGuaranteedOrder::fromJsonObject(QJsonObject json) {

    m_default_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_default_advertiser_id, json[QString("defaultAdvertiserId")]);
    m_default_advertiser_id_isSet = !json[QString("defaultAdvertiserId")].isNull() && m_default_advertiser_id_isValid;

    m_default_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_default_campaign_id, json[QString("defaultCampaignId")]);
    m_default_campaign_id_isSet = !json[QString("defaultCampaignId")].isNull() && m_default_campaign_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_exchange_isValid = ::OpenAPI::fromJsonValue(m_exchange, json[QString("exchange")]);
    m_exchange_isSet = !json[QString("exchange")].isNull() && m_exchange_isValid;

    m_guaranteed_order_id_isValid = ::OpenAPI::fromJsonValue(m_guaranteed_order_id, json[QString("guaranteedOrderId")]);
    m_guaranteed_order_id_isSet = !json[QString("guaranteedOrderId")].isNull() && m_guaranteed_order_id_isValid;

    m_legacy_guaranteed_order_id_isValid = ::OpenAPI::fromJsonValue(m_legacy_guaranteed_order_id, json[QString("legacyGuaranteedOrderId")]);
    m_legacy_guaranteed_order_id_isSet = !json[QString("legacyGuaranteedOrderId")].isNull() && m_legacy_guaranteed_order_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_publisher_name_isValid = ::OpenAPI::fromJsonValue(m_publisher_name, json[QString("publisherName")]);
    m_publisher_name_isSet = !json[QString("publisherName")].isNull() && m_publisher_name_isValid;

    m_read_access_inherited_isValid = ::OpenAPI::fromJsonValue(m_read_access_inherited, json[QString("readAccessInherited")]);
    m_read_access_inherited_isSet = !json[QString("readAccessInherited")].isNull() && m_read_access_inherited_isValid;

    m_read_advertiser_ids_isValid = ::OpenAPI::fromJsonValue(m_read_advertiser_ids, json[QString("readAdvertiserIds")]);
    m_read_advertiser_ids_isSet = !json[QString("readAdvertiserIds")].isNull() && m_read_advertiser_ids_isValid;

    m_read_write_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_read_write_advertiser_id, json[QString("readWriteAdvertiserId")]);
    m_read_write_advertiser_id_isSet = !json[QString("readWriteAdvertiserId")].isNull() && m_read_write_advertiser_id_isValid;

    m_read_write_partner_id_isValid = ::OpenAPI::fromJsonValue(m_read_write_partner_id, json[QString("readWritePartnerId")]);
    m_read_write_partner_id_isSet = !json[QString("readWritePartnerId")].isNull() && m_read_write_partner_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGuaranteedOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGuaranteedOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_default_advertiser_id_isSet) {
        obj.insert(QString("defaultAdvertiserId"), ::OpenAPI::toJsonValue(m_default_advertiser_id));
    }
    if (m_default_campaign_id_isSet) {
        obj.insert(QString("defaultCampaignId"), ::OpenAPI::toJsonValue(m_default_campaign_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_exchange_isSet) {
        obj.insert(QString("exchange"), ::OpenAPI::toJsonValue(m_exchange));
    }
    if (m_guaranteed_order_id_isSet) {
        obj.insert(QString("guaranteedOrderId"), ::OpenAPI::toJsonValue(m_guaranteed_order_id));
    }
    if (m_legacy_guaranteed_order_id_isSet) {
        obj.insert(QString("legacyGuaranteedOrderId"), ::OpenAPI::toJsonValue(m_legacy_guaranteed_order_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_publisher_name_isSet) {
        obj.insert(QString("publisherName"), ::OpenAPI::toJsonValue(m_publisher_name));
    }
    if (m_read_access_inherited_isSet) {
        obj.insert(QString("readAccessInherited"), ::OpenAPI::toJsonValue(m_read_access_inherited));
    }
    if (m_read_advertiser_ids.size() > 0) {
        obj.insert(QString("readAdvertiserIds"), ::OpenAPI::toJsonValue(m_read_advertiser_ids));
    }
    if (m_read_write_advertiser_id_isSet) {
        obj.insert(QString("readWriteAdvertiserId"), ::OpenAPI::toJsonValue(m_read_write_advertiser_id));
    }
    if (m_read_write_partner_id_isSet) {
        obj.insert(QString("readWritePartnerId"), ::OpenAPI::toJsonValue(m_read_write_partner_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIGuaranteedOrder::getDefaultAdvertiserId() const {
    return m_default_advertiser_id;
}
void OAIGuaranteedOrder::setDefaultAdvertiserId(const QString &default_advertiser_id) {
    m_default_advertiser_id = default_advertiser_id;
    m_default_advertiser_id_isSet = true;
}

bool OAIGuaranteedOrder::is_default_advertiser_id_Set() const{
    return m_default_advertiser_id_isSet;
}

bool OAIGuaranteedOrder::is_default_advertiser_id_Valid() const{
    return m_default_advertiser_id_isValid;
}

QString OAIGuaranteedOrder::getDefaultCampaignId() const {
    return m_default_campaign_id;
}
void OAIGuaranteedOrder::setDefaultCampaignId(const QString &default_campaign_id) {
    m_default_campaign_id = default_campaign_id;
    m_default_campaign_id_isSet = true;
}

bool OAIGuaranteedOrder::is_default_campaign_id_Set() const{
    return m_default_campaign_id_isSet;
}

bool OAIGuaranteedOrder::is_default_campaign_id_Valid() const{
    return m_default_campaign_id_isValid;
}

QString OAIGuaranteedOrder::getDisplayName() const {
    return m_display_name;
}
void OAIGuaranteedOrder::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGuaranteedOrder::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGuaranteedOrder::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGuaranteedOrder::getExchange() const {
    return m_exchange;
}
void OAIGuaranteedOrder::setExchange(const QString &exchange) {
    m_exchange = exchange;
    m_exchange_isSet = true;
}

bool OAIGuaranteedOrder::is_exchange_Set() const{
    return m_exchange_isSet;
}

bool OAIGuaranteedOrder::is_exchange_Valid() const{
    return m_exchange_isValid;
}

QString OAIGuaranteedOrder::getGuaranteedOrderId() const {
    return m_guaranteed_order_id;
}
void OAIGuaranteedOrder::setGuaranteedOrderId(const QString &guaranteed_order_id) {
    m_guaranteed_order_id = guaranteed_order_id;
    m_guaranteed_order_id_isSet = true;
}

bool OAIGuaranteedOrder::is_guaranteed_order_id_Set() const{
    return m_guaranteed_order_id_isSet;
}

bool OAIGuaranteedOrder::is_guaranteed_order_id_Valid() const{
    return m_guaranteed_order_id_isValid;
}

QString OAIGuaranteedOrder::getLegacyGuaranteedOrderId() const {
    return m_legacy_guaranteed_order_id;
}
void OAIGuaranteedOrder::setLegacyGuaranteedOrderId(const QString &legacy_guaranteed_order_id) {
    m_legacy_guaranteed_order_id = legacy_guaranteed_order_id;
    m_legacy_guaranteed_order_id_isSet = true;
}

bool OAIGuaranteedOrder::is_legacy_guaranteed_order_id_Set() const{
    return m_legacy_guaranteed_order_id_isSet;
}

bool OAIGuaranteedOrder::is_legacy_guaranteed_order_id_Valid() const{
    return m_legacy_guaranteed_order_id_isValid;
}

QString OAIGuaranteedOrder::getName() const {
    return m_name;
}
void OAIGuaranteedOrder::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGuaranteedOrder::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGuaranteedOrder::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGuaranteedOrder::getPublisherName() const {
    return m_publisher_name;
}
void OAIGuaranteedOrder::setPublisherName(const QString &publisher_name) {
    m_publisher_name = publisher_name;
    m_publisher_name_isSet = true;
}

bool OAIGuaranteedOrder::is_publisher_name_Set() const{
    return m_publisher_name_isSet;
}

bool OAIGuaranteedOrder::is_publisher_name_Valid() const{
    return m_publisher_name_isValid;
}

bool OAIGuaranteedOrder::isReadAccessInherited() const {
    return m_read_access_inherited;
}
void OAIGuaranteedOrder::setReadAccessInherited(const bool &read_access_inherited) {
    m_read_access_inherited = read_access_inherited;
    m_read_access_inherited_isSet = true;
}

bool OAIGuaranteedOrder::is_read_access_inherited_Set() const{
    return m_read_access_inherited_isSet;
}

bool OAIGuaranteedOrder::is_read_access_inherited_Valid() const{
    return m_read_access_inherited_isValid;
}

QList<QString> OAIGuaranteedOrder::getReadAdvertiserIds() const {
    return m_read_advertiser_ids;
}
void OAIGuaranteedOrder::setReadAdvertiserIds(const QList<QString> &read_advertiser_ids) {
    m_read_advertiser_ids = read_advertiser_ids;
    m_read_advertiser_ids_isSet = true;
}

bool OAIGuaranteedOrder::is_read_advertiser_ids_Set() const{
    return m_read_advertiser_ids_isSet;
}

bool OAIGuaranteedOrder::is_read_advertiser_ids_Valid() const{
    return m_read_advertiser_ids_isValid;
}

QString OAIGuaranteedOrder::getReadWriteAdvertiserId() const {
    return m_read_write_advertiser_id;
}
void OAIGuaranteedOrder::setReadWriteAdvertiserId(const QString &read_write_advertiser_id) {
    m_read_write_advertiser_id = read_write_advertiser_id;
    m_read_write_advertiser_id_isSet = true;
}

bool OAIGuaranteedOrder::is_read_write_advertiser_id_Set() const{
    return m_read_write_advertiser_id_isSet;
}

bool OAIGuaranteedOrder::is_read_write_advertiser_id_Valid() const{
    return m_read_write_advertiser_id_isValid;
}

QString OAIGuaranteedOrder::getReadWritePartnerId() const {
    return m_read_write_partner_id;
}
void OAIGuaranteedOrder::setReadWritePartnerId(const QString &read_write_partner_id) {
    m_read_write_partner_id = read_write_partner_id;
    m_read_write_partner_id_isSet = true;
}

bool OAIGuaranteedOrder::is_read_write_partner_id_Set() const{
    return m_read_write_partner_id_isSet;
}

bool OAIGuaranteedOrder::is_read_write_partner_id_Valid() const{
    return m_read_write_partner_id_isValid;
}

OAIGuaranteedOrderStatus OAIGuaranteedOrder::getStatus() const {
    return m_status;
}
void OAIGuaranteedOrder::setStatus(const OAIGuaranteedOrderStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGuaranteedOrder::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGuaranteedOrder::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGuaranteedOrder::getUpdateTime() const {
    return m_update_time;
}
void OAIGuaranteedOrder::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGuaranteedOrder::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGuaranteedOrder::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGuaranteedOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guaranteed_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_guaranteed_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_access_inherited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_advertiser_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_write_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_write_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGuaranteedOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
