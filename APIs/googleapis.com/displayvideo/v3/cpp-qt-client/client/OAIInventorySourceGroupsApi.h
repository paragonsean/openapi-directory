/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInventorySourceGroupsApi_H
#define OAI_OAIInventorySourceGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssignedInventorySource.h"
#include "OAIBulkEditAssignedInventorySourcesRequest.h"
#include "OAIBulkEditAssignedInventorySourcesResponse.h"
#include "OAIInventorySourceGroup.h"
#include "OAIListAssignedInventorySourcesResponse.h"
#include "OAIListInventorySourceGroupsResponse.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInventorySourceGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIInventorySourceGroupsApi(const int timeOut = 0);
    ~OAIInventorySourceGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  inventory_source_group_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_bulk_edit_assigned_inventory_sources_request OAIBulkEditAssignedInventorySourcesRequest [optional]
    */
    virtual void displayvideo_inventorySourceGroups_assignedInventorySources_bulkEdit(const QString &inventory_source_group_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBulkEditAssignedInventorySourcesRequest> &oai_bulk_edit_assigned_inventory_sources_request = ::OpenAPI::OptionalParam<OAIBulkEditAssignedInventorySourcesRequest>());

    /**
    * @param[in]  inventory_source_group_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  advertiser_id QString [optional]
    * @param[in]  partner_id QString [optional]
    * @param[in]  oai_assigned_inventory_source OAIAssignedInventorySource [optional]
    */
    virtual void displayvideo_inventorySourceGroups_assignedInventorySources_create(const QString &inventory_source_group_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &advertiser_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAssignedInventorySource> &oai_assigned_inventory_source = ::OpenAPI::OptionalParam<OAIAssignedInventorySource>());

    /**
    * @param[in]  inventory_source_group_id QString [required]
    * @param[in]  assigned_inventory_source_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  advertiser_id QString [optional]
    * @param[in]  partner_id QString [optional]
    */
    virtual void displayvideo_inventorySourceGroups_assignedInventorySources_delete(const QString &inventory_source_group_id, const QString &assigned_inventory_source_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &advertiser_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_source_group_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  advertiser_id QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  partner_id QString [optional]
    */
    virtual void displayvideo_inventorySourceGroups_assignedInventorySources_list(const QString &inventory_source_group_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &advertiser_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  advertiser_id QString [optional]
    * @param[in]  partner_id QString [optional]
    * @param[in]  oai_inventory_source_group OAIInventorySourceGroup [optional]
    */
    virtual void displayvideo_inventorySourceGroups_create(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &advertiser_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIInventorySourceGroup> &oai_inventory_source_group = ::OpenAPI::OptionalParam<OAIInventorySourceGroup>());

    /**
    * @param[in]  inventory_source_group_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  advertiser_id QString [optional]
    * @param[in]  partner_id QString [optional]
    */
    virtual void displayvideo_inventorySourceGroups_delete(const QString &inventory_source_group_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &advertiser_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  inventory_source_group_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  advertiser_id QString [optional]
    * @param[in]  partner_id QString [optional]
    */
    virtual void displayvideo_inventorySourceGroups_get(const QString &inventory_source_group_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &advertiser_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  advertiser_id QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  partner_id QString [optional]
    */
    virtual void displayvideo_inventorySourceGroups_list(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &advertiser_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void displayvideo_inventorySourceGroups_assignedInventorySources_bulkEditCallback(OAIHttpRequestWorker *worker);
    void displayvideo_inventorySourceGroups_assignedInventorySources_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_inventorySourceGroups_assignedInventorySources_deleteCallback(OAIHttpRequestWorker *worker);
    void displayvideo_inventorySourceGroups_assignedInventorySources_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_inventorySourceGroups_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_inventorySourceGroups_deleteCallback(OAIHttpRequestWorker *worker);
    void displayvideo_inventorySourceGroups_getCallback(OAIHttpRequestWorker *worker);
    void displayvideo_inventorySourceGroups_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void displayvideo_inventorySourceGroups_assignedInventorySources_bulkEditSignal(OAIBulkEditAssignedInventorySourcesResponse summary);
    void displayvideo_inventorySourceGroups_assignedInventorySources_createSignal(OAIAssignedInventorySource summary);
    void displayvideo_inventorySourceGroups_assignedInventorySources_deleteSignal(OAIObject summary);
    void displayvideo_inventorySourceGroups_assignedInventorySources_listSignal(OAIListAssignedInventorySourcesResponse summary);
    void displayvideo_inventorySourceGroups_createSignal(OAIInventorySourceGroup summary);
    void displayvideo_inventorySourceGroups_deleteSignal(OAIObject summary);
    void displayvideo_inventorySourceGroups_getSignal(OAIInventorySourceGroup summary);
    void displayvideo_inventorySourceGroups_listSignal(OAIListInventorySourceGroupsResponse summary);


    void displayvideo_inventorySourceGroups_assignedInventorySources_bulkEditSignalFull(OAIHttpRequestWorker *worker, OAIBulkEditAssignedInventorySourcesResponse summary);
    void displayvideo_inventorySourceGroups_assignedInventorySources_createSignalFull(OAIHttpRequestWorker *worker, OAIAssignedInventorySource summary);
    void displayvideo_inventorySourceGroups_assignedInventorySources_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void displayvideo_inventorySourceGroups_assignedInventorySources_listSignalFull(OAIHttpRequestWorker *worker, OAIListAssignedInventorySourcesResponse summary);
    void displayvideo_inventorySourceGroups_createSignalFull(OAIHttpRequestWorker *worker, OAIInventorySourceGroup summary);
    void displayvideo_inventorySourceGroups_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void displayvideo_inventorySourceGroups_getSignalFull(OAIHttpRequestWorker *worker, OAIInventorySourceGroup summary);
    void displayvideo_inventorySourceGroups_listSignalFull(OAIHttpRequestWorker *worker, OAIListInventorySourceGroupsResponse summary);

    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_assignedInventorySources_bulkEditSignalError() instead")
    void displayvideo_inventorySourceGroups_assignedInventorySources_bulkEditSignalE(OAIBulkEditAssignedInventorySourcesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_assignedInventorySources_bulkEditSignalError(OAIBulkEditAssignedInventorySourcesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_assignedInventorySources_createSignalError() instead")
    void displayvideo_inventorySourceGroups_assignedInventorySources_createSignalE(OAIAssignedInventorySource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_assignedInventorySources_createSignalError(OAIAssignedInventorySource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_assignedInventorySources_deleteSignalError() instead")
    void displayvideo_inventorySourceGroups_assignedInventorySources_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_assignedInventorySources_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_assignedInventorySources_listSignalError() instead")
    void displayvideo_inventorySourceGroups_assignedInventorySources_listSignalE(OAIListAssignedInventorySourcesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_assignedInventorySources_listSignalError(OAIListAssignedInventorySourcesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_createSignalError() instead")
    void displayvideo_inventorySourceGroups_createSignalE(OAIInventorySourceGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_createSignalError(OAIInventorySourceGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_deleteSignalError() instead")
    void displayvideo_inventorySourceGroups_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_getSignalError() instead")
    void displayvideo_inventorySourceGroups_getSignalE(OAIInventorySourceGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_getSignalError(OAIInventorySourceGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_listSignalError() instead")
    void displayvideo_inventorySourceGroups_listSignalE(OAIListInventorySourceGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_listSignalError(OAIListInventorySourceGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_assignedInventorySources_bulkEditSignalErrorFull() instead")
    void displayvideo_inventorySourceGroups_assignedInventorySources_bulkEditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_assignedInventorySources_bulkEditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_assignedInventorySources_createSignalErrorFull() instead")
    void displayvideo_inventorySourceGroups_assignedInventorySources_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_assignedInventorySources_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_assignedInventorySources_deleteSignalErrorFull() instead")
    void displayvideo_inventorySourceGroups_assignedInventorySources_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_assignedInventorySources_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_assignedInventorySources_listSignalErrorFull() instead")
    void displayvideo_inventorySourceGroups_assignedInventorySources_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_assignedInventorySources_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_createSignalErrorFull() instead")
    void displayvideo_inventorySourceGroups_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_deleteSignalErrorFull() instead")
    void displayvideo_inventorySourceGroups_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_getSignalErrorFull() instead")
    void displayvideo_inventorySourceGroups_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_inventorySourceGroups_listSignalErrorFull() instead")
    void displayvideo_inventorySourceGroups_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_inventorySourceGroups_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
