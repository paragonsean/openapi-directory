/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetingExpansionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetingExpansionConfig::OAITargetingExpansionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetingExpansionConfig::OAITargetingExpansionConfig() {
    this->initializeModel();
}

OAITargetingExpansionConfig::~OAITargetingExpansionConfig() {}

void OAITargetingExpansionConfig::initializeModel() {

    m_audience_expansion_level_isSet = false;
    m_audience_expansion_level_isValid = false;

    m_audience_expansion_seed_list_excluded_isSet = false;
    m_audience_expansion_seed_list_excluded_isValid = false;

    m_enable_optimized_targeting_isSet = false;
    m_enable_optimized_targeting_isValid = false;
}

void OAITargetingExpansionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetingExpansionConfig::fromJsonObject(QJsonObject json) {

    m_audience_expansion_level_isValid = ::OpenAPI::fromJsonValue(m_audience_expansion_level, json[QString("audienceExpansionLevel")]);
    m_audience_expansion_level_isSet = !json[QString("audienceExpansionLevel")].isNull() && m_audience_expansion_level_isValid;

    m_audience_expansion_seed_list_excluded_isValid = ::OpenAPI::fromJsonValue(m_audience_expansion_seed_list_excluded, json[QString("audienceExpansionSeedListExcluded")]);
    m_audience_expansion_seed_list_excluded_isSet = !json[QString("audienceExpansionSeedListExcluded")].isNull() && m_audience_expansion_seed_list_excluded_isValid;

    m_enable_optimized_targeting_isValid = ::OpenAPI::fromJsonValue(m_enable_optimized_targeting, json[QString("enableOptimizedTargeting")]);
    m_enable_optimized_targeting_isSet = !json[QString("enableOptimizedTargeting")].isNull() && m_enable_optimized_targeting_isValid;
}

QString OAITargetingExpansionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetingExpansionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_audience_expansion_level_isSet) {
        obj.insert(QString("audienceExpansionLevel"), ::OpenAPI::toJsonValue(m_audience_expansion_level));
    }
    if (m_audience_expansion_seed_list_excluded_isSet) {
        obj.insert(QString("audienceExpansionSeedListExcluded"), ::OpenAPI::toJsonValue(m_audience_expansion_seed_list_excluded));
    }
    if (m_enable_optimized_targeting_isSet) {
        obj.insert(QString("enableOptimizedTargeting"), ::OpenAPI::toJsonValue(m_enable_optimized_targeting));
    }
    return obj;
}

QString OAITargetingExpansionConfig::getAudienceExpansionLevel() const {
    return m_audience_expansion_level;
}
void OAITargetingExpansionConfig::setAudienceExpansionLevel(const QString &audience_expansion_level) {
    m_audience_expansion_level = audience_expansion_level;
    m_audience_expansion_level_isSet = true;
}

bool OAITargetingExpansionConfig::is_audience_expansion_level_Set() const{
    return m_audience_expansion_level_isSet;
}

bool OAITargetingExpansionConfig::is_audience_expansion_level_Valid() const{
    return m_audience_expansion_level_isValid;
}

bool OAITargetingExpansionConfig::isAudienceExpansionSeedListExcluded() const {
    return m_audience_expansion_seed_list_excluded;
}
void OAITargetingExpansionConfig::setAudienceExpansionSeedListExcluded(const bool &audience_expansion_seed_list_excluded) {
    m_audience_expansion_seed_list_excluded = audience_expansion_seed_list_excluded;
    m_audience_expansion_seed_list_excluded_isSet = true;
}

bool OAITargetingExpansionConfig::is_audience_expansion_seed_list_excluded_Set() const{
    return m_audience_expansion_seed_list_excluded_isSet;
}

bool OAITargetingExpansionConfig::is_audience_expansion_seed_list_excluded_Valid() const{
    return m_audience_expansion_seed_list_excluded_isValid;
}

bool OAITargetingExpansionConfig::isEnableOptimizedTargeting() const {
    return m_enable_optimized_targeting;
}
void OAITargetingExpansionConfig::setEnableOptimizedTargeting(const bool &enable_optimized_targeting) {
    m_enable_optimized_targeting = enable_optimized_targeting;
    m_enable_optimized_targeting_isSet = true;
}

bool OAITargetingExpansionConfig::is_enable_optimized_targeting_Set() const{
    return m_enable_optimized_targeting_isSet;
}

bool OAITargetingExpansionConfig::is_enable_optimized_targeting_Valid() const{
    return m_enable_optimized_targeting_isValid;
}

bool OAITargetingExpansionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audience_expansion_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audience_expansion_seed_list_excluded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_optimized_targeting_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetingExpansionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
