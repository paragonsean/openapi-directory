/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDoubleVerifyDisplayViewability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDoubleVerifyDisplayViewability::OAIDoubleVerifyDisplayViewability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDoubleVerifyDisplayViewability::OAIDoubleVerifyDisplayViewability() {
    this->initializeModel();
}

OAIDoubleVerifyDisplayViewability::~OAIDoubleVerifyDisplayViewability() {}

void OAIDoubleVerifyDisplayViewability::initializeModel() {

    m_iab_isSet = false;
    m_iab_isValid = false;

    m_viewable_during_isSet = false;
    m_viewable_during_isValid = false;
}

void OAIDoubleVerifyDisplayViewability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDoubleVerifyDisplayViewability::fromJsonObject(QJsonObject json) {

    m_iab_isValid = ::OpenAPI::fromJsonValue(m_iab, json[QString("iab")]);
    m_iab_isSet = !json[QString("iab")].isNull() && m_iab_isValid;

    m_viewable_during_isValid = ::OpenAPI::fromJsonValue(m_viewable_during, json[QString("viewableDuring")]);
    m_viewable_during_isSet = !json[QString("viewableDuring")].isNull() && m_viewable_during_isValid;
}

QString OAIDoubleVerifyDisplayViewability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDoubleVerifyDisplayViewability::asJsonObject() const {
    QJsonObject obj;
    if (m_iab_isSet) {
        obj.insert(QString("iab"), ::OpenAPI::toJsonValue(m_iab));
    }
    if (m_viewable_during_isSet) {
        obj.insert(QString("viewableDuring"), ::OpenAPI::toJsonValue(m_viewable_during));
    }
    return obj;
}

QString OAIDoubleVerifyDisplayViewability::getIab() const {
    return m_iab;
}
void OAIDoubleVerifyDisplayViewability::setIab(const QString &iab) {
    m_iab = iab;
    m_iab_isSet = true;
}

bool OAIDoubleVerifyDisplayViewability::is_iab_Set() const{
    return m_iab_isSet;
}

bool OAIDoubleVerifyDisplayViewability::is_iab_Valid() const{
    return m_iab_isValid;
}

QString OAIDoubleVerifyDisplayViewability::getViewableDuring() const {
    return m_viewable_during;
}
void OAIDoubleVerifyDisplayViewability::setViewableDuring(const QString &viewable_during) {
    m_viewable_during = viewable_during;
    m_viewable_during_isSet = true;
}

bool OAIDoubleVerifyDisplayViewability::is_viewable_during_Set() const{
    return m_viewable_during_isSet;
}

bool OAIDoubleVerifyDisplayViewability::is_viewable_during_Valid() const{
    return m_viewable_during_isValid;
}

bool OAIDoubleVerifyDisplayViewability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iab_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewable_during_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDoubleVerifyDisplayViewability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
