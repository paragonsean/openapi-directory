/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlgorithmRulesComparisonValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlgorithmRulesComparisonValue::OAIAlgorithmRulesComparisonValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlgorithmRulesComparisonValue::OAIAlgorithmRulesComparisonValue() {
    this->initializeModel();
}

OAIAlgorithmRulesComparisonValue::~OAIAlgorithmRulesComparisonValue() {}

void OAIAlgorithmRulesComparisonValue::initializeModel() {

    m_bool_value_isSet = false;
    m_bool_value_isValid = false;

    m_creative_dimension_value_isSet = false;
    m_creative_dimension_value_isValid = false;

    m_day_and_time_value_isSet = false;
    m_day_and_time_value_isValid = false;

    m_device_type_value_isSet = false;
    m_device_type_value_isValid = false;

    m_double_value_isSet = false;
    m_double_value_isValid = false;

    m_environment_value_isSet = false;
    m_environment_value_isValid = false;

    m_exchange_value_isSet = false;
    m_exchange_value_isValid = false;

    m_int64_value_isSet = false;
    m_int64_value_isValid = false;

    m_on_screen_position_value_isSet = false;
    m_on_screen_position_value_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;
}

void OAIAlgorithmRulesComparisonValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlgorithmRulesComparisonValue::fromJsonObject(QJsonObject json) {

    m_bool_value_isValid = ::OpenAPI::fromJsonValue(m_bool_value, json[QString("boolValue")]);
    m_bool_value_isSet = !json[QString("boolValue")].isNull() && m_bool_value_isValid;

    m_creative_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_creative_dimension_value, json[QString("creativeDimensionValue")]);
    m_creative_dimension_value_isSet = !json[QString("creativeDimensionValue")].isNull() && m_creative_dimension_value_isValid;

    m_day_and_time_value_isValid = ::OpenAPI::fromJsonValue(m_day_and_time_value, json[QString("dayAndTimeValue")]);
    m_day_and_time_value_isSet = !json[QString("dayAndTimeValue")].isNull() && m_day_and_time_value_isValid;

    m_device_type_value_isValid = ::OpenAPI::fromJsonValue(m_device_type_value, json[QString("deviceTypeValue")]);
    m_device_type_value_isSet = !json[QString("deviceTypeValue")].isNull() && m_device_type_value_isValid;

    m_double_value_isValid = ::OpenAPI::fromJsonValue(m_double_value, json[QString("doubleValue")]);
    m_double_value_isSet = !json[QString("doubleValue")].isNull() && m_double_value_isValid;

    m_environment_value_isValid = ::OpenAPI::fromJsonValue(m_environment_value, json[QString("environmentValue")]);
    m_environment_value_isSet = !json[QString("environmentValue")].isNull() && m_environment_value_isValid;

    m_exchange_value_isValid = ::OpenAPI::fromJsonValue(m_exchange_value, json[QString("exchangeValue")]);
    m_exchange_value_isSet = !json[QString("exchangeValue")].isNull() && m_exchange_value_isValid;

    m_int64_value_isValid = ::OpenAPI::fromJsonValue(m_int64_value, json[QString("int64Value")]);
    m_int64_value_isSet = !json[QString("int64Value")].isNull() && m_int64_value_isValid;

    m_on_screen_position_value_isValid = ::OpenAPI::fromJsonValue(m_on_screen_position_value, json[QString("onScreenPositionValue")]);
    m_on_screen_position_value_isSet = !json[QString("onScreenPositionValue")].isNull() && m_on_screen_position_value_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;
}

QString OAIAlgorithmRulesComparisonValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlgorithmRulesComparisonValue::asJsonObject() const {
    QJsonObject obj;
    if (m_bool_value_isSet) {
        obj.insert(QString("boolValue"), ::OpenAPI::toJsonValue(m_bool_value));
    }
    if (m_creative_dimension_value.isSet()) {
        obj.insert(QString("creativeDimensionValue"), ::OpenAPI::toJsonValue(m_creative_dimension_value));
    }
    if (m_day_and_time_value.isSet()) {
        obj.insert(QString("dayAndTimeValue"), ::OpenAPI::toJsonValue(m_day_and_time_value));
    }
    if (m_device_type_value_isSet) {
        obj.insert(QString("deviceTypeValue"), ::OpenAPI::toJsonValue(m_device_type_value));
    }
    if (m_double_value_isSet) {
        obj.insert(QString("doubleValue"), ::OpenAPI::toJsonValue(m_double_value));
    }
    if (m_environment_value_isSet) {
        obj.insert(QString("environmentValue"), ::OpenAPI::toJsonValue(m_environment_value));
    }
    if (m_exchange_value_isSet) {
        obj.insert(QString("exchangeValue"), ::OpenAPI::toJsonValue(m_exchange_value));
    }
    if (m_int64_value_isSet) {
        obj.insert(QString("int64Value"), ::OpenAPI::toJsonValue(m_int64_value));
    }
    if (m_on_screen_position_value_isSet) {
        obj.insert(QString("onScreenPositionValue"), ::OpenAPI::toJsonValue(m_on_screen_position_value));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    return obj;
}

bool OAIAlgorithmRulesComparisonValue::isBoolValue() const {
    return m_bool_value;
}
void OAIAlgorithmRulesComparisonValue::setBoolValue(const bool &bool_value) {
    m_bool_value = bool_value;
    m_bool_value_isSet = true;
}

bool OAIAlgorithmRulesComparisonValue::is_bool_value_Set() const{
    return m_bool_value_isSet;
}

bool OAIAlgorithmRulesComparisonValue::is_bool_value_Valid() const{
    return m_bool_value_isValid;
}

OAIDimensions OAIAlgorithmRulesComparisonValue::getCreativeDimensionValue() const {
    return m_creative_dimension_value;
}
void OAIAlgorithmRulesComparisonValue::setCreativeDimensionValue(const OAIDimensions &creative_dimension_value) {
    m_creative_dimension_value = creative_dimension_value;
    m_creative_dimension_value_isSet = true;
}

bool OAIAlgorithmRulesComparisonValue::is_creative_dimension_value_Set() const{
    return m_creative_dimension_value_isSet;
}

bool OAIAlgorithmRulesComparisonValue::is_creative_dimension_value_Valid() const{
    return m_creative_dimension_value_isValid;
}

OAIDayAndTime OAIAlgorithmRulesComparisonValue::getDayAndTimeValue() const {
    return m_day_and_time_value;
}
void OAIAlgorithmRulesComparisonValue::setDayAndTimeValue(const OAIDayAndTime &day_and_time_value) {
    m_day_and_time_value = day_and_time_value;
    m_day_and_time_value_isSet = true;
}

bool OAIAlgorithmRulesComparisonValue::is_day_and_time_value_Set() const{
    return m_day_and_time_value_isSet;
}

bool OAIAlgorithmRulesComparisonValue::is_day_and_time_value_Valid() const{
    return m_day_and_time_value_isValid;
}

QString OAIAlgorithmRulesComparisonValue::getDeviceTypeValue() const {
    return m_device_type_value;
}
void OAIAlgorithmRulesComparisonValue::setDeviceTypeValue(const QString &device_type_value) {
    m_device_type_value = device_type_value;
    m_device_type_value_isSet = true;
}

bool OAIAlgorithmRulesComparisonValue::is_device_type_value_Set() const{
    return m_device_type_value_isSet;
}

bool OAIAlgorithmRulesComparisonValue::is_device_type_value_Valid() const{
    return m_device_type_value_isValid;
}

double OAIAlgorithmRulesComparisonValue::getDoubleValue() const {
    return m_double_value;
}
void OAIAlgorithmRulesComparisonValue::setDoubleValue(const double &double_value) {
    m_double_value = double_value;
    m_double_value_isSet = true;
}

bool OAIAlgorithmRulesComparisonValue::is_double_value_Set() const{
    return m_double_value_isSet;
}

bool OAIAlgorithmRulesComparisonValue::is_double_value_Valid() const{
    return m_double_value_isValid;
}

QString OAIAlgorithmRulesComparisonValue::getEnvironmentValue() const {
    return m_environment_value;
}
void OAIAlgorithmRulesComparisonValue::setEnvironmentValue(const QString &environment_value) {
    m_environment_value = environment_value;
    m_environment_value_isSet = true;
}

bool OAIAlgorithmRulesComparisonValue::is_environment_value_Set() const{
    return m_environment_value_isSet;
}

bool OAIAlgorithmRulesComparisonValue::is_environment_value_Valid() const{
    return m_environment_value_isValid;
}

QString OAIAlgorithmRulesComparisonValue::getExchangeValue() const {
    return m_exchange_value;
}
void OAIAlgorithmRulesComparisonValue::setExchangeValue(const QString &exchange_value) {
    m_exchange_value = exchange_value;
    m_exchange_value_isSet = true;
}

bool OAIAlgorithmRulesComparisonValue::is_exchange_value_Set() const{
    return m_exchange_value_isSet;
}

bool OAIAlgorithmRulesComparisonValue::is_exchange_value_Valid() const{
    return m_exchange_value_isValid;
}

QString OAIAlgorithmRulesComparisonValue::getInt64Value() const {
    return m_int64_value;
}
void OAIAlgorithmRulesComparisonValue::setInt64Value(const QString &int64_value) {
    m_int64_value = int64_value;
    m_int64_value_isSet = true;
}

bool OAIAlgorithmRulesComparisonValue::is_int64_value_Set() const{
    return m_int64_value_isSet;
}

bool OAIAlgorithmRulesComparisonValue::is_int64_value_Valid() const{
    return m_int64_value_isValid;
}

QString OAIAlgorithmRulesComparisonValue::getOnScreenPositionValue() const {
    return m_on_screen_position_value;
}
void OAIAlgorithmRulesComparisonValue::setOnScreenPositionValue(const QString &on_screen_position_value) {
    m_on_screen_position_value = on_screen_position_value;
    m_on_screen_position_value_isSet = true;
}

bool OAIAlgorithmRulesComparisonValue::is_on_screen_position_value_Set() const{
    return m_on_screen_position_value_isSet;
}

bool OAIAlgorithmRulesComparisonValue::is_on_screen_position_value_Valid() const{
    return m_on_screen_position_value_isValid;
}

QString OAIAlgorithmRulesComparisonValue::getStringValue() const {
    return m_string_value;
}
void OAIAlgorithmRulesComparisonValue::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIAlgorithmRulesComparisonValue::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIAlgorithmRulesComparisonValue::is_string_value_Valid() const{
    return m_string_value_isValid;
}

bool OAIAlgorithmRulesComparisonValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bool_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_and_time_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_int64_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_screen_position_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlgorithmRulesComparisonValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
