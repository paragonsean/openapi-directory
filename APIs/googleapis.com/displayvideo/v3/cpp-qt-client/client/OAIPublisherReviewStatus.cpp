/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublisherReviewStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublisherReviewStatus::OAIPublisherReviewStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublisherReviewStatus::OAIPublisherReviewStatus() {
    this->initializeModel();
}

OAIPublisherReviewStatus::~OAIPublisherReviewStatus() {}

void OAIPublisherReviewStatus::initializeModel() {

    m_publisher_name_isSet = false;
    m_publisher_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPublisherReviewStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublisherReviewStatus::fromJsonObject(QJsonObject json) {

    m_publisher_name_isValid = ::OpenAPI::fromJsonValue(m_publisher_name, json[QString("publisherName")]);
    m_publisher_name_isSet = !json[QString("publisherName")].isNull() && m_publisher_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPublisherReviewStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublisherReviewStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_publisher_name_isSet) {
        obj.insert(QString("publisherName"), ::OpenAPI::toJsonValue(m_publisher_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIPublisherReviewStatus::getPublisherName() const {
    return m_publisher_name;
}
void OAIPublisherReviewStatus::setPublisherName(const QString &publisher_name) {
    m_publisher_name = publisher_name;
    m_publisher_name_isSet = true;
}

bool OAIPublisherReviewStatus::is_publisher_name_Set() const{
    return m_publisher_name_isSet;
}

bool OAIPublisherReviewStatus::is_publisher_name_Valid() const{
    return m_publisher_name_isValid;
}

QString OAIPublisherReviewStatus::getStatus() const {
    return m_status;
}
void OAIPublisherReviewStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPublisherReviewStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPublisherReviewStatus::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPublisherReviewStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_publisher_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublisherReviewStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
