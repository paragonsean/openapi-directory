/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditGuaranteedOrderReadAccessorsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditGuaranteedOrderReadAccessorsRequest::OAIEditGuaranteedOrderReadAccessorsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditGuaranteedOrderReadAccessorsRequest::OAIEditGuaranteedOrderReadAccessorsRequest() {
    this->initializeModel();
}

OAIEditGuaranteedOrderReadAccessorsRequest::~OAIEditGuaranteedOrderReadAccessorsRequest() {}

void OAIEditGuaranteedOrderReadAccessorsRequest::initializeModel() {

    m_added_advertisers_isSet = false;
    m_added_advertisers_isValid = false;

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;

    m_read_access_inherited_isSet = false;
    m_read_access_inherited_isValid = false;

    m_removed_advertisers_isSet = false;
    m_removed_advertisers_isValid = false;
}

void OAIEditGuaranteedOrderReadAccessorsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEditGuaranteedOrderReadAccessorsRequest::fromJsonObject(QJsonObject json) {

    m_added_advertisers_isValid = ::OpenAPI::fromJsonValue(m_added_advertisers, json[QString("addedAdvertisers")]);
    m_added_advertisers_isSet = !json[QString("addedAdvertisers")].isNull() && m_added_advertisers_isValid;

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partnerId")]);
    m_partner_id_isSet = !json[QString("partnerId")].isNull() && m_partner_id_isValid;

    m_read_access_inherited_isValid = ::OpenAPI::fromJsonValue(m_read_access_inherited, json[QString("readAccessInherited")]);
    m_read_access_inherited_isSet = !json[QString("readAccessInherited")].isNull() && m_read_access_inherited_isValid;

    m_removed_advertisers_isValid = ::OpenAPI::fromJsonValue(m_removed_advertisers, json[QString("removedAdvertisers")]);
    m_removed_advertisers_isSet = !json[QString("removedAdvertisers")].isNull() && m_removed_advertisers_isValid;
}

QString OAIEditGuaranteedOrderReadAccessorsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEditGuaranteedOrderReadAccessorsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_added_advertisers.size() > 0) {
        obj.insert(QString("addedAdvertisers"), ::OpenAPI::toJsonValue(m_added_advertisers));
    }
    if (m_partner_id_isSet) {
        obj.insert(QString("partnerId"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    if (m_read_access_inherited_isSet) {
        obj.insert(QString("readAccessInherited"), ::OpenAPI::toJsonValue(m_read_access_inherited));
    }
    if (m_removed_advertisers.size() > 0) {
        obj.insert(QString("removedAdvertisers"), ::OpenAPI::toJsonValue(m_removed_advertisers));
    }
    return obj;
}

QList<QString> OAIEditGuaranteedOrderReadAccessorsRequest::getAddedAdvertisers() const {
    return m_added_advertisers;
}
void OAIEditGuaranteedOrderReadAccessorsRequest::setAddedAdvertisers(const QList<QString> &added_advertisers) {
    m_added_advertisers = added_advertisers;
    m_added_advertisers_isSet = true;
}

bool OAIEditGuaranteedOrderReadAccessorsRequest::is_added_advertisers_Set() const{
    return m_added_advertisers_isSet;
}

bool OAIEditGuaranteedOrderReadAccessorsRequest::is_added_advertisers_Valid() const{
    return m_added_advertisers_isValid;
}

QString OAIEditGuaranteedOrderReadAccessorsRequest::getPartnerId() const {
    return m_partner_id;
}
void OAIEditGuaranteedOrderReadAccessorsRequest::setPartnerId(const QString &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAIEditGuaranteedOrderReadAccessorsRequest::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAIEditGuaranteedOrderReadAccessorsRequest::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

bool OAIEditGuaranteedOrderReadAccessorsRequest::isReadAccessInherited() const {
    return m_read_access_inherited;
}
void OAIEditGuaranteedOrderReadAccessorsRequest::setReadAccessInherited(const bool &read_access_inherited) {
    m_read_access_inherited = read_access_inherited;
    m_read_access_inherited_isSet = true;
}

bool OAIEditGuaranteedOrderReadAccessorsRequest::is_read_access_inherited_Set() const{
    return m_read_access_inherited_isSet;
}

bool OAIEditGuaranteedOrderReadAccessorsRequest::is_read_access_inherited_Valid() const{
    return m_read_access_inherited_isValid;
}

QList<QString> OAIEditGuaranteedOrderReadAccessorsRequest::getRemovedAdvertisers() const {
    return m_removed_advertisers;
}
void OAIEditGuaranteedOrderReadAccessorsRequest::setRemovedAdvertisers(const QList<QString> &removed_advertisers) {
    m_removed_advertisers = removed_advertisers;
    m_removed_advertisers_isSet = true;
}

bool OAIEditGuaranteedOrderReadAccessorsRequest::is_removed_advertisers_Set() const{
    return m_removed_advertisers_isSet;
}

bool OAIEditGuaranteedOrderReadAccessorsRequest::is_removed_advertisers_Valid() const{
    return m_removed_advertisers_isValid;
}

bool OAIEditGuaranteedOrderReadAccessorsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_advertisers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_access_inherited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_removed_advertisers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEditGuaranteedOrderReadAccessorsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
