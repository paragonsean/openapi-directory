/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkEditSitesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkEditSitesRequest::OAIBulkEditSitesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkEditSitesRequest::OAIBulkEditSitesRequest() {
    this->initializeModel();
}

OAIBulkEditSitesRequest::~OAIBulkEditSitesRequest() {}

void OAIBulkEditSitesRequest::initializeModel() {

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_created_sites_isSet = false;
    m_created_sites_isValid = false;

    m_deleted_sites_isSet = false;
    m_deleted_sites_isValid = false;

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;
}

void OAIBulkEditSitesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBulkEditSitesRequest::fromJsonObject(QJsonObject json) {

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_created_sites_isValid = ::OpenAPI::fromJsonValue(m_created_sites, json[QString("createdSites")]);
    m_created_sites_isSet = !json[QString("createdSites")].isNull() && m_created_sites_isValid;

    m_deleted_sites_isValid = ::OpenAPI::fromJsonValue(m_deleted_sites, json[QString("deletedSites")]);
    m_deleted_sites_isSet = !json[QString("deletedSites")].isNull() && m_deleted_sites_isValid;

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partnerId")]);
    m_partner_id_isSet = !json[QString("partnerId")].isNull() && m_partner_id_isValid;
}

QString OAIBulkEditSitesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBulkEditSitesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_created_sites.size() > 0) {
        obj.insert(QString("createdSites"), ::OpenAPI::toJsonValue(m_created_sites));
    }
    if (m_deleted_sites.size() > 0) {
        obj.insert(QString("deletedSites"), ::OpenAPI::toJsonValue(m_deleted_sites));
    }
    if (m_partner_id_isSet) {
        obj.insert(QString("partnerId"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    return obj;
}

QString OAIBulkEditSitesRequest::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIBulkEditSitesRequest::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIBulkEditSitesRequest::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIBulkEditSitesRequest::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

QList<OAISite> OAIBulkEditSitesRequest::getCreatedSites() const {
    return m_created_sites;
}
void OAIBulkEditSitesRequest::setCreatedSites(const QList<OAISite> &created_sites) {
    m_created_sites = created_sites;
    m_created_sites_isSet = true;
}

bool OAIBulkEditSitesRequest::is_created_sites_Set() const{
    return m_created_sites_isSet;
}

bool OAIBulkEditSitesRequest::is_created_sites_Valid() const{
    return m_created_sites_isValid;
}

QList<QString> OAIBulkEditSitesRequest::getDeletedSites() const {
    return m_deleted_sites;
}
void OAIBulkEditSitesRequest::setDeletedSites(const QList<QString> &deleted_sites) {
    m_deleted_sites = deleted_sites;
    m_deleted_sites_isSet = true;
}

bool OAIBulkEditSitesRequest::is_deleted_sites_Set() const{
    return m_deleted_sites_isSet;
}

bool OAIBulkEditSitesRequest::is_deleted_sites_Valid() const{
    return m_deleted_sites_isValid;
}

QString OAIBulkEditSitesRequest::getPartnerId() const {
    return m_partner_id;
}
void OAIBulkEditSitesRequest::setPartnerId(const QString &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAIBulkEditSitesRequest::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAIBulkEditSitesRequest::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

bool OAIBulkEditSitesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBulkEditSitesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
