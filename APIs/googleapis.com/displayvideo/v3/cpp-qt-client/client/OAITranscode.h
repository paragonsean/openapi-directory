/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITranscode.h
 *
 * Represents information about the transcoded audio or video file.
 */

#ifndef OAITranscode_H
#define OAITranscode_H

#include <QJsonObject>

#include "OAIDimensions.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDimensions;

class OAITranscode : public OAIObject {
public:
    OAITranscode();
    OAITranscode(QString json);
    ~OAITranscode() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAudioBitRateKbps() const;
    void setAudioBitRateKbps(const QString &audio_bit_rate_kbps);
    bool is_audio_bit_rate_kbps_Set() const;
    bool is_audio_bit_rate_kbps_Valid() const;

    QString getAudioSampleRateHz() const;
    void setAudioSampleRateHz(const QString &audio_sample_rate_hz);
    bool is_audio_sample_rate_hz_Set() const;
    bool is_audio_sample_rate_hz_Valid() const;

    QString getBitRateKbps() const;
    void setBitRateKbps(const QString &bit_rate_kbps);
    bool is_bit_rate_kbps_Set() const;
    bool is_bit_rate_kbps_Valid() const;

    OAIDimensions getDimensions() const;
    void setDimensions(const OAIDimensions &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    QString getFileSizeBytes() const;
    void setFileSizeBytes(const QString &file_size_bytes);
    bool is_file_size_bytes_Set() const;
    bool is_file_size_bytes_Valid() const;

    float getFrameRate() const;
    void setFrameRate(const float &frame_rate);
    bool is_frame_rate_Set() const;
    bool is_frame_rate_Valid() const;

    QString getMimeType() const;
    void setMimeType(const QString &mime_type);
    bool is_mime_type_Set() const;
    bool is_mime_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isTranscoded() const;
    void setTranscoded(const bool &transcoded);
    bool is_transcoded_Set() const;
    bool is_transcoded_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_audio_bit_rate_kbps;
    bool m_audio_bit_rate_kbps_isSet;
    bool m_audio_bit_rate_kbps_isValid;

    QString m_audio_sample_rate_hz;
    bool m_audio_sample_rate_hz_isSet;
    bool m_audio_sample_rate_hz_isValid;

    QString m_bit_rate_kbps;
    bool m_bit_rate_kbps_isSet;
    bool m_bit_rate_kbps_isValid;

    OAIDimensions m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    QString m_file_size_bytes;
    bool m_file_size_bytes_isSet;
    bool m_file_size_bytes_isValid;

    float m_frame_rate;
    bool m_frame_rate_isSet;
    bool m_frame_rate_isValid;

    QString m_mime_type;
    bool m_mime_type_isSet;
    bool m_mime_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_transcoded;
    bool m_transcoded_isSet;
    bool m_transcoded_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITranscode)

#endif // OAITranscode_H
