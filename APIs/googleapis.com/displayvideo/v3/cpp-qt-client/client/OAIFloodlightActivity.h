/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFloodlightActivity.h
 *
 * A single Floodlight activity.
 */

#ifndef OAIFloodlightActivity_H
#define OAIFloodlightActivity_H

#include <QJsonObject>

#include "OAIRemarketingConfig.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRemarketingConfig;

class OAIFloodlightActivity : public OAIObject {
public:
    OAIFloodlightActivity();
    OAIFloodlightActivity(QString json);
    ~OAIFloodlightActivity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAdvertiserIds() const;
    void setAdvertiserIds(const QList<QString> &advertiser_ids);
    bool is_advertiser_ids_Set() const;
    bool is_advertiser_ids_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getFloodlightActivityId() const;
    void setFloodlightActivityId(const QString &floodlight_activity_id);
    bool is_floodlight_activity_id_Set() const;
    bool is_floodlight_activity_id_Valid() const;

    QString getFloodlightGroupId() const;
    void setFloodlightGroupId(const QString &floodlight_group_id);
    bool is_floodlight_group_id_Set() const;
    bool is_floodlight_group_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIRemarketingConfig> getRemarketingConfigs() const;
    void setRemarketingConfigs(const QList<OAIRemarketingConfig> &remarketing_configs);
    bool is_remarketing_configs_Set() const;
    bool is_remarketing_configs_Valid() const;

    QString getServingStatus() const;
    void setServingStatus(const QString &serving_status);
    bool is_serving_status_Set() const;
    bool is_serving_status_Valid() const;

    bool isSslRequired() const;
    void setSslRequired(const bool &ssl_required);
    bool is_ssl_required_Set() const;
    bool is_ssl_required_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_advertiser_ids;
    bool m_advertiser_ids_isSet;
    bool m_advertiser_ids_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_floodlight_activity_id;
    bool m_floodlight_activity_id_isSet;
    bool m_floodlight_activity_id_isValid;

    QString m_floodlight_group_id;
    bool m_floodlight_group_id_isSet;
    bool m_floodlight_group_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIRemarketingConfig> m_remarketing_configs;
    bool m_remarketing_configs_isSet;
    bool m_remarketing_configs_isValid;

    QString m_serving_status;
    bool m_serving_status_isSet;
    bool m_serving_status_isValid;

    bool m_ssl_required;
    bool m_ssl_required_isSet;
    bool m_ssl_required_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFloodlightActivity)

#endif // OAIFloodlightActivity_H
