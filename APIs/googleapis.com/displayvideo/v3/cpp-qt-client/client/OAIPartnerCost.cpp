/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartnerCost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartnerCost::OAIPartnerCost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartnerCost::OAIPartnerCost() {
    this->initializeModel();
}

OAIPartnerCost::~OAIPartnerCost() {}

void OAIPartnerCost::initializeModel() {

    m_cost_type_isSet = false;
    m_cost_type_isValid = false;

    m_fee_amount_isSet = false;
    m_fee_amount_isValid = false;

    m_fee_percentage_millis_isSet = false;
    m_fee_percentage_millis_isValid = false;

    m_fee_type_isSet = false;
    m_fee_type_isValid = false;

    m_invoice_type_isSet = false;
    m_invoice_type_isValid = false;
}

void OAIPartnerCost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartnerCost::fromJsonObject(QJsonObject json) {

    m_cost_type_isValid = ::OpenAPI::fromJsonValue(m_cost_type, json[QString("costType")]);
    m_cost_type_isSet = !json[QString("costType")].isNull() && m_cost_type_isValid;

    m_fee_amount_isValid = ::OpenAPI::fromJsonValue(m_fee_amount, json[QString("feeAmount")]);
    m_fee_amount_isSet = !json[QString("feeAmount")].isNull() && m_fee_amount_isValid;

    m_fee_percentage_millis_isValid = ::OpenAPI::fromJsonValue(m_fee_percentage_millis, json[QString("feePercentageMillis")]);
    m_fee_percentage_millis_isSet = !json[QString("feePercentageMillis")].isNull() && m_fee_percentage_millis_isValid;

    m_fee_type_isValid = ::OpenAPI::fromJsonValue(m_fee_type, json[QString("feeType")]);
    m_fee_type_isSet = !json[QString("feeType")].isNull() && m_fee_type_isValid;

    m_invoice_type_isValid = ::OpenAPI::fromJsonValue(m_invoice_type, json[QString("invoiceType")]);
    m_invoice_type_isSet = !json[QString("invoiceType")].isNull() && m_invoice_type_isValid;
}

QString OAIPartnerCost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartnerCost::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_type_isSet) {
        obj.insert(QString("costType"), ::OpenAPI::toJsonValue(m_cost_type));
    }
    if (m_fee_amount_isSet) {
        obj.insert(QString("feeAmount"), ::OpenAPI::toJsonValue(m_fee_amount));
    }
    if (m_fee_percentage_millis_isSet) {
        obj.insert(QString("feePercentageMillis"), ::OpenAPI::toJsonValue(m_fee_percentage_millis));
    }
    if (m_fee_type_isSet) {
        obj.insert(QString("feeType"), ::OpenAPI::toJsonValue(m_fee_type));
    }
    if (m_invoice_type_isSet) {
        obj.insert(QString("invoiceType"), ::OpenAPI::toJsonValue(m_invoice_type));
    }
    return obj;
}

QString OAIPartnerCost::getCostType() const {
    return m_cost_type;
}
void OAIPartnerCost::setCostType(const QString &cost_type) {
    m_cost_type = cost_type;
    m_cost_type_isSet = true;
}

bool OAIPartnerCost::is_cost_type_Set() const{
    return m_cost_type_isSet;
}

bool OAIPartnerCost::is_cost_type_Valid() const{
    return m_cost_type_isValid;
}

QString OAIPartnerCost::getFeeAmount() const {
    return m_fee_amount;
}
void OAIPartnerCost::setFeeAmount(const QString &fee_amount) {
    m_fee_amount = fee_amount;
    m_fee_amount_isSet = true;
}

bool OAIPartnerCost::is_fee_amount_Set() const{
    return m_fee_amount_isSet;
}

bool OAIPartnerCost::is_fee_amount_Valid() const{
    return m_fee_amount_isValid;
}

QString OAIPartnerCost::getFeePercentageMillis() const {
    return m_fee_percentage_millis;
}
void OAIPartnerCost::setFeePercentageMillis(const QString &fee_percentage_millis) {
    m_fee_percentage_millis = fee_percentage_millis;
    m_fee_percentage_millis_isSet = true;
}

bool OAIPartnerCost::is_fee_percentage_millis_Set() const{
    return m_fee_percentage_millis_isSet;
}

bool OAIPartnerCost::is_fee_percentage_millis_Valid() const{
    return m_fee_percentage_millis_isValid;
}

QString OAIPartnerCost::getFeeType() const {
    return m_fee_type;
}
void OAIPartnerCost::setFeeType(const QString &fee_type) {
    m_fee_type = fee_type;
    m_fee_type_isSet = true;
}

bool OAIPartnerCost::is_fee_type_Set() const{
    return m_fee_type_isSet;
}

bool OAIPartnerCost::is_fee_type_Valid() const{
    return m_fee_type_isValid;
}

QString OAIPartnerCost::getInvoiceType() const {
    return m_invoice_type;
}
void OAIPartnerCost::setInvoiceType(const QString &invoice_type) {
    m_invoice_type = invoice_type;
    m_invoice_type_isSet = true;
}

bool OAIPartnerCost::is_invoice_type_Set() const{
    return m_invoice_type_isSet;
}

bool OAIPartnerCost::is_invoice_type_Valid() const{
    return m_invoice_type_isValid;
}

bool OAIPartnerCost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_percentage_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartnerCost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
