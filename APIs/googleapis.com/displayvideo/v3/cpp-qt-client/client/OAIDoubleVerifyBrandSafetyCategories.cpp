/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDoubleVerifyBrandSafetyCategories.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDoubleVerifyBrandSafetyCategories::OAIDoubleVerifyBrandSafetyCategories(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDoubleVerifyBrandSafetyCategories::OAIDoubleVerifyBrandSafetyCategories() {
    this->initializeModel();
}

OAIDoubleVerifyBrandSafetyCategories::~OAIDoubleVerifyBrandSafetyCategories() {}

void OAIDoubleVerifyBrandSafetyCategories::initializeModel() {

    m_avoid_unknown_brand_safety_category_isSet = false;
    m_avoid_unknown_brand_safety_category_isValid = false;

    m_avoided_high_severity_categories_isSet = false;
    m_avoided_high_severity_categories_isValid = false;

    m_avoided_medium_severity_categories_isSet = false;
    m_avoided_medium_severity_categories_isValid = false;
}

void OAIDoubleVerifyBrandSafetyCategories::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDoubleVerifyBrandSafetyCategories::fromJsonObject(QJsonObject json) {

    m_avoid_unknown_brand_safety_category_isValid = ::OpenAPI::fromJsonValue(m_avoid_unknown_brand_safety_category, json[QString("avoidUnknownBrandSafetyCategory")]);
    m_avoid_unknown_brand_safety_category_isSet = !json[QString("avoidUnknownBrandSafetyCategory")].isNull() && m_avoid_unknown_brand_safety_category_isValid;

    m_avoided_high_severity_categories_isValid = ::OpenAPI::fromJsonValue(m_avoided_high_severity_categories, json[QString("avoidedHighSeverityCategories")]);
    m_avoided_high_severity_categories_isSet = !json[QString("avoidedHighSeverityCategories")].isNull() && m_avoided_high_severity_categories_isValid;

    m_avoided_medium_severity_categories_isValid = ::OpenAPI::fromJsonValue(m_avoided_medium_severity_categories, json[QString("avoidedMediumSeverityCategories")]);
    m_avoided_medium_severity_categories_isSet = !json[QString("avoidedMediumSeverityCategories")].isNull() && m_avoided_medium_severity_categories_isValid;
}

QString OAIDoubleVerifyBrandSafetyCategories::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDoubleVerifyBrandSafetyCategories::asJsonObject() const {
    QJsonObject obj;
    if (m_avoid_unknown_brand_safety_category_isSet) {
        obj.insert(QString("avoidUnknownBrandSafetyCategory"), ::OpenAPI::toJsonValue(m_avoid_unknown_brand_safety_category));
    }
    if (m_avoided_high_severity_categories.size() > 0) {
        obj.insert(QString("avoidedHighSeverityCategories"), ::OpenAPI::toJsonValue(m_avoided_high_severity_categories));
    }
    if (m_avoided_medium_severity_categories.size() > 0) {
        obj.insert(QString("avoidedMediumSeverityCategories"), ::OpenAPI::toJsonValue(m_avoided_medium_severity_categories));
    }
    return obj;
}

bool OAIDoubleVerifyBrandSafetyCategories::isAvoidUnknownBrandSafetyCategory() const {
    return m_avoid_unknown_brand_safety_category;
}
void OAIDoubleVerifyBrandSafetyCategories::setAvoidUnknownBrandSafetyCategory(const bool &avoid_unknown_brand_safety_category) {
    m_avoid_unknown_brand_safety_category = avoid_unknown_brand_safety_category;
    m_avoid_unknown_brand_safety_category_isSet = true;
}

bool OAIDoubleVerifyBrandSafetyCategories::is_avoid_unknown_brand_safety_category_Set() const{
    return m_avoid_unknown_brand_safety_category_isSet;
}

bool OAIDoubleVerifyBrandSafetyCategories::is_avoid_unknown_brand_safety_category_Valid() const{
    return m_avoid_unknown_brand_safety_category_isValid;
}

QList<QString> OAIDoubleVerifyBrandSafetyCategories::getAvoidedHighSeverityCategories() const {
    return m_avoided_high_severity_categories;
}
void OAIDoubleVerifyBrandSafetyCategories::setAvoidedHighSeverityCategories(const QList<QString> &avoided_high_severity_categories) {
    m_avoided_high_severity_categories = avoided_high_severity_categories;
    m_avoided_high_severity_categories_isSet = true;
}

bool OAIDoubleVerifyBrandSafetyCategories::is_avoided_high_severity_categories_Set() const{
    return m_avoided_high_severity_categories_isSet;
}

bool OAIDoubleVerifyBrandSafetyCategories::is_avoided_high_severity_categories_Valid() const{
    return m_avoided_high_severity_categories_isValid;
}

QList<QString> OAIDoubleVerifyBrandSafetyCategories::getAvoidedMediumSeverityCategories() const {
    return m_avoided_medium_severity_categories;
}
void OAIDoubleVerifyBrandSafetyCategories::setAvoidedMediumSeverityCategories(const QList<QString> &avoided_medium_severity_categories) {
    m_avoided_medium_severity_categories = avoided_medium_severity_categories;
    m_avoided_medium_severity_categories_isSet = true;
}

bool OAIDoubleVerifyBrandSafetyCategories::is_avoided_medium_severity_categories_Set() const{
    return m_avoided_medium_severity_categories_isSet;
}

bool OAIDoubleVerifyBrandSafetyCategories::is_avoided_medium_severity_categories_Valid() const{
    return m_avoided_medium_severity_categories_isValid;
}

bool OAIDoubleVerifyBrandSafetyCategories::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avoid_unknown_brand_safety_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avoided_high_severity_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_avoided_medium_severity_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDoubleVerifyBrandSafetyCategories::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
