/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINativeContentPositionTargetingOptionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINativeContentPositionTargetingOptionDetails::OAINativeContentPositionTargetingOptionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINativeContentPositionTargetingOptionDetails::OAINativeContentPositionTargetingOptionDetails() {
    this->initializeModel();
}

OAINativeContentPositionTargetingOptionDetails::~OAINativeContentPositionTargetingOptionDetails() {}

void OAINativeContentPositionTargetingOptionDetails::initializeModel() {

    m_content_position_isSet = false;
    m_content_position_isValid = false;
}

void OAINativeContentPositionTargetingOptionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINativeContentPositionTargetingOptionDetails::fromJsonObject(QJsonObject json) {

    m_content_position_isValid = ::OpenAPI::fromJsonValue(m_content_position, json[QString("contentPosition")]);
    m_content_position_isSet = !json[QString("contentPosition")].isNull() && m_content_position_isValid;
}

QString OAINativeContentPositionTargetingOptionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINativeContentPositionTargetingOptionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_content_position_isSet) {
        obj.insert(QString("contentPosition"), ::OpenAPI::toJsonValue(m_content_position));
    }
    return obj;
}

QString OAINativeContentPositionTargetingOptionDetails::getContentPosition() const {
    return m_content_position;
}
void OAINativeContentPositionTargetingOptionDetails::setContentPosition(const QString &content_position) {
    m_content_position = content_position;
    m_content_position_isSet = true;
}

bool OAINativeContentPositionTargetingOptionDetails::is_content_position_Set() const{
    return m_content_position_isSet;
}

bool OAINativeContentPositionTargetingOptionDetails::is_content_position_Valid() const{
    return m_content_position_isValid;
}

bool OAINativeContentPositionTargetingOptionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_position_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINativeContentPositionTargetingOptionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
