/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvertiserCreativeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvertiserCreativeConfig::OAIAdvertiserCreativeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvertiserCreativeConfig::OAIAdvertiserCreativeConfig() {
    this->initializeModel();
}

OAIAdvertiserCreativeConfig::~OAIAdvertiserCreativeConfig() {}

void OAIAdvertiserCreativeConfig::initializeModel() {

    m_dynamic_creative_enabled_isSet = false;
    m_dynamic_creative_enabled_isValid = false;

    m_ias_client_id_isSet = false;
    m_ias_client_id_isValid = false;

    m_oba_compliance_disabled_isSet = false;
    m_oba_compliance_disabled_isValid = false;

    m_video_creative_data_sharing_authorized_isSet = false;
    m_video_creative_data_sharing_authorized_isValid = false;
}

void OAIAdvertiserCreativeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvertiserCreativeConfig::fromJsonObject(QJsonObject json) {

    m_dynamic_creative_enabled_isValid = ::OpenAPI::fromJsonValue(m_dynamic_creative_enabled, json[QString("dynamicCreativeEnabled")]);
    m_dynamic_creative_enabled_isSet = !json[QString("dynamicCreativeEnabled")].isNull() && m_dynamic_creative_enabled_isValid;

    m_ias_client_id_isValid = ::OpenAPI::fromJsonValue(m_ias_client_id, json[QString("iasClientId")]);
    m_ias_client_id_isSet = !json[QString("iasClientId")].isNull() && m_ias_client_id_isValid;

    m_oba_compliance_disabled_isValid = ::OpenAPI::fromJsonValue(m_oba_compliance_disabled, json[QString("obaComplianceDisabled")]);
    m_oba_compliance_disabled_isSet = !json[QString("obaComplianceDisabled")].isNull() && m_oba_compliance_disabled_isValid;

    m_video_creative_data_sharing_authorized_isValid = ::OpenAPI::fromJsonValue(m_video_creative_data_sharing_authorized, json[QString("videoCreativeDataSharingAuthorized")]);
    m_video_creative_data_sharing_authorized_isSet = !json[QString("videoCreativeDataSharingAuthorized")].isNull() && m_video_creative_data_sharing_authorized_isValid;
}

QString OAIAdvertiserCreativeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvertiserCreativeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_dynamic_creative_enabled_isSet) {
        obj.insert(QString("dynamicCreativeEnabled"), ::OpenAPI::toJsonValue(m_dynamic_creative_enabled));
    }
    if (m_ias_client_id_isSet) {
        obj.insert(QString("iasClientId"), ::OpenAPI::toJsonValue(m_ias_client_id));
    }
    if (m_oba_compliance_disabled_isSet) {
        obj.insert(QString("obaComplianceDisabled"), ::OpenAPI::toJsonValue(m_oba_compliance_disabled));
    }
    if (m_video_creative_data_sharing_authorized_isSet) {
        obj.insert(QString("videoCreativeDataSharingAuthorized"), ::OpenAPI::toJsonValue(m_video_creative_data_sharing_authorized));
    }
    return obj;
}

bool OAIAdvertiserCreativeConfig::isDynamicCreativeEnabled() const {
    return m_dynamic_creative_enabled;
}
void OAIAdvertiserCreativeConfig::setDynamicCreativeEnabled(const bool &dynamic_creative_enabled) {
    m_dynamic_creative_enabled = dynamic_creative_enabled;
    m_dynamic_creative_enabled_isSet = true;
}

bool OAIAdvertiserCreativeConfig::is_dynamic_creative_enabled_Set() const{
    return m_dynamic_creative_enabled_isSet;
}

bool OAIAdvertiserCreativeConfig::is_dynamic_creative_enabled_Valid() const{
    return m_dynamic_creative_enabled_isValid;
}

QString OAIAdvertiserCreativeConfig::getIasClientId() const {
    return m_ias_client_id;
}
void OAIAdvertiserCreativeConfig::setIasClientId(const QString &ias_client_id) {
    m_ias_client_id = ias_client_id;
    m_ias_client_id_isSet = true;
}

bool OAIAdvertiserCreativeConfig::is_ias_client_id_Set() const{
    return m_ias_client_id_isSet;
}

bool OAIAdvertiserCreativeConfig::is_ias_client_id_Valid() const{
    return m_ias_client_id_isValid;
}

bool OAIAdvertiserCreativeConfig::isObaComplianceDisabled() const {
    return m_oba_compliance_disabled;
}
void OAIAdvertiserCreativeConfig::setObaComplianceDisabled(const bool &oba_compliance_disabled) {
    m_oba_compliance_disabled = oba_compliance_disabled;
    m_oba_compliance_disabled_isSet = true;
}

bool OAIAdvertiserCreativeConfig::is_oba_compliance_disabled_Set() const{
    return m_oba_compliance_disabled_isSet;
}

bool OAIAdvertiserCreativeConfig::is_oba_compliance_disabled_Valid() const{
    return m_oba_compliance_disabled_isValid;
}

bool OAIAdvertiserCreativeConfig::isVideoCreativeDataSharingAuthorized() const {
    return m_video_creative_data_sharing_authorized;
}
void OAIAdvertiserCreativeConfig::setVideoCreativeDataSharingAuthorized(const bool &video_creative_data_sharing_authorized) {
    m_video_creative_data_sharing_authorized = video_creative_data_sharing_authorized;
    m_video_creative_data_sharing_authorized_isSet = true;
}

bool OAIAdvertiserCreativeConfig::is_video_creative_data_sharing_authorized_Set() const{
    return m_video_creative_data_sharing_authorized_isSet;
}

bool OAIAdvertiserCreativeConfig::is_video_creative_data_sharing_authorized_Valid() const{
    return m_video_creative_data_sharing_authorized_isValid;
}

bool OAIAdvertiserCreativeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dynamic_creative_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ias_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oba_compliance_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_creative_data_sharing_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvertiserCreativeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
