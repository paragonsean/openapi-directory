/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartner::OAIPartner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartner::OAIPartner() {
    this->initializeModel();
}

OAIPartner::~OAIPartner() {}

void OAIPartner::initializeModel() {

    m_ad_server_config_isSet = false;
    m_ad_server_config_isValid = false;

    m_billing_config_isSet = false;
    m_billing_config_isValid = false;

    m_data_access_config_isSet = false;
    m_data_access_config_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_entity_status_isSet = false;
    m_entity_status_isValid = false;

    m_exchange_config_isSet = false;
    m_exchange_config_isValid = false;

    m_general_config_isSet = false;
    m_general_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIPartner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartner::fromJsonObject(QJsonObject json) {

    m_ad_server_config_isValid = ::OpenAPI::fromJsonValue(m_ad_server_config, json[QString("adServerConfig")]);
    m_ad_server_config_isSet = !json[QString("adServerConfig")].isNull() && m_ad_server_config_isValid;

    m_billing_config_isValid = ::OpenAPI::fromJsonValue(m_billing_config, json[QString("billingConfig")]);
    m_billing_config_isSet = !json[QString("billingConfig")].isNull() && m_billing_config_isValid;

    m_data_access_config_isValid = ::OpenAPI::fromJsonValue(m_data_access_config, json[QString("dataAccessConfig")]);
    m_data_access_config_isSet = !json[QString("dataAccessConfig")].isNull() && m_data_access_config_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_entity_status_isValid = ::OpenAPI::fromJsonValue(m_entity_status, json[QString("entityStatus")]);
    m_entity_status_isSet = !json[QString("entityStatus")].isNull() && m_entity_status_isValid;

    m_exchange_config_isValid = ::OpenAPI::fromJsonValue(m_exchange_config, json[QString("exchangeConfig")]);
    m_exchange_config_isSet = !json[QString("exchangeConfig")].isNull() && m_exchange_config_isValid;

    m_general_config_isValid = ::OpenAPI::fromJsonValue(m_general_config, json[QString("generalConfig")]);
    m_general_config_isSet = !json[QString("generalConfig")].isNull() && m_general_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partnerId")]);
    m_partner_id_isSet = !json[QString("partnerId")].isNull() && m_partner_id_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIPartner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartner::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_server_config.isSet()) {
        obj.insert(QString("adServerConfig"), ::OpenAPI::toJsonValue(m_ad_server_config));
    }
    if (m_billing_config.isSet()) {
        obj.insert(QString("billingConfig"), ::OpenAPI::toJsonValue(m_billing_config));
    }
    if (m_data_access_config.isSet()) {
        obj.insert(QString("dataAccessConfig"), ::OpenAPI::toJsonValue(m_data_access_config));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_entity_status_isSet) {
        obj.insert(QString("entityStatus"), ::OpenAPI::toJsonValue(m_entity_status));
    }
    if (m_exchange_config.isSet()) {
        obj.insert(QString("exchangeConfig"), ::OpenAPI::toJsonValue(m_exchange_config));
    }
    if (m_general_config.isSet()) {
        obj.insert(QString("generalConfig"), ::OpenAPI::toJsonValue(m_general_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_partner_id_isSet) {
        obj.insert(QString("partnerId"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIPartnerAdServerConfig OAIPartner::getAdServerConfig() const {
    return m_ad_server_config;
}
void OAIPartner::setAdServerConfig(const OAIPartnerAdServerConfig &ad_server_config) {
    m_ad_server_config = ad_server_config;
    m_ad_server_config_isSet = true;
}

bool OAIPartner::is_ad_server_config_Set() const{
    return m_ad_server_config_isSet;
}

bool OAIPartner::is_ad_server_config_Valid() const{
    return m_ad_server_config_isValid;
}

OAIPartnerBillingConfig OAIPartner::getBillingConfig() const {
    return m_billing_config;
}
void OAIPartner::setBillingConfig(const OAIPartnerBillingConfig &billing_config) {
    m_billing_config = billing_config;
    m_billing_config_isSet = true;
}

bool OAIPartner::is_billing_config_Set() const{
    return m_billing_config_isSet;
}

bool OAIPartner::is_billing_config_Valid() const{
    return m_billing_config_isValid;
}

OAIPartnerDataAccessConfig OAIPartner::getDataAccessConfig() const {
    return m_data_access_config;
}
void OAIPartner::setDataAccessConfig(const OAIPartnerDataAccessConfig &data_access_config) {
    m_data_access_config = data_access_config;
    m_data_access_config_isSet = true;
}

bool OAIPartner::is_data_access_config_Set() const{
    return m_data_access_config_isSet;
}

bool OAIPartner::is_data_access_config_Valid() const{
    return m_data_access_config_isValid;
}

QString OAIPartner::getDisplayName() const {
    return m_display_name;
}
void OAIPartner::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPartner::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPartner::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIPartner::getEntityStatus() const {
    return m_entity_status;
}
void OAIPartner::setEntityStatus(const QString &entity_status) {
    m_entity_status = entity_status;
    m_entity_status_isSet = true;
}

bool OAIPartner::is_entity_status_Set() const{
    return m_entity_status_isSet;
}

bool OAIPartner::is_entity_status_Valid() const{
    return m_entity_status_isValid;
}

OAIExchangeConfig OAIPartner::getExchangeConfig() const {
    return m_exchange_config;
}
void OAIPartner::setExchangeConfig(const OAIExchangeConfig &exchange_config) {
    m_exchange_config = exchange_config;
    m_exchange_config_isSet = true;
}

bool OAIPartner::is_exchange_config_Set() const{
    return m_exchange_config_isSet;
}

bool OAIPartner::is_exchange_config_Valid() const{
    return m_exchange_config_isValid;
}

OAIPartnerGeneralConfig OAIPartner::getGeneralConfig() const {
    return m_general_config;
}
void OAIPartner::setGeneralConfig(const OAIPartnerGeneralConfig &general_config) {
    m_general_config = general_config;
    m_general_config_isSet = true;
}

bool OAIPartner::is_general_config_Set() const{
    return m_general_config_isSet;
}

bool OAIPartner::is_general_config_Valid() const{
    return m_general_config_isValid;
}

QString OAIPartner::getName() const {
    return m_name;
}
void OAIPartner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPartner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPartner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPartner::getPartnerId() const {
    return m_partner_id;
}
void OAIPartner::setPartnerId(const QString &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAIPartner::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAIPartner::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

QString OAIPartner::getUpdateTime() const {
    return m_update_time;
}
void OAIPartner::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIPartner::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIPartner::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIPartner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_server_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_access_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
