/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdGroupAd.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdGroupAd::OAIAdGroupAd(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdGroupAd::OAIAdGroupAd() {
    this->initializeModel();
}

OAIAdGroupAd::~OAIAdGroupAd() {}

void OAIAdGroupAd::initializeModel() {

    m_ad_group_ad_id_isSet = false;
    m_ad_group_ad_id_isValid = false;

    m_ad_group_id_isSet = false;
    m_ad_group_id_isValid = false;

    m_ad_urls_isSet = false;
    m_ad_urls_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_audio_ad_isSet = false;
    m_audio_ad_isValid = false;

    m_bumper_ad_isSet = false;
    m_bumper_ad_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_display_video_source_ad_isSet = false;
    m_display_video_source_ad_isValid = false;

    m_entity_status_isSet = false;
    m_entity_status_isValid = false;

    m_in_stream_ad_isSet = false;
    m_in_stream_ad_isValid = false;

    m_masthead_ad_isSet = false;
    m_masthead_ad_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_non_skippable_ad_isSet = false;
    m_non_skippable_ad_isValid = false;

    m_video_discover_ad_isSet = false;
    m_video_discover_ad_isValid = false;

    m_video_performance_ad_isSet = false;
    m_video_performance_ad_isValid = false;
}

void OAIAdGroupAd::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdGroupAd::fromJsonObject(QJsonObject json) {

    m_ad_group_ad_id_isValid = ::OpenAPI::fromJsonValue(m_ad_group_ad_id, json[QString("adGroupAdId")]);
    m_ad_group_ad_id_isSet = !json[QString("adGroupAdId")].isNull() && m_ad_group_ad_id_isValid;

    m_ad_group_id_isValid = ::OpenAPI::fromJsonValue(m_ad_group_id, json[QString("adGroupId")]);
    m_ad_group_id_isSet = !json[QString("adGroupId")].isNull() && m_ad_group_id_isValid;

    m_ad_urls_isValid = ::OpenAPI::fromJsonValue(m_ad_urls, json[QString("adUrls")]);
    m_ad_urls_isSet = !json[QString("adUrls")].isNull() && m_ad_urls_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_audio_ad_isValid = ::OpenAPI::fromJsonValue(m_audio_ad, json[QString("audioAd")]);
    m_audio_ad_isSet = !json[QString("audioAd")].isNull() && m_audio_ad_isValid;

    m_bumper_ad_isValid = ::OpenAPI::fromJsonValue(m_bumper_ad, json[QString("bumperAd")]);
    m_bumper_ad_isSet = !json[QString("bumperAd")].isNull() && m_bumper_ad_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_display_video_source_ad_isValid = ::OpenAPI::fromJsonValue(m_display_video_source_ad, json[QString("displayVideoSourceAd")]);
    m_display_video_source_ad_isSet = !json[QString("displayVideoSourceAd")].isNull() && m_display_video_source_ad_isValid;

    m_entity_status_isValid = ::OpenAPI::fromJsonValue(m_entity_status, json[QString("entityStatus")]);
    m_entity_status_isSet = !json[QString("entityStatus")].isNull() && m_entity_status_isValid;

    m_in_stream_ad_isValid = ::OpenAPI::fromJsonValue(m_in_stream_ad, json[QString("inStreamAd")]);
    m_in_stream_ad_isSet = !json[QString("inStreamAd")].isNull() && m_in_stream_ad_isValid;

    m_masthead_ad_isValid = ::OpenAPI::fromJsonValue(m_masthead_ad, json[QString("mastheadAd")]);
    m_masthead_ad_isSet = !json[QString("mastheadAd")].isNull() && m_masthead_ad_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_non_skippable_ad_isValid = ::OpenAPI::fromJsonValue(m_non_skippable_ad, json[QString("nonSkippableAd")]);
    m_non_skippable_ad_isSet = !json[QString("nonSkippableAd")].isNull() && m_non_skippable_ad_isValid;

    m_video_discover_ad_isValid = ::OpenAPI::fromJsonValue(m_video_discover_ad, json[QString("videoDiscoverAd")]);
    m_video_discover_ad_isSet = !json[QString("videoDiscoverAd")].isNull() && m_video_discover_ad_isValid;

    m_video_performance_ad_isValid = ::OpenAPI::fromJsonValue(m_video_performance_ad, json[QString("videoPerformanceAd")]);
    m_video_performance_ad_isSet = !json[QString("videoPerformanceAd")].isNull() && m_video_performance_ad_isValid;
}

QString OAIAdGroupAd::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdGroupAd::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_group_ad_id_isSet) {
        obj.insert(QString("adGroupAdId"), ::OpenAPI::toJsonValue(m_ad_group_ad_id));
    }
    if (m_ad_group_id_isSet) {
        obj.insert(QString("adGroupId"), ::OpenAPI::toJsonValue(m_ad_group_id));
    }
    if (m_ad_urls.size() > 0) {
        obj.insert(QString("adUrls"), ::OpenAPI::toJsonValue(m_ad_urls));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_audio_ad.isSet()) {
        obj.insert(QString("audioAd"), ::OpenAPI::toJsonValue(m_audio_ad));
    }
    if (m_bumper_ad.isSet()) {
        obj.insert(QString("bumperAd"), ::OpenAPI::toJsonValue(m_bumper_ad));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_display_video_source_ad.isSet()) {
        obj.insert(QString("displayVideoSourceAd"), ::OpenAPI::toJsonValue(m_display_video_source_ad));
    }
    if (m_entity_status_isSet) {
        obj.insert(QString("entityStatus"), ::OpenAPI::toJsonValue(m_entity_status));
    }
    if (m_in_stream_ad.isSet()) {
        obj.insert(QString("inStreamAd"), ::OpenAPI::toJsonValue(m_in_stream_ad));
    }
    if (m_masthead_ad.isSet()) {
        obj.insert(QString("mastheadAd"), ::OpenAPI::toJsonValue(m_masthead_ad));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_non_skippable_ad.isSet()) {
        obj.insert(QString("nonSkippableAd"), ::OpenAPI::toJsonValue(m_non_skippable_ad));
    }
    if (m_video_discover_ad.isSet()) {
        obj.insert(QString("videoDiscoverAd"), ::OpenAPI::toJsonValue(m_video_discover_ad));
    }
    if (m_video_performance_ad.isSet()) {
        obj.insert(QString("videoPerformanceAd"), ::OpenAPI::toJsonValue(m_video_performance_ad));
    }
    return obj;
}

QString OAIAdGroupAd::getAdGroupAdId() const {
    return m_ad_group_ad_id;
}
void OAIAdGroupAd::setAdGroupAdId(const QString &ad_group_ad_id) {
    m_ad_group_ad_id = ad_group_ad_id;
    m_ad_group_ad_id_isSet = true;
}

bool OAIAdGroupAd::is_ad_group_ad_id_Set() const{
    return m_ad_group_ad_id_isSet;
}

bool OAIAdGroupAd::is_ad_group_ad_id_Valid() const{
    return m_ad_group_ad_id_isValid;
}

QString OAIAdGroupAd::getAdGroupId() const {
    return m_ad_group_id;
}
void OAIAdGroupAd::setAdGroupId(const QString &ad_group_id) {
    m_ad_group_id = ad_group_id;
    m_ad_group_id_isSet = true;
}

bool OAIAdGroupAd::is_ad_group_id_Set() const{
    return m_ad_group_id_isSet;
}

bool OAIAdGroupAd::is_ad_group_id_Valid() const{
    return m_ad_group_id_isValid;
}

QList<OAIAdUrl> OAIAdGroupAd::getAdUrls() const {
    return m_ad_urls;
}
void OAIAdGroupAd::setAdUrls(const QList<OAIAdUrl> &ad_urls) {
    m_ad_urls = ad_urls;
    m_ad_urls_isSet = true;
}

bool OAIAdGroupAd::is_ad_urls_Set() const{
    return m_ad_urls_isSet;
}

bool OAIAdGroupAd::is_ad_urls_Valid() const{
    return m_ad_urls_isValid;
}

QString OAIAdGroupAd::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIAdGroupAd::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIAdGroupAd::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIAdGroupAd::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

OAIAudioAd OAIAdGroupAd::getAudioAd() const {
    return m_audio_ad;
}
void OAIAdGroupAd::setAudioAd(const OAIAudioAd &audio_ad) {
    m_audio_ad = audio_ad;
    m_audio_ad_isSet = true;
}

bool OAIAdGroupAd::is_audio_ad_Set() const{
    return m_audio_ad_isSet;
}

bool OAIAdGroupAd::is_audio_ad_Valid() const{
    return m_audio_ad_isValid;
}

OAIBumperAd OAIAdGroupAd::getBumperAd() const {
    return m_bumper_ad;
}
void OAIAdGroupAd::setBumperAd(const OAIBumperAd &bumper_ad) {
    m_bumper_ad = bumper_ad;
    m_bumper_ad_isSet = true;
}

bool OAIAdGroupAd::is_bumper_ad_Set() const{
    return m_bumper_ad_isSet;
}

bool OAIAdGroupAd::is_bumper_ad_Valid() const{
    return m_bumper_ad_isValid;
}

QString OAIAdGroupAd::getDisplayName() const {
    return m_display_name;
}
void OAIAdGroupAd::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAdGroupAd::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAdGroupAd::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIDisplayVideoSourceAd OAIAdGroupAd::getDisplayVideoSourceAd() const {
    return m_display_video_source_ad;
}
void OAIAdGroupAd::setDisplayVideoSourceAd(const OAIDisplayVideoSourceAd &display_video_source_ad) {
    m_display_video_source_ad = display_video_source_ad;
    m_display_video_source_ad_isSet = true;
}

bool OAIAdGroupAd::is_display_video_source_ad_Set() const{
    return m_display_video_source_ad_isSet;
}

bool OAIAdGroupAd::is_display_video_source_ad_Valid() const{
    return m_display_video_source_ad_isValid;
}

QString OAIAdGroupAd::getEntityStatus() const {
    return m_entity_status;
}
void OAIAdGroupAd::setEntityStatus(const QString &entity_status) {
    m_entity_status = entity_status;
    m_entity_status_isSet = true;
}

bool OAIAdGroupAd::is_entity_status_Set() const{
    return m_entity_status_isSet;
}

bool OAIAdGroupAd::is_entity_status_Valid() const{
    return m_entity_status_isValid;
}

OAIInStreamAd OAIAdGroupAd::getInStreamAd() const {
    return m_in_stream_ad;
}
void OAIAdGroupAd::setInStreamAd(const OAIInStreamAd &in_stream_ad) {
    m_in_stream_ad = in_stream_ad;
    m_in_stream_ad_isSet = true;
}

bool OAIAdGroupAd::is_in_stream_ad_Set() const{
    return m_in_stream_ad_isSet;
}

bool OAIAdGroupAd::is_in_stream_ad_Valid() const{
    return m_in_stream_ad_isValid;
}

OAIMastheadAd OAIAdGroupAd::getMastheadAd() const {
    return m_masthead_ad;
}
void OAIAdGroupAd::setMastheadAd(const OAIMastheadAd &masthead_ad) {
    m_masthead_ad = masthead_ad;
    m_masthead_ad_isSet = true;
}

bool OAIAdGroupAd::is_masthead_ad_Set() const{
    return m_masthead_ad_isSet;
}

bool OAIAdGroupAd::is_masthead_ad_Valid() const{
    return m_masthead_ad_isValid;
}

QString OAIAdGroupAd::getName() const {
    return m_name;
}
void OAIAdGroupAd::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdGroupAd::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdGroupAd::is_name_Valid() const{
    return m_name_isValid;
}

OAINonSkippableAd OAIAdGroupAd::getNonSkippableAd() const {
    return m_non_skippable_ad;
}
void OAIAdGroupAd::setNonSkippableAd(const OAINonSkippableAd &non_skippable_ad) {
    m_non_skippable_ad = non_skippable_ad;
    m_non_skippable_ad_isSet = true;
}

bool OAIAdGroupAd::is_non_skippable_ad_Set() const{
    return m_non_skippable_ad_isSet;
}

bool OAIAdGroupAd::is_non_skippable_ad_Valid() const{
    return m_non_skippable_ad_isValid;
}

OAIVideoDiscoveryAd OAIAdGroupAd::getVideoDiscoverAd() const {
    return m_video_discover_ad;
}
void OAIAdGroupAd::setVideoDiscoverAd(const OAIVideoDiscoveryAd &video_discover_ad) {
    m_video_discover_ad = video_discover_ad;
    m_video_discover_ad_isSet = true;
}

bool OAIAdGroupAd::is_video_discover_ad_Set() const{
    return m_video_discover_ad_isSet;
}

bool OAIAdGroupAd::is_video_discover_ad_Valid() const{
    return m_video_discover_ad_isValid;
}

OAIVideoPerformanceAd OAIAdGroupAd::getVideoPerformanceAd() const {
    return m_video_performance_ad;
}
void OAIAdGroupAd::setVideoPerformanceAd(const OAIVideoPerformanceAd &video_performance_ad) {
    m_video_performance_ad = video_performance_ad;
    m_video_performance_ad_isSet = true;
}

bool OAIAdGroupAd::is_video_performance_ad_Set() const{
    return m_video_performance_ad_isSet;
}

bool OAIAdGroupAd::is_video_performance_ad_Valid() const{
    return m_video_performance_ad_isValid;
}

bool OAIAdGroupAd::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_group_ad_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_ad.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bumper_ad.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_video_source_ad.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_stream_ad.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_masthead_ad.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_skippable_ad.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_discover_ad.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_performance_ad.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdGroupAd::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
