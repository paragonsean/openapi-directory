/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdFilter::OAIIdFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdFilter::OAIIdFilter() {
    this->initializeModel();
}

OAIIdFilter::~OAIIdFilter() {}

void OAIIdFilter::initializeModel() {

    m_ad_group_ad_ids_isSet = false;
    m_ad_group_ad_ids_isValid = false;

    m_ad_group_ids_isSet = false;
    m_ad_group_ids_isValid = false;

    m_campaign_ids_isSet = false;
    m_campaign_ids_isValid = false;

    m_insertion_order_ids_isSet = false;
    m_insertion_order_ids_isValid = false;

    m_line_item_ids_isSet = false;
    m_line_item_ids_isValid = false;

    m_media_product_ids_isSet = false;
    m_media_product_ids_isValid = false;
}

void OAIIdFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdFilter::fromJsonObject(QJsonObject json) {

    m_ad_group_ad_ids_isValid = ::OpenAPI::fromJsonValue(m_ad_group_ad_ids, json[QString("adGroupAdIds")]);
    m_ad_group_ad_ids_isSet = !json[QString("adGroupAdIds")].isNull() && m_ad_group_ad_ids_isValid;

    m_ad_group_ids_isValid = ::OpenAPI::fromJsonValue(m_ad_group_ids, json[QString("adGroupIds")]);
    m_ad_group_ids_isSet = !json[QString("adGroupIds")].isNull() && m_ad_group_ids_isValid;

    m_campaign_ids_isValid = ::OpenAPI::fromJsonValue(m_campaign_ids, json[QString("campaignIds")]);
    m_campaign_ids_isSet = !json[QString("campaignIds")].isNull() && m_campaign_ids_isValid;

    m_insertion_order_ids_isValid = ::OpenAPI::fromJsonValue(m_insertion_order_ids, json[QString("insertionOrderIds")]);
    m_insertion_order_ids_isSet = !json[QString("insertionOrderIds")].isNull() && m_insertion_order_ids_isValid;

    m_line_item_ids_isValid = ::OpenAPI::fromJsonValue(m_line_item_ids, json[QString("lineItemIds")]);
    m_line_item_ids_isSet = !json[QString("lineItemIds")].isNull() && m_line_item_ids_isValid;

    m_media_product_ids_isValid = ::OpenAPI::fromJsonValue(m_media_product_ids, json[QString("mediaProductIds")]);
    m_media_product_ids_isSet = !json[QString("mediaProductIds")].isNull() && m_media_product_ids_isValid;
}

QString OAIIdFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_group_ad_ids.size() > 0) {
        obj.insert(QString("adGroupAdIds"), ::OpenAPI::toJsonValue(m_ad_group_ad_ids));
    }
    if (m_ad_group_ids.size() > 0) {
        obj.insert(QString("adGroupIds"), ::OpenAPI::toJsonValue(m_ad_group_ids));
    }
    if (m_campaign_ids.size() > 0) {
        obj.insert(QString("campaignIds"), ::OpenAPI::toJsonValue(m_campaign_ids));
    }
    if (m_insertion_order_ids.size() > 0) {
        obj.insert(QString("insertionOrderIds"), ::OpenAPI::toJsonValue(m_insertion_order_ids));
    }
    if (m_line_item_ids.size() > 0) {
        obj.insert(QString("lineItemIds"), ::OpenAPI::toJsonValue(m_line_item_ids));
    }
    if (m_media_product_ids.size() > 0) {
        obj.insert(QString("mediaProductIds"), ::OpenAPI::toJsonValue(m_media_product_ids));
    }
    return obj;
}

QList<QString> OAIIdFilter::getAdGroupAdIds() const {
    return m_ad_group_ad_ids;
}
void OAIIdFilter::setAdGroupAdIds(const QList<QString> &ad_group_ad_ids) {
    m_ad_group_ad_ids = ad_group_ad_ids;
    m_ad_group_ad_ids_isSet = true;
}

bool OAIIdFilter::is_ad_group_ad_ids_Set() const{
    return m_ad_group_ad_ids_isSet;
}

bool OAIIdFilter::is_ad_group_ad_ids_Valid() const{
    return m_ad_group_ad_ids_isValid;
}

QList<QString> OAIIdFilter::getAdGroupIds() const {
    return m_ad_group_ids;
}
void OAIIdFilter::setAdGroupIds(const QList<QString> &ad_group_ids) {
    m_ad_group_ids = ad_group_ids;
    m_ad_group_ids_isSet = true;
}

bool OAIIdFilter::is_ad_group_ids_Set() const{
    return m_ad_group_ids_isSet;
}

bool OAIIdFilter::is_ad_group_ids_Valid() const{
    return m_ad_group_ids_isValid;
}

QList<QString> OAIIdFilter::getCampaignIds() const {
    return m_campaign_ids;
}
void OAIIdFilter::setCampaignIds(const QList<QString> &campaign_ids) {
    m_campaign_ids = campaign_ids;
    m_campaign_ids_isSet = true;
}

bool OAIIdFilter::is_campaign_ids_Set() const{
    return m_campaign_ids_isSet;
}

bool OAIIdFilter::is_campaign_ids_Valid() const{
    return m_campaign_ids_isValid;
}

QList<QString> OAIIdFilter::getInsertionOrderIds() const {
    return m_insertion_order_ids;
}
void OAIIdFilter::setInsertionOrderIds(const QList<QString> &insertion_order_ids) {
    m_insertion_order_ids = insertion_order_ids;
    m_insertion_order_ids_isSet = true;
}

bool OAIIdFilter::is_insertion_order_ids_Set() const{
    return m_insertion_order_ids_isSet;
}

bool OAIIdFilter::is_insertion_order_ids_Valid() const{
    return m_insertion_order_ids_isValid;
}

QList<QString> OAIIdFilter::getLineItemIds() const {
    return m_line_item_ids;
}
void OAIIdFilter::setLineItemIds(const QList<QString> &line_item_ids) {
    m_line_item_ids = line_item_ids;
    m_line_item_ids_isSet = true;
}

bool OAIIdFilter::is_line_item_ids_Set() const{
    return m_line_item_ids_isSet;
}

bool OAIIdFilter::is_line_item_ids_Valid() const{
    return m_line_item_ids_isValid;
}

QList<QString> OAIIdFilter::getMediaProductIds() const {
    return m_media_product_ids;
}
void OAIIdFilter::setMediaProductIds(const QList<QString> &media_product_ids) {
    m_media_product_ids = media_product_ids;
    m_media_product_ids_isSet = true;
}

bool OAIIdFilter::is_media_product_ids_Set() const{
    return m_media_product_ids_isSet;
}

bool OAIIdFilter::is_media_product_ids_Valid() const{
    return m_media_product_ids_isValid;
}

bool OAIIdFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_group_ad_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_insertion_order_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_item_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_product_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
