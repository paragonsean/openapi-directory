/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlgorithmRulesRuleset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlgorithmRulesRuleset::OAIAlgorithmRulesRuleset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlgorithmRulesRuleset::OAIAlgorithmRulesRuleset() {
    this->initializeModel();
}

OAIAlgorithmRulesRuleset::~OAIAlgorithmRulesRuleset() {}

void OAIAlgorithmRulesRuleset::initializeModel() {

    m_aggregation_type_isSet = false;
    m_aggregation_type_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;
}

void OAIAlgorithmRulesRuleset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlgorithmRulesRuleset::fromJsonObject(QJsonObject json) {

    m_aggregation_type_isValid = ::OpenAPI::fromJsonValue(m_aggregation_type, json[QString("aggregationType")]);
    m_aggregation_type_isSet = !json[QString("aggregationType")].isNull() && m_aggregation_type_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("maxValue")]);
    m_max_value_isSet = !json[QString("maxValue")].isNull() && m_max_value_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;
}

QString OAIAlgorithmRulesRuleset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlgorithmRulesRuleset::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_type_isSet) {
        obj.insert(QString("aggregationType"), ::OpenAPI::toJsonValue(m_aggregation_type));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("maxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    return obj;
}

QString OAIAlgorithmRulesRuleset::getAggregationType() const {
    return m_aggregation_type;
}
void OAIAlgorithmRulesRuleset::setAggregationType(const QString &aggregation_type) {
    m_aggregation_type = aggregation_type;
    m_aggregation_type_isSet = true;
}

bool OAIAlgorithmRulesRuleset::is_aggregation_type_Set() const{
    return m_aggregation_type_isSet;
}

bool OAIAlgorithmRulesRuleset::is_aggregation_type_Valid() const{
    return m_aggregation_type_isValid;
}

double OAIAlgorithmRulesRuleset::getMaxValue() const {
    return m_max_value;
}
void OAIAlgorithmRulesRuleset::setMaxValue(const double &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIAlgorithmRulesRuleset::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIAlgorithmRulesRuleset::is_max_value_Valid() const{
    return m_max_value_isValid;
}

QList<OAIAlgorithmRulesRule> OAIAlgorithmRulesRuleset::getRules() const {
    return m_rules;
}
void OAIAlgorithmRulesRuleset::setRules(const QList<OAIAlgorithmRulesRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIAlgorithmRulesRuleset::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIAlgorithmRulesRuleset::is_rules_Valid() const{
    return m_rules_isValid;
}

bool OAIAlgorithmRulesRuleset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlgorithmRulesRuleset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
