/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvertiserAdServerConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvertiserAdServerConfig::OAIAdvertiserAdServerConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvertiserAdServerConfig::OAIAdvertiserAdServerConfig() {
    this->initializeModel();
}

OAIAdvertiserAdServerConfig::~OAIAdvertiserAdServerConfig() {}

void OAIAdvertiserAdServerConfig::initializeModel() {

    m_cm_hybrid_config_isSet = false;
    m_cm_hybrid_config_isValid = false;

    m_third_party_only_config_isSet = false;
    m_third_party_only_config_isValid = false;
}

void OAIAdvertiserAdServerConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvertiserAdServerConfig::fromJsonObject(QJsonObject json) {

    m_cm_hybrid_config_isValid = ::OpenAPI::fromJsonValue(m_cm_hybrid_config, json[QString("cmHybridConfig")]);
    m_cm_hybrid_config_isSet = !json[QString("cmHybridConfig")].isNull() && m_cm_hybrid_config_isValid;

    m_third_party_only_config_isValid = ::OpenAPI::fromJsonValue(m_third_party_only_config, json[QString("thirdPartyOnlyConfig")]);
    m_third_party_only_config_isSet = !json[QString("thirdPartyOnlyConfig")].isNull() && m_third_party_only_config_isValid;
}

QString OAIAdvertiserAdServerConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvertiserAdServerConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cm_hybrid_config.isSet()) {
        obj.insert(QString("cmHybridConfig"), ::OpenAPI::toJsonValue(m_cm_hybrid_config));
    }
    if (m_third_party_only_config.isSet()) {
        obj.insert(QString("thirdPartyOnlyConfig"), ::OpenAPI::toJsonValue(m_third_party_only_config));
    }
    return obj;
}

OAICmHybridConfig OAIAdvertiserAdServerConfig::getCmHybridConfig() const {
    return m_cm_hybrid_config;
}
void OAIAdvertiserAdServerConfig::setCmHybridConfig(const OAICmHybridConfig &cm_hybrid_config) {
    m_cm_hybrid_config = cm_hybrid_config;
    m_cm_hybrid_config_isSet = true;
}

bool OAIAdvertiserAdServerConfig::is_cm_hybrid_config_Set() const{
    return m_cm_hybrid_config_isSet;
}

bool OAIAdvertiserAdServerConfig::is_cm_hybrid_config_Valid() const{
    return m_cm_hybrid_config_isValid;
}

OAIThirdPartyOnlyConfig OAIAdvertiserAdServerConfig::getThirdPartyOnlyConfig() const {
    return m_third_party_only_config;
}
void OAIAdvertiserAdServerConfig::setThirdPartyOnlyConfig(const OAIThirdPartyOnlyConfig &third_party_only_config) {
    m_third_party_only_config = third_party_only_config;
    m_third_party_only_config_isSet = true;
}

bool OAIAdvertiserAdServerConfig::is_third_party_only_config_Set() const{
    return m_third_party_only_config_isSet;
}

bool OAIAdvertiserAdServerConfig::is_third_party_only_config_Valid() const{
    return m_third_party_only_config_isValid;
}

bool OAIAdvertiserAdServerConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cm_hybrid_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_only_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvertiserAdServerConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
