/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRateDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRateDetails::OAIRateDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRateDetails::OAIRateDetails() {
    this->initializeModel();
}

OAIRateDetails::~OAIRateDetails() {}

void OAIRateDetails::initializeModel() {

    m_inventory_source_rate_type_isSet = false;
    m_inventory_source_rate_type_isValid = false;

    m_minimum_spend_isSet = false;
    m_minimum_spend_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_units_purchased_isSet = false;
    m_units_purchased_isValid = false;
}

void OAIRateDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRateDetails::fromJsonObject(QJsonObject json) {

    m_inventory_source_rate_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_source_rate_type, json[QString("inventorySourceRateType")]);
    m_inventory_source_rate_type_isSet = !json[QString("inventorySourceRateType")].isNull() && m_inventory_source_rate_type_isValid;

    m_minimum_spend_isValid = ::OpenAPI::fromJsonValue(m_minimum_spend, json[QString("minimumSpend")]);
    m_minimum_spend_isSet = !json[QString("minimumSpend")].isNull() && m_minimum_spend_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_units_purchased_isValid = ::OpenAPI::fromJsonValue(m_units_purchased, json[QString("unitsPurchased")]);
    m_units_purchased_isSet = !json[QString("unitsPurchased")].isNull() && m_units_purchased_isValid;
}

QString OAIRateDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRateDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_inventory_source_rate_type_isSet) {
        obj.insert(QString("inventorySourceRateType"), ::OpenAPI::toJsonValue(m_inventory_source_rate_type));
    }
    if (m_minimum_spend.isSet()) {
        obj.insert(QString("minimumSpend"), ::OpenAPI::toJsonValue(m_minimum_spend));
    }
    if (m_rate.isSet()) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_units_purchased_isSet) {
        obj.insert(QString("unitsPurchased"), ::OpenAPI::toJsonValue(m_units_purchased));
    }
    return obj;
}

QString OAIRateDetails::getInventorySourceRateType() const {
    return m_inventory_source_rate_type;
}
void OAIRateDetails::setInventorySourceRateType(const QString &inventory_source_rate_type) {
    m_inventory_source_rate_type = inventory_source_rate_type;
    m_inventory_source_rate_type_isSet = true;
}

bool OAIRateDetails::is_inventory_source_rate_type_Set() const{
    return m_inventory_source_rate_type_isSet;
}

bool OAIRateDetails::is_inventory_source_rate_type_Valid() const{
    return m_inventory_source_rate_type_isValid;
}

OAIMoney OAIRateDetails::getMinimumSpend() const {
    return m_minimum_spend;
}
void OAIRateDetails::setMinimumSpend(const OAIMoney &minimum_spend) {
    m_minimum_spend = minimum_spend;
    m_minimum_spend_isSet = true;
}

bool OAIRateDetails::is_minimum_spend_Set() const{
    return m_minimum_spend_isSet;
}

bool OAIRateDetails::is_minimum_spend_Valid() const{
    return m_minimum_spend_isValid;
}

OAIMoney OAIRateDetails::getRate() const {
    return m_rate;
}
void OAIRateDetails::setRate(const OAIMoney &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIRateDetails::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIRateDetails::is_rate_Valid() const{
    return m_rate_isValid;
}

QString OAIRateDetails::getUnitsPurchased() const {
    return m_units_purchased;
}
void OAIRateDetails::setUnitsPurchased(const QString &units_purchased) {
    m_units_purchased = units_purchased;
    m_units_purchased_isSet = true;
}

bool OAIRateDetails::is_units_purchased_Set() const{
    return m_units_purchased_isSet;
}

bool OAIRateDetails::is_units_purchased_Valid() const{
    return m_units_purchased_isValid;
}

bool OAIRateDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inventory_source_rate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_spend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_purchased_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRateDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
