/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactInfoList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactInfoList::OAIContactInfoList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactInfoList::OAIContactInfoList() {
    this->initializeModel();
}

OAIContactInfoList::~OAIContactInfoList() {}

void OAIContactInfoList::initializeModel() {

    m_consent_isSet = false;
    m_consent_isValid = false;

    m_contact_infos_isSet = false;
    m_contact_infos_isValid = false;
}

void OAIContactInfoList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactInfoList::fromJsonObject(QJsonObject json) {

    m_consent_isValid = ::OpenAPI::fromJsonValue(m_consent, json[QString("consent")]);
    m_consent_isSet = !json[QString("consent")].isNull() && m_consent_isValid;

    m_contact_infos_isValid = ::OpenAPI::fromJsonValue(m_contact_infos, json[QString("contactInfos")]);
    m_contact_infos_isSet = !json[QString("contactInfos")].isNull() && m_contact_infos_isValid;
}

QString OAIContactInfoList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactInfoList::asJsonObject() const {
    QJsonObject obj;
    if (m_consent.isSet()) {
        obj.insert(QString("consent"), ::OpenAPI::toJsonValue(m_consent));
    }
    if (m_contact_infos.size() > 0) {
        obj.insert(QString("contactInfos"), ::OpenAPI::toJsonValue(m_contact_infos));
    }
    return obj;
}

OAIConsent OAIContactInfoList::getConsent() const {
    return m_consent;
}
void OAIContactInfoList::setConsent(const OAIConsent &consent) {
    m_consent = consent;
    m_consent_isSet = true;
}

bool OAIContactInfoList::is_consent_Set() const{
    return m_consent_isSet;
}

bool OAIContactInfoList::is_consent_Valid() const{
    return m_consent_isValid;
}

QList<OAIContactInfo> OAIContactInfoList::getContactInfos() const {
    return m_contact_infos;
}
void OAIContactInfoList::setContactInfos(const QList<OAIContactInfo> &contact_infos) {
    m_contact_infos = contact_infos;
    m_contact_infos_isSet = true;
}

bool OAIContactInfoList::is_contact_infos_Set() const{
    return m_contact_infos_isSet;
}

bool OAIContactInfoList::is_contact_infos_Valid() const{
    return m_contact_infos_isValid;
}

bool OAIContactInfoList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactInfoList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
