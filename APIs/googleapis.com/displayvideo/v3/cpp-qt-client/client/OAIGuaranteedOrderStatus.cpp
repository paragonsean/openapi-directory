/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGuaranteedOrderStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGuaranteedOrderStatus::OAIGuaranteedOrderStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGuaranteedOrderStatus::OAIGuaranteedOrderStatus() {
    this->initializeModel();
}

OAIGuaranteedOrderStatus::~OAIGuaranteedOrderStatus() {}

void OAIGuaranteedOrderStatus::initializeModel() {

    m_config_status_isSet = false;
    m_config_status_isValid = false;

    m_entity_pause_reason_isSet = false;
    m_entity_pause_reason_isValid = false;

    m_entity_status_isSet = false;
    m_entity_status_isValid = false;
}

void OAIGuaranteedOrderStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGuaranteedOrderStatus::fromJsonObject(QJsonObject json) {

    m_config_status_isValid = ::OpenAPI::fromJsonValue(m_config_status, json[QString("configStatus")]);
    m_config_status_isSet = !json[QString("configStatus")].isNull() && m_config_status_isValid;

    m_entity_pause_reason_isValid = ::OpenAPI::fromJsonValue(m_entity_pause_reason, json[QString("entityPauseReason")]);
    m_entity_pause_reason_isSet = !json[QString("entityPauseReason")].isNull() && m_entity_pause_reason_isValid;

    m_entity_status_isValid = ::OpenAPI::fromJsonValue(m_entity_status, json[QString("entityStatus")]);
    m_entity_status_isSet = !json[QString("entityStatus")].isNull() && m_entity_status_isValid;
}

QString OAIGuaranteedOrderStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGuaranteedOrderStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_config_status_isSet) {
        obj.insert(QString("configStatus"), ::OpenAPI::toJsonValue(m_config_status));
    }
    if (m_entity_pause_reason_isSet) {
        obj.insert(QString("entityPauseReason"), ::OpenAPI::toJsonValue(m_entity_pause_reason));
    }
    if (m_entity_status_isSet) {
        obj.insert(QString("entityStatus"), ::OpenAPI::toJsonValue(m_entity_status));
    }
    return obj;
}

QString OAIGuaranteedOrderStatus::getConfigStatus() const {
    return m_config_status;
}
void OAIGuaranteedOrderStatus::setConfigStatus(const QString &config_status) {
    m_config_status = config_status;
    m_config_status_isSet = true;
}

bool OAIGuaranteedOrderStatus::is_config_status_Set() const{
    return m_config_status_isSet;
}

bool OAIGuaranteedOrderStatus::is_config_status_Valid() const{
    return m_config_status_isValid;
}

QString OAIGuaranteedOrderStatus::getEntityPauseReason() const {
    return m_entity_pause_reason;
}
void OAIGuaranteedOrderStatus::setEntityPauseReason(const QString &entity_pause_reason) {
    m_entity_pause_reason = entity_pause_reason;
    m_entity_pause_reason_isSet = true;
}

bool OAIGuaranteedOrderStatus::is_entity_pause_reason_Set() const{
    return m_entity_pause_reason_isSet;
}

bool OAIGuaranteedOrderStatus::is_entity_pause_reason_Valid() const{
    return m_entity_pause_reason_isValid;
}

QString OAIGuaranteedOrderStatus::getEntityStatus() const {
    return m_entity_status;
}
void OAIGuaranteedOrderStatus::setEntityStatus(const QString &entity_status) {
    m_entity_status = entity_status;
    m_entity_status_isSet = true;
}

bool OAIGuaranteedOrderStatus::is_entity_status_Set() const{
    return m_entity_status_isSet;
}

bool OAIGuaranteedOrderStatus::is_entity_status_Valid() const{
    return m_entity_status_isValid;
}

bool OAIGuaranteedOrderStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_pause_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGuaranteedOrderStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
