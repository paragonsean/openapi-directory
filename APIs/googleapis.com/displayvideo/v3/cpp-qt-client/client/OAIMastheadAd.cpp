/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMastheadAd.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMastheadAd::OAIMastheadAd(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMastheadAd::OAIMastheadAd() {
    this->initializeModel();
}

OAIMastheadAd::~OAIMastheadAd() {}

void OAIMastheadAd::initializeModel() {

    m_autoplay_video_duration_isSet = false;
    m_autoplay_video_duration_isValid = false;

    m_autoplay_video_start_millisecond_isSet = false;
    m_autoplay_video_start_millisecond_isValid = false;

    m_call_to_action_button_label_isSet = false;
    m_call_to_action_button_label_isValid = false;

    m_call_to_action_final_url_isSet = false;
    m_call_to_action_final_url_isValid = false;

    m_call_to_action_tracking_url_isSet = false;
    m_call_to_action_tracking_url_isValid = false;

    m_companion_youtube_videos_isSet = false;
    m_companion_youtube_videos_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_headline_isSet = false;
    m_headline_isValid = false;

    m_show_channel_art_isSet = false;
    m_show_channel_art_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;

    m_video_aspect_ratio_isSet = false;
    m_video_aspect_ratio_isValid = false;
}

void OAIMastheadAd::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMastheadAd::fromJsonObject(QJsonObject json) {

    m_autoplay_video_duration_isValid = ::OpenAPI::fromJsonValue(m_autoplay_video_duration, json[QString("autoplayVideoDuration")]);
    m_autoplay_video_duration_isSet = !json[QString("autoplayVideoDuration")].isNull() && m_autoplay_video_duration_isValid;

    m_autoplay_video_start_millisecond_isValid = ::OpenAPI::fromJsonValue(m_autoplay_video_start_millisecond, json[QString("autoplayVideoStartMillisecond")]);
    m_autoplay_video_start_millisecond_isSet = !json[QString("autoplayVideoStartMillisecond")].isNull() && m_autoplay_video_start_millisecond_isValid;

    m_call_to_action_button_label_isValid = ::OpenAPI::fromJsonValue(m_call_to_action_button_label, json[QString("callToActionButtonLabel")]);
    m_call_to_action_button_label_isSet = !json[QString("callToActionButtonLabel")].isNull() && m_call_to_action_button_label_isValid;

    m_call_to_action_final_url_isValid = ::OpenAPI::fromJsonValue(m_call_to_action_final_url, json[QString("callToActionFinalUrl")]);
    m_call_to_action_final_url_isSet = !json[QString("callToActionFinalUrl")].isNull() && m_call_to_action_final_url_isValid;

    m_call_to_action_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_call_to_action_tracking_url, json[QString("callToActionTrackingUrl")]);
    m_call_to_action_tracking_url_isSet = !json[QString("callToActionTrackingUrl")].isNull() && m_call_to_action_tracking_url_isValid;

    m_companion_youtube_videos_isValid = ::OpenAPI::fromJsonValue(m_companion_youtube_videos, json[QString("companionYoutubeVideos")]);
    m_companion_youtube_videos_isSet = !json[QString("companionYoutubeVideos")].isNull() && m_companion_youtube_videos_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_headline_isValid = ::OpenAPI::fromJsonValue(m_headline, json[QString("headline")]);
    m_headline_isSet = !json[QString("headline")].isNull() && m_headline_isValid;

    m_show_channel_art_isValid = ::OpenAPI::fromJsonValue(m_show_channel_art, json[QString("showChannelArt")]);
    m_show_channel_art_isSet = !json[QString("showChannelArt")].isNull() && m_show_channel_art_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;

    m_video_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_video_aspect_ratio, json[QString("videoAspectRatio")]);
    m_video_aspect_ratio_isSet = !json[QString("videoAspectRatio")].isNull() && m_video_aspect_ratio_isValid;
}

QString OAIMastheadAd::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMastheadAd::asJsonObject() const {
    QJsonObject obj;
    if (m_autoplay_video_duration_isSet) {
        obj.insert(QString("autoplayVideoDuration"), ::OpenAPI::toJsonValue(m_autoplay_video_duration));
    }
    if (m_autoplay_video_start_millisecond_isSet) {
        obj.insert(QString("autoplayVideoStartMillisecond"), ::OpenAPI::toJsonValue(m_autoplay_video_start_millisecond));
    }
    if (m_call_to_action_button_label_isSet) {
        obj.insert(QString("callToActionButtonLabel"), ::OpenAPI::toJsonValue(m_call_to_action_button_label));
    }
    if (m_call_to_action_final_url_isSet) {
        obj.insert(QString("callToActionFinalUrl"), ::OpenAPI::toJsonValue(m_call_to_action_final_url));
    }
    if (m_call_to_action_tracking_url_isSet) {
        obj.insert(QString("callToActionTrackingUrl"), ::OpenAPI::toJsonValue(m_call_to_action_tracking_url));
    }
    if (m_companion_youtube_videos.size() > 0) {
        obj.insert(QString("companionYoutubeVideos"), ::OpenAPI::toJsonValue(m_companion_youtube_videos));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_headline_isSet) {
        obj.insert(QString("headline"), ::OpenAPI::toJsonValue(m_headline));
    }
    if (m_show_channel_art_isSet) {
        obj.insert(QString("showChannelArt"), ::OpenAPI::toJsonValue(m_show_channel_art));
    }
    if (m_video.isSet()) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    if (m_video_aspect_ratio_isSet) {
        obj.insert(QString("videoAspectRatio"), ::OpenAPI::toJsonValue(m_video_aspect_ratio));
    }
    return obj;
}

QString OAIMastheadAd::getAutoplayVideoDuration() const {
    return m_autoplay_video_duration;
}
void OAIMastheadAd::setAutoplayVideoDuration(const QString &autoplay_video_duration) {
    m_autoplay_video_duration = autoplay_video_duration;
    m_autoplay_video_duration_isSet = true;
}

bool OAIMastheadAd::is_autoplay_video_duration_Set() const{
    return m_autoplay_video_duration_isSet;
}

bool OAIMastheadAd::is_autoplay_video_duration_Valid() const{
    return m_autoplay_video_duration_isValid;
}

QString OAIMastheadAd::getAutoplayVideoStartMillisecond() const {
    return m_autoplay_video_start_millisecond;
}
void OAIMastheadAd::setAutoplayVideoStartMillisecond(const QString &autoplay_video_start_millisecond) {
    m_autoplay_video_start_millisecond = autoplay_video_start_millisecond;
    m_autoplay_video_start_millisecond_isSet = true;
}

bool OAIMastheadAd::is_autoplay_video_start_millisecond_Set() const{
    return m_autoplay_video_start_millisecond_isSet;
}

bool OAIMastheadAd::is_autoplay_video_start_millisecond_Valid() const{
    return m_autoplay_video_start_millisecond_isValid;
}

QString OAIMastheadAd::getCallToActionButtonLabel() const {
    return m_call_to_action_button_label;
}
void OAIMastheadAd::setCallToActionButtonLabel(const QString &call_to_action_button_label) {
    m_call_to_action_button_label = call_to_action_button_label;
    m_call_to_action_button_label_isSet = true;
}

bool OAIMastheadAd::is_call_to_action_button_label_Set() const{
    return m_call_to_action_button_label_isSet;
}

bool OAIMastheadAd::is_call_to_action_button_label_Valid() const{
    return m_call_to_action_button_label_isValid;
}

QString OAIMastheadAd::getCallToActionFinalUrl() const {
    return m_call_to_action_final_url;
}
void OAIMastheadAd::setCallToActionFinalUrl(const QString &call_to_action_final_url) {
    m_call_to_action_final_url = call_to_action_final_url;
    m_call_to_action_final_url_isSet = true;
}

bool OAIMastheadAd::is_call_to_action_final_url_Set() const{
    return m_call_to_action_final_url_isSet;
}

bool OAIMastheadAd::is_call_to_action_final_url_Valid() const{
    return m_call_to_action_final_url_isValid;
}

QString OAIMastheadAd::getCallToActionTrackingUrl() const {
    return m_call_to_action_tracking_url;
}
void OAIMastheadAd::setCallToActionTrackingUrl(const QString &call_to_action_tracking_url) {
    m_call_to_action_tracking_url = call_to_action_tracking_url;
    m_call_to_action_tracking_url_isSet = true;
}

bool OAIMastheadAd::is_call_to_action_tracking_url_Set() const{
    return m_call_to_action_tracking_url_isSet;
}

bool OAIMastheadAd::is_call_to_action_tracking_url_Valid() const{
    return m_call_to_action_tracking_url_isValid;
}

QList<OAIYoutubeVideoDetails> OAIMastheadAd::getCompanionYoutubeVideos() const {
    return m_companion_youtube_videos;
}
void OAIMastheadAd::setCompanionYoutubeVideos(const QList<OAIYoutubeVideoDetails> &companion_youtube_videos) {
    m_companion_youtube_videos = companion_youtube_videos;
    m_companion_youtube_videos_isSet = true;
}

bool OAIMastheadAd::is_companion_youtube_videos_Set() const{
    return m_companion_youtube_videos_isSet;
}

bool OAIMastheadAd::is_companion_youtube_videos_Valid() const{
    return m_companion_youtube_videos_isValid;
}

QString OAIMastheadAd::getDescription() const {
    return m_description;
}
void OAIMastheadAd::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMastheadAd::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMastheadAd::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMastheadAd::getHeadline() const {
    return m_headline;
}
void OAIMastheadAd::setHeadline(const QString &headline) {
    m_headline = headline;
    m_headline_isSet = true;
}

bool OAIMastheadAd::is_headline_Set() const{
    return m_headline_isSet;
}

bool OAIMastheadAd::is_headline_Valid() const{
    return m_headline_isValid;
}

bool OAIMastheadAd::isShowChannelArt() const {
    return m_show_channel_art;
}
void OAIMastheadAd::setShowChannelArt(const bool &show_channel_art) {
    m_show_channel_art = show_channel_art;
    m_show_channel_art_isSet = true;
}

bool OAIMastheadAd::is_show_channel_art_Set() const{
    return m_show_channel_art_isSet;
}

bool OAIMastheadAd::is_show_channel_art_Valid() const{
    return m_show_channel_art_isValid;
}

OAIYoutubeVideoDetails OAIMastheadAd::getVideo() const {
    return m_video;
}
void OAIMastheadAd::setVideo(const OAIYoutubeVideoDetails &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAIMastheadAd::is_video_Set() const{
    return m_video_isSet;
}

bool OAIMastheadAd::is_video_Valid() const{
    return m_video_isValid;
}

QString OAIMastheadAd::getVideoAspectRatio() const {
    return m_video_aspect_ratio;
}
void OAIMastheadAd::setVideoAspectRatio(const QString &video_aspect_ratio) {
    m_video_aspect_ratio = video_aspect_ratio;
    m_video_aspect_ratio_isSet = true;
}

bool OAIMastheadAd::is_video_aspect_ratio_Set() const{
    return m_video_aspect_ratio_isSet;
}

bool OAIMastheadAd::is_video_aspect_ratio_Valid() const{
    return m_video_aspect_ratio_isValid;
}

bool OAIMastheadAd::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autoplay_video_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_autoplay_video_start_millisecond_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_to_action_button_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_to_action_final_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_to_action_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_companion_youtube_videos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_channel_art_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMastheadAd::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
