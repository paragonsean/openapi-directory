/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlgorithmRulesRuleCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlgorithmRulesRuleCondition::OAIAlgorithmRulesRuleCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlgorithmRulesRuleCondition::OAIAlgorithmRulesRuleCondition() {
    this->initializeModel();
}

OAIAlgorithmRulesRuleCondition::~OAIAlgorithmRulesRuleCondition() {}

void OAIAlgorithmRulesRuleCondition::initializeModel() {

    m_return_value_isSet = false;
    m_return_value_isValid = false;

    m_signal_comparisons_isSet = false;
    m_signal_comparisons_isValid = false;
}

void OAIAlgorithmRulesRuleCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlgorithmRulesRuleCondition::fromJsonObject(QJsonObject json) {

    m_return_value_isValid = ::OpenAPI::fromJsonValue(m_return_value, json[QString("returnValue")]);
    m_return_value_isSet = !json[QString("returnValue")].isNull() && m_return_value_isValid;

    m_signal_comparisons_isValid = ::OpenAPI::fromJsonValue(m_signal_comparisons, json[QString("signalComparisons")]);
    m_signal_comparisons_isSet = !json[QString("signalComparisons")].isNull() && m_signal_comparisons_isValid;
}

QString OAIAlgorithmRulesRuleCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlgorithmRulesRuleCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_return_value.isSet()) {
        obj.insert(QString("returnValue"), ::OpenAPI::toJsonValue(m_return_value));
    }
    if (m_signal_comparisons.size() > 0) {
        obj.insert(QString("signalComparisons"), ::OpenAPI::toJsonValue(m_signal_comparisons));
    }
    return obj;
}

OAIAlgorithmRulesSignalValue OAIAlgorithmRulesRuleCondition::getReturnValue() const {
    return m_return_value;
}
void OAIAlgorithmRulesRuleCondition::setReturnValue(const OAIAlgorithmRulesSignalValue &return_value) {
    m_return_value = return_value;
    m_return_value_isSet = true;
}

bool OAIAlgorithmRulesRuleCondition::is_return_value_Set() const{
    return m_return_value_isSet;
}

bool OAIAlgorithmRulesRuleCondition::is_return_value_Valid() const{
    return m_return_value_isValid;
}

QList<OAIAlgorithmRulesSignalComparison> OAIAlgorithmRulesRuleCondition::getSignalComparisons() const {
    return m_signal_comparisons;
}
void OAIAlgorithmRulesRuleCondition::setSignalComparisons(const QList<OAIAlgorithmRulesSignalComparison> &signal_comparisons) {
    m_signal_comparisons = signal_comparisons;
    m_signal_comparisons_isSet = true;
}

bool OAIAlgorithmRulesRuleCondition::is_signal_comparisons_Set() const{
    return m_signal_comparisons_isSet;
}

bool OAIAlgorithmRulesRuleCondition::is_signal_comparisons_Valid() const{
    return m_signal_comparisons_isValid;
}

bool OAIAlgorithmRulesRuleCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_return_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_comparisons.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlgorithmRulesRuleCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
