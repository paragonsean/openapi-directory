/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdvertisersApi_H
#define OAI_OAIAdvertisersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdGroup.h"
#include "OAIAdGroupAd.h"
#include "OAIAdvertiser.h"
#include "OAIAssignedLocation.h"
#include "OAIAssignedTargetingOption.h"
#include "OAIAuditAdvertiserResponse.h"
#include "OAIBulkEditAdvertiserAssignedTargetingOptionsRequest.h"
#include "OAIBulkEditAdvertiserAssignedTargetingOptionsResponse.h"
#include "OAIBulkEditAssignedLocationsRequest.h"
#include "OAIBulkEditAssignedLocationsResponse.h"
#include "OAIBulkEditAssignedTargetingOptionsRequest.h"
#include "OAIBulkEditAssignedTargetingOptionsResponse.h"
#include "OAIBulkEditNegativeKeywordsRequest.h"
#include "OAIBulkEditNegativeKeywordsResponse.h"
#include "OAIBulkEditSitesRequest.h"
#include "OAIBulkEditSitesResponse.h"
#include "OAIBulkListAdGroupAssignedTargetingOptionsResponse.h"
#include "OAIBulkListAdvertiserAssignedTargetingOptionsResponse.h"
#include "OAIBulkListAssignedTargetingOptionsResponse.h"
#include "OAIBulkListCampaignAssignedTargetingOptionsResponse.h"
#include "OAIBulkListInsertionOrderAssignedTargetingOptionsResponse.h"
#include "OAIBulkUpdateLineItemsRequest.h"
#include "OAIBulkUpdateLineItemsResponse.h"
#include "OAICampaign.h"
#include "OAIChannel.h"
#include "OAICreateAssetRequest.h"
#include "OAICreateAssetResponse.h"
#include "OAICreative.h"
#include "OAIDuplicateLineItemRequest.h"
#include "OAIDuplicateLineItemResponse.h"
#include "OAIGenerateDefaultLineItemRequest.h"
#include "OAIInsertionOrder.h"
#include "OAILineItem.h"
#include "OAIListAdGroupAdsResponse.h"
#include "OAIListAdGroupAssignedTargetingOptionsResponse.h"
#include "OAIListAdGroupsResponse.h"
#include "OAIListAdvertiserAssignedTargetingOptionsResponse.h"
#include "OAIListAdvertisersResponse.h"
#include "OAIListAssignedLocationsResponse.h"
#include "OAIListCampaignAssignedTargetingOptionsResponse.h"
#include "OAIListCampaignsResponse.h"
#include "OAIListChannelsResponse.h"
#include "OAIListCreativesResponse.h"
#include "OAIListInsertionOrderAssignedTargetingOptionsResponse.h"
#include "OAIListInsertionOrdersResponse.h"
#include "OAIListInvoicesResponse.h"
#include "OAIListLineItemAssignedTargetingOptionsResponse.h"
#include "OAIListLineItemsResponse.h"
#include "OAIListLocationListsResponse.h"
#include "OAIListNegativeKeywordListsResponse.h"
#include "OAIListNegativeKeywordsResponse.h"
#include "OAIListSitesResponse.h"
#include "OAILocationList.h"
#include "OAILookupInvoiceCurrencyResponse.h"
#include "OAINegativeKeywordList.h"
#include "OAIObject.h"
#include "OAIReplaceNegativeKeywordsRequest.h"
#include "OAIReplaceNegativeKeywordsResponse.h"
#include "OAIReplaceSitesRequest.h"
#include "OAIReplaceSitesResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdvertisersApi : public QObject {
    Q_OBJECT

public:
    OAIAdvertisersApi(const int timeOut = 0);
    ~OAIAdvertisersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  ad_group_ad_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_adGroupAds_get(const QString &advertiser_id, const QString &ad_group_ad_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_adGroupAds_list(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  ad_group_ids QList<QString> [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_adGroups_bulkListAdGroupAssignedTargetingOptions(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &ad_group_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  ad_group_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_adGroups_get(const QString &advertiser_id, const QString &ad_group_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_adGroups_list(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  ad_group_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  assigned_targeting_option_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_get(const QString &advertiser_id, const QString &ad_group_id, const QString &targeting_type, const QString &assigned_targeting_option_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  ad_group_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_list(const QString &advertiser_id, const QString &ad_group_id, const QString &targeting_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_create_asset_request OAICreateAssetRequest [optional]
    */
    virtual void displayvideo_advertisers_assets_upload(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateAssetRequest> &oai_create_asset_request = ::OpenAPI::OptionalParam<OAICreateAssetRequest>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void displayvideo_advertisers_audit(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_campaign OAICampaign [optional]
    */
    virtual void displayvideo_advertisers_campaigns_create(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICampaign> &oai_campaign = ::OpenAPI::OptionalParam<OAICampaign>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_campaigns_delete(const QString &advertiser_id, const QString &campaign_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_campaigns_get(const QString &advertiser_id, const QString &campaign_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_campaigns_list(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_campaigns_listAssignedTargetingOptions(const QString &advertiser_id, const QString &campaign_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_campaign OAICampaign [optional]
    */
    virtual void displayvideo_advertisers_campaigns_patch(const QString &advertiser_id, const QString &campaign_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICampaign> &oai_campaign = ::OpenAPI::OptionalParam<OAICampaign>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  assigned_targeting_option_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_get(const QString &advertiser_id, const QString &campaign_id, const QString &targeting_type, const QString &assigned_targeting_option_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_list(const QString &advertiser_id, const QString &campaign_id, const QString &targeting_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  partner_id QString [optional]
    * @param[in]  oai_channel OAIChannel [optional]
    */
    virtual void displayvideo_advertisers_channels_create(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIChannel> &oai_channel = ::OpenAPI::OptionalParam<OAIChannel>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  partner_id QString [optional]
    */
    virtual void displayvideo_advertisers_channels_list(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  partner_id QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_channel OAIChannel [optional]
    */
    virtual void displayvideo_advertisers_channels_patch(const QString &advertiser_id, const QString &channel_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIChannel> &oai_channel = ::OpenAPI::OptionalParam<OAIChannel>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_bulk_edit_sites_request OAIBulkEditSitesRequest [optional]
    */
    virtual void displayvideo_advertisers_channels_sites_bulkEdit(const QString &advertiser_id, const QString &channel_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBulkEditSitesRequest> &oai_bulk_edit_sites_request = ::OpenAPI::OptionalParam<OAIBulkEditSitesRequest>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  url_or_app_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  partner_id QString [optional]
    */
    virtual void displayvideo_advertisers_channels_sites_delete(const QString &advertiser_id, const QString &channel_id, const QString &url_or_app_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  partner_id QString [optional]
    */
    virtual void displayvideo_advertisers_channels_sites_list(const QString &advertiser_id, const QString &channel_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_replace_sites_request OAIReplaceSitesRequest [optional]
    */
    virtual void displayvideo_advertisers_channels_sites_replace(const QString &advertiser_id, const QString &channel_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIReplaceSitesRequest> &oai_replace_sites_request = ::OpenAPI::OptionalParam<OAIReplaceSitesRequest>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_advertiser OAIAdvertiser [optional]
    */
    virtual void displayvideo_advertisers_create(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAdvertiser> &oai_advertiser = ::OpenAPI::OptionalParam<OAIAdvertiser>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_creative OAICreative [optional]
    */
    virtual void displayvideo_advertisers_creatives_create(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreative> &oai_creative = ::OpenAPI::OptionalParam<OAICreative>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  creative_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_creatives_delete(const QString &advertiser_id, const QString &creative_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  creative_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_creatives_get(const QString &advertiser_id, const QString &creative_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_creatives_list(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  creative_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_creative OAICreative [optional]
    */
    virtual void displayvideo_advertisers_creatives_patch(const QString &advertiser_id, const QString &creative_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreative> &oai_creative = ::OpenAPI::OptionalParam<OAICreative>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_delete(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_bulk_edit_advertiser_assigned_targeting_options_request OAIBulkEditAdvertiserAssignedTargetingOptionsRequest [optional]
    */
    virtual void displayvideo_advertisers_editAssignedTargetingOptions(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBulkEditAdvertiserAssignedTargetingOptionsRequest> &oai_bulk_edit_advertiser_assigned_targeting_options_request = ::OpenAPI::OptionalParam<OAIBulkEditAdvertiserAssignedTargetingOptionsRequest>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_get(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_insertion_order OAIInsertionOrder [optional]
    */
    virtual void displayvideo_advertisers_insertionOrders_create(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIInsertionOrder> &oai_insertion_order = ::OpenAPI::OptionalParam<OAIInsertionOrder>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  insertion_order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_insertionOrders_delete(const QString &advertiser_id, const QString &insertion_order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  insertion_order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_insertionOrders_get(const QString &advertiser_id, const QString &insertion_order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_insertionOrders_list(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  insertion_order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_insertionOrders_listAssignedTargetingOptions(const QString &advertiser_id, const QString &insertion_order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  insertion_order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_insertion_order OAIInsertionOrder [optional]
    */
    virtual void displayvideo_advertisers_insertionOrders_patch(const QString &advertiser_id, const QString &insertion_order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIInsertionOrder> &oai_insertion_order = ::OpenAPI::OptionalParam<OAIInsertionOrder>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  insertion_order_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_assigned_targeting_option OAIAssignedTargetingOption [optional]
    */
    virtual void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_create(const QString &advertiser_id, const QString &insertion_order_id, const QString &targeting_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAssignedTargetingOption> &oai_assigned_targeting_option = ::OpenAPI::OptionalParam<OAIAssignedTargetingOption>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  insertion_order_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  assigned_targeting_option_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_delete(const QString &advertiser_id, const QString &insertion_order_id, const QString &targeting_type, const QString &assigned_targeting_option_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  insertion_order_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  assigned_targeting_option_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_get(const QString &advertiser_id, const QString &insertion_order_id, const QString &targeting_type, const QString &assigned_targeting_option_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  insertion_order_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_list(const QString &advertiser_id, const QString &insertion_order_id, const QString &targeting_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  issue_month QString [optional]
    * @param[in]  loi_sapin_invoice_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_invoices_list(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &issue_month = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &loi_sapin_invoice_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  invoice_month QString [optional]
    */
    virtual void displayvideo_advertisers_invoices_lookupInvoiceCurrency(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &invoice_month = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_bulk_edit_assigned_targeting_options_request OAIBulkEditAssignedTargetingOptionsRequest [optional]
    */
    virtual void displayvideo_advertisers_lineItems_bulkEditAssignedTargetingOptions(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBulkEditAssignedTargetingOptionsRequest> &oai_bulk_edit_assigned_targeting_options_request = ::OpenAPI::OptionalParam<OAIBulkEditAssignedTargetingOptionsRequest>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  line_item_ids QList<QString> [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_lineItems_bulkListAssignedTargetingOptions(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &line_item_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_bulk_update_line_items_request OAIBulkUpdateLineItemsRequest [optional]
    */
    virtual void displayvideo_advertisers_lineItems_bulkUpdate(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBulkUpdateLineItemsRequest> &oai_bulk_update_line_items_request = ::OpenAPI::OptionalParam<OAIBulkUpdateLineItemsRequest>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_line_item OAILineItem [optional]
    */
    virtual void displayvideo_advertisers_lineItems_create(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAILineItem> &oai_line_item = ::OpenAPI::OptionalParam<OAILineItem>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  line_item_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_lineItems_delete(const QString &advertiser_id, const QString &line_item_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  line_item_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_duplicate_line_item_request OAIDuplicateLineItemRequest [optional]
    */
    virtual void displayvideo_advertisers_lineItems_duplicate(const QString &advertiser_id, const QString &line_item_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDuplicateLineItemRequest> &oai_duplicate_line_item_request = ::OpenAPI::OptionalParam<OAIDuplicateLineItemRequest>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_generate_default_line_item_request OAIGenerateDefaultLineItemRequest [optional]
    */
    virtual void displayvideo_advertisers_lineItems_generateDefault(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGenerateDefaultLineItemRequest> &oai_generate_default_line_item_request = ::OpenAPI::OptionalParam<OAIGenerateDefaultLineItemRequest>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  line_item_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_lineItems_get(const QString &advertiser_id, const QString &line_item_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_lineItems_list(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  line_item_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_line_item OAILineItem [optional]
    */
    virtual void displayvideo_advertisers_lineItems_patch(const QString &advertiser_id, const QString &line_item_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAILineItem> &oai_line_item = ::OpenAPI::OptionalParam<OAILineItem>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  line_item_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_assigned_targeting_option OAIAssignedTargetingOption [optional]
    */
    virtual void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_create(const QString &advertiser_id, const QString &line_item_id, const QString &targeting_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAssignedTargetingOption> &oai_assigned_targeting_option = ::OpenAPI::OptionalParam<OAIAssignedTargetingOption>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  line_item_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  assigned_targeting_option_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_delete(const QString &advertiser_id, const QString &line_item_id, const QString &targeting_type, const QString &assigned_targeting_option_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  line_item_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  assigned_targeting_option_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_get(const QString &advertiser_id, const QString &line_item_id, const QString &targeting_type, const QString &assigned_targeting_option_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  line_item_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_list(const QString &advertiser_id, const QString &line_item_id, const QString &targeting_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  partner_id QString [optional]
    */
    virtual void displayvideo_advertisers_list(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_listAssignedTargetingOptions(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  location_list_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_bulk_edit_assigned_locations_request OAIBulkEditAssignedLocationsRequest [optional]
    */
    virtual void displayvideo_advertisers_locationLists_assignedLocations_bulkEdit(const QString &advertiser_id, const QString &location_list_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBulkEditAssignedLocationsRequest> &oai_bulk_edit_assigned_locations_request = ::OpenAPI::OptionalParam<OAIBulkEditAssignedLocationsRequest>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  location_list_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_assigned_location OAIAssignedLocation [optional]
    */
    virtual void displayvideo_advertisers_locationLists_assignedLocations_create(const QString &advertiser_id, const QString &location_list_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAssignedLocation> &oai_assigned_location = ::OpenAPI::OptionalParam<OAIAssignedLocation>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  location_list_id QString [required]
    * @param[in]  assigned_location_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_locationLists_assignedLocations_delete(const QString &advertiser_id, const QString &location_list_id, const QString &assigned_location_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  location_list_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_locationLists_assignedLocations_list(const QString &advertiser_id, const QString &location_list_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_location_list OAILocationList [optional]
    */
    virtual void displayvideo_advertisers_locationLists_create(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAILocationList> &oai_location_list = ::OpenAPI::OptionalParam<OAILocationList>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_locationLists_list(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  location_list_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_location_list OAILocationList [optional]
    */
    virtual void displayvideo_advertisers_locationLists_patch(const QString &advertiser_id, const QString &location_list_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAILocationList> &oai_location_list = ::OpenAPI::OptionalParam<OAILocationList>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_negative_keyword_list OAINegativeKeywordList [optional]
    */
    virtual void displayvideo_advertisers_negativeKeywordLists_create(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINegativeKeywordList> &oai_negative_keyword_list = ::OpenAPI::OptionalParam<OAINegativeKeywordList>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_negativeKeywordLists_list(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  negative_keyword_list_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_bulk_edit_negative_keywords_request OAIBulkEditNegativeKeywordsRequest [optional]
    */
    virtual void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_bulkEdit(const QString &advertiser_id, const QString &negative_keyword_list_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBulkEditNegativeKeywordsRequest> &oai_bulk_edit_negative_keywords_request = ::OpenAPI::OptionalParam<OAIBulkEditNegativeKeywordsRequest>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  negative_keyword_list_id QString [required]
    * @param[in]  keyword_value QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_delete(const QString &advertiser_id, const QString &negative_keyword_list_id, const QString &keyword_value, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  negative_keyword_list_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_list(const QString &advertiser_id, const QString &negative_keyword_list_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  negative_keyword_list_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_replace_negative_keywords_request OAIReplaceNegativeKeywordsRequest [optional]
    */
    virtual void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_replace(const QString &advertiser_id, const QString &negative_keyword_list_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIReplaceNegativeKeywordsRequest> &oai_replace_negative_keywords_request = ::OpenAPI::OptionalParam<OAIReplaceNegativeKeywordsRequest>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  negative_keyword_list_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_negative_keyword_list OAINegativeKeywordList [optional]
    */
    virtual void displayvideo_advertisers_negativeKeywordLists_patch(const QString &advertiser_id, const QString &negative_keyword_list_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINegativeKeywordList> &oai_negative_keyword_list = ::OpenAPI::OptionalParam<OAINegativeKeywordList>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_advertiser OAIAdvertiser [optional]
    */
    virtual void displayvideo_advertisers_patch(const QString &advertiser_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAdvertiser> &oai_advertiser = ::OpenAPI::OptionalParam<OAIAdvertiser>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_assigned_targeting_option OAIAssignedTargetingOption [optional]
    */
    virtual void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_create(const QString &advertiser_id, const QString &targeting_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAssignedTargetingOption> &oai_assigned_targeting_option = ::OpenAPI::OptionalParam<OAIAssignedTargetingOption>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  assigned_targeting_option_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_delete(const QString &advertiser_id, const QString &targeting_type, const QString &assigned_targeting_option_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  assigned_targeting_option_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_get(const QString &advertiser_id, const QString &targeting_type, const QString &assigned_targeting_option_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  advertiser_id QString [required]
    * @param[in]  targeting_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_list(const QString &advertiser_id, const QString &targeting_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void displayvideo_advertisers_adGroupAds_getCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_adGroupAds_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_adGroups_bulkListAdGroupAssignedTargetingOptionsCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_adGroups_getCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_adGroups_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_getCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_assets_uploadCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_auditCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_campaigns_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_campaigns_deleteCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_campaigns_getCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_campaigns_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_campaigns_listAssignedTargetingOptionsCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_campaigns_patchCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_getCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_channels_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_channels_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_channels_patchCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_channels_sites_bulkEditCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_channels_sites_deleteCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_channels_sites_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_channels_sites_replaceCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_creatives_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_creatives_deleteCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_creatives_getCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_creatives_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_creatives_patchCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_deleteCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_editAssignedTargetingOptionsCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_getCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_insertionOrders_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_insertionOrders_deleteCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_insertionOrders_getCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_insertionOrders_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_insertionOrders_listAssignedTargetingOptionsCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_insertionOrders_patchCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_deleteCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_getCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_invoices_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_invoices_lookupInvoiceCurrencyCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_lineItems_bulkEditAssignedTargetingOptionsCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_lineItems_bulkListAssignedTargetingOptionsCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_lineItems_bulkUpdateCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_lineItems_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_lineItems_deleteCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_lineItems_duplicateCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_lineItems_generateDefaultCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_lineItems_getCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_lineItems_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_lineItems_patchCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_deleteCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_getCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_listAssignedTargetingOptionsCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_locationLists_assignedLocations_bulkEditCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_locationLists_assignedLocations_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_locationLists_assignedLocations_deleteCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_locationLists_assignedLocations_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_locationLists_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_locationLists_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_locationLists_patchCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_negativeKeywordLists_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_negativeKeywordLists_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_bulkEditCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_deleteCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_replaceCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_negativeKeywordLists_patchCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_patchCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_deleteCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_getCallback(OAIHttpRequestWorker *worker);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void displayvideo_advertisers_adGroupAds_getSignal(OAIAdGroupAd summary);
    void displayvideo_advertisers_adGroupAds_listSignal(OAIListAdGroupAdsResponse summary);
    void displayvideo_advertisers_adGroups_bulkListAdGroupAssignedTargetingOptionsSignal(OAIBulkListAdGroupAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_adGroups_getSignal(OAIAdGroup summary);
    void displayvideo_advertisers_adGroups_listSignal(OAIListAdGroupsResponse summary);
    void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_getSignal(OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_listSignal(OAIListAdGroupAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_assets_uploadSignal(OAICreateAssetResponse summary);
    void displayvideo_advertisers_auditSignal(OAIAuditAdvertiserResponse summary);
    void displayvideo_advertisers_campaigns_createSignal(OAICampaign summary);
    void displayvideo_advertisers_campaigns_deleteSignal(OAIObject summary);
    void displayvideo_advertisers_campaigns_getSignal(OAICampaign summary);
    void displayvideo_advertisers_campaigns_listSignal(OAIListCampaignsResponse summary);
    void displayvideo_advertisers_campaigns_listAssignedTargetingOptionsSignal(OAIBulkListCampaignAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_campaigns_patchSignal(OAICampaign summary);
    void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_getSignal(OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_listSignal(OAIListCampaignAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_channels_createSignal(OAIChannel summary);
    void displayvideo_advertisers_channels_listSignal(OAIListChannelsResponse summary);
    void displayvideo_advertisers_channels_patchSignal(OAIChannel summary);
    void displayvideo_advertisers_channels_sites_bulkEditSignal(OAIBulkEditSitesResponse summary);
    void displayvideo_advertisers_channels_sites_deleteSignal(OAIObject summary);
    void displayvideo_advertisers_channels_sites_listSignal(OAIListSitesResponse summary);
    void displayvideo_advertisers_channels_sites_replaceSignal(OAIReplaceSitesResponse summary);
    void displayvideo_advertisers_createSignal(OAIAdvertiser summary);
    void displayvideo_advertisers_creatives_createSignal(OAICreative summary);
    void displayvideo_advertisers_creatives_deleteSignal(OAIObject summary);
    void displayvideo_advertisers_creatives_getSignal(OAICreative summary);
    void displayvideo_advertisers_creatives_listSignal(OAIListCreativesResponse summary);
    void displayvideo_advertisers_creatives_patchSignal(OAICreative summary);
    void displayvideo_advertisers_deleteSignal(OAIObject summary);
    void displayvideo_advertisers_editAssignedTargetingOptionsSignal(OAIBulkEditAdvertiserAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_getSignal(OAIAdvertiser summary);
    void displayvideo_advertisers_insertionOrders_createSignal(OAIInsertionOrder summary);
    void displayvideo_advertisers_insertionOrders_deleteSignal(OAIObject summary);
    void displayvideo_advertisers_insertionOrders_getSignal(OAIInsertionOrder summary);
    void displayvideo_advertisers_insertionOrders_listSignal(OAIListInsertionOrdersResponse summary);
    void displayvideo_advertisers_insertionOrders_listAssignedTargetingOptionsSignal(OAIBulkListInsertionOrderAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_insertionOrders_patchSignal(OAIInsertionOrder summary);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_createSignal(OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_deleteSignal(OAIObject summary);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_getSignal(OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_listSignal(OAIListInsertionOrderAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_invoices_listSignal(OAIListInvoicesResponse summary);
    void displayvideo_advertisers_invoices_lookupInvoiceCurrencySignal(OAILookupInvoiceCurrencyResponse summary);
    void displayvideo_advertisers_lineItems_bulkEditAssignedTargetingOptionsSignal(OAIBulkEditAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_lineItems_bulkListAssignedTargetingOptionsSignal(OAIBulkListAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_lineItems_bulkUpdateSignal(OAIBulkUpdateLineItemsResponse summary);
    void displayvideo_advertisers_lineItems_createSignal(OAILineItem summary);
    void displayvideo_advertisers_lineItems_deleteSignal(OAIObject summary);
    void displayvideo_advertisers_lineItems_duplicateSignal(OAIDuplicateLineItemResponse summary);
    void displayvideo_advertisers_lineItems_generateDefaultSignal(OAILineItem summary);
    void displayvideo_advertisers_lineItems_getSignal(OAILineItem summary);
    void displayvideo_advertisers_lineItems_listSignal(OAIListLineItemsResponse summary);
    void displayvideo_advertisers_lineItems_patchSignal(OAILineItem summary);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_createSignal(OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_deleteSignal(OAIObject summary);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_getSignal(OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_listSignal(OAIListLineItemAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_listSignal(OAIListAdvertisersResponse summary);
    void displayvideo_advertisers_listAssignedTargetingOptionsSignal(OAIBulkListAdvertiserAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_locationLists_assignedLocations_bulkEditSignal(OAIBulkEditAssignedLocationsResponse summary);
    void displayvideo_advertisers_locationLists_assignedLocations_createSignal(OAIAssignedLocation summary);
    void displayvideo_advertisers_locationLists_assignedLocations_deleteSignal(OAIObject summary);
    void displayvideo_advertisers_locationLists_assignedLocations_listSignal(OAIListAssignedLocationsResponse summary);
    void displayvideo_advertisers_locationLists_createSignal(OAILocationList summary);
    void displayvideo_advertisers_locationLists_listSignal(OAIListLocationListsResponse summary);
    void displayvideo_advertisers_locationLists_patchSignal(OAILocationList summary);
    void displayvideo_advertisers_negativeKeywordLists_createSignal(OAINegativeKeywordList summary);
    void displayvideo_advertisers_negativeKeywordLists_listSignal(OAIListNegativeKeywordListsResponse summary);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_bulkEditSignal(OAIBulkEditNegativeKeywordsResponse summary);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_deleteSignal(OAIObject summary);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_listSignal(OAIListNegativeKeywordsResponse summary);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_replaceSignal(OAIReplaceNegativeKeywordsResponse summary);
    void displayvideo_advertisers_negativeKeywordLists_patchSignal(OAINegativeKeywordList summary);
    void displayvideo_advertisers_patchSignal(OAIAdvertiser summary);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_createSignal(OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_deleteSignal(OAIObject summary);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_getSignal(OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_listSignal(OAIListAdvertiserAssignedTargetingOptionsResponse summary);


    void displayvideo_advertisers_adGroupAds_getSignalFull(OAIHttpRequestWorker *worker, OAIAdGroupAd summary);
    void displayvideo_advertisers_adGroupAds_listSignalFull(OAIHttpRequestWorker *worker, OAIListAdGroupAdsResponse summary);
    void displayvideo_advertisers_adGroups_bulkListAdGroupAssignedTargetingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIBulkListAdGroupAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_adGroups_getSignalFull(OAIHttpRequestWorker *worker, OAIAdGroup summary);
    void displayvideo_advertisers_adGroups_listSignalFull(OAIHttpRequestWorker *worker, OAIListAdGroupsResponse summary);
    void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_getSignalFull(OAIHttpRequestWorker *worker, OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_listSignalFull(OAIHttpRequestWorker *worker, OAIListAdGroupAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_assets_uploadSignalFull(OAIHttpRequestWorker *worker, OAICreateAssetResponse summary);
    void displayvideo_advertisers_auditSignalFull(OAIHttpRequestWorker *worker, OAIAuditAdvertiserResponse summary);
    void displayvideo_advertisers_campaigns_createSignalFull(OAIHttpRequestWorker *worker, OAICampaign summary);
    void displayvideo_advertisers_campaigns_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void displayvideo_advertisers_campaigns_getSignalFull(OAIHttpRequestWorker *worker, OAICampaign summary);
    void displayvideo_advertisers_campaigns_listSignalFull(OAIHttpRequestWorker *worker, OAIListCampaignsResponse summary);
    void displayvideo_advertisers_campaigns_listAssignedTargetingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIBulkListCampaignAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_campaigns_patchSignalFull(OAIHttpRequestWorker *worker, OAICampaign summary);
    void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_getSignalFull(OAIHttpRequestWorker *worker, OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_listSignalFull(OAIHttpRequestWorker *worker, OAIListCampaignAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_channels_createSignalFull(OAIHttpRequestWorker *worker, OAIChannel summary);
    void displayvideo_advertisers_channels_listSignalFull(OAIHttpRequestWorker *worker, OAIListChannelsResponse summary);
    void displayvideo_advertisers_channels_patchSignalFull(OAIHttpRequestWorker *worker, OAIChannel summary);
    void displayvideo_advertisers_channels_sites_bulkEditSignalFull(OAIHttpRequestWorker *worker, OAIBulkEditSitesResponse summary);
    void displayvideo_advertisers_channels_sites_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void displayvideo_advertisers_channels_sites_listSignalFull(OAIHttpRequestWorker *worker, OAIListSitesResponse summary);
    void displayvideo_advertisers_channels_sites_replaceSignalFull(OAIHttpRequestWorker *worker, OAIReplaceSitesResponse summary);
    void displayvideo_advertisers_createSignalFull(OAIHttpRequestWorker *worker, OAIAdvertiser summary);
    void displayvideo_advertisers_creatives_createSignalFull(OAIHttpRequestWorker *worker, OAICreative summary);
    void displayvideo_advertisers_creatives_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void displayvideo_advertisers_creatives_getSignalFull(OAIHttpRequestWorker *worker, OAICreative summary);
    void displayvideo_advertisers_creatives_listSignalFull(OAIHttpRequestWorker *worker, OAIListCreativesResponse summary);
    void displayvideo_advertisers_creatives_patchSignalFull(OAIHttpRequestWorker *worker, OAICreative summary);
    void displayvideo_advertisers_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void displayvideo_advertisers_editAssignedTargetingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIBulkEditAdvertiserAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_getSignalFull(OAIHttpRequestWorker *worker, OAIAdvertiser summary);
    void displayvideo_advertisers_insertionOrders_createSignalFull(OAIHttpRequestWorker *worker, OAIInsertionOrder summary);
    void displayvideo_advertisers_insertionOrders_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void displayvideo_advertisers_insertionOrders_getSignalFull(OAIHttpRequestWorker *worker, OAIInsertionOrder summary);
    void displayvideo_advertisers_insertionOrders_listSignalFull(OAIHttpRequestWorker *worker, OAIListInsertionOrdersResponse summary);
    void displayvideo_advertisers_insertionOrders_listAssignedTargetingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIBulkListInsertionOrderAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_insertionOrders_patchSignalFull(OAIHttpRequestWorker *worker, OAIInsertionOrder summary);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_createSignalFull(OAIHttpRequestWorker *worker, OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_getSignalFull(OAIHttpRequestWorker *worker, OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_listSignalFull(OAIHttpRequestWorker *worker, OAIListInsertionOrderAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_invoices_listSignalFull(OAIHttpRequestWorker *worker, OAIListInvoicesResponse summary);
    void displayvideo_advertisers_invoices_lookupInvoiceCurrencySignalFull(OAIHttpRequestWorker *worker, OAILookupInvoiceCurrencyResponse summary);
    void displayvideo_advertisers_lineItems_bulkEditAssignedTargetingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIBulkEditAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_lineItems_bulkListAssignedTargetingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIBulkListAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_lineItems_bulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBulkUpdateLineItemsResponse summary);
    void displayvideo_advertisers_lineItems_createSignalFull(OAIHttpRequestWorker *worker, OAILineItem summary);
    void displayvideo_advertisers_lineItems_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void displayvideo_advertisers_lineItems_duplicateSignalFull(OAIHttpRequestWorker *worker, OAIDuplicateLineItemResponse summary);
    void displayvideo_advertisers_lineItems_generateDefaultSignalFull(OAIHttpRequestWorker *worker, OAILineItem summary);
    void displayvideo_advertisers_lineItems_getSignalFull(OAIHttpRequestWorker *worker, OAILineItem summary);
    void displayvideo_advertisers_lineItems_listSignalFull(OAIHttpRequestWorker *worker, OAIListLineItemsResponse summary);
    void displayvideo_advertisers_lineItems_patchSignalFull(OAIHttpRequestWorker *worker, OAILineItem summary);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_createSignalFull(OAIHttpRequestWorker *worker, OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_getSignalFull(OAIHttpRequestWorker *worker, OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_listSignalFull(OAIHttpRequestWorker *worker, OAIListLineItemAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_listSignalFull(OAIHttpRequestWorker *worker, OAIListAdvertisersResponse summary);
    void displayvideo_advertisers_listAssignedTargetingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIBulkListAdvertiserAssignedTargetingOptionsResponse summary);
    void displayvideo_advertisers_locationLists_assignedLocations_bulkEditSignalFull(OAIHttpRequestWorker *worker, OAIBulkEditAssignedLocationsResponse summary);
    void displayvideo_advertisers_locationLists_assignedLocations_createSignalFull(OAIHttpRequestWorker *worker, OAIAssignedLocation summary);
    void displayvideo_advertisers_locationLists_assignedLocations_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void displayvideo_advertisers_locationLists_assignedLocations_listSignalFull(OAIHttpRequestWorker *worker, OAIListAssignedLocationsResponse summary);
    void displayvideo_advertisers_locationLists_createSignalFull(OAIHttpRequestWorker *worker, OAILocationList summary);
    void displayvideo_advertisers_locationLists_listSignalFull(OAIHttpRequestWorker *worker, OAIListLocationListsResponse summary);
    void displayvideo_advertisers_locationLists_patchSignalFull(OAIHttpRequestWorker *worker, OAILocationList summary);
    void displayvideo_advertisers_negativeKeywordLists_createSignalFull(OAIHttpRequestWorker *worker, OAINegativeKeywordList summary);
    void displayvideo_advertisers_negativeKeywordLists_listSignalFull(OAIHttpRequestWorker *worker, OAIListNegativeKeywordListsResponse summary);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_bulkEditSignalFull(OAIHttpRequestWorker *worker, OAIBulkEditNegativeKeywordsResponse summary);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_listSignalFull(OAIHttpRequestWorker *worker, OAIListNegativeKeywordsResponse summary);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_replaceSignalFull(OAIHttpRequestWorker *worker, OAIReplaceNegativeKeywordsResponse summary);
    void displayvideo_advertisers_negativeKeywordLists_patchSignalFull(OAIHttpRequestWorker *worker, OAINegativeKeywordList summary);
    void displayvideo_advertisers_patchSignalFull(OAIHttpRequestWorker *worker, OAIAdvertiser summary);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_createSignalFull(OAIHttpRequestWorker *worker, OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_getSignalFull(OAIHttpRequestWorker *worker, OAIAssignedTargetingOption summary);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_listSignalFull(OAIHttpRequestWorker *worker, OAIListAdvertiserAssignedTargetingOptionsResponse summary);

    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_adGroupAds_getSignalError() instead")
    void displayvideo_advertisers_adGroupAds_getSignalE(OAIAdGroupAd summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_adGroupAds_getSignalError(OAIAdGroupAd summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_adGroupAds_listSignalError() instead")
    void displayvideo_advertisers_adGroupAds_listSignalE(OAIListAdGroupAdsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_adGroupAds_listSignalError(OAIListAdGroupAdsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_adGroups_bulkListAdGroupAssignedTargetingOptionsSignalError() instead")
    void displayvideo_advertisers_adGroups_bulkListAdGroupAssignedTargetingOptionsSignalE(OAIBulkListAdGroupAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_adGroups_bulkListAdGroupAssignedTargetingOptionsSignalError(OAIBulkListAdGroupAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_adGroups_getSignalError() instead")
    void displayvideo_advertisers_adGroups_getSignalE(OAIAdGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_adGroups_getSignalError(OAIAdGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_adGroups_listSignalError() instead")
    void displayvideo_advertisers_adGroups_listSignalE(OAIListAdGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_adGroups_listSignalError(OAIListAdGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_getSignalError() instead")
    void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_getSignalE(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_getSignalError(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_listSignalError() instead")
    void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_listSignalE(OAIListAdGroupAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_listSignalError(OAIListAdGroupAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_assets_uploadSignalError() instead")
    void displayvideo_advertisers_assets_uploadSignalE(OAICreateAssetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_assets_uploadSignalError(OAICreateAssetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_auditSignalError() instead")
    void displayvideo_advertisers_auditSignalE(OAIAuditAdvertiserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_auditSignalError(OAIAuditAdvertiserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_createSignalError() instead")
    void displayvideo_advertisers_campaigns_createSignalE(OAICampaign summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_createSignalError(OAICampaign summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_deleteSignalError() instead")
    void displayvideo_advertisers_campaigns_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_getSignalError() instead")
    void displayvideo_advertisers_campaigns_getSignalE(OAICampaign summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_getSignalError(OAICampaign summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_listSignalError() instead")
    void displayvideo_advertisers_campaigns_listSignalE(OAIListCampaignsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_listSignalError(OAIListCampaignsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_listAssignedTargetingOptionsSignalError() instead")
    void displayvideo_advertisers_campaigns_listAssignedTargetingOptionsSignalE(OAIBulkListCampaignAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_listAssignedTargetingOptionsSignalError(OAIBulkListCampaignAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_patchSignalError() instead")
    void displayvideo_advertisers_campaigns_patchSignalE(OAICampaign summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_patchSignalError(OAICampaign summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_getSignalError() instead")
    void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_getSignalE(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_getSignalError(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_listSignalError() instead")
    void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_listSignalE(OAIListCampaignAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_listSignalError(OAIListCampaignAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_channels_createSignalError() instead")
    void displayvideo_advertisers_channels_createSignalE(OAIChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_channels_createSignalError(OAIChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_channels_listSignalError() instead")
    void displayvideo_advertisers_channels_listSignalE(OAIListChannelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_channels_listSignalError(OAIListChannelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_channels_patchSignalError() instead")
    void displayvideo_advertisers_channels_patchSignalE(OAIChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_channels_patchSignalError(OAIChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_channels_sites_bulkEditSignalError() instead")
    void displayvideo_advertisers_channels_sites_bulkEditSignalE(OAIBulkEditSitesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_channels_sites_bulkEditSignalError(OAIBulkEditSitesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_channels_sites_deleteSignalError() instead")
    void displayvideo_advertisers_channels_sites_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_channels_sites_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_channels_sites_listSignalError() instead")
    void displayvideo_advertisers_channels_sites_listSignalE(OAIListSitesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_channels_sites_listSignalError(OAIListSitesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_channels_sites_replaceSignalError() instead")
    void displayvideo_advertisers_channels_sites_replaceSignalE(OAIReplaceSitesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_channels_sites_replaceSignalError(OAIReplaceSitesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_createSignalError() instead")
    void displayvideo_advertisers_createSignalE(OAIAdvertiser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_createSignalError(OAIAdvertiser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_creatives_createSignalError() instead")
    void displayvideo_advertisers_creatives_createSignalE(OAICreative summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_creatives_createSignalError(OAICreative summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_creatives_deleteSignalError() instead")
    void displayvideo_advertisers_creatives_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_creatives_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_creatives_getSignalError() instead")
    void displayvideo_advertisers_creatives_getSignalE(OAICreative summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_creatives_getSignalError(OAICreative summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_creatives_listSignalError() instead")
    void displayvideo_advertisers_creatives_listSignalE(OAIListCreativesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_creatives_listSignalError(OAIListCreativesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_creatives_patchSignalError() instead")
    void displayvideo_advertisers_creatives_patchSignalE(OAICreative summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_creatives_patchSignalError(OAICreative summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_deleteSignalError() instead")
    void displayvideo_advertisers_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_editAssignedTargetingOptionsSignalError() instead")
    void displayvideo_advertisers_editAssignedTargetingOptionsSignalE(OAIBulkEditAdvertiserAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_editAssignedTargetingOptionsSignalError(OAIBulkEditAdvertiserAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_getSignalError() instead")
    void displayvideo_advertisers_getSignalE(OAIAdvertiser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_getSignalError(OAIAdvertiser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_createSignalError() instead")
    void displayvideo_advertisers_insertionOrders_createSignalE(OAIInsertionOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_createSignalError(OAIInsertionOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_deleteSignalError() instead")
    void displayvideo_advertisers_insertionOrders_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_getSignalError() instead")
    void displayvideo_advertisers_insertionOrders_getSignalE(OAIInsertionOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_getSignalError(OAIInsertionOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_listSignalError() instead")
    void displayvideo_advertisers_insertionOrders_listSignalE(OAIListInsertionOrdersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_listSignalError(OAIListInsertionOrdersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_listAssignedTargetingOptionsSignalError() instead")
    void displayvideo_advertisers_insertionOrders_listAssignedTargetingOptionsSignalE(OAIBulkListInsertionOrderAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_listAssignedTargetingOptionsSignalError(OAIBulkListInsertionOrderAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_patchSignalError() instead")
    void displayvideo_advertisers_insertionOrders_patchSignalE(OAIInsertionOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_patchSignalError(OAIInsertionOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_createSignalError() instead")
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_createSignalE(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_createSignalError(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_deleteSignalError() instead")
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_getSignalError() instead")
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_getSignalE(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_getSignalError(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_listSignalError() instead")
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_listSignalE(OAIListInsertionOrderAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_listSignalError(OAIListInsertionOrderAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_invoices_listSignalError() instead")
    void displayvideo_advertisers_invoices_listSignalE(OAIListInvoicesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_invoices_listSignalError(OAIListInvoicesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_invoices_lookupInvoiceCurrencySignalError() instead")
    void displayvideo_advertisers_invoices_lookupInvoiceCurrencySignalE(OAILookupInvoiceCurrencyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_invoices_lookupInvoiceCurrencySignalError(OAILookupInvoiceCurrencyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_bulkEditAssignedTargetingOptionsSignalError() instead")
    void displayvideo_advertisers_lineItems_bulkEditAssignedTargetingOptionsSignalE(OAIBulkEditAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_bulkEditAssignedTargetingOptionsSignalError(OAIBulkEditAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_bulkListAssignedTargetingOptionsSignalError() instead")
    void displayvideo_advertisers_lineItems_bulkListAssignedTargetingOptionsSignalE(OAIBulkListAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_bulkListAssignedTargetingOptionsSignalError(OAIBulkListAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_bulkUpdateSignalError() instead")
    void displayvideo_advertisers_lineItems_bulkUpdateSignalE(OAIBulkUpdateLineItemsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_bulkUpdateSignalError(OAIBulkUpdateLineItemsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_createSignalError() instead")
    void displayvideo_advertisers_lineItems_createSignalE(OAILineItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_createSignalError(OAILineItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_deleteSignalError() instead")
    void displayvideo_advertisers_lineItems_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_duplicateSignalError() instead")
    void displayvideo_advertisers_lineItems_duplicateSignalE(OAIDuplicateLineItemResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_duplicateSignalError(OAIDuplicateLineItemResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_generateDefaultSignalError() instead")
    void displayvideo_advertisers_lineItems_generateDefaultSignalE(OAILineItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_generateDefaultSignalError(OAILineItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_getSignalError() instead")
    void displayvideo_advertisers_lineItems_getSignalE(OAILineItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_getSignalError(OAILineItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_listSignalError() instead")
    void displayvideo_advertisers_lineItems_listSignalE(OAIListLineItemsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_listSignalError(OAIListLineItemsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_patchSignalError() instead")
    void displayvideo_advertisers_lineItems_patchSignalE(OAILineItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_patchSignalError(OAILineItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_createSignalError() instead")
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_createSignalE(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_createSignalError(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_deleteSignalError() instead")
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_getSignalError() instead")
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_getSignalE(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_getSignalError(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_listSignalError() instead")
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_listSignalE(OAIListLineItemAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_listSignalError(OAIListLineItemAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_listSignalError() instead")
    void displayvideo_advertisers_listSignalE(OAIListAdvertisersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_listSignalError(OAIListAdvertisersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_listAssignedTargetingOptionsSignalError() instead")
    void displayvideo_advertisers_listAssignedTargetingOptionsSignalE(OAIBulkListAdvertiserAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_listAssignedTargetingOptionsSignalError(OAIBulkListAdvertiserAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_locationLists_assignedLocations_bulkEditSignalError() instead")
    void displayvideo_advertisers_locationLists_assignedLocations_bulkEditSignalE(OAIBulkEditAssignedLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_locationLists_assignedLocations_bulkEditSignalError(OAIBulkEditAssignedLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_locationLists_assignedLocations_createSignalError() instead")
    void displayvideo_advertisers_locationLists_assignedLocations_createSignalE(OAIAssignedLocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_locationLists_assignedLocations_createSignalError(OAIAssignedLocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_locationLists_assignedLocations_deleteSignalError() instead")
    void displayvideo_advertisers_locationLists_assignedLocations_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_locationLists_assignedLocations_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_locationLists_assignedLocations_listSignalError() instead")
    void displayvideo_advertisers_locationLists_assignedLocations_listSignalE(OAIListAssignedLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_locationLists_assignedLocations_listSignalError(OAIListAssignedLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_locationLists_createSignalError() instead")
    void displayvideo_advertisers_locationLists_createSignalE(OAILocationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_locationLists_createSignalError(OAILocationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_locationLists_listSignalError() instead")
    void displayvideo_advertisers_locationLists_listSignalE(OAIListLocationListsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_locationLists_listSignalError(OAIListLocationListsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_locationLists_patchSignalError() instead")
    void displayvideo_advertisers_locationLists_patchSignalE(OAILocationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_locationLists_patchSignalError(OAILocationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_negativeKeywordLists_createSignalError() instead")
    void displayvideo_advertisers_negativeKeywordLists_createSignalE(OAINegativeKeywordList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_negativeKeywordLists_createSignalError(OAINegativeKeywordList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_negativeKeywordLists_listSignalError() instead")
    void displayvideo_advertisers_negativeKeywordLists_listSignalE(OAIListNegativeKeywordListsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_negativeKeywordLists_listSignalError(OAIListNegativeKeywordListsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_negativeKeywordLists_negativeKeywords_bulkEditSignalError() instead")
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_bulkEditSignalE(OAIBulkEditNegativeKeywordsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_bulkEditSignalError(OAIBulkEditNegativeKeywordsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_negativeKeywordLists_negativeKeywords_deleteSignalError() instead")
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_negativeKeywordLists_negativeKeywords_listSignalError() instead")
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_listSignalE(OAIListNegativeKeywordsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_listSignalError(OAIListNegativeKeywordsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_negativeKeywordLists_negativeKeywords_replaceSignalError() instead")
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_replaceSignalE(OAIReplaceNegativeKeywordsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_replaceSignalError(OAIReplaceNegativeKeywordsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_negativeKeywordLists_patchSignalError() instead")
    void displayvideo_advertisers_negativeKeywordLists_patchSignalE(OAINegativeKeywordList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_negativeKeywordLists_patchSignalError(OAINegativeKeywordList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_patchSignalError() instead")
    void displayvideo_advertisers_patchSignalE(OAIAdvertiser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_patchSignalError(OAIAdvertiser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_targetingTypes_assignedTargetingOptions_createSignalError() instead")
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_createSignalE(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_createSignalError(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_targetingTypes_assignedTargetingOptions_deleteSignalError() instead")
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_targetingTypes_assignedTargetingOptions_getSignalError() instead")
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_getSignalE(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_getSignalError(OAIAssignedTargetingOption summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_targetingTypes_assignedTargetingOptions_listSignalError() instead")
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_listSignalE(OAIListAdvertiserAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_listSignalError(OAIListAdvertiserAssignedTargetingOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_adGroupAds_getSignalErrorFull() instead")
    void displayvideo_advertisers_adGroupAds_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_adGroupAds_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_adGroupAds_listSignalErrorFull() instead")
    void displayvideo_advertisers_adGroupAds_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_adGroupAds_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_adGroups_bulkListAdGroupAssignedTargetingOptionsSignalErrorFull() instead")
    void displayvideo_advertisers_adGroups_bulkListAdGroupAssignedTargetingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_adGroups_bulkListAdGroupAssignedTargetingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_adGroups_getSignalErrorFull() instead")
    void displayvideo_advertisers_adGroups_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_adGroups_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_adGroups_listSignalErrorFull() instead")
    void displayvideo_advertisers_adGroups_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_adGroups_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_getSignalErrorFull() instead")
    void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_listSignalErrorFull() instead")
    void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_adGroups_targetingTypes_assignedTargetingOptions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_assets_uploadSignalErrorFull() instead")
    void displayvideo_advertisers_assets_uploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_assets_uploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_auditSignalErrorFull() instead")
    void displayvideo_advertisers_auditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_auditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_createSignalErrorFull() instead")
    void displayvideo_advertisers_campaigns_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_deleteSignalErrorFull() instead")
    void displayvideo_advertisers_campaigns_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_getSignalErrorFull() instead")
    void displayvideo_advertisers_campaigns_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_listSignalErrorFull() instead")
    void displayvideo_advertisers_campaigns_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_listAssignedTargetingOptionsSignalErrorFull() instead")
    void displayvideo_advertisers_campaigns_listAssignedTargetingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_listAssignedTargetingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_patchSignalErrorFull() instead")
    void displayvideo_advertisers_campaigns_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_getSignalErrorFull() instead")
    void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_listSignalErrorFull() instead")
    void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_channels_createSignalErrorFull() instead")
    void displayvideo_advertisers_channels_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_channels_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_channels_listSignalErrorFull() instead")
    void displayvideo_advertisers_channels_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_channels_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_channels_patchSignalErrorFull() instead")
    void displayvideo_advertisers_channels_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_channels_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_channels_sites_bulkEditSignalErrorFull() instead")
    void displayvideo_advertisers_channels_sites_bulkEditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_channels_sites_bulkEditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_channels_sites_deleteSignalErrorFull() instead")
    void displayvideo_advertisers_channels_sites_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_channels_sites_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_channels_sites_listSignalErrorFull() instead")
    void displayvideo_advertisers_channels_sites_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_channels_sites_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_channels_sites_replaceSignalErrorFull() instead")
    void displayvideo_advertisers_channels_sites_replaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_channels_sites_replaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_createSignalErrorFull() instead")
    void displayvideo_advertisers_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_creatives_createSignalErrorFull() instead")
    void displayvideo_advertisers_creatives_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_creatives_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_creatives_deleteSignalErrorFull() instead")
    void displayvideo_advertisers_creatives_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_creatives_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_creatives_getSignalErrorFull() instead")
    void displayvideo_advertisers_creatives_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_creatives_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_creatives_listSignalErrorFull() instead")
    void displayvideo_advertisers_creatives_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_creatives_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_creatives_patchSignalErrorFull() instead")
    void displayvideo_advertisers_creatives_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_creatives_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_deleteSignalErrorFull() instead")
    void displayvideo_advertisers_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_editAssignedTargetingOptionsSignalErrorFull() instead")
    void displayvideo_advertisers_editAssignedTargetingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_editAssignedTargetingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_getSignalErrorFull() instead")
    void displayvideo_advertisers_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_createSignalErrorFull() instead")
    void displayvideo_advertisers_insertionOrders_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_deleteSignalErrorFull() instead")
    void displayvideo_advertisers_insertionOrders_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_getSignalErrorFull() instead")
    void displayvideo_advertisers_insertionOrders_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_listSignalErrorFull() instead")
    void displayvideo_advertisers_insertionOrders_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_listAssignedTargetingOptionsSignalErrorFull() instead")
    void displayvideo_advertisers_insertionOrders_listAssignedTargetingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_listAssignedTargetingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_patchSignalErrorFull() instead")
    void displayvideo_advertisers_insertionOrders_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_createSignalErrorFull() instead")
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_deleteSignalErrorFull() instead")
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_getSignalErrorFull() instead")
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_listSignalErrorFull() instead")
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_invoices_listSignalErrorFull() instead")
    void displayvideo_advertisers_invoices_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_invoices_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_invoices_lookupInvoiceCurrencySignalErrorFull() instead")
    void displayvideo_advertisers_invoices_lookupInvoiceCurrencySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_invoices_lookupInvoiceCurrencySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_bulkEditAssignedTargetingOptionsSignalErrorFull() instead")
    void displayvideo_advertisers_lineItems_bulkEditAssignedTargetingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_bulkEditAssignedTargetingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_bulkListAssignedTargetingOptionsSignalErrorFull() instead")
    void displayvideo_advertisers_lineItems_bulkListAssignedTargetingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_bulkListAssignedTargetingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_bulkUpdateSignalErrorFull() instead")
    void displayvideo_advertisers_lineItems_bulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_bulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_createSignalErrorFull() instead")
    void displayvideo_advertisers_lineItems_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_deleteSignalErrorFull() instead")
    void displayvideo_advertisers_lineItems_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_duplicateSignalErrorFull() instead")
    void displayvideo_advertisers_lineItems_duplicateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_duplicateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_generateDefaultSignalErrorFull() instead")
    void displayvideo_advertisers_lineItems_generateDefaultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_generateDefaultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_getSignalErrorFull() instead")
    void displayvideo_advertisers_lineItems_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_listSignalErrorFull() instead")
    void displayvideo_advertisers_lineItems_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_patchSignalErrorFull() instead")
    void displayvideo_advertisers_lineItems_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_createSignalErrorFull() instead")
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_deleteSignalErrorFull() instead")
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_getSignalErrorFull() instead")
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_listSignalErrorFull() instead")
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_listSignalErrorFull() instead")
    void displayvideo_advertisers_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_listAssignedTargetingOptionsSignalErrorFull() instead")
    void displayvideo_advertisers_listAssignedTargetingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_listAssignedTargetingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_locationLists_assignedLocations_bulkEditSignalErrorFull() instead")
    void displayvideo_advertisers_locationLists_assignedLocations_bulkEditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_locationLists_assignedLocations_bulkEditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_locationLists_assignedLocations_createSignalErrorFull() instead")
    void displayvideo_advertisers_locationLists_assignedLocations_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_locationLists_assignedLocations_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_locationLists_assignedLocations_deleteSignalErrorFull() instead")
    void displayvideo_advertisers_locationLists_assignedLocations_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_locationLists_assignedLocations_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_locationLists_assignedLocations_listSignalErrorFull() instead")
    void displayvideo_advertisers_locationLists_assignedLocations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_locationLists_assignedLocations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_locationLists_createSignalErrorFull() instead")
    void displayvideo_advertisers_locationLists_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_locationLists_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_locationLists_listSignalErrorFull() instead")
    void displayvideo_advertisers_locationLists_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_locationLists_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_locationLists_patchSignalErrorFull() instead")
    void displayvideo_advertisers_locationLists_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_locationLists_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_negativeKeywordLists_createSignalErrorFull() instead")
    void displayvideo_advertisers_negativeKeywordLists_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_negativeKeywordLists_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_negativeKeywordLists_listSignalErrorFull() instead")
    void displayvideo_advertisers_negativeKeywordLists_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_negativeKeywordLists_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_negativeKeywordLists_negativeKeywords_bulkEditSignalErrorFull() instead")
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_bulkEditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_bulkEditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_negativeKeywordLists_negativeKeywords_deleteSignalErrorFull() instead")
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_negativeKeywordLists_negativeKeywords_listSignalErrorFull() instead")
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_negativeKeywordLists_negativeKeywords_replaceSignalErrorFull() instead")
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_replaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_negativeKeywordLists_negativeKeywords_replaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_negativeKeywordLists_patchSignalErrorFull() instead")
    void displayvideo_advertisers_negativeKeywordLists_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_negativeKeywordLists_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_patchSignalErrorFull() instead")
    void displayvideo_advertisers_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_targetingTypes_assignedTargetingOptions_createSignalErrorFull() instead")
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_targetingTypes_assignedTargetingOptions_deleteSignalErrorFull() instead")
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_targetingTypes_assignedTargetingOptions_getSignalErrorFull() instead")
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_advertisers_targetingTypes_assignedTargetingOptions_listSignalErrorFull() instead")
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_advertisers_targetingTypes_assignedTargetingOptions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
