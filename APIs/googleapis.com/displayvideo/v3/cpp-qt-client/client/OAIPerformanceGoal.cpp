/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceGoal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceGoal::OAIPerformanceGoal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceGoal::OAIPerformanceGoal() {
    this->initializeModel();
}

OAIPerformanceGoal::~OAIPerformanceGoal() {}

void OAIPerformanceGoal::initializeModel() {

    m_performance_goal_amount_micros_isSet = false;
    m_performance_goal_amount_micros_isValid = false;

    m_performance_goal_percentage_micros_isSet = false;
    m_performance_goal_percentage_micros_isValid = false;

    m_performance_goal_string_isSet = false;
    m_performance_goal_string_isValid = false;

    m_performance_goal_type_isSet = false;
    m_performance_goal_type_isValid = false;
}

void OAIPerformanceGoal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceGoal::fromJsonObject(QJsonObject json) {

    m_performance_goal_amount_micros_isValid = ::OpenAPI::fromJsonValue(m_performance_goal_amount_micros, json[QString("performanceGoalAmountMicros")]);
    m_performance_goal_amount_micros_isSet = !json[QString("performanceGoalAmountMicros")].isNull() && m_performance_goal_amount_micros_isValid;

    m_performance_goal_percentage_micros_isValid = ::OpenAPI::fromJsonValue(m_performance_goal_percentage_micros, json[QString("performanceGoalPercentageMicros")]);
    m_performance_goal_percentage_micros_isSet = !json[QString("performanceGoalPercentageMicros")].isNull() && m_performance_goal_percentage_micros_isValid;

    m_performance_goal_string_isValid = ::OpenAPI::fromJsonValue(m_performance_goal_string, json[QString("performanceGoalString")]);
    m_performance_goal_string_isSet = !json[QString("performanceGoalString")].isNull() && m_performance_goal_string_isValid;

    m_performance_goal_type_isValid = ::OpenAPI::fromJsonValue(m_performance_goal_type, json[QString("performanceGoalType")]);
    m_performance_goal_type_isSet = !json[QString("performanceGoalType")].isNull() && m_performance_goal_type_isValid;
}

QString OAIPerformanceGoal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceGoal::asJsonObject() const {
    QJsonObject obj;
    if (m_performance_goal_amount_micros_isSet) {
        obj.insert(QString("performanceGoalAmountMicros"), ::OpenAPI::toJsonValue(m_performance_goal_amount_micros));
    }
    if (m_performance_goal_percentage_micros_isSet) {
        obj.insert(QString("performanceGoalPercentageMicros"), ::OpenAPI::toJsonValue(m_performance_goal_percentage_micros));
    }
    if (m_performance_goal_string_isSet) {
        obj.insert(QString("performanceGoalString"), ::OpenAPI::toJsonValue(m_performance_goal_string));
    }
    if (m_performance_goal_type_isSet) {
        obj.insert(QString("performanceGoalType"), ::OpenAPI::toJsonValue(m_performance_goal_type));
    }
    return obj;
}

QString OAIPerformanceGoal::getPerformanceGoalAmountMicros() const {
    return m_performance_goal_amount_micros;
}
void OAIPerformanceGoal::setPerformanceGoalAmountMicros(const QString &performance_goal_amount_micros) {
    m_performance_goal_amount_micros = performance_goal_amount_micros;
    m_performance_goal_amount_micros_isSet = true;
}

bool OAIPerformanceGoal::is_performance_goal_amount_micros_Set() const{
    return m_performance_goal_amount_micros_isSet;
}

bool OAIPerformanceGoal::is_performance_goal_amount_micros_Valid() const{
    return m_performance_goal_amount_micros_isValid;
}

QString OAIPerformanceGoal::getPerformanceGoalPercentageMicros() const {
    return m_performance_goal_percentage_micros;
}
void OAIPerformanceGoal::setPerformanceGoalPercentageMicros(const QString &performance_goal_percentage_micros) {
    m_performance_goal_percentage_micros = performance_goal_percentage_micros;
    m_performance_goal_percentage_micros_isSet = true;
}

bool OAIPerformanceGoal::is_performance_goal_percentage_micros_Set() const{
    return m_performance_goal_percentage_micros_isSet;
}

bool OAIPerformanceGoal::is_performance_goal_percentage_micros_Valid() const{
    return m_performance_goal_percentage_micros_isValid;
}

QString OAIPerformanceGoal::getPerformanceGoalString() const {
    return m_performance_goal_string;
}
void OAIPerformanceGoal::setPerformanceGoalString(const QString &performance_goal_string) {
    m_performance_goal_string = performance_goal_string;
    m_performance_goal_string_isSet = true;
}

bool OAIPerformanceGoal::is_performance_goal_string_Set() const{
    return m_performance_goal_string_isSet;
}

bool OAIPerformanceGoal::is_performance_goal_string_Valid() const{
    return m_performance_goal_string_isValid;
}

QString OAIPerformanceGoal::getPerformanceGoalType() const {
    return m_performance_goal_type;
}
void OAIPerformanceGoal::setPerformanceGoalType(const QString &performance_goal_type) {
    m_performance_goal_type = performance_goal_type;
    m_performance_goal_type_isSet = true;
}

bool OAIPerformanceGoal::is_performance_goal_type_Set() const{
    return m_performance_goal_type_isSet;
}

bool OAIPerformanceGoal::is_performance_goal_type_Valid() const{
    return m_performance_goal_type_isValid;
}

bool OAIPerformanceGoal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_performance_goal_amount_micros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_goal_percentage_micros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_goal_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_goal_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceGoal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
