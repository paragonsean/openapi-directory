/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoAdSequenceStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoAdSequenceStep::OAIVideoAdSequenceStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoAdSequenceStep::OAIVideoAdSequenceStep() {
    this->initializeModel();
}

OAIVideoAdSequenceStep::~OAIVideoAdSequenceStep() {}

void OAIVideoAdSequenceStep::initializeModel() {

    m_ad_group_id_isSet = false;
    m_ad_group_id_isValid = false;

    m_interaction_type_isSet = false;
    m_interaction_type_isValid = false;

    m_previous_step_id_isSet = false;
    m_previous_step_id_isValid = false;

    m_step_id_isSet = false;
    m_step_id_isValid = false;
}

void OAIVideoAdSequenceStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoAdSequenceStep::fromJsonObject(QJsonObject json) {

    m_ad_group_id_isValid = ::OpenAPI::fromJsonValue(m_ad_group_id, json[QString("adGroupId")]);
    m_ad_group_id_isSet = !json[QString("adGroupId")].isNull() && m_ad_group_id_isValid;

    m_interaction_type_isValid = ::OpenAPI::fromJsonValue(m_interaction_type, json[QString("interactionType")]);
    m_interaction_type_isSet = !json[QString("interactionType")].isNull() && m_interaction_type_isValid;

    m_previous_step_id_isValid = ::OpenAPI::fromJsonValue(m_previous_step_id, json[QString("previousStepId")]);
    m_previous_step_id_isSet = !json[QString("previousStepId")].isNull() && m_previous_step_id_isValid;

    m_step_id_isValid = ::OpenAPI::fromJsonValue(m_step_id, json[QString("stepId")]);
    m_step_id_isSet = !json[QString("stepId")].isNull() && m_step_id_isValid;
}

QString OAIVideoAdSequenceStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoAdSequenceStep::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_group_id_isSet) {
        obj.insert(QString("adGroupId"), ::OpenAPI::toJsonValue(m_ad_group_id));
    }
    if (m_interaction_type_isSet) {
        obj.insert(QString("interactionType"), ::OpenAPI::toJsonValue(m_interaction_type));
    }
    if (m_previous_step_id_isSet) {
        obj.insert(QString("previousStepId"), ::OpenAPI::toJsonValue(m_previous_step_id));
    }
    if (m_step_id_isSet) {
        obj.insert(QString("stepId"), ::OpenAPI::toJsonValue(m_step_id));
    }
    return obj;
}

QString OAIVideoAdSequenceStep::getAdGroupId() const {
    return m_ad_group_id;
}
void OAIVideoAdSequenceStep::setAdGroupId(const QString &ad_group_id) {
    m_ad_group_id = ad_group_id;
    m_ad_group_id_isSet = true;
}

bool OAIVideoAdSequenceStep::is_ad_group_id_Set() const{
    return m_ad_group_id_isSet;
}

bool OAIVideoAdSequenceStep::is_ad_group_id_Valid() const{
    return m_ad_group_id_isValid;
}

QString OAIVideoAdSequenceStep::getInteractionType() const {
    return m_interaction_type;
}
void OAIVideoAdSequenceStep::setInteractionType(const QString &interaction_type) {
    m_interaction_type = interaction_type;
    m_interaction_type_isSet = true;
}

bool OAIVideoAdSequenceStep::is_interaction_type_Set() const{
    return m_interaction_type_isSet;
}

bool OAIVideoAdSequenceStep::is_interaction_type_Valid() const{
    return m_interaction_type_isValid;
}

QString OAIVideoAdSequenceStep::getPreviousStepId() const {
    return m_previous_step_id;
}
void OAIVideoAdSequenceStep::setPreviousStepId(const QString &previous_step_id) {
    m_previous_step_id = previous_step_id;
    m_previous_step_id_isSet = true;
}

bool OAIVideoAdSequenceStep::is_previous_step_id_Set() const{
    return m_previous_step_id_isSet;
}

bool OAIVideoAdSequenceStep::is_previous_step_id_Valid() const{
    return m_previous_step_id_isValid;
}

QString OAIVideoAdSequenceStep::getStepId() const {
    return m_step_id;
}
void OAIVideoAdSequenceStep::setStepId(const QString &step_id) {
    m_step_id = step_id;
    m_step_id_isSet = true;
}

bool OAIVideoAdSequenceStep::is_step_id_Set() const{
    return m_step_id_isSet;
}

bool OAIVideoAdSequenceStep::is_step_id_Valid() const{
    return m_step_id_isValid;
}

bool OAIVideoAdSequenceStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interaction_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_step_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoAdSequenceStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
