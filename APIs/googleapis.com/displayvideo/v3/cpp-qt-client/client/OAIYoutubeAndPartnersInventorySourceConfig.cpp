/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIYoutubeAndPartnersInventorySourceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIYoutubeAndPartnersInventorySourceConfig::OAIYoutubeAndPartnersInventorySourceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIYoutubeAndPartnersInventorySourceConfig::OAIYoutubeAndPartnersInventorySourceConfig() {
    this->initializeModel();
}

OAIYoutubeAndPartnersInventorySourceConfig::~OAIYoutubeAndPartnersInventorySourceConfig() {}

void OAIYoutubeAndPartnersInventorySourceConfig::initializeModel() {

    m_include_google_tv_isSet = false;
    m_include_google_tv_isValid = false;

    m_include_youtube_isSet = false;
    m_include_youtube_isValid = false;

    m_include_youtube_video_partners_isSet = false;
    m_include_youtube_video_partners_isValid = false;
}

void OAIYoutubeAndPartnersInventorySourceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIYoutubeAndPartnersInventorySourceConfig::fromJsonObject(QJsonObject json) {

    m_include_google_tv_isValid = ::OpenAPI::fromJsonValue(m_include_google_tv, json[QString("includeGoogleTv")]);
    m_include_google_tv_isSet = !json[QString("includeGoogleTv")].isNull() && m_include_google_tv_isValid;

    m_include_youtube_isValid = ::OpenAPI::fromJsonValue(m_include_youtube, json[QString("includeYoutube")]);
    m_include_youtube_isSet = !json[QString("includeYoutube")].isNull() && m_include_youtube_isValid;

    m_include_youtube_video_partners_isValid = ::OpenAPI::fromJsonValue(m_include_youtube_video_partners, json[QString("includeYoutubeVideoPartners")]);
    m_include_youtube_video_partners_isSet = !json[QString("includeYoutubeVideoPartners")].isNull() && m_include_youtube_video_partners_isValid;
}

QString OAIYoutubeAndPartnersInventorySourceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIYoutubeAndPartnersInventorySourceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_include_google_tv_isSet) {
        obj.insert(QString("includeGoogleTv"), ::OpenAPI::toJsonValue(m_include_google_tv));
    }
    if (m_include_youtube_isSet) {
        obj.insert(QString("includeYoutube"), ::OpenAPI::toJsonValue(m_include_youtube));
    }
    if (m_include_youtube_video_partners_isSet) {
        obj.insert(QString("includeYoutubeVideoPartners"), ::OpenAPI::toJsonValue(m_include_youtube_video_partners));
    }
    return obj;
}

bool OAIYoutubeAndPartnersInventorySourceConfig::isIncludeGoogleTv() const {
    return m_include_google_tv;
}
void OAIYoutubeAndPartnersInventorySourceConfig::setIncludeGoogleTv(const bool &include_google_tv) {
    m_include_google_tv = include_google_tv;
    m_include_google_tv_isSet = true;
}

bool OAIYoutubeAndPartnersInventorySourceConfig::is_include_google_tv_Set() const{
    return m_include_google_tv_isSet;
}

bool OAIYoutubeAndPartnersInventorySourceConfig::is_include_google_tv_Valid() const{
    return m_include_google_tv_isValid;
}

bool OAIYoutubeAndPartnersInventorySourceConfig::isIncludeYoutube() const {
    return m_include_youtube;
}
void OAIYoutubeAndPartnersInventorySourceConfig::setIncludeYoutube(const bool &include_youtube) {
    m_include_youtube = include_youtube;
    m_include_youtube_isSet = true;
}

bool OAIYoutubeAndPartnersInventorySourceConfig::is_include_youtube_Set() const{
    return m_include_youtube_isSet;
}

bool OAIYoutubeAndPartnersInventorySourceConfig::is_include_youtube_Valid() const{
    return m_include_youtube_isValid;
}

bool OAIYoutubeAndPartnersInventorySourceConfig::isIncludeYoutubeVideoPartners() const {
    return m_include_youtube_video_partners;
}
void OAIYoutubeAndPartnersInventorySourceConfig::setIncludeYoutubeVideoPartners(const bool &include_youtube_video_partners) {
    m_include_youtube_video_partners = include_youtube_video_partners;
    m_include_youtube_video_partners_isSet = true;
}

bool OAIYoutubeAndPartnersInventorySourceConfig::is_include_youtube_video_partners_Set() const{
    return m_include_youtube_video_partners_isSet;
}

bool OAIYoutubeAndPartnersInventorySourceConfig::is_include_youtube_video_partners_Valid() const{
    return m_include_youtube_video_partners_isValid;
}

bool OAIYoutubeAndPartnersInventorySourceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_include_google_tv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_youtube_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_youtube_video_partners_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIYoutubeAndPartnersInventorySourceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
