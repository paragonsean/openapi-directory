/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIYoutubeAndPartnersSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIYoutubeAndPartnersSettings::OAIYoutubeAndPartnersSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIYoutubeAndPartnersSettings::OAIYoutubeAndPartnersSettings() {
    this->initializeModel();
}

OAIYoutubeAndPartnersSettings::~OAIYoutubeAndPartnersSettings() {}

void OAIYoutubeAndPartnersSettings::initializeModel() {

    m_content_category_isSet = false;
    m_content_category_isValid = false;

    m_effective_content_category_isSet = false;
    m_effective_content_category_isValid = false;

    m_inventory_source_settings_isSet = false;
    m_inventory_source_settings_isValid = false;

    m_lead_form_id_isSet = false;
    m_lead_form_id_isValid = false;

    m_linked_merchant_id_isSet = false;
    m_linked_merchant_id_isValid = false;

    m_related_video_ids_isSet = false;
    m_related_video_ids_isValid = false;

    m_target_frequency_isSet = false;
    m_target_frequency_isValid = false;

    m_third_party_measurement_configs_isSet = false;
    m_third_party_measurement_configs_isValid = false;

    m_video_ad_sequence_settings_isSet = false;
    m_video_ad_sequence_settings_isValid = false;

    m_view_frequency_cap_isSet = false;
    m_view_frequency_cap_isValid = false;
}

void OAIYoutubeAndPartnersSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIYoutubeAndPartnersSettings::fromJsonObject(QJsonObject json) {

    m_content_category_isValid = ::OpenAPI::fromJsonValue(m_content_category, json[QString("contentCategory")]);
    m_content_category_isSet = !json[QString("contentCategory")].isNull() && m_content_category_isValid;

    m_effective_content_category_isValid = ::OpenAPI::fromJsonValue(m_effective_content_category, json[QString("effectiveContentCategory")]);
    m_effective_content_category_isSet = !json[QString("effectiveContentCategory")].isNull() && m_effective_content_category_isValid;

    m_inventory_source_settings_isValid = ::OpenAPI::fromJsonValue(m_inventory_source_settings, json[QString("inventorySourceSettings")]);
    m_inventory_source_settings_isSet = !json[QString("inventorySourceSettings")].isNull() && m_inventory_source_settings_isValid;

    m_lead_form_id_isValid = ::OpenAPI::fromJsonValue(m_lead_form_id, json[QString("leadFormId")]);
    m_lead_form_id_isSet = !json[QString("leadFormId")].isNull() && m_lead_form_id_isValid;

    m_linked_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_linked_merchant_id, json[QString("linkedMerchantId")]);
    m_linked_merchant_id_isSet = !json[QString("linkedMerchantId")].isNull() && m_linked_merchant_id_isValid;

    m_related_video_ids_isValid = ::OpenAPI::fromJsonValue(m_related_video_ids, json[QString("relatedVideoIds")]);
    m_related_video_ids_isSet = !json[QString("relatedVideoIds")].isNull() && m_related_video_ids_isValid;

    m_target_frequency_isValid = ::OpenAPI::fromJsonValue(m_target_frequency, json[QString("targetFrequency")]);
    m_target_frequency_isSet = !json[QString("targetFrequency")].isNull() && m_target_frequency_isValid;

    m_third_party_measurement_configs_isValid = ::OpenAPI::fromJsonValue(m_third_party_measurement_configs, json[QString("thirdPartyMeasurementConfigs")]);
    m_third_party_measurement_configs_isSet = !json[QString("thirdPartyMeasurementConfigs")].isNull() && m_third_party_measurement_configs_isValid;

    m_video_ad_sequence_settings_isValid = ::OpenAPI::fromJsonValue(m_video_ad_sequence_settings, json[QString("videoAdSequenceSettings")]);
    m_video_ad_sequence_settings_isSet = !json[QString("videoAdSequenceSettings")].isNull() && m_video_ad_sequence_settings_isValid;

    m_view_frequency_cap_isValid = ::OpenAPI::fromJsonValue(m_view_frequency_cap, json[QString("viewFrequencyCap")]);
    m_view_frequency_cap_isSet = !json[QString("viewFrequencyCap")].isNull() && m_view_frequency_cap_isValid;
}

QString OAIYoutubeAndPartnersSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIYoutubeAndPartnersSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_content_category_isSet) {
        obj.insert(QString("contentCategory"), ::OpenAPI::toJsonValue(m_content_category));
    }
    if (m_effective_content_category_isSet) {
        obj.insert(QString("effectiveContentCategory"), ::OpenAPI::toJsonValue(m_effective_content_category));
    }
    if (m_inventory_source_settings.isSet()) {
        obj.insert(QString("inventorySourceSettings"), ::OpenAPI::toJsonValue(m_inventory_source_settings));
    }
    if (m_lead_form_id_isSet) {
        obj.insert(QString("leadFormId"), ::OpenAPI::toJsonValue(m_lead_form_id));
    }
    if (m_linked_merchant_id_isSet) {
        obj.insert(QString("linkedMerchantId"), ::OpenAPI::toJsonValue(m_linked_merchant_id));
    }
    if (m_related_video_ids.size() > 0) {
        obj.insert(QString("relatedVideoIds"), ::OpenAPI::toJsonValue(m_related_video_ids));
    }
    if (m_target_frequency.isSet()) {
        obj.insert(QString("targetFrequency"), ::OpenAPI::toJsonValue(m_target_frequency));
    }
    if (m_third_party_measurement_configs.isSet()) {
        obj.insert(QString("thirdPartyMeasurementConfigs"), ::OpenAPI::toJsonValue(m_third_party_measurement_configs));
    }
    if (m_video_ad_sequence_settings.isSet()) {
        obj.insert(QString("videoAdSequenceSettings"), ::OpenAPI::toJsonValue(m_video_ad_sequence_settings));
    }
    if (m_view_frequency_cap.isSet()) {
        obj.insert(QString("viewFrequencyCap"), ::OpenAPI::toJsonValue(m_view_frequency_cap));
    }
    return obj;
}

QString OAIYoutubeAndPartnersSettings::getContentCategory() const {
    return m_content_category;
}
void OAIYoutubeAndPartnersSettings::setContentCategory(const QString &content_category) {
    m_content_category = content_category;
    m_content_category_isSet = true;
}

bool OAIYoutubeAndPartnersSettings::is_content_category_Set() const{
    return m_content_category_isSet;
}

bool OAIYoutubeAndPartnersSettings::is_content_category_Valid() const{
    return m_content_category_isValid;
}

QString OAIYoutubeAndPartnersSettings::getEffectiveContentCategory() const {
    return m_effective_content_category;
}
void OAIYoutubeAndPartnersSettings::setEffectiveContentCategory(const QString &effective_content_category) {
    m_effective_content_category = effective_content_category;
    m_effective_content_category_isSet = true;
}

bool OAIYoutubeAndPartnersSettings::is_effective_content_category_Set() const{
    return m_effective_content_category_isSet;
}

bool OAIYoutubeAndPartnersSettings::is_effective_content_category_Valid() const{
    return m_effective_content_category_isValid;
}

OAIYoutubeAndPartnersInventorySourceConfig OAIYoutubeAndPartnersSettings::getInventorySourceSettings() const {
    return m_inventory_source_settings;
}
void OAIYoutubeAndPartnersSettings::setInventorySourceSettings(const OAIYoutubeAndPartnersInventorySourceConfig &inventory_source_settings) {
    m_inventory_source_settings = inventory_source_settings;
    m_inventory_source_settings_isSet = true;
}

bool OAIYoutubeAndPartnersSettings::is_inventory_source_settings_Set() const{
    return m_inventory_source_settings_isSet;
}

bool OAIYoutubeAndPartnersSettings::is_inventory_source_settings_Valid() const{
    return m_inventory_source_settings_isValid;
}

QString OAIYoutubeAndPartnersSettings::getLeadFormId() const {
    return m_lead_form_id;
}
void OAIYoutubeAndPartnersSettings::setLeadFormId(const QString &lead_form_id) {
    m_lead_form_id = lead_form_id;
    m_lead_form_id_isSet = true;
}

bool OAIYoutubeAndPartnersSettings::is_lead_form_id_Set() const{
    return m_lead_form_id_isSet;
}

bool OAIYoutubeAndPartnersSettings::is_lead_form_id_Valid() const{
    return m_lead_form_id_isValid;
}

QString OAIYoutubeAndPartnersSettings::getLinkedMerchantId() const {
    return m_linked_merchant_id;
}
void OAIYoutubeAndPartnersSettings::setLinkedMerchantId(const QString &linked_merchant_id) {
    m_linked_merchant_id = linked_merchant_id;
    m_linked_merchant_id_isSet = true;
}

bool OAIYoutubeAndPartnersSettings::is_linked_merchant_id_Set() const{
    return m_linked_merchant_id_isSet;
}

bool OAIYoutubeAndPartnersSettings::is_linked_merchant_id_Valid() const{
    return m_linked_merchant_id_isValid;
}

QList<QString> OAIYoutubeAndPartnersSettings::getRelatedVideoIds() const {
    return m_related_video_ids;
}
void OAIYoutubeAndPartnersSettings::setRelatedVideoIds(const QList<QString> &related_video_ids) {
    m_related_video_ids = related_video_ids;
    m_related_video_ids_isSet = true;
}

bool OAIYoutubeAndPartnersSettings::is_related_video_ids_Set() const{
    return m_related_video_ids_isSet;
}

bool OAIYoutubeAndPartnersSettings::is_related_video_ids_Valid() const{
    return m_related_video_ids_isValid;
}

OAITargetFrequency OAIYoutubeAndPartnersSettings::getTargetFrequency() const {
    return m_target_frequency;
}
void OAIYoutubeAndPartnersSettings::setTargetFrequency(const OAITargetFrequency &target_frequency) {
    m_target_frequency = target_frequency;
    m_target_frequency_isSet = true;
}

bool OAIYoutubeAndPartnersSettings::is_target_frequency_Set() const{
    return m_target_frequency_isSet;
}

bool OAIYoutubeAndPartnersSettings::is_target_frequency_Valid() const{
    return m_target_frequency_isValid;
}

OAIThirdPartyMeasurementConfigs OAIYoutubeAndPartnersSettings::getThirdPartyMeasurementConfigs() const {
    return m_third_party_measurement_configs;
}
void OAIYoutubeAndPartnersSettings::setThirdPartyMeasurementConfigs(const OAIThirdPartyMeasurementConfigs &third_party_measurement_configs) {
    m_third_party_measurement_configs = third_party_measurement_configs;
    m_third_party_measurement_configs_isSet = true;
}

bool OAIYoutubeAndPartnersSettings::is_third_party_measurement_configs_Set() const{
    return m_third_party_measurement_configs_isSet;
}

bool OAIYoutubeAndPartnersSettings::is_third_party_measurement_configs_Valid() const{
    return m_third_party_measurement_configs_isValid;
}

OAIVideoAdSequenceSettings OAIYoutubeAndPartnersSettings::getVideoAdSequenceSettings() const {
    return m_video_ad_sequence_settings;
}
void OAIYoutubeAndPartnersSettings::setVideoAdSequenceSettings(const OAIVideoAdSequenceSettings &video_ad_sequence_settings) {
    m_video_ad_sequence_settings = video_ad_sequence_settings;
    m_video_ad_sequence_settings_isSet = true;
}

bool OAIYoutubeAndPartnersSettings::is_video_ad_sequence_settings_Set() const{
    return m_video_ad_sequence_settings_isSet;
}

bool OAIYoutubeAndPartnersSettings::is_video_ad_sequence_settings_Valid() const{
    return m_video_ad_sequence_settings_isValid;
}

OAIFrequencyCap OAIYoutubeAndPartnersSettings::getViewFrequencyCap() const {
    return m_view_frequency_cap;
}
void OAIYoutubeAndPartnersSettings::setViewFrequencyCap(const OAIFrequencyCap &view_frequency_cap) {
    m_view_frequency_cap = view_frequency_cap;
    m_view_frequency_cap_isSet = true;
}

bool OAIYoutubeAndPartnersSettings::is_view_frequency_cap_Set() const{
    return m_view_frequency_cap_isSet;
}

bool OAIYoutubeAndPartnersSettings::is_view_frequency_cap_Valid() const{
    return m_view_frequency_cap_isValid;
}

bool OAIYoutubeAndPartnersSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_content_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_form_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_video_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_measurement_configs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_ad_sequence_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_frequency_cap.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIYoutubeAndPartnersSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
