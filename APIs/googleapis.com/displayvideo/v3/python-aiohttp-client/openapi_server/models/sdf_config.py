# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SdfConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_email: str=None, version: str=None):
        """SdfConfig - a model defined in OpenAPI

        :param admin_email: The admin_email of this SdfConfig.
        :param version: The version of this SdfConfig.
        """
        self.openapi_types = {
            'admin_email': str,
            'version': str
        }

        self.attribute_map = {
            'admin_email': 'adminEmail',
            'version': 'version'
        }

        self._admin_email = admin_email
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SdfConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SdfConfig of this SdfConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_email(self):
        """Gets the admin_email of this SdfConfig.

        An administrator email address to which the SDF processing status reports will be sent.

        :return: The admin_email of this SdfConfig.
        :rtype: str
        """
        return self._admin_email

    @admin_email.setter
    def admin_email(self, admin_email):
        """Sets the admin_email of this SdfConfig.

        An administrator email address to which the SDF processing status reports will be sent.

        :param admin_email: The admin_email of this SdfConfig.
        :type admin_email: str
        """

        self._admin_email = admin_email

    @property
    def version(self):
        """Gets the version of this SdfConfig.

        Required. The version of SDF being used.

        :return: The version of this SdfConfig.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SdfConfig.

        Required. The version of SDF being used.

        :param version: The version of this SdfConfig.
        :type version: str
        """
        allowed_values = ["SDF_VERSION_UNSPECIFIED", "SDF_VERSION_3_1", "SDF_VERSION_4", "SDF_VERSION_4_1", "SDF_VERSION_4_2", "SDF_VERSION_5", "SDF_VERSION_5_1", "SDF_VERSION_5_2", "SDF_VERSION_5_3", "SDF_VERSION_5_4", "SDF_VERSION_5_5", "SDF_VERSION_6", "SDF_VERSION_7"]  # noqa: E501
        if version not in allowed_values:
            raise ValueError(
                "Invalid value for `version` ({0}), must be one of {1}"
                .format(version, allowed_values)
            )

        self._version = version
