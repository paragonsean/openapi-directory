# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.active_view_video_viewability_metric_config import ActiveViewVideoViewabilityMetricConfig
from openapi_server.models.lookback_window import LookbackWindow
from openapi_server import util


class FloodlightGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_view_config: ActiveViewVideoViewabilityMetricConfig=None, custom_variables: Dict[str, object]=None, display_name: str=None, floodlight_group_id: str=None, lookback_window: LookbackWindow=None, name: str=None, web_tag_type: str=None):
        """FloodlightGroup - a model defined in OpenAPI

        :param active_view_config: The active_view_config of this FloodlightGroup.
        :param custom_variables: The custom_variables of this FloodlightGroup.
        :param display_name: The display_name of this FloodlightGroup.
        :param floodlight_group_id: The floodlight_group_id of this FloodlightGroup.
        :param lookback_window: The lookback_window of this FloodlightGroup.
        :param name: The name of this FloodlightGroup.
        :param web_tag_type: The web_tag_type of this FloodlightGroup.
        """
        self.openapi_types = {
            'active_view_config': ActiveViewVideoViewabilityMetricConfig,
            'custom_variables': Dict[str, object],
            'display_name': str,
            'floodlight_group_id': str,
            'lookback_window': LookbackWindow,
            'name': str,
            'web_tag_type': str
        }

        self.attribute_map = {
            'active_view_config': 'activeViewConfig',
            'custom_variables': 'customVariables',
            'display_name': 'displayName',
            'floodlight_group_id': 'floodlightGroupId',
            'lookback_window': 'lookbackWindow',
            'name': 'name',
            'web_tag_type': 'webTagType'
        }

        self._active_view_config = active_view_config
        self._custom_variables = custom_variables
        self._display_name = display_name
        self._floodlight_group_id = floodlight_group_id
        self._lookback_window = lookback_window
        self._name = name
        self._web_tag_type = web_tag_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FloodlightGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FloodlightGroup of this FloodlightGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_view_config(self):
        """Gets the active_view_config of this FloodlightGroup.


        :return: The active_view_config of this FloodlightGroup.
        :rtype: ActiveViewVideoViewabilityMetricConfig
        """
        return self._active_view_config

    @active_view_config.setter
    def active_view_config(self, active_view_config):
        """Sets the active_view_config of this FloodlightGroup.


        :param active_view_config: The active_view_config of this FloodlightGroup.
        :type active_view_config: ActiveViewVideoViewabilityMetricConfig
        """

        self._active_view_config = active_view_config

    @property
    def custom_variables(self):
        """Gets the custom_variables of this FloodlightGroup.

        User-defined custom variables owned by the Floodlight group. Use custom Floodlight variables to create reporting data that is tailored to your unique business needs. Custom Floodlight variables use the keys `U1=`, `U2=`, and so on, and can take any values that you choose to pass to them. You can use them to track virtually any type of data that you collect about your customers, such as the genre of movie that a customer purchases, the country to which the item is shipped, and so on. Custom Floodlight variables may not be used to pass any data that could be used or recognized as personally identifiable information (PII). Example: `custom_variables { fields { \"U1\": value { number_value: 123.4 }, \"U2\": value { string_value: \"MyVariable2\" }, \"U3\": value { string_value: \"MyVariable3\" } } }` Acceptable values for keys are \"U1\" through \"U100\", inclusive. String values must be less than 64 characters long, and cannot contain the following characters: `\"<>`.

        :return: The custom_variables of this FloodlightGroup.
        :rtype: Dict[str, object]
        """
        return self._custom_variables

    @custom_variables.setter
    def custom_variables(self, custom_variables):
        """Sets the custom_variables of this FloodlightGroup.

        User-defined custom variables owned by the Floodlight group. Use custom Floodlight variables to create reporting data that is tailored to your unique business needs. Custom Floodlight variables use the keys `U1=`, `U2=`, and so on, and can take any values that you choose to pass to them. You can use them to track virtually any type of data that you collect about your customers, such as the genre of movie that a customer purchases, the country to which the item is shipped, and so on. Custom Floodlight variables may not be used to pass any data that could be used or recognized as personally identifiable information (PII). Example: `custom_variables { fields { \"U1\": value { number_value: 123.4 }, \"U2\": value { string_value: \"MyVariable2\" }, \"U3\": value { string_value: \"MyVariable3\" } } }` Acceptable values for keys are \"U1\" through \"U100\", inclusive. String values must be less than 64 characters long, and cannot contain the following characters: `\"<>`.

        :param custom_variables: The custom_variables of this FloodlightGroup.
        :type custom_variables: Dict[str, object]
        """

        self._custom_variables = custom_variables

    @property
    def display_name(self):
        """Gets the display_name of this FloodlightGroup.

        Required. The display name of the Floodlight group.

        :return: The display_name of this FloodlightGroup.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FloodlightGroup.

        Required. The display name of the Floodlight group.

        :param display_name: The display_name of this FloodlightGroup.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def floodlight_group_id(self):
        """Gets the floodlight_group_id of this FloodlightGroup.

        Output only. The unique ID of the Floodlight group. Assigned by the system.

        :return: The floodlight_group_id of this FloodlightGroup.
        :rtype: str
        """
        return self._floodlight_group_id

    @floodlight_group_id.setter
    def floodlight_group_id(self, floodlight_group_id):
        """Sets the floodlight_group_id of this FloodlightGroup.

        Output only. The unique ID of the Floodlight group. Assigned by the system.

        :param floodlight_group_id: The floodlight_group_id of this FloodlightGroup.
        :type floodlight_group_id: str
        """

        self._floodlight_group_id = floodlight_group_id

    @property
    def lookback_window(self):
        """Gets the lookback_window of this FloodlightGroup.


        :return: The lookback_window of this FloodlightGroup.
        :rtype: LookbackWindow
        """
        return self._lookback_window

    @lookback_window.setter
    def lookback_window(self, lookback_window):
        """Sets the lookback_window of this FloodlightGroup.


        :param lookback_window: The lookback_window of this FloodlightGroup.
        :type lookback_window: LookbackWindow
        """

        self._lookback_window = lookback_window

    @property
    def name(self):
        """Gets the name of this FloodlightGroup.

        Output only. The resource name of the Floodlight group.

        :return: The name of this FloodlightGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FloodlightGroup.

        Output only. The resource name of the Floodlight group.

        :param name: The name of this FloodlightGroup.
        :type name: str
        """

        self._name = name

    @property
    def web_tag_type(self):
        """Gets the web_tag_type of this FloodlightGroup.

        Required. The web tag type enabled for the Floodlight group.

        :return: The web_tag_type of this FloodlightGroup.
        :rtype: str
        """
        return self._web_tag_type

    @web_tag_type.setter
    def web_tag_type(self, web_tag_type):
        """Sets the web_tag_type of this FloodlightGroup.

        Required. The web tag type enabled for the Floodlight group.

        :param web_tag_type: The web_tag_type of this FloodlightGroup.
        :type web_tag_type: str
        """
        allowed_values = ["WEB_TAG_TYPE_UNSPECIFIED", "WEB_TAG_TYPE_NONE", "WEB_TAG_TYPE_IMAGE", "WEB_TAG_TYPE_DYNAMIC"]  # noqa: E501
        if web_tag_type not in allowed_values:
            raise ValueError(
                "Invalid value for `web_tag_type` ({0}), must be one of {1}"
                .format(web_tag_type, allowed_values)
            )

        self._web_tag_type = web_tag_type
