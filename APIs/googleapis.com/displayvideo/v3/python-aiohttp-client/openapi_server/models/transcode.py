# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimensions import Dimensions
from openapi_server import util


class Transcode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_bit_rate_kbps: str=None, audio_sample_rate_hz: str=None, bit_rate_kbps: str=None, dimensions: Dimensions=None, file_size_bytes: str=None, frame_rate: float=None, mime_type: str=None, name: str=None, transcoded: bool=None):
        """Transcode - a model defined in OpenAPI

        :param audio_bit_rate_kbps: The audio_bit_rate_kbps of this Transcode.
        :param audio_sample_rate_hz: The audio_sample_rate_hz of this Transcode.
        :param bit_rate_kbps: The bit_rate_kbps of this Transcode.
        :param dimensions: The dimensions of this Transcode.
        :param file_size_bytes: The file_size_bytes of this Transcode.
        :param frame_rate: The frame_rate of this Transcode.
        :param mime_type: The mime_type of this Transcode.
        :param name: The name of this Transcode.
        :param transcoded: The transcoded of this Transcode.
        """
        self.openapi_types = {
            'audio_bit_rate_kbps': str,
            'audio_sample_rate_hz': str,
            'bit_rate_kbps': str,
            'dimensions': Dimensions,
            'file_size_bytes': str,
            'frame_rate': float,
            'mime_type': str,
            'name': str,
            'transcoded': bool
        }

        self.attribute_map = {
            'audio_bit_rate_kbps': 'audioBitRateKbps',
            'audio_sample_rate_hz': 'audioSampleRateHz',
            'bit_rate_kbps': 'bitRateKbps',
            'dimensions': 'dimensions',
            'file_size_bytes': 'fileSizeBytes',
            'frame_rate': 'frameRate',
            'mime_type': 'mimeType',
            'name': 'name',
            'transcoded': 'transcoded'
        }

        self._audio_bit_rate_kbps = audio_bit_rate_kbps
        self._audio_sample_rate_hz = audio_sample_rate_hz
        self._bit_rate_kbps = bit_rate_kbps
        self._dimensions = dimensions
        self._file_size_bytes = file_size_bytes
        self._frame_rate = frame_rate
        self._mime_type = mime_type
        self._name = name
        self._transcoded = transcoded

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transcode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transcode of this Transcode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_bit_rate_kbps(self):
        """Gets the audio_bit_rate_kbps of this Transcode.

        The bit rate for the audio stream of the transcoded video, or the bit rate for the transcoded audio, in kilobits per second.

        :return: The audio_bit_rate_kbps of this Transcode.
        :rtype: str
        """
        return self._audio_bit_rate_kbps

    @audio_bit_rate_kbps.setter
    def audio_bit_rate_kbps(self, audio_bit_rate_kbps):
        """Sets the audio_bit_rate_kbps of this Transcode.

        The bit rate for the audio stream of the transcoded video, or the bit rate for the transcoded audio, in kilobits per second.

        :param audio_bit_rate_kbps: The audio_bit_rate_kbps of this Transcode.
        :type audio_bit_rate_kbps: str
        """

        self._audio_bit_rate_kbps = audio_bit_rate_kbps

    @property
    def audio_sample_rate_hz(self):
        """Gets the audio_sample_rate_hz of this Transcode.

        The sample rate for the audio stream of the transcoded video, or the sample rate for the transcoded audio, in hertz.

        :return: The audio_sample_rate_hz of this Transcode.
        :rtype: str
        """
        return self._audio_sample_rate_hz

    @audio_sample_rate_hz.setter
    def audio_sample_rate_hz(self, audio_sample_rate_hz):
        """Sets the audio_sample_rate_hz of this Transcode.

        The sample rate for the audio stream of the transcoded video, or the sample rate for the transcoded audio, in hertz.

        :param audio_sample_rate_hz: The audio_sample_rate_hz of this Transcode.
        :type audio_sample_rate_hz: str
        """

        self._audio_sample_rate_hz = audio_sample_rate_hz

    @property
    def bit_rate_kbps(self):
        """Gets the bit_rate_kbps of this Transcode.

        The transcoding bit rate of the transcoded video, in kilobits per second.

        :return: The bit_rate_kbps of this Transcode.
        :rtype: str
        """
        return self._bit_rate_kbps

    @bit_rate_kbps.setter
    def bit_rate_kbps(self, bit_rate_kbps):
        """Sets the bit_rate_kbps of this Transcode.

        The transcoding bit rate of the transcoded video, in kilobits per second.

        :param bit_rate_kbps: The bit_rate_kbps of this Transcode.
        :type bit_rate_kbps: str
        """

        self._bit_rate_kbps = bit_rate_kbps

    @property
    def dimensions(self):
        """Gets the dimensions of this Transcode.


        :return: The dimensions of this Transcode.
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Transcode.


        :param dimensions: The dimensions of this Transcode.
        :type dimensions: Dimensions
        """

        self._dimensions = dimensions

    @property
    def file_size_bytes(self):
        """Gets the file_size_bytes of this Transcode.

        The size of the transcoded file, in bytes.

        :return: The file_size_bytes of this Transcode.
        :rtype: str
        """
        return self._file_size_bytes

    @file_size_bytes.setter
    def file_size_bytes(self, file_size_bytes):
        """Sets the file_size_bytes of this Transcode.

        The size of the transcoded file, in bytes.

        :param file_size_bytes: The file_size_bytes of this Transcode.
        :type file_size_bytes: str
        """

        self._file_size_bytes = file_size_bytes

    @property
    def frame_rate(self):
        """Gets the frame_rate of this Transcode.

        The frame rate of the transcoded video, in frames per second.

        :return: The frame_rate of this Transcode.
        :rtype: float
        """
        return self._frame_rate

    @frame_rate.setter
    def frame_rate(self, frame_rate):
        """Sets the frame_rate of this Transcode.

        The frame rate of the transcoded video, in frames per second.

        :param frame_rate: The frame_rate of this Transcode.
        :type frame_rate: float
        """

        self._frame_rate = frame_rate

    @property
    def mime_type(self):
        """Gets the mime_type of this Transcode.

        The MIME type of the transcoded file.

        :return: The mime_type of this Transcode.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Transcode.

        The MIME type of the transcoded file.

        :param mime_type: The mime_type of this Transcode.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def name(self):
        """Gets the name of this Transcode.

        The name of the transcoded file.

        :return: The name of this Transcode.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Transcode.

        The name of the transcoded file.

        :param name: The name of this Transcode.
        :type name: str
        """

        self._name = name

    @property
    def transcoded(self):
        """Gets the transcoded of this Transcode.

        Indicates if the transcoding was successful.

        :return: The transcoded of this Transcode.
        :rtype: bool
        """
        return self._transcoded

    @transcoded.setter
    def transcoded(self, transcoded):
        """Sets the transcoded of this Transcode.

        Indicates if the transcoding was successful.

        :param transcoded: The transcoded of this Transcode.
        :type transcoded: bool
        """

        self._transcoded = transcoded
