# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DoubleVerifyVideoViewability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, player_impression_rate: str=None, video_iab: str=None, video_viewable_rate: str=None):
        """DoubleVerifyVideoViewability - a model defined in OpenAPI

        :param player_impression_rate: The player_impression_rate of this DoubleVerifyVideoViewability.
        :param video_iab: The video_iab of this DoubleVerifyVideoViewability.
        :param video_viewable_rate: The video_viewable_rate of this DoubleVerifyVideoViewability.
        """
        self.openapi_types = {
            'player_impression_rate': str,
            'video_iab': str,
            'video_viewable_rate': str
        }

        self.attribute_map = {
            'player_impression_rate': 'playerImpressionRate',
            'video_iab': 'videoIab',
            'video_viewable_rate': 'videoViewableRate'
        }

        self._player_impression_rate = player_impression_rate
        self._video_iab = video_iab
        self._video_viewable_rate = video_viewable_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DoubleVerifyVideoViewability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DoubleVerifyVideoViewability of this DoubleVerifyVideoViewability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def player_impression_rate(self):
        """Gets the player_impression_rate of this DoubleVerifyVideoViewability.

        Target inventory to maximize impressions with 400x300 or greater player size.

        :return: The player_impression_rate of this DoubleVerifyVideoViewability.
        :rtype: str
        """
        return self._player_impression_rate

    @player_impression_rate.setter
    def player_impression_rate(self, player_impression_rate):
        """Sets the player_impression_rate of this DoubleVerifyVideoViewability.

        Target inventory to maximize impressions with 400x300 or greater player size.

        :param player_impression_rate: The player_impression_rate of this DoubleVerifyVideoViewability.
        :type player_impression_rate: str
        """
        allowed_values = ["PLAYER_SIZE_400X300_UNSPECIFIED", "PLAYER_SIZE_400X300_95", "PLAYER_SIZE_400X300_70", "PLAYER_SIZE_400X300_25", "PLAYER_SIZE_400X300_5"]  # noqa: E501
        if player_impression_rate not in allowed_values:
            raise ValueError(
                "Invalid value for `player_impression_rate` ({0}), must be one of {1}"
                .format(player_impression_rate, allowed_values)
            )

        self._player_impression_rate = player_impression_rate

    @property
    def video_iab(self):
        """Gets the video_iab of this DoubleVerifyVideoViewability.

        Target web inventory to maximize IAB viewable rate.

        :return: The video_iab of this DoubleVerifyVideoViewability.
        :rtype: str
        """
        return self._video_iab

    @video_iab.setter
    def video_iab(self, video_iab):
        """Sets the video_iab of this DoubleVerifyVideoViewability.

        Target web inventory to maximize IAB viewable rate.

        :param video_iab: The video_iab of this DoubleVerifyVideoViewability.
        :type video_iab: str
        """
        allowed_values = ["VIDEO_IAB_UNSPECIFIED", "IAB_VIEWABILITY_80_PERCENT_HIGHER", "IAB_VIEWABILITY_75_PERCENT_HIGHER", "IAB_VIEWABILITY_70_PERCENT_HIGHER", "IAB_VIEWABILITY_65_PERCENT_HIHGER", "IAB_VIEWABILITY_60_PERCENT_HIGHER", "IAB_VIEWABILITY_55_PERCENT_HIHGER", "IAB_VIEWABILITY_50_PERCENT_HIGHER", "IAB_VIEWABILITY_40_PERCENT_HIHGER", "IAB_VIEWABILITY_30_PERCENT_HIHGER"]  # noqa: E501
        if video_iab not in allowed_values:
            raise ValueError(
                "Invalid value for `video_iab` ({0}), must be one of {1}"
                .format(video_iab, allowed_values)
            )

        self._video_iab = video_iab

    @property
    def video_viewable_rate(self):
        """Gets the video_viewable_rate of this DoubleVerifyVideoViewability.

        Target web inventory to maximize fully viewable rate.

        :return: The video_viewable_rate of this DoubleVerifyVideoViewability.
        :rtype: str
        """
        return self._video_viewable_rate

    @video_viewable_rate.setter
    def video_viewable_rate(self, video_viewable_rate):
        """Sets the video_viewable_rate of this DoubleVerifyVideoViewability.

        Target web inventory to maximize fully viewable rate.

        :param video_viewable_rate: The video_viewable_rate of this DoubleVerifyVideoViewability.
        :type video_viewable_rate: str
        """
        allowed_values = ["VIDEO_VIEWABLE_RATE_UNSPECIFIED", "VIEWED_PERFORMANCE_40_PERCENT_HIGHER", "VIEWED_PERFORMANCE_35_PERCENT_HIGHER", "VIEWED_PERFORMANCE_30_PERCENT_HIGHER", "VIEWED_PERFORMANCE_25_PERCENT_HIGHER", "VIEWED_PERFORMANCE_20_PERCENT_HIGHER", "VIEWED_PERFORMANCE_10_PERCENT_HIGHER"]  # noqa: E501
        if video_viewable_rate not in allowed_values:
            raise ValueError(
                "Invalid value for `video_viewable_rate` ({0}), must be one of {1}"
                .format(video_viewable_rate, allowed_values)
            )

        self._video_viewable_rate = video_viewable_rate
