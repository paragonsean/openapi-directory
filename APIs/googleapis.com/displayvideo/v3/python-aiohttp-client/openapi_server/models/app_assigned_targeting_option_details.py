# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, app_platform: str=None, display_name: str=None, negative: bool=None):
        """AppAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param app_id: The app_id of this AppAssignedTargetingOptionDetails.
        :param app_platform: The app_platform of this AppAssignedTargetingOptionDetails.
        :param display_name: The display_name of this AppAssignedTargetingOptionDetails.
        :param negative: The negative of this AppAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'app_id': str,
            'app_platform': str,
            'display_name': str,
            'negative': bool
        }

        self.attribute_map = {
            'app_id': 'appId',
            'app_platform': 'appPlatform',
            'display_name': 'displayName',
            'negative': 'negative'
        }

        self._app_id = app_id
        self._app_platform = app_platform
        self._display_name = display_name
        self._negative = negative

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppAssignedTargetingOptionDetails of this AppAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this AppAssignedTargetingOptionDetails.

        Required. The ID of the app. Android's Play store app uses bundle ID, for example `com.google.android.gm`. Apple's App store app ID uses 9 digit string, for example `422689480`.

        :return: The app_id of this AppAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AppAssignedTargetingOptionDetails.

        Required. The ID of the app. Android's Play store app uses bundle ID, for example `com.google.android.gm`. Apple's App store app ID uses 9 digit string, for example `422689480`.

        :param app_id: The app_id of this AppAssignedTargetingOptionDetails.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def app_platform(self):
        """Gets the app_platform of this AppAssignedTargetingOptionDetails.

        Indicates the platform of the targeted app. If this field is not specified, the app platform will be assumed to be mobile (i.e., Android or iOS), and we will derive the appropriate mobile platform from the app ID.

        :return: The app_platform of this AppAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._app_platform

    @app_platform.setter
    def app_platform(self, app_platform):
        """Sets the app_platform of this AppAssignedTargetingOptionDetails.

        Indicates the platform of the targeted app. If this field is not specified, the app platform will be assumed to be mobile (i.e., Android or iOS), and we will derive the appropriate mobile platform from the app ID.

        :param app_platform: The app_platform of this AppAssignedTargetingOptionDetails.
        :type app_platform: str
        """
        allowed_values = ["APP_PLATFORM_UNSPECIFIED", "APP_PLATFORM_IOS", "APP_PLATFORM_ANDROID", "APP_PLATFORM_ROKU", "APP_PLATFORM_AMAZON_FIRETV", "APP_PLATFORM_PLAYSTATION", "APP_PLATFORM_APPLE_TV", "APP_PLATFORM_XBOX", "APP_PLATFORM_SAMSUNG_TV", "APP_PLATFORM_ANDROID_TV", "APP_PLATFORM_GENERIC_CTV"]  # noqa: E501
        if app_platform not in allowed_values:
            raise ValueError(
                "Invalid value for `app_platform` ({0}), must be one of {1}"
                .format(app_platform, allowed_values)
            )

        self._app_platform = app_platform

    @property
    def display_name(self):
        """Gets the display_name of this AppAssignedTargetingOptionDetails.

        Output only. The display name of the app.

        :return: The display_name of this AppAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AppAssignedTargetingOptionDetails.

        Output only. The display name of the app.

        :param display_name: The display_name of this AppAssignedTargetingOptionDetails.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def negative(self):
        """Gets the negative of this AppAssignedTargetingOptionDetails.

        Indicates if this option is being negatively targeted.

        :return: The negative of this AppAssignedTargetingOptionDetails.
        :rtype: bool
        """
        return self._negative

    @negative.setter
    def negative(self, negative):
        """Sets the negative of this AppAssignedTargetingOptionDetails.

        Indicates if this option is being negatively targeted.

        :param negative: The negative of this AppAssignedTargetingOptionDetails.
        :type negative: bool
        """

        self._negative = negative
