# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advertiser_ad_server_config import AdvertiserAdServerConfig
from openapi_server.models.advertiser_billing_config import AdvertiserBillingConfig
from openapi_server.models.advertiser_creative_config import AdvertiserCreativeConfig
from openapi_server.models.advertiser_data_access_config import AdvertiserDataAccessConfig
from openapi_server.models.advertiser_general_config import AdvertiserGeneralConfig
from openapi_server.models.advertiser_targeting_config import AdvertiserTargetingConfig
from openapi_server.models.integration_details import IntegrationDetails
from openapi_server import util


class Advertiser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_server_config: AdvertiserAdServerConfig=None, advertiser_id: str=None, billing_config: AdvertiserBillingConfig=None, creative_config: AdvertiserCreativeConfig=None, data_access_config: AdvertiserDataAccessConfig=None, display_name: str=None, entity_status: str=None, general_config: AdvertiserGeneralConfig=None, integration_details: IntegrationDetails=None, name: str=None, partner_id: str=None, prisma_enabled: bool=None, serving_config: AdvertiserTargetingConfig=None, update_time: str=None):
        """Advertiser - a model defined in OpenAPI

        :param ad_server_config: The ad_server_config of this Advertiser.
        :param advertiser_id: The advertiser_id of this Advertiser.
        :param billing_config: The billing_config of this Advertiser.
        :param creative_config: The creative_config of this Advertiser.
        :param data_access_config: The data_access_config of this Advertiser.
        :param display_name: The display_name of this Advertiser.
        :param entity_status: The entity_status of this Advertiser.
        :param general_config: The general_config of this Advertiser.
        :param integration_details: The integration_details of this Advertiser.
        :param name: The name of this Advertiser.
        :param partner_id: The partner_id of this Advertiser.
        :param prisma_enabled: The prisma_enabled of this Advertiser.
        :param serving_config: The serving_config of this Advertiser.
        :param update_time: The update_time of this Advertiser.
        """
        self.openapi_types = {
            'ad_server_config': AdvertiserAdServerConfig,
            'advertiser_id': str,
            'billing_config': AdvertiserBillingConfig,
            'creative_config': AdvertiserCreativeConfig,
            'data_access_config': AdvertiserDataAccessConfig,
            'display_name': str,
            'entity_status': str,
            'general_config': AdvertiserGeneralConfig,
            'integration_details': IntegrationDetails,
            'name': str,
            'partner_id': str,
            'prisma_enabled': bool,
            'serving_config': AdvertiserTargetingConfig,
            'update_time': str
        }

        self.attribute_map = {
            'ad_server_config': 'adServerConfig',
            'advertiser_id': 'advertiserId',
            'billing_config': 'billingConfig',
            'creative_config': 'creativeConfig',
            'data_access_config': 'dataAccessConfig',
            'display_name': 'displayName',
            'entity_status': 'entityStatus',
            'general_config': 'generalConfig',
            'integration_details': 'integrationDetails',
            'name': 'name',
            'partner_id': 'partnerId',
            'prisma_enabled': 'prismaEnabled',
            'serving_config': 'servingConfig',
            'update_time': 'updateTime'
        }

        self._ad_server_config = ad_server_config
        self._advertiser_id = advertiser_id
        self._billing_config = billing_config
        self._creative_config = creative_config
        self._data_access_config = data_access_config
        self._display_name = display_name
        self._entity_status = entity_status
        self._general_config = general_config
        self._integration_details = integration_details
        self._name = name
        self._partner_id = partner_id
        self._prisma_enabled = prisma_enabled
        self._serving_config = serving_config
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Advertiser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Advertiser of this Advertiser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_server_config(self):
        """Gets the ad_server_config of this Advertiser.


        :return: The ad_server_config of this Advertiser.
        :rtype: AdvertiserAdServerConfig
        """
        return self._ad_server_config

    @ad_server_config.setter
    def ad_server_config(self, ad_server_config):
        """Sets the ad_server_config of this Advertiser.


        :param ad_server_config: The ad_server_config of this Advertiser.
        :type ad_server_config: AdvertiserAdServerConfig
        """

        self._ad_server_config = ad_server_config

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this Advertiser.

        Output only. The unique ID of the advertiser. Assigned by the system.

        :return: The advertiser_id of this Advertiser.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this Advertiser.

        Output only. The unique ID of the advertiser. Assigned by the system.

        :param advertiser_id: The advertiser_id of this Advertiser.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def billing_config(self):
        """Gets the billing_config of this Advertiser.


        :return: The billing_config of this Advertiser.
        :rtype: AdvertiserBillingConfig
        """
        return self._billing_config

    @billing_config.setter
    def billing_config(self, billing_config):
        """Sets the billing_config of this Advertiser.


        :param billing_config: The billing_config of this Advertiser.
        :type billing_config: AdvertiserBillingConfig
        """

        self._billing_config = billing_config

    @property
    def creative_config(self):
        """Gets the creative_config of this Advertiser.


        :return: The creative_config of this Advertiser.
        :rtype: AdvertiserCreativeConfig
        """
        return self._creative_config

    @creative_config.setter
    def creative_config(self, creative_config):
        """Sets the creative_config of this Advertiser.


        :param creative_config: The creative_config of this Advertiser.
        :type creative_config: AdvertiserCreativeConfig
        """

        self._creative_config = creative_config

    @property
    def data_access_config(self):
        """Gets the data_access_config of this Advertiser.


        :return: The data_access_config of this Advertiser.
        :rtype: AdvertiserDataAccessConfig
        """
        return self._data_access_config

    @data_access_config.setter
    def data_access_config(self, data_access_config):
        """Sets the data_access_config of this Advertiser.


        :param data_access_config: The data_access_config of this Advertiser.
        :type data_access_config: AdvertiserDataAccessConfig
        """

        self._data_access_config = data_access_config

    @property
    def display_name(self):
        """Gets the display_name of this Advertiser.

        Required. The display name of the advertiser. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :return: The display_name of this Advertiser.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Advertiser.

        Required. The display name of the advertiser. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :param display_name: The display_name of this Advertiser.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def entity_status(self):
        """Gets the entity_status of this Advertiser.

        Required. Controls whether or not insertion orders and line items of the advertiser can spend their budgets and bid on inventory. * Accepted values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_PAUSED` and `ENTITY_STATUS_SCHEDULED_FOR_DELETION`. * If set to `ENTITY_STATUS_SCHEDULED_FOR_DELETION`, the advertiser will be deleted 30 days from when it was first scheduled for deletion.

        :return: The entity_status of this Advertiser.
        :rtype: str
        """
        return self._entity_status

    @entity_status.setter
    def entity_status(self, entity_status):
        """Sets the entity_status of this Advertiser.

        Required. Controls whether or not insertion orders and line items of the advertiser can spend their budgets and bid on inventory. * Accepted values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_PAUSED` and `ENTITY_STATUS_SCHEDULED_FOR_DELETION`. * If set to `ENTITY_STATUS_SCHEDULED_FOR_DELETION`, the advertiser will be deleted 30 days from when it was first scheduled for deletion.

        :param entity_status: The entity_status of this Advertiser.
        :type entity_status: str
        """
        allowed_values = ["ENTITY_STATUS_UNSPECIFIED", "ENTITY_STATUS_ACTIVE", "ENTITY_STATUS_ARCHIVED", "ENTITY_STATUS_DRAFT", "ENTITY_STATUS_PAUSED", "ENTITY_STATUS_SCHEDULED_FOR_DELETION"]  # noqa: E501
        if entity_status not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_status` ({0}), must be one of {1}"
                .format(entity_status, allowed_values)
            )

        self._entity_status = entity_status

    @property
    def general_config(self):
        """Gets the general_config of this Advertiser.


        :return: The general_config of this Advertiser.
        :rtype: AdvertiserGeneralConfig
        """
        return self._general_config

    @general_config.setter
    def general_config(self, general_config):
        """Sets the general_config of this Advertiser.


        :param general_config: The general_config of this Advertiser.
        :type general_config: AdvertiserGeneralConfig
        """

        self._general_config = general_config

    @property
    def integration_details(self):
        """Gets the integration_details of this Advertiser.


        :return: The integration_details of this Advertiser.
        :rtype: IntegrationDetails
        """
        return self._integration_details

    @integration_details.setter
    def integration_details(self, integration_details):
        """Sets the integration_details of this Advertiser.


        :param integration_details: The integration_details of this Advertiser.
        :type integration_details: IntegrationDetails
        """

        self._integration_details = integration_details

    @property
    def name(self):
        """Gets the name of this Advertiser.

        Output only. The resource name of the advertiser.

        :return: The name of this Advertiser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Advertiser.

        Output only. The resource name of the advertiser.

        :param name: The name of this Advertiser.
        :type name: str
        """

        self._name = name

    @property
    def partner_id(self):
        """Gets the partner_id of this Advertiser.

        Required. Immutable. The unique ID of the partner that the advertiser belongs to.

        :return: The partner_id of this Advertiser.
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this Advertiser.

        Required. Immutable. The unique ID of the partner that the advertiser belongs to.

        :param partner_id: The partner_id of this Advertiser.
        :type partner_id: str
        """

        self._partner_id = partner_id

    @property
    def prisma_enabled(self):
        """Gets the prisma_enabled of this Advertiser.

        Whether integration with Mediaocean (Prisma) is enabled. By enabling this, you agree to the following: On behalf of my company, I authorize Mediaocean (Prisma) to send budget segment plans to Google, and I authorize Google to send corresponding reporting and invoices from DV360 to Mediaocean for the purposes of budget planning, billing, and reconciliation for this advertiser.

        :return: The prisma_enabled of this Advertiser.
        :rtype: bool
        """
        return self._prisma_enabled

    @prisma_enabled.setter
    def prisma_enabled(self, prisma_enabled):
        """Sets the prisma_enabled of this Advertiser.

        Whether integration with Mediaocean (Prisma) is enabled. By enabling this, you agree to the following: On behalf of my company, I authorize Mediaocean (Prisma) to send budget segment plans to Google, and I authorize Google to send corresponding reporting and invoices from DV360 to Mediaocean for the purposes of budget planning, billing, and reconciliation for this advertiser.

        :param prisma_enabled: The prisma_enabled of this Advertiser.
        :type prisma_enabled: bool
        """

        self._prisma_enabled = prisma_enabled

    @property
    def serving_config(self):
        """Gets the serving_config of this Advertiser.


        :return: The serving_config of this Advertiser.
        :rtype: AdvertiserTargetingConfig
        """
        return self._serving_config

    @serving_config.setter
    def serving_config(self, serving_config):
        """Sets the serving_config of this Advertiser.


        :param serving_config: The serving_config of this Advertiser.
        :type serving_config: AdvertiserTargetingConfig
        """

        self._serving_config = serving_config

    @property
    def update_time(self):
        """Gets the update_time of this Advertiser.

        Output only. The timestamp when the advertiser was last updated. Assigned by the system.

        :return: The update_time of this Advertiser.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Advertiser.

        Output only. The timestamp when the advertiser was last updated. Assigned by the system.

        :param update_time: The update_time of this Advertiser.
        :type update_time: str
        """

        self._update_time = update_time
