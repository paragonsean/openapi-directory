# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DoubleVerifyDisplayViewability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, iab: str=None, viewable_during: str=None):
        """DoubleVerifyDisplayViewability - a model defined in OpenAPI

        :param iab: The iab of this DoubleVerifyDisplayViewability.
        :param viewable_during: The viewable_during of this DoubleVerifyDisplayViewability.
        """
        self.openapi_types = {
            'iab': str,
            'viewable_during': str
        }

        self.attribute_map = {
            'iab': 'iab',
            'viewable_during': 'viewableDuring'
        }

        self._iab = iab
        self._viewable_during = viewable_during

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DoubleVerifyDisplayViewability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DoubleVerifyDisplayViewability of this DoubleVerifyDisplayViewability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def iab(self):
        """Gets the iab of this DoubleVerifyDisplayViewability.

        Target web and app inventory to maximize IAB viewable rate.

        :return: The iab of this DoubleVerifyDisplayViewability.
        :rtype: str
        """
        return self._iab

    @iab.setter
    def iab(self, iab):
        """Sets the iab of this DoubleVerifyDisplayViewability.

        Target web and app inventory to maximize IAB viewable rate.

        :param iab: The iab of this DoubleVerifyDisplayViewability.
        :type iab: str
        """
        allowed_values = ["IAB_VIEWED_RATE_UNSPECIFIED", "IAB_VIEWED_RATE_80_PERCENT_HIGHER", "IAB_VIEWED_RATE_75_PERCENT_HIGHER", "IAB_VIEWED_RATE_70_PERCENT_HIGHER", "IAB_VIEWED_RATE_65_PERCENT_HIGHER", "IAB_VIEWED_RATE_60_PERCENT_HIGHER", "IAB_VIEWED_RATE_55_PERCENT_HIGHER", "IAB_VIEWED_RATE_50_PERCENT_HIGHER", "IAB_VIEWED_RATE_40_PERCENT_HIGHER", "IAB_VIEWED_RATE_30_PERCENT_HIGHER"]  # noqa: E501
        if iab not in allowed_values:
            raise ValueError(
                "Invalid value for `iab` ({0}), must be one of {1}"
                .format(iab, allowed_values)
            )

        self._iab = iab

    @property
    def viewable_during(self):
        """Gets the viewable_during of this DoubleVerifyDisplayViewability.

        Target web and app inventory to maximize 100% viewable duration.

        :return: The viewable_during of this DoubleVerifyDisplayViewability.
        :rtype: str
        """
        return self._viewable_during

    @viewable_during.setter
    def viewable_during(self, viewable_during):
        """Sets the viewable_during of this DoubleVerifyDisplayViewability.

        Target web and app inventory to maximize 100% viewable duration.

        :param viewable_during: The viewable_during of this DoubleVerifyDisplayViewability.
        :type viewable_during: str
        """
        allowed_values = ["AVERAGE_VIEW_DURATION_UNSPECIFIED", "AVERAGE_VIEW_DURATION_5_SEC", "AVERAGE_VIEW_DURATION_10_SEC", "AVERAGE_VIEW_DURATION_15_SEC"]  # noqa: E501
        if viewable_during not in allowed_values:
            raise ValueError(
                "Invalid value for `viewable_during` ({0}), must be one of {1}"
                .format(viewable_during, allowed_values)
            )

        self._viewable_during = viewable_during
