# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CmHybridConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cm_account_id: str=None, cm_advertiser_ids: List[str]=None, cm_floodlight_config_id: str=None, cm_floodlight_linking_authorized: bool=None, cm_syncable_site_ids: List[str]=None, dv360_to_cm_cost_reporting_enabled: bool=None, dv360_to_cm_data_sharing_enabled: bool=None):
        """CmHybridConfig - a model defined in OpenAPI

        :param cm_account_id: The cm_account_id of this CmHybridConfig.
        :param cm_advertiser_ids: The cm_advertiser_ids of this CmHybridConfig.
        :param cm_floodlight_config_id: The cm_floodlight_config_id of this CmHybridConfig.
        :param cm_floodlight_linking_authorized: The cm_floodlight_linking_authorized of this CmHybridConfig.
        :param cm_syncable_site_ids: The cm_syncable_site_ids of this CmHybridConfig.
        :param dv360_to_cm_cost_reporting_enabled: The dv360_to_cm_cost_reporting_enabled of this CmHybridConfig.
        :param dv360_to_cm_data_sharing_enabled: The dv360_to_cm_data_sharing_enabled of this CmHybridConfig.
        """
        self.openapi_types = {
            'cm_account_id': str,
            'cm_advertiser_ids': List[str],
            'cm_floodlight_config_id': str,
            'cm_floodlight_linking_authorized': bool,
            'cm_syncable_site_ids': List[str],
            'dv360_to_cm_cost_reporting_enabled': bool,
            'dv360_to_cm_data_sharing_enabled': bool
        }

        self.attribute_map = {
            'cm_account_id': 'cmAccountId',
            'cm_advertiser_ids': 'cmAdvertiserIds',
            'cm_floodlight_config_id': 'cmFloodlightConfigId',
            'cm_floodlight_linking_authorized': 'cmFloodlightLinkingAuthorized',
            'cm_syncable_site_ids': 'cmSyncableSiteIds',
            'dv360_to_cm_cost_reporting_enabled': 'dv360ToCmCostReportingEnabled',
            'dv360_to_cm_data_sharing_enabled': 'dv360ToCmDataSharingEnabled'
        }

        self._cm_account_id = cm_account_id
        self._cm_advertiser_ids = cm_advertiser_ids
        self._cm_floodlight_config_id = cm_floodlight_config_id
        self._cm_floodlight_linking_authorized = cm_floodlight_linking_authorized
        self._cm_syncable_site_ids = cm_syncable_site_ids
        self._dv360_to_cm_cost_reporting_enabled = dv360_to_cm_cost_reporting_enabled
        self._dv360_to_cm_data_sharing_enabled = dv360_to_cm_data_sharing_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CmHybridConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CmHybridConfig of this CmHybridConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cm_account_id(self):
        """Gets the cm_account_id of this CmHybridConfig.

        Required. Immutable. Account ID of the CM360 Floodlight configuration linked with the DV360 advertiser.

        :return: The cm_account_id of this CmHybridConfig.
        :rtype: str
        """
        return self._cm_account_id

    @cm_account_id.setter
    def cm_account_id(self, cm_account_id):
        """Sets the cm_account_id of this CmHybridConfig.

        Required. Immutable. Account ID of the CM360 Floodlight configuration linked with the DV360 advertiser.

        :param cm_account_id: The cm_account_id of this CmHybridConfig.
        :type cm_account_id: str
        """

        self._cm_account_id = cm_account_id

    @property
    def cm_advertiser_ids(self):
        """Gets the cm_advertiser_ids of this CmHybridConfig.

        Output only. The set of CM360 Advertiser IDs sharing the CM360 Floodlight configuration.

        :return: The cm_advertiser_ids of this CmHybridConfig.
        :rtype: List[str]
        """
        return self._cm_advertiser_ids

    @cm_advertiser_ids.setter
    def cm_advertiser_ids(self, cm_advertiser_ids):
        """Sets the cm_advertiser_ids of this CmHybridConfig.

        Output only. The set of CM360 Advertiser IDs sharing the CM360 Floodlight configuration.

        :param cm_advertiser_ids: The cm_advertiser_ids of this CmHybridConfig.
        :type cm_advertiser_ids: List[str]
        """

        self._cm_advertiser_ids = cm_advertiser_ids

    @property
    def cm_floodlight_config_id(self):
        """Gets the cm_floodlight_config_id of this CmHybridConfig.

        Required. Immutable. ID of the CM360 Floodlight configuration linked with the DV360 advertiser.

        :return: The cm_floodlight_config_id of this CmHybridConfig.
        :rtype: str
        """
        return self._cm_floodlight_config_id

    @cm_floodlight_config_id.setter
    def cm_floodlight_config_id(self, cm_floodlight_config_id):
        """Sets the cm_floodlight_config_id of this CmHybridConfig.

        Required. Immutable. ID of the CM360 Floodlight configuration linked with the DV360 advertiser.

        :param cm_floodlight_config_id: The cm_floodlight_config_id of this CmHybridConfig.
        :type cm_floodlight_config_id: str
        """

        self._cm_floodlight_config_id = cm_floodlight_config_id

    @property
    def cm_floodlight_linking_authorized(self):
        """Gets the cm_floodlight_linking_authorized of this CmHybridConfig.

        Required. Immutable. By setting this field to `true`, you, on behalf of your company, authorize the sharing of information from the given Floodlight configuration to this Display & Video 360 advertiser.

        :return: The cm_floodlight_linking_authorized of this CmHybridConfig.
        :rtype: bool
        """
        return self._cm_floodlight_linking_authorized

    @cm_floodlight_linking_authorized.setter
    def cm_floodlight_linking_authorized(self, cm_floodlight_linking_authorized):
        """Sets the cm_floodlight_linking_authorized of this CmHybridConfig.

        Required. Immutable. By setting this field to `true`, you, on behalf of your company, authorize the sharing of information from the given Floodlight configuration to this Display & Video 360 advertiser.

        :param cm_floodlight_linking_authorized: The cm_floodlight_linking_authorized of this CmHybridConfig.
        :type cm_floodlight_linking_authorized: bool
        """

        self._cm_floodlight_linking_authorized = cm_floodlight_linking_authorized

    @property
    def cm_syncable_site_ids(self):
        """Gets the cm_syncable_site_ids of this CmHybridConfig.

        A list of CM360 sites whose placements will be synced to DV360 as creatives. If absent or empty in CreateAdvertiser method, the system will automatically create a CM360 site. Removing sites from this list may cause DV360 creatives synced from CM360 to be deleted. At least one site must be specified.

        :return: The cm_syncable_site_ids of this CmHybridConfig.
        :rtype: List[str]
        """
        return self._cm_syncable_site_ids

    @cm_syncable_site_ids.setter
    def cm_syncable_site_ids(self, cm_syncable_site_ids):
        """Sets the cm_syncable_site_ids of this CmHybridConfig.

        A list of CM360 sites whose placements will be synced to DV360 as creatives. If absent or empty in CreateAdvertiser method, the system will automatically create a CM360 site. Removing sites from this list may cause DV360 creatives synced from CM360 to be deleted. At least one site must be specified.

        :param cm_syncable_site_ids: The cm_syncable_site_ids of this CmHybridConfig.
        :type cm_syncable_site_ids: List[str]
        """

        self._cm_syncable_site_ids = cm_syncable_site_ids

    @property
    def dv360_to_cm_cost_reporting_enabled(self):
        """Gets the dv360_to_cm_cost_reporting_enabled of this CmHybridConfig.

        Whether or not to report DV360 cost to CM360.

        :return: The dv360_to_cm_cost_reporting_enabled of this CmHybridConfig.
        :rtype: bool
        """
        return self._dv360_to_cm_cost_reporting_enabled

    @dv360_to_cm_cost_reporting_enabled.setter
    def dv360_to_cm_cost_reporting_enabled(self, dv360_to_cm_cost_reporting_enabled):
        """Sets the dv360_to_cm_cost_reporting_enabled of this CmHybridConfig.

        Whether or not to report DV360 cost to CM360.

        :param dv360_to_cm_cost_reporting_enabled: The dv360_to_cm_cost_reporting_enabled of this CmHybridConfig.
        :type dv360_to_cm_cost_reporting_enabled: bool
        """

        self._dv360_to_cm_cost_reporting_enabled = dv360_to_cm_cost_reporting_enabled

    @property
    def dv360_to_cm_data_sharing_enabled(self):
        """Gets the dv360_to_cm_data_sharing_enabled of this CmHybridConfig.

        Whether or not to include DV360 data in CM360 data transfer reports.

        :return: The dv360_to_cm_data_sharing_enabled of this CmHybridConfig.
        :rtype: bool
        """
        return self._dv360_to_cm_data_sharing_enabled

    @dv360_to_cm_data_sharing_enabled.setter
    def dv360_to_cm_data_sharing_enabled(self, dv360_to_cm_data_sharing_enabled):
        """Sets the dv360_to_cm_data_sharing_enabled of this CmHybridConfig.

        Whether or not to include DV360 data in CM360 data transfer reports.

        :param dv360_to_cm_data_sharing_enabled: The dv360_to_cm_data_sharing_enabled of this CmHybridConfig.
        :type dv360_to_cm_data_sharing_enabled: bool
        """

        self._dv360_to_cm_data_sharing_enabled = dv360_to_cm_data_sharing_enabled
