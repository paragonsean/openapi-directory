# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContentDurationAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_duration: str=None, targeting_option_id: str=None):
        """ContentDurationAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param content_duration: The content_duration of this ContentDurationAssignedTargetingOptionDetails.
        :param targeting_option_id: The targeting_option_id of this ContentDurationAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'content_duration': str,
            'targeting_option_id': str
        }

        self.attribute_map = {
            'content_duration': 'contentDuration',
            'targeting_option_id': 'targetingOptionId'
        }

        self._content_duration = content_duration
        self._targeting_option_id = targeting_option_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentDurationAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentDurationAssignedTargetingOptionDetails of this ContentDurationAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_duration(self):
        """Gets the content_duration of this ContentDurationAssignedTargetingOptionDetails.

        Output only. The content duration.

        :return: The content_duration of this ContentDurationAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._content_duration

    @content_duration.setter
    def content_duration(self, content_duration):
        """Sets the content_duration of this ContentDurationAssignedTargetingOptionDetails.

        Output only. The content duration.

        :param content_duration: The content_duration of this ContentDurationAssignedTargetingOptionDetails.
        :type content_duration: str
        """
        allowed_values = ["CONTENT_DURATION_UNSPECIFIED", "CONTENT_DURATION_UNKNOWN", "CONTENT_DURATION_0_TO_1_MIN", "CONTENT_DURATION_1_TO_5_MIN", "CONTENT_DURATION_5_TO_15_MIN", "CONTENT_DURATION_15_TO_30_MIN", "CONTENT_DURATION_30_TO_60_MIN", "CONTENT_DURATION_OVER_60_MIN"]  # noqa: E501
        if content_duration not in allowed_values:
            raise ValueError(
                "Invalid value for `content_duration` ({0}), must be one of {1}"
                .format(content_duration, allowed_values)
            )

        self._content_duration = content_duration

    @property
    def targeting_option_id(self):
        """Gets the targeting_option_id of this ContentDurationAssignedTargetingOptionDetails.

        Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CONTENT_DURATION`.

        :return: The targeting_option_id of this ContentDurationAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._targeting_option_id

    @targeting_option_id.setter
    def targeting_option_id(self, targeting_option_id):
        """Sets the targeting_option_id of this ContentDurationAssignedTargetingOptionDetails.

        Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CONTENT_DURATION`.

        :param targeting_option_id: The targeting_option_id of this ContentDurationAssignedTargetingOptionDetails.
        :type targeting_option_id: str
        """

        self._targeting_option_id = targeting_option_id
