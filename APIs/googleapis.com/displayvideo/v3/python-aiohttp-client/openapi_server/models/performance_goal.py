# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PerformanceGoal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, performance_goal_amount_micros: str=None, performance_goal_percentage_micros: str=None, performance_goal_string: str=None, performance_goal_type: str=None):
        """PerformanceGoal - a model defined in OpenAPI

        :param performance_goal_amount_micros: The performance_goal_amount_micros of this PerformanceGoal.
        :param performance_goal_percentage_micros: The performance_goal_percentage_micros of this PerformanceGoal.
        :param performance_goal_string: The performance_goal_string of this PerformanceGoal.
        :param performance_goal_type: The performance_goal_type of this PerformanceGoal.
        """
        self.openapi_types = {
            'performance_goal_amount_micros': str,
            'performance_goal_percentage_micros': str,
            'performance_goal_string': str,
            'performance_goal_type': str
        }

        self.attribute_map = {
            'performance_goal_amount_micros': 'performanceGoalAmountMicros',
            'performance_goal_percentage_micros': 'performanceGoalPercentageMicros',
            'performance_goal_string': 'performanceGoalString',
            'performance_goal_type': 'performanceGoalType'
        }

        self._performance_goal_amount_micros = performance_goal_amount_micros
        self._performance_goal_percentage_micros = performance_goal_percentage_micros
        self._performance_goal_string = performance_goal_string
        self._performance_goal_type = performance_goal_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerformanceGoal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerformanceGoal of this PerformanceGoal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def performance_goal_amount_micros(self):
        """Gets the performance_goal_amount_micros of this PerformanceGoal.

        The goal amount, in micros of the advertiser's currency. Applicable when performance_goal_type is one of: * `PERFORMANCE_GOAL_TYPE_CPM` * `PERFORMANCE_GOAL_TYPE_CPC` * `PERFORMANCE_GOAL_TYPE_CPA` * `PERFORMANCE_GOAL_TYPE_CPIAVC` * `PERFORMANCE_GOAL_TYPE_VCPM` For example 1500000 represents 1.5 standard units of the currency.

        :return: The performance_goal_amount_micros of this PerformanceGoal.
        :rtype: str
        """
        return self._performance_goal_amount_micros

    @performance_goal_amount_micros.setter
    def performance_goal_amount_micros(self, performance_goal_amount_micros):
        """Sets the performance_goal_amount_micros of this PerformanceGoal.

        The goal amount, in micros of the advertiser's currency. Applicable when performance_goal_type is one of: * `PERFORMANCE_GOAL_TYPE_CPM` * `PERFORMANCE_GOAL_TYPE_CPC` * `PERFORMANCE_GOAL_TYPE_CPA` * `PERFORMANCE_GOAL_TYPE_CPIAVC` * `PERFORMANCE_GOAL_TYPE_VCPM` For example 1500000 represents 1.5 standard units of the currency.

        :param performance_goal_amount_micros: The performance_goal_amount_micros of this PerformanceGoal.
        :type performance_goal_amount_micros: str
        """

        self._performance_goal_amount_micros = performance_goal_amount_micros

    @property
    def performance_goal_percentage_micros(self):
        """Gets the performance_goal_percentage_micros of this PerformanceGoal.

        The decimal representation of the goal percentage in micros. Applicable when performance_goal_type is one of: * `PERFORMANCE_GOAL_TYPE_CTR` * `PERFORMANCE_GOAL_TYPE_VIEWABILITY` * `PERFORMANCE_GOAL_TYPE_CLICK_CVR` * `PERFORMANCE_GOAL_TYPE_IMPRESSION_CVR` * `PERFORMANCE_GOAL_TYPE_VTR` * `PERFORMANCE_GOAL_TYPE_AUDIO_COMPLETION_RATE` * `PERFORMANCE_GOAL_TYPE_VIDEO_COMPLETION_RATE` For example, 70000 represents 7% (decimal 0.07).

        :return: The performance_goal_percentage_micros of this PerformanceGoal.
        :rtype: str
        """
        return self._performance_goal_percentage_micros

    @performance_goal_percentage_micros.setter
    def performance_goal_percentage_micros(self, performance_goal_percentage_micros):
        """Sets the performance_goal_percentage_micros of this PerformanceGoal.

        The decimal representation of the goal percentage in micros. Applicable when performance_goal_type is one of: * `PERFORMANCE_GOAL_TYPE_CTR` * `PERFORMANCE_GOAL_TYPE_VIEWABILITY` * `PERFORMANCE_GOAL_TYPE_CLICK_CVR` * `PERFORMANCE_GOAL_TYPE_IMPRESSION_CVR` * `PERFORMANCE_GOAL_TYPE_VTR` * `PERFORMANCE_GOAL_TYPE_AUDIO_COMPLETION_RATE` * `PERFORMANCE_GOAL_TYPE_VIDEO_COMPLETION_RATE` For example, 70000 represents 7% (decimal 0.07).

        :param performance_goal_percentage_micros: The performance_goal_percentage_micros of this PerformanceGoal.
        :type performance_goal_percentage_micros: str
        """

        self._performance_goal_percentage_micros = performance_goal_percentage_micros

    @property
    def performance_goal_string(self):
        """Gets the performance_goal_string of this PerformanceGoal.

        A key performance indicator (KPI) string, which can be empty. Must be UTF-8 encoded with a length of no more than 100 characters. Applicable when performance_goal_type is set to `PERFORMANCE_GOAL_TYPE_OTHER`.

        :return: The performance_goal_string of this PerformanceGoal.
        :rtype: str
        """
        return self._performance_goal_string

    @performance_goal_string.setter
    def performance_goal_string(self, performance_goal_string):
        """Sets the performance_goal_string of this PerformanceGoal.

        A key performance indicator (KPI) string, which can be empty. Must be UTF-8 encoded with a length of no more than 100 characters. Applicable when performance_goal_type is set to `PERFORMANCE_GOAL_TYPE_OTHER`.

        :param performance_goal_string: The performance_goal_string of this PerformanceGoal.
        :type performance_goal_string: str
        """

        self._performance_goal_string = performance_goal_string

    @property
    def performance_goal_type(self):
        """Gets the performance_goal_type of this PerformanceGoal.

        Required. The type of the performance goal.

        :return: The performance_goal_type of this PerformanceGoal.
        :rtype: str
        """
        return self._performance_goal_type

    @performance_goal_type.setter
    def performance_goal_type(self, performance_goal_type):
        """Sets the performance_goal_type of this PerformanceGoal.

        Required. The type of the performance goal.

        :param performance_goal_type: The performance_goal_type of this PerformanceGoal.
        :type performance_goal_type: str
        """
        allowed_values = ["PERFORMANCE_GOAL_TYPE_UNSPECIFIED", "PERFORMANCE_GOAL_TYPE_CPM", "PERFORMANCE_GOAL_TYPE_CPC", "PERFORMANCE_GOAL_TYPE_CPA", "PERFORMANCE_GOAL_TYPE_CTR", "PERFORMANCE_GOAL_TYPE_VIEWABILITY", "PERFORMANCE_GOAL_TYPE_CPIAVC", "PERFORMANCE_GOAL_TYPE_CPE", "PERFORMANCE_GOAL_TYPE_CLICK_CVR", "PERFORMANCE_GOAL_TYPE_IMPRESSION_CVR", "PERFORMANCE_GOAL_TYPE_VCPM", "PERFORMANCE_GOAL_TYPE_VTR", "PERFORMANCE_GOAL_TYPE_AUDIO_COMPLETION_RATE", "PERFORMANCE_GOAL_TYPE_VIDEO_COMPLETION_RATE", "PERFORMANCE_GOAL_TYPE_OTHER"]  # noqa: E501
        if performance_goal_type not in allowed_values:
            raise ValueError(
                "Invalid value for `performance_goal_type` ({0}), must be one of {1}"
                .format(performance_goal_type, allowed_values)
            )

        self._performance_goal_type = performance_goal_type
