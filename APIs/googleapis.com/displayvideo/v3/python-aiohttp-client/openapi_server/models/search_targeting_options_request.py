# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.business_chain_search_terms import BusinessChainSearchTerms
from openapi_server.models.geo_region_search_terms import GeoRegionSearchTerms
from openapi_server.models.poi_search_terms import PoiSearchTerms
from openapi_server import util


class SearchTargetingOptionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertiser_id: str=None, business_chain_search_terms: BusinessChainSearchTerms=None, geo_region_search_terms: GeoRegionSearchTerms=None, page_size: int=None, page_token: str=None, poi_search_terms: PoiSearchTerms=None):
        """SearchTargetingOptionsRequest - a model defined in OpenAPI

        :param advertiser_id: The advertiser_id of this SearchTargetingOptionsRequest.
        :param business_chain_search_terms: The business_chain_search_terms of this SearchTargetingOptionsRequest.
        :param geo_region_search_terms: The geo_region_search_terms of this SearchTargetingOptionsRequest.
        :param page_size: The page_size of this SearchTargetingOptionsRequest.
        :param page_token: The page_token of this SearchTargetingOptionsRequest.
        :param poi_search_terms: The poi_search_terms of this SearchTargetingOptionsRequest.
        """
        self.openapi_types = {
            'advertiser_id': str,
            'business_chain_search_terms': BusinessChainSearchTerms,
            'geo_region_search_terms': GeoRegionSearchTerms,
            'page_size': int,
            'page_token': str,
            'poi_search_terms': PoiSearchTerms
        }

        self.attribute_map = {
            'advertiser_id': 'advertiserId',
            'business_chain_search_terms': 'businessChainSearchTerms',
            'geo_region_search_terms': 'geoRegionSearchTerms',
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'poi_search_terms': 'poiSearchTerms'
        }

        self._advertiser_id = advertiser_id
        self._business_chain_search_terms = business_chain_search_terms
        self._geo_region_search_terms = geo_region_search_terms
        self._page_size = page_size
        self._page_token = page_token
        self._poi_search_terms = poi_search_terms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchTargetingOptionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchTargetingOptionsRequest of this SearchTargetingOptionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this SearchTargetingOptionsRequest.

        Required. The Advertiser this request is being made in the context of.

        :return: The advertiser_id of this SearchTargetingOptionsRequest.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this SearchTargetingOptionsRequest.

        Required. The Advertiser this request is being made in the context of.

        :param advertiser_id: The advertiser_id of this SearchTargetingOptionsRequest.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def business_chain_search_terms(self):
        """Gets the business_chain_search_terms of this SearchTargetingOptionsRequest.


        :return: The business_chain_search_terms of this SearchTargetingOptionsRequest.
        :rtype: BusinessChainSearchTerms
        """
        return self._business_chain_search_terms

    @business_chain_search_terms.setter
    def business_chain_search_terms(self, business_chain_search_terms):
        """Sets the business_chain_search_terms of this SearchTargetingOptionsRequest.


        :param business_chain_search_terms: The business_chain_search_terms of this SearchTargetingOptionsRequest.
        :type business_chain_search_terms: BusinessChainSearchTerms
        """

        self._business_chain_search_terms = business_chain_search_terms

    @property
    def geo_region_search_terms(self):
        """Gets the geo_region_search_terms of this SearchTargetingOptionsRequest.


        :return: The geo_region_search_terms of this SearchTargetingOptionsRequest.
        :rtype: GeoRegionSearchTerms
        """
        return self._geo_region_search_terms

    @geo_region_search_terms.setter
    def geo_region_search_terms(self, geo_region_search_terms):
        """Sets the geo_region_search_terms of this SearchTargetingOptionsRequest.


        :param geo_region_search_terms: The geo_region_search_terms of this SearchTargetingOptionsRequest.
        :type geo_region_search_terms: GeoRegionSearchTerms
        """

        self._geo_region_search_terms = geo_region_search_terms

    @property
    def page_size(self):
        """Gets the page_size of this SearchTargetingOptionsRequest.

        Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.

        :return: The page_size of this SearchTargetingOptionsRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this SearchTargetingOptionsRequest.

        Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.

        :param page_size: The page_size of this SearchTargetingOptionsRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this SearchTargetingOptionsRequest.

        A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `SearchTargetingOptions` method. If not specified, the first page of results will be returned.

        :return: The page_token of this SearchTargetingOptionsRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this SearchTargetingOptionsRequest.

        A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `SearchTargetingOptions` method. If not specified, the first page of results will be returned.

        :param page_token: The page_token of this SearchTargetingOptionsRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def poi_search_terms(self):
        """Gets the poi_search_terms of this SearchTargetingOptionsRequest.


        :return: The poi_search_terms of this SearchTargetingOptionsRequest.
        :rtype: PoiSearchTerms
        """
        return self._poi_search_terms

    @poi_search_terms.setter
    def poi_search_terms(self, poi_search_terms):
        """Sets the poi_search_terms of this SearchTargetingOptionsRequest.


        :param poi_search_terms: The poi_search_terms of this SearchTargetingOptionsRequest.
        :type poi_search_terms: PoiSearchTerms
        """

        self._poi_search_terms = poi_search_terms
