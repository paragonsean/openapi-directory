# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BusinessChainTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_chain: str=None, geo_region: str=None, geo_region_type: str=None):
        """BusinessChainTargetingOptionDetails - a model defined in OpenAPI

        :param business_chain: The business_chain of this BusinessChainTargetingOptionDetails.
        :param geo_region: The geo_region of this BusinessChainTargetingOptionDetails.
        :param geo_region_type: The geo_region_type of this BusinessChainTargetingOptionDetails.
        """
        self.openapi_types = {
            'business_chain': str,
            'geo_region': str,
            'geo_region_type': str
        }

        self.attribute_map = {
            'business_chain': 'businessChain',
            'geo_region': 'geoRegion',
            'geo_region_type': 'geoRegionType'
        }

        self._business_chain = business_chain
        self._geo_region = geo_region
        self._geo_region_type = geo_region_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BusinessChainTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BusinessChainTargetingOptionDetails of this BusinessChainTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_chain(self):
        """Gets the business_chain of this BusinessChainTargetingOptionDetails.

        Output only. The display name of the business chain, e.g. \"KFC\", \"Chase Bank\".

        :return: The business_chain of this BusinessChainTargetingOptionDetails.
        :rtype: str
        """
        return self._business_chain

    @business_chain.setter
    def business_chain(self, business_chain):
        """Sets the business_chain of this BusinessChainTargetingOptionDetails.

        Output only. The display name of the business chain, e.g. \"KFC\", \"Chase Bank\".

        :param business_chain: The business_chain of this BusinessChainTargetingOptionDetails.
        :type business_chain: str
        """

        self._business_chain = business_chain

    @property
    def geo_region(self):
        """Gets the geo_region of this BusinessChainTargetingOptionDetails.

        Output only. The display name of the geographic region, e.g. \"Ontario, Canada\".

        :return: The geo_region of this BusinessChainTargetingOptionDetails.
        :rtype: str
        """
        return self._geo_region

    @geo_region.setter
    def geo_region(self, geo_region):
        """Sets the geo_region of this BusinessChainTargetingOptionDetails.

        Output only. The display name of the geographic region, e.g. \"Ontario, Canada\".

        :param geo_region: The geo_region of this BusinessChainTargetingOptionDetails.
        :type geo_region: str
        """

        self._geo_region = geo_region

    @property
    def geo_region_type(self):
        """Gets the geo_region_type of this BusinessChainTargetingOptionDetails.

        Output only. The type of the geographic region.

        :return: The geo_region_type of this BusinessChainTargetingOptionDetails.
        :rtype: str
        """
        return self._geo_region_type

    @geo_region_type.setter
    def geo_region_type(self, geo_region_type):
        """Sets the geo_region_type of this BusinessChainTargetingOptionDetails.

        Output only. The type of the geographic region.

        :param geo_region_type: The geo_region_type of this BusinessChainTargetingOptionDetails.
        :type geo_region_type: str
        """
        allowed_values = ["GEO_REGION_TYPE_UNKNOWN", "GEO_REGION_TYPE_OTHER", "GEO_REGION_TYPE_COUNTRY", "GEO_REGION_TYPE_REGION", "GEO_REGION_TYPE_TERRITORY", "GEO_REGION_TYPE_PROVINCE", "GEO_REGION_TYPE_STATE", "GEO_REGION_TYPE_PREFECTURE", "GEO_REGION_TYPE_GOVERNORATE", "GEO_REGION_TYPE_CANTON", "GEO_REGION_TYPE_UNION_TERRITORY", "GEO_REGION_TYPE_AUTONOMOUS_COMMUNITY", "GEO_REGION_TYPE_DMA_REGION", "GEO_REGION_TYPE_METRO", "GEO_REGION_TYPE_CONGRESSIONAL_DISTRICT", "GEO_REGION_TYPE_COUNTY", "GEO_REGION_TYPE_MUNICIPALITY", "GEO_REGION_TYPE_CITY", "GEO_REGION_TYPE_POSTAL_CODE", "GEO_REGION_TYPE_DEPARTMENT", "GEO_REGION_TYPE_AIRPORT", "GEO_REGION_TYPE_TV_REGION", "GEO_REGION_TYPE_OKRUG", "GEO_REGION_TYPE_BOROUGH", "GEO_REGION_TYPE_CITY_REGION", "GEO_REGION_TYPE_ARRONDISSEMENT", "GEO_REGION_TYPE_NEIGHBORHOOD", "GEO_REGION_TYPE_UNIVERSITY", "GEO_REGION_TYPE_DISTRICT"]  # noqa: E501
        if geo_region_type not in allowed_values:
            raise ValueError(
                "Invalid value for `geo_region_type` ({0}), must be one of {1}"
                .format(geo_region_type, allowed_values)
            )

        self._geo_region_type = geo_region_type
