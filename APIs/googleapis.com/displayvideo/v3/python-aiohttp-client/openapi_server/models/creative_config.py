# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inventory_source_display_creative_config import InventorySourceDisplayCreativeConfig
from openapi_server.models.inventory_source_video_creative_config import InventorySourceVideoCreativeConfig
from openapi_server import util


class CreativeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creative_type: str=None, display_creative_config: InventorySourceDisplayCreativeConfig=None, video_creative_config: InventorySourceVideoCreativeConfig=None):
        """CreativeConfig - a model defined in OpenAPI

        :param creative_type: The creative_type of this CreativeConfig.
        :param display_creative_config: The display_creative_config of this CreativeConfig.
        :param video_creative_config: The video_creative_config of this CreativeConfig.
        """
        self.openapi_types = {
            'creative_type': str,
            'display_creative_config': InventorySourceDisplayCreativeConfig,
            'video_creative_config': InventorySourceVideoCreativeConfig
        }

        self.attribute_map = {
            'creative_type': 'creativeType',
            'display_creative_config': 'displayCreativeConfig',
            'video_creative_config': 'videoCreativeConfig'
        }

        self._creative_type = creative_type
        self._display_creative_config = display_creative_config
        self._video_creative_config = video_creative_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreativeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreativeConfig of this CreativeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creative_type(self):
        """Gets the creative_type of this CreativeConfig.

        The type of creative that can be assigned to the inventory source. Only the following types are supported: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_VIDEO`

        :return: The creative_type of this CreativeConfig.
        :rtype: str
        """
        return self._creative_type

    @creative_type.setter
    def creative_type(self, creative_type):
        """Sets the creative_type of this CreativeConfig.

        The type of creative that can be assigned to the inventory source. Only the following types are supported: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_VIDEO`

        :param creative_type: The creative_type of this CreativeConfig.
        :type creative_type: str
        """
        allowed_values = ["CREATIVE_TYPE_UNSPECIFIED", "CREATIVE_TYPE_STANDARD", "CREATIVE_TYPE_EXPANDABLE", "CREATIVE_TYPE_VIDEO", "CREATIVE_TYPE_NATIVE", "CREATIVE_TYPE_TEMPLATED_APP_INSTALL", "CREATIVE_TYPE_NATIVE_SITE_SQUARE", "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_INTERSTITIAL", "CREATIVE_TYPE_LIGHTBOX", "CREATIVE_TYPE_NATIVE_APP_INSTALL", "CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE", "CREATIVE_TYPE_AUDIO", "CREATIVE_TYPE_PUBLISHER_HOSTED", "CREATIVE_TYPE_NATIVE_VIDEO", "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_VIDEO"]  # noqa: E501
        if creative_type not in allowed_values:
            raise ValueError(
                "Invalid value for `creative_type` ({0}), must be one of {1}"
                .format(creative_type, allowed_values)
            )

        self._creative_type = creative_type

    @property
    def display_creative_config(self):
        """Gets the display_creative_config of this CreativeConfig.


        :return: The display_creative_config of this CreativeConfig.
        :rtype: InventorySourceDisplayCreativeConfig
        """
        return self._display_creative_config

    @display_creative_config.setter
    def display_creative_config(self, display_creative_config):
        """Sets the display_creative_config of this CreativeConfig.


        :param display_creative_config: The display_creative_config of this CreativeConfig.
        :type display_creative_config: InventorySourceDisplayCreativeConfig
        """

        self._display_creative_config = display_creative_config

    @property
    def video_creative_config(self):
        """Gets the video_creative_config of this CreativeConfig.


        :return: The video_creative_config of this CreativeConfig.
        :rtype: InventorySourceVideoCreativeConfig
        """
        return self._video_creative_config

    @video_creative_config.setter
    def video_creative_config(self, video_creative_config):
        """Sets the video_creative_config of this CreativeConfig.


        :param video_creative_config: The video_creative_config of this CreativeConfig.
        :type video_creative_config: InventorySourceVideoCreativeConfig
        """

        self._video_creative_config = video_creative_config
