# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegionalLocationListAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, negative: bool=None, regional_location_list_id: str=None):
        """RegionalLocationListAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param negative: The negative of this RegionalLocationListAssignedTargetingOptionDetails.
        :param regional_location_list_id: The regional_location_list_id of this RegionalLocationListAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'negative': bool,
            'regional_location_list_id': str
        }

        self.attribute_map = {
            'negative': 'negative',
            'regional_location_list_id': 'regionalLocationListId'
        }

        self._negative = negative
        self._regional_location_list_id = regional_location_list_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionalLocationListAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegionalLocationListAssignedTargetingOptionDetails of this RegionalLocationListAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def negative(self):
        """Gets the negative of this RegionalLocationListAssignedTargetingOptionDetails.

        Indicates if this option is being negatively targeted.

        :return: The negative of this RegionalLocationListAssignedTargetingOptionDetails.
        :rtype: bool
        """
        return self._negative

    @negative.setter
    def negative(self, negative):
        """Sets the negative of this RegionalLocationListAssignedTargetingOptionDetails.

        Indicates if this option is being negatively targeted.

        :param negative: The negative of this RegionalLocationListAssignedTargetingOptionDetails.
        :type negative: bool
        """

        self._negative = negative

    @property
    def regional_location_list_id(self):
        """Gets the regional_location_list_id of this RegionalLocationListAssignedTargetingOptionDetails.

        Required. ID of the regional location list. Should refer to the location_list_id field of a LocationList resource whose type is `TARGETING_LOCATION_TYPE_REGIONAL`.

        :return: The regional_location_list_id of this RegionalLocationListAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._regional_location_list_id

    @regional_location_list_id.setter
    def regional_location_list_id(self, regional_location_list_id):
        """Sets the regional_location_list_id of this RegionalLocationListAssignedTargetingOptionDetails.

        Required. ID of the regional location list. Should refer to the location_list_id field of a LocationList resource whose type is `TARGETING_LOCATION_TYPE_REGIONAL`.

        :param regional_location_list_id: The regional_location_list_id of this RegionalLocationListAssignedTargetingOptionDetails.
        :type regional_location_list_id: str
        """

        self._regional_location_list_id = regional_location_list_id
