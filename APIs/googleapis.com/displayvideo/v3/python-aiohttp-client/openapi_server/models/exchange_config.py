# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exchange_config_enabled_exchange import ExchangeConfigEnabledExchange
from openapi_server import util


class ExchangeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled_exchanges: List[ExchangeConfigEnabledExchange]=None):
        """ExchangeConfig - a model defined in OpenAPI

        :param enabled_exchanges: The enabled_exchanges of this ExchangeConfig.
        """
        self.openapi_types = {
            'enabled_exchanges': List[ExchangeConfigEnabledExchange]
        }

        self.attribute_map = {
            'enabled_exchanges': 'enabledExchanges'
        }

        self._enabled_exchanges = enabled_exchanges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExchangeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExchangeConfig of this ExchangeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled_exchanges(self):
        """Gets the enabled_exchanges of this ExchangeConfig.

        All enabled exchanges in the partner. Duplicate enabled exchanges will be ignored.

        :return: The enabled_exchanges of this ExchangeConfig.
        :rtype: List[ExchangeConfigEnabledExchange]
        """
        return self._enabled_exchanges

    @enabled_exchanges.setter
    def enabled_exchanges(self, enabled_exchanges):
        """Sets the enabled_exchanges of this ExchangeConfig.

        All enabled exchanges in the partner. Duplicate enabled exchanges will be ignored.

        :param enabled_exchanges: The enabled_exchanges of this ExchangeConfig.
        :type enabled_exchanges: List[ExchangeConfigEnabledExchange]
        """

        self._enabled_exchanges = enabled_exchanges
