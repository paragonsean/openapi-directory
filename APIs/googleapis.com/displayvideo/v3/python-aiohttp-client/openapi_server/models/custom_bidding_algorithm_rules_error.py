# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomBiddingAlgorithmRulesError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: str=None):
        """CustomBiddingAlgorithmRulesError - a model defined in OpenAPI

        :param error_code: The error_code of this CustomBiddingAlgorithmRulesError.
        """
        self.openapi_types = {
            'error_code': str
        }

        self.attribute_map = {
            'error_code': 'errorCode'
        }

        self._error_code = error_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomBiddingAlgorithmRulesError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomBiddingAlgorithmRulesError of this CustomBiddingAlgorithmRulesError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this CustomBiddingAlgorithmRulesError.

        The type of error.

        :return: The error_code of this CustomBiddingAlgorithmRulesError.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this CustomBiddingAlgorithmRulesError.

        The type of error.

        :param error_code: The error_code of this CustomBiddingAlgorithmRulesError.
        :type error_code: str
        """
        allowed_values = ["ERROR_CODE_UNSPECIFIED", "SYNTAX_ERROR", "CONSTRAINT_VIOLATION_ERROR", "INTERNAL_ERROR"]  # noqa: E501
        if error_code not in allowed_values:
            raise ValueError(
                "Invalid value for `error_code` ({0}), must be one of {1}"
                .format(error_code, allowed_values)
            )

        self._error_code = error_code
