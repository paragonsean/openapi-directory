# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exchange_config import ExchangeConfig
from openapi_server.models.partner_ad_server_config import PartnerAdServerConfig
from openapi_server.models.partner_billing_config import PartnerBillingConfig
from openapi_server.models.partner_data_access_config import PartnerDataAccessConfig
from openapi_server.models.partner_general_config import PartnerGeneralConfig
from openapi_server import util


class Partner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_server_config: PartnerAdServerConfig=None, billing_config: PartnerBillingConfig=None, data_access_config: PartnerDataAccessConfig=None, display_name: str=None, entity_status: str=None, exchange_config: ExchangeConfig=None, general_config: PartnerGeneralConfig=None, name: str=None, partner_id: str=None, update_time: str=None):
        """Partner - a model defined in OpenAPI

        :param ad_server_config: The ad_server_config of this Partner.
        :param billing_config: The billing_config of this Partner.
        :param data_access_config: The data_access_config of this Partner.
        :param display_name: The display_name of this Partner.
        :param entity_status: The entity_status of this Partner.
        :param exchange_config: The exchange_config of this Partner.
        :param general_config: The general_config of this Partner.
        :param name: The name of this Partner.
        :param partner_id: The partner_id of this Partner.
        :param update_time: The update_time of this Partner.
        """
        self.openapi_types = {
            'ad_server_config': PartnerAdServerConfig,
            'billing_config': PartnerBillingConfig,
            'data_access_config': PartnerDataAccessConfig,
            'display_name': str,
            'entity_status': str,
            'exchange_config': ExchangeConfig,
            'general_config': PartnerGeneralConfig,
            'name': str,
            'partner_id': str,
            'update_time': str
        }

        self.attribute_map = {
            'ad_server_config': 'adServerConfig',
            'billing_config': 'billingConfig',
            'data_access_config': 'dataAccessConfig',
            'display_name': 'displayName',
            'entity_status': 'entityStatus',
            'exchange_config': 'exchangeConfig',
            'general_config': 'generalConfig',
            'name': 'name',
            'partner_id': 'partnerId',
            'update_time': 'updateTime'
        }

        self._ad_server_config = ad_server_config
        self._billing_config = billing_config
        self._data_access_config = data_access_config
        self._display_name = display_name
        self._entity_status = entity_status
        self._exchange_config = exchange_config
        self._general_config = general_config
        self._name = name
        self._partner_id = partner_id
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Partner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Partner of this Partner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_server_config(self):
        """Gets the ad_server_config of this Partner.


        :return: The ad_server_config of this Partner.
        :rtype: PartnerAdServerConfig
        """
        return self._ad_server_config

    @ad_server_config.setter
    def ad_server_config(self, ad_server_config):
        """Sets the ad_server_config of this Partner.


        :param ad_server_config: The ad_server_config of this Partner.
        :type ad_server_config: PartnerAdServerConfig
        """

        self._ad_server_config = ad_server_config

    @property
    def billing_config(self):
        """Gets the billing_config of this Partner.


        :return: The billing_config of this Partner.
        :rtype: PartnerBillingConfig
        """
        return self._billing_config

    @billing_config.setter
    def billing_config(self, billing_config):
        """Sets the billing_config of this Partner.


        :param billing_config: The billing_config of this Partner.
        :type billing_config: PartnerBillingConfig
        """

        self._billing_config = billing_config

    @property
    def data_access_config(self):
        """Gets the data_access_config of this Partner.


        :return: The data_access_config of this Partner.
        :rtype: PartnerDataAccessConfig
        """
        return self._data_access_config

    @data_access_config.setter
    def data_access_config(self, data_access_config):
        """Sets the data_access_config of this Partner.


        :param data_access_config: The data_access_config of this Partner.
        :type data_access_config: PartnerDataAccessConfig
        """

        self._data_access_config = data_access_config

    @property
    def display_name(self):
        """Gets the display_name of this Partner.

        The display name of the partner. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :return: The display_name of this Partner.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Partner.

        The display name of the partner. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :param display_name: The display_name of this Partner.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def entity_status(self):
        """Gets the entity_status of this Partner.

        Output only. The status of the partner.

        :return: The entity_status of this Partner.
        :rtype: str
        """
        return self._entity_status

    @entity_status.setter
    def entity_status(self, entity_status):
        """Sets the entity_status of this Partner.

        Output only. The status of the partner.

        :param entity_status: The entity_status of this Partner.
        :type entity_status: str
        """
        allowed_values = ["ENTITY_STATUS_UNSPECIFIED", "ENTITY_STATUS_ACTIVE", "ENTITY_STATUS_ARCHIVED", "ENTITY_STATUS_DRAFT", "ENTITY_STATUS_PAUSED", "ENTITY_STATUS_SCHEDULED_FOR_DELETION"]  # noqa: E501
        if entity_status not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_status` ({0}), must be one of {1}"
                .format(entity_status, allowed_values)
            )

        self._entity_status = entity_status

    @property
    def exchange_config(self):
        """Gets the exchange_config of this Partner.


        :return: The exchange_config of this Partner.
        :rtype: ExchangeConfig
        """
        return self._exchange_config

    @exchange_config.setter
    def exchange_config(self, exchange_config):
        """Sets the exchange_config of this Partner.


        :param exchange_config: The exchange_config of this Partner.
        :type exchange_config: ExchangeConfig
        """

        self._exchange_config = exchange_config

    @property
    def general_config(self):
        """Gets the general_config of this Partner.


        :return: The general_config of this Partner.
        :rtype: PartnerGeneralConfig
        """
        return self._general_config

    @general_config.setter
    def general_config(self, general_config):
        """Sets the general_config of this Partner.


        :param general_config: The general_config of this Partner.
        :type general_config: PartnerGeneralConfig
        """

        self._general_config = general_config

    @property
    def name(self):
        """Gets the name of this Partner.

        Output only. The resource name of the partner.

        :return: The name of this Partner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Partner.

        Output only. The resource name of the partner.

        :param name: The name of this Partner.
        :type name: str
        """

        self._name = name

    @property
    def partner_id(self):
        """Gets the partner_id of this Partner.

        Output only. The unique ID of the partner. Assigned by the system.

        :return: The partner_id of this Partner.
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this Partner.

        Output only. The unique ID of the partner. Assigned by the system.

        :param partner_id: The partner_id of this Partner.
        :type partner_id: str
        """

        self._partner_id = partner_id

    @property
    def update_time(self):
        """Gets the update_time of this Partner.

        Output only. The timestamp when the partner was last updated. Assigned by the system.

        :return: The update_time of this Partner.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Partner.

        Output only. The timestamp when the partner was last updated. Assigned by the system.

        :param update_time: The update_time of this Partner.
        :type update_time: str
        """

        self._update_time = update_time
