# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemarketingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertiser_id: str=None, remarketing_enabled: bool=None):
        """RemarketingConfig - a model defined in OpenAPI

        :param advertiser_id: The advertiser_id of this RemarketingConfig.
        :param remarketing_enabled: The remarketing_enabled of this RemarketingConfig.
        """
        self.openapi_types = {
            'advertiser_id': str,
            'remarketing_enabled': bool
        }

        self.attribute_map = {
            'advertiser_id': 'advertiserId',
            'remarketing_enabled': 'remarketingEnabled'
        }

        self._advertiser_id = advertiser_id
        self._remarketing_enabled = remarketing_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemarketingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemarketingConfig of this RemarketingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this RemarketingConfig.

        Output only. The ID of the advertiser.

        :return: The advertiser_id of this RemarketingConfig.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this RemarketingConfig.

        Output only. The ID of the advertiser.

        :param advertiser_id: The advertiser_id of this RemarketingConfig.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def remarketing_enabled(self):
        """Gets the remarketing_enabled of this RemarketingConfig.

        Output only. Whether the Floodlight activity remarketing user list is available to the identified advertiser.

        :return: The remarketing_enabled of this RemarketingConfig.
        :rtype: bool
        """
        return self._remarketing_enabled

    @remarketing_enabled.setter
    def remarketing_enabled(self, remarketing_enabled):
        """Sets the remarketing_enabled of this RemarketingConfig.

        Output only. Whether the Floodlight activity remarketing user list is available to the identified advertiser.

        :param remarketing_enabled: The remarketing_enabled of this RemarketingConfig.
        :type remarketing_enabled: bool
        """

        self._remarketing_enabled = remarketing_enabled
