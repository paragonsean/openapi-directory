# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_bidding_script_ref import CustomBiddingScriptRef
from openapi_server.models.script_error import ScriptError
from openapi_server import util


class CustomBiddingScript(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, create_time: str=None, custom_bidding_algorithm_id: str=None, custom_bidding_script_id: str=None, errors: List[ScriptError]=None, name: str=None, script: CustomBiddingScriptRef=None, state: str=None):
        """CustomBiddingScript - a model defined in OpenAPI

        :param active: The active of this CustomBiddingScript.
        :param create_time: The create_time of this CustomBiddingScript.
        :param custom_bidding_algorithm_id: The custom_bidding_algorithm_id of this CustomBiddingScript.
        :param custom_bidding_script_id: The custom_bidding_script_id of this CustomBiddingScript.
        :param errors: The errors of this CustomBiddingScript.
        :param name: The name of this CustomBiddingScript.
        :param script: The script of this CustomBiddingScript.
        :param state: The state of this CustomBiddingScript.
        """
        self.openapi_types = {
            'active': bool,
            'create_time': str,
            'custom_bidding_algorithm_id': str,
            'custom_bidding_script_id': str,
            'errors': List[ScriptError],
            'name': str,
            'script': CustomBiddingScriptRef,
            'state': str
        }

        self.attribute_map = {
            'active': 'active',
            'create_time': 'createTime',
            'custom_bidding_algorithm_id': 'customBiddingAlgorithmId',
            'custom_bidding_script_id': 'customBiddingScriptId',
            'errors': 'errors',
            'name': 'name',
            'script': 'script',
            'state': 'state'
        }

        self._active = active
        self._create_time = create_time
        self._custom_bidding_algorithm_id = custom_bidding_algorithm_id
        self._custom_bidding_script_id = custom_bidding_script_id
        self._errors = errors
        self._name = name
        self._script = script
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomBiddingScript':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomBiddingScript of this CustomBiddingScript.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this CustomBiddingScript.

        Output only. Whether the script is currently being used for scoring by the parent algorithm.

        :return: The active of this CustomBiddingScript.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CustomBiddingScript.

        Output only. Whether the script is currently being used for scoring by the parent algorithm.

        :param active: The active of this CustomBiddingScript.
        :type active: bool
        """

        self._active = active

    @property
    def create_time(self):
        """Gets the create_time of this CustomBiddingScript.

        Output only. The time when the script was created.

        :return: The create_time of this CustomBiddingScript.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CustomBiddingScript.

        Output only. The time when the script was created.

        :param create_time: The create_time of this CustomBiddingScript.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def custom_bidding_algorithm_id(self):
        """Gets the custom_bidding_algorithm_id of this CustomBiddingScript.

        Output only. The unique ID of the custom bidding algorithm the script belongs to.

        :return: The custom_bidding_algorithm_id of this CustomBiddingScript.
        :rtype: str
        """
        return self._custom_bidding_algorithm_id

    @custom_bidding_algorithm_id.setter
    def custom_bidding_algorithm_id(self, custom_bidding_algorithm_id):
        """Sets the custom_bidding_algorithm_id of this CustomBiddingScript.

        Output only. The unique ID of the custom bidding algorithm the script belongs to.

        :param custom_bidding_algorithm_id: The custom_bidding_algorithm_id of this CustomBiddingScript.
        :type custom_bidding_algorithm_id: str
        """

        self._custom_bidding_algorithm_id = custom_bidding_algorithm_id

    @property
    def custom_bidding_script_id(self):
        """Gets the custom_bidding_script_id of this CustomBiddingScript.

        Output only. The unique ID of the custom bidding script.

        :return: The custom_bidding_script_id of this CustomBiddingScript.
        :rtype: str
        """
        return self._custom_bidding_script_id

    @custom_bidding_script_id.setter
    def custom_bidding_script_id(self, custom_bidding_script_id):
        """Sets the custom_bidding_script_id of this CustomBiddingScript.

        Output only. The unique ID of the custom bidding script.

        :param custom_bidding_script_id: The custom_bidding_script_id of this CustomBiddingScript.
        :type custom_bidding_script_id: str
        """

        self._custom_bidding_script_id = custom_bidding_script_id

    @property
    def errors(self):
        """Gets the errors of this CustomBiddingScript.

        Output only. Error details of a rejected custom bidding script. This field will only be populated when state is REJECTED.

        :return: The errors of this CustomBiddingScript.
        :rtype: List[ScriptError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this CustomBiddingScript.

        Output only. Error details of a rejected custom bidding script. This field will only be populated when state is REJECTED.

        :param errors: The errors of this CustomBiddingScript.
        :type errors: List[ScriptError]
        """

        self._errors = errors

    @property
    def name(self):
        """Gets the name of this CustomBiddingScript.

        Output only. The resource name of the custom bidding script.

        :return: The name of this CustomBiddingScript.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomBiddingScript.

        Output only. The resource name of the custom bidding script.

        :param name: The name of this CustomBiddingScript.
        :type name: str
        """

        self._name = name

    @property
    def script(self):
        """Gets the script of this CustomBiddingScript.


        :return: The script of this CustomBiddingScript.
        :rtype: CustomBiddingScriptRef
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this CustomBiddingScript.


        :param script: The script of this CustomBiddingScript.
        :type script: CustomBiddingScriptRef
        """

        self._script = script

    @property
    def state(self):
        """Gets the state of this CustomBiddingScript.

        Output only. The state of the custom bidding script.

        :return: The state of this CustomBiddingScript.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CustomBiddingScript.

        Output only. The state of the custom bidding script.

        :param state: The state of this CustomBiddingScript.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACCEPTED", "REJECTED", "PENDING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
