# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.remarketing_config import RemarketingConfig
from openapi_server import util


class FloodlightActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertiser_ids: List[str]=None, display_name: str=None, floodlight_activity_id: str=None, floodlight_group_id: str=None, name: str=None, remarketing_configs: List[RemarketingConfig]=None, serving_status: str=None, ssl_required: bool=None):
        """FloodlightActivity - a model defined in OpenAPI

        :param advertiser_ids: The advertiser_ids of this FloodlightActivity.
        :param display_name: The display_name of this FloodlightActivity.
        :param floodlight_activity_id: The floodlight_activity_id of this FloodlightActivity.
        :param floodlight_group_id: The floodlight_group_id of this FloodlightActivity.
        :param name: The name of this FloodlightActivity.
        :param remarketing_configs: The remarketing_configs of this FloodlightActivity.
        :param serving_status: The serving_status of this FloodlightActivity.
        :param ssl_required: The ssl_required of this FloodlightActivity.
        """
        self.openapi_types = {
            'advertiser_ids': List[str],
            'display_name': str,
            'floodlight_activity_id': str,
            'floodlight_group_id': str,
            'name': str,
            'remarketing_configs': List[RemarketingConfig],
            'serving_status': str,
            'ssl_required': bool
        }

        self.attribute_map = {
            'advertiser_ids': 'advertiserIds',
            'display_name': 'displayName',
            'floodlight_activity_id': 'floodlightActivityId',
            'floodlight_group_id': 'floodlightGroupId',
            'name': 'name',
            'remarketing_configs': 'remarketingConfigs',
            'serving_status': 'servingStatus',
            'ssl_required': 'sslRequired'
        }

        self._advertiser_ids = advertiser_ids
        self._display_name = display_name
        self._floodlight_activity_id = floodlight_activity_id
        self._floodlight_group_id = floodlight_group_id
        self._name = name
        self._remarketing_configs = remarketing_configs
        self._serving_status = serving_status
        self._ssl_required = ssl_required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FloodlightActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FloodlightActivity of this FloodlightActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_ids(self):
        """Gets the advertiser_ids of this FloodlightActivity.

        Output only. IDs of the advertisers that have access to the parent Floodlight group. Only advertisers under the provided partner ID will be listed in this field.

        :return: The advertiser_ids of this FloodlightActivity.
        :rtype: List[str]
        """
        return self._advertiser_ids

    @advertiser_ids.setter
    def advertiser_ids(self, advertiser_ids):
        """Sets the advertiser_ids of this FloodlightActivity.

        Output only. IDs of the advertisers that have access to the parent Floodlight group. Only advertisers under the provided partner ID will be listed in this field.

        :param advertiser_ids: The advertiser_ids of this FloodlightActivity.
        :type advertiser_ids: List[str]
        """

        self._advertiser_ids = advertiser_ids

    @property
    def display_name(self):
        """Gets the display_name of this FloodlightActivity.

        Required. The display name of the Floodlight activity.

        :return: The display_name of this FloodlightActivity.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FloodlightActivity.

        Required. The display name of the Floodlight activity.

        :param display_name: The display_name of this FloodlightActivity.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def floodlight_activity_id(self):
        """Gets the floodlight_activity_id of this FloodlightActivity.

        Output only. The unique ID of the Floodlight activity. Assigned by the system.

        :return: The floodlight_activity_id of this FloodlightActivity.
        :rtype: str
        """
        return self._floodlight_activity_id

    @floodlight_activity_id.setter
    def floodlight_activity_id(self, floodlight_activity_id):
        """Sets the floodlight_activity_id of this FloodlightActivity.

        Output only. The unique ID of the Floodlight activity. Assigned by the system.

        :param floodlight_activity_id: The floodlight_activity_id of this FloodlightActivity.
        :type floodlight_activity_id: str
        """

        self._floodlight_activity_id = floodlight_activity_id

    @property
    def floodlight_group_id(self):
        """Gets the floodlight_group_id of this FloodlightActivity.

        Required. Immutable. The ID of the parent Floodlight group.

        :return: The floodlight_group_id of this FloodlightActivity.
        :rtype: str
        """
        return self._floodlight_group_id

    @floodlight_group_id.setter
    def floodlight_group_id(self, floodlight_group_id):
        """Sets the floodlight_group_id of this FloodlightActivity.

        Required. Immutable. The ID of the parent Floodlight group.

        :param floodlight_group_id: The floodlight_group_id of this FloodlightActivity.
        :type floodlight_group_id: str
        """

        self._floodlight_group_id = floodlight_group_id

    @property
    def name(self):
        """Gets the name of this FloodlightActivity.

        Output only. The resource name of the Floodlight activity.

        :return: The name of this FloodlightActivity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FloodlightActivity.

        Output only. The resource name of the Floodlight activity.

        :param name: The name of this FloodlightActivity.
        :type name: str
        """

        self._name = name

    @property
    def remarketing_configs(self):
        """Gets the remarketing_configs of this FloodlightActivity.

        Output only. A list of configuration objects designating whether remarketing for this Floodlight Activity is enabled and available for a specifc advertiser. If enabled, this Floodlight Activity generates a remarketing user list that is able to be used in targeting under the advertiser.

        :return: The remarketing_configs of this FloodlightActivity.
        :rtype: List[RemarketingConfig]
        """
        return self._remarketing_configs

    @remarketing_configs.setter
    def remarketing_configs(self, remarketing_configs):
        """Sets the remarketing_configs of this FloodlightActivity.

        Output only. A list of configuration objects designating whether remarketing for this Floodlight Activity is enabled and available for a specifc advertiser. If enabled, this Floodlight Activity generates a remarketing user list that is able to be used in targeting under the advertiser.

        :param remarketing_configs: The remarketing_configs of this FloodlightActivity.
        :type remarketing_configs: List[RemarketingConfig]
        """

        self._remarketing_configs = remarketing_configs

    @property
    def serving_status(self):
        """Gets the serving_status of this FloodlightActivity.

        Optional. Whether the Floodlight activity is served.

        :return: The serving_status of this FloodlightActivity.
        :rtype: str
        """
        return self._serving_status

    @serving_status.setter
    def serving_status(self, serving_status):
        """Sets the serving_status of this FloodlightActivity.

        Optional. Whether the Floodlight activity is served.

        :param serving_status: The serving_status of this FloodlightActivity.
        :type serving_status: str
        """
        allowed_values = ["FLOODLIGHT_ACTIVITY_SERVING_STATUS_UNSPECIFIED", "FLOODLIGHT_ACTIVITY_SERVING_STATUS_ENABLED", "FLOODLIGHT_ACTIVITY_SERVING_STATUS_DISABLED"]  # noqa: E501
        if serving_status not in allowed_values:
            raise ValueError(
                "Invalid value for `serving_status` ({0}), must be one of {1}"
                .format(serving_status, allowed_values)
            )

        self._serving_status = serving_status

    @property
    def ssl_required(self):
        """Gets the ssl_required of this FloodlightActivity.

        Output only. Whether tags are required to be compliant.

        :return: The ssl_required of this FloodlightActivity.
        :rtype: bool
        """
        return self._ssl_required

    @ssl_required.setter
    def ssl_required(self, ssl_required):
        """Sets the ssl_required of this FloodlightActivity.

        Output only. Whether tags are required to be compliant.

        :param ssl_required: The ssl_required of this FloodlightActivity.
        :type ssl_required: bool
        """

        self._ssl_required = ssl_required
