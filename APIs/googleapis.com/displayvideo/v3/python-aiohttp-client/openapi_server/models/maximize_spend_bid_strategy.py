# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MaximizeSpendBidStrategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_bidding_algorithm_id: str=None, max_average_cpm_bid_amount_micros: str=None, performance_goal_type: str=None, raise_bid_for_deals: bool=None):
        """MaximizeSpendBidStrategy - a model defined in OpenAPI

        :param custom_bidding_algorithm_id: The custom_bidding_algorithm_id of this MaximizeSpendBidStrategy.
        :param max_average_cpm_bid_amount_micros: The max_average_cpm_bid_amount_micros of this MaximizeSpendBidStrategy.
        :param performance_goal_type: The performance_goal_type of this MaximizeSpendBidStrategy.
        :param raise_bid_for_deals: The raise_bid_for_deals of this MaximizeSpendBidStrategy.
        """
        self.openapi_types = {
            'custom_bidding_algorithm_id': str,
            'max_average_cpm_bid_amount_micros': str,
            'performance_goal_type': str,
            'raise_bid_for_deals': bool
        }

        self.attribute_map = {
            'custom_bidding_algorithm_id': 'customBiddingAlgorithmId',
            'max_average_cpm_bid_amount_micros': 'maxAverageCpmBidAmountMicros',
            'performance_goal_type': 'performanceGoalType',
            'raise_bid_for_deals': 'raiseBidForDeals'
        }

        self._custom_bidding_algorithm_id = custom_bidding_algorithm_id
        self._max_average_cpm_bid_amount_micros = max_average_cpm_bid_amount_micros
        self._performance_goal_type = performance_goal_type
        self._raise_bid_for_deals = raise_bid_for_deals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaximizeSpendBidStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaximizeSpendBidStrategy of this MaximizeSpendBidStrategy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_bidding_algorithm_id(self):
        """Gets the custom_bidding_algorithm_id of this MaximizeSpendBidStrategy.

        The ID of the Custom Bidding Algorithm used by this strategy. Only applicable when performance_goal_type is set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`.

        :return: The custom_bidding_algorithm_id of this MaximizeSpendBidStrategy.
        :rtype: str
        """
        return self._custom_bidding_algorithm_id

    @custom_bidding_algorithm_id.setter
    def custom_bidding_algorithm_id(self, custom_bidding_algorithm_id):
        """Sets the custom_bidding_algorithm_id of this MaximizeSpendBidStrategy.

        The ID of the Custom Bidding Algorithm used by this strategy. Only applicable when performance_goal_type is set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`.

        :param custom_bidding_algorithm_id: The custom_bidding_algorithm_id of this MaximizeSpendBidStrategy.
        :type custom_bidding_algorithm_id: str
        """

        self._custom_bidding_algorithm_id = custom_bidding_algorithm_id

    @property
    def max_average_cpm_bid_amount_micros(self):
        """Gets the max_average_cpm_bid_amount_micros of this MaximizeSpendBidStrategy.

        The maximum average CPM that may be bid, in micros of the advertiser's currency. Must be greater than or equal to a billable unit of the given currency. For example, 1500000 represents 1.5 standard units of the currency.

        :return: The max_average_cpm_bid_amount_micros of this MaximizeSpendBidStrategy.
        :rtype: str
        """
        return self._max_average_cpm_bid_amount_micros

    @max_average_cpm_bid_amount_micros.setter
    def max_average_cpm_bid_amount_micros(self, max_average_cpm_bid_amount_micros):
        """Sets the max_average_cpm_bid_amount_micros of this MaximizeSpendBidStrategy.

        The maximum average CPM that may be bid, in micros of the advertiser's currency. Must be greater than or equal to a billable unit of the given currency. For example, 1500000 represents 1.5 standard units of the currency.

        :param max_average_cpm_bid_amount_micros: The max_average_cpm_bid_amount_micros of this MaximizeSpendBidStrategy.
        :type max_average_cpm_bid_amount_micros: str
        """

        self._max_average_cpm_bid_amount_micros = max_average_cpm_bid_amount_micros

    @property
    def performance_goal_type(self):
        """Gets the performance_goal_type of this MaximizeSpendBidStrategy.

        Required. The type of the performance goal that the bidding strategy tries to minimize while spending the full budget. `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM` is not supported for this strategy.

        :return: The performance_goal_type of this MaximizeSpendBidStrategy.
        :rtype: str
        """
        return self._performance_goal_type

    @performance_goal_type.setter
    def performance_goal_type(self, performance_goal_type):
        """Sets the performance_goal_type of this MaximizeSpendBidStrategy.

        Required. The type of the performance goal that the bidding strategy tries to minimize while spending the full budget. `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM` is not supported for this strategy.

        :param performance_goal_type: The performance_goal_type of this MaximizeSpendBidStrategy.
        :type performance_goal_type: str
        """
        allowed_values = ["BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED", "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA", "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC", "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM", "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO", "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CIVA", "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_IVO_TEN", "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_AV_VIEWED"]  # noqa: E501
        if performance_goal_type not in allowed_values:
            raise ValueError(
                "Invalid value for `performance_goal_type` ({0}), must be one of {1}"
                .format(performance_goal_type, allowed_values)
            )

        self._performance_goal_type = performance_goal_type

    @property
    def raise_bid_for_deals(self):
        """Gets the raise_bid_for_deals of this MaximizeSpendBidStrategy.

        Whether the strategy takes deal floor prices into account.

        :return: The raise_bid_for_deals of this MaximizeSpendBidStrategy.
        :rtype: bool
        """
        return self._raise_bid_for_deals

    @raise_bid_for_deals.setter
    def raise_bid_for_deals(self, raise_bid_for_deals):
        """Sets the raise_bid_for_deals of this MaximizeSpendBidStrategy.

        Whether the strategy takes deal floor prices into account.

        :param raise_bid_for_deals: The raise_bid_for_deals of this MaximizeSpendBidStrategy.
        :type raise_bid_for_deals: bool
        """

        self._raise_bid_for_deals = raise_bid_for_deals
