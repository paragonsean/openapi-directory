# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.third_party_vendor_config import ThirdPartyVendorConfig
from openapi_server import util


class ThirdPartyMeasurementConfigs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand_lift_vendor_configs: List[ThirdPartyVendorConfig]=None, brand_safety_vendor_configs: List[ThirdPartyVendorConfig]=None, reach_vendor_configs: List[ThirdPartyVendorConfig]=None, viewability_vendor_configs: List[ThirdPartyVendorConfig]=None):
        """ThirdPartyMeasurementConfigs - a model defined in OpenAPI

        :param brand_lift_vendor_configs: The brand_lift_vendor_configs of this ThirdPartyMeasurementConfigs.
        :param brand_safety_vendor_configs: The brand_safety_vendor_configs of this ThirdPartyMeasurementConfigs.
        :param reach_vendor_configs: The reach_vendor_configs of this ThirdPartyMeasurementConfigs.
        :param viewability_vendor_configs: The viewability_vendor_configs of this ThirdPartyMeasurementConfigs.
        """
        self.openapi_types = {
            'brand_lift_vendor_configs': List[ThirdPartyVendorConfig],
            'brand_safety_vendor_configs': List[ThirdPartyVendorConfig],
            'reach_vendor_configs': List[ThirdPartyVendorConfig],
            'viewability_vendor_configs': List[ThirdPartyVendorConfig]
        }

        self.attribute_map = {
            'brand_lift_vendor_configs': 'brandLiftVendorConfigs',
            'brand_safety_vendor_configs': 'brandSafetyVendorConfigs',
            'reach_vendor_configs': 'reachVendorConfigs',
            'viewability_vendor_configs': 'viewabilityVendorConfigs'
        }

        self._brand_lift_vendor_configs = brand_lift_vendor_configs
        self._brand_safety_vendor_configs = brand_safety_vendor_configs
        self._reach_vendor_configs = reach_vendor_configs
        self._viewability_vendor_configs = viewability_vendor_configs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThirdPartyMeasurementConfigs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThirdPartyMeasurementConfigs of this ThirdPartyMeasurementConfigs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand_lift_vendor_configs(self):
        """Gets the brand_lift_vendor_configs of this ThirdPartyMeasurementConfigs.

        Optional. The third-party vendors measuring brand lift. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_DYNATA` * `THIRD_PARTY_VENDOR_KANTAR`

        :return: The brand_lift_vendor_configs of this ThirdPartyMeasurementConfigs.
        :rtype: List[ThirdPartyVendorConfig]
        """
        return self._brand_lift_vendor_configs

    @brand_lift_vendor_configs.setter
    def brand_lift_vendor_configs(self, brand_lift_vendor_configs):
        """Sets the brand_lift_vendor_configs of this ThirdPartyMeasurementConfigs.

        Optional. The third-party vendors measuring brand lift. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_DYNATA` * `THIRD_PARTY_VENDOR_KANTAR`

        :param brand_lift_vendor_configs: The brand_lift_vendor_configs of this ThirdPartyMeasurementConfigs.
        :type brand_lift_vendor_configs: List[ThirdPartyVendorConfig]
        """

        self._brand_lift_vendor_configs = brand_lift_vendor_configs

    @property
    def brand_safety_vendor_configs(self):
        """Gets the brand_safety_vendor_configs of this ThirdPartyMeasurementConfigs.

        Optional. The third-party vendors measuring brand safety. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_ZERF` * `THIRD_PARTY_VENDOR_DOUBLE_VERIFY` * `THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE`

        :return: The brand_safety_vendor_configs of this ThirdPartyMeasurementConfigs.
        :rtype: List[ThirdPartyVendorConfig]
        """
        return self._brand_safety_vendor_configs

    @brand_safety_vendor_configs.setter
    def brand_safety_vendor_configs(self, brand_safety_vendor_configs):
        """Sets the brand_safety_vendor_configs of this ThirdPartyMeasurementConfigs.

        Optional. The third-party vendors measuring brand safety. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_ZERF` * `THIRD_PARTY_VENDOR_DOUBLE_VERIFY` * `THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE`

        :param brand_safety_vendor_configs: The brand_safety_vendor_configs of this ThirdPartyMeasurementConfigs.
        :type brand_safety_vendor_configs: List[ThirdPartyVendorConfig]
        """

        self._brand_safety_vendor_configs = brand_safety_vendor_configs

    @property
    def reach_vendor_configs(self):
        """Gets the reach_vendor_configs of this ThirdPartyMeasurementConfigs.

        Optional. The third-party vendors measuring reach. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_NIELSEN` * `THIRD_PARTY_VENDOR_COMSCORE` * `THIRD_PARTY_VENDOR_KANTAR`

        :return: The reach_vendor_configs of this ThirdPartyMeasurementConfigs.
        :rtype: List[ThirdPartyVendorConfig]
        """
        return self._reach_vendor_configs

    @reach_vendor_configs.setter
    def reach_vendor_configs(self, reach_vendor_configs):
        """Sets the reach_vendor_configs of this ThirdPartyMeasurementConfigs.

        Optional. The third-party vendors measuring reach. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_NIELSEN` * `THIRD_PARTY_VENDOR_COMSCORE` * `THIRD_PARTY_VENDOR_KANTAR`

        :param reach_vendor_configs: The reach_vendor_configs of this ThirdPartyMeasurementConfigs.
        :type reach_vendor_configs: List[ThirdPartyVendorConfig]
        """

        self._reach_vendor_configs = reach_vendor_configs

    @property
    def viewability_vendor_configs(self):
        """Gets the viewability_vendor_configs of this ThirdPartyMeasurementConfigs.

        Optional. The third-party vendors measuring viewability. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_MOAT` * `THIRD_PARTY_VENDOR_DOUBLE_VERIFY` * `THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE` * `THIRD_PARTY_VENDOR_COMSCORE` * `THIRD_PARTY_VENDOR_TELEMETRY` * `THIRD_PARTY_VENDOR_MEETRICS`

        :return: The viewability_vendor_configs of this ThirdPartyMeasurementConfigs.
        :rtype: List[ThirdPartyVendorConfig]
        """
        return self._viewability_vendor_configs

    @viewability_vendor_configs.setter
    def viewability_vendor_configs(self, viewability_vendor_configs):
        """Sets the viewability_vendor_configs of this ThirdPartyMeasurementConfigs.

        Optional. The third-party vendors measuring viewability. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_MOAT` * `THIRD_PARTY_VENDOR_DOUBLE_VERIFY` * `THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE` * `THIRD_PARTY_VENDOR_COMSCORE` * `THIRD_PARTY_VENDOR_TELEMETRY` * `THIRD_PARTY_VENDOR_MEETRICS`

        :param viewability_vendor_configs: The viewability_vendor_configs of this ThirdPartyMeasurementConfigs.
        :type viewability_vendor_configs: List[ThirdPartyVendorConfig]
        """

        self._viewability_vendor_configs = viewability_vendor_configs
