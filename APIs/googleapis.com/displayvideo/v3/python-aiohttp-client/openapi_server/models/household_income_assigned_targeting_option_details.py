# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HouseholdIncomeAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, household_income: str=None):
        """HouseholdIncomeAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param household_income: The household_income of this HouseholdIncomeAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'household_income': str
        }

        self.attribute_map = {
            'household_income': 'householdIncome'
        }

        self._household_income = household_income

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HouseholdIncomeAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HouseholdIncomeAssignedTargetingOptionDetails of this HouseholdIncomeAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def household_income(self):
        """Gets the household_income of this HouseholdIncomeAssignedTargetingOptionDetails.

        Required. The household income of the audience.

        :return: The household_income of this HouseholdIncomeAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._household_income

    @household_income.setter
    def household_income(self, household_income):
        """Sets the household_income of this HouseholdIncomeAssignedTargetingOptionDetails.

        Required. The household income of the audience.

        :param household_income: The household_income of this HouseholdIncomeAssignedTargetingOptionDetails.
        :type household_income: str
        """
        allowed_values = ["HOUSEHOLD_INCOME_UNSPECIFIED", "HOUSEHOLD_INCOME_UNKNOWN", "HOUSEHOLD_INCOME_LOWER_50_PERCENT", "HOUSEHOLD_INCOME_TOP_41_TO_50_PERCENT", "HOUSEHOLD_INCOME_TOP_31_TO_40_PERCENT", "HOUSEHOLD_INCOME_TOP_21_TO_30_PERCENT", "HOUSEHOLD_INCOME_TOP_11_TO_20_PERCENT", "HOUSEHOLD_INCOME_TOP_10_PERCENT"]  # noqa: E501
        if household_income not in allowed_values:
            raise ValueError(
                "Invalid value for `household_income` ({0}), must be one of {1}"
                .format(household_income, allowed_values)
            )

        self._household_income = household_income
