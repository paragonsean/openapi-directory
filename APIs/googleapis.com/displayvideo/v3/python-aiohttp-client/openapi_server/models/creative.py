# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_association import AssetAssociation
from openapi_server.models.audio_video_offset import AudioVideoOffset
from openapi_server.models.cm_tracking_ad import CmTrackingAd
from openapi_server.models.counter_event import CounterEvent
from openapi_server.models.dimensions import Dimensions
from openapi_server.models.exit_event import ExitEvent
from openapi_server.models.oba_icon import ObaIcon
from openapi_server.models.review_status_info import ReviewStatusInfo
from openapi_server.models.third_party_url import ThirdPartyUrl
from openapi_server.models.timer_event import TimerEvent
from openapi_server.models.transcode import Transcode
from openapi_server.models.universal_ad_id import UniversalAdId
from openapi_server import util


class Creative(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_dimensions: List[Dimensions]=None, advertiser_id: str=None, appended_tag: str=None, assets: List[AssetAssociation]=None, cm_placement_id: str=None, cm_tracking_ad: CmTrackingAd=None, companion_creative_ids: List[str]=None, counter_events: List[CounterEvent]=None, create_time: str=None, creative_attributes: List[str]=None, creative_id: str=None, creative_type: str=None, dimensions: Dimensions=None, display_name: str=None, dynamic: bool=None, entity_status: str=None, exit_events: List[ExitEvent]=None, expand_on_hover: bool=None, expanding_direction: str=None, hosting_source: str=None, html5_video: bool=None, ias_campaign_monitoring: bool=None, integration_code: str=None, js_tracker_url: str=None, line_item_ids: List[str]=None, media_duration: str=None, mp3_audio: bool=None, name: str=None, notes: str=None, oba_icon: ObaIcon=None, ogg_audio: bool=None, progress_offset: AudioVideoOffset=None, require_html5: bool=None, require_mraid: bool=None, require_ping_for_attribution: bool=None, review_status: ReviewStatusInfo=None, skip_offset: AudioVideoOffset=None, skippable: bool=None, third_party_tag: str=None, third_party_urls: List[ThirdPartyUrl]=None, timer_events: List[TimerEvent]=None, tracker_urls: List[str]=None, transcodes: List[Transcode]=None, universal_ad_id: UniversalAdId=None, update_time: str=None, vast_tag_url: str=None, vpaid: bool=None):
        """Creative - a model defined in OpenAPI

        :param additional_dimensions: The additional_dimensions of this Creative.
        :param advertiser_id: The advertiser_id of this Creative.
        :param appended_tag: The appended_tag of this Creative.
        :param assets: The assets of this Creative.
        :param cm_placement_id: The cm_placement_id of this Creative.
        :param cm_tracking_ad: The cm_tracking_ad of this Creative.
        :param companion_creative_ids: The companion_creative_ids of this Creative.
        :param counter_events: The counter_events of this Creative.
        :param create_time: The create_time of this Creative.
        :param creative_attributes: The creative_attributes of this Creative.
        :param creative_id: The creative_id of this Creative.
        :param creative_type: The creative_type of this Creative.
        :param dimensions: The dimensions of this Creative.
        :param display_name: The display_name of this Creative.
        :param dynamic: The dynamic of this Creative.
        :param entity_status: The entity_status of this Creative.
        :param exit_events: The exit_events of this Creative.
        :param expand_on_hover: The expand_on_hover of this Creative.
        :param expanding_direction: The expanding_direction of this Creative.
        :param hosting_source: The hosting_source of this Creative.
        :param html5_video: The html5_video of this Creative.
        :param ias_campaign_monitoring: The ias_campaign_monitoring of this Creative.
        :param integration_code: The integration_code of this Creative.
        :param js_tracker_url: The js_tracker_url of this Creative.
        :param line_item_ids: The line_item_ids of this Creative.
        :param media_duration: The media_duration of this Creative.
        :param mp3_audio: The mp3_audio of this Creative.
        :param name: The name of this Creative.
        :param notes: The notes of this Creative.
        :param oba_icon: The oba_icon of this Creative.
        :param ogg_audio: The ogg_audio of this Creative.
        :param progress_offset: The progress_offset of this Creative.
        :param require_html5: The require_html5 of this Creative.
        :param require_mraid: The require_mraid of this Creative.
        :param require_ping_for_attribution: The require_ping_for_attribution of this Creative.
        :param review_status: The review_status of this Creative.
        :param skip_offset: The skip_offset of this Creative.
        :param skippable: The skippable of this Creative.
        :param third_party_tag: The third_party_tag of this Creative.
        :param third_party_urls: The third_party_urls of this Creative.
        :param timer_events: The timer_events of this Creative.
        :param tracker_urls: The tracker_urls of this Creative.
        :param transcodes: The transcodes of this Creative.
        :param universal_ad_id: The universal_ad_id of this Creative.
        :param update_time: The update_time of this Creative.
        :param vast_tag_url: The vast_tag_url of this Creative.
        :param vpaid: The vpaid of this Creative.
        """
        self.openapi_types = {
            'additional_dimensions': List[Dimensions],
            'advertiser_id': str,
            'appended_tag': str,
            'assets': List[AssetAssociation],
            'cm_placement_id': str,
            'cm_tracking_ad': CmTrackingAd,
            'companion_creative_ids': List[str],
            'counter_events': List[CounterEvent],
            'create_time': str,
            'creative_attributes': List[str],
            'creative_id': str,
            'creative_type': str,
            'dimensions': Dimensions,
            'display_name': str,
            'dynamic': bool,
            'entity_status': str,
            'exit_events': List[ExitEvent],
            'expand_on_hover': bool,
            'expanding_direction': str,
            'hosting_source': str,
            'html5_video': bool,
            'ias_campaign_monitoring': bool,
            'integration_code': str,
            'js_tracker_url': str,
            'line_item_ids': List[str],
            'media_duration': str,
            'mp3_audio': bool,
            'name': str,
            'notes': str,
            'oba_icon': ObaIcon,
            'ogg_audio': bool,
            'progress_offset': AudioVideoOffset,
            'require_html5': bool,
            'require_mraid': bool,
            'require_ping_for_attribution': bool,
            'review_status': ReviewStatusInfo,
            'skip_offset': AudioVideoOffset,
            'skippable': bool,
            'third_party_tag': str,
            'third_party_urls': List[ThirdPartyUrl],
            'timer_events': List[TimerEvent],
            'tracker_urls': List[str],
            'transcodes': List[Transcode],
            'universal_ad_id': UniversalAdId,
            'update_time': str,
            'vast_tag_url': str,
            'vpaid': bool
        }

        self.attribute_map = {
            'additional_dimensions': 'additionalDimensions',
            'advertiser_id': 'advertiserId',
            'appended_tag': 'appendedTag',
            'assets': 'assets',
            'cm_placement_id': 'cmPlacementId',
            'cm_tracking_ad': 'cmTrackingAd',
            'companion_creative_ids': 'companionCreativeIds',
            'counter_events': 'counterEvents',
            'create_time': 'createTime',
            'creative_attributes': 'creativeAttributes',
            'creative_id': 'creativeId',
            'creative_type': 'creativeType',
            'dimensions': 'dimensions',
            'display_name': 'displayName',
            'dynamic': 'dynamic',
            'entity_status': 'entityStatus',
            'exit_events': 'exitEvents',
            'expand_on_hover': 'expandOnHover',
            'expanding_direction': 'expandingDirection',
            'hosting_source': 'hostingSource',
            'html5_video': 'html5Video',
            'ias_campaign_monitoring': 'iasCampaignMonitoring',
            'integration_code': 'integrationCode',
            'js_tracker_url': 'jsTrackerUrl',
            'line_item_ids': 'lineItemIds',
            'media_duration': 'mediaDuration',
            'mp3_audio': 'mp3Audio',
            'name': 'name',
            'notes': 'notes',
            'oba_icon': 'obaIcon',
            'ogg_audio': 'oggAudio',
            'progress_offset': 'progressOffset',
            'require_html5': 'requireHtml5',
            'require_mraid': 'requireMraid',
            'require_ping_for_attribution': 'requirePingForAttribution',
            'review_status': 'reviewStatus',
            'skip_offset': 'skipOffset',
            'skippable': 'skippable',
            'third_party_tag': 'thirdPartyTag',
            'third_party_urls': 'thirdPartyUrls',
            'timer_events': 'timerEvents',
            'tracker_urls': 'trackerUrls',
            'transcodes': 'transcodes',
            'universal_ad_id': 'universalAdId',
            'update_time': 'updateTime',
            'vast_tag_url': 'vastTagUrl',
            'vpaid': 'vpaid'
        }

        self._additional_dimensions = additional_dimensions
        self._advertiser_id = advertiser_id
        self._appended_tag = appended_tag
        self._assets = assets
        self._cm_placement_id = cm_placement_id
        self._cm_tracking_ad = cm_tracking_ad
        self._companion_creative_ids = companion_creative_ids
        self._counter_events = counter_events
        self._create_time = create_time
        self._creative_attributes = creative_attributes
        self._creative_id = creative_id
        self._creative_type = creative_type
        self._dimensions = dimensions
        self._display_name = display_name
        self._dynamic = dynamic
        self._entity_status = entity_status
        self._exit_events = exit_events
        self._expand_on_hover = expand_on_hover
        self._expanding_direction = expanding_direction
        self._hosting_source = hosting_source
        self._html5_video = html5_video
        self._ias_campaign_monitoring = ias_campaign_monitoring
        self._integration_code = integration_code
        self._js_tracker_url = js_tracker_url
        self._line_item_ids = line_item_ids
        self._media_duration = media_duration
        self._mp3_audio = mp3_audio
        self._name = name
        self._notes = notes
        self._oba_icon = oba_icon
        self._ogg_audio = ogg_audio
        self._progress_offset = progress_offset
        self._require_html5 = require_html5
        self._require_mraid = require_mraid
        self._require_ping_for_attribution = require_ping_for_attribution
        self._review_status = review_status
        self._skip_offset = skip_offset
        self._skippable = skippable
        self._third_party_tag = third_party_tag
        self._third_party_urls = third_party_urls
        self._timer_events = timer_events
        self._tracker_urls = tracker_urls
        self._transcodes = transcodes
        self._universal_ad_id = universal_ad_id
        self._update_time = update_time
        self._vast_tag_url = vast_tag_url
        self._vpaid = vpaid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Creative':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Creative of this Creative.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_dimensions(self):
        """Gets the additional_dimensions of this Creative.

        Additional dimensions. Applicable when creative_type is one of: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE` * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_LIGHTBOX` * `CREATIVE_TYPE_PUBLISHER_HOSTED` If this field is specified, width_pixels and height_pixels are both required and must be greater than or equal to 0.

        :return: The additional_dimensions of this Creative.
        :rtype: List[Dimensions]
        """
        return self._additional_dimensions

    @additional_dimensions.setter
    def additional_dimensions(self, additional_dimensions):
        """Sets the additional_dimensions of this Creative.

        Additional dimensions. Applicable when creative_type is one of: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE` * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_LIGHTBOX` * `CREATIVE_TYPE_PUBLISHER_HOSTED` If this field is specified, width_pixels and height_pixels are both required and must be greater than or equal to 0.

        :param additional_dimensions: The additional_dimensions of this Creative.
        :type additional_dimensions: List[Dimensions]
        """

        self._additional_dimensions = additional_dimensions

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this Creative.

        Output only. The unique ID of the advertiser the creative belongs to.

        :return: The advertiser_id of this Creative.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this Creative.

        Output only. The unique ID of the advertiser the creative belongs to.

        :param advertiser_id: The advertiser_id of this Creative.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def appended_tag(self):
        """Gets the appended_tag of this Creative.

        Third-party HTML tracking tag to be appended to the creative tag.

        :return: The appended_tag of this Creative.
        :rtype: str
        """
        return self._appended_tag

    @appended_tag.setter
    def appended_tag(self, appended_tag):
        """Sets the appended_tag of this Creative.

        Third-party HTML tracking tag to be appended to the creative tag.

        :param appended_tag: The appended_tag of this Creative.
        :type appended_tag: str
        """

        self._appended_tag = appended_tag

    @property
    def assets(self):
        """Gets the assets of this Creative.

        Required. Assets associated to this creative.

        :return: The assets of this Creative.
        :rtype: List[AssetAssociation]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Creative.

        Required. Assets associated to this creative.

        :param assets: The assets of this Creative.
        :type assets: List[AssetAssociation]
        """

        self._assets = assets

    @property
    def cm_placement_id(self):
        """Gets the cm_placement_id of this Creative.

        Output only. The unique ID of the Campaign Manager 360 placement associated with the creative. This field is only applicable for creatives that are synced from Campaign Manager.

        :return: The cm_placement_id of this Creative.
        :rtype: str
        """
        return self._cm_placement_id

    @cm_placement_id.setter
    def cm_placement_id(self, cm_placement_id):
        """Sets the cm_placement_id of this Creative.

        Output only. The unique ID of the Campaign Manager 360 placement associated with the creative. This field is only applicable for creatives that are synced from Campaign Manager.

        :param cm_placement_id: The cm_placement_id of this Creative.
        :type cm_placement_id: str
        """

        self._cm_placement_id = cm_placement_id

    @property
    def cm_tracking_ad(self):
        """Gets the cm_tracking_ad of this Creative.


        :return: The cm_tracking_ad of this Creative.
        :rtype: CmTrackingAd
        """
        return self._cm_tracking_ad

    @cm_tracking_ad.setter
    def cm_tracking_ad(self, cm_tracking_ad):
        """Sets the cm_tracking_ad of this Creative.


        :param cm_tracking_ad: The cm_tracking_ad of this Creative.
        :type cm_tracking_ad: CmTrackingAd
        """

        self._cm_tracking_ad = cm_tracking_ad

    @property
    def companion_creative_ids(self):
        """Gets the companion_creative_ids of this Creative.

        The IDs of companion creatives for a video creative. You can assign existing display creatives (with image or HTML5 assets) to serve surrounding the publisher's video player. Companions display around the video player while the video is playing and remain after the video has completed. Creatives contain additional dimensions can not be companion creatives. This field is only supported for following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`

        :return: The companion_creative_ids of this Creative.
        :rtype: List[str]
        """
        return self._companion_creative_ids

    @companion_creative_ids.setter
    def companion_creative_ids(self, companion_creative_ids):
        """Sets the companion_creative_ids of this Creative.

        The IDs of companion creatives for a video creative. You can assign existing display creatives (with image or HTML5 assets) to serve surrounding the publisher's video player. Companions display around the video player while the video is playing and remain after the video has completed. Creatives contain additional dimensions can not be companion creatives. This field is only supported for following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`

        :param companion_creative_ids: The companion_creative_ids of this Creative.
        :type companion_creative_ids: List[str]
        """

        self._companion_creative_ids = companion_creative_ids

    @property
    def counter_events(self):
        """Gets the counter_events of this Creative.

        Counter events for a rich media creative. Counters track the number of times that a user interacts with any part of a rich media creative in a specified way (mouse-overs, mouse-outs, clicks, taps, data loading, keyboard entries, etc.). Any event that can be captured in the creative can be recorded as a counter. Leave it empty or unset for creatives containing image assets only.

        :return: The counter_events of this Creative.
        :rtype: List[CounterEvent]
        """
        return self._counter_events

    @counter_events.setter
    def counter_events(self, counter_events):
        """Sets the counter_events of this Creative.

        Counter events for a rich media creative. Counters track the number of times that a user interacts with any part of a rich media creative in a specified way (mouse-overs, mouse-outs, clicks, taps, data loading, keyboard entries, etc.). Any event that can be captured in the creative can be recorded as a counter. Leave it empty or unset for creatives containing image assets only.

        :param counter_events: The counter_events of this Creative.
        :type counter_events: List[CounterEvent]
        """

        self._counter_events = counter_events

    @property
    def create_time(self):
        """Gets the create_time of this Creative.

        Output only. The timestamp when the creative was created. Assigned by the system.

        :return: The create_time of this Creative.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Creative.

        Output only. The timestamp when the creative was created. Assigned by the system.

        :param create_time: The create_time of this Creative.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def creative_attributes(self):
        """Gets the creative_attributes of this Creative.

        Output only. A list of attributes of the creative that is generated by the system.

        :return: The creative_attributes of this Creative.
        :rtype: List[str]
        """
        return self._creative_attributes

    @creative_attributes.setter
    def creative_attributes(self, creative_attributes):
        """Sets the creative_attributes of this Creative.

        Output only. A list of attributes of the creative that is generated by the system.

        :param creative_attributes: The creative_attributes of this Creative.
        :type creative_attributes: List[str]
        """
        allowed_values = ["CREATIVE_ATTRIBUTE_UNSPECIFIED", "CREATIVE_ATTRIBUTE_VAST", "CREATIVE_ATTRIBUTE_VPAID_LINEAR", "CREATIVE_ATTRIBUTE_VPAID_NON_LINEAR"]  # noqa: E501
        if not set(creative_attributes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `creative_attributes` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(creative_attributes) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._creative_attributes = creative_attributes

    @property
    def creative_id(self):
        """Gets the creative_id of this Creative.

        Output only. The unique ID of the creative. Assigned by the system.

        :return: The creative_id of this Creative.
        :rtype: str
        """
        return self._creative_id

    @creative_id.setter
    def creative_id(self, creative_id):
        """Sets the creative_id of this Creative.

        Output only. The unique ID of the creative. Assigned by the system.

        :param creative_id: The creative_id of this Creative.
        :type creative_id: str
        """

        self._creative_id = creative_id

    @property
    def creative_type(self):
        """Gets the creative_type of this Creative.

        Required. Immutable. The type of the creative.

        :return: The creative_type of this Creative.
        :rtype: str
        """
        return self._creative_type

    @creative_type.setter
    def creative_type(self, creative_type):
        """Sets the creative_type of this Creative.

        Required. Immutable. The type of the creative.

        :param creative_type: The creative_type of this Creative.
        :type creative_type: str
        """
        allowed_values = ["CREATIVE_TYPE_UNSPECIFIED", "CREATIVE_TYPE_STANDARD", "CREATIVE_TYPE_EXPANDABLE", "CREATIVE_TYPE_VIDEO", "CREATIVE_TYPE_NATIVE", "CREATIVE_TYPE_TEMPLATED_APP_INSTALL", "CREATIVE_TYPE_NATIVE_SITE_SQUARE", "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_INTERSTITIAL", "CREATIVE_TYPE_LIGHTBOX", "CREATIVE_TYPE_NATIVE_APP_INSTALL", "CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE", "CREATIVE_TYPE_AUDIO", "CREATIVE_TYPE_PUBLISHER_HOSTED", "CREATIVE_TYPE_NATIVE_VIDEO", "CREATIVE_TYPE_TEMPLATED_APP_INSTALL_VIDEO"]  # noqa: E501
        if creative_type not in allowed_values:
            raise ValueError(
                "Invalid value for `creative_type` ({0}), must be one of {1}"
                .format(creative_type, allowed_values)
            )

        self._creative_type = creative_type

    @property
    def dimensions(self):
        """Gets the dimensions of this Creative.


        :return: The dimensions of this Creative.
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Creative.


        :param dimensions: The dimensions of this Creative.
        :type dimensions: Dimensions
        """

        self._dimensions = dimensions

    @property
    def display_name(self):
        """Gets the display_name of this Creative.

        Required. The display name of the creative. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :return: The display_name of this Creative.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Creative.

        Required. The display name of the creative. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :param display_name: The display_name of this Creative.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def dynamic(self):
        """Gets the dynamic of this Creative.

        Output only. Indicates whether the creative is dynamic.

        :return: The dynamic of this Creative.
        :rtype: bool
        """
        return self._dynamic

    @dynamic.setter
    def dynamic(self, dynamic):
        """Sets the dynamic of this Creative.

        Output only. Indicates whether the creative is dynamic.

        :param dynamic: The dynamic of this Creative.
        :type dynamic: bool
        """

        self._dynamic = dynamic

    @property
    def entity_status(self):
        """Gets the entity_status of this Creative.

        Required. Controls whether or not the creative can serve. Accepted values are: * `ENTITY_STATUS_ACTIVE` * `ENTITY_STATUS_ARCHIVED` * `ENTITY_STATUS_PAUSED`

        :return: The entity_status of this Creative.
        :rtype: str
        """
        return self._entity_status

    @entity_status.setter
    def entity_status(self, entity_status):
        """Sets the entity_status of this Creative.

        Required. Controls whether or not the creative can serve. Accepted values are: * `ENTITY_STATUS_ACTIVE` * `ENTITY_STATUS_ARCHIVED` * `ENTITY_STATUS_PAUSED`

        :param entity_status: The entity_status of this Creative.
        :type entity_status: str
        """
        allowed_values = ["ENTITY_STATUS_UNSPECIFIED", "ENTITY_STATUS_ACTIVE", "ENTITY_STATUS_ARCHIVED", "ENTITY_STATUS_DRAFT", "ENTITY_STATUS_PAUSED", "ENTITY_STATUS_SCHEDULED_FOR_DELETION"]  # noqa: E501
        if entity_status not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_status` ({0}), must be one of {1}"
                .format(entity_status, allowed_values)
            )

        self._entity_status = entity_status

    @property
    def exit_events(self):
        """Gets the exit_events of this Creative.

        Required. Exit events for this creative. An exit (also known as a click tag) is any area in your creative that someone can click or tap to open an advertiser's landing page. Every creative must include at least one exit. You can add an exit to your creative in any of the following ways: * Use Google Web Designer's tap area. * Define a JavaScript variable called \"clickTag\". * Use the Enabler (Enabler.exit()) to track exits in rich media formats.

        :return: The exit_events of this Creative.
        :rtype: List[ExitEvent]
        """
        return self._exit_events

    @exit_events.setter
    def exit_events(self, exit_events):
        """Sets the exit_events of this Creative.

        Required. Exit events for this creative. An exit (also known as a click tag) is any area in your creative that someone can click or tap to open an advertiser's landing page. Every creative must include at least one exit. You can add an exit to your creative in any of the following ways: * Use Google Web Designer's tap area. * Define a JavaScript variable called \"clickTag\". * Use the Enabler (Enabler.exit()) to track exits in rich media formats.

        :param exit_events: The exit_events of this Creative.
        :type exit_events: List[ExitEvent]
        """

        self._exit_events = exit_events

    @property
    def expand_on_hover(self):
        """Gets the expand_on_hover of this Creative.

        Optional. Indicates the creative will automatically expand on hover. Optional and only valid for third-party expandable creatives. Third-party expandable creatives are creatives with following hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_EXPANDABLE`

        :return: The expand_on_hover of this Creative.
        :rtype: bool
        """
        return self._expand_on_hover

    @expand_on_hover.setter
    def expand_on_hover(self, expand_on_hover):
        """Sets the expand_on_hover of this Creative.

        Optional. Indicates the creative will automatically expand on hover. Optional and only valid for third-party expandable creatives. Third-party expandable creatives are creatives with following hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_EXPANDABLE`

        :param expand_on_hover: The expand_on_hover of this Creative.
        :type expand_on_hover: bool
        """

        self._expand_on_hover = expand_on_hover

    @property
    def expanding_direction(self):
        """Gets the expanding_direction of this Creative.

        Optional. Specifies the expanding direction of the creative. Required and only valid for third-party expandable creatives. Third-party expandable creatives are creatives with following hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_EXPANDABLE`

        :return: The expanding_direction of this Creative.
        :rtype: str
        """
        return self._expanding_direction

    @expanding_direction.setter
    def expanding_direction(self, expanding_direction):
        """Sets the expanding_direction of this Creative.

        Optional. Specifies the expanding direction of the creative. Required and only valid for third-party expandable creatives. Third-party expandable creatives are creatives with following hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_EXPANDABLE`

        :param expanding_direction: The expanding_direction of this Creative.
        :type expanding_direction: str
        """
        allowed_values = ["EXPANDING_DIRECTION_UNSPECIFIED", "EXPANDING_DIRECTION_NONE", "EXPANDING_DIRECTION_UP", "EXPANDING_DIRECTION_DOWN", "EXPANDING_DIRECTION_LEFT", "EXPANDING_DIRECTION_RIGHT", "EXPANDING_DIRECTION_UP_AND_LEFT", "EXPANDING_DIRECTION_UP_AND_RIGHT", "EXPANDING_DIRECTION_DOWN_AND_LEFT", "EXPANDING_DIRECTION_DOWN_AND_RIGHT", "EXPANDING_DIRECTION_UP_OR_DOWN", "EXPANDING_DIRECTION_LEFT_OR_RIGHT", "EXPANDING_DIRECTION_ANY_DIAGONAL"]  # noqa: E501
        if expanding_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `expanding_direction` ({0}), must be one of {1}"
                .format(expanding_direction, allowed_values)
            )

        self._expanding_direction = expanding_direction

    @property
    def hosting_source(self):
        """Gets the hosting_source of this Creative.

        Required. Indicates where the creative is hosted.

        :return: The hosting_source of this Creative.
        :rtype: str
        """
        return self._hosting_source

    @hosting_source.setter
    def hosting_source(self, hosting_source):
        """Sets the hosting_source of this Creative.

        Required. Indicates where the creative is hosted.

        :param hosting_source: The hosting_source of this Creative.
        :type hosting_source: str
        """
        allowed_values = ["HOSTING_SOURCE_UNSPECIFIED", "HOSTING_SOURCE_CM", "HOSTING_SOURCE_THIRD_PARTY", "HOSTING_SOURCE_HOSTED", "HOSTING_SOURCE_RICH_MEDIA"]  # noqa: E501
        if hosting_source not in allowed_values:
            raise ValueError(
                "Invalid value for `hosting_source` ({0}), must be one of {1}"
                .format(hosting_source, allowed_values)
            )

        self._hosting_source = hosting_source

    @property
    def html5_video(self):
        """Gets the html5_video of this Creative.

        Output only. Indicates the third-party VAST tag creative requires HTML5 Video support. Output only and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_VIDEO`

        :return: The html5_video of this Creative.
        :rtype: bool
        """
        return self._html5_video

    @html5_video.setter
    def html5_video(self, html5_video):
        """Sets the html5_video of this Creative.

        Output only. Indicates the third-party VAST tag creative requires HTML5 Video support. Output only and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_VIDEO`

        :param html5_video: The html5_video of this Creative.
        :type html5_video: bool
        """

        self._html5_video = html5_video

    @property
    def ias_campaign_monitoring(self):
        """Gets the ias_campaign_monitoring of this Creative.

        Indicates whether Integral Ad Science (IAS) campaign monitoring is enabled. To enable this for the creative, make sure the Advertiser.creative_config.ias_client_id has been set to your IAS client ID.

        :return: The ias_campaign_monitoring of this Creative.
        :rtype: bool
        """
        return self._ias_campaign_monitoring

    @ias_campaign_monitoring.setter
    def ias_campaign_monitoring(self, ias_campaign_monitoring):
        """Sets the ias_campaign_monitoring of this Creative.

        Indicates whether Integral Ad Science (IAS) campaign monitoring is enabled. To enable this for the creative, make sure the Advertiser.creative_config.ias_client_id has been set to your IAS client ID.

        :param ias_campaign_monitoring: The ias_campaign_monitoring of this Creative.
        :type ias_campaign_monitoring: bool
        """

        self._ias_campaign_monitoring = ias_campaign_monitoring

    @property
    def integration_code(self):
        """Gets the integration_code of this Creative.

        ID information used to link this creative to an external system. Must be UTF-8 encoded with a length of no more than 10,000 characters.

        :return: The integration_code of this Creative.
        :rtype: str
        """
        return self._integration_code

    @integration_code.setter
    def integration_code(self, integration_code):
        """Sets the integration_code of this Creative.

        ID information used to link this creative to an external system. Must be UTF-8 encoded with a length of no more than 10,000 characters.

        :param integration_code: The integration_code of this Creative.
        :type integration_code: str
        """

        self._integration_code = integration_code

    @property
    def js_tracker_url(self):
        """Gets the js_tracker_url of this Creative.

        JavaScript measurement URL from supported third-party verification providers (ComScore, DoubleVerify, IAS, Moat). HTML script tags are not supported. This field is only writeable in following creative_type: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_NATIVE_VIDEO`

        :return: The js_tracker_url of this Creative.
        :rtype: str
        """
        return self._js_tracker_url

    @js_tracker_url.setter
    def js_tracker_url(self, js_tracker_url):
        """Sets the js_tracker_url of this Creative.

        JavaScript measurement URL from supported third-party verification providers (ComScore, DoubleVerify, IAS, Moat). HTML script tags are not supported. This field is only writeable in following creative_type: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_NATIVE_VIDEO`

        :param js_tracker_url: The js_tracker_url of this Creative.
        :type js_tracker_url: str
        """

        self._js_tracker_url = js_tracker_url

    @property
    def line_item_ids(self):
        """Gets the line_item_ids of this Creative.

        Output only. The IDs of the line items this creative is associated with. To associate a creative to a line item, use LineItem.creative_ids instead.

        :return: The line_item_ids of this Creative.
        :rtype: List[str]
        """
        return self._line_item_ids

    @line_item_ids.setter
    def line_item_ids(self, line_item_ids):
        """Sets the line_item_ids of this Creative.

        Output only. The IDs of the line items this creative is associated with. To associate a creative to a line item, use LineItem.creative_ids instead.

        :param line_item_ids: The line_item_ids of this Creative.
        :type line_item_ids: List[str]
        """

        self._line_item_ids = line_item_ids

    @property
    def media_duration(self):
        """Gets the media_duration of this Creative.

        Output only. Media duration of the creative. Applicable when creative_type is one of: * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_NATIVE_VIDEO` * `CREATIVE_TYPE_PUBLISHER_HOSTED`

        :return: The media_duration of this Creative.
        :rtype: str
        """
        return self._media_duration

    @media_duration.setter
    def media_duration(self, media_duration):
        """Sets the media_duration of this Creative.

        Output only. Media duration of the creative. Applicable when creative_type is one of: * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_NATIVE_VIDEO` * `CREATIVE_TYPE_PUBLISHER_HOSTED`

        :param media_duration: The media_duration of this Creative.
        :type media_duration: str
        """

        self._media_duration = media_duration

    @property
    def mp3_audio(self):
        """Gets the mp3_audio of this Creative.

        Output only. Indicates the third-party audio creative supports MP3. Output only and only valid for third-party audio creatives. Third-party audio creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO`

        :return: The mp3_audio of this Creative.
        :rtype: bool
        """
        return self._mp3_audio

    @mp3_audio.setter
    def mp3_audio(self, mp3_audio):
        """Sets the mp3_audio of this Creative.

        Output only. Indicates the third-party audio creative supports MP3. Output only and only valid for third-party audio creatives. Third-party audio creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO`

        :param mp3_audio: The mp3_audio of this Creative.
        :type mp3_audio: bool
        """

        self._mp3_audio = mp3_audio

    @property
    def name(self):
        """Gets the name of this Creative.

        Output only. The resource name of the creative.

        :return: The name of this Creative.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Creative.

        Output only. The resource name of the creative.

        :param name: The name of this Creative.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Creative.

        User notes for this creative. Must be UTF-8 encoded with a length of no more than 20,000 characters.

        :return: The notes of this Creative.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Creative.

        User notes for this creative. Must be UTF-8 encoded with a length of no more than 20,000 characters.

        :param notes: The notes of this Creative.
        :type notes: str
        """

        self._notes = notes

    @property
    def oba_icon(self):
        """Gets the oba_icon of this Creative.


        :return: The oba_icon of this Creative.
        :rtype: ObaIcon
        """
        return self._oba_icon

    @oba_icon.setter
    def oba_icon(self, oba_icon):
        """Sets the oba_icon of this Creative.


        :param oba_icon: The oba_icon of this Creative.
        :type oba_icon: ObaIcon
        """

        self._oba_icon = oba_icon

    @property
    def ogg_audio(self):
        """Gets the ogg_audio of this Creative.

        Output only. Indicates the third-party audio creative supports OGG. Output only and only valid for third-party audio creatives. Third-party audio creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO`

        :return: The ogg_audio of this Creative.
        :rtype: bool
        """
        return self._ogg_audio

    @ogg_audio.setter
    def ogg_audio(self, ogg_audio):
        """Sets the ogg_audio of this Creative.

        Output only. Indicates the third-party audio creative supports OGG. Output only and only valid for third-party audio creatives. Third-party audio creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO`

        :param ogg_audio: The ogg_audio of this Creative.
        :type ogg_audio: bool
        """

        self._ogg_audio = ogg_audio

    @property
    def progress_offset(self):
        """Gets the progress_offset of this Creative.


        :return: The progress_offset of this Creative.
        :rtype: AudioVideoOffset
        """
        return self._progress_offset

    @progress_offset.setter
    def progress_offset(self, progress_offset):
        """Sets the progress_offset of this Creative.


        :param progress_offset: The progress_offset of this Creative.
        :type progress_offset: AudioVideoOffset
        """

        self._progress_offset = progress_offset

    @property
    def require_html5(self):
        """Gets the require_html5 of this Creative.

        Optional. Indicates that the creative relies on HTML5 to render properly. Optional and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`

        :return: The require_html5 of this Creative.
        :rtype: bool
        """
        return self._require_html5

    @require_html5.setter
    def require_html5(self, require_html5):
        """Sets the require_html5 of this Creative.

        Optional. Indicates that the creative relies on HTML5 to render properly. Optional and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`

        :param require_html5: The require_html5 of this Creative.
        :type require_html5: bool
        """

        self._require_html5 = require_html5

    @property
    def require_mraid(self):
        """Gets the require_mraid of this Creative.

        Optional. Indicates that the creative requires MRAID (Mobile Rich Media Ad Interface Definitions system). Set this if the creative relies on mobile gestures for interactivity, such as swiping or tapping. Optional and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`

        :return: The require_mraid of this Creative.
        :rtype: bool
        """
        return self._require_mraid

    @require_mraid.setter
    def require_mraid(self, require_mraid):
        """Sets the require_mraid of this Creative.

        Optional. Indicates that the creative requires MRAID (Mobile Rich Media Ad Interface Definitions system). Set this if the creative relies on mobile gestures for interactivity, such as swiping or tapping. Optional and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`

        :param require_mraid: The require_mraid of this Creative.
        :type require_mraid: bool
        """

        self._require_mraid = require_mraid

    @property
    def require_ping_for_attribution(self):
        """Gets the require_ping_for_attribution of this Creative.

        Optional. Indicates that the creative will wait for a return ping for attribution. Only valid when using a Campaign Manager 360 tracking ad with a third-party ad server parameter and the ${DC_DBM_TOKEN} macro. Optional and only valid for third-party tag creatives or third-party VAST tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE` Third-party VAST tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`

        :return: The require_ping_for_attribution of this Creative.
        :rtype: bool
        """
        return self._require_ping_for_attribution

    @require_ping_for_attribution.setter
    def require_ping_for_attribution(self, require_ping_for_attribution):
        """Sets the require_ping_for_attribution of this Creative.

        Optional. Indicates that the creative will wait for a return ping for attribution. Only valid when using a Campaign Manager 360 tracking ad with a third-party ad server parameter and the ${DC_DBM_TOKEN} macro. Optional and only valid for third-party tag creatives or third-party VAST tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE` Third-party VAST tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`

        :param require_ping_for_attribution: The require_ping_for_attribution of this Creative.
        :type require_ping_for_attribution: bool
        """

        self._require_ping_for_attribution = require_ping_for_attribution

    @property
    def review_status(self):
        """Gets the review_status of this Creative.


        :return: The review_status of this Creative.
        :rtype: ReviewStatusInfo
        """
        return self._review_status

    @review_status.setter
    def review_status(self, review_status):
        """Sets the review_status of this Creative.


        :param review_status: The review_status of this Creative.
        :type review_status: ReviewStatusInfo
        """

        self._review_status = review_status

    @property
    def skip_offset(self):
        """Gets the skip_offset of this Creative.


        :return: The skip_offset of this Creative.
        :rtype: AudioVideoOffset
        """
        return self._skip_offset

    @skip_offset.setter
    def skip_offset(self, skip_offset):
        """Sets the skip_offset of this Creative.


        :param skip_offset: The skip_offset of this Creative.
        :type skip_offset: AudioVideoOffset
        """

        self._skip_offset = skip_offset

    @property
    def skippable(self):
        """Gets the skippable of this Creative.

        Whether the user can choose to skip a video creative. This field is only supported for the following creative_type: * `CREATIVE_TYPE_VIDEO`

        :return: The skippable of this Creative.
        :rtype: bool
        """
        return self._skippable

    @skippable.setter
    def skippable(self, skippable):
        """Sets the skippable of this Creative.

        Whether the user can choose to skip a video creative. This field is only supported for the following creative_type: * `CREATIVE_TYPE_VIDEO`

        :param skippable: The skippable of this Creative.
        :type skippable: bool
        """

        self._skippable = skippable

    @property
    def third_party_tag(self):
        """Gets the third_party_tag of this Creative.

        Optional. The original third-party tag used for the creative. Required and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`

        :return: The third_party_tag of this Creative.
        :rtype: str
        """
        return self._third_party_tag

    @third_party_tag.setter
    def third_party_tag(self, third_party_tag):
        """Sets the third_party_tag of this Creative.

        Optional. The original third-party tag used for the creative. Required and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`

        :param third_party_tag: The third_party_tag of this Creative.
        :type third_party_tag: str
        """

        self._third_party_tag = third_party_tag

    @property
    def third_party_urls(self):
        """Gets the third_party_urls of this Creative.

        Tracking URLs from third parties to track interactions with a video creative. This field is only supported for the following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_NATIVE_VIDEO`

        :return: The third_party_urls of this Creative.
        :rtype: List[ThirdPartyUrl]
        """
        return self._third_party_urls

    @third_party_urls.setter
    def third_party_urls(self, third_party_urls):
        """Sets the third_party_urls of this Creative.

        Tracking URLs from third parties to track interactions with a video creative. This field is only supported for the following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_NATIVE_VIDEO`

        :param third_party_urls: The third_party_urls of this Creative.
        :type third_party_urls: List[ThirdPartyUrl]
        """

        self._third_party_urls = third_party_urls

    @property
    def timer_events(self):
        """Gets the timer_events of this Creative.

        Timer custom events for a rich media creative. Timers track the time during which a user views and interacts with a specified part of a rich media creative. A creative can have multiple timer events, each timed independently. Leave it empty or unset for creatives containing image assets only.

        :return: The timer_events of this Creative.
        :rtype: List[TimerEvent]
        """
        return self._timer_events

    @timer_events.setter
    def timer_events(self, timer_events):
        """Sets the timer_events of this Creative.

        Timer custom events for a rich media creative. Timers track the time during which a user views and interacts with a specified part of a rich media creative. A creative can have multiple timer events, each timed independently. Leave it empty or unset for creatives containing image assets only.

        :param timer_events: The timer_events of this Creative.
        :type timer_events: List[TimerEvent]
        """

        self._timer_events = timer_events

    @property
    def tracker_urls(self):
        """Gets the tracker_urls of this Creative.

        Tracking URLs for analytics providers or third-party ad technology vendors. The URLs must start with https (except on inventory that doesn't require SSL compliance). If using macros in your URL, use only macros supported by Display & Video 360. Standard URLs only, no IMG or SCRIPT tags. This field is only writeable in following creative_type: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_NATIVE_VIDEO`

        :return: The tracker_urls of this Creative.
        :rtype: List[str]
        """
        return self._tracker_urls

    @tracker_urls.setter
    def tracker_urls(self, tracker_urls):
        """Sets the tracker_urls of this Creative.

        Tracking URLs for analytics providers or third-party ad technology vendors. The URLs must start with https (except on inventory that doesn't require SSL compliance). If using macros in your URL, use only macros supported by Display & Video 360. Standard URLs only, no IMG or SCRIPT tags. This field is only writeable in following creative_type: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_NATIVE_VIDEO`

        :param tracker_urls: The tracker_urls of this Creative.
        :type tracker_urls: List[str]
        """

        self._tracker_urls = tracker_urls

    @property
    def transcodes(self):
        """Gets the transcodes of this Creative.

        Output only. Audio/Video transcodes. Display & Video 360 transcodes the main asset into a number of alternative versions that use different file formats or have different properties (resolution, audio bit rate, and video bit rate), each designed for specific video players or bandwidths. These transcodes give a publisher's system more options to choose from for each impression on your video and ensures that the appropriate file serves based on the viewer’s connection and screen size. This field is only supported in following creative_type: * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_NATIVE_VIDEO` * `CREATIVE_TYPE_AUDIO`

        :return: The transcodes of this Creative.
        :rtype: List[Transcode]
        """
        return self._transcodes

    @transcodes.setter
    def transcodes(self, transcodes):
        """Sets the transcodes of this Creative.

        Output only. Audio/Video transcodes. Display & Video 360 transcodes the main asset into a number of alternative versions that use different file formats or have different properties (resolution, audio bit rate, and video bit rate), each designed for specific video players or bandwidths. These transcodes give a publisher's system more options to choose from for each impression on your video and ensures that the appropriate file serves based on the viewer’s connection and screen size. This field is only supported in following creative_type: * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_NATIVE_VIDEO` * `CREATIVE_TYPE_AUDIO`

        :param transcodes: The transcodes of this Creative.
        :type transcodes: List[Transcode]
        """

        self._transcodes = transcodes

    @property
    def universal_ad_id(self):
        """Gets the universal_ad_id of this Creative.


        :return: The universal_ad_id of this Creative.
        :rtype: UniversalAdId
        """
        return self._universal_ad_id

    @universal_ad_id.setter
    def universal_ad_id(self, universal_ad_id):
        """Sets the universal_ad_id of this Creative.


        :param universal_ad_id: The universal_ad_id of this Creative.
        :type universal_ad_id: UniversalAdId
        """

        self._universal_ad_id = universal_ad_id

    @property
    def update_time(self):
        """Gets the update_time of this Creative.

        Output only. The timestamp when the creative was last updated, either by the user or system (e.g. creative review). Assigned by the system.

        :return: The update_time of this Creative.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Creative.

        Output only. The timestamp when the creative was last updated, either by the user or system (e.g. creative review). Assigned by the system.

        :param update_time: The update_time of this Creative.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def vast_tag_url(self):
        """Gets the vast_tag_url of this Creative.

        Optional. The URL of the VAST tag for a third-party VAST tag creative. Required and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`

        :return: The vast_tag_url of this Creative.
        :rtype: str
        """
        return self._vast_tag_url

    @vast_tag_url.setter
    def vast_tag_url(self, vast_tag_url):
        """Sets the vast_tag_url of this Creative.

        Optional. The URL of the VAST tag for a third-party VAST tag creative. Required and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`

        :param vast_tag_url: The vast_tag_url of this Creative.
        :type vast_tag_url: str
        """

        self._vast_tag_url = vast_tag_url

    @property
    def vpaid(self):
        """Gets the vpaid of this Creative.

        Output only. Indicates the third-party VAST tag creative requires VPAID (Digital Video Player-Ad Interface). Output only and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_VIDEO`

        :return: The vpaid of this Creative.
        :rtype: bool
        """
        return self._vpaid

    @vpaid.setter
    def vpaid(self, vpaid):
        """Sets the vpaid of this Creative.

        Output only. Indicates the third-party VAST tag creative requires VPAID (Digital Video Player-Ad Interface). Output only and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_VIDEO`

        :param vpaid: The vpaid of this Creative.
        :type vpaid: bool
        """

        self._vpaid = vpaid
