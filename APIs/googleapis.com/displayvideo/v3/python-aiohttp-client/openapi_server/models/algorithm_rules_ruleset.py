# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.algorithm_rules_rule import AlgorithmRulesRule
from openapi_server import util


class AlgorithmRulesRuleset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_type: str=None, max_value: float=None, rules: List[AlgorithmRulesRule]=None):
        """AlgorithmRulesRuleset - a model defined in OpenAPI

        :param aggregation_type: The aggregation_type of this AlgorithmRulesRuleset.
        :param max_value: The max_value of this AlgorithmRulesRuleset.
        :param rules: The rules of this AlgorithmRulesRuleset.
        """
        self.openapi_types = {
            'aggregation_type': str,
            'max_value': float,
            'rules': List[AlgorithmRulesRule]
        }

        self.attribute_map = {
            'aggregation_type': 'aggregationType',
            'max_value': 'maxValue',
            'rules': 'rules'
        }

        self._aggregation_type = aggregation_type
        self._max_value = max_value
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlgorithmRulesRuleset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlgorithmRulesRuleset of this AlgorithmRulesRuleset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_type(self):
        """Gets the aggregation_type of this AlgorithmRulesRuleset.

        How to aggregate values of evaluated rules.

        :return: The aggregation_type of this AlgorithmRulesRuleset.
        :rtype: str
        """
        return self._aggregation_type

    @aggregation_type.setter
    def aggregation_type(self, aggregation_type):
        """Sets the aggregation_type of this AlgorithmRulesRuleset.

        How to aggregate values of evaluated rules.

        :param aggregation_type: The aggregation_type of this AlgorithmRulesRuleset.
        :type aggregation_type: str
        """
        allowed_values = ["RULE_AGGREGATION_TYPE_UNSPECIFIED", "SUM_OF_VALUES", "PRODUCT_OF_VALUES", "MAXIMUM_VALUE"]  # noqa: E501
        if aggregation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_type` ({0}), must be one of {1}"
                .format(aggregation_type, allowed_values)
            )

        self._aggregation_type = aggregation_type

    @property
    def max_value(self):
        """Gets the max_value of this AlgorithmRulesRuleset.

        Maximum value the ruleset can evaluate to.

        :return: The max_value of this AlgorithmRulesRuleset.
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this AlgorithmRulesRuleset.

        Maximum value the ruleset can evaluate to.

        :param max_value: The max_value of this AlgorithmRulesRuleset.
        :type max_value: float
        """

        self._max_value = max_value

    @property
    def rules(self):
        """Gets the rules of this AlgorithmRulesRuleset.

        List of rules to generate the impression value.

        :return: The rules of this AlgorithmRulesRuleset.
        :rtype: List[AlgorithmRulesRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this AlgorithmRulesRuleset.

        List of rules to generate the impression value.

        :param rules: The rules of this AlgorithmRulesRuleset.
        :type rules: List[AlgorithmRulesRule]
        """

        self._rules = rules
