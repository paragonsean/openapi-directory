# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.guaranteed_order_status import GuaranteedOrderStatus
from openapi_server import util


class GuaranteedOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_advertiser_id: str=None, default_campaign_id: str=None, display_name: str=None, exchange: str=None, guaranteed_order_id: str=None, legacy_guaranteed_order_id: str=None, name: str=None, publisher_name: str=None, read_access_inherited: bool=None, read_advertiser_ids: List[str]=None, read_write_advertiser_id: str=None, read_write_partner_id: str=None, status: GuaranteedOrderStatus=None, update_time: str=None):
        """GuaranteedOrder - a model defined in OpenAPI

        :param default_advertiser_id: The default_advertiser_id of this GuaranteedOrder.
        :param default_campaign_id: The default_campaign_id of this GuaranteedOrder.
        :param display_name: The display_name of this GuaranteedOrder.
        :param exchange: The exchange of this GuaranteedOrder.
        :param guaranteed_order_id: The guaranteed_order_id of this GuaranteedOrder.
        :param legacy_guaranteed_order_id: The legacy_guaranteed_order_id of this GuaranteedOrder.
        :param name: The name of this GuaranteedOrder.
        :param publisher_name: The publisher_name of this GuaranteedOrder.
        :param read_access_inherited: The read_access_inherited of this GuaranteedOrder.
        :param read_advertiser_ids: The read_advertiser_ids of this GuaranteedOrder.
        :param read_write_advertiser_id: The read_write_advertiser_id of this GuaranteedOrder.
        :param read_write_partner_id: The read_write_partner_id of this GuaranteedOrder.
        :param status: The status of this GuaranteedOrder.
        :param update_time: The update_time of this GuaranteedOrder.
        """
        self.openapi_types = {
            'default_advertiser_id': str,
            'default_campaign_id': str,
            'display_name': str,
            'exchange': str,
            'guaranteed_order_id': str,
            'legacy_guaranteed_order_id': str,
            'name': str,
            'publisher_name': str,
            'read_access_inherited': bool,
            'read_advertiser_ids': List[str],
            'read_write_advertiser_id': str,
            'read_write_partner_id': str,
            'status': GuaranteedOrderStatus,
            'update_time': str
        }

        self.attribute_map = {
            'default_advertiser_id': 'defaultAdvertiserId',
            'default_campaign_id': 'defaultCampaignId',
            'display_name': 'displayName',
            'exchange': 'exchange',
            'guaranteed_order_id': 'guaranteedOrderId',
            'legacy_guaranteed_order_id': 'legacyGuaranteedOrderId',
            'name': 'name',
            'publisher_name': 'publisherName',
            'read_access_inherited': 'readAccessInherited',
            'read_advertiser_ids': 'readAdvertiserIds',
            'read_write_advertiser_id': 'readWriteAdvertiserId',
            'read_write_partner_id': 'readWritePartnerId',
            'status': 'status',
            'update_time': 'updateTime'
        }

        self._default_advertiser_id = default_advertiser_id
        self._default_campaign_id = default_campaign_id
        self._display_name = display_name
        self._exchange = exchange
        self._guaranteed_order_id = guaranteed_order_id
        self._legacy_guaranteed_order_id = legacy_guaranteed_order_id
        self._name = name
        self._publisher_name = publisher_name
        self._read_access_inherited = read_access_inherited
        self._read_advertiser_ids = read_advertiser_ids
        self._read_write_advertiser_id = read_write_advertiser_id
        self._read_write_partner_id = read_write_partner_id
        self._status = status
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GuaranteedOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GuaranteedOrder of this GuaranteedOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_advertiser_id(self):
        """Gets the default_advertiser_id of this GuaranteedOrder.

        Output only. The ID of default advertiser of the guaranteed order. The default advertiser is either the read_write_advertiser_id or, if that is not set, the first advertiser listed in read_advertiser_ids. Otherwise, there is no default advertiser.

        :return: The default_advertiser_id of this GuaranteedOrder.
        :rtype: str
        """
        return self._default_advertiser_id

    @default_advertiser_id.setter
    def default_advertiser_id(self, default_advertiser_id):
        """Sets the default_advertiser_id of this GuaranteedOrder.

        Output only. The ID of default advertiser of the guaranteed order. The default advertiser is either the read_write_advertiser_id or, if that is not set, the first advertiser listed in read_advertiser_ids. Otherwise, there is no default advertiser.

        :param default_advertiser_id: The default_advertiser_id of this GuaranteedOrder.
        :type default_advertiser_id: str
        """

        self._default_advertiser_id = default_advertiser_id

    @property
    def default_campaign_id(self):
        """Gets the default_campaign_id of this GuaranteedOrder.

        The ID of the default campaign that is assigned to the guaranteed order. The default campaign must belong to the default advertiser.

        :return: The default_campaign_id of this GuaranteedOrder.
        :rtype: str
        """
        return self._default_campaign_id

    @default_campaign_id.setter
    def default_campaign_id(self, default_campaign_id):
        """Sets the default_campaign_id of this GuaranteedOrder.

        The ID of the default campaign that is assigned to the guaranteed order. The default campaign must belong to the default advertiser.

        :param default_campaign_id: The default_campaign_id of this GuaranteedOrder.
        :type default_campaign_id: str
        """

        self._default_campaign_id = default_campaign_id

    @property
    def display_name(self):
        """Gets the display_name of this GuaranteedOrder.

        Required. The display name of the guaranteed order. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :return: The display_name of this GuaranteedOrder.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GuaranteedOrder.

        Required. The display name of the guaranteed order. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :param display_name: The display_name of this GuaranteedOrder.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def exchange(self):
        """Gets the exchange of this GuaranteedOrder.

        Required. Immutable. The exchange where the guaranteed order originated.

        :return: The exchange of this GuaranteedOrder.
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this GuaranteedOrder.

        Required. Immutable. The exchange where the guaranteed order originated.

        :param exchange: The exchange of this GuaranteedOrder.
        :type exchange: str
        """
        allowed_values = ["EXCHANGE_UNSPECIFIED", "EXCHANGE_GOOGLE_AD_MANAGER", "EXCHANGE_APPNEXUS", "EXCHANGE_BRIGHTROLL", "EXCHANGE_ADFORM", "EXCHANGE_ADMETA", "EXCHANGE_ADMIXER", "EXCHANGE_ADSMOGO", "EXCHANGE_ADSWIZZ", "EXCHANGE_BIDSWITCH", "EXCHANGE_BRIGHTROLL_DISPLAY", "EXCHANGE_CADREON", "EXCHANGE_DAILYMOTION", "EXCHANGE_FIVE", "EXCHANGE_FLUCT", "EXCHANGE_FREEWHEEL", "EXCHANGE_GENIEE", "EXCHANGE_GUMGUM", "EXCHANGE_IMOBILE", "EXCHANGE_IBILLBOARD", "EXCHANGE_IMPROVE_DIGITAL", "EXCHANGE_INDEX", "EXCHANGE_KARGO", "EXCHANGE_MICROAD", "EXCHANGE_MOPUB", "EXCHANGE_NEND", "EXCHANGE_ONE_BY_AOL_DISPLAY", "EXCHANGE_ONE_BY_AOL_MOBILE", "EXCHANGE_ONE_BY_AOL_VIDEO", "EXCHANGE_OOYALA", "EXCHANGE_OPENX", "EXCHANGE_PERMODO", "EXCHANGE_PLATFORMONE", "EXCHANGE_PLATFORMID", "EXCHANGE_PUBMATIC", "EXCHANGE_PULSEPOINT", "EXCHANGE_REVENUEMAX", "EXCHANGE_RUBICON", "EXCHANGE_SMARTCLIP", "EXCHANGE_SMARTRTB", "EXCHANGE_SMARTSTREAMTV", "EXCHANGE_SOVRN", "EXCHANGE_SPOTXCHANGE", "EXCHANGE_STROER", "EXCHANGE_TEADSTV", "EXCHANGE_TELARIA", "EXCHANGE_TVN", "EXCHANGE_UNITED", "EXCHANGE_YIELDLAB", "EXCHANGE_YIELDMO", "EXCHANGE_UNRULYX", "EXCHANGE_OPEN8", "EXCHANGE_TRITON", "EXCHANGE_TRIPLELIFT", "EXCHANGE_TABOOLA", "EXCHANGE_INMOBI", "EXCHANGE_SMAATO", "EXCHANGE_AJA", "EXCHANGE_SUPERSHIP", "EXCHANGE_NEXSTAR_DIGITAL", "EXCHANGE_WAZE", "EXCHANGE_SOUNDCAST", "EXCHANGE_SHARETHROUGH", "EXCHANGE_FYBER", "EXCHANGE_RED_FOR_PUBLISHERS", "EXCHANGE_MEDIANET", "EXCHANGE_TAPJOY", "EXCHANGE_VISTAR", "EXCHANGE_DAX", "EXCHANGE_JCD", "EXCHANGE_PLACE_EXCHANGE", "EXCHANGE_APPLOVIN", "EXCHANGE_CONNATIX", "EXCHANGE_RESET_DIGITAL", "EXCHANGE_HIVESTACK", "EXCHANGE_APPLOVIN_GBID", "EXCHANGE_FYBER_GBID", "EXCHANGE_UNITY_GBID", "EXCHANGE_CHARTBOOST_GBID", "EXCHANGE_ADMOST_GBID", "EXCHANGE_TOPON_GBID"]  # noqa: E501
        if exchange not in allowed_values:
            raise ValueError(
                "Invalid value for `exchange` ({0}), must be one of {1}"
                .format(exchange, allowed_values)
            )

        self._exchange = exchange

    @property
    def guaranteed_order_id(self):
        """Gets the guaranteed_order_id of this GuaranteedOrder.

        Output only. The unique identifier of the guaranteed order. The guaranteed order IDs have the format `{exchange}-{legacy_guaranteed_order_id}`.

        :return: The guaranteed_order_id of this GuaranteedOrder.
        :rtype: str
        """
        return self._guaranteed_order_id

    @guaranteed_order_id.setter
    def guaranteed_order_id(self, guaranteed_order_id):
        """Sets the guaranteed_order_id of this GuaranteedOrder.

        Output only. The unique identifier of the guaranteed order. The guaranteed order IDs have the format `{exchange}-{legacy_guaranteed_order_id}`.

        :param guaranteed_order_id: The guaranteed_order_id of this GuaranteedOrder.
        :type guaranteed_order_id: str
        """

        self._guaranteed_order_id = guaranteed_order_id

    @property
    def legacy_guaranteed_order_id(self):
        """Gets the legacy_guaranteed_order_id of this GuaranteedOrder.

        Output only. The legacy ID of the guaranteed order. Assigned by the original exchange. The legacy ID is unique within one exchange, but is not guaranteed to be unique across all guaranteed orders. This ID is used in SDF and UI.

        :return: The legacy_guaranteed_order_id of this GuaranteedOrder.
        :rtype: str
        """
        return self._legacy_guaranteed_order_id

    @legacy_guaranteed_order_id.setter
    def legacy_guaranteed_order_id(self, legacy_guaranteed_order_id):
        """Sets the legacy_guaranteed_order_id of this GuaranteedOrder.

        Output only. The legacy ID of the guaranteed order. Assigned by the original exchange. The legacy ID is unique within one exchange, but is not guaranteed to be unique across all guaranteed orders. This ID is used in SDF and UI.

        :param legacy_guaranteed_order_id: The legacy_guaranteed_order_id of this GuaranteedOrder.
        :type legacy_guaranteed_order_id: str
        """

        self._legacy_guaranteed_order_id = legacy_guaranteed_order_id

    @property
    def name(self):
        """Gets the name of this GuaranteedOrder.

        Output only. The resource name of the guaranteed order.

        :return: The name of this GuaranteedOrder.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GuaranteedOrder.

        Output only. The resource name of the guaranteed order.

        :param name: The name of this GuaranteedOrder.
        :type name: str
        """

        self._name = name

    @property
    def publisher_name(self):
        """Gets the publisher_name of this GuaranteedOrder.

        Required. The publisher name of the guaranteed order. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :return: The publisher_name of this GuaranteedOrder.
        :rtype: str
        """
        return self._publisher_name

    @publisher_name.setter
    def publisher_name(self, publisher_name):
        """Sets the publisher_name of this GuaranteedOrder.

        Required. The publisher name of the guaranteed order. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :param publisher_name: The publisher_name of this GuaranteedOrder.
        :type publisher_name: str
        """

        self._publisher_name = publisher_name

    @property
    def read_access_inherited(self):
        """Gets the read_access_inherited of this GuaranteedOrder.

        Whether all advertisers of read_write_partner_id have read access to the guaranteed order. Only applicable if read_write_partner_id is set. If True, overrides read_advertiser_ids.

        :return: The read_access_inherited of this GuaranteedOrder.
        :rtype: bool
        """
        return self._read_access_inherited

    @read_access_inherited.setter
    def read_access_inherited(self, read_access_inherited):
        """Sets the read_access_inherited of this GuaranteedOrder.

        Whether all advertisers of read_write_partner_id have read access to the guaranteed order. Only applicable if read_write_partner_id is set. If True, overrides read_advertiser_ids.

        :param read_access_inherited: The read_access_inherited of this GuaranteedOrder.
        :type read_access_inherited: bool
        """

        self._read_access_inherited = read_access_inherited

    @property
    def read_advertiser_ids(self):
        """Gets the read_advertiser_ids of this GuaranteedOrder.

        The IDs of advertisers with read access to the guaranteed order. This field must not include the advertiser assigned to read_write_advertiser_id if it is set. All advertisers in this field must belong to read_write_partner_id or the same partner as read_write_advertiser_id.

        :return: The read_advertiser_ids of this GuaranteedOrder.
        :rtype: List[str]
        """
        return self._read_advertiser_ids

    @read_advertiser_ids.setter
    def read_advertiser_ids(self, read_advertiser_ids):
        """Sets the read_advertiser_ids of this GuaranteedOrder.

        The IDs of advertisers with read access to the guaranteed order. This field must not include the advertiser assigned to read_write_advertiser_id if it is set. All advertisers in this field must belong to read_write_partner_id or the same partner as read_write_advertiser_id.

        :param read_advertiser_ids: The read_advertiser_ids of this GuaranteedOrder.
        :type read_advertiser_ids: List[str]
        """

        self._read_advertiser_ids = read_advertiser_ids

    @property
    def read_write_advertiser_id(self):
        """Gets the read_write_advertiser_id of this GuaranteedOrder.

        The advertiser with read/write access to the guaranteed order. This is also the default advertiser of the guaranteed order.

        :return: The read_write_advertiser_id of this GuaranteedOrder.
        :rtype: str
        """
        return self._read_write_advertiser_id

    @read_write_advertiser_id.setter
    def read_write_advertiser_id(self, read_write_advertiser_id):
        """Sets the read_write_advertiser_id of this GuaranteedOrder.

        The advertiser with read/write access to the guaranteed order. This is also the default advertiser of the guaranteed order.

        :param read_write_advertiser_id: The read_write_advertiser_id of this GuaranteedOrder.
        :type read_write_advertiser_id: str
        """

        self._read_write_advertiser_id = read_write_advertiser_id

    @property
    def read_write_partner_id(self):
        """Gets the read_write_partner_id of this GuaranteedOrder.

        The partner with read/write access to the guaranteed order.

        :return: The read_write_partner_id of this GuaranteedOrder.
        :rtype: str
        """
        return self._read_write_partner_id

    @read_write_partner_id.setter
    def read_write_partner_id(self, read_write_partner_id):
        """Sets the read_write_partner_id of this GuaranteedOrder.

        The partner with read/write access to the guaranteed order.

        :param read_write_partner_id: The read_write_partner_id of this GuaranteedOrder.
        :type read_write_partner_id: str
        """

        self._read_write_partner_id = read_write_partner_id

    @property
    def status(self):
        """Gets the status of this GuaranteedOrder.


        :return: The status of this GuaranteedOrder.
        :rtype: GuaranteedOrderStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GuaranteedOrder.


        :param status: The status of this GuaranteedOrder.
        :type status: GuaranteedOrderStatus
        """

        self._status = status

    @property
    def update_time(self):
        """Gets the update_time of this GuaranteedOrder.

        Output only. The timestamp when the guaranteed order was last updated. Assigned by the system.

        :return: The update_time of this GuaranteedOrder.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GuaranteedOrder.

        Output only. The timestamp when the guaranteed order was last updated. Assigned by the system.

        :param update_time: The update_time of this GuaranteedOrder.
        :type update_time: str
        """

        self._update_time = update_time
