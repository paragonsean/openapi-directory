# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Adloox(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, excluded_adloox_categories: List[str]=None):
        """Adloox - a model defined in OpenAPI

        :param excluded_adloox_categories: The excluded_adloox_categories of this Adloox.
        """
        self.openapi_types = {
            'excluded_adloox_categories': List[str]
        }

        self.attribute_map = {
            'excluded_adloox_categories': 'excludedAdlooxCategories'
        }

        self._excluded_adloox_categories = excluded_adloox_categories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Adloox':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Adloox of this Adloox.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def excluded_adloox_categories(self):
        """Gets the excluded_adloox_categories of this Adloox.

        Adloox's brand safety settings.

        :return: The excluded_adloox_categories of this Adloox.
        :rtype: List[str]
        """
        return self._excluded_adloox_categories

    @excluded_adloox_categories.setter
    def excluded_adloox_categories(self, excluded_adloox_categories):
        """Sets the excluded_adloox_categories of this Adloox.

        Adloox's brand safety settings.

        :param excluded_adloox_categories: The excluded_adloox_categories of this Adloox.
        :type excluded_adloox_categories: List[str]
        """
        allowed_values = ["ADLOOX_UNSPECIFIED", "ADULT_CONTENT_HARD", "ADULT_CONTENT_SOFT", "ILLEGAL_CONTENT", "BORDERLINE_CONTENT", "DISCRIMINATORY_CONTENT", "VIOLENT_CONTENT_WEAPONS", "LOW_VIEWABILITY_DOMAINS", "FRAUD"]  # noqa: E501
        if not set(excluded_adloox_categories).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `excluded_adloox_categories` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(excluded_adloox_categories) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._excluded_adloox_categories = excluded_adloox_categories
