# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_range import DateRange
from openapi_server.models.prisma_config import PrismaConfig
from openapi_server import util


class CampaignBudget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, budget_amount_micros: str=None, budget_id: str=None, budget_unit: str=None, date_range: DateRange=None, display_name: str=None, external_budget_id: str=None, external_budget_source: str=None, invoice_grouping_id: str=None, prisma_config: PrismaConfig=None):
        """CampaignBudget - a model defined in OpenAPI

        :param budget_amount_micros: The budget_amount_micros of this CampaignBudget.
        :param budget_id: The budget_id of this CampaignBudget.
        :param budget_unit: The budget_unit of this CampaignBudget.
        :param date_range: The date_range of this CampaignBudget.
        :param display_name: The display_name of this CampaignBudget.
        :param external_budget_id: The external_budget_id of this CampaignBudget.
        :param external_budget_source: The external_budget_source of this CampaignBudget.
        :param invoice_grouping_id: The invoice_grouping_id of this CampaignBudget.
        :param prisma_config: The prisma_config of this CampaignBudget.
        """
        self.openapi_types = {
            'budget_amount_micros': str,
            'budget_id': str,
            'budget_unit': str,
            'date_range': DateRange,
            'display_name': str,
            'external_budget_id': str,
            'external_budget_source': str,
            'invoice_grouping_id': str,
            'prisma_config': PrismaConfig
        }

        self.attribute_map = {
            'budget_amount_micros': 'budgetAmountMicros',
            'budget_id': 'budgetId',
            'budget_unit': 'budgetUnit',
            'date_range': 'dateRange',
            'display_name': 'displayName',
            'external_budget_id': 'externalBudgetId',
            'external_budget_source': 'externalBudgetSource',
            'invoice_grouping_id': 'invoiceGroupingId',
            'prisma_config': 'prismaConfig'
        }

        self._budget_amount_micros = budget_amount_micros
        self._budget_id = budget_id
        self._budget_unit = budget_unit
        self._date_range = date_range
        self._display_name = display_name
        self._external_budget_id = external_budget_id
        self._external_budget_source = external_budget_source
        self._invoice_grouping_id = invoice_grouping_id
        self._prisma_config = prisma_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CampaignBudget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CampaignBudget of this CampaignBudget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def budget_amount_micros(self):
        """Gets the budget_amount_micros of this CampaignBudget.

        Required. The total amount the linked insertion order segments can budget. The amount is in micros. Must be greater than 0. For example, 500000000 represents 500 standard units of the currency.

        :return: The budget_amount_micros of this CampaignBudget.
        :rtype: str
        """
        return self._budget_amount_micros

    @budget_amount_micros.setter
    def budget_amount_micros(self, budget_amount_micros):
        """Sets the budget_amount_micros of this CampaignBudget.

        Required. The total amount the linked insertion order segments can budget. The amount is in micros. Must be greater than 0. For example, 500000000 represents 500 standard units of the currency.

        :param budget_amount_micros: The budget_amount_micros of this CampaignBudget.
        :type budget_amount_micros: str
        """

        self._budget_amount_micros = budget_amount_micros

    @property
    def budget_id(self):
        """Gets the budget_id of this CampaignBudget.

        The unique ID of the campaign budget. Assigned by the system. Do not set for new budgets. Must be included when updating or adding budgets to campaign_budgets. Otherwise, a new ID will be generated and assigned.

        :return: The budget_id of this CampaignBudget.
        :rtype: str
        """
        return self._budget_id

    @budget_id.setter
    def budget_id(self, budget_id):
        """Sets the budget_id of this CampaignBudget.

        The unique ID of the campaign budget. Assigned by the system. Do not set for new budgets. Must be included when updating or adding budgets to campaign_budgets. Otherwise, a new ID will be generated and assigned.

        :param budget_id: The budget_id of this CampaignBudget.
        :type budget_id: str
        """

        self._budget_id = budget_id

    @property
    def budget_unit(self):
        """Gets the budget_unit of this CampaignBudget.

        Required. Immutable. Specifies whether the budget is measured in currency or impressions.

        :return: The budget_unit of this CampaignBudget.
        :rtype: str
        """
        return self._budget_unit

    @budget_unit.setter
    def budget_unit(self, budget_unit):
        """Sets the budget_unit of this CampaignBudget.

        Required. Immutable. Specifies whether the budget is measured in currency or impressions.

        :param budget_unit: The budget_unit of this CampaignBudget.
        :type budget_unit: str
        """
        allowed_values = ["BUDGET_UNIT_UNSPECIFIED", "BUDGET_UNIT_CURRENCY", "BUDGET_UNIT_IMPRESSIONS"]  # noqa: E501
        if budget_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `budget_unit` ({0}), must be one of {1}"
                .format(budget_unit, allowed_values)
            )

        self._budget_unit = budget_unit

    @property
    def date_range(self):
        """Gets the date_range of this CampaignBudget.


        :return: The date_range of this CampaignBudget.
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this CampaignBudget.


        :param date_range: The date_range of this CampaignBudget.
        :type date_range: DateRange
        """

        self._date_range = date_range

    @property
    def display_name(self):
        """Gets the display_name of this CampaignBudget.

        Required. The display name of the budget. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :return: The display_name of this CampaignBudget.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CampaignBudget.

        Required. The display name of the budget. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :param display_name: The display_name of this CampaignBudget.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def external_budget_id(self):
        """Gets the external_budget_id of this CampaignBudget.

        Immutable. The ID identifying this budget to the external source. If this field is set and the invoice detail level of the corresponding billing profile is set to \"Budget level PO\", all impressions served against this budget will include this ID on the invoice. Must be unique under the campaign.

        :return: The external_budget_id of this CampaignBudget.
        :rtype: str
        """
        return self._external_budget_id

    @external_budget_id.setter
    def external_budget_id(self, external_budget_id):
        """Sets the external_budget_id of this CampaignBudget.

        Immutable. The ID identifying this budget to the external source. If this field is set and the invoice detail level of the corresponding billing profile is set to \"Budget level PO\", all impressions served against this budget will include this ID on the invoice. Must be unique under the campaign.

        :param external_budget_id: The external_budget_id of this CampaignBudget.
        :type external_budget_id: str
        """

        self._external_budget_id = external_budget_id

    @property
    def external_budget_source(self):
        """Gets the external_budget_source of this CampaignBudget.

        Required. The external source of the budget.

        :return: The external_budget_source of this CampaignBudget.
        :rtype: str
        """
        return self._external_budget_source

    @external_budget_source.setter
    def external_budget_source(self, external_budget_source):
        """Sets the external_budget_source of this CampaignBudget.

        Required. The external source of the budget.

        :param external_budget_source: The external_budget_source of this CampaignBudget.
        :type external_budget_source: str
        """
        allowed_values = ["EXTERNAL_BUDGET_SOURCE_UNSPECIFIED", "EXTERNAL_BUDGET_SOURCE_NONE", "EXTERNAL_BUDGET_SOURCE_MEDIA_OCEAN"]  # noqa: E501
        if external_budget_source not in allowed_values:
            raise ValueError(
                "Invalid value for `external_budget_source` ({0}), must be one of {1}"
                .format(external_budget_source, allowed_values)
            )

        self._external_budget_source = external_budget_source

    @property
    def invoice_grouping_id(self):
        """Gets the invoice_grouping_id of this CampaignBudget.

        Immutable. The ID used to group budgets to be included the same invoice. If this field is set and the invoice level of the corresponding billing profile is set to \"Budget invoice grouping ID\", all external_budget_id sharing the same invoice_grouping_id will be grouped in the same invoice.

        :return: The invoice_grouping_id of this CampaignBudget.
        :rtype: str
        """
        return self._invoice_grouping_id

    @invoice_grouping_id.setter
    def invoice_grouping_id(self, invoice_grouping_id):
        """Sets the invoice_grouping_id of this CampaignBudget.

        Immutable. The ID used to group budgets to be included the same invoice. If this field is set and the invoice level of the corresponding billing profile is set to \"Budget invoice grouping ID\", all external_budget_id sharing the same invoice_grouping_id will be grouped in the same invoice.

        :param invoice_grouping_id: The invoice_grouping_id of this CampaignBudget.
        :type invoice_grouping_id: str
        """

        self._invoice_grouping_id = invoice_grouping_id

    @property
    def prisma_config(self):
        """Gets the prisma_config of this CampaignBudget.


        :return: The prisma_config of this CampaignBudget.
        :rtype: PrismaConfig
        """
        return self._prisma_config

    @prisma_config.setter
    def prisma_config(self, prisma_config):
        """Sets the prisma_config of this CampaignBudget.


        :param prisma_config: The prisma_config of this CampaignBudget.
        :type prisma_config: PrismaConfig
        """

        self._prisma_config = prisma_config
