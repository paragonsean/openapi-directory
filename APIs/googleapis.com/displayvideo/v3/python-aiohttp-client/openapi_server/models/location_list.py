# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertiser_id: str=None, display_name: str=None, location_list_id: str=None, location_type: str=None, name: str=None):
        """LocationList - a model defined in OpenAPI

        :param advertiser_id: The advertiser_id of this LocationList.
        :param display_name: The display_name of this LocationList.
        :param location_list_id: The location_list_id of this LocationList.
        :param location_type: The location_type of this LocationList.
        :param name: The name of this LocationList.
        """
        self.openapi_types = {
            'advertiser_id': str,
            'display_name': str,
            'location_list_id': str,
            'location_type': str,
            'name': str
        }

        self.attribute_map = {
            'advertiser_id': 'advertiserId',
            'display_name': 'displayName',
            'location_list_id': 'locationListId',
            'location_type': 'locationType',
            'name': 'name'
        }

        self._advertiser_id = advertiser_id
        self._display_name = display_name
        self._location_list_id = location_list_id
        self._location_type = location_type
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationList of this LocationList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this LocationList.

        Required. Immutable. The unique ID of the advertiser the location list belongs to.

        :return: The advertiser_id of this LocationList.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this LocationList.

        Required. Immutable. The unique ID of the advertiser the location list belongs to.

        :param advertiser_id: The advertiser_id of this LocationList.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def display_name(self):
        """Gets the display_name of this LocationList.

        Required. The display name of the location list. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :return: The display_name of this LocationList.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this LocationList.

        Required. The display name of the location list. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :param display_name: The display_name of this LocationList.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def location_list_id(self):
        """Gets the location_list_id of this LocationList.

        Output only. The unique ID of the location list. Assigned by the system.

        :return: The location_list_id of this LocationList.
        :rtype: str
        """
        return self._location_list_id

    @location_list_id.setter
    def location_list_id(self, location_list_id):
        """Sets the location_list_id of this LocationList.

        Output only. The unique ID of the location list. Assigned by the system.

        :param location_list_id: The location_list_id of this LocationList.
        :type location_list_id: str
        """

        self._location_list_id = location_list_id

    @property
    def location_type(self):
        """Gets the location_type of this LocationList.

        Required. Immutable. The type of location. All locations in the list will share this type.

        :return: The location_type of this LocationList.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this LocationList.

        Required. Immutable. The type of location. All locations in the list will share this type.

        :param location_type: The location_type of this LocationList.
        :type location_type: str
        """
        allowed_values = ["TARGETING_LOCATION_TYPE_UNSPECIFIED", "TARGETING_LOCATION_TYPE_PROXIMITY", "TARGETING_LOCATION_TYPE_REGIONAL"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"
                .format(location_type, allowed_values)
            )

        self._location_type = location_type

    @property
    def name(self):
        """Gets the name of this LocationList.

        Output only. The resource name of the location list.

        :return: The name of this LocationList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocationList.

        Output only. The resource name of the location list.

        :param name: The name of this LocationList.
        :type name: str
        """

        self._name = name
