# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Kpi(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kpi_amount_micros: str=None, kpi_percentage_micros: str=None, kpi_string: str=None, kpi_type: str=None):
        """Kpi - a model defined in OpenAPI

        :param kpi_amount_micros: The kpi_amount_micros of this Kpi.
        :param kpi_percentage_micros: The kpi_percentage_micros of this Kpi.
        :param kpi_string: The kpi_string of this Kpi.
        :param kpi_type: The kpi_type of this Kpi.
        """
        self.openapi_types = {
            'kpi_amount_micros': str,
            'kpi_percentage_micros': str,
            'kpi_string': str,
            'kpi_type': str
        }

        self.attribute_map = {
            'kpi_amount_micros': 'kpiAmountMicros',
            'kpi_percentage_micros': 'kpiPercentageMicros',
            'kpi_string': 'kpiString',
            'kpi_type': 'kpiType'
        }

        self._kpi_amount_micros = kpi_amount_micros
        self._kpi_percentage_micros = kpi_percentage_micros
        self._kpi_string = kpi_string
        self._kpi_type = kpi_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Kpi':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Kpi of this Kpi.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kpi_amount_micros(self):
        """Gets the kpi_amount_micros of this Kpi.

        The goal amount, in micros of the advertiser's currency. Applicable when kpi_type is one of: * `KPI_TYPE_CPM` * `KPI_TYPE_CPC` * `KPI_TYPE_CPA` * `KPI_TYPE_CPIAVC` * `KPI_TYPE_VCPM` For example: 1500000 represents 1.5 standard units of the currency.

        :return: The kpi_amount_micros of this Kpi.
        :rtype: str
        """
        return self._kpi_amount_micros

    @kpi_amount_micros.setter
    def kpi_amount_micros(self, kpi_amount_micros):
        """Sets the kpi_amount_micros of this Kpi.

        The goal amount, in micros of the advertiser's currency. Applicable when kpi_type is one of: * `KPI_TYPE_CPM` * `KPI_TYPE_CPC` * `KPI_TYPE_CPA` * `KPI_TYPE_CPIAVC` * `KPI_TYPE_VCPM` For example: 1500000 represents 1.5 standard units of the currency.

        :param kpi_amount_micros: The kpi_amount_micros of this Kpi.
        :type kpi_amount_micros: str
        """

        self._kpi_amount_micros = kpi_amount_micros

    @property
    def kpi_percentage_micros(self):
        """Gets the kpi_percentage_micros of this Kpi.

        The decimal representation of the goal percentage in micros. Applicable when kpi_type is one of: * `KPI_TYPE_CTR` * `KPI_TYPE_VIEWABILITY` * `KPI_TYPE_CLICK_CVR` * `KPI_TYPE_IMPRESSION_CVR` * `KPI_TYPE_VTR` * `KPI_TYPE_AUDIO_COMPLETION_RATE` * `KPI_TYPE_VIDEO_COMPLETION_RATE` For example: 70000 represents 7% (decimal 0.07).

        :return: The kpi_percentage_micros of this Kpi.
        :rtype: str
        """
        return self._kpi_percentage_micros

    @kpi_percentage_micros.setter
    def kpi_percentage_micros(self, kpi_percentage_micros):
        """Sets the kpi_percentage_micros of this Kpi.

        The decimal representation of the goal percentage in micros. Applicable when kpi_type is one of: * `KPI_TYPE_CTR` * `KPI_TYPE_VIEWABILITY` * `KPI_TYPE_CLICK_CVR` * `KPI_TYPE_IMPRESSION_CVR` * `KPI_TYPE_VTR` * `KPI_TYPE_AUDIO_COMPLETION_RATE` * `KPI_TYPE_VIDEO_COMPLETION_RATE` For example: 70000 represents 7% (decimal 0.07).

        :param kpi_percentage_micros: The kpi_percentage_micros of this Kpi.
        :type kpi_percentage_micros: str
        """

        self._kpi_percentage_micros = kpi_percentage_micros

    @property
    def kpi_string(self):
        """Gets the kpi_string of this Kpi.

        A KPI string, which can be empty. Must be UTF-8 encoded with a length of no more than 100 characters. Applicable when kpi_type is `KPI_TYPE_OTHER`.

        :return: The kpi_string of this Kpi.
        :rtype: str
        """
        return self._kpi_string

    @kpi_string.setter
    def kpi_string(self, kpi_string):
        """Sets the kpi_string of this Kpi.

        A KPI string, which can be empty. Must be UTF-8 encoded with a length of no more than 100 characters. Applicable when kpi_type is `KPI_TYPE_OTHER`.

        :param kpi_string: The kpi_string of this Kpi.
        :type kpi_string: str
        """

        self._kpi_string = kpi_string

    @property
    def kpi_type(self):
        """Gets the kpi_type of this Kpi.

        Required. The type of KPI.

        :return: The kpi_type of this Kpi.
        :rtype: str
        """
        return self._kpi_type

    @kpi_type.setter
    def kpi_type(self, kpi_type):
        """Sets the kpi_type of this Kpi.

        Required. The type of KPI.

        :param kpi_type: The kpi_type of this Kpi.
        :type kpi_type: str
        """
        allowed_values = ["KPI_TYPE_UNSPECIFIED", "KPI_TYPE_CPM", "KPI_TYPE_CPC", "KPI_TYPE_CPA", "KPI_TYPE_CTR", "KPI_TYPE_VIEWABILITY", "KPI_TYPE_CPIAVC", "KPI_TYPE_CPE", "KPI_TYPE_CLICK_CVR", "KPI_TYPE_IMPRESSION_CVR", "KPI_TYPE_VCPM", "KPI_TYPE_VTR", "KPI_TYPE_AUDIO_COMPLETION_RATE", "KPI_TYPE_VIDEO_COMPLETION_RATE", "KPI_TYPE_OTHER"]  # noqa: E501
        if kpi_type not in allowed_values:
            raise ValueError(
                "Invalid value for `kpi_type` ({0}), must be one of {1}"
                .format(kpi_type, allowed_values)
            )

        self._kpi_type = kpi_type
