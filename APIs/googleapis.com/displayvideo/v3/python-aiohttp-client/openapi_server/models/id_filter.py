# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_group_ad_ids: List[str]=None, ad_group_ids: List[str]=None, campaign_ids: List[str]=None, insertion_order_ids: List[str]=None, line_item_ids: List[str]=None, media_product_ids: List[str]=None):
        """IdFilter - a model defined in OpenAPI

        :param ad_group_ad_ids: The ad_group_ad_ids of this IdFilter.
        :param ad_group_ids: The ad_group_ids of this IdFilter.
        :param campaign_ids: The campaign_ids of this IdFilter.
        :param insertion_order_ids: The insertion_order_ids of this IdFilter.
        :param line_item_ids: The line_item_ids of this IdFilter.
        :param media_product_ids: The media_product_ids of this IdFilter.
        """
        self.openapi_types = {
            'ad_group_ad_ids': List[str],
            'ad_group_ids': List[str],
            'campaign_ids': List[str],
            'insertion_order_ids': List[str],
            'line_item_ids': List[str],
            'media_product_ids': List[str]
        }

        self.attribute_map = {
            'ad_group_ad_ids': 'adGroupAdIds',
            'ad_group_ids': 'adGroupIds',
            'campaign_ids': 'campaignIds',
            'insertion_order_ids': 'insertionOrderIds',
            'line_item_ids': 'lineItemIds',
            'media_product_ids': 'mediaProductIds'
        }

        self._ad_group_ad_ids = ad_group_ad_ids
        self._ad_group_ids = ad_group_ids
        self._campaign_ids = campaign_ids
        self._insertion_order_ids = insertion_order_ids
        self._line_item_ids = line_item_ids
        self._media_product_ids = media_product_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdFilter of this IdFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_group_ad_ids(self):
        """Gets the ad_group_ad_ids of this IdFilter.

        YouTube Ads to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.

        :return: The ad_group_ad_ids of this IdFilter.
        :rtype: List[str]
        """
        return self._ad_group_ad_ids

    @ad_group_ad_ids.setter
    def ad_group_ad_ids(self, ad_group_ad_ids):
        """Sets the ad_group_ad_ids of this IdFilter.

        YouTube Ads to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.

        :param ad_group_ad_ids: The ad_group_ad_ids of this IdFilter.
        :type ad_group_ad_ids: List[str]
        """

        self._ad_group_ad_ids = ad_group_ad_ids

    @property
    def ad_group_ids(self):
        """Gets the ad_group_ids of this IdFilter.

        YouTube Ad Groups to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.

        :return: The ad_group_ids of this IdFilter.
        :rtype: List[str]
        """
        return self._ad_group_ids

    @ad_group_ids.setter
    def ad_group_ids(self, ad_group_ids):
        """Sets the ad_group_ids of this IdFilter.

        YouTube Ad Groups to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.

        :param ad_group_ids: The ad_group_ids of this IdFilter.
        :type ad_group_ids: List[str]
        """

        self._ad_group_ids = ad_group_ids

    @property
    def campaign_ids(self):
        """Gets the campaign_ids of this IdFilter.

        Campaigns to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.

        :return: The campaign_ids of this IdFilter.
        :rtype: List[str]
        """
        return self._campaign_ids

    @campaign_ids.setter
    def campaign_ids(self, campaign_ids):
        """Sets the campaign_ids of this IdFilter.

        Campaigns to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.

        :param campaign_ids: The campaign_ids of this IdFilter.
        :type campaign_ids: List[str]
        """

        self._campaign_ids = campaign_ids

    @property
    def insertion_order_ids(self):
        """Gets the insertion_order_ids of this IdFilter.

        Insertion Orders to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.

        :return: The insertion_order_ids of this IdFilter.
        :rtype: List[str]
        """
        return self._insertion_order_ids

    @insertion_order_ids.setter
    def insertion_order_ids(self, insertion_order_ids):
        """Sets the insertion_order_ids of this IdFilter.

        Insertion Orders to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.

        :param insertion_order_ids: The insertion_order_ids of this IdFilter.
        :type insertion_order_ids: List[str]
        """

        self._insertion_order_ids = insertion_order_ids

    @property
    def line_item_ids(self):
        """Gets the line_item_ids of this IdFilter.

        Line Items to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.

        :return: The line_item_ids of this IdFilter.
        :rtype: List[str]
        """
        return self._line_item_ids

    @line_item_ids.setter
    def line_item_ids(self, line_item_ids):
        """Sets the line_item_ids of this IdFilter.

        Line Items to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.

        :param line_item_ids: The line_item_ids of this IdFilter.
        :type line_item_ids: List[str]
        """

        self._line_item_ids = line_item_ids

    @property
    def media_product_ids(self):
        """Gets the media_product_ids of this IdFilter.

        Media Products to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.

        :return: The media_product_ids of this IdFilter.
        :rtype: List[str]
        """
        return self._media_product_ids

    @media_product_ids.setter
    def media_product_ids(self, media_product_ids):
        """Sets the media_product_ids of this IdFilter.

        Media Products to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.

        :param media_product_ids: The media_product_ids of this IdFilter.
        :type media_product_ids: List[str]
        """

        self._media_product_ids = media_product_ids
