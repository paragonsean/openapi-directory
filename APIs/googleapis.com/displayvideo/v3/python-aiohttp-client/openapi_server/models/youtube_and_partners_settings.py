# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.frequency_cap import FrequencyCap
from openapi_server.models.target_frequency import TargetFrequency
from openapi_server.models.third_party_measurement_configs import ThirdPartyMeasurementConfigs
from openapi_server.models.video_ad_sequence_settings import VideoAdSequenceSettings
from openapi_server.models.youtube_and_partners_inventory_source_config import YoutubeAndPartnersInventorySourceConfig
from openapi_server import util


class YoutubeAndPartnersSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_category: str=None, effective_content_category: str=None, inventory_source_settings: YoutubeAndPartnersInventorySourceConfig=None, lead_form_id: str=None, linked_merchant_id: str=None, related_video_ids: List[str]=None, target_frequency: TargetFrequency=None, third_party_measurement_configs: ThirdPartyMeasurementConfigs=None, video_ad_sequence_settings: VideoAdSequenceSettings=None, view_frequency_cap: FrequencyCap=None):
        """YoutubeAndPartnersSettings - a model defined in OpenAPI

        :param content_category: The content_category of this YoutubeAndPartnersSettings.
        :param effective_content_category: The effective_content_category of this YoutubeAndPartnersSettings.
        :param inventory_source_settings: The inventory_source_settings of this YoutubeAndPartnersSettings.
        :param lead_form_id: The lead_form_id of this YoutubeAndPartnersSettings.
        :param linked_merchant_id: The linked_merchant_id of this YoutubeAndPartnersSettings.
        :param related_video_ids: The related_video_ids of this YoutubeAndPartnersSettings.
        :param target_frequency: The target_frequency of this YoutubeAndPartnersSettings.
        :param third_party_measurement_configs: The third_party_measurement_configs of this YoutubeAndPartnersSettings.
        :param video_ad_sequence_settings: The video_ad_sequence_settings of this YoutubeAndPartnersSettings.
        :param view_frequency_cap: The view_frequency_cap of this YoutubeAndPartnersSettings.
        """
        self.openapi_types = {
            'content_category': str,
            'effective_content_category': str,
            'inventory_source_settings': YoutubeAndPartnersInventorySourceConfig,
            'lead_form_id': str,
            'linked_merchant_id': str,
            'related_video_ids': List[str],
            'target_frequency': TargetFrequency,
            'third_party_measurement_configs': ThirdPartyMeasurementConfigs,
            'video_ad_sequence_settings': VideoAdSequenceSettings,
            'view_frequency_cap': FrequencyCap
        }

        self.attribute_map = {
            'content_category': 'contentCategory',
            'effective_content_category': 'effectiveContentCategory',
            'inventory_source_settings': 'inventorySourceSettings',
            'lead_form_id': 'leadFormId',
            'linked_merchant_id': 'linkedMerchantId',
            'related_video_ids': 'relatedVideoIds',
            'target_frequency': 'targetFrequency',
            'third_party_measurement_configs': 'thirdPartyMeasurementConfigs',
            'video_ad_sequence_settings': 'videoAdSequenceSettings',
            'view_frequency_cap': 'viewFrequencyCap'
        }

        self._content_category = content_category
        self._effective_content_category = effective_content_category
        self._inventory_source_settings = inventory_source_settings
        self._lead_form_id = lead_form_id
        self._linked_merchant_id = linked_merchant_id
        self._related_video_ids = related_video_ids
        self._target_frequency = target_frequency
        self._third_party_measurement_configs = third_party_measurement_configs
        self._video_ad_sequence_settings = video_ad_sequence_settings
        self._view_frequency_cap = view_frequency_cap

    @classmethod
    def from_dict(cls, dikt: dict) -> 'YoutubeAndPartnersSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The YoutubeAndPartnersSettings of this YoutubeAndPartnersSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_category(self):
        """Gets the content_category of this YoutubeAndPartnersSettings.

        The kind of content on which the YouTube and Partners ads will be shown.

        :return: The content_category of this YoutubeAndPartnersSettings.
        :rtype: str
        """
        return self._content_category

    @content_category.setter
    def content_category(self, content_category):
        """Sets the content_category of this YoutubeAndPartnersSettings.

        The kind of content on which the YouTube and Partners ads will be shown.

        :param content_category: The content_category of this YoutubeAndPartnersSettings.
        :type content_category: str
        """
        allowed_values = ["YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED", "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_STANDARD", "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_EXPANDED", "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_LIMITED"]  # noqa: E501
        if content_category not in allowed_values:
            raise ValueError(
                "Invalid value for `content_category` ({0}), must be one of {1}"
                .format(content_category, allowed_values)
            )

        self._content_category = content_category

    @property
    def effective_content_category(self):
        """Gets the effective_content_category of this YoutubeAndPartnersSettings.

        Output only. The content category which takes effect when serving the line item. When content category is set in both line item and advertiser, the stricter one will take effect when serving the line item.

        :return: The effective_content_category of this YoutubeAndPartnersSettings.
        :rtype: str
        """
        return self._effective_content_category

    @effective_content_category.setter
    def effective_content_category(self, effective_content_category):
        """Sets the effective_content_category of this YoutubeAndPartnersSettings.

        Output only. The content category which takes effect when serving the line item. When content category is set in both line item and advertiser, the stricter one will take effect when serving the line item.

        :param effective_content_category: The effective_content_category of this YoutubeAndPartnersSettings.
        :type effective_content_category: str
        """
        allowed_values = ["YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED", "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_STANDARD", "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_EXPANDED", "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_LIMITED"]  # noqa: E501
        if effective_content_category not in allowed_values:
            raise ValueError(
                "Invalid value for `effective_content_category` ({0}), must be one of {1}"
                .format(effective_content_category, allowed_values)
            )

        self._effective_content_category = effective_content_category

    @property
    def inventory_source_settings(self):
        """Gets the inventory_source_settings of this YoutubeAndPartnersSettings.


        :return: The inventory_source_settings of this YoutubeAndPartnersSettings.
        :rtype: YoutubeAndPartnersInventorySourceConfig
        """
        return self._inventory_source_settings

    @inventory_source_settings.setter
    def inventory_source_settings(self, inventory_source_settings):
        """Sets the inventory_source_settings of this YoutubeAndPartnersSettings.


        :param inventory_source_settings: The inventory_source_settings of this YoutubeAndPartnersSettings.
        :type inventory_source_settings: YoutubeAndPartnersInventorySourceConfig
        """

        self._inventory_source_settings = inventory_source_settings

    @property
    def lead_form_id(self):
        """Gets the lead_form_id of this YoutubeAndPartnersSettings.

        Optional. The ID of the form to generate leads.

        :return: The lead_form_id of this YoutubeAndPartnersSettings.
        :rtype: str
        """
        return self._lead_form_id

    @lead_form_id.setter
    def lead_form_id(self, lead_form_id):
        """Sets the lead_form_id of this YoutubeAndPartnersSettings.

        Optional. The ID of the form to generate leads.

        :param lead_form_id: The lead_form_id of this YoutubeAndPartnersSettings.
        :type lead_form_id: str
        """

        self._lead_form_id = lead_form_id

    @property
    def linked_merchant_id(self):
        """Gets the linked_merchant_id of this YoutubeAndPartnersSettings.

        Optional. The ID of the merchant which is linked to the line item for product feed.

        :return: The linked_merchant_id of this YoutubeAndPartnersSettings.
        :rtype: str
        """
        return self._linked_merchant_id

    @linked_merchant_id.setter
    def linked_merchant_id(self, linked_merchant_id):
        """Sets the linked_merchant_id of this YoutubeAndPartnersSettings.

        Optional. The ID of the merchant which is linked to the line item for product feed.

        :param linked_merchant_id: The linked_merchant_id of this YoutubeAndPartnersSettings.
        :type linked_merchant_id: str
        """

        self._linked_merchant_id = linked_merchant_id

    @property
    def related_video_ids(self):
        """Gets the related_video_ids of this YoutubeAndPartnersSettings.

        Optional. The IDs of the videos appear below the primary video ad when the ad is playing in the YouTube app on mobile devices.

        :return: The related_video_ids of this YoutubeAndPartnersSettings.
        :rtype: List[str]
        """
        return self._related_video_ids

    @related_video_ids.setter
    def related_video_ids(self, related_video_ids):
        """Sets the related_video_ids of this YoutubeAndPartnersSettings.

        Optional. The IDs of the videos appear below the primary video ad when the ad is playing in the YouTube app on mobile devices.

        :param related_video_ids: The related_video_ids of this YoutubeAndPartnersSettings.
        :type related_video_ids: List[str]
        """

        self._related_video_ids = related_video_ids

    @property
    def target_frequency(self):
        """Gets the target_frequency of this YoutubeAndPartnersSettings.


        :return: The target_frequency of this YoutubeAndPartnersSettings.
        :rtype: TargetFrequency
        """
        return self._target_frequency

    @target_frequency.setter
    def target_frequency(self, target_frequency):
        """Sets the target_frequency of this YoutubeAndPartnersSettings.


        :param target_frequency: The target_frequency of this YoutubeAndPartnersSettings.
        :type target_frequency: TargetFrequency
        """

        self._target_frequency = target_frequency

    @property
    def third_party_measurement_configs(self):
        """Gets the third_party_measurement_configs of this YoutubeAndPartnersSettings.


        :return: The third_party_measurement_configs of this YoutubeAndPartnersSettings.
        :rtype: ThirdPartyMeasurementConfigs
        """
        return self._third_party_measurement_configs

    @third_party_measurement_configs.setter
    def third_party_measurement_configs(self, third_party_measurement_configs):
        """Sets the third_party_measurement_configs of this YoutubeAndPartnersSettings.


        :param third_party_measurement_configs: The third_party_measurement_configs of this YoutubeAndPartnersSettings.
        :type third_party_measurement_configs: ThirdPartyMeasurementConfigs
        """

        self._third_party_measurement_configs = third_party_measurement_configs

    @property
    def video_ad_sequence_settings(self):
        """Gets the video_ad_sequence_settings of this YoutubeAndPartnersSettings.


        :return: The video_ad_sequence_settings of this YoutubeAndPartnersSettings.
        :rtype: VideoAdSequenceSettings
        """
        return self._video_ad_sequence_settings

    @video_ad_sequence_settings.setter
    def video_ad_sequence_settings(self, video_ad_sequence_settings):
        """Sets the video_ad_sequence_settings of this YoutubeAndPartnersSettings.


        :param video_ad_sequence_settings: The video_ad_sequence_settings of this YoutubeAndPartnersSettings.
        :type video_ad_sequence_settings: VideoAdSequenceSettings
        """

        self._video_ad_sequence_settings = video_ad_sequence_settings

    @property
    def view_frequency_cap(self):
        """Gets the view_frequency_cap of this YoutubeAndPartnersSettings.


        :return: The view_frequency_cap of this YoutubeAndPartnersSettings.
        :rtype: FrequencyCap
        """
        return self._view_frequency_cap

    @view_frequency_cap.setter
    def view_frequency_cap(self, view_frequency_cap):
        """Sets the view_frequency_cap of this YoutubeAndPartnersSettings.


        :param view_frequency_cap: The view_frequency_cap of this YoutubeAndPartnersSettings.
        :type view_frequency_cap: FrequencyCap
        """

        self._view_frequency_cap = view_frequency_cap
