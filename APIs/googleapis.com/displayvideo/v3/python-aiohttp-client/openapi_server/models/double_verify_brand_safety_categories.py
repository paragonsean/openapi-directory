# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DoubleVerifyBrandSafetyCategories(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avoid_unknown_brand_safety_category: bool=None, avoided_high_severity_categories: List[str]=None, avoided_medium_severity_categories: List[str]=None):
        """DoubleVerifyBrandSafetyCategories - a model defined in OpenAPI

        :param avoid_unknown_brand_safety_category: The avoid_unknown_brand_safety_category of this DoubleVerifyBrandSafetyCategories.
        :param avoided_high_severity_categories: The avoided_high_severity_categories of this DoubleVerifyBrandSafetyCategories.
        :param avoided_medium_severity_categories: The avoided_medium_severity_categories of this DoubleVerifyBrandSafetyCategories.
        """
        self.openapi_types = {
            'avoid_unknown_brand_safety_category': bool,
            'avoided_high_severity_categories': List[str],
            'avoided_medium_severity_categories': List[str]
        }

        self.attribute_map = {
            'avoid_unknown_brand_safety_category': 'avoidUnknownBrandSafetyCategory',
            'avoided_high_severity_categories': 'avoidedHighSeverityCategories',
            'avoided_medium_severity_categories': 'avoidedMediumSeverityCategories'
        }

        self._avoid_unknown_brand_safety_category = avoid_unknown_brand_safety_category
        self._avoided_high_severity_categories = avoided_high_severity_categories
        self._avoided_medium_severity_categories = avoided_medium_severity_categories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DoubleVerifyBrandSafetyCategories':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DoubleVerifyBrandSafetyCategories of this DoubleVerifyBrandSafetyCategories.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avoid_unknown_brand_safety_category(self):
        """Gets the avoid_unknown_brand_safety_category of this DoubleVerifyBrandSafetyCategories.

        Unknown or unrateable.

        :return: The avoid_unknown_brand_safety_category of this DoubleVerifyBrandSafetyCategories.
        :rtype: bool
        """
        return self._avoid_unknown_brand_safety_category

    @avoid_unknown_brand_safety_category.setter
    def avoid_unknown_brand_safety_category(self, avoid_unknown_brand_safety_category):
        """Sets the avoid_unknown_brand_safety_category of this DoubleVerifyBrandSafetyCategories.

        Unknown or unrateable.

        :param avoid_unknown_brand_safety_category: The avoid_unknown_brand_safety_category of this DoubleVerifyBrandSafetyCategories.
        :type avoid_unknown_brand_safety_category: bool
        """

        self._avoid_unknown_brand_safety_category = avoid_unknown_brand_safety_category

    @property
    def avoided_high_severity_categories(self):
        """Gets the avoided_high_severity_categories of this DoubleVerifyBrandSafetyCategories.

        Brand safety high severity avoidance categories.

        :return: The avoided_high_severity_categories of this DoubleVerifyBrandSafetyCategories.
        :rtype: List[str]
        """
        return self._avoided_high_severity_categories

    @avoided_high_severity_categories.setter
    def avoided_high_severity_categories(self, avoided_high_severity_categories):
        """Sets the avoided_high_severity_categories of this DoubleVerifyBrandSafetyCategories.

        Brand safety high severity avoidance categories.

        :param avoided_high_severity_categories: The avoided_high_severity_categories of this DoubleVerifyBrandSafetyCategories.
        :type avoided_high_severity_categories: List[str]
        """
        allowed_values = ["HIGHER_SEVERITY_UNSPECIFIED", "ADULT_CONTENT_PORNOGRAPHY", "COPYRIGHT_INFRINGEMENT", "SUBSTANCE_ABUSE", "GRAPHIC_VIOLENCE_WEAPONS", "HATE_PROFANITY", "CRIMINAL_SKILLS", "NUISANCE_INCENTIVIZED_MALWARE_CLUTTER"]  # noqa: E501
        if not set(avoided_high_severity_categories).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `avoided_high_severity_categories` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(avoided_high_severity_categories) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._avoided_high_severity_categories = avoided_high_severity_categories

    @property
    def avoided_medium_severity_categories(self):
        """Gets the avoided_medium_severity_categories of this DoubleVerifyBrandSafetyCategories.

        Brand safety medium severity avoidance categories.

        :return: The avoided_medium_severity_categories of this DoubleVerifyBrandSafetyCategories.
        :rtype: List[str]
        """
        return self._avoided_medium_severity_categories

    @avoided_medium_severity_categories.setter
    def avoided_medium_severity_categories(self, avoided_medium_severity_categories):
        """Sets the avoided_medium_severity_categories of this DoubleVerifyBrandSafetyCategories.

        Brand safety medium severity avoidance categories.

        :param avoided_medium_severity_categories: The avoided_medium_severity_categories of this DoubleVerifyBrandSafetyCategories.
        :type avoided_medium_severity_categories: List[str]
        """
        allowed_values = ["MEDIUM_SEVERITY_UNSPECIFIED", "AD_SERVERS", "ADULT_CONTENT_SWIMSUIT", "ALTERNATIVE_LIFESTYLES", "CELEBRITY_GOSSIP", "GAMBLING", "OCCULT", "SEX_EDUCATION", "DISASTER_AVIATION", "DISASTER_MAN_MADE", "DISASTER_NATURAL", "DISASTER_TERRORIST_EVENTS", "DISASTER_VEHICLE", "ALCOHOL", "SMOKING", "NEGATIVE_NEWS_FINANCIAL", "NON_ENGLISH", "PARKING_PAGE", "UNMODERATED_UGC", "INFLAMMATORY_POLITICS_AND_NEWS", "NEGATIVE_NEWS_PHARMACEUTICAL"]  # noqa: E501
        if not set(avoided_medium_severity_categories).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `avoided_medium_severity_categories` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(avoided_medium_severity_categories) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._avoided_medium_severity_categories = avoided_medium_severity_categories
