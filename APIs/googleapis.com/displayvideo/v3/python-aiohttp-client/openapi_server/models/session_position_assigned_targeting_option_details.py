# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SessionPositionAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, session_position: str=None):
        """SessionPositionAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param session_position: The session_position of this SessionPositionAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'session_position': str
        }

        self.attribute_map = {
            'session_position': 'sessionPosition'
        }

        self._session_position = session_position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionPositionAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionPositionAssignedTargetingOptionDetails of this SessionPositionAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def session_position(self):
        """Gets the session_position of this SessionPositionAssignedTargetingOptionDetails.

        The position where the ad will show in a session.

        :return: The session_position of this SessionPositionAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._session_position

    @session_position.setter
    def session_position(self, session_position):
        """Sets the session_position of this SessionPositionAssignedTargetingOptionDetails.

        The position where the ad will show in a session.

        :param session_position: The session_position of this SessionPositionAssignedTargetingOptionDetails.
        :type session_position: str
        """
        allowed_values = ["SESSION_POSITION_UNSPECIFIED", "SESSION_POSITION_FIRST_IMPRESSION"]  # noqa: E501
        if session_position not in allowed_values:
            raise ValueError(
                "Invalid value for `session_position` ({0}), must be one of {1}"
                .format(session_position, allowed_values)
            )

        self._session_position = session_position
