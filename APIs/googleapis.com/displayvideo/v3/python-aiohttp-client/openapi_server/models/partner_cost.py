# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PartnerCost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_type: str=None, fee_amount: str=None, fee_percentage_millis: str=None, fee_type: str=None, invoice_type: str=None):
        """PartnerCost - a model defined in OpenAPI

        :param cost_type: The cost_type of this PartnerCost.
        :param fee_amount: The fee_amount of this PartnerCost.
        :param fee_percentage_millis: The fee_percentage_millis of this PartnerCost.
        :param fee_type: The fee_type of this PartnerCost.
        :param invoice_type: The invoice_type of this PartnerCost.
        """
        self.openapi_types = {
            'cost_type': str,
            'fee_amount': str,
            'fee_percentage_millis': str,
            'fee_type': str,
            'invoice_type': str
        }

        self.attribute_map = {
            'cost_type': 'costType',
            'fee_amount': 'feeAmount',
            'fee_percentage_millis': 'feePercentageMillis',
            'fee_type': 'feeType',
            'invoice_type': 'invoiceType'
        }

        self._cost_type = cost_type
        self._fee_amount = fee_amount
        self._fee_percentage_millis = fee_percentage_millis
        self._fee_type = fee_type
        self._invoice_type = invoice_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartnerCost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartnerCost of this PartnerCost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_type(self):
        """Gets the cost_type of this PartnerCost.

        Required. The type of the partner cost.

        :return: The cost_type of this PartnerCost.
        :rtype: str
        """
        return self._cost_type

    @cost_type.setter
    def cost_type(self, cost_type):
        """Sets the cost_type of this PartnerCost.

        Required. The type of the partner cost.

        :param cost_type: The cost_type of this PartnerCost.
        :type cost_type: str
        """
        allowed_values = ["PARTNER_COST_TYPE_UNSPECIFIED", "PARTNER_COST_TYPE_ADLOOX", "PARTNER_COST_TYPE_ADLOOX_PREBID", "PARTNER_COST_TYPE_ADSAFE", "PARTNER_COST_TYPE_ADXPOSE", "PARTNER_COST_TYPE_AGGREGATE_KNOWLEDGE", "PARTNER_COST_TYPE_AGENCY_TRADING_DESK", "PARTNER_COST_TYPE_DV360_FEE", "PARTNER_COST_TYPE_COMSCORE_VCE", "PARTNER_COST_TYPE_DATA_MANAGEMENT_PLATFORM", "PARTNER_COST_TYPE_DEFAULT", "PARTNER_COST_TYPE_DOUBLE_VERIFY", "PARTNER_COST_TYPE_DOUBLE_VERIFY_PREBID", "PARTNER_COST_TYPE_EVIDON", "PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_VIDEO", "PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_PREBID", "PARTNER_COST_TYPE_MEDIA_COST_DATA", "PARTNER_COST_TYPE_MOAT_VIDEO", "PARTNER_COST_TYPE_NIELSEN_DAR", "PARTNER_COST_TYPE_SHOP_LOCAL", "PARTNER_COST_TYPE_TERACENT", "PARTNER_COST_TYPE_THIRD_PARTY_AD_SERVER", "PARTNER_COST_TYPE_TRUST_METRICS", "PARTNER_COST_TYPE_VIZU", "PARTNER_COST_TYPE_ADLINGO_FEE", "PARTNER_COST_TYPE_CUSTOM_FEE_1", "PARTNER_COST_TYPE_CUSTOM_FEE_2", "PARTNER_COST_TYPE_CUSTOM_FEE_3", "PARTNER_COST_TYPE_CUSTOM_FEE_4", "PARTNER_COST_TYPE_CUSTOM_FEE_5", "PARTNER_COST_TYPE_SCIBIDS_FEE"]  # noqa: E501
        if cost_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cost_type` ({0}), must be one of {1}"
                .format(cost_type, allowed_values)
            )

        self._cost_type = cost_type

    @property
    def fee_amount(self):
        """Gets the fee_amount of this PartnerCost.

        The CPM fee amount in micros of advertiser's currency. Applicable when the fee_type is `PARTNER_FEE_TYPE_CPM_FEE`. Must be greater than or equal to 0. For example, for 1.5 standard unit of the advertiser's currency, set this field to 1500000.

        :return: The fee_amount of this PartnerCost.
        :rtype: str
        """
        return self._fee_amount

    @fee_amount.setter
    def fee_amount(self, fee_amount):
        """Sets the fee_amount of this PartnerCost.

        The CPM fee amount in micros of advertiser's currency. Applicable when the fee_type is `PARTNER_FEE_TYPE_CPM_FEE`. Must be greater than or equal to 0. For example, for 1.5 standard unit of the advertiser's currency, set this field to 1500000.

        :param fee_amount: The fee_amount of this PartnerCost.
        :type fee_amount: str
        """

        self._fee_amount = fee_amount

    @property
    def fee_percentage_millis(self):
        """Gets the fee_percentage_millis of this PartnerCost.

        The media fee percentage in millis (1/1000 of a percent). Applicable when the fee_type is `PARTNER_FEE_TYPE_MEDIA_FEE`. Must be greater than or equal to 0. For example: 100 represents 0.1%.

        :return: The fee_percentage_millis of this PartnerCost.
        :rtype: str
        """
        return self._fee_percentage_millis

    @fee_percentage_millis.setter
    def fee_percentage_millis(self, fee_percentage_millis):
        """Sets the fee_percentage_millis of this PartnerCost.

        The media fee percentage in millis (1/1000 of a percent). Applicable when the fee_type is `PARTNER_FEE_TYPE_MEDIA_FEE`. Must be greater than or equal to 0. For example: 100 represents 0.1%.

        :param fee_percentage_millis: The fee_percentage_millis of this PartnerCost.
        :type fee_percentage_millis: str
        """

        self._fee_percentage_millis = fee_percentage_millis

    @property
    def fee_type(self):
        """Gets the fee_type of this PartnerCost.

        Required. The fee type for this partner cost.

        :return: The fee_type of this PartnerCost.
        :rtype: str
        """
        return self._fee_type

    @fee_type.setter
    def fee_type(self, fee_type):
        """Sets the fee_type of this PartnerCost.

        Required. The fee type for this partner cost.

        :param fee_type: The fee_type of this PartnerCost.
        :type fee_type: str
        """
        allowed_values = ["PARTNER_COST_FEE_TYPE_UNSPECIFIED", "PARTNER_COST_FEE_TYPE_CPM_FEE", "PARTNER_COST_FEE_TYPE_MEDIA_FEE"]  # noqa: E501
        if fee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `fee_type` ({0}), must be one of {1}"
                .format(fee_type, allowed_values)
            )

        self._fee_type = fee_type

    @property
    def invoice_type(self):
        """Gets the invoice_type of this PartnerCost.

        The invoice type for this partner cost. * Required when cost_type is one of: - `PARTNER_COST_TYPE_ADLOOX` - `PARTNER_COST_TYPE_DOUBLE_VERIFY` - `PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE`. * Output only for other types.

        :return: The invoice_type of this PartnerCost.
        :rtype: str
        """
        return self._invoice_type

    @invoice_type.setter
    def invoice_type(self, invoice_type):
        """Sets the invoice_type of this PartnerCost.

        The invoice type for this partner cost. * Required when cost_type is one of: - `PARTNER_COST_TYPE_ADLOOX` - `PARTNER_COST_TYPE_DOUBLE_VERIFY` - `PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE`. * Output only for other types.

        :param invoice_type: The invoice_type of this PartnerCost.
        :type invoice_type: str
        """
        allowed_values = ["PARTNER_COST_INVOICE_TYPE_UNSPECIFIED", "PARTNER_COST_INVOICE_TYPE_DV360", "PARTNER_COST_INVOICE_TYPE_PARTNER"]  # noqa: E501
        if invoice_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoice_type` ({0}), must be one of {1}"
                .format(invoice_type, allowed_values)
            )

        self._invoice_type = invoice_type
