# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAudience(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, google_audience_id: str=None, google_audience_type: str=None, name: str=None):
        """GoogleAudience - a model defined in OpenAPI

        :param display_name: The display_name of this GoogleAudience.
        :param google_audience_id: The google_audience_id of this GoogleAudience.
        :param google_audience_type: The google_audience_type of this GoogleAudience.
        :param name: The name of this GoogleAudience.
        """
        self.openapi_types = {
            'display_name': str,
            'google_audience_id': str,
            'google_audience_type': str,
            'name': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'google_audience_id': 'googleAudienceId',
            'google_audience_type': 'googleAudienceType',
            'name': 'name'
        }

        self._display_name = display_name
        self._google_audience_id = google_audience_id
        self._google_audience_type = google_audience_type
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAudience':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAudience of this GoogleAudience.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this GoogleAudience.

        Output only. The display name of the Google audience. .

        :return: The display_name of this GoogleAudience.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleAudience.

        Output only. The display name of the Google audience. .

        :param display_name: The display_name of this GoogleAudience.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def google_audience_id(self):
        """Gets the google_audience_id of this GoogleAudience.

        Output only. The unique ID of the Google audience. Assigned by the system.

        :return: The google_audience_id of this GoogleAudience.
        :rtype: str
        """
        return self._google_audience_id

    @google_audience_id.setter
    def google_audience_id(self, google_audience_id):
        """Sets the google_audience_id of this GoogleAudience.

        Output only. The unique ID of the Google audience. Assigned by the system.

        :param google_audience_id: The google_audience_id of this GoogleAudience.
        :type google_audience_id: str
        """

        self._google_audience_id = google_audience_id

    @property
    def google_audience_type(self):
        """Gets the google_audience_type of this GoogleAudience.

        Output only. The type of Google audience. .

        :return: The google_audience_type of this GoogleAudience.
        :rtype: str
        """
        return self._google_audience_type

    @google_audience_type.setter
    def google_audience_type(self, google_audience_type):
        """Sets the google_audience_type of this GoogleAudience.

        Output only. The type of Google audience. .

        :param google_audience_type: The google_audience_type of this GoogleAudience.
        :type google_audience_type: str
        """
        allowed_values = ["GOOGLE_AUDIENCE_TYPE_UNSPECIFIED", "GOOGLE_AUDIENCE_TYPE_AFFINITY", "GOOGLE_AUDIENCE_TYPE_IN_MARKET", "GOOGLE_AUDIENCE_TYPE_INSTALLED_APPS", "GOOGLE_AUDIENCE_TYPE_NEW_MOBILE_DEVICES", "GOOGLE_AUDIENCE_TYPE_LIFE_EVENT", "GOOGLE_AUDIENCE_TYPE_EXTENDED_DEMOGRAPHIC"]  # noqa: E501
        if google_audience_type not in allowed_values:
            raise ValueError(
                "Invalid value for `google_audience_type` ({0}), must be one of {1}"
                .format(google_audience_type, allowed_values)
            )

        self._google_audience_type = google_audience_type

    @property
    def name(self):
        """Gets the name of this GoogleAudience.

        Output only. The resource name of the google audience.

        :return: The name of this GoogleAudience.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleAudience.

        Output only. The resource name of the google audience.

        :param name: The name of this GoogleAudience.
        :type name: str
        """

        self._name = name
