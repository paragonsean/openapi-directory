# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.algorithm_rules_signal_comparison import AlgorithmRulesSignalComparison
from openapi_server.models.algorithm_rules_signal_value import AlgorithmRulesSignalValue
from openapi_server import util


class AlgorithmRulesRuleCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, return_value: AlgorithmRulesSignalValue=None, signal_comparisons: List[AlgorithmRulesSignalComparison]=None):
        """AlgorithmRulesRuleCondition - a model defined in OpenAPI

        :param return_value: The return_value of this AlgorithmRulesRuleCondition.
        :param signal_comparisons: The signal_comparisons of this AlgorithmRulesRuleCondition.
        """
        self.openapi_types = {
            'return_value': AlgorithmRulesSignalValue,
            'signal_comparisons': List[AlgorithmRulesSignalComparison]
        }

        self.attribute_map = {
            'return_value': 'returnValue',
            'signal_comparisons': 'signalComparisons'
        }

        self._return_value = return_value
        self._signal_comparisons = signal_comparisons

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlgorithmRulesRuleCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlgorithmRulesRuleCondition of this AlgorithmRulesRuleCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def return_value(self):
        """Gets the return_value of this AlgorithmRulesRuleCondition.


        :return: The return_value of this AlgorithmRulesRuleCondition.
        :rtype: AlgorithmRulesSignalValue
        """
        return self._return_value

    @return_value.setter
    def return_value(self, return_value):
        """Sets the return_value of this AlgorithmRulesRuleCondition.


        :param return_value: The return_value of this AlgorithmRulesRuleCondition.
        :type return_value: AlgorithmRulesSignalValue
        """

        self._return_value = return_value

    @property
    def signal_comparisons(self):
        """Gets the signal_comparisons of this AlgorithmRulesRuleCondition.

        List of comparisons that build `if` statement condition. The comparisons are combined into a single condition with `AND` logical operators.

        :return: The signal_comparisons of this AlgorithmRulesRuleCondition.
        :rtype: List[AlgorithmRulesSignalComparison]
        """
        return self._signal_comparisons

    @signal_comparisons.setter
    def signal_comparisons(self, signal_comparisons):
        """Sets the signal_comparisons of this AlgorithmRulesRuleCondition.

        List of comparisons that build `if` statement condition. The comparisons are combined into a single condition with `AND` logical operators.

        :param signal_comparisons: The signal_comparisons of this AlgorithmRulesRuleCondition.
        :type signal_comparisons: List[AlgorithmRulesSignalComparison]
        """

        self._signal_comparisons = signal_comparisons
