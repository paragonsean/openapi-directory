# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BusinessChainAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, proximity_radius_amount: float=None, proximity_radius_unit: str=None, targeting_option_id: str=None):
        """BusinessChainAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param display_name: The display_name of this BusinessChainAssignedTargetingOptionDetails.
        :param proximity_radius_amount: The proximity_radius_amount of this BusinessChainAssignedTargetingOptionDetails.
        :param proximity_radius_unit: The proximity_radius_unit of this BusinessChainAssignedTargetingOptionDetails.
        :param targeting_option_id: The targeting_option_id of this BusinessChainAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'display_name': str,
            'proximity_radius_amount': float,
            'proximity_radius_unit': str,
            'targeting_option_id': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'proximity_radius_amount': 'proximityRadiusAmount',
            'proximity_radius_unit': 'proximityRadiusUnit',
            'targeting_option_id': 'targetingOptionId'
        }

        self._display_name = display_name
        self._proximity_radius_amount = proximity_radius_amount
        self._proximity_radius_unit = proximity_radius_unit
        self._targeting_option_id = targeting_option_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BusinessChainAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BusinessChainAssignedTargetingOptionDetails of this BusinessChainAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this BusinessChainAssignedTargetingOptionDetails.

        Output only. The display name of a business chain, e.g. \"KFC\", \"Chase Bank\".

        :return: The display_name of this BusinessChainAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BusinessChainAssignedTargetingOptionDetails.

        Output only. The display name of a business chain, e.g. \"KFC\", \"Chase Bank\".

        :param display_name: The display_name of this BusinessChainAssignedTargetingOptionDetails.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def proximity_radius_amount(self):
        """Gets the proximity_radius_amount of this BusinessChainAssignedTargetingOptionDetails.

        Required. The radius of the area around the business chain that will be targeted. The units of the radius are specified by proximity_radius_unit. Must be 1 to 800 if unit is `DISTANCE_UNIT_KILOMETERS` and 1 to 500 if unit is `DISTANCE_UNIT_MILES`. The minimum increment for both cases is 0.1. Inputs will be rounded to the nearest acceptable value if it is too granular, e.g. 15.57 will become 15.6.

        :return: The proximity_radius_amount of this BusinessChainAssignedTargetingOptionDetails.
        :rtype: float
        """
        return self._proximity_radius_amount

    @proximity_radius_amount.setter
    def proximity_radius_amount(self, proximity_radius_amount):
        """Sets the proximity_radius_amount of this BusinessChainAssignedTargetingOptionDetails.

        Required. The radius of the area around the business chain that will be targeted. The units of the radius are specified by proximity_radius_unit. Must be 1 to 800 if unit is `DISTANCE_UNIT_KILOMETERS` and 1 to 500 if unit is `DISTANCE_UNIT_MILES`. The minimum increment for both cases is 0.1. Inputs will be rounded to the nearest acceptable value if it is too granular, e.g. 15.57 will become 15.6.

        :param proximity_radius_amount: The proximity_radius_amount of this BusinessChainAssignedTargetingOptionDetails.
        :type proximity_radius_amount: float
        """

        self._proximity_radius_amount = proximity_radius_amount

    @property
    def proximity_radius_unit(self):
        """Gets the proximity_radius_unit of this BusinessChainAssignedTargetingOptionDetails.

        Required. The unit of distance by which the targeting radius is measured.

        :return: The proximity_radius_unit of this BusinessChainAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._proximity_radius_unit

    @proximity_radius_unit.setter
    def proximity_radius_unit(self, proximity_radius_unit):
        """Sets the proximity_radius_unit of this BusinessChainAssignedTargetingOptionDetails.

        Required. The unit of distance by which the targeting radius is measured.

        :param proximity_radius_unit: The proximity_radius_unit of this BusinessChainAssignedTargetingOptionDetails.
        :type proximity_radius_unit: str
        """
        allowed_values = ["DISTANCE_UNIT_UNSPECIFIED", "DISTANCE_UNIT_MILES", "DISTANCE_UNIT_KILOMETERS"]  # noqa: E501
        if proximity_radius_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `proximity_radius_unit` ({0}), must be one of {1}"
                .format(proximity_radius_unit, allowed_values)
            )

        self._proximity_radius_unit = proximity_radius_unit

    @property
    def targeting_option_id(self):
        """Gets the targeting_option_id of this BusinessChainAssignedTargetingOptionDetails.

        Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_BUSINESS_CHAIN`. Accepted business chain targeting option IDs can be retrieved using SearchTargetingOptions.

        :return: The targeting_option_id of this BusinessChainAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._targeting_option_id

    @targeting_option_id.setter
    def targeting_option_id(self, targeting_option_id):
        """Sets the targeting_option_id of this BusinessChainAssignedTargetingOptionDetails.

        Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_BUSINESS_CHAIN`. Accepted business chain targeting option IDs can be retrieved using SearchTargetingOptions.

        :param targeting_option_id: The targeting_option_id of this BusinessChainAssignedTargetingOptionDetails.
        :type targeting_option_id: str
        """

        self._targeting_option_id = targeting_option_id
