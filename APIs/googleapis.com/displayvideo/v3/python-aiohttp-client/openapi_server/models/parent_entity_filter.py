# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ParentEntityFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_type: List[str]=None, filter_ids: List[str]=None, filter_type: str=None):
        """ParentEntityFilter - a model defined in OpenAPI

        :param file_type: The file_type of this ParentEntityFilter.
        :param filter_ids: The filter_ids of this ParentEntityFilter.
        :param filter_type: The filter_type of this ParentEntityFilter.
        """
        self.openapi_types = {
            'file_type': List[str],
            'filter_ids': List[str],
            'filter_type': str
        }

        self.attribute_map = {
            'file_type': 'fileType',
            'filter_ids': 'filterIds',
            'filter_type': 'filterType'
        }

        self._file_type = file_type
        self._filter_ids = filter_ids
        self._filter_type = filter_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParentEntityFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParentEntityFilter of this ParentEntityFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_type(self):
        """Gets the file_type of this ParentEntityFilter.

        Required. File types that will be returned.

        :return: The file_type of this ParentEntityFilter.
        :rtype: List[str]
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this ParentEntityFilter.

        Required. File types that will be returned.

        :param file_type: The file_type of this ParentEntityFilter.
        :type file_type: List[str]
        """
        allowed_values = ["FILE_TYPE_UNSPECIFIED", "FILE_TYPE_CAMPAIGN", "FILE_TYPE_MEDIA_PRODUCT", "FILE_TYPE_INSERTION_ORDER", "FILE_TYPE_LINE_ITEM", "FILE_TYPE_AD_GROUP", "FILE_TYPE_AD"]  # noqa: E501
        if not set(file_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `file_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(file_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._file_type = file_type

    @property
    def filter_ids(self):
        """Gets the filter_ids of this ParentEntityFilter.

        The IDs of the specified filter type. This is used to filter entities to fetch. If filter type is not `FILTER_TYPE_NONE`, at least one ID must be specified.

        :return: The filter_ids of this ParentEntityFilter.
        :rtype: List[str]
        """
        return self._filter_ids

    @filter_ids.setter
    def filter_ids(self, filter_ids):
        """Sets the filter_ids of this ParentEntityFilter.

        The IDs of the specified filter type. This is used to filter entities to fetch. If filter type is not `FILTER_TYPE_NONE`, at least one ID must be specified.

        :param filter_ids: The filter_ids of this ParentEntityFilter.
        :type filter_ids: List[str]
        """

        self._filter_ids = filter_ids

    @property
    def filter_type(self):
        """Gets the filter_type of this ParentEntityFilter.

        Required. Filter type used to filter fetched entities.

        :return: The filter_type of this ParentEntityFilter.
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this ParentEntityFilter.

        Required. Filter type used to filter fetched entities.

        :param filter_type: The filter_type of this ParentEntityFilter.
        :type filter_type: str
        """
        allowed_values = ["FILTER_TYPE_UNSPECIFIED", "FILTER_TYPE_NONE", "FILTER_TYPE_ADVERTISER_ID", "FILTER_TYPE_CAMPAIGN_ID", "FILTER_TYPE_MEDIA_PRODUCT_ID", "FILTER_TYPE_INSERTION_ORDER_ID", "FILTER_TYPE_LINE_ITEM_ID"]  # noqa: E501
        if filter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_type` ({0}), must be one of {1}"
                .format(filter_type, allowed_values)
            )

        self._filter_type = filter_type
