# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.algorithm_rules_comparison_value import AlgorithmRulesComparisonValue
from openapi_server.models.algorithm_rules_signal import AlgorithmRulesSignal
from openapi_server import util


class AlgorithmRulesSignalComparison(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comparison_operator: str=None, comparison_value: AlgorithmRulesComparisonValue=None, signal: AlgorithmRulesSignal=None):
        """AlgorithmRulesSignalComparison - a model defined in OpenAPI

        :param comparison_operator: The comparison_operator of this AlgorithmRulesSignalComparison.
        :param comparison_value: The comparison_value of this AlgorithmRulesSignalComparison.
        :param signal: The signal of this AlgorithmRulesSignalComparison.
        """
        self.openapi_types = {
            'comparison_operator': str,
            'comparison_value': AlgorithmRulesComparisonValue,
            'signal': AlgorithmRulesSignal
        }

        self.attribute_map = {
            'comparison_operator': 'comparisonOperator',
            'comparison_value': 'comparisonValue',
            'signal': 'signal'
        }

        self._comparison_operator = comparison_operator
        self._comparison_value = comparison_value
        self._signal = signal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlgorithmRulesSignalComparison':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlgorithmRulesSignalComparison of this AlgorithmRulesSignalComparison.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comparison_operator(self):
        """Gets the comparison_operator of this AlgorithmRulesSignalComparison.

        Operator used to compare the two values. In the resulting experession, the `signal` will be the first value and the `comparisonValue will be the second.

        :return: The comparison_operator of this AlgorithmRulesSignalComparison.
        :rtype: str
        """
        return self._comparison_operator

    @comparison_operator.setter
    def comparison_operator(self, comparison_operator):
        """Sets the comparison_operator of this AlgorithmRulesSignalComparison.

        Operator used to compare the two values. In the resulting experession, the `signal` will be the first value and the `comparisonValue will be the second.

        :param comparison_operator: The comparison_operator of this AlgorithmRulesSignalComparison.
        :type comparison_operator: str
        """
        allowed_values = ["COMPARISON_OPERATOR_UNSPECIFIED", "EQUAL", "GREATER_THAN", "LESS_THAN", "GREATER_THAN_OR_EQUAL_TO", "LESS_THAN_OR_EQUAL_TO"]  # noqa: E501
        if comparison_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `comparison_operator` ({0}), must be one of {1}"
                .format(comparison_operator, allowed_values)
            )

        self._comparison_operator = comparison_operator

    @property
    def comparison_value(self):
        """Gets the comparison_value of this AlgorithmRulesSignalComparison.


        :return: The comparison_value of this AlgorithmRulesSignalComparison.
        :rtype: AlgorithmRulesComparisonValue
        """
        return self._comparison_value

    @comparison_value.setter
    def comparison_value(self, comparison_value):
        """Sets the comparison_value of this AlgorithmRulesSignalComparison.


        :param comparison_value: The comparison_value of this AlgorithmRulesSignalComparison.
        :type comparison_value: AlgorithmRulesComparisonValue
        """

        self._comparison_value = comparison_value

    @property
    def signal(self):
        """Gets the signal of this AlgorithmRulesSignalComparison.


        :return: The signal of this AlgorithmRulesSignalComparison.
        :rtype: AlgorithmRulesSignal
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this AlgorithmRulesSignalComparison.


        :param signal: The signal of this AlgorithmRulesSignalComparison.
        :type signal: AlgorithmRulesSignal
        """

        self._signal = signal
