# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_info_list import ContactInfoList
from openapi_server.models.mobile_device_id_list import MobileDeviceIdList
from openapi_server import util


class FirstAndThirdPartyAudience(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_display_audience_size: str=None, app_id: str=None, audience_source: str=None, audience_type: str=None, contact_info_list: ContactInfoList=None, description: str=None, display_audience_size: str=None, display_desktop_audience_size: str=None, display_mobile_app_audience_size: str=None, display_mobile_web_audience_size: str=None, display_name: str=None, first_and_third_party_audience_id: str=None, first_and_third_party_audience_type: str=None, gmail_audience_size: str=None, membership_duration_days: str=None, mobile_device_id_list: MobileDeviceIdList=None, name: str=None, youtube_audience_size: str=None):
        """FirstAndThirdPartyAudience - a model defined in OpenAPI

        :param active_display_audience_size: The active_display_audience_size of this FirstAndThirdPartyAudience.
        :param app_id: The app_id of this FirstAndThirdPartyAudience.
        :param audience_source: The audience_source of this FirstAndThirdPartyAudience.
        :param audience_type: The audience_type of this FirstAndThirdPartyAudience.
        :param contact_info_list: The contact_info_list of this FirstAndThirdPartyAudience.
        :param description: The description of this FirstAndThirdPartyAudience.
        :param display_audience_size: The display_audience_size of this FirstAndThirdPartyAudience.
        :param display_desktop_audience_size: The display_desktop_audience_size of this FirstAndThirdPartyAudience.
        :param display_mobile_app_audience_size: The display_mobile_app_audience_size of this FirstAndThirdPartyAudience.
        :param display_mobile_web_audience_size: The display_mobile_web_audience_size of this FirstAndThirdPartyAudience.
        :param display_name: The display_name of this FirstAndThirdPartyAudience.
        :param first_and_third_party_audience_id: The first_and_third_party_audience_id of this FirstAndThirdPartyAudience.
        :param first_and_third_party_audience_type: The first_and_third_party_audience_type of this FirstAndThirdPartyAudience.
        :param gmail_audience_size: The gmail_audience_size of this FirstAndThirdPartyAudience.
        :param membership_duration_days: The membership_duration_days of this FirstAndThirdPartyAudience.
        :param mobile_device_id_list: The mobile_device_id_list of this FirstAndThirdPartyAudience.
        :param name: The name of this FirstAndThirdPartyAudience.
        :param youtube_audience_size: The youtube_audience_size of this FirstAndThirdPartyAudience.
        """
        self.openapi_types = {
            'active_display_audience_size': str,
            'app_id': str,
            'audience_source': str,
            'audience_type': str,
            'contact_info_list': ContactInfoList,
            'description': str,
            'display_audience_size': str,
            'display_desktop_audience_size': str,
            'display_mobile_app_audience_size': str,
            'display_mobile_web_audience_size': str,
            'display_name': str,
            'first_and_third_party_audience_id': str,
            'first_and_third_party_audience_type': str,
            'gmail_audience_size': str,
            'membership_duration_days': str,
            'mobile_device_id_list': MobileDeviceIdList,
            'name': str,
            'youtube_audience_size': str
        }

        self.attribute_map = {
            'active_display_audience_size': 'activeDisplayAudienceSize',
            'app_id': 'appId',
            'audience_source': 'audienceSource',
            'audience_type': 'audienceType',
            'contact_info_list': 'contactInfoList',
            'description': 'description',
            'display_audience_size': 'displayAudienceSize',
            'display_desktop_audience_size': 'displayDesktopAudienceSize',
            'display_mobile_app_audience_size': 'displayMobileAppAudienceSize',
            'display_mobile_web_audience_size': 'displayMobileWebAudienceSize',
            'display_name': 'displayName',
            'first_and_third_party_audience_id': 'firstAndThirdPartyAudienceId',
            'first_and_third_party_audience_type': 'firstAndThirdPartyAudienceType',
            'gmail_audience_size': 'gmailAudienceSize',
            'membership_duration_days': 'membershipDurationDays',
            'mobile_device_id_list': 'mobileDeviceIdList',
            'name': 'name',
            'youtube_audience_size': 'youtubeAudienceSize'
        }

        self._active_display_audience_size = active_display_audience_size
        self._app_id = app_id
        self._audience_source = audience_source
        self._audience_type = audience_type
        self._contact_info_list = contact_info_list
        self._description = description
        self._display_audience_size = display_audience_size
        self._display_desktop_audience_size = display_desktop_audience_size
        self._display_mobile_app_audience_size = display_mobile_app_audience_size
        self._display_mobile_web_audience_size = display_mobile_web_audience_size
        self._display_name = display_name
        self._first_and_third_party_audience_id = first_and_third_party_audience_id
        self._first_and_third_party_audience_type = first_and_third_party_audience_type
        self._gmail_audience_size = gmail_audience_size
        self._membership_duration_days = membership_duration_days
        self._mobile_device_id_list = mobile_device_id_list
        self._name = name
        self._youtube_audience_size = youtube_audience_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirstAndThirdPartyAudience':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirstAndThirdPartyAudience of this FirstAndThirdPartyAudience.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_display_audience_size(self):
        """Gets the active_display_audience_size of this FirstAndThirdPartyAudience.

        Output only. The estimated audience size for the Display network in the past month. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only returned in GET request.

        :return: The active_display_audience_size of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._active_display_audience_size

    @active_display_audience_size.setter
    def active_display_audience_size(self, active_display_audience_size):
        """Sets the active_display_audience_size of this FirstAndThirdPartyAudience.

        Output only. The estimated audience size for the Display network in the past month. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only returned in GET request.

        :param active_display_audience_size: The active_display_audience_size of this FirstAndThirdPartyAudience.
        :type active_display_audience_size: str
        """

        self._active_display_audience_size = active_display_audience_size

    @property
    def app_id(self):
        """Gets the app_id of this FirstAndThirdPartyAudience.

        The app_id matches with the type of the mobile_device_ids being uploaded. Only applicable to audience_type `CUSTOMER_MATCH_DEVICE_ID`

        :return: The app_id of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this FirstAndThirdPartyAudience.

        The app_id matches with the type of the mobile_device_ids being uploaded. Only applicable to audience_type `CUSTOMER_MATCH_DEVICE_ID`

        :param app_id: The app_id of this FirstAndThirdPartyAudience.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def audience_source(self):
        """Gets the audience_source of this FirstAndThirdPartyAudience.

        Output only. The source of the audience.

        :return: The audience_source of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._audience_source

    @audience_source.setter
    def audience_source(self, audience_source):
        """Sets the audience_source of this FirstAndThirdPartyAudience.

        Output only. The source of the audience.

        :param audience_source: The audience_source of this FirstAndThirdPartyAudience.
        :type audience_source: str
        """
        allowed_values = ["AUDIENCE_SOURCE_UNSPECIFIED", "DISPLAY_VIDEO_360", "CAMPAIGN_MANAGER", "AD_MANAGER", "SEARCH_ADS_360", "YOUTUBE", "ADS_DATA_HUB"]  # noqa: E501
        if audience_source not in allowed_values:
            raise ValueError(
                "Invalid value for `audience_source` ({0}), must be one of {1}"
                .format(audience_source, allowed_values)
            )

        self._audience_source = audience_source

    @property
    def audience_type(self):
        """Gets the audience_type of this FirstAndThirdPartyAudience.

        The type of the audience.

        :return: The audience_type of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._audience_type

    @audience_type.setter
    def audience_type(self, audience_type):
        """Sets the audience_type of this FirstAndThirdPartyAudience.

        The type of the audience.

        :param audience_type: The audience_type of this FirstAndThirdPartyAudience.
        :type audience_type: str
        """
        allowed_values = ["AUDIENCE_TYPE_UNSPECIFIED", "CUSTOMER_MATCH_CONTACT_INFO", "CUSTOMER_MATCH_DEVICE_ID", "CUSTOMER_MATCH_USER_ID", "ACTIVITY_BASED", "FREQUENCY_CAP", "TAG_BASED", "YOUTUBE_USERS", "LICENSED"]  # noqa: E501
        if audience_type not in allowed_values:
            raise ValueError(
                "Invalid value for `audience_type` ({0}), must be one of {1}"
                .format(audience_type, allowed_values)
            )

        self._audience_type = audience_type

    @property
    def contact_info_list(self):
        """Gets the contact_info_list of this FirstAndThirdPartyAudience.


        :return: The contact_info_list of this FirstAndThirdPartyAudience.
        :rtype: ContactInfoList
        """
        return self._contact_info_list

    @contact_info_list.setter
    def contact_info_list(self, contact_info_list):
        """Sets the contact_info_list of this FirstAndThirdPartyAudience.


        :param contact_info_list: The contact_info_list of this FirstAndThirdPartyAudience.
        :type contact_info_list: ContactInfoList
        """

        self._contact_info_list = contact_info_list

    @property
    def description(self):
        """Gets the description of this FirstAndThirdPartyAudience.

        The user-provided description of the audience. Only applicable to first party audiences.

        :return: The description of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FirstAndThirdPartyAudience.

        The user-provided description of the audience. Only applicable to first party audiences.

        :param description: The description of this FirstAndThirdPartyAudience.
        :type description: str
        """

        self._description = description

    @property
    def display_audience_size(self):
        """Gets the display_audience_size of this FirstAndThirdPartyAudience.

        Output only. The estimated audience size for the Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only returned in GET request.

        :return: The display_audience_size of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._display_audience_size

    @display_audience_size.setter
    def display_audience_size(self, display_audience_size):
        """Sets the display_audience_size of this FirstAndThirdPartyAudience.

        Output only. The estimated audience size for the Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only returned in GET request.

        :param display_audience_size: The display_audience_size of this FirstAndThirdPartyAudience.
        :type display_audience_size: str
        """

        self._display_audience_size = display_audience_size

    @property
    def display_desktop_audience_size(self):
        """Gets the display_desktop_audience_size of this FirstAndThirdPartyAudience.

        Output only. The estimated desktop audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.

        :return: The display_desktop_audience_size of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._display_desktop_audience_size

    @display_desktop_audience_size.setter
    def display_desktop_audience_size(self, display_desktop_audience_size):
        """Sets the display_desktop_audience_size of this FirstAndThirdPartyAudience.

        Output only. The estimated desktop audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.

        :param display_desktop_audience_size: The display_desktop_audience_size of this FirstAndThirdPartyAudience.
        :type display_desktop_audience_size: str
        """

        self._display_desktop_audience_size = display_desktop_audience_size

    @property
    def display_mobile_app_audience_size(self):
        """Gets the display_mobile_app_audience_size of this FirstAndThirdPartyAudience.

        Output only. The estimated mobile app audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.

        :return: The display_mobile_app_audience_size of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._display_mobile_app_audience_size

    @display_mobile_app_audience_size.setter
    def display_mobile_app_audience_size(self, display_mobile_app_audience_size):
        """Sets the display_mobile_app_audience_size of this FirstAndThirdPartyAudience.

        Output only. The estimated mobile app audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.

        :param display_mobile_app_audience_size: The display_mobile_app_audience_size of this FirstAndThirdPartyAudience.
        :type display_mobile_app_audience_size: str
        """

        self._display_mobile_app_audience_size = display_mobile_app_audience_size

    @property
    def display_mobile_web_audience_size(self):
        """Gets the display_mobile_web_audience_size of this FirstAndThirdPartyAudience.

        Output only. The estimated mobile web audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.

        :return: The display_mobile_web_audience_size of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._display_mobile_web_audience_size

    @display_mobile_web_audience_size.setter
    def display_mobile_web_audience_size(self, display_mobile_web_audience_size):
        """Sets the display_mobile_web_audience_size of this FirstAndThirdPartyAudience.

        Output only. The estimated mobile web audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.

        :param display_mobile_web_audience_size: The display_mobile_web_audience_size of this FirstAndThirdPartyAudience.
        :type display_mobile_web_audience_size: str
        """

        self._display_mobile_web_audience_size = display_mobile_web_audience_size

    @property
    def display_name(self):
        """Gets the display_name of this FirstAndThirdPartyAudience.

        The display name of the first and third party audience.

        :return: The display_name of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FirstAndThirdPartyAudience.

        The display name of the first and third party audience.

        :param display_name: The display_name of this FirstAndThirdPartyAudience.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def first_and_third_party_audience_id(self):
        """Gets the first_and_third_party_audience_id of this FirstAndThirdPartyAudience.

        Output only. The unique ID of the first and third party audience. Assigned by the system.

        :return: The first_and_third_party_audience_id of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._first_and_third_party_audience_id

    @first_and_third_party_audience_id.setter
    def first_and_third_party_audience_id(self, first_and_third_party_audience_id):
        """Sets the first_and_third_party_audience_id of this FirstAndThirdPartyAudience.

        Output only. The unique ID of the first and third party audience. Assigned by the system.

        :param first_and_third_party_audience_id: The first_and_third_party_audience_id of this FirstAndThirdPartyAudience.
        :type first_and_third_party_audience_id: str
        """

        self._first_and_third_party_audience_id = first_and_third_party_audience_id

    @property
    def first_and_third_party_audience_type(self):
        """Gets the first_and_third_party_audience_type of this FirstAndThirdPartyAudience.

        Whether the audience is a first or third party audience.

        :return: The first_and_third_party_audience_type of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._first_and_third_party_audience_type

    @first_and_third_party_audience_type.setter
    def first_and_third_party_audience_type(self, first_and_third_party_audience_type):
        """Sets the first_and_third_party_audience_type of this FirstAndThirdPartyAudience.

        Whether the audience is a first or third party audience.

        :param first_and_third_party_audience_type: The first_and_third_party_audience_type of this FirstAndThirdPartyAudience.
        :type first_and_third_party_audience_type: str
        """
        allowed_values = ["FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_UNSPECIFIED", "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_FIRST_PARTY", "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_THIRD_PARTY"]  # noqa: E501
        if first_and_third_party_audience_type not in allowed_values:
            raise ValueError(
                "Invalid value for `first_and_third_party_audience_type` ({0}), must be one of {1}"
                .format(first_and_third_party_audience_type, allowed_values)
            )

        self._first_and_third_party_audience_type = first_and_third_party_audience_type

    @property
    def gmail_audience_size(self):
        """Gets the gmail_audience_size of this FirstAndThirdPartyAudience.

        Output only. The estimated audience size for Gmail network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.

        :return: The gmail_audience_size of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._gmail_audience_size

    @gmail_audience_size.setter
    def gmail_audience_size(self, gmail_audience_size):
        """Sets the gmail_audience_size of this FirstAndThirdPartyAudience.

        Output only. The estimated audience size for Gmail network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.

        :param gmail_audience_size: The gmail_audience_size of this FirstAndThirdPartyAudience.
        :type gmail_audience_size: str
        """

        self._gmail_audience_size = gmail_audience_size

    @property
    def membership_duration_days(self):
        """Gets the membership_duration_days of this FirstAndThirdPartyAudience.

        The duration in days that an entry remains in the audience after the qualifying event. If the audience has no expiration, set the value of this field to 10000. Otherwise, the set value must be greater than 0 and less than or equal to 540. Only applicable to first party audiences. This field is required if one of the following audience_type is used: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`

        :return: The membership_duration_days of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._membership_duration_days

    @membership_duration_days.setter
    def membership_duration_days(self, membership_duration_days):
        """Sets the membership_duration_days of this FirstAndThirdPartyAudience.

        The duration in days that an entry remains in the audience after the qualifying event. If the audience has no expiration, set the value of this field to 10000. Otherwise, the set value must be greater than 0 and less than or equal to 540. Only applicable to first party audiences. This field is required if one of the following audience_type is used: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`

        :param membership_duration_days: The membership_duration_days of this FirstAndThirdPartyAudience.
        :type membership_duration_days: str
        """

        self._membership_duration_days = membership_duration_days

    @property
    def mobile_device_id_list(self):
        """Gets the mobile_device_id_list of this FirstAndThirdPartyAudience.


        :return: The mobile_device_id_list of this FirstAndThirdPartyAudience.
        :rtype: MobileDeviceIdList
        """
        return self._mobile_device_id_list

    @mobile_device_id_list.setter
    def mobile_device_id_list(self, mobile_device_id_list):
        """Sets the mobile_device_id_list of this FirstAndThirdPartyAudience.


        :param mobile_device_id_list: The mobile_device_id_list of this FirstAndThirdPartyAudience.
        :type mobile_device_id_list: MobileDeviceIdList
        """

        self._mobile_device_id_list = mobile_device_id_list

    @property
    def name(self):
        """Gets the name of this FirstAndThirdPartyAudience.

        Output only. The resource name of the first and third party audience.

        :return: The name of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FirstAndThirdPartyAudience.

        Output only. The resource name of the first and third party audience.

        :param name: The name of this FirstAndThirdPartyAudience.
        :type name: str
        """

        self._name = name

    @property
    def youtube_audience_size(self):
        """Gets the youtube_audience_size of this FirstAndThirdPartyAudience.

        Output only. The estimated audience size for YouTube network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.

        :return: The youtube_audience_size of this FirstAndThirdPartyAudience.
        :rtype: str
        """
        return self._youtube_audience_size

    @youtube_audience_size.setter
    def youtube_audience_size(self, youtube_audience_size):
        """Sets the youtube_audience_size of this FirstAndThirdPartyAudience.

        Output only. The estimated audience size for YouTube network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.

        :param youtube_audience_size: The youtube_audience_size of this FirstAndThirdPartyAudience.
        :type youtube_audience_size: str
        """

        self._youtube_audience_size = youtube_audience_size
