# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.day_and_time import DayAndTime
from openapi_server.models.dimensions import Dimensions
from openapi_server import util


class AlgorithmRulesComparisonValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bool_value: bool=None, creative_dimension_value: Dimensions=None, day_and_time_value: DayAndTime=None, device_type_value: str=None, double_value: float=None, environment_value: str=None, exchange_value: str=None, int64_value: str=None, on_screen_position_value: str=None, string_value: str=None):
        """AlgorithmRulesComparisonValue - a model defined in OpenAPI

        :param bool_value: The bool_value of this AlgorithmRulesComparisonValue.
        :param creative_dimension_value: The creative_dimension_value of this AlgorithmRulesComparisonValue.
        :param day_and_time_value: The day_and_time_value of this AlgorithmRulesComparisonValue.
        :param device_type_value: The device_type_value of this AlgorithmRulesComparisonValue.
        :param double_value: The double_value of this AlgorithmRulesComparisonValue.
        :param environment_value: The environment_value of this AlgorithmRulesComparisonValue.
        :param exchange_value: The exchange_value of this AlgorithmRulesComparisonValue.
        :param int64_value: The int64_value of this AlgorithmRulesComparisonValue.
        :param on_screen_position_value: The on_screen_position_value of this AlgorithmRulesComparisonValue.
        :param string_value: The string_value of this AlgorithmRulesComparisonValue.
        """
        self.openapi_types = {
            'bool_value': bool,
            'creative_dimension_value': Dimensions,
            'day_and_time_value': DayAndTime,
            'device_type_value': str,
            'double_value': float,
            'environment_value': str,
            'exchange_value': str,
            'int64_value': str,
            'on_screen_position_value': str,
            'string_value': str
        }

        self.attribute_map = {
            'bool_value': 'boolValue',
            'creative_dimension_value': 'creativeDimensionValue',
            'day_and_time_value': 'dayAndTimeValue',
            'device_type_value': 'deviceTypeValue',
            'double_value': 'doubleValue',
            'environment_value': 'environmentValue',
            'exchange_value': 'exchangeValue',
            'int64_value': 'int64Value',
            'on_screen_position_value': 'onScreenPositionValue',
            'string_value': 'stringValue'
        }

        self._bool_value = bool_value
        self._creative_dimension_value = creative_dimension_value
        self._day_and_time_value = day_and_time_value
        self._device_type_value = device_type_value
        self._double_value = double_value
        self._environment_value = environment_value
        self._exchange_value = exchange_value
        self._int64_value = int64_value
        self._on_screen_position_value = on_screen_position_value
        self._string_value = string_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlgorithmRulesComparisonValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlgorithmRulesComparisonValue of this AlgorithmRulesComparisonValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bool_value(self):
        """Gets the bool_value of this AlgorithmRulesComparisonValue.

        Boolean value.

        :return: The bool_value of this AlgorithmRulesComparisonValue.
        :rtype: bool
        """
        return self._bool_value

    @bool_value.setter
    def bool_value(self, bool_value):
        """Sets the bool_value of this AlgorithmRulesComparisonValue.

        Boolean value.

        :param bool_value: The bool_value of this AlgorithmRulesComparisonValue.
        :type bool_value: bool
        """

        self._bool_value = bool_value

    @property
    def creative_dimension_value(self):
        """Gets the creative_dimension_value of this AlgorithmRulesComparisonValue.


        :return: The creative_dimension_value of this AlgorithmRulesComparisonValue.
        :rtype: Dimensions
        """
        return self._creative_dimension_value

    @creative_dimension_value.setter
    def creative_dimension_value(self, creative_dimension_value):
        """Sets the creative_dimension_value of this AlgorithmRulesComparisonValue.


        :param creative_dimension_value: The creative_dimension_value of this AlgorithmRulesComparisonValue.
        :type creative_dimension_value: Dimensions
        """

        self._creative_dimension_value = creative_dimension_value

    @property
    def day_and_time_value(self):
        """Gets the day_and_time_value of this AlgorithmRulesComparisonValue.


        :return: The day_and_time_value of this AlgorithmRulesComparisonValue.
        :rtype: DayAndTime
        """
        return self._day_and_time_value

    @day_and_time_value.setter
    def day_and_time_value(self, day_and_time_value):
        """Sets the day_and_time_value of this AlgorithmRulesComparisonValue.


        :param day_and_time_value: The day_and_time_value of this AlgorithmRulesComparisonValue.
        :type day_and_time_value: DayAndTime
        """

        self._day_and_time_value = day_and_time_value

    @property
    def device_type_value(self):
        """Gets the device_type_value of this AlgorithmRulesComparisonValue.

        Device type value.

        :return: The device_type_value of this AlgorithmRulesComparisonValue.
        :rtype: str
        """
        return self._device_type_value

    @device_type_value.setter
    def device_type_value(self, device_type_value):
        """Sets the device_type_value of this AlgorithmRulesComparisonValue.

        Device type value.

        :param device_type_value: The device_type_value of this AlgorithmRulesComparisonValue.
        :type device_type_value: str
        """
        allowed_values = ["RULE_DEVICE_TYPE_UNSPECIFIED", "RULE_DEVICE_TYPE_COMPUTER", "RULE_DEVICE_TYPE_CONNECTED_TV", "RULE_DEVICE_TYPE_SMART_PHONE", "RULE_DEVICE_TYPE_TABLET", "RULE_DEVICE_TYPE_CONNECTED_DEVICE", "RULE_DEVICE_TYPE_SET_TOP_BOX"]  # noqa: E501
        if device_type_value not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type_value` ({0}), must be one of {1}"
                .format(device_type_value, allowed_values)
            )

        self._device_type_value = device_type_value

    @property
    def double_value(self):
        """Gets the double_value of this AlgorithmRulesComparisonValue.

        Double value.

        :return: The double_value of this AlgorithmRulesComparisonValue.
        :rtype: float
        """
        return self._double_value

    @double_value.setter
    def double_value(self, double_value):
        """Sets the double_value of this AlgorithmRulesComparisonValue.

        Double value.

        :param double_value: The double_value of this AlgorithmRulesComparisonValue.
        :type double_value: float
        """

        self._double_value = double_value

    @property
    def environment_value(self):
        """Gets the environment_value of this AlgorithmRulesComparisonValue.

        Environment value.

        :return: The environment_value of this AlgorithmRulesComparisonValue.
        :rtype: str
        """
        return self._environment_value

    @environment_value.setter
    def environment_value(self, environment_value):
        """Sets the environment_value of this AlgorithmRulesComparisonValue.

        Environment value.

        :param environment_value: The environment_value of this AlgorithmRulesComparisonValue.
        :type environment_value: str
        """
        allowed_values = ["ENVIRONMENT_UNSPECIFIED", "ENVIRONMENT_WEB_OPTIMIZED", "ENVIRONMENT_WEB_NOT_OPTIMIZED", "ENVIRONMENT_APP"]  # noqa: E501
        if environment_value not in allowed_values:
            raise ValueError(
                "Invalid value for `environment_value` ({0}), must be one of {1}"
                .format(environment_value, allowed_values)
            )

        self._environment_value = environment_value

    @property
    def exchange_value(self):
        """Gets the exchange_value of this AlgorithmRulesComparisonValue.

        Exchange value.

        :return: The exchange_value of this AlgorithmRulesComparisonValue.
        :rtype: str
        """
        return self._exchange_value

    @exchange_value.setter
    def exchange_value(self, exchange_value):
        """Sets the exchange_value of this AlgorithmRulesComparisonValue.

        Exchange value.

        :param exchange_value: The exchange_value of this AlgorithmRulesComparisonValue.
        :type exchange_value: str
        """
        allowed_values = ["EXCHANGE_UNSPECIFIED", "EXCHANGE_GOOGLE_AD_MANAGER", "EXCHANGE_APPNEXUS", "EXCHANGE_BRIGHTROLL", "EXCHANGE_ADFORM", "EXCHANGE_ADMETA", "EXCHANGE_ADMIXER", "EXCHANGE_ADSMOGO", "EXCHANGE_ADSWIZZ", "EXCHANGE_BIDSWITCH", "EXCHANGE_BRIGHTROLL_DISPLAY", "EXCHANGE_CADREON", "EXCHANGE_DAILYMOTION", "EXCHANGE_FIVE", "EXCHANGE_FLUCT", "EXCHANGE_FREEWHEEL", "EXCHANGE_GENIEE", "EXCHANGE_GUMGUM", "EXCHANGE_IMOBILE", "EXCHANGE_IBILLBOARD", "EXCHANGE_IMPROVE_DIGITAL", "EXCHANGE_INDEX", "EXCHANGE_KARGO", "EXCHANGE_MICROAD", "EXCHANGE_MOPUB", "EXCHANGE_NEND", "EXCHANGE_ONE_BY_AOL_DISPLAY", "EXCHANGE_ONE_BY_AOL_MOBILE", "EXCHANGE_ONE_BY_AOL_VIDEO", "EXCHANGE_OOYALA", "EXCHANGE_OPENX", "EXCHANGE_PERMODO", "EXCHANGE_PLATFORMONE", "EXCHANGE_PLATFORMID", "EXCHANGE_PUBMATIC", "EXCHANGE_PULSEPOINT", "EXCHANGE_REVENUEMAX", "EXCHANGE_RUBICON", "EXCHANGE_SMARTCLIP", "EXCHANGE_SMARTRTB", "EXCHANGE_SMARTSTREAMTV", "EXCHANGE_SOVRN", "EXCHANGE_SPOTXCHANGE", "EXCHANGE_STROER", "EXCHANGE_TEADSTV", "EXCHANGE_TELARIA", "EXCHANGE_TVN", "EXCHANGE_UNITED", "EXCHANGE_YIELDLAB", "EXCHANGE_YIELDMO", "EXCHANGE_UNRULYX", "EXCHANGE_OPEN8", "EXCHANGE_TRITON", "EXCHANGE_TRIPLELIFT", "EXCHANGE_TABOOLA", "EXCHANGE_INMOBI", "EXCHANGE_SMAATO", "EXCHANGE_AJA", "EXCHANGE_SUPERSHIP", "EXCHANGE_NEXSTAR_DIGITAL", "EXCHANGE_WAZE", "EXCHANGE_SOUNDCAST", "EXCHANGE_SHARETHROUGH", "EXCHANGE_FYBER", "EXCHANGE_RED_FOR_PUBLISHERS", "EXCHANGE_MEDIANET", "EXCHANGE_TAPJOY", "EXCHANGE_VISTAR", "EXCHANGE_DAX", "EXCHANGE_JCD", "EXCHANGE_PLACE_EXCHANGE", "EXCHANGE_APPLOVIN", "EXCHANGE_CONNATIX", "EXCHANGE_RESET_DIGITAL", "EXCHANGE_HIVESTACK", "EXCHANGE_APPLOVIN_GBID", "EXCHANGE_FYBER_GBID", "EXCHANGE_UNITY_GBID", "EXCHANGE_CHARTBOOST_GBID", "EXCHANGE_ADMOST_GBID", "EXCHANGE_TOPON_GBID"]  # noqa: E501
        if exchange_value not in allowed_values:
            raise ValueError(
                "Invalid value for `exchange_value` ({0}), must be one of {1}"
                .format(exchange_value, allowed_values)
            )

        self._exchange_value = exchange_value

    @property
    def int64_value(self):
        """Gets the int64_value of this AlgorithmRulesComparisonValue.

        Integer value.

        :return: The int64_value of this AlgorithmRulesComparisonValue.
        :rtype: str
        """
        return self._int64_value

    @int64_value.setter
    def int64_value(self, int64_value):
        """Sets the int64_value of this AlgorithmRulesComparisonValue.

        Integer value.

        :param int64_value: The int64_value of this AlgorithmRulesComparisonValue.
        :type int64_value: str
        """

        self._int64_value = int64_value

    @property
    def on_screen_position_value(self):
        """Gets the on_screen_position_value of this AlgorithmRulesComparisonValue.

        Ad position value.

        :return: The on_screen_position_value of this AlgorithmRulesComparisonValue.
        :rtype: str
        """
        return self._on_screen_position_value

    @on_screen_position_value.setter
    def on_screen_position_value(self, on_screen_position_value):
        """Sets the on_screen_position_value of this AlgorithmRulesComparisonValue.

        Ad position value.

        :param on_screen_position_value: The on_screen_position_value of this AlgorithmRulesComparisonValue.
        :type on_screen_position_value: str
        """
        allowed_values = ["ON_SCREEN_POSITION_UNSPECIFIED", "ON_SCREEN_POSITION_UNKNOWN", "ON_SCREEN_POSITION_ABOVE_THE_FOLD", "ON_SCREEN_POSITION_BELOW_THE_FOLD"]  # noqa: E501
        if on_screen_position_value not in allowed_values:
            raise ValueError(
                "Invalid value for `on_screen_position_value` ({0}), must be one of {1}"
                .format(on_screen_position_value, allowed_values)
            )

        self._on_screen_position_value = on_screen_position_value

    @property
    def string_value(self):
        """Gets the string_value of this AlgorithmRulesComparisonValue.

        String value.

        :return: The string_value of this AlgorithmRulesComparisonValue.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this AlgorithmRulesComparisonValue.

        String value.

        :param string_value: The string_value of this AlgorithmRulesComparisonValue.
        :type string_value: str
        """

        self._string_value = string_value
