# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssignedLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assigned_location_id: str=None, name: str=None, targeting_option_id: str=None):
        """AssignedLocation - a model defined in OpenAPI

        :param assigned_location_id: The assigned_location_id of this AssignedLocation.
        :param name: The name of this AssignedLocation.
        :param targeting_option_id: The targeting_option_id of this AssignedLocation.
        """
        self.openapi_types = {
            'assigned_location_id': str,
            'name': str,
            'targeting_option_id': str
        }

        self.attribute_map = {
            'assigned_location_id': 'assignedLocationId',
            'name': 'name',
            'targeting_option_id': 'targetingOptionId'
        }

        self._assigned_location_id = assigned_location_id
        self._name = name
        self._targeting_option_id = targeting_option_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssignedLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssignedLocation of this AssignedLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assigned_location_id(self):
        """Gets the assigned_location_id of this AssignedLocation.

        Output only. The unique ID of the assigned location. The ID is only unique within a location list. It may be reused in other contexts.

        :return: The assigned_location_id of this AssignedLocation.
        :rtype: str
        """
        return self._assigned_location_id

    @assigned_location_id.setter
    def assigned_location_id(self, assigned_location_id):
        """Sets the assigned_location_id of this AssignedLocation.

        Output only. The unique ID of the assigned location. The ID is only unique within a location list. It may be reused in other contexts.

        :param assigned_location_id: The assigned_location_id of this AssignedLocation.
        :type assigned_location_id: str
        """

        self._assigned_location_id = assigned_location_id

    @property
    def name(self):
        """Gets the name of this AssignedLocation.

        Output only. The resource name of the assigned location.

        :return: The name of this AssignedLocation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssignedLocation.

        Output only. The resource name of the assigned location.

        :param name: The name of this AssignedLocation.
        :type name: str
        """

        self._name = name

    @property
    def targeting_option_id(self):
        """Gets the targeting_option_id of this AssignedLocation.

        Required. The ID of the targeting option assigned to the location list.

        :return: The targeting_option_id of this AssignedLocation.
        :rtype: str
        """
        return self._targeting_option_id

    @targeting_option_id.setter
    def targeting_option_id(self, targeting_option_id):
        """Sets the targeting_option_id of this AssignedLocation.

        Required. The ID of the targeting option assigned to the location list.

        :param targeting_option_id: The targeting_option_id of this AssignedLocation.
        :type targeting_option_id: str
        """

        self._targeting_option_id = targeting_option_id
