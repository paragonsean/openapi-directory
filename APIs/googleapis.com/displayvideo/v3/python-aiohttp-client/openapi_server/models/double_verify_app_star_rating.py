# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DoubleVerifyAppStarRating(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avoid_insufficient_star_rating: bool=None, avoided_star_rating: str=None):
        """DoubleVerifyAppStarRating - a model defined in OpenAPI

        :param avoid_insufficient_star_rating: The avoid_insufficient_star_rating of this DoubleVerifyAppStarRating.
        :param avoided_star_rating: The avoided_star_rating of this DoubleVerifyAppStarRating.
        """
        self.openapi_types = {
            'avoid_insufficient_star_rating': bool,
            'avoided_star_rating': str
        }

        self.attribute_map = {
            'avoid_insufficient_star_rating': 'avoidInsufficientStarRating',
            'avoided_star_rating': 'avoidedStarRating'
        }

        self._avoid_insufficient_star_rating = avoid_insufficient_star_rating
        self._avoided_star_rating = avoided_star_rating

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DoubleVerifyAppStarRating':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DoubleVerifyAppStarRating of this DoubleVerifyAppStarRating.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avoid_insufficient_star_rating(self):
        """Gets the avoid_insufficient_star_rating of this DoubleVerifyAppStarRating.

        Avoid bidding on apps with insufficient star ratings.

        :return: The avoid_insufficient_star_rating of this DoubleVerifyAppStarRating.
        :rtype: bool
        """
        return self._avoid_insufficient_star_rating

    @avoid_insufficient_star_rating.setter
    def avoid_insufficient_star_rating(self, avoid_insufficient_star_rating):
        """Sets the avoid_insufficient_star_rating of this DoubleVerifyAppStarRating.

        Avoid bidding on apps with insufficient star ratings.

        :param avoid_insufficient_star_rating: The avoid_insufficient_star_rating of this DoubleVerifyAppStarRating.
        :type avoid_insufficient_star_rating: bool
        """

        self._avoid_insufficient_star_rating = avoid_insufficient_star_rating

    @property
    def avoided_star_rating(self):
        """Gets the avoided_star_rating of this DoubleVerifyAppStarRating.

        Avoid bidding on apps with the star ratings.

        :return: The avoided_star_rating of this DoubleVerifyAppStarRating.
        :rtype: str
        """
        return self._avoided_star_rating

    @avoided_star_rating.setter
    def avoided_star_rating(self, avoided_star_rating):
        """Sets the avoided_star_rating of this DoubleVerifyAppStarRating.

        Avoid bidding on apps with the star ratings.

        :param avoided_star_rating: The avoided_star_rating of this DoubleVerifyAppStarRating.
        :type avoided_star_rating: str
        """
        allowed_values = ["APP_STAR_RATE_UNSPECIFIED", "APP_STAR_RATE_1_POINT_5_LESS", "APP_STAR_RATE_2_LESS", "APP_STAR_RATE_2_POINT_5_LESS", "APP_STAR_RATE_3_LESS", "APP_STAR_RATE_3_POINT_5_LESS", "APP_STAR_RATE_4_LESS", "APP_STAR_RATE_4_POINT_5_LESS"]  # noqa: E501
        if avoided_star_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `avoided_star_rating` ({0}), must be one of {1}"
                .format(avoided_star_rating, allowed_values)
            )

        self._avoided_star_rating = avoided_star_rating
