# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UniversalAdId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, registry: str=None):
        """UniversalAdId - a model defined in OpenAPI

        :param id: The id of this UniversalAdId.
        :param registry: The registry of this UniversalAdId.
        """
        self.openapi_types = {
            'id': str,
            'registry': str
        }

        self.attribute_map = {
            'id': 'id',
            'registry': 'registry'
        }

        self._id = id
        self._registry = registry

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UniversalAdId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UniversalAdId of this UniversalAdId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UniversalAdId.

        The unique creative identifier.

        :return: The id of this UniversalAdId.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UniversalAdId.

        The unique creative identifier.

        :param id: The id of this UniversalAdId.
        :type id: str
        """

        self._id = id

    @property
    def registry(self):
        """Gets the registry of this UniversalAdId.

        The registry provides unique creative identifiers.

        :return: The registry of this UniversalAdId.
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this UniversalAdId.

        The registry provides unique creative identifiers.

        :param registry: The registry of this UniversalAdId.
        :type registry: str
        """
        allowed_values = ["UNIVERSAL_AD_REGISTRY_UNSPECIFIED", "UNIVERSAL_AD_REGISTRY_OTHER", "UNIVERSAL_AD_REGISTRY_AD_ID", "UNIVERSAL_AD_REGISTRY_CLEARCAST", "UNIVERSAL_AD_REGISTRY_DV360", "UNIVERSAL_AD_REGISTRY_CM"]  # noqa: E501
        if registry not in allowed_values:
            raise ValueError(
                "Invalid value for `registry` ({0}), must be one of {1}"
                .format(registry, allowed_values)
            )

        self._registry = registry
