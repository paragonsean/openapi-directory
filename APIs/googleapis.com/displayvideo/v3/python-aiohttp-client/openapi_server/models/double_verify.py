# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.double_verify_app_star_rating import DoubleVerifyAppStarRating
from openapi_server.models.double_verify_brand_safety_categories import DoubleVerifyBrandSafetyCategories
from openapi_server.models.double_verify_display_viewability import DoubleVerifyDisplayViewability
from openapi_server.models.double_verify_fraud_invalid_traffic import DoubleVerifyFraudInvalidTraffic
from openapi_server.models.double_verify_video_viewability import DoubleVerifyVideoViewability
from openapi_server import util


class DoubleVerify(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_star_rating: DoubleVerifyAppStarRating=None, avoided_age_ratings: List[str]=None, brand_safety_categories: DoubleVerifyBrandSafetyCategories=None, custom_segment_id: str=None, display_viewability: DoubleVerifyDisplayViewability=None, fraud_invalid_traffic: DoubleVerifyFraudInvalidTraffic=None, video_viewability: DoubleVerifyVideoViewability=None):
        """DoubleVerify - a model defined in OpenAPI

        :param app_star_rating: The app_star_rating of this DoubleVerify.
        :param avoided_age_ratings: The avoided_age_ratings of this DoubleVerify.
        :param brand_safety_categories: The brand_safety_categories of this DoubleVerify.
        :param custom_segment_id: The custom_segment_id of this DoubleVerify.
        :param display_viewability: The display_viewability of this DoubleVerify.
        :param fraud_invalid_traffic: The fraud_invalid_traffic of this DoubleVerify.
        :param video_viewability: The video_viewability of this DoubleVerify.
        """
        self.openapi_types = {
            'app_star_rating': DoubleVerifyAppStarRating,
            'avoided_age_ratings': List[str],
            'brand_safety_categories': DoubleVerifyBrandSafetyCategories,
            'custom_segment_id': str,
            'display_viewability': DoubleVerifyDisplayViewability,
            'fraud_invalid_traffic': DoubleVerifyFraudInvalidTraffic,
            'video_viewability': DoubleVerifyVideoViewability
        }

        self.attribute_map = {
            'app_star_rating': 'appStarRating',
            'avoided_age_ratings': 'avoidedAgeRatings',
            'brand_safety_categories': 'brandSafetyCategories',
            'custom_segment_id': 'customSegmentId',
            'display_viewability': 'displayViewability',
            'fraud_invalid_traffic': 'fraudInvalidTraffic',
            'video_viewability': 'videoViewability'
        }

        self._app_star_rating = app_star_rating
        self._avoided_age_ratings = avoided_age_ratings
        self._brand_safety_categories = brand_safety_categories
        self._custom_segment_id = custom_segment_id
        self._display_viewability = display_viewability
        self._fraud_invalid_traffic = fraud_invalid_traffic
        self._video_viewability = video_viewability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DoubleVerify':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DoubleVerify of this DoubleVerify.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_star_rating(self):
        """Gets the app_star_rating of this DoubleVerify.


        :return: The app_star_rating of this DoubleVerify.
        :rtype: DoubleVerifyAppStarRating
        """
        return self._app_star_rating

    @app_star_rating.setter
    def app_star_rating(self, app_star_rating):
        """Sets the app_star_rating of this DoubleVerify.


        :param app_star_rating: The app_star_rating of this DoubleVerify.
        :type app_star_rating: DoubleVerifyAppStarRating
        """

        self._app_star_rating = app_star_rating

    @property
    def avoided_age_ratings(self):
        """Gets the avoided_age_ratings of this DoubleVerify.

        Avoid bidding on apps with the age rating.

        :return: The avoided_age_ratings of this DoubleVerify.
        :rtype: List[str]
        """
        return self._avoided_age_ratings

    @avoided_age_ratings.setter
    def avoided_age_ratings(self, avoided_age_ratings):
        """Sets the avoided_age_ratings of this DoubleVerify.

        Avoid bidding on apps with the age rating.

        :param avoided_age_ratings: The avoided_age_ratings of this DoubleVerify.
        :type avoided_age_ratings: List[str]
        """
        allowed_values = ["AGE_RATING_UNSPECIFIED", "APP_AGE_RATE_UNKNOWN", "APP_AGE_RATE_4_PLUS", "APP_AGE_RATE_9_PLUS", "APP_AGE_RATE_12_PLUS", "APP_AGE_RATE_17_PLUS", "APP_AGE_RATE_18_PLUS"]  # noqa: E501
        if not set(avoided_age_ratings).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `avoided_age_ratings` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(avoided_age_ratings) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._avoided_age_ratings = avoided_age_ratings

    @property
    def brand_safety_categories(self):
        """Gets the brand_safety_categories of this DoubleVerify.


        :return: The brand_safety_categories of this DoubleVerify.
        :rtype: DoubleVerifyBrandSafetyCategories
        """
        return self._brand_safety_categories

    @brand_safety_categories.setter
    def brand_safety_categories(self, brand_safety_categories):
        """Sets the brand_safety_categories of this DoubleVerify.


        :param brand_safety_categories: The brand_safety_categories of this DoubleVerify.
        :type brand_safety_categories: DoubleVerifyBrandSafetyCategories
        """

        self._brand_safety_categories = brand_safety_categories

    @property
    def custom_segment_id(self):
        """Gets the custom_segment_id of this DoubleVerify.

        The custom segment ID provided by DoubleVerify. The ID must start with \"51\" and consist of eight digits. Custom segment ID cannot be specified along with any of the following fields: * brand_safety_categories * avoided_age_ratings * app_star_rating * fraud_invalid_traffic

        :return: The custom_segment_id of this DoubleVerify.
        :rtype: str
        """
        return self._custom_segment_id

    @custom_segment_id.setter
    def custom_segment_id(self, custom_segment_id):
        """Sets the custom_segment_id of this DoubleVerify.

        The custom segment ID provided by DoubleVerify. The ID must start with \"51\" and consist of eight digits. Custom segment ID cannot be specified along with any of the following fields: * brand_safety_categories * avoided_age_ratings * app_star_rating * fraud_invalid_traffic

        :param custom_segment_id: The custom_segment_id of this DoubleVerify.
        :type custom_segment_id: str
        """

        self._custom_segment_id = custom_segment_id

    @property
    def display_viewability(self):
        """Gets the display_viewability of this DoubleVerify.


        :return: The display_viewability of this DoubleVerify.
        :rtype: DoubleVerifyDisplayViewability
        """
        return self._display_viewability

    @display_viewability.setter
    def display_viewability(self, display_viewability):
        """Sets the display_viewability of this DoubleVerify.


        :param display_viewability: The display_viewability of this DoubleVerify.
        :type display_viewability: DoubleVerifyDisplayViewability
        """

        self._display_viewability = display_viewability

    @property
    def fraud_invalid_traffic(self):
        """Gets the fraud_invalid_traffic of this DoubleVerify.


        :return: The fraud_invalid_traffic of this DoubleVerify.
        :rtype: DoubleVerifyFraudInvalidTraffic
        """
        return self._fraud_invalid_traffic

    @fraud_invalid_traffic.setter
    def fraud_invalid_traffic(self, fraud_invalid_traffic):
        """Sets the fraud_invalid_traffic of this DoubleVerify.


        :param fraud_invalid_traffic: The fraud_invalid_traffic of this DoubleVerify.
        :type fraud_invalid_traffic: DoubleVerifyFraudInvalidTraffic
        """

        self._fraud_invalid_traffic = fraud_invalid_traffic

    @property
    def video_viewability(self):
        """Gets the video_viewability of this DoubleVerify.


        :return: The video_viewability of this DoubleVerify.
        :rtype: DoubleVerifyVideoViewability
        """
        return self._video_viewability

    @video_viewability.setter
    def video_viewability(self, video_viewability):
        """Sets the video_viewability of this DoubleVerify.


        :param video_viewability: The video_viewability of this DoubleVerify.
        :type video_viewability: DoubleVerifyVideoViewability
        """

        self._video_viewability = video_viewability
