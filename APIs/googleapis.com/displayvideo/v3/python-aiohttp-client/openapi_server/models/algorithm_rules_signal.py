# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlgorithmRulesSignal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, impression_signal: str=None):
        """AlgorithmRulesSignal - a model defined in OpenAPI

        :param impression_signal: The impression_signal of this AlgorithmRulesSignal.
        """
        self.openapi_types = {
            'impression_signal': str
        }

        self.attribute_map = {
            'impression_signal': 'impressionSignal'
        }

        self._impression_signal = impression_signal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlgorithmRulesSignal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlgorithmRulesSignal of this AlgorithmRulesSignal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def impression_signal(self):
        """Gets the impression_signal of this AlgorithmRulesSignal.

        Signal based on impressions.

        :return: The impression_signal of this AlgorithmRulesSignal.
        :rtype: str
        """
        return self._impression_signal

    @impression_signal.setter
    def impression_signal(self, impression_signal):
        """Sets the impression_signal of this AlgorithmRulesSignal.

        Signal based on impressions.

        :param impression_signal: The impression_signal of this AlgorithmRulesSignal.
        :type impression_signal: str
        """
        allowed_values = ["IMPRESSION_SIGNAL_UNSPECIFIED", "DAY_AND_TIME", "DEVICE_TYPE", "AD_POSITION", "OPERATING_SYSTEM_ID", "MOBILE_MODEL_ID", "EXCHANGE", "ENVIRONMENT", "COUNTRY_ID", "CITY_ID", "BROWSER_ID", "CREATIVE_DIMENSION"]  # noqa: E501
        if impression_signal not in allowed_values:
            raise ValueError(
                "Invalid value for `impression_signal` ({0}), must be one of {1}"
                .format(impression_signal, allowed_values)
            )

        self._impression_signal = impression_signal
