# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ParentalStatusAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parental_status: str=None):
        """ParentalStatusAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param parental_status: The parental_status of this ParentalStatusAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'parental_status': str
        }

        self.attribute_map = {
            'parental_status': 'parentalStatus'
        }

        self._parental_status = parental_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParentalStatusAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParentalStatusAssignedTargetingOptionDetails of this ParentalStatusAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parental_status(self):
        """Gets the parental_status of this ParentalStatusAssignedTargetingOptionDetails.

        Required. The parental status of the audience.

        :return: The parental_status of this ParentalStatusAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._parental_status

    @parental_status.setter
    def parental_status(self, parental_status):
        """Sets the parental_status of this ParentalStatusAssignedTargetingOptionDetails.

        Required. The parental status of the audience.

        :param parental_status: The parental_status of this ParentalStatusAssignedTargetingOptionDetails.
        :type parental_status: str
        """
        allowed_values = ["PARENTAL_STATUS_UNSPECIFIED", "PARENTAL_STATUS_PARENT", "PARENTAL_STATUS_NOT_A_PARENT", "PARENTAL_STATUS_UNKNOWN"]  # noqa: E501
        if parental_status not in allowed_values:
            raise ValueError(
                "Invalid value for `parental_status` ({0}), must be one of {1}"
                .format(parental_status, allowed_values)
            )

        self._parental_status = parental_status
