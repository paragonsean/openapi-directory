/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EditInventorySourceReadWriteAccessorsRequest;
import org.openapitools.client.model.InventorySource;
import org.openapitools.client.model.InventorySourceAccessors;
import org.openapitools.client.model.ListInventorySourcesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InventorySourcesApi
 */
@Disabled
public class InventorySourcesApiTest {

    private final InventorySourcesApi api = new InventorySourcesApi();

    /**
     * Creates a new inventory source. Returns the newly created inventory source if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoInventorySourcesCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        String partnerId = null;
        InventorySource inventorySource = null;
        InventorySource response = api.displayvideoInventorySourcesCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, partnerId, inventorySource);
        // TODO: test validations
    }

    /**
     * Edits read/write accessors of an inventory source. Returns the updated read_write_accessors for the inventory source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoInventorySourcesEditInventorySourceReadWriteAccessorsTest() throws ApiException {
        String inventorySourceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EditInventorySourceReadWriteAccessorsRequest editInventorySourceReadWriteAccessorsRequest = null;
        InventorySourceAccessors response = api.displayvideoInventorySourcesEditInventorySourceReadWriteAccessors(inventorySourceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, editInventorySourceReadWriteAccessorsRequest);
        // TODO: test validations
    }

    /**
     * Gets an inventory source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoInventorySourcesGetTest() throws ApiException {
        String inventorySourceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        String partnerId = null;
        InventorySource response = api.displayvideoInventorySourcesGet(inventorySourceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, partnerId);
        // TODO: test validations
    }

    /**
     * Lists inventory sources that are accessible to the current user. The order is defined by the order_by parameter. If a filter by entity_status is not specified, inventory sources with entity status &#x60;ENTITY_STATUS_ARCHIVED&#x60; will not be included in the results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoInventorySourcesListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String partnerId = null;
        ListInventorySourcesResponse response = api.displayvideoInventorySourcesList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, filter, orderBy, pageSize, pageToken, partnerId);
        // TODO: test validations
    }

    /**
     * Updates an existing inventory source. Returns the updated inventory source if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoInventorySourcesPatchTest() throws ApiException {
        String inventorySourceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        String partnerId = null;
        String updateMask = null;
        InventorySource inventorySource = null;
        InventorySource response = api.displayvideoInventorySourcesPatch(inventorySourceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, partnerId, updateMask, inventorySource);
        // TODO: test validations
    }

}
