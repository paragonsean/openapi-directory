/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssignedInventorySource;
import org.openapitools.client.model.BulkEditAssignedInventorySourcesRequest;
import org.openapitools.client.model.BulkEditAssignedInventorySourcesResponse;
import org.openapitools.client.model.InventorySourceGroup;
import org.openapitools.client.model.ListAssignedInventorySourcesResponse;
import org.openapitools.client.model.ListInventorySourceGroupsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InventorySourceGroupsApi
 */
@Disabled
public class InventorySourceGroupsApiTest {

    private final InventorySourceGroupsApi api = new InventorySourceGroupsApi();

    /**
     * Bulk edits multiple assignments between inventory sources and a single inventory source group. The operation will delete the assigned inventory sources provided in BulkEditAssignedInventorySourcesRequest.deleted_assigned_inventory_sources and then create the assigned inventory sources provided in BulkEditAssignedInventorySourcesRequest.created_assigned_inventory_sources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditTest() throws ApiException {
        String inventorySourceGroupId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BulkEditAssignedInventorySourcesRequest bulkEditAssignedInventorySourcesRequest = null;
        BulkEditAssignedInventorySourcesResponse response = api.displayvideoInventorySourceGroupsAssignedInventorySourcesBulkEdit(inventorySourceGroupId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, bulkEditAssignedInventorySourcesRequest);
        // TODO: test validations
    }

    /**
     * Creates an assignment between an inventory source and an inventory source group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoInventorySourceGroupsAssignedInventorySourcesCreateTest() throws ApiException {
        String inventorySourceGroupId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        String partnerId = null;
        AssignedInventorySource assignedInventorySource = null;
        AssignedInventorySource response = api.displayvideoInventorySourceGroupsAssignedInventorySourcesCreate(inventorySourceGroupId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, partnerId, assignedInventorySource);
        // TODO: test validations
    }

    /**
     * Deletes the assignment between an inventory source and an inventory source group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoInventorySourceGroupsAssignedInventorySourcesDeleteTest() throws ApiException {
        String inventorySourceGroupId = null;
        String assignedInventorySourceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        String partnerId = null;
        Object response = api.displayvideoInventorySourceGroupsAssignedInventorySourcesDelete(inventorySourceGroupId, assignedInventorySourceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, partnerId);
        // TODO: test validations
    }

    /**
     * Lists inventory sources assigned to an inventory source group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoInventorySourceGroupsAssignedInventorySourcesListTest() throws ApiException {
        String inventorySourceGroupId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String partnerId = null;
        ListAssignedInventorySourcesResponse response = api.displayvideoInventorySourceGroupsAssignedInventorySourcesList(inventorySourceGroupId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, filter, orderBy, pageSize, pageToken, partnerId);
        // TODO: test validations
    }

    /**
     * Creates a new inventory source group. Returns the newly created inventory source group if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoInventorySourceGroupsCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        String partnerId = null;
        InventorySourceGroup inventorySourceGroup = null;
        InventorySourceGroup response = api.displayvideoInventorySourceGroupsCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, partnerId, inventorySourceGroup);
        // TODO: test validations
    }

    /**
     * Deletes an inventory source group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoInventorySourceGroupsDeleteTest() throws ApiException {
        String inventorySourceGroupId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        String partnerId = null;
        Object response = api.displayvideoInventorySourceGroupsDelete(inventorySourceGroupId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, partnerId);
        // TODO: test validations
    }

    /**
     * Gets an inventory source group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoInventorySourceGroupsGetTest() throws ApiException {
        String inventorySourceGroupId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        String partnerId = null;
        InventorySourceGroup response = api.displayvideoInventorySourceGroupsGet(inventorySourceGroupId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, partnerId);
        // TODO: test validations
    }

    /**
     * Lists inventory source groups that are accessible to the current user. The order is defined by the order_by parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoInventorySourceGroupsListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String partnerId = null;
        ListInventorySourceGroupsResponse response = api.displayvideoInventorySourceGroupsList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, filter, orderBy, pageSize, pageToken, partnerId);
        // TODO: test validations
    }

}
