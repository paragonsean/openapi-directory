/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of DoubleVerify video viewability settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DoubleVerifyVideoViewability {
  /**
   * Target inventory to maximize impressions with 400x300 or greater player size.
   */
  @JsonAdapter(PlayerImpressionRateEnum.Adapter.class)
  public enum PlayerImpressionRateEnum {
    UNSPECIFIED("PLAYER_SIZE_400X300_UNSPECIFIED"),
    
    _95("PLAYER_SIZE_400X300_95"),
    
    _70("PLAYER_SIZE_400X300_70"),
    
    _25("PLAYER_SIZE_400X300_25"),
    
    _5("PLAYER_SIZE_400X300_5");

    private String value;

    PlayerImpressionRateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlayerImpressionRateEnum fromValue(String value) {
      for (PlayerImpressionRateEnum b : PlayerImpressionRateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlayerImpressionRateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlayerImpressionRateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlayerImpressionRateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlayerImpressionRateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlayerImpressionRateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLAYER_IMPRESSION_RATE = "playerImpressionRate";
  @SerializedName(SERIALIZED_NAME_PLAYER_IMPRESSION_RATE)
  private PlayerImpressionRateEnum playerImpressionRate;

  /**
   * Target web inventory to maximize IAB viewable rate.
   */
  @JsonAdapter(VideoIabEnum.Adapter.class)
  public enum VideoIabEnum {
    VIDEO_IAB_UNSPECIFIED("VIDEO_IAB_UNSPECIFIED"),
    
    IAB_VIEWABILITY_80_PERCENT_HIGHER("IAB_VIEWABILITY_80_PERCENT_HIGHER"),
    
    IAB_VIEWABILITY_75_PERCENT_HIGHER("IAB_VIEWABILITY_75_PERCENT_HIGHER"),
    
    IAB_VIEWABILITY_70_PERCENT_HIGHER("IAB_VIEWABILITY_70_PERCENT_HIGHER"),
    
    IAB_VIEWABILITY_65_PERCENT_HIHGER("IAB_VIEWABILITY_65_PERCENT_HIHGER"),
    
    IAB_VIEWABILITY_60_PERCENT_HIGHER("IAB_VIEWABILITY_60_PERCENT_HIGHER"),
    
    IAB_VIEWABILITY_55_PERCENT_HIHGER("IAB_VIEWABILITY_55_PERCENT_HIHGER"),
    
    IAB_VIEWABILITY_50_PERCENT_HIGHER("IAB_VIEWABILITY_50_PERCENT_HIGHER"),
    
    IAB_VIEWABILITY_40_PERCENT_HIHGER("IAB_VIEWABILITY_40_PERCENT_HIHGER"),
    
    IAB_VIEWABILITY_30_PERCENT_HIHGER("IAB_VIEWABILITY_30_PERCENT_HIHGER");

    private String value;

    VideoIabEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VideoIabEnum fromValue(String value) {
      for (VideoIabEnum b : VideoIabEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VideoIabEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VideoIabEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VideoIabEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VideoIabEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VideoIabEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIDEO_IAB = "videoIab";
  @SerializedName(SERIALIZED_NAME_VIDEO_IAB)
  private VideoIabEnum videoIab;

  /**
   * Target web inventory to maximize fully viewable rate.
   */
  @JsonAdapter(VideoViewableRateEnum.Adapter.class)
  public enum VideoViewableRateEnum {
    VIDEO_VIEWABLE_RATE_UNSPECIFIED("VIDEO_VIEWABLE_RATE_UNSPECIFIED"),
    
    VIEWED_PERFORMANCE_40_PERCENT_HIGHER("VIEWED_PERFORMANCE_40_PERCENT_HIGHER"),
    
    VIEWED_PERFORMANCE_35_PERCENT_HIGHER("VIEWED_PERFORMANCE_35_PERCENT_HIGHER"),
    
    VIEWED_PERFORMANCE_30_PERCENT_HIGHER("VIEWED_PERFORMANCE_30_PERCENT_HIGHER"),
    
    VIEWED_PERFORMANCE_25_PERCENT_HIGHER("VIEWED_PERFORMANCE_25_PERCENT_HIGHER"),
    
    VIEWED_PERFORMANCE_20_PERCENT_HIGHER("VIEWED_PERFORMANCE_20_PERCENT_HIGHER"),
    
    VIEWED_PERFORMANCE_10_PERCENT_HIGHER("VIEWED_PERFORMANCE_10_PERCENT_HIGHER");

    private String value;

    VideoViewableRateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VideoViewableRateEnum fromValue(String value) {
      for (VideoViewableRateEnum b : VideoViewableRateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VideoViewableRateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VideoViewableRateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VideoViewableRateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VideoViewableRateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VideoViewableRateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIDEO_VIEWABLE_RATE = "videoViewableRate";
  @SerializedName(SERIALIZED_NAME_VIDEO_VIEWABLE_RATE)
  private VideoViewableRateEnum videoViewableRate;

  public DoubleVerifyVideoViewability() {
  }

  public DoubleVerifyVideoViewability playerImpressionRate(PlayerImpressionRateEnum playerImpressionRate) {
    this.playerImpressionRate = playerImpressionRate;
    return this;
  }

  /**
   * Target inventory to maximize impressions with 400x300 or greater player size.
   * @return playerImpressionRate
   */
  @javax.annotation.Nullable
  public PlayerImpressionRateEnum getPlayerImpressionRate() {
    return playerImpressionRate;
  }

  public void setPlayerImpressionRate(PlayerImpressionRateEnum playerImpressionRate) {
    this.playerImpressionRate = playerImpressionRate;
  }


  public DoubleVerifyVideoViewability videoIab(VideoIabEnum videoIab) {
    this.videoIab = videoIab;
    return this;
  }

  /**
   * Target web inventory to maximize IAB viewable rate.
   * @return videoIab
   */
  @javax.annotation.Nullable
  public VideoIabEnum getVideoIab() {
    return videoIab;
  }

  public void setVideoIab(VideoIabEnum videoIab) {
    this.videoIab = videoIab;
  }


  public DoubleVerifyVideoViewability videoViewableRate(VideoViewableRateEnum videoViewableRate) {
    this.videoViewableRate = videoViewableRate;
    return this;
  }

  /**
   * Target web inventory to maximize fully viewable rate.
   * @return videoViewableRate
   */
  @javax.annotation.Nullable
  public VideoViewableRateEnum getVideoViewableRate() {
    return videoViewableRate;
  }

  public void setVideoViewableRate(VideoViewableRateEnum videoViewableRate) {
    this.videoViewableRate = videoViewableRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoubleVerifyVideoViewability doubleVerifyVideoViewability = (DoubleVerifyVideoViewability) o;
    return Objects.equals(this.playerImpressionRate, doubleVerifyVideoViewability.playerImpressionRate) &&
        Objects.equals(this.videoIab, doubleVerifyVideoViewability.videoIab) &&
        Objects.equals(this.videoViewableRate, doubleVerifyVideoViewability.videoViewableRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(playerImpressionRate, videoIab, videoViewableRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoubleVerifyVideoViewability {\n");
    sb.append("    playerImpressionRate: ").append(toIndentedString(playerImpressionRate)).append("\n");
    sb.append("    videoIab: ").append(toIndentedString(videoIab)).append("\n");
    sb.append("    videoViewableRate: ").append(toIndentedString(videoViewableRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("playerImpressionRate");
    openapiFields.add("videoIab");
    openapiFields.add("videoViewableRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DoubleVerifyVideoViewability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DoubleVerifyVideoViewability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoubleVerifyVideoViewability is not found in the empty JSON string", DoubleVerifyVideoViewability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DoubleVerifyVideoViewability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoubleVerifyVideoViewability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("playerImpressionRate") != null && !jsonObj.get("playerImpressionRate").isJsonNull()) && !jsonObj.get("playerImpressionRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playerImpressionRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playerImpressionRate").toString()));
      }
      // validate the optional field `playerImpressionRate`
      if (jsonObj.get("playerImpressionRate") != null && !jsonObj.get("playerImpressionRate").isJsonNull()) {
        PlayerImpressionRateEnum.validateJsonElement(jsonObj.get("playerImpressionRate"));
      }
      if ((jsonObj.get("videoIab") != null && !jsonObj.get("videoIab").isJsonNull()) && !jsonObj.get("videoIab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoIab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoIab").toString()));
      }
      // validate the optional field `videoIab`
      if (jsonObj.get("videoIab") != null && !jsonObj.get("videoIab").isJsonNull()) {
        VideoIabEnum.validateJsonElement(jsonObj.get("videoIab"));
      }
      if ((jsonObj.get("videoViewableRate") != null && !jsonObj.get("videoViewableRate").isJsonNull()) && !jsonObj.get("videoViewableRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoViewableRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoViewableRate").toString()));
      }
      // validate the optional field `videoViewableRate`
      if (jsonObj.get("videoViewableRate") != null && !jsonObj.get("videoViewableRate").isJsonNull()) {
        VideoViewableRateEnum.validateJsonElement(jsonObj.get("videoViewableRate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoubleVerifyVideoViewability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoubleVerifyVideoViewability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoubleVerifyVideoViewability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoubleVerifyVideoViewability.class));

       return (TypeAdapter<T>) new TypeAdapter<DoubleVerifyVideoViewability>() {
           @Override
           public void write(JsonWriter out, DoubleVerifyVideoViewability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoubleVerifyVideoViewability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DoubleVerifyVideoViewability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DoubleVerifyVideoViewability
   * @throws IOException if the JSON string is invalid with respect to DoubleVerifyVideoViewability
   */
  public static DoubleVerifyVideoViewability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoubleVerifyVideoViewability.class);
  }

  /**
   * Convert an instance of DoubleVerifyVideoViewability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

