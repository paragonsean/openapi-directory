/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BiddingStrategy;
import org.openapitools.client.model.FrequencyCap;
import org.openapitools.client.model.InsertionOrderBudget;
import org.openapitools.client.model.IntegrationDetails;
import org.openapitools.client.model.Kpi;
import org.openapitools.client.model.Pacing;
import org.openapitools.client.model.PartnerCost;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single insertion order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InsertionOrder {
  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_BID_STRATEGY = "bidStrategy";
  @SerializedName(SERIALIZED_NAME_BID_STRATEGY)
  private BiddingStrategy bidStrategy;

  public static final String SERIALIZED_NAME_BUDGET = "budget";
  @SerializedName(SERIALIZED_NAME_BUDGET)
  private InsertionOrderBudget budget;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Required. Controls whether or not the insertion order can spend its budget and bid on inventory. * For CreateInsertionOrder method, only &#x60;ENTITY_STATUS_DRAFT&#x60; is allowed. To activate an insertion order, use UpdateInsertionOrder method and update the status to &#x60;ENTITY_STATUS_ACTIVE&#x60; after creation. * An insertion order cannot be changed back to &#x60;ENTITY_STATUS_DRAFT&#x60; status from any other status. * An insertion order cannot be set to &#x60;ENTITY_STATUS_ACTIVE&#x60; if its parent campaign is not active.
   */
  @JsonAdapter(EntityStatusEnum.Adapter.class)
  public enum EntityStatusEnum {
    UNSPECIFIED("ENTITY_STATUS_UNSPECIFIED"),
    
    ACTIVE("ENTITY_STATUS_ACTIVE"),
    
    ARCHIVED("ENTITY_STATUS_ARCHIVED"),
    
    DRAFT("ENTITY_STATUS_DRAFT"),
    
    PAUSED("ENTITY_STATUS_PAUSED"),
    
    SCHEDULED_FOR_DELETION("ENTITY_STATUS_SCHEDULED_FOR_DELETION");

    private String value;

    EntityStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityStatusEnum fromValue(String value) {
      for (EntityStatusEnum b : EntityStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_STATUS = "entityStatus";
  @SerializedName(SERIALIZED_NAME_ENTITY_STATUS)
  private EntityStatusEnum entityStatus;

  public static final String SERIALIZED_NAME_FREQUENCY_CAP = "frequencyCap";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_CAP)
  private FrequencyCap frequencyCap;

  public static final String SERIALIZED_NAME_INSERTION_ORDER_ID = "insertionOrderId";
  @SerializedName(SERIALIZED_NAME_INSERTION_ORDER_ID)
  private String insertionOrderId;

  /**
   * The type of insertion order. If this field is unspecified in creation, the value defaults to &#x60;RTB&#x60;.
   */
  @JsonAdapter(InsertionOrderTypeEnum.Adapter.class)
  public enum InsertionOrderTypeEnum {
    INSERTION_ORDER_TYPE_UNSPECIFIED("INSERTION_ORDER_TYPE_UNSPECIFIED"),
    
    RTB("RTB"),
    
    OVER_THE_TOP("OVER_THE_TOP");

    private String value;

    InsertionOrderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InsertionOrderTypeEnum fromValue(String value) {
      for (InsertionOrderTypeEnum b : InsertionOrderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InsertionOrderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InsertionOrderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InsertionOrderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InsertionOrderTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InsertionOrderTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSERTION_ORDER_TYPE = "insertionOrderType";
  @SerializedName(SERIALIZED_NAME_INSERTION_ORDER_TYPE)
  private InsertionOrderTypeEnum insertionOrderType;

  public static final String SERIALIZED_NAME_INTEGRATION_DETAILS = "integrationDetails";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_DETAILS)
  private IntegrationDetails integrationDetails;

  public static final String SERIALIZED_NAME_KPI = "kpi";
  @SerializedName(SERIALIZED_NAME_KPI)
  private Kpi kpi;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PACING = "pacing";
  @SerializedName(SERIALIZED_NAME_PACING)
  private Pacing pacing;

  public static final String SERIALIZED_NAME_PARTNER_COSTS = "partnerCosts";
  @SerializedName(SERIALIZED_NAME_PARTNER_COSTS)
  private List<PartnerCost> partnerCosts = new ArrayList<>();

  /**
   * Output only. The reservation type of the insertion order.
   */
  @JsonAdapter(ReservationTypeEnum.Adapter.class)
  public enum ReservationTypeEnum {
    UNSPECIFIED("RESERVATION_TYPE_UNSPECIFIED"),
    
    NOT_GUARANTEED("RESERVATION_TYPE_NOT_GUARANTEED"),
    
    PROGRAMMATIC_GUARANTEED("RESERVATION_TYPE_PROGRAMMATIC_GUARANTEED"),
    
    TAG_GUARANTEED("RESERVATION_TYPE_TAG_GUARANTEED"),
    
    PETRA_VIRAL("RESERVATION_TYPE_PETRA_VIRAL"),
    
    INSTANT_RESERVE("RESERVATION_TYPE_INSTANT_RESERVE");

    private String value;

    ReservationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReservationTypeEnum fromValue(String value) {
      for (ReservationTypeEnum b : ReservationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReservationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReservationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReservationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReservationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReservationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESERVATION_TYPE = "reservationType";
  @SerializedName(SERIALIZED_NAME_RESERVATION_TYPE)
  private ReservationTypeEnum reservationType;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public InsertionOrder() {
  }

  public InsertionOrder(
     String advertiserId, 
     String insertionOrderId, 
     String name, 
     ReservationTypeEnum reservationType, 
     String updateTime
  ) {
    this();
    this.advertiserId = advertiserId;
    this.insertionOrderId = insertionOrderId;
    this.name = name;
    this.reservationType = reservationType;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The unique ID of the advertiser the insertion order belongs to.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public String getAdvertiserId() {
    return advertiserId;
  }



  public InsertionOrder bidStrategy(BiddingStrategy bidStrategy) {
    this.bidStrategy = bidStrategy;
    return this;
  }

  /**
   * Get bidStrategy
   * @return bidStrategy
   */
  @javax.annotation.Nullable
  public BiddingStrategy getBidStrategy() {
    return bidStrategy;
  }

  public void setBidStrategy(BiddingStrategy bidStrategy) {
    this.bidStrategy = bidStrategy;
  }


  public InsertionOrder budget(InsertionOrderBudget budget) {
    this.budget = budget;
    return this;
  }

  /**
   * Get budget
   * @return budget
   */
  @javax.annotation.Nullable
  public InsertionOrderBudget getBudget() {
    return budget;
  }

  public void setBudget(InsertionOrderBudget budget) {
    this.budget = budget;
  }


  public InsertionOrder campaignId(String campaignId) {
    this.campaignId = campaignId;
    return this;
  }

  /**
   * Required. Immutable. The unique ID of the campaign that the insertion order belongs to.
   * @return campaignId
   */
  @javax.annotation.Nullable
  public String getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
  }


  public InsertionOrder displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The display name of the insertion order. Must be UTF-8 encoded with a maximum size of 240 bytes.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public InsertionOrder entityStatus(EntityStatusEnum entityStatus) {
    this.entityStatus = entityStatus;
    return this;
  }

  /**
   * Required. Controls whether or not the insertion order can spend its budget and bid on inventory. * For CreateInsertionOrder method, only &#x60;ENTITY_STATUS_DRAFT&#x60; is allowed. To activate an insertion order, use UpdateInsertionOrder method and update the status to &#x60;ENTITY_STATUS_ACTIVE&#x60; after creation. * An insertion order cannot be changed back to &#x60;ENTITY_STATUS_DRAFT&#x60; status from any other status. * An insertion order cannot be set to &#x60;ENTITY_STATUS_ACTIVE&#x60; if its parent campaign is not active.
   * @return entityStatus
   */
  @javax.annotation.Nullable
  public EntityStatusEnum getEntityStatus() {
    return entityStatus;
  }

  public void setEntityStatus(EntityStatusEnum entityStatus) {
    this.entityStatus = entityStatus;
  }


  public InsertionOrder frequencyCap(FrequencyCap frequencyCap) {
    this.frequencyCap = frequencyCap;
    return this;
  }

  /**
   * Get frequencyCap
   * @return frequencyCap
   */
  @javax.annotation.Nullable
  public FrequencyCap getFrequencyCap() {
    return frequencyCap;
  }

  public void setFrequencyCap(FrequencyCap frequencyCap) {
    this.frequencyCap = frequencyCap;
  }


  /**
   * Output only. The unique ID of the insertion order. Assigned by the system.
   * @return insertionOrderId
   */
  @javax.annotation.Nullable
  public String getInsertionOrderId() {
    return insertionOrderId;
  }



  public InsertionOrder insertionOrderType(InsertionOrderTypeEnum insertionOrderType) {
    this.insertionOrderType = insertionOrderType;
    return this;
  }

  /**
   * The type of insertion order. If this field is unspecified in creation, the value defaults to &#x60;RTB&#x60;.
   * @return insertionOrderType
   */
  @javax.annotation.Nullable
  public InsertionOrderTypeEnum getInsertionOrderType() {
    return insertionOrderType;
  }

  public void setInsertionOrderType(InsertionOrderTypeEnum insertionOrderType) {
    this.insertionOrderType = insertionOrderType;
  }


  public InsertionOrder integrationDetails(IntegrationDetails integrationDetails) {
    this.integrationDetails = integrationDetails;
    return this;
  }

  /**
   * Get integrationDetails
   * @return integrationDetails
   */
  @javax.annotation.Nullable
  public IntegrationDetails getIntegrationDetails() {
    return integrationDetails;
  }

  public void setIntegrationDetails(IntegrationDetails integrationDetails) {
    this.integrationDetails = integrationDetails;
  }


  public InsertionOrder kpi(Kpi kpi) {
    this.kpi = kpi;
    return this;
  }

  /**
   * Get kpi
   * @return kpi
   */
  @javax.annotation.Nullable
  public Kpi getKpi() {
    return kpi;
  }

  public void setKpi(Kpi kpi) {
    this.kpi = kpi;
  }


  /**
   * Output only. The resource name of the insertion order.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public InsertionOrder pacing(Pacing pacing) {
    this.pacing = pacing;
    return this;
  }

  /**
   * Get pacing
   * @return pacing
   */
  @javax.annotation.Nullable
  public Pacing getPacing() {
    return pacing;
  }

  public void setPacing(Pacing pacing) {
    this.pacing = pacing;
  }


  public InsertionOrder partnerCosts(List<PartnerCost> partnerCosts) {
    this.partnerCosts = partnerCosts;
    return this;
  }

  public InsertionOrder addPartnerCostsItem(PartnerCost partnerCostsItem) {
    if (this.partnerCosts == null) {
      this.partnerCosts = new ArrayList<>();
    }
    this.partnerCosts.add(partnerCostsItem);
    return this;
  }

  /**
   * The partner costs associated with the insertion order. If absent or empty in CreateInsertionOrder method, the newly created insertion order will inherit partner costs from the partner settings.
   * @return partnerCosts
   */
  @javax.annotation.Nullable
  public List<PartnerCost> getPartnerCosts() {
    return partnerCosts;
  }

  public void setPartnerCosts(List<PartnerCost> partnerCosts) {
    this.partnerCosts = partnerCosts;
  }


  /**
   * Output only. The reservation type of the insertion order.
   * @return reservationType
   */
  @javax.annotation.Nullable
  public ReservationTypeEnum getReservationType() {
    return reservationType;
  }



  /**
   * Output only. The timestamp when the insertion order was last updated. Assigned by the system.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsertionOrder insertionOrder = (InsertionOrder) o;
    return Objects.equals(this.advertiserId, insertionOrder.advertiserId) &&
        Objects.equals(this.bidStrategy, insertionOrder.bidStrategy) &&
        Objects.equals(this.budget, insertionOrder.budget) &&
        Objects.equals(this.campaignId, insertionOrder.campaignId) &&
        Objects.equals(this.displayName, insertionOrder.displayName) &&
        Objects.equals(this.entityStatus, insertionOrder.entityStatus) &&
        Objects.equals(this.frequencyCap, insertionOrder.frequencyCap) &&
        Objects.equals(this.insertionOrderId, insertionOrder.insertionOrderId) &&
        Objects.equals(this.insertionOrderType, insertionOrder.insertionOrderType) &&
        Objects.equals(this.integrationDetails, insertionOrder.integrationDetails) &&
        Objects.equals(this.kpi, insertionOrder.kpi) &&
        Objects.equals(this.name, insertionOrder.name) &&
        Objects.equals(this.pacing, insertionOrder.pacing) &&
        Objects.equals(this.partnerCosts, insertionOrder.partnerCosts) &&
        Objects.equals(this.reservationType, insertionOrder.reservationType) &&
        Objects.equals(this.updateTime, insertionOrder.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertiserId, bidStrategy, budget, campaignId, displayName, entityStatus, frequencyCap, insertionOrderId, insertionOrderType, integrationDetails, kpi, name, pacing, partnerCosts, reservationType, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsertionOrder {\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    bidStrategy: ").append(toIndentedString(bidStrategy)).append("\n");
    sb.append("    budget: ").append(toIndentedString(budget)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    entityStatus: ").append(toIndentedString(entityStatus)).append("\n");
    sb.append("    frequencyCap: ").append(toIndentedString(frequencyCap)).append("\n");
    sb.append("    insertionOrderId: ").append(toIndentedString(insertionOrderId)).append("\n");
    sb.append("    insertionOrderType: ").append(toIndentedString(insertionOrderType)).append("\n");
    sb.append("    integrationDetails: ").append(toIndentedString(integrationDetails)).append("\n");
    sb.append("    kpi: ").append(toIndentedString(kpi)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pacing: ").append(toIndentedString(pacing)).append("\n");
    sb.append("    partnerCosts: ").append(toIndentedString(partnerCosts)).append("\n");
    sb.append("    reservationType: ").append(toIndentedString(reservationType)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertiserId");
    openapiFields.add("bidStrategy");
    openapiFields.add("budget");
    openapiFields.add("campaignId");
    openapiFields.add("displayName");
    openapiFields.add("entityStatus");
    openapiFields.add("frequencyCap");
    openapiFields.add("insertionOrderId");
    openapiFields.add("insertionOrderType");
    openapiFields.add("integrationDetails");
    openapiFields.add("kpi");
    openapiFields.add("name");
    openapiFields.add("pacing");
    openapiFields.add("partnerCosts");
    openapiFields.add("reservationType");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InsertionOrder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InsertionOrder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsertionOrder is not found in the empty JSON string", InsertionOrder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InsertionOrder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InsertionOrder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull()) && !jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      // validate the optional field `bidStrategy`
      if (jsonObj.get("bidStrategy") != null && !jsonObj.get("bidStrategy").isJsonNull()) {
        BiddingStrategy.validateJsonElement(jsonObj.get("bidStrategy"));
      }
      // validate the optional field `budget`
      if (jsonObj.get("budget") != null && !jsonObj.get("budget").isJsonNull()) {
        InsertionOrderBudget.validateJsonElement(jsonObj.get("budget"));
      }
      if ((jsonObj.get("campaignId") != null && !jsonObj.get("campaignId").isJsonNull()) && !jsonObj.get("campaignId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("entityStatus") != null && !jsonObj.get("entityStatus").isJsonNull()) && !jsonObj.get("entityStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityStatus").toString()));
      }
      // validate the optional field `entityStatus`
      if (jsonObj.get("entityStatus") != null && !jsonObj.get("entityStatus").isJsonNull()) {
        EntityStatusEnum.validateJsonElement(jsonObj.get("entityStatus"));
      }
      // validate the optional field `frequencyCap`
      if (jsonObj.get("frequencyCap") != null && !jsonObj.get("frequencyCap").isJsonNull()) {
        FrequencyCap.validateJsonElement(jsonObj.get("frequencyCap"));
      }
      if ((jsonObj.get("insertionOrderId") != null && !jsonObj.get("insertionOrderId").isJsonNull()) && !jsonObj.get("insertionOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insertionOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insertionOrderId").toString()));
      }
      if ((jsonObj.get("insertionOrderType") != null && !jsonObj.get("insertionOrderType").isJsonNull()) && !jsonObj.get("insertionOrderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insertionOrderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insertionOrderType").toString()));
      }
      // validate the optional field `insertionOrderType`
      if (jsonObj.get("insertionOrderType") != null && !jsonObj.get("insertionOrderType").isJsonNull()) {
        InsertionOrderTypeEnum.validateJsonElement(jsonObj.get("insertionOrderType"));
      }
      // validate the optional field `integrationDetails`
      if (jsonObj.get("integrationDetails") != null && !jsonObj.get("integrationDetails").isJsonNull()) {
        IntegrationDetails.validateJsonElement(jsonObj.get("integrationDetails"));
      }
      // validate the optional field `kpi`
      if (jsonObj.get("kpi") != null && !jsonObj.get("kpi").isJsonNull()) {
        Kpi.validateJsonElement(jsonObj.get("kpi"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `pacing`
      if (jsonObj.get("pacing") != null && !jsonObj.get("pacing").isJsonNull()) {
        Pacing.validateJsonElement(jsonObj.get("pacing"));
      }
      if (jsonObj.get("partnerCosts") != null && !jsonObj.get("partnerCosts").isJsonNull()) {
        JsonArray jsonArraypartnerCosts = jsonObj.getAsJsonArray("partnerCosts");
        if (jsonArraypartnerCosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("partnerCosts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `partnerCosts` to be an array in the JSON string but got `%s`", jsonObj.get("partnerCosts").toString()));
          }

          // validate the optional field `partnerCosts` (array)
          for (int i = 0; i < jsonArraypartnerCosts.size(); i++) {
            PartnerCost.validateJsonElement(jsonArraypartnerCosts.get(i));
          };
        }
      }
      if ((jsonObj.get("reservationType") != null && !jsonObj.get("reservationType").isJsonNull()) && !jsonObj.get("reservationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationType").toString()));
      }
      // validate the optional field `reservationType`
      if (jsonObj.get("reservationType") != null && !jsonObj.get("reservationType").isJsonNull()) {
        ReservationTypeEnum.validateJsonElement(jsonObj.get("reservationType"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsertionOrder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsertionOrder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsertionOrder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsertionOrder.class));

       return (TypeAdapter<T>) new TypeAdapter<InsertionOrder>() {
           @Override
           public void write(JsonWriter out, InsertionOrder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InsertionOrder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InsertionOrder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InsertionOrder
   * @throws IOException if the JSON string is invalid with respect to InsertionOrder
   */
  public static InsertionOrder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsertionOrder.class);
  }

  /**
   * Convert an instance of InsertionOrder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

