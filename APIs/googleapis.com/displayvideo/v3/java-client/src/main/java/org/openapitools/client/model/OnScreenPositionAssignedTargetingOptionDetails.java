/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * On screen position targeting option details. This will be populated in the on_screen_position_details field when targeting_type is &#x60;TARGETING_TYPE_ON_SCREEN_POSITION&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OnScreenPositionAssignedTargetingOptionDetails {
  /**
   * Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default. Possible values are: * &#x60;AD_TYPE_DISPLAY&#x60;, the setting will be inherited by new line item when line_item_type is &#x60;LINE_ITEM_TYPE_DISPLAY_DEFAULT&#x60;. * &#x60;AD_TYPE_VIDEO&#x60;, the setting will be inherited by new line item when line_item_type is &#x60;LINE_ITEM_TYPE_VIDEO_DEFAULT&#x60;.
   */
  @JsonAdapter(AdTypeEnum.Adapter.class)
  public enum AdTypeEnum {
    UNSPECIFIED("AD_TYPE_UNSPECIFIED"),
    
    DISPLAY("AD_TYPE_DISPLAY"),
    
    VIDEO("AD_TYPE_VIDEO"),
    
    AUDIO("AD_TYPE_AUDIO");

    private String value;

    AdTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdTypeEnum fromValue(String value) {
      for (AdTypeEnum b : AdTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AD_TYPE = "adType";
  @SerializedName(SERIALIZED_NAME_AD_TYPE)
  private AdTypeEnum adType;

  /**
   * Output only. The on screen position.
   */
  @JsonAdapter(OnScreenPositionEnum.Adapter.class)
  public enum OnScreenPositionEnum {
    UNSPECIFIED("ON_SCREEN_POSITION_UNSPECIFIED"),
    
    UNKNOWN("ON_SCREEN_POSITION_UNKNOWN"),
    
    ABOVE_THE_FOLD("ON_SCREEN_POSITION_ABOVE_THE_FOLD"),
    
    BELOW_THE_FOLD("ON_SCREEN_POSITION_BELOW_THE_FOLD");

    private String value;

    OnScreenPositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OnScreenPositionEnum fromValue(String value) {
      for (OnScreenPositionEnum b : OnScreenPositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OnScreenPositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OnScreenPositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OnScreenPositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OnScreenPositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OnScreenPositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ON_SCREEN_POSITION = "onScreenPosition";
  @SerializedName(SERIALIZED_NAME_ON_SCREEN_POSITION)
  private OnScreenPositionEnum onScreenPosition;

  public static final String SERIALIZED_NAME_TARGETING_OPTION_ID = "targetingOptionId";
  @SerializedName(SERIALIZED_NAME_TARGETING_OPTION_ID)
  private String targetingOptionId;

  public OnScreenPositionAssignedTargetingOptionDetails() {
  }

  public OnScreenPositionAssignedTargetingOptionDetails(
     AdTypeEnum adType, 
     OnScreenPositionEnum onScreenPosition
  ) {
    this();
    this.adType = adType;
    this.onScreenPosition = onScreenPosition;
  }

  /**
   * Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default. Possible values are: * &#x60;AD_TYPE_DISPLAY&#x60;, the setting will be inherited by new line item when line_item_type is &#x60;LINE_ITEM_TYPE_DISPLAY_DEFAULT&#x60;. * &#x60;AD_TYPE_VIDEO&#x60;, the setting will be inherited by new line item when line_item_type is &#x60;LINE_ITEM_TYPE_VIDEO_DEFAULT&#x60;.
   * @return adType
   */
  @javax.annotation.Nullable
  public AdTypeEnum getAdType() {
    return adType;
  }



  /**
   * Output only. The on screen position.
   * @return onScreenPosition
   */
  @javax.annotation.Nullable
  public OnScreenPositionEnum getOnScreenPosition() {
    return onScreenPosition;
  }



  public OnScreenPositionAssignedTargetingOptionDetails targetingOptionId(String targetingOptionId) {
    this.targetingOptionId = targetingOptionId;
    return this;
  }

  /**
   * Required. The targeting_option_id field when targeting_type is &#x60;TARGETING_TYPE_ON_SCREEN_POSITION&#x60;.
   * @return targetingOptionId
   */
  @javax.annotation.Nullable
  public String getTargetingOptionId() {
    return targetingOptionId;
  }

  public void setTargetingOptionId(String targetingOptionId) {
    this.targetingOptionId = targetingOptionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnScreenPositionAssignedTargetingOptionDetails onScreenPositionAssignedTargetingOptionDetails = (OnScreenPositionAssignedTargetingOptionDetails) o;
    return Objects.equals(this.adType, onScreenPositionAssignedTargetingOptionDetails.adType) &&
        Objects.equals(this.onScreenPosition, onScreenPositionAssignedTargetingOptionDetails.onScreenPosition) &&
        Objects.equals(this.targetingOptionId, onScreenPositionAssignedTargetingOptionDetails.targetingOptionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adType, onScreenPosition, targetingOptionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnScreenPositionAssignedTargetingOptionDetails {\n");
    sb.append("    adType: ").append(toIndentedString(adType)).append("\n");
    sb.append("    onScreenPosition: ").append(toIndentedString(onScreenPosition)).append("\n");
    sb.append("    targetingOptionId: ").append(toIndentedString(targetingOptionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adType");
    openapiFields.add("onScreenPosition");
    openapiFields.add("targetingOptionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OnScreenPositionAssignedTargetingOptionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OnScreenPositionAssignedTargetingOptionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnScreenPositionAssignedTargetingOptionDetails is not found in the empty JSON string", OnScreenPositionAssignedTargetingOptionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OnScreenPositionAssignedTargetingOptionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OnScreenPositionAssignedTargetingOptionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adType") != null && !jsonObj.get("adType").isJsonNull()) && !jsonObj.get("adType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adType").toString()));
      }
      // validate the optional field `adType`
      if (jsonObj.get("adType") != null && !jsonObj.get("adType").isJsonNull()) {
        AdTypeEnum.validateJsonElement(jsonObj.get("adType"));
      }
      if ((jsonObj.get("onScreenPosition") != null && !jsonObj.get("onScreenPosition").isJsonNull()) && !jsonObj.get("onScreenPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onScreenPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onScreenPosition").toString()));
      }
      // validate the optional field `onScreenPosition`
      if (jsonObj.get("onScreenPosition") != null && !jsonObj.get("onScreenPosition").isJsonNull()) {
        OnScreenPositionEnum.validateJsonElement(jsonObj.get("onScreenPosition"));
      }
      if ((jsonObj.get("targetingOptionId") != null && !jsonObj.get("targetingOptionId").isJsonNull()) && !jsonObj.get("targetingOptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetingOptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetingOptionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnScreenPositionAssignedTargetingOptionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnScreenPositionAssignedTargetingOptionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnScreenPositionAssignedTargetingOptionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnScreenPositionAssignedTargetingOptionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<OnScreenPositionAssignedTargetingOptionDetails>() {
           @Override
           public void write(JsonWriter out, OnScreenPositionAssignedTargetingOptionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OnScreenPositionAssignedTargetingOptionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OnScreenPositionAssignedTargetingOptionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OnScreenPositionAssignedTargetingOptionDetails
   * @throws IOException if the JSON string is invalid with respect to OnScreenPositionAssignedTargetingOptionDetails
   */
  public static OnScreenPositionAssignedTargetingOptionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnScreenPositionAssignedTargetingOptionDetails.class);
  }

  /**
   * Convert an instance of OnScreenPositionAssignedTargetingOptionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

