/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CampaignBudget;
import org.openapitools.client.model.CampaignFlight;
import org.openapitools.client.model.CampaignGoal;
import org.openapitools.client.model.FrequencyCap;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single campaign.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Campaign {
  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_CAMPAIGN_BUDGETS = "campaignBudgets";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_BUDGETS)
  private List<CampaignBudget> campaignBudgets = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAMPAIGN_FLIGHT = "campaignFlight";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_FLIGHT)
  private CampaignFlight campaignFlight;

  public static final String SERIALIZED_NAME_CAMPAIGN_GOAL = "campaignGoal";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_GOAL)
  private CampaignGoal campaignGoal;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Required. Controls whether or not the insertion orders under this campaign can spend their budgets and bid on inventory. * Accepted values are &#x60;ENTITY_STATUS_ACTIVE&#x60;, &#x60;ENTITY_STATUS_ARCHIVED&#x60;, and &#x60;ENTITY_STATUS_PAUSED&#x60;. * For CreateCampaign method, &#x60;ENTITY_STATUS_ARCHIVED&#x60; is not allowed.
   */
  @JsonAdapter(EntityStatusEnum.Adapter.class)
  public enum EntityStatusEnum {
    UNSPECIFIED("ENTITY_STATUS_UNSPECIFIED"),
    
    ACTIVE("ENTITY_STATUS_ACTIVE"),
    
    ARCHIVED("ENTITY_STATUS_ARCHIVED"),
    
    DRAFT("ENTITY_STATUS_DRAFT"),
    
    PAUSED("ENTITY_STATUS_PAUSED"),
    
    SCHEDULED_FOR_DELETION("ENTITY_STATUS_SCHEDULED_FOR_DELETION");

    private String value;

    EntityStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityStatusEnum fromValue(String value) {
      for (EntityStatusEnum b : EntityStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_STATUS = "entityStatus";
  @SerializedName(SERIALIZED_NAME_ENTITY_STATUS)
  private EntityStatusEnum entityStatus;

  public static final String SERIALIZED_NAME_FREQUENCY_CAP = "frequencyCap";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_CAP)
  private FrequencyCap frequencyCap;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Campaign() {
  }

  public Campaign(
     String advertiserId, 
     String campaignId, 
     String name, 
     String updateTime
  ) {
    this();
    this.advertiserId = advertiserId;
    this.campaignId = campaignId;
    this.name = name;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The unique ID of the advertiser the campaign belongs to.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public String getAdvertiserId() {
    return advertiserId;
  }



  public Campaign campaignBudgets(List<CampaignBudget> campaignBudgets) {
    this.campaignBudgets = campaignBudgets;
    return this;
  }

  public Campaign addCampaignBudgetsItem(CampaignBudget campaignBudgetsItem) {
    if (this.campaignBudgets == null) {
      this.campaignBudgets = new ArrayList<>();
    }
    this.campaignBudgets.add(campaignBudgetsItem);
    return this;
  }

  /**
   * The list of budgets available to this campaign. If this field is not set, the campaign uses an unlimited budget.
   * @return campaignBudgets
   */
  @javax.annotation.Nullable
  public List<CampaignBudget> getCampaignBudgets() {
    return campaignBudgets;
  }

  public void setCampaignBudgets(List<CampaignBudget> campaignBudgets) {
    this.campaignBudgets = campaignBudgets;
  }


  public Campaign campaignFlight(CampaignFlight campaignFlight) {
    this.campaignFlight = campaignFlight;
    return this;
  }

  /**
   * Get campaignFlight
   * @return campaignFlight
   */
  @javax.annotation.Nullable
  public CampaignFlight getCampaignFlight() {
    return campaignFlight;
  }

  public void setCampaignFlight(CampaignFlight campaignFlight) {
    this.campaignFlight = campaignFlight;
  }


  public Campaign campaignGoal(CampaignGoal campaignGoal) {
    this.campaignGoal = campaignGoal;
    return this;
  }

  /**
   * Get campaignGoal
   * @return campaignGoal
   */
  @javax.annotation.Nullable
  public CampaignGoal getCampaignGoal() {
    return campaignGoal;
  }

  public void setCampaignGoal(CampaignGoal campaignGoal) {
    this.campaignGoal = campaignGoal;
  }


  /**
   * Output only. The unique ID of the campaign. Assigned by the system.
   * @return campaignId
   */
  @javax.annotation.Nullable
  public String getCampaignId() {
    return campaignId;
  }



  public Campaign displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The display name of the campaign. Must be UTF-8 encoded with a maximum size of 240 bytes.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Campaign entityStatus(EntityStatusEnum entityStatus) {
    this.entityStatus = entityStatus;
    return this;
  }

  /**
   * Required. Controls whether or not the insertion orders under this campaign can spend their budgets and bid on inventory. * Accepted values are &#x60;ENTITY_STATUS_ACTIVE&#x60;, &#x60;ENTITY_STATUS_ARCHIVED&#x60;, and &#x60;ENTITY_STATUS_PAUSED&#x60;. * For CreateCampaign method, &#x60;ENTITY_STATUS_ARCHIVED&#x60; is not allowed.
   * @return entityStatus
   */
  @javax.annotation.Nullable
  public EntityStatusEnum getEntityStatus() {
    return entityStatus;
  }

  public void setEntityStatus(EntityStatusEnum entityStatus) {
    this.entityStatus = entityStatus;
  }


  public Campaign frequencyCap(FrequencyCap frequencyCap) {
    this.frequencyCap = frequencyCap;
    return this;
  }

  /**
   * Get frequencyCap
   * @return frequencyCap
   */
  @javax.annotation.Nullable
  public FrequencyCap getFrequencyCap() {
    return frequencyCap;
  }

  public void setFrequencyCap(FrequencyCap frequencyCap) {
    this.frequencyCap = frequencyCap;
  }


  /**
   * Output only. The resource name of the campaign.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The timestamp when the campaign was last updated. Assigned by the system.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Campaign campaign = (Campaign) o;
    return Objects.equals(this.advertiserId, campaign.advertiserId) &&
        Objects.equals(this.campaignBudgets, campaign.campaignBudgets) &&
        Objects.equals(this.campaignFlight, campaign.campaignFlight) &&
        Objects.equals(this.campaignGoal, campaign.campaignGoal) &&
        Objects.equals(this.campaignId, campaign.campaignId) &&
        Objects.equals(this.displayName, campaign.displayName) &&
        Objects.equals(this.entityStatus, campaign.entityStatus) &&
        Objects.equals(this.frequencyCap, campaign.frequencyCap) &&
        Objects.equals(this.name, campaign.name) &&
        Objects.equals(this.updateTime, campaign.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertiserId, campaignBudgets, campaignFlight, campaignGoal, campaignId, displayName, entityStatus, frequencyCap, name, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Campaign {\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    campaignBudgets: ").append(toIndentedString(campaignBudgets)).append("\n");
    sb.append("    campaignFlight: ").append(toIndentedString(campaignFlight)).append("\n");
    sb.append("    campaignGoal: ").append(toIndentedString(campaignGoal)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    entityStatus: ").append(toIndentedString(entityStatus)).append("\n");
    sb.append("    frequencyCap: ").append(toIndentedString(frequencyCap)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertiserId");
    openapiFields.add("campaignBudgets");
    openapiFields.add("campaignFlight");
    openapiFields.add("campaignGoal");
    openapiFields.add("campaignId");
    openapiFields.add("displayName");
    openapiFields.add("entityStatus");
    openapiFields.add("frequencyCap");
    openapiFields.add("name");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Campaign
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Campaign.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Campaign is not found in the empty JSON string", Campaign.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Campaign.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Campaign` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull()) && !jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      if (jsonObj.get("campaignBudgets") != null && !jsonObj.get("campaignBudgets").isJsonNull()) {
        JsonArray jsonArraycampaignBudgets = jsonObj.getAsJsonArray("campaignBudgets");
        if (jsonArraycampaignBudgets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("campaignBudgets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `campaignBudgets` to be an array in the JSON string but got `%s`", jsonObj.get("campaignBudgets").toString()));
          }

          // validate the optional field `campaignBudgets` (array)
          for (int i = 0; i < jsonArraycampaignBudgets.size(); i++) {
            CampaignBudget.validateJsonElement(jsonArraycampaignBudgets.get(i));
          };
        }
      }
      // validate the optional field `campaignFlight`
      if (jsonObj.get("campaignFlight") != null && !jsonObj.get("campaignFlight").isJsonNull()) {
        CampaignFlight.validateJsonElement(jsonObj.get("campaignFlight"));
      }
      // validate the optional field `campaignGoal`
      if (jsonObj.get("campaignGoal") != null && !jsonObj.get("campaignGoal").isJsonNull()) {
        CampaignGoal.validateJsonElement(jsonObj.get("campaignGoal"));
      }
      if ((jsonObj.get("campaignId") != null && !jsonObj.get("campaignId").isJsonNull()) && !jsonObj.get("campaignId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("entityStatus") != null && !jsonObj.get("entityStatus").isJsonNull()) && !jsonObj.get("entityStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityStatus").toString()));
      }
      // validate the optional field `entityStatus`
      if (jsonObj.get("entityStatus") != null && !jsonObj.get("entityStatus").isJsonNull()) {
        EntityStatusEnum.validateJsonElement(jsonObj.get("entityStatus"));
      }
      // validate the optional field `frequencyCap`
      if (jsonObj.get("frequencyCap") != null && !jsonObj.get("frequencyCap").isJsonNull()) {
        FrequencyCap.validateJsonElement(jsonObj.get("frequencyCap"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Campaign.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Campaign' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Campaign> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Campaign.class));

       return (TypeAdapter<T>) new TypeAdapter<Campaign>() {
           @Override
           public void write(JsonWriter out, Campaign value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Campaign read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Campaign given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Campaign
   * @throws IOException if the JSON string is invalid with respect to Campaign
   */
  public static Campaign fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Campaign.class);
  }

  /**
   * Convert an instance of Campaign to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

