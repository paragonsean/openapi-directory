/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PrismaCpeCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings specific to the Mediaocean Prisma tool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrismaConfig {
  public static final String SERIALIZED_NAME_PRISMA_CPE_CODE = "prismaCpeCode";
  @SerializedName(SERIALIZED_NAME_PRISMA_CPE_CODE)
  private PrismaCpeCode prismaCpeCode;

  /**
   * Required. The Prisma type.
   */
  @JsonAdapter(PrismaTypeEnum.Adapter.class)
  public enum PrismaTypeEnum {
    UNSPECIFIED("PRISMA_TYPE_UNSPECIFIED"),
    
    DISPLAY("PRISMA_TYPE_DISPLAY"),
    
    SEARCH("PRISMA_TYPE_SEARCH"),
    
    VIDEO("PRISMA_TYPE_VIDEO"),
    
    AUDIO("PRISMA_TYPE_AUDIO"),
    
    SOCIAL("PRISMA_TYPE_SOCIAL"),
    
    FEE("PRISMA_TYPE_FEE");

    private String value;

    PrismaTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrismaTypeEnum fromValue(String value) {
      for (PrismaTypeEnum b : PrismaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrismaTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrismaTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrismaTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrismaTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrismaTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRISMA_TYPE = "prismaType";
  @SerializedName(SERIALIZED_NAME_PRISMA_TYPE)
  private PrismaTypeEnum prismaType;

  public static final String SERIALIZED_NAME_SUPPLIER = "supplier";
  @SerializedName(SERIALIZED_NAME_SUPPLIER)
  private String supplier;

  public PrismaConfig() {
  }

  public PrismaConfig prismaCpeCode(PrismaCpeCode prismaCpeCode) {
    this.prismaCpeCode = prismaCpeCode;
    return this;
  }

  /**
   * Get prismaCpeCode
   * @return prismaCpeCode
   */
  @javax.annotation.Nullable
  public PrismaCpeCode getPrismaCpeCode() {
    return prismaCpeCode;
  }

  public void setPrismaCpeCode(PrismaCpeCode prismaCpeCode) {
    this.prismaCpeCode = prismaCpeCode;
  }


  public PrismaConfig prismaType(PrismaTypeEnum prismaType) {
    this.prismaType = prismaType;
    return this;
  }

  /**
   * Required. The Prisma type.
   * @return prismaType
   */
  @javax.annotation.Nullable
  public PrismaTypeEnum getPrismaType() {
    return prismaType;
  }

  public void setPrismaType(PrismaTypeEnum prismaType) {
    this.prismaType = prismaType;
  }


  public PrismaConfig supplier(String supplier) {
    this.supplier = supplier;
    return this;
  }

  /**
   * Required. The entity allocated this budget (DSP, site, etc.).
   * @return supplier
   */
  @javax.annotation.Nullable
  public String getSupplier() {
    return supplier;
  }

  public void setSupplier(String supplier) {
    this.supplier = supplier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrismaConfig prismaConfig = (PrismaConfig) o;
    return Objects.equals(this.prismaCpeCode, prismaConfig.prismaCpeCode) &&
        Objects.equals(this.prismaType, prismaConfig.prismaType) &&
        Objects.equals(this.supplier, prismaConfig.supplier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prismaCpeCode, prismaType, supplier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrismaConfig {\n");
    sb.append("    prismaCpeCode: ").append(toIndentedString(prismaCpeCode)).append("\n");
    sb.append("    prismaType: ").append(toIndentedString(prismaType)).append("\n");
    sb.append("    supplier: ").append(toIndentedString(supplier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("prismaCpeCode");
    openapiFields.add("prismaType");
    openapiFields.add("supplier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrismaConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrismaConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrismaConfig is not found in the empty JSON string", PrismaConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrismaConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrismaConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `prismaCpeCode`
      if (jsonObj.get("prismaCpeCode") != null && !jsonObj.get("prismaCpeCode").isJsonNull()) {
        PrismaCpeCode.validateJsonElement(jsonObj.get("prismaCpeCode"));
      }
      if ((jsonObj.get("prismaType") != null && !jsonObj.get("prismaType").isJsonNull()) && !jsonObj.get("prismaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prismaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prismaType").toString()));
      }
      // validate the optional field `prismaType`
      if (jsonObj.get("prismaType") != null && !jsonObj.get("prismaType").isJsonNull()) {
        PrismaTypeEnum.validateJsonElement(jsonObj.get("prismaType"));
      }
      if ((jsonObj.get("supplier") != null && !jsonObj.get("supplier").isJsonNull()) && !jsonObj.get("supplier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supplier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supplier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrismaConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrismaConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrismaConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrismaConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PrismaConfig>() {
           @Override
           public void write(JsonWriter out, PrismaConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrismaConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrismaConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrismaConfig
   * @throws IOException if the JSON string is invalid with respect to PrismaConfig
   */
  public static PrismaConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrismaConfig.class);
  }

  /**
   * Convert an instance of PrismaConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

