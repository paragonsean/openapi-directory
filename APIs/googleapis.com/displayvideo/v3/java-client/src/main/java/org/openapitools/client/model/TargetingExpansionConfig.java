/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings that control the [optimized targeting](//support.google.com/displayvideo/answer/12060859) settings of the line item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TargetingExpansionConfig {
  /**
   * Output only. Magnitude of expansion for eligible first-party user lists under this ad group. This field only applies to YouTube and Partners line item and ad group resources.
   */
  @JsonAdapter(AudienceExpansionLevelEnum.Adapter.class)
  public enum AudienceExpansionLevelEnum {
    UNKNOWN("UNKNOWN"),
    
    NO_REACH("NO_REACH"),
    
    LEAST_REACH("LEAST_REACH"),
    
    MID_REACH("MID_REACH"),
    
    MOST_REACH("MOST_REACH");

    private String value;

    AudienceExpansionLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudienceExpansionLevelEnum fromValue(String value) {
      for (AudienceExpansionLevelEnum b : AudienceExpansionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudienceExpansionLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudienceExpansionLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudienceExpansionLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudienceExpansionLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AudienceExpansionLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUDIENCE_EXPANSION_LEVEL = "audienceExpansionLevel";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_EXPANSION_LEVEL)
  private AudienceExpansionLevelEnum audienceExpansionLevel;

  public static final String SERIALIZED_NAME_AUDIENCE_EXPANSION_SEED_LIST_EXCLUDED = "audienceExpansionSeedListExcluded";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_EXPANSION_SEED_LIST_EXCLUDED)
  private Boolean audienceExpansionSeedListExcluded;

  public static final String SERIALIZED_NAME_ENABLE_OPTIMIZED_TARGETING = "enableOptimizedTargeting";
  @SerializedName(SERIALIZED_NAME_ENABLE_OPTIMIZED_TARGETING)
  private Boolean enableOptimizedTargeting;

  public TargetingExpansionConfig() {
  }

  public TargetingExpansionConfig(
     AudienceExpansionLevelEnum audienceExpansionLevel, 
     Boolean audienceExpansionSeedListExcluded
  ) {
    this();
    this.audienceExpansionLevel = audienceExpansionLevel;
    this.audienceExpansionSeedListExcluded = audienceExpansionSeedListExcluded;
  }

  /**
   * Output only. Magnitude of expansion for eligible first-party user lists under this ad group. This field only applies to YouTube and Partners line item and ad group resources.
   * @return audienceExpansionLevel
   */
  @javax.annotation.Nullable
  public AudienceExpansionLevelEnum getAudienceExpansionLevel() {
    return audienceExpansionLevel;
  }



  /**
   * Output only. Whether to exclude seed list for audience expansion. This field only applies to YouTube and Partners line item and ad group resources.
   * @return audienceExpansionSeedListExcluded
   */
  @javax.annotation.Nullable
  public Boolean getAudienceExpansionSeedListExcluded() {
    return audienceExpansionSeedListExcluded;
  }



  public TargetingExpansionConfig enableOptimizedTargeting(Boolean enableOptimizedTargeting) {
    this.enableOptimizedTargeting = enableOptimizedTargeting;
    return this;
  }

  /**
   * Required. Whether to enable Optimized Targeting for the line item.
   * @return enableOptimizedTargeting
   */
  @javax.annotation.Nullable
  public Boolean getEnableOptimizedTargeting() {
    return enableOptimizedTargeting;
  }

  public void setEnableOptimizedTargeting(Boolean enableOptimizedTargeting) {
    this.enableOptimizedTargeting = enableOptimizedTargeting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetingExpansionConfig targetingExpansionConfig = (TargetingExpansionConfig) o;
    return Objects.equals(this.audienceExpansionLevel, targetingExpansionConfig.audienceExpansionLevel) &&
        Objects.equals(this.audienceExpansionSeedListExcluded, targetingExpansionConfig.audienceExpansionSeedListExcluded) &&
        Objects.equals(this.enableOptimizedTargeting, targetingExpansionConfig.enableOptimizedTargeting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audienceExpansionLevel, audienceExpansionSeedListExcluded, enableOptimizedTargeting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetingExpansionConfig {\n");
    sb.append("    audienceExpansionLevel: ").append(toIndentedString(audienceExpansionLevel)).append("\n");
    sb.append("    audienceExpansionSeedListExcluded: ").append(toIndentedString(audienceExpansionSeedListExcluded)).append("\n");
    sb.append("    enableOptimizedTargeting: ").append(toIndentedString(enableOptimizedTargeting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audienceExpansionLevel");
    openapiFields.add("audienceExpansionSeedListExcluded");
    openapiFields.add("enableOptimizedTargeting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TargetingExpansionConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TargetingExpansionConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetingExpansionConfig is not found in the empty JSON string", TargetingExpansionConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TargetingExpansionConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetingExpansionConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audienceExpansionLevel") != null && !jsonObj.get("audienceExpansionLevel").isJsonNull()) && !jsonObj.get("audienceExpansionLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audienceExpansionLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audienceExpansionLevel").toString()));
      }
      // validate the optional field `audienceExpansionLevel`
      if (jsonObj.get("audienceExpansionLevel") != null && !jsonObj.get("audienceExpansionLevel").isJsonNull()) {
        AudienceExpansionLevelEnum.validateJsonElement(jsonObj.get("audienceExpansionLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetingExpansionConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetingExpansionConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetingExpansionConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetingExpansionConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetingExpansionConfig>() {
           @Override
           public void write(JsonWriter out, TargetingExpansionConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetingExpansionConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TargetingExpansionConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TargetingExpansionConfig
   * @throws IOException if the JSON string is invalid with respect to TargetingExpansionConfig
   */
  public static TargetingExpansionConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetingExpansionConfig.class);
  }

  /**
   * Convert an instance of TargetingExpansionConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

