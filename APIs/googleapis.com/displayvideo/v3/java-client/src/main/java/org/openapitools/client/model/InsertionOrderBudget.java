/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InsertionOrderBudgetSegment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings that control how insertion order budget is allocated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InsertionOrderBudget {
  /**
   * The type of automation used to manage bid and budget for the insertion order. If this field is unspecified in creation, the value defaults to &#x60;INSERTION_ORDER_AUTOMATION_TYPE_NONE&#x60;.
   */
  @JsonAdapter(AutomationTypeEnum.Adapter.class)
  public enum AutomationTypeEnum {
    UNSPECIFIED("INSERTION_ORDER_AUTOMATION_TYPE_UNSPECIFIED"),
    
    BUDGET("INSERTION_ORDER_AUTOMATION_TYPE_BUDGET"),
    
    NONE("INSERTION_ORDER_AUTOMATION_TYPE_NONE"),
    
    BID_BUDGET("INSERTION_ORDER_AUTOMATION_TYPE_BID_BUDGET");

    private String value;

    AutomationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutomationTypeEnum fromValue(String value) {
      for (AutomationTypeEnum b : AutomationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutomationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutomationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutomationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutomationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutomationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTOMATION_TYPE = "automationType";
  @SerializedName(SERIALIZED_NAME_AUTOMATION_TYPE)
  private AutomationTypeEnum automationType;

  public static final String SERIALIZED_NAME_BUDGET_SEGMENTS = "budgetSegments";
  @SerializedName(SERIALIZED_NAME_BUDGET_SEGMENTS)
  private List<InsertionOrderBudgetSegment> budgetSegments = new ArrayList<>();

  /**
   * Required. Immutable. The budget unit specifies whether the budget is currency based or impression based.
   */
  @JsonAdapter(BudgetUnitEnum.Adapter.class)
  public enum BudgetUnitEnum {
    UNSPECIFIED("BUDGET_UNIT_UNSPECIFIED"),
    
    CURRENCY("BUDGET_UNIT_CURRENCY"),
    
    IMPRESSIONS("BUDGET_UNIT_IMPRESSIONS");

    private String value;

    BudgetUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BudgetUnitEnum fromValue(String value) {
      for (BudgetUnitEnum b : BudgetUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BudgetUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BudgetUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BudgetUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BudgetUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BudgetUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUDGET_UNIT = "budgetUnit";
  @SerializedName(SERIALIZED_NAME_BUDGET_UNIT)
  private BudgetUnitEnum budgetUnit;

  public InsertionOrderBudget() {
  }

  public InsertionOrderBudget automationType(AutomationTypeEnum automationType) {
    this.automationType = automationType;
    return this;
  }

  /**
   * The type of automation used to manage bid and budget for the insertion order. If this field is unspecified in creation, the value defaults to &#x60;INSERTION_ORDER_AUTOMATION_TYPE_NONE&#x60;.
   * @return automationType
   */
  @javax.annotation.Nullable
  public AutomationTypeEnum getAutomationType() {
    return automationType;
  }

  public void setAutomationType(AutomationTypeEnum automationType) {
    this.automationType = automationType;
  }


  public InsertionOrderBudget budgetSegments(List<InsertionOrderBudgetSegment> budgetSegments) {
    this.budgetSegments = budgetSegments;
    return this;
  }

  public InsertionOrderBudget addBudgetSegmentsItem(InsertionOrderBudgetSegment budgetSegmentsItem) {
    if (this.budgetSegments == null) {
      this.budgetSegments = new ArrayList<>();
    }
    this.budgetSegments.add(budgetSegmentsItem);
    return this;
  }

  /**
   * Required. The list of budget segments. Use a budget segment to specify a specific budget for a given period of time an insertion order is running.
   * @return budgetSegments
   */
  @javax.annotation.Nullable
  public List<InsertionOrderBudgetSegment> getBudgetSegments() {
    return budgetSegments;
  }

  public void setBudgetSegments(List<InsertionOrderBudgetSegment> budgetSegments) {
    this.budgetSegments = budgetSegments;
  }


  public InsertionOrderBudget budgetUnit(BudgetUnitEnum budgetUnit) {
    this.budgetUnit = budgetUnit;
    return this;
  }

  /**
   * Required. Immutable. The budget unit specifies whether the budget is currency based or impression based.
   * @return budgetUnit
   */
  @javax.annotation.Nullable
  public BudgetUnitEnum getBudgetUnit() {
    return budgetUnit;
  }

  public void setBudgetUnit(BudgetUnitEnum budgetUnit) {
    this.budgetUnit = budgetUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsertionOrderBudget insertionOrderBudget = (InsertionOrderBudget) o;
    return Objects.equals(this.automationType, insertionOrderBudget.automationType) &&
        Objects.equals(this.budgetSegments, insertionOrderBudget.budgetSegments) &&
        Objects.equals(this.budgetUnit, insertionOrderBudget.budgetUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automationType, budgetSegments, budgetUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsertionOrderBudget {\n");
    sb.append("    automationType: ").append(toIndentedString(automationType)).append("\n");
    sb.append("    budgetSegments: ").append(toIndentedString(budgetSegments)).append("\n");
    sb.append("    budgetUnit: ").append(toIndentedString(budgetUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("automationType");
    openapiFields.add("budgetSegments");
    openapiFields.add("budgetUnit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InsertionOrderBudget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InsertionOrderBudget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsertionOrderBudget is not found in the empty JSON string", InsertionOrderBudget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InsertionOrderBudget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InsertionOrderBudget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("automationType") != null && !jsonObj.get("automationType").isJsonNull()) && !jsonObj.get("automationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `automationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("automationType").toString()));
      }
      // validate the optional field `automationType`
      if (jsonObj.get("automationType") != null && !jsonObj.get("automationType").isJsonNull()) {
        AutomationTypeEnum.validateJsonElement(jsonObj.get("automationType"));
      }
      if (jsonObj.get("budgetSegments") != null && !jsonObj.get("budgetSegments").isJsonNull()) {
        JsonArray jsonArraybudgetSegments = jsonObj.getAsJsonArray("budgetSegments");
        if (jsonArraybudgetSegments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("budgetSegments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `budgetSegments` to be an array in the JSON string but got `%s`", jsonObj.get("budgetSegments").toString()));
          }

          // validate the optional field `budgetSegments` (array)
          for (int i = 0; i < jsonArraybudgetSegments.size(); i++) {
            InsertionOrderBudgetSegment.validateJsonElement(jsonArraybudgetSegments.get(i));
          };
        }
      }
      if ((jsonObj.get("budgetUnit") != null && !jsonObj.get("budgetUnit").isJsonNull()) && !jsonObj.get("budgetUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budgetUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budgetUnit").toString()));
      }
      // validate the optional field `budgetUnit`
      if (jsonObj.get("budgetUnit") != null && !jsonObj.get("budgetUnit").isJsonNull()) {
        BudgetUnitEnum.validateJsonElement(jsonObj.get("budgetUnit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsertionOrderBudget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsertionOrderBudget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsertionOrderBudget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsertionOrderBudget.class));

       return (TypeAdapter<T>) new TypeAdapter<InsertionOrderBudget>() {
           @Override
           public void write(JsonWriter out, InsertionOrderBudget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InsertionOrderBudget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InsertionOrderBudget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InsertionOrderBudget
   * @throws IOException if the JSON string is invalid with respect to InsertionOrderBudget
   */
  public static InsertionOrderBudget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsertionOrderBudget.class);
  }

  /**
   * Convert an instance of InsertionOrderBudget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

