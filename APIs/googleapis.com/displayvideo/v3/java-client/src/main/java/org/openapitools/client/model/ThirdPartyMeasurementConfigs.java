/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ThirdPartyVendorConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings that control what third-party vendors are measuring specific line item metrics.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ThirdPartyMeasurementConfigs {
  public static final String SERIALIZED_NAME_BRAND_LIFT_VENDOR_CONFIGS = "brandLiftVendorConfigs";
  @SerializedName(SERIALIZED_NAME_BRAND_LIFT_VENDOR_CONFIGS)
  private List<ThirdPartyVendorConfig> brandLiftVendorConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRAND_SAFETY_VENDOR_CONFIGS = "brandSafetyVendorConfigs";
  @SerializedName(SERIALIZED_NAME_BRAND_SAFETY_VENDOR_CONFIGS)
  private List<ThirdPartyVendorConfig> brandSafetyVendorConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_REACH_VENDOR_CONFIGS = "reachVendorConfigs";
  @SerializedName(SERIALIZED_NAME_REACH_VENDOR_CONFIGS)
  private List<ThirdPartyVendorConfig> reachVendorConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIEWABILITY_VENDOR_CONFIGS = "viewabilityVendorConfigs";
  @SerializedName(SERIALIZED_NAME_VIEWABILITY_VENDOR_CONFIGS)
  private List<ThirdPartyVendorConfig> viewabilityVendorConfigs = new ArrayList<>();

  public ThirdPartyMeasurementConfigs() {
  }

  public ThirdPartyMeasurementConfigs brandLiftVendorConfigs(List<ThirdPartyVendorConfig> brandLiftVendorConfigs) {
    this.brandLiftVendorConfigs = brandLiftVendorConfigs;
    return this;
  }

  public ThirdPartyMeasurementConfigs addBrandLiftVendorConfigsItem(ThirdPartyVendorConfig brandLiftVendorConfigsItem) {
    if (this.brandLiftVendorConfigs == null) {
      this.brandLiftVendorConfigs = new ArrayList<>();
    }
    this.brandLiftVendorConfigs.add(brandLiftVendorConfigsItem);
    return this;
  }

  /**
   * Optional. The third-party vendors measuring brand lift. The following third-party vendors are applicable: * &#x60;THIRD_PARTY_VENDOR_DYNATA&#x60; * &#x60;THIRD_PARTY_VENDOR_KANTAR&#x60;
   * @return brandLiftVendorConfigs
   */
  @javax.annotation.Nullable
  public List<ThirdPartyVendorConfig> getBrandLiftVendorConfigs() {
    return brandLiftVendorConfigs;
  }

  public void setBrandLiftVendorConfigs(List<ThirdPartyVendorConfig> brandLiftVendorConfigs) {
    this.brandLiftVendorConfigs = brandLiftVendorConfigs;
  }


  public ThirdPartyMeasurementConfigs brandSafetyVendorConfigs(List<ThirdPartyVendorConfig> brandSafetyVendorConfigs) {
    this.brandSafetyVendorConfigs = brandSafetyVendorConfigs;
    return this;
  }

  public ThirdPartyMeasurementConfigs addBrandSafetyVendorConfigsItem(ThirdPartyVendorConfig brandSafetyVendorConfigsItem) {
    if (this.brandSafetyVendorConfigs == null) {
      this.brandSafetyVendorConfigs = new ArrayList<>();
    }
    this.brandSafetyVendorConfigs.add(brandSafetyVendorConfigsItem);
    return this;
  }

  /**
   * Optional. The third-party vendors measuring brand safety. The following third-party vendors are applicable: * &#x60;THIRD_PARTY_VENDOR_ZERF&#x60; * &#x60;THIRD_PARTY_VENDOR_DOUBLE_VERIFY&#x60; * &#x60;THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE&#x60;
   * @return brandSafetyVendorConfigs
   */
  @javax.annotation.Nullable
  public List<ThirdPartyVendorConfig> getBrandSafetyVendorConfigs() {
    return brandSafetyVendorConfigs;
  }

  public void setBrandSafetyVendorConfigs(List<ThirdPartyVendorConfig> brandSafetyVendorConfigs) {
    this.brandSafetyVendorConfigs = brandSafetyVendorConfigs;
  }


  public ThirdPartyMeasurementConfigs reachVendorConfigs(List<ThirdPartyVendorConfig> reachVendorConfigs) {
    this.reachVendorConfigs = reachVendorConfigs;
    return this;
  }

  public ThirdPartyMeasurementConfigs addReachVendorConfigsItem(ThirdPartyVendorConfig reachVendorConfigsItem) {
    if (this.reachVendorConfigs == null) {
      this.reachVendorConfigs = new ArrayList<>();
    }
    this.reachVendorConfigs.add(reachVendorConfigsItem);
    return this;
  }

  /**
   * Optional. The third-party vendors measuring reach. The following third-party vendors are applicable: * &#x60;THIRD_PARTY_VENDOR_NIELSEN&#x60; * &#x60;THIRD_PARTY_VENDOR_COMSCORE&#x60; * &#x60;THIRD_PARTY_VENDOR_KANTAR&#x60;
   * @return reachVendorConfigs
   */
  @javax.annotation.Nullable
  public List<ThirdPartyVendorConfig> getReachVendorConfigs() {
    return reachVendorConfigs;
  }

  public void setReachVendorConfigs(List<ThirdPartyVendorConfig> reachVendorConfigs) {
    this.reachVendorConfigs = reachVendorConfigs;
  }


  public ThirdPartyMeasurementConfigs viewabilityVendorConfigs(List<ThirdPartyVendorConfig> viewabilityVendorConfigs) {
    this.viewabilityVendorConfigs = viewabilityVendorConfigs;
    return this;
  }

  public ThirdPartyMeasurementConfigs addViewabilityVendorConfigsItem(ThirdPartyVendorConfig viewabilityVendorConfigsItem) {
    if (this.viewabilityVendorConfigs == null) {
      this.viewabilityVendorConfigs = new ArrayList<>();
    }
    this.viewabilityVendorConfigs.add(viewabilityVendorConfigsItem);
    return this;
  }

  /**
   * Optional. The third-party vendors measuring viewability. The following third-party vendors are applicable: * &#x60;THIRD_PARTY_VENDOR_MOAT&#x60; * &#x60;THIRD_PARTY_VENDOR_DOUBLE_VERIFY&#x60; * &#x60;THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE&#x60; * &#x60;THIRD_PARTY_VENDOR_COMSCORE&#x60; * &#x60;THIRD_PARTY_VENDOR_TELEMETRY&#x60; * &#x60;THIRD_PARTY_VENDOR_MEETRICS&#x60;
   * @return viewabilityVendorConfigs
   */
  @javax.annotation.Nullable
  public List<ThirdPartyVendorConfig> getViewabilityVendorConfigs() {
    return viewabilityVendorConfigs;
  }

  public void setViewabilityVendorConfigs(List<ThirdPartyVendorConfig> viewabilityVendorConfigs) {
    this.viewabilityVendorConfigs = viewabilityVendorConfigs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThirdPartyMeasurementConfigs thirdPartyMeasurementConfigs = (ThirdPartyMeasurementConfigs) o;
    return Objects.equals(this.brandLiftVendorConfigs, thirdPartyMeasurementConfigs.brandLiftVendorConfigs) &&
        Objects.equals(this.brandSafetyVendorConfigs, thirdPartyMeasurementConfigs.brandSafetyVendorConfigs) &&
        Objects.equals(this.reachVendorConfigs, thirdPartyMeasurementConfigs.reachVendorConfigs) &&
        Objects.equals(this.viewabilityVendorConfigs, thirdPartyMeasurementConfigs.viewabilityVendorConfigs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandLiftVendorConfigs, brandSafetyVendorConfigs, reachVendorConfigs, viewabilityVendorConfigs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThirdPartyMeasurementConfigs {\n");
    sb.append("    brandLiftVendorConfigs: ").append(toIndentedString(brandLiftVendorConfigs)).append("\n");
    sb.append("    brandSafetyVendorConfigs: ").append(toIndentedString(brandSafetyVendorConfigs)).append("\n");
    sb.append("    reachVendorConfigs: ").append(toIndentedString(reachVendorConfigs)).append("\n");
    sb.append("    viewabilityVendorConfigs: ").append(toIndentedString(viewabilityVendorConfigs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brandLiftVendorConfigs");
    openapiFields.add("brandSafetyVendorConfigs");
    openapiFields.add("reachVendorConfigs");
    openapiFields.add("viewabilityVendorConfigs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ThirdPartyMeasurementConfigs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ThirdPartyMeasurementConfigs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThirdPartyMeasurementConfigs is not found in the empty JSON string", ThirdPartyMeasurementConfigs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ThirdPartyMeasurementConfigs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ThirdPartyMeasurementConfigs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("brandLiftVendorConfigs") != null && !jsonObj.get("brandLiftVendorConfigs").isJsonNull()) {
        JsonArray jsonArraybrandLiftVendorConfigs = jsonObj.getAsJsonArray("brandLiftVendorConfigs");
        if (jsonArraybrandLiftVendorConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("brandLiftVendorConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `brandLiftVendorConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("brandLiftVendorConfigs").toString()));
          }

          // validate the optional field `brandLiftVendorConfigs` (array)
          for (int i = 0; i < jsonArraybrandLiftVendorConfigs.size(); i++) {
            ThirdPartyVendorConfig.validateJsonElement(jsonArraybrandLiftVendorConfigs.get(i));
          };
        }
      }
      if (jsonObj.get("brandSafetyVendorConfigs") != null && !jsonObj.get("brandSafetyVendorConfigs").isJsonNull()) {
        JsonArray jsonArraybrandSafetyVendorConfigs = jsonObj.getAsJsonArray("brandSafetyVendorConfigs");
        if (jsonArraybrandSafetyVendorConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("brandSafetyVendorConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `brandSafetyVendorConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("brandSafetyVendorConfigs").toString()));
          }

          // validate the optional field `brandSafetyVendorConfigs` (array)
          for (int i = 0; i < jsonArraybrandSafetyVendorConfigs.size(); i++) {
            ThirdPartyVendorConfig.validateJsonElement(jsonArraybrandSafetyVendorConfigs.get(i));
          };
        }
      }
      if (jsonObj.get("reachVendorConfigs") != null && !jsonObj.get("reachVendorConfigs").isJsonNull()) {
        JsonArray jsonArrayreachVendorConfigs = jsonObj.getAsJsonArray("reachVendorConfigs");
        if (jsonArrayreachVendorConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reachVendorConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reachVendorConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("reachVendorConfigs").toString()));
          }

          // validate the optional field `reachVendorConfigs` (array)
          for (int i = 0; i < jsonArrayreachVendorConfigs.size(); i++) {
            ThirdPartyVendorConfig.validateJsonElement(jsonArrayreachVendorConfigs.get(i));
          };
        }
      }
      if (jsonObj.get("viewabilityVendorConfigs") != null && !jsonObj.get("viewabilityVendorConfigs").isJsonNull()) {
        JsonArray jsonArrayviewabilityVendorConfigs = jsonObj.getAsJsonArray("viewabilityVendorConfigs");
        if (jsonArrayviewabilityVendorConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("viewabilityVendorConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `viewabilityVendorConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("viewabilityVendorConfigs").toString()));
          }

          // validate the optional field `viewabilityVendorConfigs` (array)
          for (int i = 0; i < jsonArrayviewabilityVendorConfigs.size(); i++) {
            ThirdPartyVendorConfig.validateJsonElement(jsonArrayviewabilityVendorConfigs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThirdPartyMeasurementConfigs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThirdPartyMeasurementConfigs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThirdPartyMeasurementConfigs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThirdPartyMeasurementConfigs.class));

       return (TypeAdapter<T>) new TypeAdapter<ThirdPartyMeasurementConfigs>() {
           @Override
           public void write(JsonWriter out, ThirdPartyMeasurementConfigs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThirdPartyMeasurementConfigs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ThirdPartyMeasurementConfigs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ThirdPartyMeasurementConfigs
   * @throws IOException if the JSON string is invalid with respect to ThirdPartyMeasurementConfigs
   */
  public static ThirdPartyMeasurementConfigs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThirdPartyMeasurementConfigs.class);
  }

  /**
   * Convert an instance of ThirdPartyMeasurementConfigs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

