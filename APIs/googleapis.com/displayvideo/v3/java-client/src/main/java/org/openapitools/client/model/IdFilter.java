/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A filtering option that filters entities by their entity IDs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdFilter {
  public static final String SERIALIZED_NAME_AD_GROUP_AD_IDS = "adGroupAdIds";
  @SerializedName(SERIALIZED_NAME_AD_GROUP_AD_IDS)
  private List<String> adGroupAdIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_AD_GROUP_IDS = "adGroupIds";
  @SerializedName(SERIALIZED_NAME_AD_GROUP_IDS)
  private List<String> adGroupIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAMPAIGN_IDS = "campaignIds";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_IDS)
  private List<String> campaignIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSERTION_ORDER_IDS = "insertionOrderIds";
  @SerializedName(SERIALIZED_NAME_INSERTION_ORDER_IDS)
  private List<String> insertionOrderIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINE_ITEM_IDS = "lineItemIds";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_IDS)
  private List<String> lineItemIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIA_PRODUCT_IDS = "mediaProductIds";
  @SerializedName(SERIALIZED_NAME_MEDIA_PRODUCT_IDS)
  private List<String> mediaProductIds = new ArrayList<>();

  public IdFilter() {
  }

  public IdFilter adGroupAdIds(List<String> adGroupAdIds) {
    this.adGroupAdIds = adGroupAdIds;
    return this;
  }

  public IdFilter addAdGroupAdIdsItem(String adGroupAdIdsItem) {
    if (this.adGroupAdIds == null) {
      this.adGroupAdIds = new ArrayList<>();
    }
    this.adGroupAdIds.add(adGroupAdIdsItem);
    return this;
  }

  /**
   * YouTube Ads to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.
   * @return adGroupAdIds
   */
  @javax.annotation.Nullable
  public List<String> getAdGroupAdIds() {
    return adGroupAdIds;
  }

  public void setAdGroupAdIds(List<String> adGroupAdIds) {
    this.adGroupAdIds = adGroupAdIds;
  }


  public IdFilter adGroupIds(List<String> adGroupIds) {
    this.adGroupIds = adGroupIds;
    return this;
  }

  public IdFilter addAdGroupIdsItem(String adGroupIdsItem) {
    if (this.adGroupIds == null) {
      this.adGroupIds = new ArrayList<>();
    }
    this.adGroupIds.add(adGroupIdsItem);
    return this;
  }

  /**
   * YouTube Ad Groups to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.
   * @return adGroupIds
   */
  @javax.annotation.Nullable
  public List<String> getAdGroupIds() {
    return adGroupIds;
  }

  public void setAdGroupIds(List<String> adGroupIds) {
    this.adGroupIds = adGroupIds;
  }


  public IdFilter campaignIds(List<String> campaignIds) {
    this.campaignIds = campaignIds;
    return this;
  }

  public IdFilter addCampaignIdsItem(String campaignIdsItem) {
    if (this.campaignIds == null) {
      this.campaignIds = new ArrayList<>();
    }
    this.campaignIds.add(campaignIdsItem);
    return this;
  }

  /**
   * Campaigns to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.
   * @return campaignIds
   */
  @javax.annotation.Nullable
  public List<String> getCampaignIds() {
    return campaignIds;
  }

  public void setCampaignIds(List<String> campaignIds) {
    this.campaignIds = campaignIds;
  }


  public IdFilter insertionOrderIds(List<String> insertionOrderIds) {
    this.insertionOrderIds = insertionOrderIds;
    return this;
  }

  public IdFilter addInsertionOrderIdsItem(String insertionOrderIdsItem) {
    if (this.insertionOrderIds == null) {
      this.insertionOrderIds = new ArrayList<>();
    }
    this.insertionOrderIds.add(insertionOrderIdsItem);
    return this;
  }

  /**
   * Insertion Orders to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.
   * @return insertionOrderIds
   */
  @javax.annotation.Nullable
  public List<String> getInsertionOrderIds() {
    return insertionOrderIds;
  }

  public void setInsertionOrderIds(List<String> insertionOrderIds) {
    this.insertionOrderIds = insertionOrderIds;
  }


  public IdFilter lineItemIds(List<String> lineItemIds) {
    this.lineItemIds = lineItemIds;
    return this;
  }

  public IdFilter addLineItemIdsItem(String lineItemIdsItem) {
    if (this.lineItemIds == null) {
      this.lineItemIds = new ArrayList<>();
    }
    this.lineItemIds.add(lineItemIdsItem);
    return this;
  }

  /**
   * Line Items to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.
   * @return lineItemIds
   */
  @javax.annotation.Nullable
  public List<String> getLineItemIds() {
    return lineItemIds;
  }

  public void setLineItemIds(List<String> lineItemIds) {
    this.lineItemIds = lineItemIds;
  }


  public IdFilter mediaProductIds(List<String> mediaProductIds) {
    this.mediaProductIds = mediaProductIds;
    return this;
  }

  public IdFilter addMediaProductIdsItem(String mediaProductIdsItem) {
    if (this.mediaProductIds == null) {
      this.mediaProductIds = new ArrayList<>();
    }
    this.mediaProductIds.add(mediaProductIdsItem);
    return this;
  }

  /**
   * Media Products to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.
   * @return mediaProductIds
   */
  @javax.annotation.Nullable
  public List<String> getMediaProductIds() {
    return mediaProductIds;
  }

  public void setMediaProductIds(List<String> mediaProductIds) {
    this.mediaProductIds = mediaProductIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdFilter idFilter = (IdFilter) o;
    return Objects.equals(this.adGroupAdIds, idFilter.adGroupAdIds) &&
        Objects.equals(this.adGroupIds, idFilter.adGroupIds) &&
        Objects.equals(this.campaignIds, idFilter.campaignIds) &&
        Objects.equals(this.insertionOrderIds, idFilter.insertionOrderIds) &&
        Objects.equals(this.lineItemIds, idFilter.lineItemIds) &&
        Objects.equals(this.mediaProductIds, idFilter.mediaProductIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adGroupAdIds, adGroupIds, campaignIds, insertionOrderIds, lineItemIds, mediaProductIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdFilter {\n");
    sb.append("    adGroupAdIds: ").append(toIndentedString(adGroupAdIds)).append("\n");
    sb.append("    adGroupIds: ").append(toIndentedString(adGroupIds)).append("\n");
    sb.append("    campaignIds: ").append(toIndentedString(campaignIds)).append("\n");
    sb.append("    insertionOrderIds: ").append(toIndentedString(insertionOrderIds)).append("\n");
    sb.append("    lineItemIds: ").append(toIndentedString(lineItemIds)).append("\n");
    sb.append("    mediaProductIds: ").append(toIndentedString(mediaProductIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adGroupAdIds");
    openapiFields.add("adGroupIds");
    openapiFields.add("campaignIds");
    openapiFields.add("insertionOrderIds");
    openapiFields.add("lineItemIds");
    openapiFields.add("mediaProductIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdFilter is not found in the empty JSON string", IdFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("adGroupAdIds") != null && !jsonObj.get("adGroupAdIds").isJsonNull() && !jsonObj.get("adGroupAdIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `adGroupAdIds` to be an array in the JSON string but got `%s`", jsonObj.get("adGroupAdIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("adGroupIds") != null && !jsonObj.get("adGroupIds").isJsonNull() && !jsonObj.get("adGroupIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `adGroupIds` to be an array in the JSON string but got `%s`", jsonObj.get("adGroupIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("campaignIds") != null && !jsonObj.get("campaignIds").isJsonNull() && !jsonObj.get("campaignIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignIds` to be an array in the JSON string but got `%s`", jsonObj.get("campaignIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("insertionOrderIds") != null && !jsonObj.get("insertionOrderIds").isJsonNull() && !jsonObj.get("insertionOrderIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `insertionOrderIds` to be an array in the JSON string but got `%s`", jsonObj.get("insertionOrderIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lineItemIds") != null && !jsonObj.get("lineItemIds").isJsonNull() && !jsonObj.get("lineItemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItemIds` to be an array in the JSON string but got `%s`", jsonObj.get("lineItemIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mediaProductIds") != null && !jsonObj.get("mediaProductIds").isJsonNull() && !jsonObj.get("mediaProductIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaProductIds` to be an array in the JSON string but got `%s`", jsonObj.get("mediaProductIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<IdFilter>() {
           @Override
           public void write(JsonWriter out, IdFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdFilter
   * @throws IOException if the JSON string is invalid with respect to IdFilter
   */
  public static IdFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdFilter.class);
  }

  /**
   * Convert an instance of IdFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

