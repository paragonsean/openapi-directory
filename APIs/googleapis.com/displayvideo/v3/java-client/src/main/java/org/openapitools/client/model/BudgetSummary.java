/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PrismaCpeCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summarized information of an individual campaign budget.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BudgetSummary {
  public static final String SERIALIZED_NAME_EXTERNAL_BUDGET_ID = "externalBudgetId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_BUDGET_ID)
  private String externalBudgetId;

  public static final String SERIALIZED_NAME_PRE_TAX_AMOUNT_MICROS = "preTaxAmountMicros";
  @SerializedName(SERIALIZED_NAME_PRE_TAX_AMOUNT_MICROS)
  private String preTaxAmountMicros;

  public static final String SERIALIZED_NAME_PRISMA_CPE_CODE = "prismaCpeCode";
  @SerializedName(SERIALIZED_NAME_PRISMA_CPE_CODE)
  private PrismaCpeCode prismaCpeCode;

  public static final String SERIALIZED_NAME_TAX_AMOUNT_MICROS = "taxAmountMicros";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT_MICROS)
  private String taxAmountMicros;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT_MICROS = "totalAmountMicros";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_MICROS)
  private String totalAmountMicros;

  public BudgetSummary() {
  }

  public BudgetSummary externalBudgetId(String externalBudgetId) {
    this.externalBudgetId = externalBudgetId;
    return this;
  }

  /**
   * Corresponds to the external_budget_id of a campaign budget. If the value is not set in the campaign budget, this field will be empty.
   * @return externalBudgetId
   */
  @javax.annotation.Nullable
  public String getExternalBudgetId() {
    return externalBudgetId;
  }

  public void setExternalBudgetId(String externalBudgetId) {
    this.externalBudgetId = externalBudgetId;
  }


  public BudgetSummary preTaxAmountMicros(String preTaxAmountMicros) {
    this.preTaxAmountMicros = preTaxAmountMicros;
    return this;
  }

  /**
   * The sum of charges made under this budget before taxes, in micros of the invoice&#39;s currency. For example, if currency_code is &#x60;USD&#x60;, then 1000000 represents one US dollar.
   * @return preTaxAmountMicros
   */
  @javax.annotation.Nullable
  public String getPreTaxAmountMicros() {
    return preTaxAmountMicros;
  }

  public void setPreTaxAmountMicros(String preTaxAmountMicros) {
    this.preTaxAmountMicros = preTaxAmountMicros;
  }


  public BudgetSummary prismaCpeCode(PrismaCpeCode prismaCpeCode) {
    this.prismaCpeCode = prismaCpeCode;
    return this;
  }

  /**
   * Get prismaCpeCode
   * @return prismaCpeCode
   */
  @javax.annotation.Nullable
  public PrismaCpeCode getPrismaCpeCode() {
    return prismaCpeCode;
  }

  public void setPrismaCpeCode(PrismaCpeCode prismaCpeCode) {
    this.prismaCpeCode = prismaCpeCode;
  }


  public BudgetSummary taxAmountMicros(String taxAmountMicros) {
    this.taxAmountMicros = taxAmountMicros;
    return this;
  }

  /**
   * The amount of tax applied to charges under this budget, in micros of the invoice&#39;s currency. For example, if currency_code is &#x60;USD&#x60;, then 1000000 represents one US dollar.
   * @return taxAmountMicros
   */
  @javax.annotation.Nullable
  public String getTaxAmountMicros() {
    return taxAmountMicros;
  }

  public void setTaxAmountMicros(String taxAmountMicros) {
    this.taxAmountMicros = taxAmountMicros;
  }


  public BudgetSummary totalAmountMicros(String totalAmountMicros) {
    this.totalAmountMicros = totalAmountMicros;
    return this;
  }

  /**
   * The total sum of charges made under this budget, including tax, in micros of the invoice&#39;s currency. For example, if currency_code is &#x60;USD&#x60;, then 1000000 represents one US dollar.
   * @return totalAmountMicros
   */
  @javax.annotation.Nullable
  public String getTotalAmountMicros() {
    return totalAmountMicros;
  }

  public void setTotalAmountMicros(String totalAmountMicros) {
    this.totalAmountMicros = totalAmountMicros;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BudgetSummary budgetSummary = (BudgetSummary) o;
    return Objects.equals(this.externalBudgetId, budgetSummary.externalBudgetId) &&
        Objects.equals(this.preTaxAmountMicros, budgetSummary.preTaxAmountMicros) &&
        Objects.equals(this.prismaCpeCode, budgetSummary.prismaCpeCode) &&
        Objects.equals(this.taxAmountMicros, budgetSummary.taxAmountMicros) &&
        Objects.equals(this.totalAmountMicros, budgetSummary.totalAmountMicros);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalBudgetId, preTaxAmountMicros, prismaCpeCode, taxAmountMicros, totalAmountMicros);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BudgetSummary {\n");
    sb.append("    externalBudgetId: ").append(toIndentedString(externalBudgetId)).append("\n");
    sb.append("    preTaxAmountMicros: ").append(toIndentedString(preTaxAmountMicros)).append("\n");
    sb.append("    prismaCpeCode: ").append(toIndentedString(prismaCpeCode)).append("\n");
    sb.append("    taxAmountMicros: ").append(toIndentedString(taxAmountMicros)).append("\n");
    sb.append("    totalAmountMicros: ").append(toIndentedString(totalAmountMicros)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("externalBudgetId");
    openapiFields.add("preTaxAmountMicros");
    openapiFields.add("prismaCpeCode");
    openapiFields.add("taxAmountMicros");
    openapiFields.add("totalAmountMicros");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BudgetSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BudgetSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BudgetSummary is not found in the empty JSON string", BudgetSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BudgetSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BudgetSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("externalBudgetId") != null && !jsonObj.get("externalBudgetId").isJsonNull()) && !jsonObj.get("externalBudgetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalBudgetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalBudgetId").toString()));
      }
      if ((jsonObj.get("preTaxAmountMicros") != null && !jsonObj.get("preTaxAmountMicros").isJsonNull()) && !jsonObj.get("preTaxAmountMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preTaxAmountMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preTaxAmountMicros").toString()));
      }
      // validate the optional field `prismaCpeCode`
      if (jsonObj.get("prismaCpeCode") != null && !jsonObj.get("prismaCpeCode").isJsonNull()) {
        PrismaCpeCode.validateJsonElement(jsonObj.get("prismaCpeCode"));
      }
      if ((jsonObj.get("taxAmountMicros") != null && !jsonObj.get("taxAmountMicros").isJsonNull()) && !jsonObj.get("taxAmountMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxAmountMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxAmountMicros").toString()));
      }
      if ((jsonObj.get("totalAmountMicros") != null && !jsonObj.get("totalAmountMicros").isJsonNull()) && !jsonObj.get("totalAmountMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalAmountMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalAmountMicros").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BudgetSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BudgetSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BudgetSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BudgetSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<BudgetSummary>() {
           @Override
           public void write(JsonWriter out, BudgetSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BudgetSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BudgetSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BudgetSummary
   * @throws IOException if the JSON string is invalid with respect to BudgetSummary
   */
  public static BudgetSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BudgetSummary.class);
  }

  /**
   * Convert an instance of BudgetSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

