/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for brand safety controls.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DoubleVerifyBrandSafetyCategories {
  public static final String SERIALIZED_NAME_AVOID_UNKNOWN_BRAND_SAFETY_CATEGORY = "avoidUnknownBrandSafetyCategory";
  @SerializedName(SERIALIZED_NAME_AVOID_UNKNOWN_BRAND_SAFETY_CATEGORY)
  private Boolean avoidUnknownBrandSafetyCategory;

  /**
   * Gets or Sets avoidedHighSeverityCategories
   */
  @JsonAdapter(AvoidedHighSeverityCategoriesEnum.Adapter.class)
  public enum AvoidedHighSeverityCategoriesEnum {
    HIGHER_SEVERITY_UNSPECIFIED("HIGHER_SEVERITY_UNSPECIFIED"),
    
    ADULT_CONTENT_PORNOGRAPHY("ADULT_CONTENT_PORNOGRAPHY"),
    
    COPYRIGHT_INFRINGEMENT("COPYRIGHT_INFRINGEMENT"),
    
    SUBSTANCE_ABUSE("SUBSTANCE_ABUSE"),
    
    GRAPHIC_VIOLENCE_WEAPONS("GRAPHIC_VIOLENCE_WEAPONS"),
    
    HATE_PROFANITY("HATE_PROFANITY"),
    
    CRIMINAL_SKILLS("CRIMINAL_SKILLS"),
    
    NUISANCE_INCENTIVIZED_MALWARE_CLUTTER("NUISANCE_INCENTIVIZED_MALWARE_CLUTTER");

    private String value;

    AvoidedHighSeverityCategoriesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvoidedHighSeverityCategoriesEnum fromValue(String value) {
      for (AvoidedHighSeverityCategoriesEnum b : AvoidedHighSeverityCategoriesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvoidedHighSeverityCategoriesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvoidedHighSeverityCategoriesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvoidedHighSeverityCategoriesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvoidedHighSeverityCategoriesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvoidedHighSeverityCategoriesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVOIDED_HIGH_SEVERITY_CATEGORIES = "avoidedHighSeverityCategories";
  @SerializedName(SERIALIZED_NAME_AVOIDED_HIGH_SEVERITY_CATEGORIES)
  private List<AvoidedHighSeverityCategoriesEnum> avoidedHighSeverityCategories = new ArrayList<>();

  /**
   * Gets or Sets avoidedMediumSeverityCategories
   */
  @JsonAdapter(AvoidedMediumSeverityCategoriesEnum.Adapter.class)
  public enum AvoidedMediumSeverityCategoriesEnum {
    MEDIUM_SEVERITY_UNSPECIFIED("MEDIUM_SEVERITY_UNSPECIFIED"),
    
    AD_SERVERS("AD_SERVERS"),
    
    ADULT_CONTENT_SWIMSUIT("ADULT_CONTENT_SWIMSUIT"),
    
    ALTERNATIVE_LIFESTYLES("ALTERNATIVE_LIFESTYLES"),
    
    CELEBRITY_GOSSIP("CELEBRITY_GOSSIP"),
    
    GAMBLING("GAMBLING"),
    
    OCCULT("OCCULT"),
    
    SEX_EDUCATION("SEX_EDUCATION"),
    
    DISASTER_AVIATION("DISASTER_AVIATION"),
    
    DISASTER_MAN_MADE("DISASTER_MAN_MADE"),
    
    DISASTER_NATURAL("DISASTER_NATURAL"),
    
    DISASTER_TERRORIST_EVENTS("DISASTER_TERRORIST_EVENTS"),
    
    DISASTER_VEHICLE("DISASTER_VEHICLE"),
    
    ALCOHOL("ALCOHOL"),
    
    SMOKING("SMOKING"),
    
    NEGATIVE_NEWS_FINANCIAL("NEGATIVE_NEWS_FINANCIAL"),
    
    NON_ENGLISH("NON_ENGLISH"),
    
    PARKING_PAGE("PARKING_PAGE"),
    
    UNMODERATED_UGC("UNMODERATED_UGC"),
    
    INFLAMMATORY_POLITICS_AND_NEWS("INFLAMMATORY_POLITICS_AND_NEWS"),
    
    NEGATIVE_NEWS_PHARMACEUTICAL("NEGATIVE_NEWS_PHARMACEUTICAL");

    private String value;

    AvoidedMediumSeverityCategoriesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvoidedMediumSeverityCategoriesEnum fromValue(String value) {
      for (AvoidedMediumSeverityCategoriesEnum b : AvoidedMediumSeverityCategoriesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvoidedMediumSeverityCategoriesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvoidedMediumSeverityCategoriesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvoidedMediumSeverityCategoriesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvoidedMediumSeverityCategoriesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvoidedMediumSeverityCategoriesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVOIDED_MEDIUM_SEVERITY_CATEGORIES = "avoidedMediumSeverityCategories";
  @SerializedName(SERIALIZED_NAME_AVOIDED_MEDIUM_SEVERITY_CATEGORIES)
  private List<AvoidedMediumSeverityCategoriesEnum> avoidedMediumSeverityCategories = new ArrayList<>();

  public DoubleVerifyBrandSafetyCategories() {
  }

  public DoubleVerifyBrandSafetyCategories avoidUnknownBrandSafetyCategory(Boolean avoidUnknownBrandSafetyCategory) {
    this.avoidUnknownBrandSafetyCategory = avoidUnknownBrandSafetyCategory;
    return this;
  }

  /**
   * Unknown or unrateable.
   * @return avoidUnknownBrandSafetyCategory
   */
  @javax.annotation.Nullable
  public Boolean getAvoidUnknownBrandSafetyCategory() {
    return avoidUnknownBrandSafetyCategory;
  }

  public void setAvoidUnknownBrandSafetyCategory(Boolean avoidUnknownBrandSafetyCategory) {
    this.avoidUnknownBrandSafetyCategory = avoidUnknownBrandSafetyCategory;
  }


  public DoubleVerifyBrandSafetyCategories avoidedHighSeverityCategories(List<AvoidedHighSeverityCategoriesEnum> avoidedHighSeverityCategories) {
    this.avoidedHighSeverityCategories = avoidedHighSeverityCategories;
    return this;
  }

  public DoubleVerifyBrandSafetyCategories addAvoidedHighSeverityCategoriesItem(AvoidedHighSeverityCategoriesEnum avoidedHighSeverityCategoriesItem) {
    if (this.avoidedHighSeverityCategories == null) {
      this.avoidedHighSeverityCategories = new ArrayList<>();
    }
    this.avoidedHighSeverityCategories.add(avoidedHighSeverityCategoriesItem);
    return this;
  }

  /**
   * Brand safety high severity avoidance categories.
   * @return avoidedHighSeverityCategories
   */
  @javax.annotation.Nullable
  public List<AvoidedHighSeverityCategoriesEnum> getAvoidedHighSeverityCategories() {
    return avoidedHighSeverityCategories;
  }

  public void setAvoidedHighSeverityCategories(List<AvoidedHighSeverityCategoriesEnum> avoidedHighSeverityCategories) {
    this.avoidedHighSeverityCategories = avoidedHighSeverityCategories;
  }


  public DoubleVerifyBrandSafetyCategories avoidedMediumSeverityCategories(List<AvoidedMediumSeverityCategoriesEnum> avoidedMediumSeverityCategories) {
    this.avoidedMediumSeverityCategories = avoidedMediumSeverityCategories;
    return this;
  }

  public DoubleVerifyBrandSafetyCategories addAvoidedMediumSeverityCategoriesItem(AvoidedMediumSeverityCategoriesEnum avoidedMediumSeverityCategoriesItem) {
    if (this.avoidedMediumSeverityCategories == null) {
      this.avoidedMediumSeverityCategories = new ArrayList<>();
    }
    this.avoidedMediumSeverityCategories.add(avoidedMediumSeverityCategoriesItem);
    return this;
  }

  /**
   * Brand safety medium severity avoidance categories.
   * @return avoidedMediumSeverityCategories
   */
  @javax.annotation.Nullable
  public List<AvoidedMediumSeverityCategoriesEnum> getAvoidedMediumSeverityCategories() {
    return avoidedMediumSeverityCategories;
  }

  public void setAvoidedMediumSeverityCategories(List<AvoidedMediumSeverityCategoriesEnum> avoidedMediumSeverityCategories) {
    this.avoidedMediumSeverityCategories = avoidedMediumSeverityCategories;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoubleVerifyBrandSafetyCategories doubleVerifyBrandSafetyCategories = (DoubleVerifyBrandSafetyCategories) o;
    return Objects.equals(this.avoidUnknownBrandSafetyCategory, doubleVerifyBrandSafetyCategories.avoidUnknownBrandSafetyCategory) &&
        Objects.equals(this.avoidedHighSeverityCategories, doubleVerifyBrandSafetyCategories.avoidedHighSeverityCategories) &&
        Objects.equals(this.avoidedMediumSeverityCategories, doubleVerifyBrandSafetyCategories.avoidedMediumSeverityCategories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avoidUnknownBrandSafetyCategory, avoidedHighSeverityCategories, avoidedMediumSeverityCategories);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoubleVerifyBrandSafetyCategories {\n");
    sb.append("    avoidUnknownBrandSafetyCategory: ").append(toIndentedString(avoidUnknownBrandSafetyCategory)).append("\n");
    sb.append("    avoidedHighSeverityCategories: ").append(toIndentedString(avoidedHighSeverityCategories)).append("\n");
    sb.append("    avoidedMediumSeverityCategories: ").append(toIndentedString(avoidedMediumSeverityCategories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avoidUnknownBrandSafetyCategory");
    openapiFields.add("avoidedHighSeverityCategories");
    openapiFields.add("avoidedMediumSeverityCategories");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DoubleVerifyBrandSafetyCategories
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DoubleVerifyBrandSafetyCategories.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoubleVerifyBrandSafetyCategories is not found in the empty JSON string", DoubleVerifyBrandSafetyCategories.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DoubleVerifyBrandSafetyCategories.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoubleVerifyBrandSafetyCategories` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("avoidedHighSeverityCategories") != null && !jsonObj.get("avoidedHighSeverityCategories").isJsonNull() && !jsonObj.get("avoidedHighSeverityCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `avoidedHighSeverityCategories` to be an array in the JSON string but got `%s`", jsonObj.get("avoidedHighSeverityCategories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("avoidedMediumSeverityCategories") != null && !jsonObj.get("avoidedMediumSeverityCategories").isJsonNull() && !jsonObj.get("avoidedMediumSeverityCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `avoidedMediumSeverityCategories` to be an array in the JSON string but got `%s`", jsonObj.get("avoidedMediumSeverityCategories").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoubleVerifyBrandSafetyCategories.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoubleVerifyBrandSafetyCategories' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoubleVerifyBrandSafetyCategories> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoubleVerifyBrandSafetyCategories.class));

       return (TypeAdapter<T>) new TypeAdapter<DoubleVerifyBrandSafetyCategories>() {
           @Override
           public void write(JsonWriter out, DoubleVerifyBrandSafetyCategories value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoubleVerifyBrandSafetyCategories read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DoubleVerifyBrandSafetyCategories given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DoubleVerifyBrandSafetyCategories
   * @throws IOException if the JSON string is invalid with respect to DoubleVerifyBrandSafetyCategories
   */
  public static DoubleVerifyBrandSafetyCategories fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoubleVerifyBrandSafetyCategories.class);
  }

  /**
   * Convert an instance of DoubleVerifyBrandSafetyCategories to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

