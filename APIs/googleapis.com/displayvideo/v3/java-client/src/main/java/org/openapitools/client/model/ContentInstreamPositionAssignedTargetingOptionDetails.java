/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Assigned content instream position targeting option details. This will be populated in the content_instream_position_details field when targeting_type is &#x60;TARGETING_TYPE_CONTENT_INSTREAM_POSITION&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentInstreamPositionAssignedTargetingOptionDetails {
  /**
   * Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default. Possible values are: * &#x60;AD_TYPE_VIDEO&#x60;, the setting will be inherited by new line item when line_item_type is &#x60;LINE_ITEM_TYPE_VIDEO_DEFAULT&#x60;. * &#x60;AD_TYPE_AUDIO&#x60;, the setting will be inherited by new line item when line_item_type is &#x60;LINE_ITEM_TYPE_AUDIO_DEFAULT&#x60;.
   */
  @JsonAdapter(AdTypeEnum.Adapter.class)
  public enum AdTypeEnum {
    UNSPECIFIED("AD_TYPE_UNSPECIFIED"),
    
    DISPLAY("AD_TYPE_DISPLAY"),
    
    VIDEO("AD_TYPE_VIDEO"),
    
    AUDIO("AD_TYPE_AUDIO");

    private String value;

    AdTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdTypeEnum fromValue(String value) {
      for (AdTypeEnum b : AdTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AD_TYPE = "adType";
  @SerializedName(SERIALIZED_NAME_AD_TYPE)
  private AdTypeEnum adType;

  /**
   * Required. The content instream position for video or audio ads.
   */
  @JsonAdapter(ContentInstreamPositionEnum.Adapter.class)
  public enum ContentInstreamPositionEnum {
    UNSPECIFIED("CONTENT_INSTREAM_POSITION_UNSPECIFIED"),
    
    PRE_ROLL("CONTENT_INSTREAM_POSITION_PRE_ROLL"),
    
    MID_ROLL("CONTENT_INSTREAM_POSITION_MID_ROLL"),
    
    POST_ROLL("CONTENT_INSTREAM_POSITION_POST_ROLL"),
    
    UNKNOWN("CONTENT_INSTREAM_POSITION_UNKNOWN");

    private String value;

    ContentInstreamPositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentInstreamPositionEnum fromValue(String value) {
      for (ContentInstreamPositionEnum b : ContentInstreamPositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentInstreamPositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentInstreamPositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentInstreamPositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentInstreamPositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentInstreamPositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_INSTREAM_POSITION = "contentInstreamPosition";
  @SerializedName(SERIALIZED_NAME_CONTENT_INSTREAM_POSITION)
  private ContentInstreamPositionEnum contentInstreamPosition;

  public ContentInstreamPositionAssignedTargetingOptionDetails() {
  }

  public ContentInstreamPositionAssignedTargetingOptionDetails(
     AdTypeEnum adType
  ) {
    this();
    this.adType = adType;
  }

  /**
   * Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default. Possible values are: * &#x60;AD_TYPE_VIDEO&#x60;, the setting will be inherited by new line item when line_item_type is &#x60;LINE_ITEM_TYPE_VIDEO_DEFAULT&#x60;. * &#x60;AD_TYPE_AUDIO&#x60;, the setting will be inherited by new line item when line_item_type is &#x60;LINE_ITEM_TYPE_AUDIO_DEFAULT&#x60;.
   * @return adType
   */
  @javax.annotation.Nullable
  public AdTypeEnum getAdType() {
    return adType;
  }



  public ContentInstreamPositionAssignedTargetingOptionDetails contentInstreamPosition(ContentInstreamPositionEnum contentInstreamPosition) {
    this.contentInstreamPosition = contentInstreamPosition;
    return this;
  }

  /**
   * Required. The content instream position for video or audio ads.
   * @return contentInstreamPosition
   */
  @javax.annotation.Nullable
  public ContentInstreamPositionEnum getContentInstreamPosition() {
    return contentInstreamPosition;
  }

  public void setContentInstreamPosition(ContentInstreamPositionEnum contentInstreamPosition) {
    this.contentInstreamPosition = contentInstreamPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentInstreamPositionAssignedTargetingOptionDetails contentInstreamPositionAssignedTargetingOptionDetails = (ContentInstreamPositionAssignedTargetingOptionDetails) o;
    return Objects.equals(this.adType, contentInstreamPositionAssignedTargetingOptionDetails.adType) &&
        Objects.equals(this.contentInstreamPosition, contentInstreamPositionAssignedTargetingOptionDetails.contentInstreamPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adType, contentInstreamPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentInstreamPositionAssignedTargetingOptionDetails {\n");
    sb.append("    adType: ").append(toIndentedString(adType)).append("\n");
    sb.append("    contentInstreamPosition: ").append(toIndentedString(contentInstreamPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adType");
    openapiFields.add("contentInstreamPosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentInstreamPositionAssignedTargetingOptionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentInstreamPositionAssignedTargetingOptionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentInstreamPositionAssignedTargetingOptionDetails is not found in the empty JSON string", ContentInstreamPositionAssignedTargetingOptionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentInstreamPositionAssignedTargetingOptionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentInstreamPositionAssignedTargetingOptionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adType") != null && !jsonObj.get("adType").isJsonNull()) && !jsonObj.get("adType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adType").toString()));
      }
      // validate the optional field `adType`
      if (jsonObj.get("adType") != null && !jsonObj.get("adType").isJsonNull()) {
        AdTypeEnum.validateJsonElement(jsonObj.get("adType"));
      }
      if ((jsonObj.get("contentInstreamPosition") != null && !jsonObj.get("contentInstreamPosition").isJsonNull()) && !jsonObj.get("contentInstreamPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentInstreamPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentInstreamPosition").toString()));
      }
      // validate the optional field `contentInstreamPosition`
      if (jsonObj.get("contentInstreamPosition") != null && !jsonObj.get("contentInstreamPosition").isJsonNull()) {
        ContentInstreamPositionEnum.validateJsonElement(jsonObj.get("contentInstreamPosition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentInstreamPositionAssignedTargetingOptionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentInstreamPositionAssignedTargetingOptionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentInstreamPositionAssignedTargetingOptionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentInstreamPositionAssignedTargetingOptionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentInstreamPositionAssignedTargetingOptionDetails>() {
           @Override
           public void write(JsonWriter out, ContentInstreamPositionAssignedTargetingOptionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentInstreamPositionAssignedTargetingOptionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentInstreamPositionAssignedTargetingOptionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentInstreamPositionAssignedTargetingOptionDetails
   * @throws IOException if the JSON string is invalid with respect to ContentInstreamPositionAssignedTargetingOptionDetails
   */
  public static ContentInstreamPositionAssignedTargetingOptionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentInstreamPositionAssignedTargetingOptionDetails.class);
  }

  /**
   * Convert an instance of ContentInstreamPositionAssignedTargetingOptionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

