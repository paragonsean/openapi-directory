/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a targetable business chain within a geo region. This will be populated in the business_chain_details field when targeting_type is &#x60;TARGETING_TYPE_BUSINESS_CHAIN&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BusinessChainTargetingOptionDetails {
  public static final String SERIALIZED_NAME_BUSINESS_CHAIN = "businessChain";
  @SerializedName(SERIALIZED_NAME_BUSINESS_CHAIN)
  private String businessChain;

  public static final String SERIALIZED_NAME_GEO_REGION = "geoRegion";
  @SerializedName(SERIALIZED_NAME_GEO_REGION)
  private String geoRegion;

  /**
   * Output only. The type of the geographic region.
   */
  @JsonAdapter(GeoRegionTypeEnum.Adapter.class)
  public enum GeoRegionTypeEnum {
    UNKNOWN("GEO_REGION_TYPE_UNKNOWN"),
    
    OTHER("GEO_REGION_TYPE_OTHER"),
    
    COUNTRY("GEO_REGION_TYPE_COUNTRY"),
    
    REGION("GEO_REGION_TYPE_REGION"),
    
    TERRITORY("GEO_REGION_TYPE_TERRITORY"),
    
    PROVINCE("GEO_REGION_TYPE_PROVINCE"),
    
    STATE("GEO_REGION_TYPE_STATE"),
    
    PREFECTURE("GEO_REGION_TYPE_PREFECTURE"),
    
    GOVERNORATE("GEO_REGION_TYPE_GOVERNORATE"),
    
    CANTON("GEO_REGION_TYPE_CANTON"),
    
    UNION_TERRITORY("GEO_REGION_TYPE_UNION_TERRITORY"),
    
    AUTONOMOUS_COMMUNITY("GEO_REGION_TYPE_AUTONOMOUS_COMMUNITY"),
    
    DMA_REGION("GEO_REGION_TYPE_DMA_REGION"),
    
    METRO("GEO_REGION_TYPE_METRO"),
    
    CONGRESSIONAL_DISTRICT("GEO_REGION_TYPE_CONGRESSIONAL_DISTRICT"),
    
    COUNTY("GEO_REGION_TYPE_COUNTY"),
    
    MUNICIPALITY("GEO_REGION_TYPE_MUNICIPALITY"),
    
    CITY("GEO_REGION_TYPE_CITY"),
    
    POSTAL_CODE("GEO_REGION_TYPE_POSTAL_CODE"),
    
    DEPARTMENT("GEO_REGION_TYPE_DEPARTMENT"),
    
    AIRPORT("GEO_REGION_TYPE_AIRPORT"),
    
    TV_REGION("GEO_REGION_TYPE_TV_REGION"),
    
    OKRUG("GEO_REGION_TYPE_OKRUG"),
    
    BOROUGH("GEO_REGION_TYPE_BOROUGH"),
    
    CITY_REGION("GEO_REGION_TYPE_CITY_REGION"),
    
    ARRONDISSEMENT("GEO_REGION_TYPE_ARRONDISSEMENT"),
    
    NEIGHBORHOOD("GEO_REGION_TYPE_NEIGHBORHOOD"),
    
    UNIVERSITY("GEO_REGION_TYPE_UNIVERSITY"),
    
    DISTRICT("GEO_REGION_TYPE_DISTRICT");

    private String value;

    GeoRegionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GeoRegionTypeEnum fromValue(String value) {
      for (GeoRegionTypeEnum b : GeoRegionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GeoRegionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GeoRegionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GeoRegionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GeoRegionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GeoRegionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GEO_REGION_TYPE = "geoRegionType";
  @SerializedName(SERIALIZED_NAME_GEO_REGION_TYPE)
  private GeoRegionTypeEnum geoRegionType;

  public BusinessChainTargetingOptionDetails() {
  }

  public BusinessChainTargetingOptionDetails(
     String businessChain, 
     String geoRegion, 
     GeoRegionTypeEnum geoRegionType
  ) {
    this();
    this.businessChain = businessChain;
    this.geoRegion = geoRegion;
    this.geoRegionType = geoRegionType;
  }

  /**
   * Output only. The display name of the business chain, e.g. \&quot;KFC\&quot;, \&quot;Chase Bank\&quot;.
   * @return businessChain
   */
  @javax.annotation.Nullable
  public String getBusinessChain() {
    return businessChain;
  }



  /**
   * Output only. The display name of the geographic region, e.g. \&quot;Ontario, Canada\&quot;.
   * @return geoRegion
   */
  @javax.annotation.Nullable
  public String getGeoRegion() {
    return geoRegion;
  }



  /**
   * Output only. The type of the geographic region.
   * @return geoRegionType
   */
  @javax.annotation.Nullable
  public GeoRegionTypeEnum getGeoRegionType() {
    return geoRegionType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessChainTargetingOptionDetails businessChainTargetingOptionDetails = (BusinessChainTargetingOptionDetails) o;
    return Objects.equals(this.businessChain, businessChainTargetingOptionDetails.businessChain) &&
        Objects.equals(this.geoRegion, businessChainTargetingOptionDetails.geoRegion) &&
        Objects.equals(this.geoRegionType, businessChainTargetingOptionDetails.geoRegionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessChain, geoRegion, geoRegionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessChainTargetingOptionDetails {\n");
    sb.append("    businessChain: ").append(toIndentedString(businessChain)).append("\n");
    sb.append("    geoRegion: ").append(toIndentedString(geoRegion)).append("\n");
    sb.append("    geoRegionType: ").append(toIndentedString(geoRegionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("businessChain");
    openapiFields.add("geoRegion");
    openapiFields.add("geoRegionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BusinessChainTargetingOptionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BusinessChainTargetingOptionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessChainTargetingOptionDetails is not found in the empty JSON string", BusinessChainTargetingOptionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BusinessChainTargetingOptionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BusinessChainTargetingOptionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("businessChain") != null && !jsonObj.get("businessChain").isJsonNull()) && !jsonObj.get("businessChain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessChain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessChain").toString()));
      }
      if ((jsonObj.get("geoRegion") != null && !jsonObj.get("geoRegion").isJsonNull()) && !jsonObj.get("geoRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geoRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geoRegion").toString()));
      }
      if ((jsonObj.get("geoRegionType") != null && !jsonObj.get("geoRegionType").isJsonNull()) && !jsonObj.get("geoRegionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geoRegionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geoRegionType").toString()));
      }
      // validate the optional field `geoRegionType`
      if (jsonObj.get("geoRegionType") != null && !jsonObj.get("geoRegionType").isJsonNull()) {
        GeoRegionTypeEnum.validateJsonElement(jsonObj.get("geoRegionType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessChainTargetingOptionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessChainTargetingOptionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessChainTargetingOptionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessChainTargetingOptionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessChainTargetingOptionDetails>() {
           @Override
           public void write(JsonWriter out, BusinessChainTargetingOptionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessChainTargetingOptionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BusinessChainTargetingOptionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BusinessChainTargetingOptionDetails
   * @throws IOException if the JSON string is invalid with respect to BusinessChainTargetingOptionDetails
   */
  public static BusinessChainTargetingOptionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessChainTargetingOptionDetails.class);
  }

  /**
   * Convert an instance of BusinessChainTargetingOptionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

