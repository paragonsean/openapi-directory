/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a Google audience resource. Includes Google audience lists.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAudience {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_GOOGLE_AUDIENCE_ID = "googleAudienceId";
  @SerializedName(SERIALIZED_NAME_GOOGLE_AUDIENCE_ID)
  private String googleAudienceId;

  /**
   * Output only. The type of Google audience. .
   */
  @JsonAdapter(GoogleAudienceTypeEnum.Adapter.class)
  public enum GoogleAudienceTypeEnum {
    UNSPECIFIED("GOOGLE_AUDIENCE_TYPE_UNSPECIFIED"),
    
    AFFINITY("GOOGLE_AUDIENCE_TYPE_AFFINITY"),
    
    IN_MARKET("GOOGLE_AUDIENCE_TYPE_IN_MARKET"),
    
    INSTALLED_APPS("GOOGLE_AUDIENCE_TYPE_INSTALLED_APPS"),
    
    NEW_MOBILE_DEVICES("GOOGLE_AUDIENCE_TYPE_NEW_MOBILE_DEVICES"),
    
    LIFE_EVENT("GOOGLE_AUDIENCE_TYPE_LIFE_EVENT"),
    
    EXTENDED_DEMOGRAPHIC("GOOGLE_AUDIENCE_TYPE_EXTENDED_DEMOGRAPHIC");

    private String value;

    GoogleAudienceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GoogleAudienceTypeEnum fromValue(String value) {
      for (GoogleAudienceTypeEnum b : GoogleAudienceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GoogleAudienceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GoogleAudienceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GoogleAudienceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GoogleAudienceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GoogleAudienceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GOOGLE_AUDIENCE_TYPE = "googleAudienceType";
  @SerializedName(SERIALIZED_NAME_GOOGLE_AUDIENCE_TYPE)
  private GoogleAudienceTypeEnum googleAudienceType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public GoogleAudience() {
  }

  public GoogleAudience(
     String displayName, 
     String googleAudienceId, 
     GoogleAudienceTypeEnum googleAudienceType, 
     String name
  ) {
    this();
    this.displayName = displayName;
    this.googleAudienceId = googleAudienceId;
    this.googleAudienceType = googleAudienceType;
    this.name = name;
  }

  /**
   * Output only. The display name of the Google audience. .
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Output only. The unique ID of the Google audience. Assigned by the system.
   * @return googleAudienceId
   */
  @javax.annotation.Nullable
  public String getGoogleAudienceId() {
    return googleAudienceId;
  }



  /**
   * Output only. The type of Google audience. .
   * @return googleAudienceType
   */
  @javax.annotation.Nullable
  public GoogleAudienceTypeEnum getGoogleAudienceType() {
    return googleAudienceType;
  }



  /**
   * Output only. The resource name of the google audience.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAudience googleAudience = (GoogleAudience) o;
    return Objects.equals(this.displayName, googleAudience.displayName) &&
        Objects.equals(this.googleAudienceId, googleAudience.googleAudienceId) &&
        Objects.equals(this.googleAudienceType, googleAudience.googleAudienceType) &&
        Objects.equals(this.name, googleAudience.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, googleAudienceId, googleAudienceType, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAudience {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    googleAudienceId: ").append(toIndentedString(googleAudienceId)).append("\n");
    sb.append("    googleAudienceType: ").append(toIndentedString(googleAudienceType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("googleAudienceId");
    openapiFields.add("googleAudienceType");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAudience
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAudience.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAudience is not found in the empty JSON string", GoogleAudience.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAudience.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAudience` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("googleAudienceId") != null && !jsonObj.get("googleAudienceId").isJsonNull()) && !jsonObj.get("googleAudienceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleAudienceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleAudienceId").toString()));
      }
      if ((jsonObj.get("googleAudienceType") != null && !jsonObj.get("googleAudienceType").isJsonNull()) && !jsonObj.get("googleAudienceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleAudienceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleAudienceType").toString()));
      }
      // validate the optional field `googleAudienceType`
      if (jsonObj.get("googleAudienceType") != null && !jsonObj.get("googleAudienceType").isJsonNull()) {
        GoogleAudienceTypeEnum.validateJsonElement(jsonObj.get("googleAudienceType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAudience.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAudience' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAudience> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAudience.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAudience>() {
           @Override
           public void write(JsonWriter out, GoogleAudience value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAudience read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAudience given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAudience
   * @throws IOException if the JSON string is invalid with respect to GoogleAudience
   */
  public static GoogleAudience fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAudience.class);
  }

  /**
   * Convert an instance of GoogleAudience to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

