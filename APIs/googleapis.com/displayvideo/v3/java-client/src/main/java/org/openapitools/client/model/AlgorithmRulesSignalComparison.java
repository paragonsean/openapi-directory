/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AlgorithmRulesComparisonValue;
import org.openapitools.client.model.AlgorithmRulesSignal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single comparison. The comparison compares the &#x60;signal&#x60; to the &#x60;comparisonValue&#x60;. The comparison of &#x60;siteId&#x3D;&#x3D;123&#x60; is represented with the following field values: * &#x60;signal&#x60; has an &#x60;impressionSignal&#x60; of &#x60;SITE_ID&#x60;. * &#x60;comparisonOperator&#x60; is set to &#x60;EQUAL&#x60;. * &#x60;comparisonValue&#x60; is set to 123.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlgorithmRulesSignalComparison {
  /**
   * Operator used to compare the two values. In the resulting experession, the &#x60;signal&#x60; will be the first value and the &#x60;comparisonValue will be the second.
   */
  @JsonAdapter(ComparisonOperatorEnum.Adapter.class)
  public enum ComparisonOperatorEnum {
    COMPARISON_OPERATOR_UNSPECIFIED("COMPARISON_OPERATOR_UNSPECIFIED"),
    
    EQUAL("EQUAL"),
    
    GREATER_THAN("GREATER_THAN"),
    
    LESS_THAN("LESS_THAN"),
    
    GREATER_THAN_OR_EQUAL_TO("GREATER_THAN_OR_EQUAL_TO"),
    
    LESS_THAN_OR_EQUAL_TO("LESS_THAN_OR_EQUAL_TO");

    private String value;

    ComparisonOperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComparisonOperatorEnum fromValue(String value) {
      for (ComparisonOperatorEnum b : ComparisonOperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComparisonOperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComparisonOperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComparisonOperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComparisonOperatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComparisonOperatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPARISON_OPERATOR = "comparisonOperator";
  @SerializedName(SERIALIZED_NAME_COMPARISON_OPERATOR)
  private ComparisonOperatorEnum comparisonOperator;

  public static final String SERIALIZED_NAME_COMPARISON_VALUE = "comparisonValue";
  @SerializedName(SERIALIZED_NAME_COMPARISON_VALUE)
  private AlgorithmRulesComparisonValue comparisonValue;

  public static final String SERIALIZED_NAME_SIGNAL = "signal";
  @SerializedName(SERIALIZED_NAME_SIGNAL)
  private AlgorithmRulesSignal signal;

  public AlgorithmRulesSignalComparison() {
  }

  public AlgorithmRulesSignalComparison comparisonOperator(ComparisonOperatorEnum comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
    return this;
  }

  /**
   * Operator used to compare the two values. In the resulting experession, the &#x60;signal&#x60; will be the first value and the &#x60;comparisonValue will be the second.
   * @return comparisonOperator
   */
  @javax.annotation.Nullable
  public ComparisonOperatorEnum getComparisonOperator() {
    return comparisonOperator;
  }

  public void setComparisonOperator(ComparisonOperatorEnum comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
  }


  public AlgorithmRulesSignalComparison comparisonValue(AlgorithmRulesComparisonValue comparisonValue) {
    this.comparisonValue = comparisonValue;
    return this;
  }

  /**
   * Get comparisonValue
   * @return comparisonValue
   */
  @javax.annotation.Nullable
  public AlgorithmRulesComparisonValue getComparisonValue() {
    return comparisonValue;
  }

  public void setComparisonValue(AlgorithmRulesComparisonValue comparisonValue) {
    this.comparisonValue = comparisonValue;
  }


  public AlgorithmRulesSignalComparison signal(AlgorithmRulesSignal signal) {
    this.signal = signal;
    return this;
  }

  /**
   * Get signal
   * @return signal
   */
  @javax.annotation.Nullable
  public AlgorithmRulesSignal getSignal() {
    return signal;
  }

  public void setSignal(AlgorithmRulesSignal signal) {
    this.signal = signal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlgorithmRulesSignalComparison algorithmRulesSignalComparison = (AlgorithmRulesSignalComparison) o;
    return Objects.equals(this.comparisonOperator, algorithmRulesSignalComparison.comparisonOperator) &&
        Objects.equals(this.comparisonValue, algorithmRulesSignalComparison.comparisonValue) &&
        Objects.equals(this.signal, algorithmRulesSignalComparison.signal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comparisonOperator, comparisonValue, signal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlgorithmRulesSignalComparison {\n");
    sb.append("    comparisonOperator: ").append(toIndentedString(comparisonOperator)).append("\n");
    sb.append("    comparisonValue: ").append(toIndentedString(comparisonValue)).append("\n");
    sb.append("    signal: ").append(toIndentedString(signal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comparisonOperator");
    openapiFields.add("comparisonValue");
    openapiFields.add("signal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlgorithmRulesSignalComparison
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlgorithmRulesSignalComparison.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlgorithmRulesSignalComparison is not found in the empty JSON string", AlgorithmRulesSignalComparison.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlgorithmRulesSignalComparison.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlgorithmRulesSignalComparison` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comparisonOperator") != null && !jsonObj.get("comparisonOperator").isJsonNull()) && !jsonObj.get("comparisonOperator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comparisonOperator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comparisonOperator").toString()));
      }
      // validate the optional field `comparisonOperator`
      if (jsonObj.get("comparisonOperator") != null && !jsonObj.get("comparisonOperator").isJsonNull()) {
        ComparisonOperatorEnum.validateJsonElement(jsonObj.get("comparisonOperator"));
      }
      // validate the optional field `comparisonValue`
      if (jsonObj.get("comparisonValue") != null && !jsonObj.get("comparisonValue").isJsonNull()) {
        AlgorithmRulesComparisonValue.validateJsonElement(jsonObj.get("comparisonValue"));
      }
      // validate the optional field `signal`
      if (jsonObj.get("signal") != null && !jsonObj.get("signal").isJsonNull()) {
        AlgorithmRulesSignal.validateJsonElement(jsonObj.get("signal"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlgorithmRulesSignalComparison.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlgorithmRulesSignalComparison' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlgorithmRulesSignalComparison> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlgorithmRulesSignalComparison.class));

       return (TypeAdapter<T>) new TypeAdapter<AlgorithmRulesSignalComparison>() {
           @Override
           public void write(JsonWriter out, AlgorithmRulesSignalComparison value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlgorithmRulesSignalComparison read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlgorithmRulesSignalComparison given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlgorithmRulesSignalComparison
   * @throws IOException if the JSON string is invalid with respect to AlgorithmRulesSignalComparison
   */
  public static AlgorithmRulesSignalComparison fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlgorithmRulesSignalComparison.class);
  }

  /**
   * Convert an instance of AlgorithmRulesSignalComparison to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

