/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExchangeReviewStatus;
import org.openapitools.client.model.PublisherReviewStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Review statuses for the creative.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReviewStatusInfo {
  /**
   * Represents the basic approval needed for a creative to begin serving. Summary of creative_and_landing_page_review_status and content_and_policy_review_status.
   */
  @JsonAdapter(ApprovalStatusEnum.Adapter.class)
  public enum ApprovalStatusEnum {
    UNSPECIFIED("APPROVAL_STATUS_UNSPECIFIED"),
    
    PENDING_NOT_SERVABLE("APPROVAL_STATUS_PENDING_NOT_SERVABLE"),
    
    PENDING_SERVABLE("APPROVAL_STATUS_PENDING_SERVABLE"),
    
    APPROVED_SERVABLE("APPROVAL_STATUS_APPROVED_SERVABLE"),
    
    REJECTED_NOT_SERVABLE("APPROVAL_STATUS_REJECTED_NOT_SERVABLE");

    private String value;

    ApprovalStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApprovalStatusEnum fromValue(String value) {
      for (ApprovalStatusEnum b : ApprovalStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApprovalStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApprovalStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApprovalStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApprovalStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApprovalStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPROVAL_STATUS = "approvalStatus";
  @SerializedName(SERIALIZED_NAME_APPROVAL_STATUS)
  private ApprovalStatusEnum approvalStatus;

  /**
   * Content and policy review status for the creative.
   */
  @JsonAdapter(ContentAndPolicyReviewStatusEnum.Adapter.class)
  public enum ContentAndPolicyReviewStatusEnum {
    UNSPECIFIED("REVIEW_STATUS_UNSPECIFIED"),
    
    APPROVED("REVIEW_STATUS_APPROVED"),
    
    REJECTED("REVIEW_STATUS_REJECTED"),
    
    PENDING("REVIEW_STATUS_PENDING");

    private String value;

    ContentAndPolicyReviewStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentAndPolicyReviewStatusEnum fromValue(String value) {
      for (ContentAndPolicyReviewStatusEnum b : ContentAndPolicyReviewStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentAndPolicyReviewStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentAndPolicyReviewStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentAndPolicyReviewStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentAndPolicyReviewStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentAndPolicyReviewStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_AND_POLICY_REVIEW_STATUS = "contentAndPolicyReviewStatus";
  @SerializedName(SERIALIZED_NAME_CONTENT_AND_POLICY_REVIEW_STATUS)
  private ContentAndPolicyReviewStatusEnum contentAndPolicyReviewStatus;

  /**
   * Creative and landing page review status for the creative.
   */
  @JsonAdapter(CreativeAndLandingPageReviewStatusEnum.Adapter.class)
  public enum CreativeAndLandingPageReviewStatusEnum {
    UNSPECIFIED("REVIEW_STATUS_UNSPECIFIED"),
    
    APPROVED("REVIEW_STATUS_APPROVED"),
    
    REJECTED("REVIEW_STATUS_REJECTED"),
    
    PENDING("REVIEW_STATUS_PENDING");

    private String value;

    CreativeAndLandingPageReviewStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreativeAndLandingPageReviewStatusEnum fromValue(String value) {
      for (CreativeAndLandingPageReviewStatusEnum b : CreativeAndLandingPageReviewStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreativeAndLandingPageReviewStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreativeAndLandingPageReviewStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreativeAndLandingPageReviewStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreativeAndLandingPageReviewStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreativeAndLandingPageReviewStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATIVE_AND_LANDING_PAGE_REVIEW_STATUS = "creativeAndLandingPageReviewStatus";
  @SerializedName(SERIALIZED_NAME_CREATIVE_AND_LANDING_PAGE_REVIEW_STATUS)
  private CreativeAndLandingPageReviewStatusEnum creativeAndLandingPageReviewStatus;

  public static final String SERIALIZED_NAME_EXCHANGE_REVIEW_STATUSES = "exchangeReviewStatuses";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_REVIEW_STATUSES)
  private List<ExchangeReviewStatus> exchangeReviewStatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLISHER_REVIEW_STATUSES = "publisherReviewStatuses";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_REVIEW_STATUSES)
  private List<PublisherReviewStatus> publisherReviewStatuses = new ArrayList<>();

  public ReviewStatusInfo() {
  }

  public ReviewStatusInfo approvalStatus(ApprovalStatusEnum approvalStatus) {
    this.approvalStatus = approvalStatus;
    return this;
  }

  /**
   * Represents the basic approval needed for a creative to begin serving. Summary of creative_and_landing_page_review_status and content_and_policy_review_status.
   * @return approvalStatus
   */
  @javax.annotation.Nullable
  public ApprovalStatusEnum getApprovalStatus() {
    return approvalStatus;
  }

  public void setApprovalStatus(ApprovalStatusEnum approvalStatus) {
    this.approvalStatus = approvalStatus;
  }


  public ReviewStatusInfo contentAndPolicyReviewStatus(ContentAndPolicyReviewStatusEnum contentAndPolicyReviewStatus) {
    this.contentAndPolicyReviewStatus = contentAndPolicyReviewStatus;
    return this;
  }

  /**
   * Content and policy review status for the creative.
   * @return contentAndPolicyReviewStatus
   */
  @javax.annotation.Nullable
  public ContentAndPolicyReviewStatusEnum getContentAndPolicyReviewStatus() {
    return contentAndPolicyReviewStatus;
  }

  public void setContentAndPolicyReviewStatus(ContentAndPolicyReviewStatusEnum contentAndPolicyReviewStatus) {
    this.contentAndPolicyReviewStatus = contentAndPolicyReviewStatus;
  }


  public ReviewStatusInfo creativeAndLandingPageReviewStatus(CreativeAndLandingPageReviewStatusEnum creativeAndLandingPageReviewStatus) {
    this.creativeAndLandingPageReviewStatus = creativeAndLandingPageReviewStatus;
    return this;
  }

  /**
   * Creative and landing page review status for the creative.
   * @return creativeAndLandingPageReviewStatus
   */
  @javax.annotation.Nullable
  public CreativeAndLandingPageReviewStatusEnum getCreativeAndLandingPageReviewStatus() {
    return creativeAndLandingPageReviewStatus;
  }

  public void setCreativeAndLandingPageReviewStatus(CreativeAndLandingPageReviewStatusEnum creativeAndLandingPageReviewStatus) {
    this.creativeAndLandingPageReviewStatus = creativeAndLandingPageReviewStatus;
  }


  public ReviewStatusInfo exchangeReviewStatuses(List<ExchangeReviewStatus> exchangeReviewStatuses) {
    this.exchangeReviewStatuses = exchangeReviewStatuses;
    return this;
  }

  public ReviewStatusInfo addExchangeReviewStatusesItem(ExchangeReviewStatus exchangeReviewStatusesItem) {
    if (this.exchangeReviewStatuses == null) {
      this.exchangeReviewStatuses = new ArrayList<>();
    }
    this.exchangeReviewStatuses.add(exchangeReviewStatusesItem);
    return this;
  }

  /**
   * Exchange review statuses for the creative.
   * @return exchangeReviewStatuses
   */
  @javax.annotation.Nullable
  public List<ExchangeReviewStatus> getExchangeReviewStatuses() {
    return exchangeReviewStatuses;
  }

  public void setExchangeReviewStatuses(List<ExchangeReviewStatus> exchangeReviewStatuses) {
    this.exchangeReviewStatuses = exchangeReviewStatuses;
  }


  public ReviewStatusInfo publisherReviewStatuses(List<PublisherReviewStatus> publisherReviewStatuses) {
    this.publisherReviewStatuses = publisherReviewStatuses;
    return this;
  }

  public ReviewStatusInfo addPublisherReviewStatusesItem(PublisherReviewStatus publisherReviewStatusesItem) {
    if (this.publisherReviewStatuses == null) {
      this.publisherReviewStatuses = new ArrayList<>();
    }
    this.publisherReviewStatuses.add(publisherReviewStatusesItem);
    return this;
  }

  /**
   * Publisher review statuses for the creative.
   * @return publisherReviewStatuses
   */
  @javax.annotation.Nullable
  public List<PublisherReviewStatus> getPublisherReviewStatuses() {
    return publisherReviewStatuses;
  }

  public void setPublisherReviewStatuses(List<PublisherReviewStatus> publisherReviewStatuses) {
    this.publisherReviewStatuses = publisherReviewStatuses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReviewStatusInfo reviewStatusInfo = (ReviewStatusInfo) o;
    return Objects.equals(this.approvalStatus, reviewStatusInfo.approvalStatus) &&
        Objects.equals(this.contentAndPolicyReviewStatus, reviewStatusInfo.contentAndPolicyReviewStatus) &&
        Objects.equals(this.creativeAndLandingPageReviewStatus, reviewStatusInfo.creativeAndLandingPageReviewStatus) &&
        Objects.equals(this.exchangeReviewStatuses, reviewStatusInfo.exchangeReviewStatuses) &&
        Objects.equals(this.publisherReviewStatuses, reviewStatusInfo.publisherReviewStatuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvalStatus, contentAndPolicyReviewStatus, creativeAndLandingPageReviewStatus, exchangeReviewStatuses, publisherReviewStatuses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReviewStatusInfo {\n");
    sb.append("    approvalStatus: ").append(toIndentedString(approvalStatus)).append("\n");
    sb.append("    contentAndPolicyReviewStatus: ").append(toIndentedString(contentAndPolicyReviewStatus)).append("\n");
    sb.append("    creativeAndLandingPageReviewStatus: ").append(toIndentedString(creativeAndLandingPageReviewStatus)).append("\n");
    sb.append("    exchangeReviewStatuses: ").append(toIndentedString(exchangeReviewStatuses)).append("\n");
    sb.append("    publisherReviewStatuses: ").append(toIndentedString(publisherReviewStatuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approvalStatus");
    openapiFields.add("contentAndPolicyReviewStatus");
    openapiFields.add("creativeAndLandingPageReviewStatus");
    openapiFields.add("exchangeReviewStatuses");
    openapiFields.add("publisherReviewStatuses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReviewStatusInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReviewStatusInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReviewStatusInfo is not found in the empty JSON string", ReviewStatusInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReviewStatusInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReviewStatusInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("approvalStatus") != null && !jsonObj.get("approvalStatus").isJsonNull()) && !jsonObj.get("approvalStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalStatus").toString()));
      }
      // validate the optional field `approvalStatus`
      if (jsonObj.get("approvalStatus") != null && !jsonObj.get("approvalStatus").isJsonNull()) {
        ApprovalStatusEnum.validateJsonElement(jsonObj.get("approvalStatus"));
      }
      if ((jsonObj.get("contentAndPolicyReviewStatus") != null && !jsonObj.get("contentAndPolicyReviewStatus").isJsonNull()) && !jsonObj.get("contentAndPolicyReviewStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentAndPolicyReviewStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentAndPolicyReviewStatus").toString()));
      }
      // validate the optional field `contentAndPolicyReviewStatus`
      if (jsonObj.get("contentAndPolicyReviewStatus") != null && !jsonObj.get("contentAndPolicyReviewStatus").isJsonNull()) {
        ContentAndPolicyReviewStatusEnum.validateJsonElement(jsonObj.get("contentAndPolicyReviewStatus"));
      }
      if ((jsonObj.get("creativeAndLandingPageReviewStatus") != null && !jsonObj.get("creativeAndLandingPageReviewStatus").isJsonNull()) && !jsonObj.get("creativeAndLandingPageReviewStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeAndLandingPageReviewStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeAndLandingPageReviewStatus").toString()));
      }
      // validate the optional field `creativeAndLandingPageReviewStatus`
      if (jsonObj.get("creativeAndLandingPageReviewStatus") != null && !jsonObj.get("creativeAndLandingPageReviewStatus").isJsonNull()) {
        CreativeAndLandingPageReviewStatusEnum.validateJsonElement(jsonObj.get("creativeAndLandingPageReviewStatus"));
      }
      if (jsonObj.get("exchangeReviewStatuses") != null && !jsonObj.get("exchangeReviewStatuses").isJsonNull()) {
        JsonArray jsonArrayexchangeReviewStatuses = jsonObj.getAsJsonArray("exchangeReviewStatuses");
        if (jsonArrayexchangeReviewStatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exchangeReviewStatuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exchangeReviewStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("exchangeReviewStatuses").toString()));
          }

          // validate the optional field `exchangeReviewStatuses` (array)
          for (int i = 0; i < jsonArrayexchangeReviewStatuses.size(); i++) {
            ExchangeReviewStatus.validateJsonElement(jsonArrayexchangeReviewStatuses.get(i));
          };
        }
      }
      if (jsonObj.get("publisherReviewStatuses") != null && !jsonObj.get("publisherReviewStatuses").isJsonNull()) {
        JsonArray jsonArraypublisherReviewStatuses = jsonObj.getAsJsonArray("publisherReviewStatuses");
        if (jsonArraypublisherReviewStatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("publisherReviewStatuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `publisherReviewStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("publisherReviewStatuses").toString()));
          }

          // validate the optional field `publisherReviewStatuses` (array)
          for (int i = 0; i < jsonArraypublisherReviewStatuses.size(); i++) {
            PublisherReviewStatus.validateJsonElement(jsonArraypublisherReviewStatuses.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReviewStatusInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReviewStatusInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReviewStatusInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReviewStatusInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ReviewStatusInfo>() {
           @Override
           public void write(JsonWriter out, ReviewStatusInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReviewStatusInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReviewStatusInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReviewStatusInfo
   * @throws IOException if the JSON string is invalid with respect to ReviewStatusInfo
   */
  public static ReviewStatusInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReviewStatusInfo.class);
  }

  /**
   * Convert an instance of ReviewStatusInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

