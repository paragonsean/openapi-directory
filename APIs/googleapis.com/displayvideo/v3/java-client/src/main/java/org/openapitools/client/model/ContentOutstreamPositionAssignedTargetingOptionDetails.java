/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Assigned content outstream position targeting option details. This will be populated in the content_outstream_position_details field when targeting_type is &#x60;TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentOutstreamPositionAssignedTargetingOptionDetails {
  /**
   * Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default. Possible values are: * &#x60;AD_TYPE_DISPLAY&#x60;, the setting will be inherited by new line item when line_item_type is &#x60;LINE_ITEM_TYPE_DISPLAY_DEFAULT&#x60;. * &#x60;AD_TYPE_VIDEO&#x60;, the setting will be inherited by new line item when line_item_type is &#x60;LINE_ITEM_TYPE_VIDEO_DEFAULT&#x60;.
   */
  @JsonAdapter(AdTypeEnum.Adapter.class)
  public enum AdTypeEnum {
    UNSPECIFIED("AD_TYPE_UNSPECIFIED"),
    
    DISPLAY("AD_TYPE_DISPLAY"),
    
    VIDEO("AD_TYPE_VIDEO"),
    
    AUDIO("AD_TYPE_AUDIO");

    private String value;

    AdTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdTypeEnum fromValue(String value) {
      for (AdTypeEnum b : AdTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AD_TYPE = "adType";
  @SerializedName(SERIALIZED_NAME_AD_TYPE)
  private AdTypeEnum adType;

  /**
   * Required. The content outstream position.
   */
  @JsonAdapter(ContentOutstreamPositionEnum.Adapter.class)
  public enum ContentOutstreamPositionEnum {
    UNSPECIFIED("CONTENT_OUTSTREAM_POSITION_UNSPECIFIED"),
    
    UNKNOWN("CONTENT_OUTSTREAM_POSITION_UNKNOWN"),
    
    IN_ARTICLE("CONTENT_OUTSTREAM_POSITION_IN_ARTICLE"),
    
    IN_BANNER("CONTENT_OUTSTREAM_POSITION_IN_BANNER"),
    
    IN_FEED("CONTENT_OUTSTREAM_POSITION_IN_FEED"),
    
    INTERSTITIAL("CONTENT_OUTSTREAM_POSITION_INTERSTITIAL");

    private String value;

    ContentOutstreamPositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentOutstreamPositionEnum fromValue(String value) {
      for (ContentOutstreamPositionEnum b : ContentOutstreamPositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentOutstreamPositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentOutstreamPositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentOutstreamPositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentOutstreamPositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentOutstreamPositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_OUTSTREAM_POSITION = "contentOutstreamPosition";
  @SerializedName(SERIALIZED_NAME_CONTENT_OUTSTREAM_POSITION)
  private ContentOutstreamPositionEnum contentOutstreamPosition;

  public ContentOutstreamPositionAssignedTargetingOptionDetails() {
  }

  public ContentOutstreamPositionAssignedTargetingOptionDetails(
     AdTypeEnum adType
  ) {
    this();
    this.adType = adType;
  }

  /**
   * Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default. Possible values are: * &#x60;AD_TYPE_DISPLAY&#x60;, the setting will be inherited by new line item when line_item_type is &#x60;LINE_ITEM_TYPE_DISPLAY_DEFAULT&#x60;. * &#x60;AD_TYPE_VIDEO&#x60;, the setting will be inherited by new line item when line_item_type is &#x60;LINE_ITEM_TYPE_VIDEO_DEFAULT&#x60;.
   * @return adType
   */
  @javax.annotation.Nullable
  public AdTypeEnum getAdType() {
    return adType;
  }



  public ContentOutstreamPositionAssignedTargetingOptionDetails contentOutstreamPosition(ContentOutstreamPositionEnum contentOutstreamPosition) {
    this.contentOutstreamPosition = contentOutstreamPosition;
    return this;
  }

  /**
   * Required. The content outstream position.
   * @return contentOutstreamPosition
   */
  @javax.annotation.Nullable
  public ContentOutstreamPositionEnum getContentOutstreamPosition() {
    return contentOutstreamPosition;
  }

  public void setContentOutstreamPosition(ContentOutstreamPositionEnum contentOutstreamPosition) {
    this.contentOutstreamPosition = contentOutstreamPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentOutstreamPositionAssignedTargetingOptionDetails contentOutstreamPositionAssignedTargetingOptionDetails = (ContentOutstreamPositionAssignedTargetingOptionDetails) o;
    return Objects.equals(this.adType, contentOutstreamPositionAssignedTargetingOptionDetails.adType) &&
        Objects.equals(this.contentOutstreamPosition, contentOutstreamPositionAssignedTargetingOptionDetails.contentOutstreamPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adType, contentOutstreamPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentOutstreamPositionAssignedTargetingOptionDetails {\n");
    sb.append("    adType: ").append(toIndentedString(adType)).append("\n");
    sb.append("    contentOutstreamPosition: ").append(toIndentedString(contentOutstreamPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adType");
    openapiFields.add("contentOutstreamPosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentOutstreamPositionAssignedTargetingOptionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentOutstreamPositionAssignedTargetingOptionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentOutstreamPositionAssignedTargetingOptionDetails is not found in the empty JSON string", ContentOutstreamPositionAssignedTargetingOptionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentOutstreamPositionAssignedTargetingOptionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentOutstreamPositionAssignedTargetingOptionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adType") != null && !jsonObj.get("adType").isJsonNull()) && !jsonObj.get("adType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adType").toString()));
      }
      // validate the optional field `adType`
      if (jsonObj.get("adType") != null && !jsonObj.get("adType").isJsonNull()) {
        AdTypeEnum.validateJsonElement(jsonObj.get("adType"));
      }
      if ((jsonObj.get("contentOutstreamPosition") != null && !jsonObj.get("contentOutstreamPosition").isJsonNull()) && !jsonObj.get("contentOutstreamPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentOutstreamPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentOutstreamPosition").toString()));
      }
      // validate the optional field `contentOutstreamPosition`
      if (jsonObj.get("contentOutstreamPosition") != null && !jsonObj.get("contentOutstreamPosition").isJsonNull()) {
        ContentOutstreamPositionEnum.validateJsonElement(jsonObj.get("contentOutstreamPosition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentOutstreamPositionAssignedTargetingOptionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentOutstreamPositionAssignedTargetingOptionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentOutstreamPositionAssignedTargetingOptionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentOutstreamPositionAssignedTargetingOptionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentOutstreamPositionAssignedTargetingOptionDetails>() {
           @Override
           public void write(JsonWriter out, ContentOutstreamPositionAssignedTargetingOptionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentOutstreamPositionAssignedTargetingOptionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentOutstreamPositionAssignedTargetingOptionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentOutstreamPositionAssignedTargetingOptionDetails
   * @throws IOException if the JSON string is invalid with respect to ContentOutstreamPositionAssignedTargetingOptionDetails
   */
  public static ContentOutstreamPositionAssignedTargetingOptionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentOutstreamPositionAssignedTargetingOptionDetails.class);
  }

  /**
   * Convert an instance of ContentOutstreamPositionAssignedTargetingOptionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

