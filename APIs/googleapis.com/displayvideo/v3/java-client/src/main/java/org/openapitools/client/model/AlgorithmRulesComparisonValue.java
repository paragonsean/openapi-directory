/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DayAndTime;
import org.openapitools.client.model.Dimensions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A value to compare the signal to.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlgorithmRulesComparisonValue {
  public static final String SERIALIZED_NAME_BOOL_VALUE = "boolValue";
  @SerializedName(SERIALIZED_NAME_BOOL_VALUE)
  private Boolean boolValue;

  public static final String SERIALIZED_NAME_CREATIVE_DIMENSION_VALUE = "creativeDimensionValue";
  @SerializedName(SERIALIZED_NAME_CREATIVE_DIMENSION_VALUE)
  private Dimensions creativeDimensionValue;

  public static final String SERIALIZED_NAME_DAY_AND_TIME_VALUE = "dayAndTimeValue";
  @SerializedName(SERIALIZED_NAME_DAY_AND_TIME_VALUE)
  private DayAndTime dayAndTimeValue;

  /**
   * Device type value.
   */
  @JsonAdapter(DeviceTypeValueEnum.Adapter.class)
  public enum DeviceTypeValueEnum {
    UNSPECIFIED("RULE_DEVICE_TYPE_UNSPECIFIED"),
    
    COMPUTER("RULE_DEVICE_TYPE_COMPUTER"),
    
    CONNECTED_TV("RULE_DEVICE_TYPE_CONNECTED_TV"),
    
    SMART_PHONE("RULE_DEVICE_TYPE_SMART_PHONE"),
    
    TABLET("RULE_DEVICE_TYPE_TABLET"),
    
    CONNECTED_DEVICE("RULE_DEVICE_TYPE_CONNECTED_DEVICE"),
    
    SET_TOP_BOX("RULE_DEVICE_TYPE_SET_TOP_BOX");

    private String value;

    DeviceTypeValueEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeviceTypeValueEnum fromValue(String value) {
      for (DeviceTypeValueEnum b : DeviceTypeValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeviceTypeValueEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceTypeValueEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceTypeValueEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeviceTypeValueEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeviceTypeValueEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_TYPE_VALUE = "deviceTypeValue";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE_VALUE)
  private DeviceTypeValueEnum deviceTypeValue;

  public static final String SERIALIZED_NAME_DOUBLE_VALUE = "doubleValue";
  @SerializedName(SERIALIZED_NAME_DOUBLE_VALUE)
  private Double doubleValue;

  /**
   * Environment value.
   */
  @JsonAdapter(EnvironmentValueEnum.Adapter.class)
  public enum EnvironmentValueEnum {
    UNSPECIFIED("ENVIRONMENT_UNSPECIFIED"),
    
    WEB_OPTIMIZED("ENVIRONMENT_WEB_OPTIMIZED"),
    
    WEB_NOT_OPTIMIZED("ENVIRONMENT_WEB_NOT_OPTIMIZED"),
    
    APP("ENVIRONMENT_APP");

    private String value;

    EnvironmentValueEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnvironmentValueEnum fromValue(String value) {
      for (EnvironmentValueEnum b : EnvironmentValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnvironmentValueEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnvironmentValueEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnvironmentValueEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnvironmentValueEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnvironmentValueEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENVIRONMENT_VALUE = "environmentValue";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_VALUE)
  private EnvironmentValueEnum environmentValue;

  /**
   * Exchange value.
   */
  @JsonAdapter(ExchangeValueEnum.Adapter.class)
  public enum ExchangeValueEnum {
    UNSPECIFIED("EXCHANGE_UNSPECIFIED"),
    
    GOOGLE_AD_MANAGER("EXCHANGE_GOOGLE_AD_MANAGER"),
    
    APPNEXUS("EXCHANGE_APPNEXUS"),
    
    BRIGHTROLL("EXCHANGE_BRIGHTROLL"),
    
    ADFORM("EXCHANGE_ADFORM"),
    
    ADMETA("EXCHANGE_ADMETA"),
    
    ADMIXER("EXCHANGE_ADMIXER"),
    
    ADSMOGO("EXCHANGE_ADSMOGO"),
    
    ADSWIZZ("EXCHANGE_ADSWIZZ"),
    
    BIDSWITCH("EXCHANGE_BIDSWITCH"),
    
    BRIGHTROLL_DISPLAY("EXCHANGE_BRIGHTROLL_DISPLAY"),
    
    CADREON("EXCHANGE_CADREON"),
    
    DAILYMOTION("EXCHANGE_DAILYMOTION"),
    
    FIVE("EXCHANGE_FIVE"),
    
    FLUCT("EXCHANGE_FLUCT"),
    
    FREEWHEEL("EXCHANGE_FREEWHEEL"),
    
    GENIEE("EXCHANGE_GENIEE"),
    
    GUMGUM("EXCHANGE_GUMGUM"),
    
    IMOBILE("EXCHANGE_IMOBILE"),
    
    IBILLBOARD("EXCHANGE_IBILLBOARD"),
    
    IMPROVE_DIGITAL("EXCHANGE_IMPROVE_DIGITAL"),
    
    INDEX("EXCHANGE_INDEX"),
    
    KARGO("EXCHANGE_KARGO"),
    
    MICROAD("EXCHANGE_MICROAD"),
    
    MOPUB("EXCHANGE_MOPUB"),
    
    NEND("EXCHANGE_NEND"),
    
    ONE_BY_AOL_DISPLAY("EXCHANGE_ONE_BY_AOL_DISPLAY"),
    
    ONE_BY_AOL_MOBILE("EXCHANGE_ONE_BY_AOL_MOBILE"),
    
    ONE_BY_AOL_VIDEO("EXCHANGE_ONE_BY_AOL_VIDEO"),
    
    OOYALA("EXCHANGE_OOYALA"),
    
    OPENX("EXCHANGE_OPENX"),
    
    PERMODO("EXCHANGE_PERMODO"),
    
    PLATFORMONE("EXCHANGE_PLATFORMONE"),
    
    PLATFORMID("EXCHANGE_PLATFORMID"),
    
    PUBMATIC("EXCHANGE_PUBMATIC"),
    
    PULSEPOINT("EXCHANGE_PULSEPOINT"),
    
    REVENUEMAX("EXCHANGE_REVENUEMAX"),
    
    RUBICON("EXCHANGE_RUBICON"),
    
    SMARTCLIP("EXCHANGE_SMARTCLIP"),
    
    SMARTRTB("EXCHANGE_SMARTRTB"),
    
    SMARTSTREAMTV("EXCHANGE_SMARTSTREAMTV"),
    
    SOVRN("EXCHANGE_SOVRN"),
    
    SPOTXCHANGE("EXCHANGE_SPOTXCHANGE"),
    
    STROER("EXCHANGE_STROER"),
    
    TEADSTV("EXCHANGE_TEADSTV"),
    
    TELARIA("EXCHANGE_TELARIA"),
    
    TVN("EXCHANGE_TVN"),
    
    UNITED("EXCHANGE_UNITED"),
    
    YIELDLAB("EXCHANGE_YIELDLAB"),
    
    YIELDMO("EXCHANGE_YIELDMO"),
    
    UNRULYX("EXCHANGE_UNRULYX"),
    
    OPEN8("EXCHANGE_OPEN8"),
    
    TRITON("EXCHANGE_TRITON"),
    
    TRIPLELIFT("EXCHANGE_TRIPLELIFT"),
    
    TABOOLA("EXCHANGE_TABOOLA"),
    
    INMOBI("EXCHANGE_INMOBI"),
    
    SMAATO("EXCHANGE_SMAATO"),
    
    AJA("EXCHANGE_AJA"),
    
    SUPERSHIP("EXCHANGE_SUPERSHIP"),
    
    NEXSTAR_DIGITAL("EXCHANGE_NEXSTAR_DIGITAL"),
    
    WAZE("EXCHANGE_WAZE"),
    
    SOUNDCAST("EXCHANGE_SOUNDCAST"),
    
    SHARETHROUGH("EXCHANGE_SHARETHROUGH"),
    
    FYBER("EXCHANGE_FYBER"),
    
    RED_FOR_PUBLISHERS("EXCHANGE_RED_FOR_PUBLISHERS"),
    
    MEDIANET("EXCHANGE_MEDIANET"),
    
    TAPJOY("EXCHANGE_TAPJOY"),
    
    VISTAR("EXCHANGE_VISTAR"),
    
    DAX("EXCHANGE_DAX"),
    
    JCD("EXCHANGE_JCD"),
    
    PLACE_EXCHANGE("EXCHANGE_PLACE_EXCHANGE"),
    
    APPLOVIN("EXCHANGE_APPLOVIN"),
    
    CONNATIX("EXCHANGE_CONNATIX"),
    
    RESET_DIGITAL("EXCHANGE_RESET_DIGITAL"),
    
    HIVESTACK("EXCHANGE_HIVESTACK"),
    
    APPLOVIN_GBID("EXCHANGE_APPLOVIN_GBID"),
    
    FYBER_GBID("EXCHANGE_FYBER_GBID"),
    
    UNITY_GBID("EXCHANGE_UNITY_GBID"),
    
    CHARTBOOST_GBID("EXCHANGE_CHARTBOOST_GBID"),
    
    ADMOST_GBID("EXCHANGE_ADMOST_GBID"),
    
    TOPON_GBID("EXCHANGE_TOPON_GBID");

    private String value;

    ExchangeValueEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExchangeValueEnum fromValue(String value) {
      for (ExchangeValueEnum b : ExchangeValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExchangeValueEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExchangeValueEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExchangeValueEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExchangeValueEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExchangeValueEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCHANGE_VALUE = "exchangeValue";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_VALUE)
  private ExchangeValueEnum exchangeValue;

  public static final String SERIALIZED_NAME_INT64_VALUE = "int64Value";
  @SerializedName(SERIALIZED_NAME_INT64_VALUE)
  private String int64Value;

  /**
   * Ad position value.
   */
  @JsonAdapter(OnScreenPositionValueEnum.Adapter.class)
  public enum OnScreenPositionValueEnum {
    UNSPECIFIED("ON_SCREEN_POSITION_UNSPECIFIED"),
    
    UNKNOWN("ON_SCREEN_POSITION_UNKNOWN"),
    
    ABOVE_THE_FOLD("ON_SCREEN_POSITION_ABOVE_THE_FOLD"),
    
    BELOW_THE_FOLD("ON_SCREEN_POSITION_BELOW_THE_FOLD");

    private String value;

    OnScreenPositionValueEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OnScreenPositionValueEnum fromValue(String value) {
      for (OnScreenPositionValueEnum b : OnScreenPositionValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OnScreenPositionValueEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OnScreenPositionValueEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OnScreenPositionValueEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OnScreenPositionValueEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OnScreenPositionValueEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ON_SCREEN_POSITION_VALUE = "onScreenPositionValue";
  @SerializedName(SERIALIZED_NAME_ON_SCREEN_POSITION_VALUE)
  private OnScreenPositionValueEnum onScreenPositionValue;

  public static final String SERIALIZED_NAME_STRING_VALUE = "stringValue";
  @SerializedName(SERIALIZED_NAME_STRING_VALUE)
  private String stringValue;

  public AlgorithmRulesComparisonValue() {
  }

  public AlgorithmRulesComparisonValue boolValue(Boolean boolValue) {
    this.boolValue = boolValue;
    return this;
  }

  /**
   * Boolean value.
   * @return boolValue
   */
  @javax.annotation.Nullable
  public Boolean getBoolValue() {
    return boolValue;
  }

  public void setBoolValue(Boolean boolValue) {
    this.boolValue = boolValue;
  }


  public AlgorithmRulesComparisonValue creativeDimensionValue(Dimensions creativeDimensionValue) {
    this.creativeDimensionValue = creativeDimensionValue;
    return this;
  }

  /**
   * Get creativeDimensionValue
   * @return creativeDimensionValue
   */
  @javax.annotation.Nullable
  public Dimensions getCreativeDimensionValue() {
    return creativeDimensionValue;
  }

  public void setCreativeDimensionValue(Dimensions creativeDimensionValue) {
    this.creativeDimensionValue = creativeDimensionValue;
  }


  public AlgorithmRulesComparisonValue dayAndTimeValue(DayAndTime dayAndTimeValue) {
    this.dayAndTimeValue = dayAndTimeValue;
    return this;
  }

  /**
   * Get dayAndTimeValue
   * @return dayAndTimeValue
   */
  @javax.annotation.Nullable
  public DayAndTime getDayAndTimeValue() {
    return dayAndTimeValue;
  }

  public void setDayAndTimeValue(DayAndTime dayAndTimeValue) {
    this.dayAndTimeValue = dayAndTimeValue;
  }


  public AlgorithmRulesComparisonValue deviceTypeValue(DeviceTypeValueEnum deviceTypeValue) {
    this.deviceTypeValue = deviceTypeValue;
    return this;
  }

  /**
   * Device type value.
   * @return deviceTypeValue
   */
  @javax.annotation.Nullable
  public DeviceTypeValueEnum getDeviceTypeValue() {
    return deviceTypeValue;
  }

  public void setDeviceTypeValue(DeviceTypeValueEnum deviceTypeValue) {
    this.deviceTypeValue = deviceTypeValue;
  }


  public AlgorithmRulesComparisonValue doubleValue(Double doubleValue) {
    this.doubleValue = doubleValue;
    return this;
  }

  /**
   * Double value.
   * @return doubleValue
   */
  @javax.annotation.Nullable
  public Double getDoubleValue() {
    return doubleValue;
  }

  public void setDoubleValue(Double doubleValue) {
    this.doubleValue = doubleValue;
  }


  public AlgorithmRulesComparisonValue environmentValue(EnvironmentValueEnum environmentValue) {
    this.environmentValue = environmentValue;
    return this;
  }

  /**
   * Environment value.
   * @return environmentValue
   */
  @javax.annotation.Nullable
  public EnvironmentValueEnum getEnvironmentValue() {
    return environmentValue;
  }

  public void setEnvironmentValue(EnvironmentValueEnum environmentValue) {
    this.environmentValue = environmentValue;
  }


  public AlgorithmRulesComparisonValue exchangeValue(ExchangeValueEnum exchangeValue) {
    this.exchangeValue = exchangeValue;
    return this;
  }

  /**
   * Exchange value.
   * @return exchangeValue
   */
  @javax.annotation.Nullable
  public ExchangeValueEnum getExchangeValue() {
    return exchangeValue;
  }

  public void setExchangeValue(ExchangeValueEnum exchangeValue) {
    this.exchangeValue = exchangeValue;
  }


  public AlgorithmRulesComparisonValue int64Value(String int64Value) {
    this.int64Value = int64Value;
    return this;
  }

  /**
   * Integer value.
   * @return int64Value
   */
  @javax.annotation.Nullable
  public String getInt64Value() {
    return int64Value;
  }

  public void setInt64Value(String int64Value) {
    this.int64Value = int64Value;
  }


  public AlgorithmRulesComparisonValue onScreenPositionValue(OnScreenPositionValueEnum onScreenPositionValue) {
    this.onScreenPositionValue = onScreenPositionValue;
    return this;
  }

  /**
   * Ad position value.
   * @return onScreenPositionValue
   */
  @javax.annotation.Nullable
  public OnScreenPositionValueEnum getOnScreenPositionValue() {
    return onScreenPositionValue;
  }

  public void setOnScreenPositionValue(OnScreenPositionValueEnum onScreenPositionValue) {
    this.onScreenPositionValue = onScreenPositionValue;
  }


  public AlgorithmRulesComparisonValue stringValue(String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  /**
   * String value.
   * @return stringValue
   */
  @javax.annotation.Nullable
  public String getStringValue() {
    return stringValue;
  }

  public void setStringValue(String stringValue) {
    this.stringValue = stringValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlgorithmRulesComparisonValue algorithmRulesComparisonValue = (AlgorithmRulesComparisonValue) o;
    return Objects.equals(this.boolValue, algorithmRulesComparisonValue.boolValue) &&
        Objects.equals(this.creativeDimensionValue, algorithmRulesComparisonValue.creativeDimensionValue) &&
        Objects.equals(this.dayAndTimeValue, algorithmRulesComparisonValue.dayAndTimeValue) &&
        Objects.equals(this.deviceTypeValue, algorithmRulesComparisonValue.deviceTypeValue) &&
        Objects.equals(this.doubleValue, algorithmRulesComparisonValue.doubleValue) &&
        Objects.equals(this.environmentValue, algorithmRulesComparisonValue.environmentValue) &&
        Objects.equals(this.exchangeValue, algorithmRulesComparisonValue.exchangeValue) &&
        Objects.equals(this.int64Value, algorithmRulesComparisonValue.int64Value) &&
        Objects.equals(this.onScreenPositionValue, algorithmRulesComparisonValue.onScreenPositionValue) &&
        Objects.equals(this.stringValue, algorithmRulesComparisonValue.stringValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boolValue, creativeDimensionValue, dayAndTimeValue, deviceTypeValue, doubleValue, environmentValue, exchangeValue, int64Value, onScreenPositionValue, stringValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlgorithmRulesComparisonValue {\n");
    sb.append("    boolValue: ").append(toIndentedString(boolValue)).append("\n");
    sb.append("    creativeDimensionValue: ").append(toIndentedString(creativeDimensionValue)).append("\n");
    sb.append("    dayAndTimeValue: ").append(toIndentedString(dayAndTimeValue)).append("\n");
    sb.append("    deviceTypeValue: ").append(toIndentedString(deviceTypeValue)).append("\n");
    sb.append("    doubleValue: ").append(toIndentedString(doubleValue)).append("\n");
    sb.append("    environmentValue: ").append(toIndentedString(environmentValue)).append("\n");
    sb.append("    exchangeValue: ").append(toIndentedString(exchangeValue)).append("\n");
    sb.append("    int64Value: ").append(toIndentedString(int64Value)).append("\n");
    sb.append("    onScreenPositionValue: ").append(toIndentedString(onScreenPositionValue)).append("\n");
    sb.append("    stringValue: ").append(toIndentedString(stringValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boolValue");
    openapiFields.add("creativeDimensionValue");
    openapiFields.add("dayAndTimeValue");
    openapiFields.add("deviceTypeValue");
    openapiFields.add("doubleValue");
    openapiFields.add("environmentValue");
    openapiFields.add("exchangeValue");
    openapiFields.add("int64Value");
    openapiFields.add("onScreenPositionValue");
    openapiFields.add("stringValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlgorithmRulesComparisonValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlgorithmRulesComparisonValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlgorithmRulesComparisonValue is not found in the empty JSON string", AlgorithmRulesComparisonValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlgorithmRulesComparisonValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlgorithmRulesComparisonValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `creativeDimensionValue`
      if (jsonObj.get("creativeDimensionValue") != null && !jsonObj.get("creativeDimensionValue").isJsonNull()) {
        Dimensions.validateJsonElement(jsonObj.get("creativeDimensionValue"));
      }
      // validate the optional field `dayAndTimeValue`
      if (jsonObj.get("dayAndTimeValue") != null && !jsonObj.get("dayAndTimeValue").isJsonNull()) {
        DayAndTime.validateJsonElement(jsonObj.get("dayAndTimeValue"));
      }
      if ((jsonObj.get("deviceTypeValue") != null && !jsonObj.get("deviceTypeValue").isJsonNull()) && !jsonObj.get("deviceTypeValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceTypeValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceTypeValue").toString()));
      }
      // validate the optional field `deviceTypeValue`
      if (jsonObj.get("deviceTypeValue") != null && !jsonObj.get("deviceTypeValue").isJsonNull()) {
        DeviceTypeValueEnum.validateJsonElement(jsonObj.get("deviceTypeValue"));
      }
      if ((jsonObj.get("environmentValue") != null && !jsonObj.get("environmentValue").isJsonNull()) && !jsonObj.get("environmentValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environmentValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environmentValue").toString()));
      }
      // validate the optional field `environmentValue`
      if (jsonObj.get("environmentValue") != null && !jsonObj.get("environmentValue").isJsonNull()) {
        EnvironmentValueEnum.validateJsonElement(jsonObj.get("environmentValue"));
      }
      if ((jsonObj.get("exchangeValue") != null && !jsonObj.get("exchangeValue").isJsonNull()) && !jsonObj.get("exchangeValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeValue").toString()));
      }
      // validate the optional field `exchangeValue`
      if (jsonObj.get("exchangeValue") != null && !jsonObj.get("exchangeValue").isJsonNull()) {
        ExchangeValueEnum.validateJsonElement(jsonObj.get("exchangeValue"));
      }
      if ((jsonObj.get("int64Value") != null && !jsonObj.get("int64Value").isJsonNull()) && !jsonObj.get("int64Value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `int64Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("int64Value").toString()));
      }
      if ((jsonObj.get("onScreenPositionValue") != null && !jsonObj.get("onScreenPositionValue").isJsonNull()) && !jsonObj.get("onScreenPositionValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onScreenPositionValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onScreenPositionValue").toString()));
      }
      // validate the optional field `onScreenPositionValue`
      if (jsonObj.get("onScreenPositionValue") != null && !jsonObj.get("onScreenPositionValue").isJsonNull()) {
        OnScreenPositionValueEnum.validateJsonElement(jsonObj.get("onScreenPositionValue"));
      }
      if ((jsonObj.get("stringValue") != null && !jsonObj.get("stringValue").isJsonNull()) && !jsonObj.get("stringValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stringValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stringValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlgorithmRulesComparisonValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlgorithmRulesComparisonValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlgorithmRulesComparisonValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlgorithmRulesComparisonValue.class));

       return (TypeAdapter<T>) new TypeAdapter<AlgorithmRulesComparisonValue>() {
           @Override
           public void write(JsonWriter out, AlgorithmRulesComparisonValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlgorithmRulesComparisonValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlgorithmRulesComparisonValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlgorithmRulesComparisonValue
   * @throws IOException if the JSON string is invalid with respect to AlgorithmRulesComparisonValue
   */
  public static AlgorithmRulesComparisonValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlgorithmRulesComparisonValue.class);
  }

  /**
   * Convert an instance of AlgorithmRulesComparisonValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

