/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.YoutubeVideoDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details for a video discovery ad.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoDiscoveryAd {
  public static final String SERIALIZED_NAME_DESCRIPTION1 = "description1";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION1)
  private String description1;

  public static final String SERIALIZED_NAME_DESCRIPTION2 = "description2";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION2)
  private String description2;

  public static final String SERIALIZED_NAME_HEADLINE = "headline";
  @SerializedName(SERIALIZED_NAME_HEADLINE)
  private String headline;

  /**
   * Thumbnail image used in the ad.
   */
  @JsonAdapter(ThumbnailEnum.Adapter.class)
  public enum ThumbnailEnum {
    UNSPECIFIED("THUMBNAIL_UNSPECIFIED"),
    
    DEFAULT("THUMBNAIL_DEFAULT"),
    
    _1("THUMBNAIL_1"),
    
    _2("THUMBNAIL_2"),
    
    _3("THUMBNAIL_3");

    private String value;

    ThumbnailEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThumbnailEnum fromValue(String value) {
      for (ThumbnailEnum b : ThumbnailEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThumbnailEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThumbnailEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThumbnailEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ThumbnailEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ThumbnailEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private ThumbnailEnum thumbnail;

  public static final String SERIALIZED_NAME_VIDEO = "video";
  @SerializedName(SERIALIZED_NAME_VIDEO)
  private YoutubeVideoDetails video;

  public VideoDiscoveryAd() {
  }

  public VideoDiscoveryAd description1(String description1) {
    this.description1 = description1;
    return this;
  }

  /**
   * First text line for the ad.
   * @return description1
   */
  @javax.annotation.Nullable
  public String getDescription1() {
    return description1;
  }

  public void setDescription1(String description1) {
    this.description1 = description1;
  }


  public VideoDiscoveryAd description2(String description2) {
    this.description2 = description2;
    return this;
  }

  /**
   * Second text line for the ad.
   * @return description2
   */
  @javax.annotation.Nullable
  public String getDescription2() {
    return description2;
  }

  public void setDescription2(String description2) {
    this.description2 = description2;
  }


  public VideoDiscoveryAd headline(String headline) {
    this.headline = headline;
    return this;
  }

  /**
   * The headline of ad.
   * @return headline
   */
  @javax.annotation.Nullable
  public String getHeadline() {
    return headline;
  }

  public void setHeadline(String headline) {
    this.headline = headline;
  }


  public VideoDiscoveryAd thumbnail(ThumbnailEnum thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * Thumbnail image used in the ad.
   * @return thumbnail
   */
  @javax.annotation.Nullable
  public ThumbnailEnum getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(ThumbnailEnum thumbnail) {
    this.thumbnail = thumbnail;
  }


  public VideoDiscoveryAd video(YoutubeVideoDetails video) {
    this.video = video;
    return this;
  }

  /**
   * Get video
   * @return video
   */
  @javax.annotation.Nullable
  public YoutubeVideoDetails getVideo() {
    return video;
  }

  public void setVideo(YoutubeVideoDetails video) {
    this.video = video;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoDiscoveryAd videoDiscoveryAd = (VideoDiscoveryAd) o;
    return Objects.equals(this.description1, videoDiscoveryAd.description1) &&
        Objects.equals(this.description2, videoDiscoveryAd.description2) &&
        Objects.equals(this.headline, videoDiscoveryAd.headline) &&
        Objects.equals(this.thumbnail, videoDiscoveryAd.thumbnail) &&
        Objects.equals(this.video, videoDiscoveryAd.video);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description1, description2, headline, thumbnail, video);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoDiscoveryAd {\n");
    sb.append("    description1: ").append(toIndentedString(description1)).append("\n");
    sb.append("    description2: ").append(toIndentedString(description2)).append("\n");
    sb.append("    headline: ").append(toIndentedString(headline)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    video: ").append(toIndentedString(video)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description1");
    openapiFields.add("description2");
    openapiFields.add("headline");
    openapiFields.add("thumbnail");
    openapiFields.add("video");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoDiscoveryAd
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoDiscoveryAd.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoDiscoveryAd is not found in the empty JSON string", VideoDiscoveryAd.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoDiscoveryAd.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoDiscoveryAd` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description1") != null && !jsonObj.get("description1").isJsonNull()) && !jsonObj.get("description1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description1").toString()));
      }
      if ((jsonObj.get("description2") != null && !jsonObj.get("description2").isJsonNull()) && !jsonObj.get("description2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description2").toString()));
      }
      if ((jsonObj.get("headline") != null && !jsonObj.get("headline").isJsonNull()) && !jsonObj.get("headline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headline").toString()));
      }
      if ((jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) && !jsonObj.get("thumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail").toString()));
      }
      // validate the optional field `thumbnail`
      if (jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) {
        ThumbnailEnum.validateJsonElement(jsonObj.get("thumbnail"));
      }
      // validate the optional field `video`
      if (jsonObj.get("video") != null && !jsonObj.get("video").isJsonNull()) {
        YoutubeVideoDetails.validateJsonElement(jsonObj.get("video"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoDiscoveryAd.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoDiscoveryAd' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoDiscoveryAd> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoDiscoveryAd.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoDiscoveryAd>() {
           @Override
           public void write(JsonWriter out, VideoDiscoveryAd value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoDiscoveryAd read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoDiscoveryAd given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoDiscoveryAd
   * @throws IOException if the JSON string is invalid with respect to VideoDiscoveryAd
   */
  public static VideoDiscoveryAd fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoDiscoveryAd.class);
  }

  /**
   * Convert an instance of VideoDiscoveryAd to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

