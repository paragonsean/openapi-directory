/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The rate related settings of the inventory source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RateDetails {
  /**
   * The rate type. Acceptable values are &#x60;INVENTORY_SOURCE_RATE_TYPE_CPM_FIXED&#x60;, &#x60;INVENTORY_SOURCE_RATE_TYPE_CPM_FLOOR&#x60;, and &#x60;INVENTORY_SOURCE_RATE_TYPE_CPD&#x60;.
   */
  @JsonAdapter(InventorySourceRateTypeEnum.Adapter.class)
  public enum InventorySourceRateTypeEnum {
    UNSPECIFIED("INVENTORY_SOURCE_RATE_TYPE_UNSPECIFIED"),
    
    CPM_FIXED("INVENTORY_SOURCE_RATE_TYPE_CPM_FIXED"),
    
    CPM_FLOOR("INVENTORY_SOURCE_RATE_TYPE_CPM_FLOOR"),
    
    CPD("INVENTORY_SOURCE_RATE_TYPE_CPD"),
    
    FLAT("INVENTORY_SOURCE_RATE_TYPE_FLAT");

    private String value;

    InventorySourceRateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InventorySourceRateTypeEnum fromValue(String value) {
      for (InventorySourceRateTypeEnum b : InventorySourceRateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InventorySourceRateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InventorySourceRateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InventorySourceRateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InventorySourceRateTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InventorySourceRateTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVENTORY_SOURCE_RATE_TYPE = "inventorySourceRateType";
  @SerializedName(SERIALIZED_NAME_INVENTORY_SOURCE_RATE_TYPE)
  private InventorySourceRateTypeEnum inventorySourceRateType;

  public static final String SERIALIZED_NAME_MINIMUM_SPEND = "minimumSpend";
  @SerializedName(SERIALIZED_NAME_MINIMUM_SPEND)
  private Money minimumSpend;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Money rate;

  public static final String SERIALIZED_NAME_UNITS_PURCHASED = "unitsPurchased";
  @SerializedName(SERIALIZED_NAME_UNITS_PURCHASED)
  private String unitsPurchased;

  public RateDetails() {
  }

  public RateDetails inventorySourceRateType(InventorySourceRateTypeEnum inventorySourceRateType) {
    this.inventorySourceRateType = inventorySourceRateType;
    return this;
  }

  /**
   * The rate type. Acceptable values are &#x60;INVENTORY_SOURCE_RATE_TYPE_CPM_FIXED&#x60;, &#x60;INVENTORY_SOURCE_RATE_TYPE_CPM_FLOOR&#x60;, and &#x60;INVENTORY_SOURCE_RATE_TYPE_CPD&#x60;.
   * @return inventorySourceRateType
   */
  @javax.annotation.Nullable
  public InventorySourceRateTypeEnum getInventorySourceRateType() {
    return inventorySourceRateType;
  }

  public void setInventorySourceRateType(InventorySourceRateTypeEnum inventorySourceRateType) {
    this.inventorySourceRateType = inventorySourceRateType;
  }


  public RateDetails minimumSpend(Money minimumSpend) {
    this.minimumSpend = minimumSpend;
    return this;
  }

  /**
   * Get minimumSpend
   * @return minimumSpend
   */
  @javax.annotation.Nullable
  public Money getMinimumSpend() {
    return minimumSpend;
  }

  public void setMinimumSpend(Money minimumSpend) {
    this.minimumSpend = minimumSpend;
  }


  public RateDetails rate(Money rate) {
    this.rate = rate;
    return this;
  }

  /**
   * Get rate
   * @return rate
   */
  @javax.annotation.Nullable
  public Money getRate() {
    return rate;
  }

  public void setRate(Money rate) {
    this.rate = rate;
  }


  public RateDetails unitsPurchased(String unitsPurchased) {
    this.unitsPurchased = unitsPurchased;
    return this;
  }

  /**
   * Required for guaranteed inventory sources. The number of impressions guaranteed by the seller.
   * @return unitsPurchased
   */
  @javax.annotation.Nullable
  public String getUnitsPurchased() {
    return unitsPurchased;
  }

  public void setUnitsPurchased(String unitsPurchased) {
    this.unitsPurchased = unitsPurchased;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateDetails rateDetails = (RateDetails) o;
    return Objects.equals(this.inventorySourceRateType, rateDetails.inventorySourceRateType) &&
        Objects.equals(this.minimumSpend, rateDetails.minimumSpend) &&
        Objects.equals(this.rate, rateDetails.rate) &&
        Objects.equals(this.unitsPurchased, rateDetails.unitsPurchased);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inventorySourceRateType, minimumSpend, rate, unitsPurchased);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateDetails {\n");
    sb.append("    inventorySourceRateType: ").append(toIndentedString(inventorySourceRateType)).append("\n");
    sb.append("    minimumSpend: ").append(toIndentedString(minimumSpend)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    unitsPurchased: ").append(toIndentedString(unitsPurchased)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inventorySourceRateType");
    openapiFields.add("minimumSpend");
    openapiFields.add("rate");
    openapiFields.add("unitsPurchased");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RateDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RateDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RateDetails is not found in the empty JSON string", RateDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RateDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RateDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("inventorySourceRateType") != null && !jsonObj.get("inventorySourceRateType").isJsonNull()) && !jsonObj.get("inventorySourceRateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventorySourceRateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventorySourceRateType").toString()));
      }
      // validate the optional field `inventorySourceRateType`
      if (jsonObj.get("inventorySourceRateType") != null && !jsonObj.get("inventorySourceRateType").isJsonNull()) {
        InventorySourceRateTypeEnum.validateJsonElement(jsonObj.get("inventorySourceRateType"));
      }
      // validate the optional field `minimumSpend`
      if (jsonObj.get("minimumSpend") != null && !jsonObj.get("minimumSpend").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("minimumSpend"));
      }
      // validate the optional field `rate`
      if (jsonObj.get("rate") != null && !jsonObj.get("rate").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("rate"));
      }
      if ((jsonObj.get("unitsPurchased") != null && !jsonObj.get("unitsPurchased").isJsonNull()) && !jsonObj.get("unitsPurchased").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitsPurchased` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitsPurchased").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RateDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RateDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RateDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RateDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<RateDetails>() {
           @Override
           public void write(JsonWriter out, RateDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RateDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RateDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RateDetails
   * @throws IOException if the JSON string is invalid with respect to RateDetails
   */
  public static RateDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RateDetails.class);
  }

  /**
   * Convert an instance of RateDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

