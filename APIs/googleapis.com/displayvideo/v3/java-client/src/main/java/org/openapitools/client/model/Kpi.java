/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings that control the key performance indicator, or KPI, of an insertion order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:00.456843-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Kpi {
  public static final String SERIALIZED_NAME_KPI_AMOUNT_MICROS = "kpiAmountMicros";
  @SerializedName(SERIALIZED_NAME_KPI_AMOUNT_MICROS)
  private String kpiAmountMicros;

  public static final String SERIALIZED_NAME_KPI_PERCENTAGE_MICROS = "kpiPercentageMicros";
  @SerializedName(SERIALIZED_NAME_KPI_PERCENTAGE_MICROS)
  private String kpiPercentageMicros;

  public static final String SERIALIZED_NAME_KPI_STRING = "kpiString";
  @SerializedName(SERIALIZED_NAME_KPI_STRING)
  private String kpiString;

  /**
   * Required. The type of KPI.
   */
  @JsonAdapter(KpiTypeEnum.Adapter.class)
  public enum KpiTypeEnum {
    UNSPECIFIED("KPI_TYPE_UNSPECIFIED"),
    
    CPM("KPI_TYPE_CPM"),
    
    CPC("KPI_TYPE_CPC"),
    
    CPA("KPI_TYPE_CPA"),
    
    CTR("KPI_TYPE_CTR"),
    
    VIEWABILITY("KPI_TYPE_VIEWABILITY"),
    
    CPIAVC("KPI_TYPE_CPIAVC"),
    
    CPE("KPI_TYPE_CPE"),
    
    CLICK_CVR("KPI_TYPE_CLICK_CVR"),
    
    IMPRESSION_CVR("KPI_TYPE_IMPRESSION_CVR"),
    
    VCPM("KPI_TYPE_VCPM"),
    
    VTR("KPI_TYPE_VTR"),
    
    AUDIO_COMPLETION_RATE("KPI_TYPE_AUDIO_COMPLETION_RATE"),
    
    VIDEO_COMPLETION_RATE("KPI_TYPE_VIDEO_COMPLETION_RATE"),
    
    OTHER("KPI_TYPE_OTHER");

    private String value;

    KpiTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KpiTypeEnum fromValue(String value) {
      for (KpiTypeEnum b : KpiTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KpiTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KpiTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KpiTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KpiTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KpiTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KPI_TYPE = "kpiType";
  @SerializedName(SERIALIZED_NAME_KPI_TYPE)
  private KpiTypeEnum kpiType;

  public Kpi() {
  }

  public Kpi kpiAmountMicros(String kpiAmountMicros) {
    this.kpiAmountMicros = kpiAmountMicros;
    return this;
  }

  /**
   * The goal amount, in micros of the advertiser&#39;s currency. Applicable when kpi_type is one of: * &#x60;KPI_TYPE_CPM&#x60; * &#x60;KPI_TYPE_CPC&#x60; * &#x60;KPI_TYPE_CPA&#x60; * &#x60;KPI_TYPE_CPIAVC&#x60; * &#x60;KPI_TYPE_VCPM&#x60; For example: 1500000 represents 1.5 standard units of the currency.
   * @return kpiAmountMicros
   */
  @javax.annotation.Nullable
  public String getKpiAmountMicros() {
    return kpiAmountMicros;
  }

  public void setKpiAmountMicros(String kpiAmountMicros) {
    this.kpiAmountMicros = kpiAmountMicros;
  }


  public Kpi kpiPercentageMicros(String kpiPercentageMicros) {
    this.kpiPercentageMicros = kpiPercentageMicros;
    return this;
  }

  /**
   * The decimal representation of the goal percentage in micros. Applicable when kpi_type is one of: * &#x60;KPI_TYPE_CTR&#x60; * &#x60;KPI_TYPE_VIEWABILITY&#x60; * &#x60;KPI_TYPE_CLICK_CVR&#x60; * &#x60;KPI_TYPE_IMPRESSION_CVR&#x60; * &#x60;KPI_TYPE_VTR&#x60; * &#x60;KPI_TYPE_AUDIO_COMPLETION_RATE&#x60; * &#x60;KPI_TYPE_VIDEO_COMPLETION_RATE&#x60; For example: 70000 represents 7% (decimal 0.07).
   * @return kpiPercentageMicros
   */
  @javax.annotation.Nullable
  public String getKpiPercentageMicros() {
    return kpiPercentageMicros;
  }

  public void setKpiPercentageMicros(String kpiPercentageMicros) {
    this.kpiPercentageMicros = kpiPercentageMicros;
  }


  public Kpi kpiString(String kpiString) {
    this.kpiString = kpiString;
    return this;
  }

  /**
   * A KPI string, which can be empty. Must be UTF-8 encoded with a length of no more than 100 characters. Applicable when kpi_type is &#x60;KPI_TYPE_OTHER&#x60;.
   * @return kpiString
   */
  @javax.annotation.Nullable
  public String getKpiString() {
    return kpiString;
  }

  public void setKpiString(String kpiString) {
    this.kpiString = kpiString;
  }


  public Kpi kpiType(KpiTypeEnum kpiType) {
    this.kpiType = kpiType;
    return this;
  }

  /**
   * Required. The type of KPI.
   * @return kpiType
   */
  @javax.annotation.Nullable
  public KpiTypeEnum getKpiType() {
    return kpiType;
  }

  public void setKpiType(KpiTypeEnum kpiType) {
    this.kpiType = kpiType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Kpi kpi = (Kpi) o;
    return Objects.equals(this.kpiAmountMicros, kpi.kpiAmountMicros) &&
        Objects.equals(this.kpiPercentageMicros, kpi.kpiPercentageMicros) &&
        Objects.equals(this.kpiString, kpi.kpiString) &&
        Objects.equals(this.kpiType, kpi.kpiType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kpiAmountMicros, kpiPercentageMicros, kpiString, kpiType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Kpi {\n");
    sb.append("    kpiAmountMicros: ").append(toIndentedString(kpiAmountMicros)).append("\n");
    sb.append("    kpiPercentageMicros: ").append(toIndentedString(kpiPercentageMicros)).append("\n");
    sb.append("    kpiString: ").append(toIndentedString(kpiString)).append("\n");
    sb.append("    kpiType: ").append(toIndentedString(kpiType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("kpiAmountMicros");
    openapiFields.add("kpiPercentageMicros");
    openapiFields.add("kpiString");
    openapiFields.add("kpiType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Kpi
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Kpi.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Kpi is not found in the empty JSON string", Kpi.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Kpi.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Kpi` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kpiAmountMicros") != null && !jsonObj.get("kpiAmountMicros").isJsonNull()) && !jsonObj.get("kpiAmountMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kpiAmountMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kpiAmountMicros").toString()));
      }
      if ((jsonObj.get("kpiPercentageMicros") != null && !jsonObj.get("kpiPercentageMicros").isJsonNull()) && !jsonObj.get("kpiPercentageMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kpiPercentageMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kpiPercentageMicros").toString()));
      }
      if ((jsonObj.get("kpiString") != null && !jsonObj.get("kpiString").isJsonNull()) && !jsonObj.get("kpiString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kpiString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kpiString").toString()));
      }
      if ((jsonObj.get("kpiType") != null && !jsonObj.get("kpiType").isJsonNull()) && !jsonObj.get("kpiType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kpiType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kpiType").toString()));
      }
      // validate the optional field `kpiType`
      if (jsonObj.get("kpiType") != null && !jsonObj.get("kpiType").isJsonNull()) {
        KpiTypeEnum.validateJsonElement(jsonObj.get("kpiType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Kpi.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Kpi' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Kpi> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Kpi.class));

       return (TypeAdapter<T>) new TypeAdapter<Kpi>() {
           @Override
           public void write(JsonWriter out, Kpi value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Kpi read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Kpi given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Kpi
   * @throws IOException if the JSON string is invalid with respect to Kpi
   */
  public static Kpi fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Kpi.class);
  }

  /**
   * Convert an instance of Kpi to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

