/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NegativeKeyword model module.
 * @module model/NegativeKeyword
 * @version v3
 */
class NegativeKeyword {
    /**
     * Constructs a new <code>NegativeKeyword</code>.
     * A negatively targeted keyword that belongs to a negative keyword list.
     * @alias module:model/NegativeKeyword
     */
    constructor() { 
        
        NegativeKeyword.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NegativeKeyword</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NegativeKeyword} obj Optional instance to populate.
     * @return {module:model/NegativeKeyword} The populated <code>NegativeKeyword</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NegativeKeyword();

            if (data.hasOwnProperty('keywordValue')) {
                obj['keywordValue'] = ApiClient.convertToType(data['keywordValue'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NegativeKeyword</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NegativeKeyword</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['keywordValue'] && !(typeof data['keywordValue'] === 'string' || data['keywordValue'] instanceof String)) {
            throw new Error("Expected the field `keywordValue` to be a primitive type in the JSON string but got " + data['keywordValue']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Required. Immutable. The negatively targeted keyword, for example `car insurance`. Must be UTF-8 encoded with a maximum size of 255 bytes. Maximum number of characters is 80. Maximum number of words is 10. Valid characters are restricted to ASCII characters only. The only URL-escaping permitted is for representing whitespace between words. Leading or trailing whitespace is ignored.
 * @member {String} keywordValue
 */
NegativeKeyword.prototype['keywordValue'] = undefined;

/**
 * Output only. The resource name of the negative keyword.
 * @member {String} name
 */
NegativeKeyword.prototype['name'] = undefined;






export default NegativeKeyword;

