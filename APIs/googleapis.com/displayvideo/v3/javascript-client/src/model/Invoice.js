/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BudgetSummary from './BudgetSummary';
import DateRange from './DateRange';
import ModelDate from './ModelDate';

/**
 * The Invoice model module.
 * @module model/Invoice
 * @version v3
 */
class Invoice {
    /**
     * Constructs a new <code>Invoice</code>.
     * A single invoice.
     * @alias module:model/Invoice
     */
    constructor() { 
        
        Invoice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Invoice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Invoice} obj Optional instance to populate.
     * @return {module:model/Invoice} The populated <code>Invoice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Invoice();

            if (data.hasOwnProperty('budgetInvoiceGroupingId')) {
                obj['budgetInvoiceGroupingId'] = ApiClient.convertToType(data['budgetInvoiceGroupingId'], 'String');
            }
            if (data.hasOwnProperty('budgetSummaries')) {
                obj['budgetSummaries'] = ApiClient.convertToType(data['budgetSummaries'], [BudgetSummary]);
            }
            if (data.hasOwnProperty('correctedInvoiceId')) {
                obj['correctedInvoiceId'] = ApiClient.convertToType(data['correctedInvoiceId'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ModelDate.constructFromObject(data['dueDate']);
            }
            if (data.hasOwnProperty('invoiceId')) {
                obj['invoiceId'] = ApiClient.convertToType(data['invoiceId'], 'String');
            }
            if (data.hasOwnProperty('invoiceType')) {
                obj['invoiceType'] = ApiClient.convertToType(data['invoiceType'], 'String');
            }
            if (data.hasOwnProperty('issueDate')) {
                obj['issueDate'] = ModelDate.constructFromObject(data['issueDate']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nonBudgetMicros')) {
                obj['nonBudgetMicros'] = ApiClient.convertToType(data['nonBudgetMicros'], 'String');
            }
            if (data.hasOwnProperty('paymentsAccountId')) {
                obj['paymentsAccountId'] = ApiClient.convertToType(data['paymentsAccountId'], 'String');
            }
            if (data.hasOwnProperty('paymentsProfileId')) {
                obj['paymentsProfileId'] = ApiClient.convertToType(data['paymentsProfileId'], 'String');
            }
            if (data.hasOwnProperty('pdfUrl')) {
                obj['pdfUrl'] = ApiClient.convertToType(data['pdfUrl'], 'String');
            }
            if (data.hasOwnProperty('purchaseOrderNumber')) {
                obj['purchaseOrderNumber'] = ApiClient.convertToType(data['purchaseOrderNumber'], 'String');
            }
            if (data.hasOwnProperty('replacedInvoiceIds')) {
                obj['replacedInvoiceIds'] = ApiClient.convertToType(data['replacedInvoiceIds'], ['String']);
            }
            if (data.hasOwnProperty('serviceDateRange')) {
                obj['serviceDateRange'] = DateRange.constructFromObject(data['serviceDateRange']);
            }
            if (data.hasOwnProperty('subtotalAmountMicros')) {
                obj['subtotalAmountMicros'] = ApiClient.convertToType(data['subtotalAmountMicros'], 'String');
            }
            if (data.hasOwnProperty('totalAmountMicros')) {
                obj['totalAmountMicros'] = ApiClient.convertToType(data['totalAmountMicros'], 'String');
            }
            if (data.hasOwnProperty('totalTaxAmountMicros')) {
                obj['totalTaxAmountMicros'] = ApiClient.convertToType(data['totalTaxAmountMicros'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Invoice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Invoice</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['budgetInvoiceGroupingId'] && !(typeof data['budgetInvoiceGroupingId'] === 'string' || data['budgetInvoiceGroupingId'] instanceof String)) {
            throw new Error("Expected the field `budgetInvoiceGroupingId` to be a primitive type in the JSON string but got " + data['budgetInvoiceGroupingId']);
        }
        if (data['budgetSummaries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['budgetSummaries'])) {
                throw new Error("Expected the field `budgetSummaries` to be an array in the JSON data but got " + data['budgetSummaries']);
            }
            // validate the optional field `budgetSummaries` (array)
            for (const item of data['budgetSummaries']) {
                BudgetSummary.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['correctedInvoiceId'] && !(typeof data['correctedInvoiceId'] === 'string' || data['correctedInvoiceId'] instanceof String)) {
            throw new Error("Expected the field `correctedInvoiceId` to be a primitive type in the JSON string but got " + data['correctedInvoiceId']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `dueDate`
        if (data['dueDate']) { // data not null
          ModelDate.validateJSON(data['dueDate']);
        }
        // ensure the json data is a string
        if (data['invoiceId'] && !(typeof data['invoiceId'] === 'string' || data['invoiceId'] instanceof String)) {
            throw new Error("Expected the field `invoiceId` to be a primitive type in the JSON string but got " + data['invoiceId']);
        }
        // ensure the json data is a string
        if (data['invoiceType'] && !(typeof data['invoiceType'] === 'string' || data['invoiceType'] instanceof String)) {
            throw new Error("Expected the field `invoiceType` to be a primitive type in the JSON string but got " + data['invoiceType']);
        }
        // validate the optional field `issueDate`
        if (data['issueDate']) { // data not null
          ModelDate.validateJSON(data['issueDate']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nonBudgetMicros'] && !(typeof data['nonBudgetMicros'] === 'string' || data['nonBudgetMicros'] instanceof String)) {
            throw new Error("Expected the field `nonBudgetMicros` to be a primitive type in the JSON string but got " + data['nonBudgetMicros']);
        }
        // ensure the json data is a string
        if (data['paymentsAccountId'] && !(typeof data['paymentsAccountId'] === 'string' || data['paymentsAccountId'] instanceof String)) {
            throw new Error("Expected the field `paymentsAccountId` to be a primitive type in the JSON string but got " + data['paymentsAccountId']);
        }
        // ensure the json data is a string
        if (data['paymentsProfileId'] && !(typeof data['paymentsProfileId'] === 'string' || data['paymentsProfileId'] instanceof String)) {
            throw new Error("Expected the field `paymentsProfileId` to be a primitive type in the JSON string but got " + data['paymentsProfileId']);
        }
        // ensure the json data is a string
        if (data['pdfUrl'] && !(typeof data['pdfUrl'] === 'string' || data['pdfUrl'] instanceof String)) {
            throw new Error("Expected the field `pdfUrl` to be a primitive type in the JSON string but got " + data['pdfUrl']);
        }
        // ensure the json data is a string
        if (data['purchaseOrderNumber'] && !(typeof data['purchaseOrderNumber'] === 'string' || data['purchaseOrderNumber'] instanceof String)) {
            throw new Error("Expected the field `purchaseOrderNumber` to be a primitive type in the JSON string but got " + data['purchaseOrderNumber']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['replacedInvoiceIds'])) {
            throw new Error("Expected the field `replacedInvoiceIds` to be an array in the JSON data but got " + data['replacedInvoiceIds']);
        }
        // validate the optional field `serviceDateRange`
        if (data['serviceDateRange']) { // data not null
          DateRange.validateJSON(data['serviceDateRange']);
        }
        // ensure the json data is a string
        if (data['subtotalAmountMicros'] && !(typeof data['subtotalAmountMicros'] === 'string' || data['subtotalAmountMicros'] instanceof String)) {
            throw new Error("Expected the field `subtotalAmountMicros` to be a primitive type in the JSON string but got " + data['subtotalAmountMicros']);
        }
        // ensure the json data is a string
        if (data['totalAmountMicros'] && !(typeof data['totalAmountMicros'] === 'string' || data['totalAmountMicros'] instanceof String)) {
            throw new Error("Expected the field `totalAmountMicros` to be a primitive type in the JSON string but got " + data['totalAmountMicros']);
        }
        // ensure the json data is a string
        if (data['totalTaxAmountMicros'] && !(typeof data['totalTaxAmountMicros'] === 'string' || data['totalTaxAmountMicros'] instanceof String)) {
            throw new Error("Expected the field `totalTaxAmountMicros` to be a primitive type in the JSON string but got " + data['totalTaxAmountMicros']);
        }

        return true;
    }


}



/**
 * The budget grouping ID for this invoice. This field will only be set if the invoice level of the corresponding billing profile was set to \"Budget invoice grouping ID\".
 * @member {String} budgetInvoiceGroupingId
 */
Invoice.prototype['budgetInvoiceGroupingId'] = undefined;

/**
 * The list of summarized information for each budget associated with this invoice. This field will only be set if the invoice detail level of the corresponding billing profile was set to \"Budget level PO\".
 * @member {Array.<module:model/BudgetSummary>} budgetSummaries
 */
Invoice.prototype['budgetSummaries'] = undefined;

/**
 * The ID of the original invoice being adjusted by this invoice, if applicable. May appear on the invoice PDF as `Reference invoice number`. If replaced_invoice_ids is set, this field will be empty.
 * @member {String} correctedInvoiceId
 */
Invoice.prototype['correctedInvoiceId'] = undefined;

/**
 * The currency used in the invoice in ISO 4217 format.
 * @member {String} currencyCode
 */
Invoice.prototype['currencyCode'] = undefined;

/**
 * The display name of the invoice.
 * @member {String} displayName
 */
Invoice.prototype['displayName'] = undefined;

/**
 * @member {module:model/ModelDate} dueDate
 */
Invoice.prototype['dueDate'] = undefined;

/**
 * The unique ID of the invoice.
 * @member {String} invoiceId
 */
Invoice.prototype['invoiceId'] = undefined;

/**
 * The type of invoice document.
 * @member {module:model/Invoice.InvoiceTypeEnum} invoiceType
 */
Invoice.prototype['invoiceType'] = undefined;

/**
 * @member {module:model/ModelDate} issueDate
 */
Invoice.prototype['issueDate'] = undefined;

/**
 * The resource name of the invoice.
 * @member {String} name
 */
Invoice.prototype['name'] = undefined;

/**
 * The total amount of costs or adjustments not tied to a particular budget, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
 * @member {String} nonBudgetMicros
 */
Invoice.prototype['nonBudgetMicros'] = undefined;

/**
 * The ID of the payments account the invoice belongs to. Appears on the invoice PDF as `Billing Account Number`.
 * @member {String} paymentsAccountId
 */
Invoice.prototype['paymentsAccountId'] = undefined;

/**
 * The ID of the payments profile the invoice belongs to. Appears on the invoice PDF as `Billing ID`.
 * @member {String} paymentsProfileId
 */
Invoice.prototype['paymentsProfileId'] = undefined;

/**
 * The URL to download a PDF copy of the invoice. This URL is user specific and requires a valid OAuth 2.0 access token to access. The access token must be provided in an `Authorization: Bearer` HTTP header and be authorized for one of the following scopes: * `https://www.googleapis.com/auth/display-video-mediaplanning` * `https://www.googleapis.com/auth/display-video` The URL will be valid for 7 days after retrieval of this invoice object or until this invoice is retrieved again.
 * @member {String} pdfUrl
 */
Invoice.prototype['pdfUrl'] = undefined;

/**
 * Purchase order number associated with the invoice.
 * @member {String} purchaseOrderNumber
 */
Invoice.prototype['purchaseOrderNumber'] = undefined;

/**
 * The ID(s) of any originally issued invoice that is being cancelled by this invoice, if applicable. Multiple invoices may be listed if those invoices are being consolidated into a single invoice. May appear on invoice PDF as `Replaced invoice numbers`. If corrected_invoice_id is set, this field will be empty.
 * @member {Array.<String>} replacedInvoiceIds
 */
Invoice.prototype['replacedInvoiceIds'] = undefined;

/**
 * @member {module:model/DateRange} serviceDateRange
 */
Invoice.prototype['serviceDateRange'] = undefined;

/**
 * The pre-tax subtotal amount, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
 * @member {String} subtotalAmountMicros
 */
Invoice.prototype['subtotalAmountMicros'] = undefined;

/**
 * The invoice total amount, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
 * @member {String} totalAmountMicros
 */
Invoice.prototype['totalAmountMicros'] = undefined;

/**
 * The sum of all taxes in invoice, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
 * @member {String} totalTaxAmountMicros
 */
Invoice.prototype['totalTaxAmountMicros'] = undefined;





/**
 * Allowed values for the <code>invoiceType</code> property.
 * @enum {String}
 * @readonly
 */
Invoice['InvoiceTypeEnum'] = {

    /**
     * value: "INVOICE_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "INVOICE_TYPE_UNSPECIFIED",

    /**
     * value: "INVOICE_TYPE_CREDIT"
     * @const
     */
    "CREDIT": "INVOICE_TYPE_CREDIT",

    /**
     * value: "INVOICE_TYPE_INVOICE"
     * @const
     */
    "INVOICE": "INVOICE_TYPE_INVOICE"
};



export default Invoice;

