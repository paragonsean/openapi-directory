/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UrlAssignedTargetingOptionDetails model module.
 * @module model/UrlAssignedTargetingOptionDetails
 * @version v3
 */
class UrlAssignedTargetingOptionDetails {
    /**
     * Constructs a new <code>UrlAssignedTargetingOptionDetails</code>.
     * Details for assigned URL targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is &#x60;TARGETING_TYPE_URL&#x60;.
     * @alias module:model/UrlAssignedTargetingOptionDetails
     */
    constructor() { 
        
        UrlAssignedTargetingOptionDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UrlAssignedTargetingOptionDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UrlAssignedTargetingOptionDetails} obj Optional instance to populate.
     * @return {module:model/UrlAssignedTargetingOptionDetails} The populated <code>UrlAssignedTargetingOptionDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UrlAssignedTargetingOptionDetails();

            if (data.hasOwnProperty('negative')) {
                obj['negative'] = ApiClient.convertToType(data['negative'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UrlAssignedTargetingOptionDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UrlAssignedTargetingOptionDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Indicates if this option is being negatively targeted.
 * @member {Boolean} negative
 */
UrlAssignedTargetingOptionDetails.prototype['negative'] = undefined;

/**
 * Required. The URL, for example `example.com`. DV360 supports two levels of subdirectory targeting, for example `www.example.com/one-subdirectory-level/second-level`, and five levels of subdomain targeting, for example `five.four.three.two.one.example.com`.
 * @member {String} url
 */
UrlAssignedTargetingOptionDetails.prototype['url'] = undefined;






export default UrlAssignedTargetingOptionDetails;

