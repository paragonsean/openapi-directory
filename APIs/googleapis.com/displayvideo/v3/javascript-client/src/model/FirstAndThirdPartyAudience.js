/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContactInfoList from './ContactInfoList';
import MobileDeviceIdList from './MobileDeviceIdList';

/**
 * The FirstAndThirdPartyAudience model module.
 * @module model/FirstAndThirdPartyAudience
 * @version v3
 */
class FirstAndThirdPartyAudience {
    /**
     * Constructs a new <code>FirstAndThirdPartyAudience</code>.
     * Describes a first or third party audience list used for targeting. First party audiences are created via usage of client data. Third party audiences are provided by Third Party data providers and can only be licensed to customers.
     * @alias module:model/FirstAndThirdPartyAudience
     */
    constructor() { 
        
        FirstAndThirdPartyAudience.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FirstAndThirdPartyAudience</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FirstAndThirdPartyAudience} obj Optional instance to populate.
     * @return {module:model/FirstAndThirdPartyAudience} The populated <code>FirstAndThirdPartyAudience</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FirstAndThirdPartyAudience();

            if (data.hasOwnProperty('activeDisplayAudienceSize')) {
                obj['activeDisplayAudienceSize'] = ApiClient.convertToType(data['activeDisplayAudienceSize'], 'String');
            }
            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('audienceSource')) {
                obj['audienceSource'] = ApiClient.convertToType(data['audienceSource'], 'String');
            }
            if (data.hasOwnProperty('audienceType')) {
                obj['audienceType'] = ApiClient.convertToType(data['audienceType'], 'String');
            }
            if (data.hasOwnProperty('contactInfoList')) {
                obj['contactInfoList'] = ContactInfoList.constructFromObject(data['contactInfoList']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayAudienceSize')) {
                obj['displayAudienceSize'] = ApiClient.convertToType(data['displayAudienceSize'], 'String');
            }
            if (data.hasOwnProperty('displayDesktopAudienceSize')) {
                obj['displayDesktopAudienceSize'] = ApiClient.convertToType(data['displayDesktopAudienceSize'], 'String');
            }
            if (data.hasOwnProperty('displayMobileAppAudienceSize')) {
                obj['displayMobileAppAudienceSize'] = ApiClient.convertToType(data['displayMobileAppAudienceSize'], 'String');
            }
            if (data.hasOwnProperty('displayMobileWebAudienceSize')) {
                obj['displayMobileWebAudienceSize'] = ApiClient.convertToType(data['displayMobileWebAudienceSize'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('firstAndThirdPartyAudienceId')) {
                obj['firstAndThirdPartyAudienceId'] = ApiClient.convertToType(data['firstAndThirdPartyAudienceId'], 'String');
            }
            if (data.hasOwnProperty('firstAndThirdPartyAudienceType')) {
                obj['firstAndThirdPartyAudienceType'] = ApiClient.convertToType(data['firstAndThirdPartyAudienceType'], 'String');
            }
            if (data.hasOwnProperty('gmailAudienceSize')) {
                obj['gmailAudienceSize'] = ApiClient.convertToType(data['gmailAudienceSize'], 'String');
            }
            if (data.hasOwnProperty('membershipDurationDays')) {
                obj['membershipDurationDays'] = ApiClient.convertToType(data['membershipDurationDays'], 'String');
            }
            if (data.hasOwnProperty('mobileDeviceIdList')) {
                obj['mobileDeviceIdList'] = MobileDeviceIdList.constructFromObject(data['mobileDeviceIdList']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('youtubeAudienceSize')) {
                obj['youtubeAudienceSize'] = ApiClient.convertToType(data['youtubeAudienceSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FirstAndThirdPartyAudience</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FirstAndThirdPartyAudience</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activeDisplayAudienceSize'] && !(typeof data['activeDisplayAudienceSize'] === 'string' || data['activeDisplayAudienceSize'] instanceof String)) {
            throw new Error("Expected the field `activeDisplayAudienceSize` to be a primitive type in the JSON string but got " + data['activeDisplayAudienceSize']);
        }
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['audienceSource'] && !(typeof data['audienceSource'] === 'string' || data['audienceSource'] instanceof String)) {
            throw new Error("Expected the field `audienceSource` to be a primitive type in the JSON string but got " + data['audienceSource']);
        }
        // ensure the json data is a string
        if (data['audienceType'] && !(typeof data['audienceType'] === 'string' || data['audienceType'] instanceof String)) {
            throw new Error("Expected the field `audienceType` to be a primitive type in the JSON string but got " + data['audienceType']);
        }
        // validate the optional field `contactInfoList`
        if (data['contactInfoList']) { // data not null
          ContactInfoList.validateJSON(data['contactInfoList']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayAudienceSize'] && !(typeof data['displayAudienceSize'] === 'string' || data['displayAudienceSize'] instanceof String)) {
            throw new Error("Expected the field `displayAudienceSize` to be a primitive type in the JSON string but got " + data['displayAudienceSize']);
        }
        // ensure the json data is a string
        if (data['displayDesktopAudienceSize'] && !(typeof data['displayDesktopAudienceSize'] === 'string' || data['displayDesktopAudienceSize'] instanceof String)) {
            throw new Error("Expected the field `displayDesktopAudienceSize` to be a primitive type in the JSON string but got " + data['displayDesktopAudienceSize']);
        }
        // ensure the json data is a string
        if (data['displayMobileAppAudienceSize'] && !(typeof data['displayMobileAppAudienceSize'] === 'string' || data['displayMobileAppAudienceSize'] instanceof String)) {
            throw new Error("Expected the field `displayMobileAppAudienceSize` to be a primitive type in the JSON string but got " + data['displayMobileAppAudienceSize']);
        }
        // ensure the json data is a string
        if (data['displayMobileWebAudienceSize'] && !(typeof data['displayMobileWebAudienceSize'] === 'string' || data['displayMobileWebAudienceSize'] instanceof String)) {
            throw new Error("Expected the field `displayMobileWebAudienceSize` to be a primitive type in the JSON string but got " + data['displayMobileWebAudienceSize']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['firstAndThirdPartyAudienceId'] && !(typeof data['firstAndThirdPartyAudienceId'] === 'string' || data['firstAndThirdPartyAudienceId'] instanceof String)) {
            throw new Error("Expected the field `firstAndThirdPartyAudienceId` to be a primitive type in the JSON string but got " + data['firstAndThirdPartyAudienceId']);
        }
        // ensure the json data is a string
        if (data['firstAndThirdPartyAudienceType'] && !(typeof data['firstAndThirdPartyAudienceType'] === 'string' || data['firstAndThirdPartyAudienceType'] instanceof String)) {
            throw new Error("Expected the field `firstAndThirdPartyAudienceType` to be a primitive type in the JSON string but got " + data['firstAndThirdPartyAudienceType']);
        }
        // ensure the json data is a string
        if (data['gmailAudienceSize'] && !(typeof data['gmailAudienceSize'] === 'string' || data['gmailAudienceSize'] instanceof String)) {
            throw new Error("Expected the field `gmailAudienceSize` to be a primitive type in the JSON string but got " + data['gmailAudienceSize']);
        }
        // ensure the json data is a string
        if (data['membershipDurationDays'] && !(typeof data['membershipDurationDays'] === 'string' || data['membershipDurationDays'] instanceof String)) {
            throw new Error("Expected the field `membershipDurationDays` to be a primitive type in the JSON string but got " + data['membershipDurationDays']);
        }
        // validate the optional field `mobileDeviceIdList`
        if (data['mobileDeviceIdList']) { // data not null
          MobileDeviceIdList.validateJSON(data['mobileDeviceIdList']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['youtubeAudienceSize'] && !(typeof data['youtubeAudienceSize'] === 'string' || data['youtubeAudienceSize'] instanceof String)) {
            throw new Error("Expected the field `youtubeAudienceSize` to be a primitive type in the JSON string but got " + data['youtubeAudienceSize']);
        }

        return true;
    }


}



/**
 * Output only. The estimated audience size for the Display network in the past month. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only returned in GET request.
 * @member {String} activeDisplayAudienceSize
 */
FirstAndThirdPartyAudience.prototype['activeDisplayAudienceSize'] = undefined;

/**
 * The app_id matches with the type of the mobile_device_ids being uploaded. Only applicable to audience_type `CUSTOMER_MATCH_DEVICE_ID`
 * @member {String} appId
 */
FirstAndThirdPartyAudience.prototype['appId'] = undefined;

/**
 * Output only. The source of the audience.
 * @member {module:model/FirstAndThirdPartyAudience.AudienceSourceEnum} audienceSource
 */
FirstAndThirdPartyAudience.prototype['audienceSource'] = undefined;

/**
 * The type of the audience.
 * @member {module:model/FirstAndThirdPartyAudience.AudienceTypeEnum} audienceType
 */
FirstAndThirdPartyAudience.prototype['audienceType'] = undefined;

/**
 * @member {module:model/ContactInfoList} contactInfoList
 */
FirstAndThirdPartyAudience.prototype['contactInfoList'] = undefined;

/**
 * The user-provided description of the audience. Only applicable to first party audiences.
 * @member {String} description
 */
FirstAndThirdPartyAudience.prototype['description'] = undefined;

/**
 * Output only. The estimated audience size for the Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only returned in GET request.
 * @member {String} displayAudienceSize
 */
FirstAndThirdPartyAudience.prototype['displayAudienceSize'] = undefined;

/**
 * Output only. The estimated desktop audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
 * @member {String} displayDesktopAudienceSize
 */
FirstAndThirdPartyAudience.prototype['displayDesktopAudienceSize'] = undefined;

/**
 * Output only. The estimated mobile app audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
 * @member {String} displayMobileAppAudienceSize
 */
FirstAndThirdPartyAudience.prototype['displayMobileAppAudienceSize'] = undefined;

/**
 * Output only. The estimated mobile web audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
 * @member {String} displayMobileWebAudienceSize
 */
FirstAndThirdPartyAudience.prototype['displayMobileWebAudienceSize'] = undefined;

/**
 * The display name of the first and third party audience.
 * @member {String} displayName
 */
FirstAndThirdPartyAudience.prototype['displayName'] = undefined;

/**
 * Output only. The unique ID of the first and third party audience. Assigned by the system.
 * @member {String} firstAndThirdPartyAudienceId
 */
FirstAndThirdPartyAudience.prototype['firstAndThirdPartyAudienceId'] = undefined;

/**
 * Whether the audience is a first or third party audience.
 * @member {module:model/FirstAndThirdPartyAudience.FirstAndThirdPartyAudienceTypeEnum} firstAndThirdPartyAudienceType
 */
FirstAndThirdPartyAudience.prototype['firstAndThirdPartyAudienceType'] = undefined;

/**
 * Output only. The estimated audience size for Gmail network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
 * @member {String} gmailAudienceSize
 */
FirstAndThirdPartyAudience.prototype['gmailAudienceSize'] = undefined;

/**
 * The duration in days that an entry remains in the audience after the qualifying event. If the audience has no expiration, set the value of this field to 10000. Otherwise, the set value must be greater than 0 and less than or equal to 540. Only applicable to first party audiences. This field is required if one of the following audience_type is used: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`
 * @member {String} membershipDurationDays
 */
FirstAndThirdPartyAudience.prototype['membershipDurationDays'] = undefined;

/**
 * @member {module:model/MobileDeviceIdList} mobileDeviceIdList
 */
FirstAndThirdPartyAudience.prototype['mobileDeviceIdList'] = undefined;

/**
 * Output only. The resource name of the first and third party audience.
 * @member {String} name
 */
FirstAndThirdPartyAudience.prototype['name'] = undefined;

/**
 * Output only. The estimated audience size for YouTube network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
 * @member {String} youtubeAudienceSize
 */
FirstAndThirdPartyAudience.prototype['youtubeAudienceSize'] = undefined;





/**
 * Allowed values for the <code>audienceSource</code> property.
 * @enum {String}
 * @readonly
 */
FirstAndThirdPartyAudience['AudienceSourceEnum'] = {

    /**
     * value: "AUDIENCE_SOURCE_UNSPECIFIED"
     * @const
     */
    "AUDIENCE_SOURCE_UNSPECIFIED": "AUDIENCE_SOURCE_UNSPECIFIED",

    /**
     * value: "DISPLAY_VIDEO_360"
     * @const
     */
    "DISPLAY_VIDEO_360": "DISPLAY_VIDEO_360",

    /**
     * value: "CAMPAIGN_MANAGER"
     * @const
     */
    "CAMPAIGN_MANAGER": "CAMPAIGN_MANAGER",

    /**
     * value: "AD_MANAGER"
     * @const
     */
    "AD_MANAGER": "AD_MANAGER",

    /**
     * value: "SEARCH_ADS_360"
     * @const
     */
    "SEARCH_ADS_360": "SEARCH_ADS_360",

    /**
     * value: "YOUTUBE"
     * @const
     */
    "YOUTUBE": "YOUTUBE",

    /**
     * value: "ADS_DATA_HUB"
     * @const
     */
    "ADS_DATA_HUB": "ADS_DATA_HUB"
};


/**
 * Allowed values for the <code>audienceType</code> property.
 * @enum {String}
 * @readonly
 */
FirstAndThirdPartyAudience['AudienceTypeEnum'] = {

    /**
     * value: "AUDIENCE_TYPE_UNSPECIFIED"
     * @const
     */
    "AUDIENCE_TYPE_UNSPECIFIED": "AUDIENCE_TYPE_UNSPECIFIED",

    /**
     * value: "CUSTOMER_MATCH_CONTACT_INFO"
     * @const
     */
    "CUSTOMER_MATCH_CONTACT_INFO": "CUSTOMER_MATCH_CONTACT_INFO",

    /**
     * value: "CUSTOMER_MATCH_DEVICE_ID"
     * @const
     */
    "CUSTOMER_MATCH_DEVICE_ID": "CUSTOMER_MATCH_DEVICE_ID",

    /**
     * value: "CUSTOMER_MATCH_USER_ID"
     * @const
     */
    "CUSTOMER_MATCH_USER_ID": "CUSTOMER_MATCH_USER_ID",

    /**
     * value: "ACTIVITY_BASED"
     * @const
     */
    "ACTIVITY_BASED": "ACTIVITY_BASED",

    /**
     * value: "FREQUENCY_CAP"
     * @const
     */
    "FREQUENCY_CAP": "FREQUENCY_CAP",

    /**
     * value: "TAG_BASED"
     * @const
     */
    "TAG_BASED": "TAG_BASED",

    /**
     * value: "YOUTUBE_USERS"
     * @const
     */
    "YOUTUBE_USERS": "YOUTUBE_USERS",

    /**
     * value: "LICENSED"
     * @const
     */
    "LICENSED": "LICENSED"
};


/**
 * Allowed values for the <code>firstAndThirdPartyAudienceType</code> property.
 * @enum {String}
 * @readonly
 */
FirstAndThirdPartyAudience['FirstAndThirdPartyAudienceTypeEnum'] = {

    /**
     * value: "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_UNSPECIFIED",

    /**
     * value: "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_FIRST_PARTY"
     * @const
     */
    "FIRST_PARTY": "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_FIRST_PARTY",

    /**
     * value: "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_THIRD_PARTY"
     * @const
     */
    "THIRD_PARTY": "FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_THIRD_PARTY"
};



export default FirstAndThirdPartyAudience;

