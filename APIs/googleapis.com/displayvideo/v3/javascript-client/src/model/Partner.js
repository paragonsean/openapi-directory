/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExchangeConfig from './ExchangeConfig';
import PartnerAdServerConfig from './PartnerAdServerConfig';
import PartnerBillingConfig from './PartnerBillingConfig';
import PartnerDataAccessConfig from './PartnerDataAccessConfig';
import PartnerGeneralConfig from './PartnerGeneralConfig';

/**
 * The Partner model module.
 * @module model/Partner
 * @version v3
 */
class Partner {
    /**
     * Constructs a new <code>Partner</code>.
     * A single partner in Display &amp; Video 360 (DV360).
     * @alias module:model/Partner
     */
    constructor() { 
        
        Partner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Partner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Partner} obj Optional instance to populate.
     * @return {module:model/Partner} The populated <code>Partner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Partner();

            if (data.hasOwnProperty('adServerConfig')) {
                obj['adServerConfig'] = PartnerAdServerConfig.constructFromObject(data['adServerConfig']);
            }
            if (data.hasOwnProperty('billingConfig')) {
                obj['billingConfig'] = PartnerBillingConfig.constructFromObject(data['billingConfig']);
            }
            if (data.hasOwnProperty('dataAccessConfig')) {
                obj['dataAccessConfig'] = PartnerDataAccessConfig.constructFromObject(data['dataAccessConfig']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('entityStatus')) {
                obj['entityStatus'] = ApiClient.convertToType(data['entityStatus'], 'String');
            }
            if (data.hasOwnProperty('exchangeConfig')) {
                obj['exchangeConfig'] = ExchangeConfig.constructFromObject(data['exchangeConfig']);
            }
            if (data.hasOwnProperty('generalConfig')) {
                obj['generalConfig'] = PartnerGeneralConfig.constructFromObject(data['generalConfig']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('partnerId')) {
                obj['partnerId'] = ApiClient.convertToType(data['partnerId'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Partner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Partner</code>.
     */
    static validateJSON(data) {
        // validate the optional field `adServerConfig`
        if (data['adServerConfig']) { // data not null
          PartnerAdServerConfig.validateJSON(data['adServerConfig']);
        }
        // validate the optional field `billingConfig`
        if (data['billingConfig']) { // data not null
          PartnerBillingConfig.validateJSON(data['billingConfig']);
        }
        // validate the optional field `dataAccessConfig`
        if (data['dataAccessConfig']) { // data not null
          PartnerDataAccessConfig.validateJSON(data['dataAccessConfig']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['entityStatus'] && !(typeof data['entityStatus'] === 'string' || data['entityStatus'] instanceof String)) {
            throw new Error("Expected the field `entityStatus` to be a primitive type in the JSON string but got " + data['entityStatus']);
        }
        // validate the optional field `exchangeConfig`
        if (data['exchangeConfig']) { // data not null
          ExchangeConfig.validateJSON(data['exchangeConfig']);
        }
        // validate the optional field `generalConfig`
        if (data['generalConfig']) { // data not null
          PartnerGeneralConfig.validateJSON(data['generalConfig']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['partnerId'] && !(typeof data['partnerId'] === 'string' || data['partnerId'] instanceof String)) {
            throw new Error("Expected the field `partnerId` to be a primitive type in the JSON string but got " + data['partnerId']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/PartnerAdServerConfig} adServerConfig
 */
Partner.prototype['adServerConfig'] = undefined;

/**
 * @member {module:model/PartnerBillingConfig} billingConfig
 */
Partner.prototype['billingConfig'] = undefined;

/**
 * @member {module:model/PartnerDataAccessConfig} dataAccessConfig
 */
Partner.prototype['dataAccessConfig'] = undefined;

/**
 * The display name of the partner. Must be UTF-8 encoded with a maximum size of 240 bytes.
 * @member {String} displayName
 */
Partner.prototype['displayName'] = undefined;

/**
 * Output only. The status of the partner.
 * @member {module:model/Partner.EntityStatusEnum} entityStatus
 */
Partner.prototype['entityStatus'] = undefined;

/**
 * @member {module:model/ExchangeConfig} exchangeConfig
 */
Partner.prototype['exchangeConfig'] = undefined;

/**
 * @member {module:model/PartnerGeneralConfig} generalConfig
 */
Partner.prototype['generalConfig'] = undefined;

/**
 * Output only. The resource name of the partner.
 * @member {String} name
 */
Partner.prototype['name'] = undefined;

/**
 * Output only. The unique ID of the partner. Assigned by the system.
 * @member {String} partnerId
 */
Partner.prototype['partnerId'] = undefined;

/**
 * Output only. The timestamp when the partner was last updated. Assigned by the system.
 * @member {String} updateTime
 */
Partner.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>entityStatus</code> property.
 * @enum {String}
 * @readonly
 */
Partner['EntityStatusEnum'] = {

    /**
     * value: "ENTITY_STATUS_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "ENTITY_STATUS_UNSPECIFIED",

    /**
     * value: "ENTITY_STATUS_ACTIVE"
     * @const
     */
    "ACTIVE": "ENTITY_STATUS_ACTIVE",

    /**
     * value: "ENTITY_STATUS_ARCHIVED"
     * @const
     */
    "ARCHIVED": "ENTITY_STATUS_ARCHIVED",

    /**
     * value: "ENTITY_STATUS_DRAFT"
     * @const
     */
    "DRAFT": "ENTITY_STATUS_DRAFT",

    /**
     * value: "ENTITY_STATUS_PAUSED"
     * @const
     */
    "PAUSED": "ENTITY_STATUS_PAUSED",

    /**
     * value: "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
     * @const
     */
    "SCHEDULED_FOR_DELETION": "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
};



export default Partner;

