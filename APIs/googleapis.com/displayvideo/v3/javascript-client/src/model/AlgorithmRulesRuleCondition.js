/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlgorithmRulesSignalComparison from './AlgorithmRulesSignalComparison';
import AlgorithmRulesSignalValue from './AlgorithmRulesSignalValue';

/**
 * The AlgorithmRulesRuleCondition model module.
 * @module model/AlgorithmRulesRuleCondition
 * @version v3
 */
class AlgorithmRulesRuleCondition {
    /**
     * Constructs a new <code>AlgorithmRulesRuleCondition</code>.
     * Set of signal comparisons. Equivalent of an &#x60;if&#x60; statement.
     * @alias module:model/AlgorithmRulesRuleCondition
     */
    constructor() { 
        
        AlgorithmRulesRuleCondition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlgorithmRulesRuleCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlgorithmRulesRuleCondition} obj Optional instance to populate.
     * @return {module:model/AlgorithmRulesRuleCondition} The populated <code>AlgorithmRulesRuleCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlgorithmRulesRuleCondition();

            if (data.hasOwnProperty('returnValue')) {
                obj['returnValue'] = AlgorithmRulesSignalValue.constructFromObject(data['returnValue']);
            }
            if (data.hasOwnProperty('signalComparisons')) {
                obj['signalComparisons'] = ApiClient.convertToType(data['signalComparisons'], [AlgorithmRulesSignalComparison]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlgorithmRulesRuleCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlgorithmRulesRuleCondition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `returnValue`
        if (data['returnValue']) { // data not null
          AlgorithmRulesSignalValue.validateJSON(data['returnValue']);
        }
        if (data['signalComparisons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['signalComparisons'])) {
                throw new Error("Expected the field `signalComparisons` to be an array in the JSON data but got " + data['signalComparisons']);
            }
            // validate the optional field `signalComparisons` (array)
            for (const item of data['signalComparisons']) {
                AlgorithmRulesSignalComparison.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/AlgorithmRulesSignalValue} returnValue
 */
AlgorithmRulesRuleCondition.prototype['returnValue'] = undefined;

/**
 * List of comparisons that build `if` statement condition. The comparisons are combined into a single condition with `AND` logical operators.
 * @member {Array.<module:model/AlgorithmRulesSignalComparison>} signalComparisons
 */
AlgorithmRulesRuleCondition.prototype['signalComparisons'] = undefined;






export default AlgorithmRulesRuleCondition;

