/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlgorithmRulesRule from './AlgorithmRulesRule';

/**
 * The AlgorithmRulesRuleset model module.
 * @module model/AlgorithmRulesRuleset
 * @version v3
 */
class AlgorithmRulesRuleset {
    /**
     * Constructs a new <code>AlgorithmRulesRuleset</code>.
     * A ruleset consisting of a list of rules and how to aggregate the resulting values.
     * @alias module:model/AlgorithmRulesRuleset
     */
    constructor() { 
        
        AlgorithmRulesRuleset.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlgorithmRulesRuleset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlgorithmRulesRuleset} obj Optional instance to populate.
     * @return {module:model/AlgorithmRulesRuleset} The populated <code>AlgorithmRulesRuleset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlgorithmRulesRuleset();

            if (data.hasOwnProperty('aggregationType')) {
                obj['aggregationType'] = ApiClient.convertToType(data['aggregationType'], 'String');
            }
            if (data.hasOwnProperty('maxValue')) {
                obj['maxValue'] = ApiClient.convertToType(data['maxValue'], 'Number');
            }
            if (data.hasOwnProperty('rules')) {
                obj['rules'] = ApiClient.convertToType(data['rules'], [AlgorithmRulesRule]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlgorithmRulesRuleset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlgorithmRulesRuleset</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aggregationType'] && !(typeof data['aggregationType'] === 'string' || data['aggregationType'] instanceof String)) {
            throw new Error("Expected the field `aggregationType` to be a primitive type in the JSON string but got " + data['aggregationType']);
        }
        if (data['rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rules'])) {
                throw new Error("Expected the field `rules` to be an array in the JSON data but got " + data['rules']);
            }
            // validate the optional field `rules` (array)
            for (const item of data['rules']) {
                AlgorithmRulesRule.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * How to aggregate values of evaluated rules.
 * @member {module:model/AlgorithmRulesRuleset.AggregationTypeEnum} aggregationType
 */
AlgorithmRulesRuleset.prototype['aggregationType'] = undefined;

/**
 * Maximum value the ruleset can evaluate to.
 * @member {Number} maxValue
 */
AlgorithmRulesRuleset.prototype['maxValue'] = undefined;

/**
 * List of rules to generate the impression value.
 * @member {Array.<module:model/AlgorithmRulesRule>} rules
 */
AlgorithmRulesRuleset.prototype['rules'] = undefined;





/**
 * Allowed values for the <code>aggregationType</code> property.
 * @enum {String}
 * @readonly
 */
AlgorithmRulesRuleset['AggregationTypeEnum'] = {

    /**
     * value: "RULE_AGGREGATION_TYPE_UNSPECIFIED"
     * @const
     */
    "RULE_AGGREGATION_TYPE_UNSPECIFIED": "RULE_AGGREGATION_TYPE_UNSPECIFIED",

    /**
     * value: "SUM_OF_VALUES"
     * @const
     */
    "SUM_OF_VALUES": "SUM_OF_VALUES",

    /**
     * value: "PRODUCT_OF_VALUES"
     * @const
     */
    "PRODUCT_OF_VALUES": "PRODUCT_OF_VALUES",

    /**
     * value: "MAXIMUM_VALUE"
     * @const
     */
    "MAXIMUM_VALUE": "MAXIMUM_VALUE"
};



export default AlgorithmRulesRuleset;

