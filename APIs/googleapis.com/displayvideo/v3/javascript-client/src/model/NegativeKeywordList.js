/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NegativeKeywordList model module.
 * @module model/NegativeKeywordList
 * @version v3
 */
class NegativeKeywordList {
    /**
     * Constructs a new <code>NegativeKeywordList</code>.
     * A list of negative keywords used for targeting.
     * @alias module:model/NegativeKeywordList
     */
    constructor() { 
        
        NegativeKeywordList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NegativeKeywordList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NegativeKeywordList} obj Optional instance to populate.
     * @return {module:model/NegativeKeywordList} The populated <code>NegativeKeywordList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NegativeKeywordList();

            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('negativeKeywordListId')) {
                obj['negativeKeywordListId'] = ApiClient.convertToType(data['negativeKeywordListId'], 'String');
            }
            if (data.hasOwnProperty('targetedLineItemCount')) {
                obj['targetedLineItemCount'] = ApiClient.convertToType(data['targetedLineItemCount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NegativeKeywordList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NegativeKeywordList</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['advertiserId'] && !(typeof data['advertiserId'] === 'string' || data['advertiserId'] instanceof String)) {
            throw new Error("Expected the field `advertiserId` to be a primitive type in the JSON string but got " + data['advertiserId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['negativeKeywordListId'] && !(typeof data['negativeKeywordListId'] === 'string' || data['negativeKeywordListId'] instanceof String)) {
            throw new Error("Expected the field `negativeKeywordListId` to be a primitive type in the JSON string but got " + data['negativeKeywordListId']);
        }
        // ensure the json data is a string
        if (data['targetedLineItemCount'] && !(typeof data['targetedLineItemCount'] === 'string' || data['targetedLineItemCount'] instanceof String)) {
            throw new Error("Expected the field `targetedLineItemCount` to be a primitive type in the JSON string but got " + data['targetedLineItemCount']);
        }

        return true;
    }


}



/**
 * Output only. The unique ID of the advertiser the negative keyword list belongs to.
 * @member {String} advertiserId
 */
NegativeKeywordList.prototype['advertiserId'] = undefined;

/**
 * Required. The display name of the negative keyword list. Must be UTF-8 encoded with a maximum size of 255 bytes.
 * @member {String} displayName
 */
NegativeKeywordList.prototype['displayName'] = undefined;

/**
 * Output only. The resource name of the negative keyword list.
 * @member {String} name
 */
NegativeKeywordList.prototype['name'] = undefined;

/**
 * Output only. The unique ID of the negative keyword list. Assigned by the system.
 * @member {String} negativeKeywordListId
 */
NegativeKeywordList.prototype['negativeKeywordListId'] = undefined;

/**
 * Output only. Number of line items that are directly targeting this negative keyword list.
 * @member {String} targetedLineItemCount
 */
NegativeKeywordList.prototype['targetedLineItemCount'] = undefined;






export default NegativeKeywordList;

