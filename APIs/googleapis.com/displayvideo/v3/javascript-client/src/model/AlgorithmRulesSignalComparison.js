/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlgorithmRulesComparisonValue from './AlgorithmRulesComparisonValue';
import AlgorithmRulesSignal from './AlgorithmRulesSignal';

/**
 * The AlgorithmRulesSignalComparison model module.
 * @module model/AlgorithmRulesSignalComparison
 * @version v3
 */
class AlgorithmRulesSignalComparison {
    /**
     * Constructs a new <code>AlgorithmRulesSignalComparison</code>.
     * A single comparison. The comparison compares the &#x60;signal&#x60; to the &#x60;comparisonValue&#x60;. The comparison of &#x60;siteId&#x3D;&#x3D;123&#x60; is represented with the following field values: * &#x60;signal&#x60; has an &#x60;impressionSignal&#x60; of &#x60;SITE_ID&#x60;. * &#x60;comparisonOperator&#x60; is set to &#x60;EQUAL&#x60;. * &#x60;comparisonValue&#x60; is set to 123.
     * @alias module:model/AlgorithmRulesSignalComparison
     */
    constructor() { 
        
        AlgorithmRulesSignalComparison.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlgorithmRulesSignalComparison</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlgorithmRulesSignalComparison} obj Optional instance to populate.
     * @return {module:model/AlgorithmRulesSignalComparison} The populated <code>AlgorithmRulesSignalComparison</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlgorithmRulesSignalComparison();

            if (data.hasOwnProperty('comparisonOperator')) {
                obj['comparisonOperator'] = ApiClient.convertToType(data['comparisonOperator'], 'String');
            }
            if (data.hasOwnProperty('comparisonValue')) {
                obj['comparisonValue'] = AlgorithmRulesComparisonValue.constructFromObject(data['comparisonValue']);
            }
            if (data.hasOwnProperty('signal')) {
                obj['signal'] = AlgorithmRulesSignal.constructFromObject(data['signal']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlgorithmRulesSignalComparison</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlgorithmRulesSignalComparison</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comparisonOperator'] && !(typeof data['comparisonOperator'] === 'string' || data['comparisonOperator'] instanceof String)) {
            throw new Error("Expected the field `comparisonOperator` to be a primitive type in the JSON string but got " + data['comparisonOperator']);
        }
        // validate the optional field `comparisonValue`
        if (data['comparisonValue']) { // data not null
          AlgorithmRulesComparisonValue.validateJSON(data['comparisonValue']);
        }
        // validate the optional field `signal`
        if (data['signal']) { // data not null
          AlgorithmRulesSignal.validateJSON(data['signal']);
        }

        return true;
    }


}



/**
 * Operator used to compare the two values. In the resulting experession, the `signal` will be the first value and the `comparisonValue will be the second.
 * @member {module:model/AlgorithmRulesSignalComparison.ComparisonOperatorEnum} comparisonOperator
 */
AlgorithmRulesSignalComparison.prototype['comparisonOperator'] = undefined;

/**
 * @member {module:model/AlgorithmRulesComparisonValue} comparisonValue
 */
AlgorithmRulesSignalComparison.prototype['comparisonValue'] = undefined;

/**
 * @member {module:model/AlgorithmRulesSignal} signal
 */
AlgorithmRulesSignalComparison.prototype['signal'] = undefined;





/**
 * Allowed values for the <code>comparisonOperator</code> property.
 * @enum {String}
 * @readonly
 */
AlgorithmRulesSignalComparison['ComparisonOperatorEnum'] = {

    /**
     * value: "COMPARISON_OPERATOR_UNSPECIFIED"
     * @const
     */
    "COMPARISON_OPERATOR_UNSPECIFIED": "COMPARISON_OPERATOR_UNSPECIFIED",

    /**
     * value: "EQUAL"
     * @const
     */
    "EQUAL": "EQUAL",

    /**
     * value: "GREATER_THAN"
     * @const
     */
    "GREATER_THAN": "GREATER_THAN",

    /**
     * value: "LESS_THAN"
     * @const
     */
    "LESS_THAN": "LESS_THAN",

    /**
     * value: "GREATER_THAN_OR_EQUAL_TO"
     * @const
     */
    "GREATER_THAN_OR_EQUAL_TO": "GREATER_THAN_OR_EQUAL_TO",

    /**
     * value: "LESS_THAN_OR_EQUAL_TO"
     * @const
     */
    "LESS_THAN_OR_EQUAL_TO": "LESS_THAN_OR_EQUAL_TO"
};



export default AlgorithmRulesSignalComparison;

