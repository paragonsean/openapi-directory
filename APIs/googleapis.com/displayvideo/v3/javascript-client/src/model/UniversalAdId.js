/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UniversalAdId model module.
 * @module model/UniversalAdId
 * @version v3
 */
class UniversalAdId {
    /**
     * Constructs a new <code>UniversalAdId</code>.
     * A creative identifier provided by a registry that is unique across all platforms. This is part of the VAST 4.0 standard.
     * @alias module:model/UniversalAdId
     */
    constructor() { 
        
        UniversalAdId.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UniversalAdId</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UniversalAdId} obj Optional instance to populate.
     * @return {module:model/UniversalAdId} The populated <code>UniversalAdId</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UniversalAdId();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('registry')) {
                obj['registry'] = ApiClient.convertToType(data['registry'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UniversalAdId</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UniversalAdId</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['registry'] && !(typeof data['registry'] === 'string' || data['registry'] instanceof String)) {
            throw new Error("Expected the field `registry` to be a primitive type in the JSON string but got " + data['registry']);
        }

        return true;
    }


}



/**
 * The unique creative identifier.
 * @member {String} id
 */
UniversalAdId.prototype['id'] = undefined;

/**
 * The registry provides unique creative identifiers.
 * @member {module:model/UniversalAdId.RegistryEnum} registry
 */
UniversalAdId.prototype['registry'] = undefined;





/**
 * Allowed values for the <code>registry</code> property.
 * @enum {String}
 * @readonly
 */
UniversalAdId['RegistryEnum'] = {

    /**
     * value: "UNIVERSAL_AD_REGISTRY_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "UNIVERSAL_AD_REGISTRY_UNSPECIFIED",

    /**
     * value: "UNIVERSAL_AD_REGISTRY_OTHER"
     * @const
     */
    "OTHER": "UNIVERSAL_AD_REGISTRY_OTHER",

    /**
     * value: "UNIVERSAL_AD_REGISTRY_AD_ID"
     * @const
     */
    "AD_ID": "UNIVERSAL_AD_REGISTRY_AD_ID",

    /**
     * value: "UNIVERSAL_AD_REGISTRY_CLEARCAST"
     * @const
     */
    "CLEARCAST": "UNIVERSAL_AD_REGISTRY_CLEARCAST",

    /**
     * value: "UNIVERSAL_AD_REGISTRY_DV360"
     * @const
     */
    "DV360": "UNIVERSAL_AD_REGISTRY_DV360",

    /**
     * value: "UNIVERSAL_AD_REGISTRY_CM"
     * @const
     */
    "CM": "UNIVERSAL_AD_REGISTRY_CM"
};



export default UniversalAdId;

