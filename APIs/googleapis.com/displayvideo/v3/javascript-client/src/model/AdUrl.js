/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdUrl model module.
 * @module model/AdUrl
 * @version v3
 */
class AdUrl {
    /**
     * Constructs a new <code>AdUrl</code>.
     * Additional URLs related to the ad, including beacons.
     * @alias module:model/AdUrl
     */
    constructor() { 
        
        AdUrl.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdUrl</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdUrl} obj Optional instance to populate.
     * @return {module:model/AdUrl} The populated <code>AdUrl</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdUrl();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdUrl</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdUrl</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The type of the Ad URL.
 * @member {module:model/AdUrl.TypeEnum} type
 */
AdUrl.prototype['type'] = undefined;

/**
 * The URL string value.
 * @member {String} url
 */
AdUrl.prototype['url'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AdUrl['TypeEnum'] = {

    /**
     * value: "AD_URL_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "AD_URL_TYPE_UNSPECIFIED",

    /**
     * value: "AD_URL_TYPE_BEACON_IMPRESSION"
     * @const
     */
    "BEACON_IMPRESSION": "AD_URL_TYPE_BEACON_IMPRESSION",

    /**
     * value: "AD_URL_TYPE_BEACON_EXPANDABLE_DCM_IMPRESSION"
     * @const
     */
    "BEACON_EXPANDABLE_DCM_IMPRESSION": "AD_URL_TYPE_BEACON_EXPANDABLE_DCM_IMPRESSION",

    /**
     * value: "AD_URL_TYPE_BEACON_CLICK"
     * @const
     */
    "BEACON_CLICK": "AD_URL_TYPE_BEACON_CLICK",

    /**
     * value: "AD_URL_TYPE_BEACON_SKIP"
     * @const
     */
    "BEACON_SKIP": "AD_URL_TYPE_BEACON_SKIP"
};



export default AdUrl;

