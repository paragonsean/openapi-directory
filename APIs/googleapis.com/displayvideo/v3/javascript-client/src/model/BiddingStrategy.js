/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FixedBidStrategy from './FixedBidStrategy';
import MaximizeSpendBidStrategy from './MaximizeSpendBidStrategy';
import PerformanceGoalBidStrategy from './PerformanceGoalBidStrategy';
import YoutubeAndPartnersBiddingStrategy from './YoutubeAndPartnersBiddingStrategy';

/**
 * The BiddingStrategy model module.
 * @module model/BiddingStrategy
 * @version v3
 */
class BiddingStrategy {
    /**
     * Constructs a new <code>BiddingStrategy</code>.
     * Settings that control the bid strategy. Bid strategy determines the bid price.
     * @alias module:model/BiddingStrategy
     */
    constructor() { 
        
        BiddingStrategy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BiddingStrategy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BiddingStrategy} obj Optional instance to populate.
     * @return {module:model/BiddingStrategy} The populated <code>BiddingStrategy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BiddingStrategy();

            if (data.hasOwnProperty('fixedBid')) {
                obj['fixedBid'] = FixedBidStrategy.constructFromObject(data['fixedBid']);
            }
            if (data.hasOwnProperty('maximizeSpendAutoBid')) {
                obj['maximizeSpendAutoBid'] = MaximizeSpendBidStrategy.constructFromObject(data['maximizeSpendAutoBid']);
            }
            if (data.hasOwnProperty('performanceGoalAutoBid')) {
                obj['performanceGoalAutoBid'] = PerformanceGoalBidStrategy.constructFromObject(data['performanceGoalAutoBid']);
            }
            if (data.hasOwnProperty('youtubeAndPartnersBid')) {
                obj['youtubeAndPartnersBid'] = YoutubeAndPartnersBiddingStrategy.constructFromObject(data['youtubeAndPartnersBid']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BiddingStrategy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BiddingStrategy</code>.
     */
    static validateJSON(data) {
        // validate the optional field `fixedBid`
        if (data['fixedBid']) { // data not null
          FixedBidStrategy.validateJSON(data['fixedBid']);
        }
        // validate the optional field `maximizeSpendAutoBid`
        if (data['maximizeSpendAutoBid']) { // data not null
          MaximizeSpendBidStrategy.validateJSON(data['maximizeSpendAutoBid']);
        }
        // validate the optional field `performanceGoalAutoBid`
        if (data['performanceGoalAutoBid']) { // data not null
          PerformanceGoalBidStrategy.validateJSON(data['performanceGoalAutoBid']);
        }
        // validate the optional field `youtubeAndPartnersBid`
        if (data['youtubeAndPartnersBid']) { // data not null
          YoutubeAndPartnersBiddingStrategy.validateJSON(data['youtubeAndPartnersBid']);
        }

        return true;
    }


}



/**
 * @member {module:model/FixedBidStrategy} fixedBid
 */
BiddingStrategy.prototype['fixedBid'] = undefined;

/**
 * @member {module:model/MaximizeSpendBidStrategy} maximizeSpendAutoBid
 */
BiddingStrategy.prototype['maximizeSpendAutoBid'] = undefined;

/**
 * @member {module:model/PerformanceGoalBidStrategy} performanceGoalAutoBid
 */
BiddingStrategy.prototype['performanceGoalAutoBid'] = undefined;

/**
 * @member {module:model/YoutubeAndPartnersBiddingStrategy} youtubeAndPartnersBid
 */
BiddingStrategy.prototype['youtubeAndPartnersBid'] = undefined;






export default BiddingStrategy;

