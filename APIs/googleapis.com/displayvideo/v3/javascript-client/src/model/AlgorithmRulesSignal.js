/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AlgorithmRulesSignal model module.
 * @module model/AlgorithmRulesSignal
 * @version v3
 */
class AlgorithmRulesSignal {
    /**
     * Constructs a new <code>AlgorithmRulesSignal</code>.
     * Signal used to evaluate rules.
     * @alias module:model/AlgorithmRulesSignal
     */
    constructor() { 
        
        AlgorithmRulesSignal.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlgorithmRulesSignal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlgorithmRulesSignal} obj Optional instance to populate.
     * @return {module:model/AlgorithmRulesSignal} The populated <code>AlgorithmRulesSignal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlgorithmRulesSignal();

            if (data.hasOwnProperty('impressionSignal')) {
                obj['impressionSignal'] = ApiClient.convertToType(data['impressionSignal'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlgorithmRulesSignal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlgorithmRulesSignal</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['impressionSignal'] && !(typeof data['impressionSignal'] === 'string' || data['impressionSignal'] instanceof String)) {
            throw new Error("Expected the field `impressionSignal` to be a primitive type in the JSON string but got " + data['impressionSignal']);
        }

        return true;
    }


}



/**
 * Signal based on impressions.
 * @member {module:model/AlgorithmRulesSignal.ImpressionSignalEnum} impressionSignal
 */
AlgorithmRulesSignal.prototype['impressionSignal'] = undefined;





/**
 * Allowed values for the <code>impressionSignal</code> property.
 * @enum {String}
 * @readonly
 */
AlgorithmRulesSignal['ImpressionSignalEnum'] = {

    /**
     * value: "IMPRESSION_SIGNAL_UNSPECIFIED"
     * @const
     */
    "IMPRESSION_SIGNAL_UNSPECIFIED": "IMPRESSION_SIGNAL_UNSPECIFIED",

    /**
     * value: "DAY_AND_TIME"
     * @const
     */
    "DAY_AND_TIME": "DAY_AND_TIME",

    /**
     * value: "DEVICE_TYPE"
     * @const
     */
    "DEVICE_TYPE": "DEVICE_TYPE",

    /**
     * value: "AD_POSITION"
     * @const
     */
    "AD_POSITION": "AD_POSITION",

    /**
     * value: "OPERATING_SYSTEM_ID"
     * @const
     */
    "OPERATING_SYSTEM_ID": "OPERATING_SYSTEM_ID",

    /**
     * value: "MOBILE_MODEL_ID"
     * @const
     */
    "MOBILE_MODEL_ID": "MOBILE_MODEL_ID",

    /**
     * value: "EXCHANGE"
     * @const
     */
    "EXCHANGE": "EXCHANGE",

    /**
     * value: "ENVIRONMENT"
     * @const
     */
    "ENVIRONMENT": "ENVIRONMENT",

    /**
     * value: "COUNTRY_ID"
     * @const
     */
    "COUNTRY_ID": "COUNTRY_ID",

    /**
     * value: "CITY_ID"
     * @const
     */
    "CITY_ID": "CITY_ID",

    /**
     * value: "BROWSER_ID"
     * @const
     */
    "BROWSER_ID": "BROWSER_ID",

    /**
     * value: "CREATIVE_DIMENSION"
     * @const
     */
    "CREATIVE_DIMENSION": "CREATIVE_DIMENSION"
};



export default AlgorithmRulesSignal;

