/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import YoutubeVideoDetails from './YoutubeVideoDetails';

/**
 * The VideoDiscoveryAd model module.
 * @module model/VideoDiscoveryAd
 * @version v3
 */
class VideoDiscoveryAd {
    /**
     * Constructs a new <code>VideoDiscoveryAd</code>.
     * Details for a video discovery ad.
     * @alias module:model/VideoDiscoveryAd
     */
    constructor() { 
        
        VideoDiscoveryAd.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoDiscoveryAd</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoDiscoveryAd} obj Optional instance to populate.
     * @return {module:model/VideoDiscoveryAd} The populated <code>VideoDiscoveryAd</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoDiscoveryAd();

            if (data.hasOwnProperty('description1')) {
                obj['description1'] = ApiClient.convertToType(data['description1'], 'String');
            }
            if (data.hasOwnProperty('description2')) {
                obj['description2'] = ApiClient.convertToType(data['description2'], 'String');
            }
            if (data.hasOwnProperty('headline')) {
                obj['headline'] = ApiClient.convertToType(data['headline'], 'String');
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = ApiClient.convertToType(data['thumbnail'], 'String');
            }
            if (data.hasOwnProperty('video')) {
                obj['video'] = YoutubeVideoDetails.constructFromObject(data['video']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoDiscoveryAd</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoDiscoveryAd</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description1'] && !(typeof data['description1'] === 'string' || data['description1'] instanceof String)) {
            throw new Error("Expected the field `description1` to be a primitive type in the JSON string but got " + data['description1']);
        }
        // ensure the json data is a string
        if (data['description2'] && !(typeof data['description2'] === 'string' || data['description2'] instanceof String)) {
            throw new Error("Expected the field `description2` to be a primitive type in the JSON string but got " + data['description2']);
        }
        // ensure the json data is a string
        if (data['headline'] && !(typeof data['headline'] === 'string' || data['headline'] instanceof String)) {
            throw new Error("Expected the field `headline` to be a primitive type in the JSON string but got " + data['headline']);
        }
        // ensure the json data is a string
        if (data['thumbnail'] && !(typeof data['thumbnail'] === 'string' || data['thumbnail'] instanceof String)) {
            throw new Error("Expected the field `thumbnail` to be a primitive type in the JSON string but got " + data['thumbnail']);
        }
        // validate the optional field `video`
        if (data['video']) { // data not null
          YoutubeVideoDetails.validateJSON(data['video']);
        }

        return true;
    }


}



/**
 * First text line for the ad.
 * @member {String} description1
 */
VideoDiscoveryAd.prototype['description1'] = undefined;

/**
 * Second text line for the ad.
 * @member {String} description2
 */
VideoDiscoveryAd.prototype['description2'] = undefined;

/**
 * The headline of ad.
 * @member {String} headline
 */
VideoDiscoveryAd.prototype['headline'] = undefined;

/**
 * Thumbnail image used in the ad.
 * @member {module:model/VideoDiscoveryAd.ThumbnailEnum} thumbnail
 */
VideoDiscoveryAd.prototype['thumbnail'] = undefined;

/**
 * @member {module:model/YoutubeVideoDetails} video
 */
VideoDiscoveryAd.prototype['video'] = undefined;





/**
 * Allowed values for the <code>thumbnail</code> property.
 * @enum {String}
 * @readonly
 */
VideoDiscoveryAd['ThumbnailEnum'] = {

    /**
     * value: "THUMBNAIL_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "THUMBNAIL_UNSPECIFIED",

    /**
     * value: "THUMBNAIL_DEFAULT"
     * @const
     */
    "DEFAULT": "THUMBNAIL_DEFAULT",

    /**
     * value: "THUMBNAIL_1"
     * @const
     */
    "1": "THUMBNAIL_1",

    /**
     * value: "THUMBNAIL_2"
     * @const
     */
    "2": "THUMBNAIL_2",

    /**
     * value: "THUMBNAIL_3"
     * @const
     */
    "3": "THUMBNAIL_3"
};



export default VideoDiscoveryAd;

