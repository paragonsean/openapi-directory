/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActiveViewVideoViewabilityMetricConfig from './ActiveViewVideoViewabilityMetricConfig';
import LookbackWindow from './LookbackWindow';

/**
 * The FloodlightGroup model module.
 * @module model/FloodlightGroup
 * @version v3
 */
class FloodlightGroup {
    /**
     * Constructs a new <code>FloodlightGroup</code>.
     * A single Floodlight group.
     * @alias module:model/FloodlightGroup
     */
    constructor() { 
        
        FloodlightGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FloodlightGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FloodlightGroup} obj Optional instance to populate.
     * @return {module:model/FloodlightGroup} The populated <code>FloodlightGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FloodlightGroup();

            if (data.hasOwnProperty('activeViewConfig')) {
                obj['activeViewConfig'] = ActiveViewVideoViewabilityMetricConfig.constructFromObject(data['activeViewConfig']);
            }
            if (data.hasOwnProperty('customVariables')) {
                obj['customVariables'] = ApiClient.convertToType(data['customVariables'], {'String': Object});
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('floodlightGroupId')) {
                obj['floodlightGroupId'] = ApiClient.convertToType(data['floodlightGroupId'], 'String');
            }
            if (data.hasOwnProperty('lookbackWindow')) {
                obj['lookbackWindow'] = LookbackWindow.constructFromObject(data['lookbackWindow']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('webTagType')) {
                obj['webTagType'] = ApiClient.convertToType(data['webTagType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FloodlightGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FloodlightGroup</code>.
     */
    static validateJSON(data) {
        // validate the optional field `activeViewConfig`
        if (data['activeViewConfig']) { // data not null
          ActiveViewVideoViewabilityMetricConfig.validateJSON(data['activeViewConfig']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['floodlightGroupId'] && !(typeof data['floodlightGroupId'] === 'string' || data['floodlightGroupId'] instanceof String)) {
            throw new Error("Expected the field `floodlightGroupId` to be a primitive type in the JSON string but got " + data['floodlightGroupId']);
        }
        // validate the optional field `lookbackWindow`
        if (data['lookbackWindow']) { // data not null
          LookbackWindow.validateJSON(data['lookbackWindow']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['webTagType'] && !(typeof data['webTagType'] === 'string' || data['webTagType'] instanceof String)) {
            throw new Error("Expected the field `webTagType` to be a primitive type in the JSON string but got " + data['webTagType']);
        }

        return true;
    }


}



/**
 * @member {module:model/ActiveViewVideoViewabilityMetricConfig} activeViewConfig
 */
FloodlightGroup.prototype['activeViewConfig'] = undefined;

/**
 * User-defined custom variables owned by the Floodlight group. Use custom Floodlight variables to create reporting data that is tailored to your unique business needs. Custom Floodlight variables use the keys `U1=`, `U2=`, and so on, and can take any values that you choose to pass to them. You can use them to track virtually any type of data that you collect about your customers, such as the genre of movie that a customer purchases, the country to which the item is shipped, and so on. Custom Floodlight variables may not be used to pass any data that could be used or recognized as personally identifiable information (PII). Example: `custom_variables { fields { \"U1\": value { number_value: 123.4 }, \"U2\": value { string_value: \"MyVariable2\" }, \"U3\": value { string_value: \"MyVariable3\" } } }` Acceptable values for keys are \"U1\" through \"U100\", inclusive. String values must be less than 64 characters long, and cannot contain the following characters: `\"<>`.
 * @member {Object.<String, Object>} customVariables
 */
FloodlightGroup.prototype['customVariables'] = undefined;

/**
 * Required. The display name of the Floodlight group.
 * @member {String} displayName
 */
FloodlightGroup.prototype['displayName'] = undefined;

/**
 * Output only. The unique ID of the Floodlight group. Assigned by the system.
 * @member {String} floodlightGroupId
 */
FloodlightGroup.prototype['floodlightGroupId'] = undefined;

/**
 * @member {module:model/LookbackWindow} lookbackWindow
 */
FloodlightGroup.prototype['lookbackWindow'] = undefined;

/**
 * Output only. The resource name of the Floodlight group.
 * @member {String} name
 */
FloodlightGroup.prototype['name'] = undefined;

/**
 * Required. The web tag type enabled for the Floodlight group.
 * @member {module:model/FloodlightGroup.WebTagTypeEnum} webTagType
 */
FloodlightGroup.prototype['webTagType'] = undefined;





/**
 * Allowed values for the <code>webTagType</code> property.
 * @enum {String}
 * @readonly
 */
FloodlightGroup['WebTagTypeEnum'] = {

    /**
     * value: "WEB_TAG_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "WEB_TAG_TYPE_UNSPECIFIED",

    /**
     * value: "WEB_TAG_TYPE_NONE"
     * @const
     */
    "NONE": "WEB_TAG_TYPE_NONE",

    /**
     * value: "WEB_TAG_TYPE_IMAGE"
     * @const
     */
    "IMAGE": "WEB_TAG_TYPE_IMAGE",

    /**
     * value: "WEB_TAG_TYPE_DYNAMIC"
     * @const
     */
    "DYNAMIC": "WEB_TAG_TYPE_DYNAMIC"
};



export default FloodlightGroup;

