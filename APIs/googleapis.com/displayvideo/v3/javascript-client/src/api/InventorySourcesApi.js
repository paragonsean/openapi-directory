/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EditInventorySourceReadWriteAccessorsRequest from '../model/EditInventorySourceReadWriteAccessorsRequest';
import InventorySource from '../model/InventorySource';
import InventorySourceAccessors from '../model/InventorySourceAccessors';
import ListInventorySourcesResponse from '../model/ListInventorySourcesResponse';

/**
* InventorySources service.
* @module api/InventorySourcesApi
* @version v3
*/
export default class InventorySourcesApi {

    /**
    * Constructs a new InventorySourcesApi. 
    * @alias module:api/InventorySourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the displayvideoInventorySourcesCreate operation.
     * @callback module:api/InventorySourcesApi~displayvideoInventorySourcesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventorySource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new inventory source. Returns the newly created inventory source if successful.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [advertiserId] The ID of the advertiser that the request is being made within.
     * @param {String} [partnerId] The ID of the partner that the request is being made within.
     * @param {module:model/InventorySource} [inventorySource] 
     * @param {module:api/InventorySourcesApi~displayvideoInventorySourcesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventorySource}
     */
    displayvideoInventorySourcesCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['inventorySource'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'advertiserId': opts['advertiserId'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InventorySource;
      return this.apiClient.callApi(
        '/v3/inventorySources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoInventorySourcesEditInventorySourceReadWriteAccessors operation.
     * @callback module:api/InventorySourcesApi~displayvideoInventorySourcesEditInventorySourceReadWriteAccessorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventorySourceAccessors} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edits read/write accessors of an inventory source. Returns the updated read_write_accessors for the inventory source.
     * @param {String} inventorySourceId Required. The ID of inventory source to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/EditInventorySourceReadWriteAccessorsRequest} [editInventorySourceReadWriteAccessorsRequest] 
     * @param {module:api/InventorySourcesApi~displayvideoInventorySourcesEditInventorySourceReadWriteAccessorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventorySourceAccessors}
     */
    displayvideoInventorySourcesEditInventorySourceReadWriteAccessors(inventorySourceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['editInventorySourceReadWriteAccessorsRequest'];
      // verify the required parameter 'inventorySourceId' is set
      if (inventorySourceId === undefined || inventorySourceId === null) {
        throw new Error("Missing the required parameter 'inventorySourceId' when calling displayvideoInventorySourcesEditInventorySourceReadWriteAccessors");
      }

      let pathParams = {
        'inventorySourceId': inventorySourceId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InventorySourceAccessors;
      return this.apiClient.callApi(
        '/v3/inventorySources/{inventorySourceId}:editInventorySourceReadWriteAccessors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoInventorySourcesGet operation.
     * @callback module:api/InventorySourcesApi~displayvideoInventorySourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventorySource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an inventory source.
     * @param {String} inventorySourceId Required. The ID of the inventory source to fetch.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [advertiserId] Optional. The ID of the DV360 advertiser to which the fetched inventory source is permissioned. If the user only has access to the advertiser and not the parent partner, use this field to specify the relevant advertiser.
     * @param {String} [partnerId] Required. The ID of the DV360 partner to which the fetched inventory source is permissioned.
     * @param {module:api/InventorySourcesApi~displayvideoInventorySourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventorySource}
     */
    displayvideoInventorySourcesGet(inventorySourceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inventorySourceId' is set
      if (inventorySourceId === undefined || inventorySourceId === null) {
        throw new Error("Missing the required parameter 'inventorySourceId' when calling displayvideoInventorySourcesGet");
      }

      let pathParams = {
        'inventorySourceId': inventorySourceId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'advertiserId': opts['advertiserId'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InventorySource;
      return this.apiClient.callApi(
        '/v3/inventorySources/{inventorySourceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoInventorySourcesList operation.
     * @callback module:api/InventorySourcesApi~displayvideoInventorySourcesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInventorySourcesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists inventory sources that are accessible to the current user. The order is defined by the order_by parameter. If a filter by entity_status is not specified, inventory sources with entity status `ENTITY_STATUS_ARCHIVED` will not be included in the results.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [advertiserId] The ID of the advertiser that has access to the inventory source.
     * @param {String} [filter] Allows filtering by inventory source fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `status.entityStatus` * `commitment` * `deliveryMethod` * `rateDetails.rateType` * `exchange` Examples: * All active inventory sources: `status.entityStatus=\"ENTITY_STATUS_ACTIVE\"` * Inventory sources belonging to Google Ad Manager or Rubicon exchanges: `exchange=\"EXCHANGE_GOOGLE_AD_MANAGER\" OR exchange=\"EXCHANGE_RUBICON\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `displayName` (default) The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. For example, `displayName desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `200`. If unspecified will default to `100`.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListInventorySources` method. If not specified, the first page of results will be returned.
     * @param {String} [partnerId] The ID of the partner that has access to the inventory source.
     * @param {module:api/InventorySourcesApi~displayvideoInventorySourcesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInventorySourcesResponse}
     */
    displayvideoInventorySourcesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'advertiserId': opts['advertiserId'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInventorySourcesResponse;
      return this.apiClient.callApi(
        '/v3/inventorySources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoInventorySourcesPatch operation.
     * @callback module:api/InventorySourcesApi~displayvideoInventorySourcesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventorySource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing inventory source. Returns the updated inventory source if successful.
     * @param {String} inventorySourceId Output only. The unique ID of the inventory source. Assigned by the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [advertiserId] The ID of the advertiser that the request is being made within.
     * @param {String} [partnerId] The ID of the partner that the request is being made within.
     * @param {String} [updateMask] Required. The mask to control which fields to update.
     * @param {module:model/InventorySource} [inventorySource] 
     * @param {module:api/InventorySourcesApi~displayvideoInventorySourcesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventorySource}
     */
    displayvideoInventorySourcesPatch(inventorySourceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['inventorySource'];
      // verify the required parameter 'inventorySourceId' is set
      if (inventorySourceId === undefined || inventorySourceId === null) {
        throw new Error("Missing the required parameter 'inventorySourceId' when calling displayvideoInventorySourcesPatch");
      }

      let pathParams = {
        'inventorySourceId': inventorySourceId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'advertiserId': opts['advertiserId'],
        'partnerId': opts['partnerId'],
        'updateMask': opts['updateMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InventorySource;
      return this.apiClient.callApi(
        '/v3/inventorySources/{inventorySourceId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
