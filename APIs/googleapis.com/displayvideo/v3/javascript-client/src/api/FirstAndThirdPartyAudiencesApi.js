/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EditCustomerMatchMembersRequest from '../model/EditCustomerMatchMembersRequest';
import EditCustomerMatchMembersResponse from '../model/EditCustomerMatchMembersResponse';
import FirstAndThirdPartyAudience from '../model/FirstAndThirdPartyAudience';
import ListFirstAndThirdPartyAudiencesResponse from '../model/ListFirstAndThirdPartyAudiencesResponse';

/**
* FirstAndThirdPartyAudiences service.
* @module api/FirstAndThirdPartyAudiencesApi
* @version v3
*/
export default class FirstAndThirdPartyAudiencesApi {

    /**
    * Constructs a new FirstAndThirdPartyAudiencesApi. 
    * @alias module:api/FirstAndThirdPartyAudiencesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the displayvideoFirstAndThirdPartyAudiencesCreate operation.
     * @callback module:api/FirstAndThirdPartyAudiencesApi~displayvideoFirstAndThirdPartyAudiencesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstAndThirdPartyAudience} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a FirstAndThirdPartyAudience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [advertiserId] Required. The ID of the advertiser under whom the FirstAndThirdPartyAudience will be created.
     * @param {module:model/FirstAndThirdPartyAudience} [firstAndThirdPartyAudience] 
     * @param {module:api/FirstAndThirdPartyAudiencesApi~displayvideoFirstAndThirdPartyAudiencesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstAndThirdPartyAudience}
     */
    displayvideoFirstAndThirdPartyAudiencesCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['firstAndThirdPartyAudience'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'advertiserId': opts['advertiserId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FirstAndThirdPartyAudience;
      return this.apiClient.callApi(
        '/v3/firstAndThirdPartyAudiences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembers operation.
     * @callback module:api/FirstAndThirdPartyAudiencesApi~displayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditCustomerMatchMembersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the member list of a Customer Match audience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`
     * @param {String} firstAndThirdPartyAudienceId Required. The ID of the Customer Match FirstAndThirdPartyAudience whose members will be edited.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/EditCustomerMatchMembersRequest} [editCustomerMatchMembersRequest] 
     * @param {module:api/FirstAndThirdPartyAudiencesApi~displayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditCustomerMatchMembersResponse}
     */
    displayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembers(firstAndThirdPartyAudienceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['editCustomerMatchMembersRequest'];
      // verify the required parameter 'firstAndThirdPartyAudienceId' is set
      if (firstAndThirdPartyAudienceId === undefined || firstAndThirdPartyAudienceId === null) {
        throw new Error("Missing the required parameter 'firstAndThirdPartyAudienceId' when calling displayvideoFirstAndThirdPartyAudiencesEditCustomerMatchMembers");
      }

      let pathParams = {
        'firstAndThirdPartyAudienceId': firstAndThirdPartyAudienceId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EditCustomerMatchMembersResponse;
      return this.apiClient.callApi(
        '/v3/firstAndThirdPartyAudiences/{firstAndThirdPartyAudienceId}:editCustomerMatchMembers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoFirstAndThirdPartyAudiencesGet operation.
     * @callback module:api/FirstAndThirdPartyAudiencesApi~displayvideoFirstAndThirdPartyAudiencesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstAndThirdPartyAudience} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a first and third party audience.
     * @param {String} firstAndThirdPartyAudienceId Required. The ID of the first and third party audience to fetch.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [advertiserId] The ID of the advertiser that has access to the fetched first and third party audience.
     * @param {String} [partnerId] The ID of the partner that has access to the fetched first and third party audience.
     * @param {module:api/FirstAndThirdPartyAudiencesApi~displayvideoFirstAndThirdPartyAudiencesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstAndThirdPartyAudience}
     */
    displayvideoFirstAndThirdPartyAudiencesGet(firstAndThirdPartyAudienceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'firstAndThirdPartyAudienceId' is set
      if (firstAndThirdPartyAudienceId === undefined || firstAndThirdPartyAudienceId === null) {
        throw new Error("Missing the required parameter 'firstAndThirdPartyAudienceId' when calling displayvideoFirstAndThirdPartyAudiencesGet");
      }

      let pathParams = {
        'firstAndThirdPartyAudienceId': firstAndThirdPartyAudienceId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'advertiserId': opts['advertiserId'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FirstAndThirdPartyAudience;
      return this.apiClient.callApi(
        '/v3/firstAndThirdPartyAudiences/{firstAndThirdPartyAudienceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoFirstAndThirdPartyAudiencesList operation.
     * @callback module:api/FirstAndThirdPartyAudiencesApi~displayvideoFirstAndThirdPartyAudiencesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFirstAndThirdPartyAudiencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists first and third party audiences. The order is defined by the order_by parameter.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [advertiserId] The ID of the advertiser that has access to the fetched first and third party audiences.
     * @param {String} [filter] Allows filtering by first and third party audience fields. Supported syntax: * Filter expressions for first and third party audiences can only contain at most one restriction. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `displayName` Examples: * All first and third party audiences for which the display name contains \"Google\": `displayName:\"Google\"`. The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `firstAndThirdPartyAudienceId` (default) * `displayName` The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `displayName desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListFirstAndThirdPartyAudiences` method. If not specified, the first page of results will be returned.
     * @param {String} [partnerId] The ID of the partner that has access to the fetched first and third party audiences.
     * @param {module:api/FirstAndThirdPartyAudiencesApi~displayvideoFirstAndThirdPartyAudiencesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFirstAndThirdPartyAudiencesResponse}
     */
    displayvideoFirstAndThirdPartyAudiencesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'advertiserId': opts['advertiserId'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFirstAndThirdPartyAudiencesResponse;
      return this.apiClient.callApi(
        '/v3/firstAndThirdPartyAudiences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoFirstAndThirdPartyAudiencesPatch operation.
     * @callback module:api/FirstAndThirdPartyAudiencesApi~displayvideoFirstAndThirdPartyAudiencesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FirstAndThirdPartyAudience} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing FirstAndThirdPartyAudience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`
     * @param {String} firstAndThirdPartyAudienceId Output only. The unique ID of the first and third party audience. Assigned by the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [advertiserId] Required. The ID of the owner advertiser of the updated FirstAndThirdPartyAudience.
     * @param {String} [updateMask] Required. The mask to control which fields to update. Updates are only supported for the following fields: * `displayName` * `description` * `membershipDurationDays`
     * @param {module:model/FirstAndThirdPartyAudience} [firstAndThirdPartyAudience] 
     * @param {module:api/FirstAndThirdPartyAudiencesApi~displayvideoFirstAndThirdPartyAudiencesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FirstAndThirdPartyAudience}
     */
    displayvideoFirstAndThirdPartyAudiencesPatch(firstAndThirdPartyAudienceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['firstAndThirdPartyAudience'];
      // verify the required parameter 'firstAndThirdPartyAudienceId' is set
      if (firstAndThirdPartyAudienceId === undefined || firstAndThirdPartyAudienceId === null) {
        throw new Error("Missing the required parameter 'firstAndThirdPartyAudienceId' when calling displayvideoFirstAndThirdPartyAudiencesPatch");
      }

      let pathParams = {
        'firstAndThirdPartyAudienceId': firstAndThirdPartyAudienceId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'advertiserId': opts['advertiserId'],
        'updateMask': opts['updateMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FirstAndThirdPartyAudience;
      return this.apiClient.callApi(
        '/v3/firstAndThirdPartyAudiences/{firstAndThirdPartyAudienceId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
