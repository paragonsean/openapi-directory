/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsertionOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsertionOrder::OAIInsertionOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsertionOrder::OAIInsertionOrder() {
    this->initializeModel();
}

OAIInsertionOrder::~OAIInsertionOrder() {}

void OAIInsertionOrder::initializeModel() {

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_bid_strategy_isSet = false;
    m_bid_strategy_isValid = false;

    m_billable_outcome_isSet = false;
    m_billable_outcome_isValid = false;

    m_budget_isSet = false;
    m_budget_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_entity_status_isSet = false;
    m_entity_status_isValid = false;

    m_frequency_cap_isSet = false;
    m_frequency_cap_isValid = false;

    m_insertion_order_id_isSet = false;
    m_insertion_order_id_isValid = false;

    m_insertion_order_type_isSet = false;
    m_insertion_order_type_isValid = false;

    m_integration_details_isSet = false;
    m_integration_details_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pacing_isSet = false;
    m_pacing_isValid = false;

    m_partner_costs_isSet = false;
    m_partner_costs_isValid = false;

    m_performance_goal_isSet = false;
    m_performance_goal_isValid = false;

    m_reservation_type_isSet = false;
    m_reservation_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIInsertionOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsertionOrder::fromJsonObject(QJsonObject json) {

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_bid_strategy_isValid = ::OpenAPI::fromJsonValue(m_bid_strategy, json[QString("bidStrategy")]);
    m_bid_strategy_isSet = !json[QString("bidStrategy")].isNull() && m_bid_strategy_isValid;

    m_billable_outcome_isValid = ::OpenAPI::fromJsonValue(m_billable_outcome, json[QString("billableOutcome")]);
    m_billable_outcome_isSet = !json[QString("billableOutcome")].isNull() && m_billable_outcome_isValid;

    m_budget_isValid = ::OpenAPI::fromJsonValue(m_budget, json[QString("budget")]);
    m_budget_isSet = !json[QString("budget")].isNull() && m_budget_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaignId")]);
    m_campaign_id_isSet = !json[QString("campaignId")].isNull() && m_campaign_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_entity_status_isValid = ::OpenAPI::fromJsonValue(m_entity_status, json[QString("entityStatus")]);
    m_entity_status_isSet = !json[QString("entityStatus")].isNull() && m_entity_status_isValid;

    m_frequency_cap_isValid = ::OpenAPI::fromJsonValue(m_frequency_cap, json[QString("frequencyCap")]);
    m_frequency_cap_isSet = !json[QString("frequencyCap")].isNull() && m_frequency_cap_isValid;

    m_insertion_order_id_isValid = ::OpenAPI::fromJsonValue(m_insertion_order_id, json[QString("insertionOrderId")]);
    m_insertion_order_id_isSet = !json[QString("insertionOrderId")].isNull() && m_insertion_order_id_isValid;

    m_insertion_order_type_isValid = ::OpenAPI::fromJsonValue(m_insertion_order_type, json[QString("insertionOrderType")]);
    m_insertion_order_type_isSet = !json[QString("insertionOrderType")].isNull() && m_insertion_order_type_isValid;

    m_integration_details_isValid = ::OpenAPI::fromJsonValue(m_integration_details, json[QString("integrationDetails")]);
    m_integration_details_isSet = !json[QString("integrationDetails")].isNull() && m_integration_details_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pacing_isValid = ::OpenAPI::fromJsonValue(m_pacing, json[QString("pacing")]);
    m_pacing_isSet = !json[QString("pacing")].isNull() && m_pacing_isValid;

    m_partner_costs_isValid = ::OpenAPI::fromJsonValue(m_partner_costs, json[QString("partnerCosts")]);
    m_partner_costs_isSet = !json[QString("partnerCosts")].isNull() && m_partner_costs_isValid;

    m_performance_goal_isValid = ::OpenAPI::fromJsonValue(m_performance_goal, json[QString("performanceGoal")]);
    m_performance_goal_isSet = !json[QString("performanceGoal")].isNull() && m_performance_goal_isValid;

    m_reservation_type_isValid = ::OpenAPI::fromJsonValue(m_reservation_type, json[QString("reservationType")]);
    m_reservation_type_isSet = !json[QString("reservationType")].isNull() && m_reservation_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIInsertionOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsertionOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_bid_strategy.isSet()) {
        obj.insert(QString("bidStrategy"), ::OpenAPI::toJsonValue(m_bid_strategy));
    }
    if (m_billable_outcome_isSet) {
        obj.insert(QString("billableOutcome"), ::OpenAPI::toJsonValue(m_billable_outcome));
    }
    if (m_budget.isSet()) {
        obj.insert(QString("budget"), ::OpenAPI::toJsonValue(m_budget));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_entity_status_isSet) {
        obj.insert(QString("entityStatus"), ::OpenAPI::toJsonValue(m_entity_status));
    }
    if (m_frequency_cap.isSet()) {
        obj.insert(QString("frequencyCap"), ::OpenAPI::toJsonValue(m_frequency_cap));
    }
    if (m_insertion_order_id_isSet) {
        obj.insert(QString("insertionOrderId"), ::OpenAPI::toJsonValue(m_insertion_order_id));
    }
    if (m_insertion_order_type_isSet) {
        obj.insert(QString("insertionOrderType"), ::OpenAPI::toJsonValue(m_insertion_order_type));
    }
    if (m_integration_details.isSet()) {
        obj.insert(QString("integrationDetails"), ::OpenAPI::toJsonValue(m_integration_details));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pacing.isSet()) {
        obj.insert(QString("pacing"), ::OpenAPI::toJsonValue(m_pacing));
    }
    if (m_partner_costs.size() > 0) {
        obj.insert(QString("partnerCosts"), ::OpenAPI::toJsonValue(m_partner_costs));
    }
    if (m_performance_goal.isSet()) {
        obj.insert(QString("performanceGoal"), ::OpenAPI::toJsonValue(m_performance_goal));
    }
    if (m_reservation_type_isSet) {
        obj.insert(QString("reservationType"), ::OpenAPI::toJsonValue(m_reservation_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIInsertionOrder::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIInsertionOrder::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIInsertionOrder::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIInsertionOrder::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

OAIBiddingStrategy OAIInsertionOrder::getBidStrategy() const {
    return m_bid_strategy;
}
void OAIInsertionOrder::setBidStrategy(const OAIBiddingStrategy &bid_strategy) {
    m_bid_strategy = bid_strategy;
    m_bid_strategy_isSet = true;
}

bool OAIInsertionOrder::is_bid_strategy_Set() const{
    return m_bid_strategy_isSet;
}

bool OAIInsertionOrder::is_bid_strategy_Valid() const{
    return m_bid_strategy_isValid;
}

QString OAIInsertionOrder::getBillableOutcome() const {
    return m_billable_outcome;
}
void OAIInsertionOrder::setBillableOutcome(const QString &billable_outcome) {
    m_billable_outcome = billable_outcome;
    m_billable_outcome_isSet = true;
}

bool OAIInsertionOrder::is_billable_outcome_Set() const{
    return m_billable_outcome_isSet;
}

bool OAIInsertionOrder::is_billable_outcome_Valid() const{
    return m_billable_outcome_isValid;
}

OAIInsertionOrderBudget OAIInsertionOrder::getBudget() const {
    return m_budget;
}
void OAIInsertionOrder::setBudget(const OAIInsertionOrderBudget &budget) {
    m_budget = budget;
    m_budget_isSet = true;
}

bool OAIInsertionOrder::is_budget_Set() const{
    return m_budget_isSet;
}

bool OAIInsertionOrder::is_budget_Valid() const{
    return m_budget_isValid;
}

QString OAIInsertionOrder::getCampaignId() const {
    return m_campaign_id;
}
void OAIInsertionOrder::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIInsertionOrder::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIInsertionOrder::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

QString OAIInsertionOrder::getDisplayName() const {
    return m_display_name;
}
void OAIInsertionOrder::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIInsertionOrder::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIInsertionOrder::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIInsertionOrder::getEntityStatus() const {
    return m_entity_status;
}
void OAIInsertionOrder::setEntityStatus(const QString &entity_status) {
    m_entity_status = entity_status;
    m_entity_status_isSet = true;
}

bool OAIInsertionOrder::is_entity_status_Set() const{
    return m_entity_status_isSet;
}

bool OAIInsertionOrder::is_entity_status_Valid() const{
    return m_entity_status_isValid;
}

OAIFrequencyCap OAIInsertionOrder::getFrequencyCap() const {
    return m_frequency_cap;
}
void OAIInsertionOrder::setFrequencyCap(const OAIFrequencyCap &frequency_cap) {
    m_frequency_cap = frequency_cap;
    m_frequency_cap_isSet = true;
}

bool OAIInsertionOrder::is_frequency_cap_Set() const{
    return m_frequency_cap_isSet;
}

bool OAIInsertionOrder::is_frequency_cap_Valid() const{
    return m_frequency_cap_isValid;
}

QString OAIInsertionOrder::getInsertionOrderId() const {
    return m_insertion_order_id;
}
void OAIInsertionOrder::setInsertionOrderId(const QString &insertion_order_id) {
    m_insertion_order_id = insertion_order_id;
    m_insertion_order_id_isSet = true;
}

bool OAIInsertionOrder::is_insertion_order_id_Set() const{
    return m_insertion_order_id_isSet;
}

bool OAIInsertionOrder::is_insertion_order_id_Valid() const{
    return m_insertion_order_id_isValid;
}

QString OAIInsertionOrder::getInsertionOrderType() const {
    return m_insertion_order_type;
}
void OAIInsertionOrder::setInsertionOrderType(const QString &insertion_order_type) {
    m_insertion_order_type = insertion_order_type;
    m_insertion_order_type_isSet = true;
}

bool OAIInsertionOrder::is_insertion_order_type_Set() const{
    return m_insertion_order_type_isSet;
}

bool OAIInsertionOrder::is_insertion_order_type_Valid() const{
    return m_insertion_order_type_isValid;
}

OAIIntegrationDetails OAIInsertionOrder::getIntegrationDetails() const {
    return m_integration_details;
}
void OAIInsertionOrder::setIntegrationDetails(const OAIIntegrationDetails &integration_details) {
    m_integration_details = integration_details;
    m_integration_details_isSet = true;
}

bool OAIInsertionOrder::is_integration_details_Set() const{
    return m_integration_details_isSet;
}

bool OAIInsertionOrder::is_integration_details_Valid() const{
    return m_integration_details_isValid;
}

QString OAIInsertionOrder::getName() const {
    return m_name;
}
void OAIInsertionOrder::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInsertionOrder::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInsertionOrder::is_name_Valid() const{
    return m_name_isValid;
}

OAIPacing OAIInsertionOrder::getPacing() const {
    return m_pacing;
}
void OAIInsertionOrder::setPacing(const OAIPacing &pacing) {
    m_pacing = pacing;
    m_pacing_isSet = true;
}

bool OAIInsertionOrder::is_pacing_Set() const{
    return m_pacing_isSet;
}

bool OAIInsertionOrder::is_pacing_Valid() const{
    return m_pacing_isValid;
}

QList<OAIPartnerCost> OAIInsertionOrder::getPartnerCosts() const {
    return m_partner_costs;
}
void OAIInsertionOrder::setPartnerCosts(const QList<OAIPartnerCost> &partner_costs) {
    m_partner_costs = partner_costs;
    m_partner_costs_isSet = true;
}

bool OAIInsertionOrder::is_partner_costs_Set() const{
    return m_partner_costs_isSet;
}

bool OAIInsertionOrder::is_partner_costs_Valid() const{
    return m_partner_costs_isValid;
}

OAIPerformanceGoal OAIInsertionOrder::getPerformanceGoal() const {
    return m_performance_goal;
}
void OAIInsertionOrder::setPerformanceGoal(const OAIPerformanceGoal &performance_goal) {
    m_performance_goal = performance_goal;
    m_performance_goal_isSet = true;
}

bool OAIInsertionOrder::is_performance_goal_Set() const{
    return m_performance_goal_isSet;
}

bool OAIInsertionOrder::is_performance_goal_Valid() const{
    return m_performance_goal_isValid;
}

QString OAIInsertionOrder::getReservationType() const {
    return m_reservation_type;
}
void OAIInsertionOrder::setReservationType(const QString &reservation_type) {
    m_reservation_type = reservation_type;
    m_reservation_type_isSet = true;
}

bool OAIInsertionOrder::is_reservation_type_Set() const{
    return m_reservation_type_isSet;
}

bool OAIInsertionOrder::is_reservation_type_Valid() const{
    return m_reservation_type_isValid;
}

QString OAIInsertionOrder::getUpdateTime() const {
    return m_update_time;
}
void OAIInsertionOrder::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIInsertionOrder::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIInsertionOrder::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIInsertionOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bid_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billable_outcome_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_budget.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_cap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insertion_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insertion_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pacing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_costs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_goal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsertionOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
