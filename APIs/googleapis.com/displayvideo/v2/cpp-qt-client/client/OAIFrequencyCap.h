/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFrequencyCap.h
 *
 * Settings that control the number of times a user may be shown with the same ad during a given time period.
 */

#ifndef OAIFrequencyCap_H
#define OAIFrequencyCap_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFrequencyCap : public OAIObject {
public:
    OAIFrequencyCap();
    OAIFrequencyCap(QString json);
    ~OAIFrequencyCap() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMaxImpressions() const;
    void setMaxImpressions(const qint32 &max_impressions);
    bool is_max_impressions_Set() const;
    bool is_max_impressions_Valid() const;

    qint32 getMaxViews() const;
    void setMaxViews(const qint32 &max_views);
    bool is_max_views_Set() const;
    bool is_max_views_Valid() const;

    QString getTimeUnit() const;
    void setTimeUnit(const QString &time_unit);
    bool is_time_unit_Set() const;
    bool is_time_unit_Valid() const;

    qint32 getTimeUnitCount() const;
    void setTimeUnitCount(const qint32 &time_unit_count);
    bool is_time_unit_count_Set() const;
    bool is_time_unit_count_Valid() const;

    bool isUnlimited() const;
    void setUnlimited(const bool &unlimited);
    bool is_unlimited_Set() const;
    bool is_unlimited_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_max_impressions;
    bool m_max_impressions_isSet;
    bool m_max_impressions_isValid;

    qint32 m_max_views;
    bool m_max_views_isSet;
    bool m_max_views_isValid;

    QString m_time_unit;
    bool m_time_unit_isSet;
    bool m_time_unit_isValid;

    qint32 m_time_unit_count;
    bool m_time_unit_count_isSet;
    bool m_time_unit_count_isValid;

    bool m_unlimited;
    bool m_unlimited_isSet;
    bool m_unlimited_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFrequencyCap)

#endif // OAIFrequencyCap_H
