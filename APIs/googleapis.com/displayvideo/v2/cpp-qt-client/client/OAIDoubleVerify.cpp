/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDoubleVerify.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDoubleVerify::OAIDoubleVerify(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDoubleVerify::OAIDoubleVerify() {
    this->initializeModel();
}

OAIDoubleVerify::~OAIDoubleVerify() {}

void OAIDoubleVerify::initializeModel() {

    m_app_star_rating_isSet = false;
    m_app_star_rating_isValid = false;

    m_avoided_age_ratings_isSet = false;
    m_avoided_age_ratings_isValid = false;

    m_brand_safety_categories_isSet = false;
    m_brand_safety_categories_isValid = false;

    m_custom_segment_id_isSet = false;
    m_custom_segment_id_isValid = false;

    m_display_viewability_isSet = false;
    m_display_viewability_isValid = false;

    m_fraud_invalid_traffic_isSet = false;
    m_fraud_invalid_traffic_isValid = false;

    m_video_viewability_isSet = false;
    m_video_viewability_isValid = false;
}

void OAIDoubleVerify::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDoubleVerify::fromJsonObject(QJsonObject json) {

    m_app_star_rating_isValid = ::OpenAPI::fromJsonValue(m_app_star_rating, json[QString("appStarRating")]);
    m_app_star_rating_isSet = !json[QString("appStarRating")].isNull() && m_app_star_rating_isValid;

    m_avoided_age_ratings_isValid = ::OpenAPI::fromJsonValue(m_avoided_age_ratings, json[QString("avoidedAgeRatings")]);
    m_avoided_age_ratings_isSet = !json[QString("avoidedAgeRatings")].isNull() && m_avoided_age_ratings_isValid;

    m_brand_safety_categories_isValid = ::OpenAPI::fromJsonValue(m_brand_safety_categories, json[QString("brandSafetyCategories")]);
    m_brand_safety_categories_isSet = !json[QString("brandSafetyCategories")].isNull() && m_brand_safety_categories_isValid;

    m_custom_segment_id_isValid = ::OpenAPI::fromJsonValue(m_custom_segment_id, json[QString("customSegmentId")]);
    m_custom_segment_id_isSet = !json[QString("customSegmentId")].isNull() && m_custom_segment_id_isValid;

    m_display_viewability_isValid = ::OpenAPI::fromJsonValue(m_display_viewability, json[QString("displayViewability")]);
    m_display_viewability_isSet = !json[QString("displayViewability")].isNull() && m_display_viewability_isValid;

    m_fraud_invalid_traffic_isValid = ::OpenAPI::fromJsonValue(m_fraud_invalid_traffic, json[QString("fraudInvalidTraffic")]);
    m_fraud_invalid_traffic_isSet = !json[QString("fraudInvalidTraffic")].isNull() && m_fraud_invalid_traffic_isValid;

    m_video_viewability_isValid = ::OpenAPI::fromJsonValue(m_video_viewability, json[QString("videoViewability")]);
    m_video_viewability_isSet = !json[QString("videoViewability")].isNull() && m_video_viewability_isValid;
}

QString OAIDoubleVerify::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDoubleVerify::asJsonObject() const {
    QJsonObject obj;
    if (m_app_star_rating.isSet()) {
        obj.insert(QString("appStarRating"), ::OpenAPI::toJsonValue(m_app_star_rating));
    }
    if (m_avoided_age_ratings.size() > 0) {
        obj.insert(QString("avoidedAgeRatings"), ::OpenAPI::toJsonValue(m_avoided_age_ratings));
    }
    if (m_brand_safety_categories.isSet()) {
        obj.insert(QString("brandSafetyCategories"), ::OpenAPI::toJsonValue(m_brand_safety_categories));
    }
    if (m_custom_segment_id_isSet) {
        obj.insert(QString("customSegmentId"), ::OpenAPI::toJsonValue(m_custom_segment_id));
    }
    if (m_display_viewability.isSet()) {
        obj.insert(QString("displayViewability"), ::OpenAPI::toJsonValue(m_display_viewability));
    }
    if (m_fraud_invalid_traffic.isSet()) {
        obj.insert(QString("fraudInvalidTraffic"), ::OpenAPI::toJsonValue(m_fraud_invalid_traffic));
    }
    if (m_video_viewability.isSet()) {
        obj.insert(QString("videoViewability"), ::OpenAPI::toJsonValue(m_video_viewability));
    }
    return obj;
}

OAIDoubleVerifyAppStarRating OAIDoubleVerify::getAppStarRating() const {
    return m_app_star_rating;
}
void OAIDoubleVerify::setAppStarRating(const OAIDoubleVerifyAppStarRating &app_star_rating) {
    m_app_star_rating = app_star_rating;
    m_app_star_rating_isSet = true;
}

bool OAIDoubleVerify::is_app_star_rating_Set() const{
    return m_app_star_rating_isSet;
}

bool OAIDoubleVerify::is_app_star_rating_Valid() const{
    return m_app_star_rating_isValid;
}

QList<QString> OAIDoubleVerify::getAvoidedAgeRatings() const {
    return m_avoided_age_ratings;
}
void OAIDoubleVerify::setAvoidedAgeRatings(const QList<QString> &avoided_age_ratings) {
    m_avoided_age_ratings = avoided_age_ratings;
    m_avoided_age_ratings_isSet = true;
}

bool OAIDoubleVerify::is_avoided_age_ratings_Set() const{
    return m_avoided_age_ratings_isSet;
}

bool OAIDoubleVerify::is_avoided_age_ratings_Valid() const{
    return m_avoided_age_ratings_isValid;
}

OAIDoubleVerifyBrandSafetyCategories OAIDoubleVerify::getBrandSafetyCategories() const {
    return m_brand_safety_categories;
}
void OAIDoubleVerify::setBrandSafetyCategories(const OAIDoubleVerifyBrandSafetyCategories &brand_safety_categories) {
    m_brand_safety_categories = brand_safety_categories;
    m_brand_safety_categories_isSet = true;
}

bool OAIDoubleVerify::is_brand_safety_categories_Set() const{
    return m_brand_safety_categories_isSet;
}

bool OAIDoubleVerify::is_brand_safety_categories_Valid() const{
    return m_brand_safety_categories_isValid;
}

QString OAIDoubleVerify::getCustomSegmentId() const {
    return m_custom_segment_id;
}
void OAIDoubleVerify::setCustomSegmentId(const QString &custom_segment_id) {
    m_custom_segment_id = custom_segment_id;
    m_custom_segment_id_isSet = true;
}

bool OAIDoubleVerify::is_custom_segment_id_Set() const{
    return m_custom_segment_id_isSet;
}

bool OAIDoubleVerify::is_custom_segment_id_Valid() const{
    return m_custom_segment_id_isValid;
}

OAIDoubleVerifyDisplayViewability OAIDoubleVerify::getDisplayViewability() const {
    return m_display_viewability;
}
void OAIDoubleVerify::setDisplayViewability(const OAIDoubleVerifyDisplayViewability &display_viewability) {
    m_display_viewability = display_viewability;
    m_display_viewability_isSet = true;
}

bool OAIDoubleVerify::is_display_viewability_Set() const{
    return m_display_viewability_isSet;
}

bool OAIDoubleVerify::is_display_viewability_Valid() const{
    return m_display_viewability_isValid;
}

OAIDoubleVerifyFraudInvalidTraffic OAIDoubleVerify::getFraudInvalidTraffic() const {
    return m_fraud_invalid_traffic;
}
void OAIDoubleVerify::setFraudInvalidTraffic(const OAIDoubleVerifyFraudInvalidTraffic &fraud_invalid_traffic) {
    m_fraud_invalid_traffic = fraud_invalid_traffic;
    m_fraud_invalid_traffic_isSet = true;
}

bool OAIDoubleVerify::is_fraud_invalid_traffic_Set() const{
    return m_fraud_invalid_traffic_isSet;
}

bool OAIDoubleVerify::is_fraud_invalid_traffic_Valid() const{
    return m_fraud_invalid_traffic_isValid;
}

OAIDoubleVerifyVideoViewability OAIDoubleVerify::getVideoViewability() const {
    return m_video_viewability;
}
void OAIDoubleVerify::setVideoViewability(const OAIDoubleVerifyVideoViewability &video_viewability) {
    m_video_viewability = video_viewability;
    m_video_viewability_isSet = true;
}

bool OAIDoubleVerify::is_video_viewability_Set() const{
    return m_video_viewability_isSet;
}

bool OAIDoubleVerify::is_video_viewability_Valid() const{
    return m_video_viewability_isValid;
}

bool OAIDoubleVerify::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_star_rating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_avoided_age_ratings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_safety_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_viewability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_invalid_traffic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_viewability.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDoubleVerify::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
