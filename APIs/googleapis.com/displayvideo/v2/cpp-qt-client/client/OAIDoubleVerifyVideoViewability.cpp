/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDoubleVerifyVideoViewability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDoubleVerifyVideoViewability::OAIDoubleVerifyVideoViewability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDoubleVerifyVideoViewability::OAIDoubleVerifyVideoViewability() {
    this->initializeModel();
}

OAIDoubleVerifyVideoViewability::~OAIDoubleVerifyVideoViewability() {}

void OAIDoubleVerifyVideoViewability::initializeModel() {

    m_player_impression_rate_isSet = false;
    m_player_impression_rate_isValid = false;

    m_video_iab_isSet = false;
    m_video_iab_isValid = false;

    m_video_viewable_rate_isSet = false;
    m_video_viewable_rate_isValid = false;
}

void OAIDoubleVerifyVideoViewability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDoubleVerifyVideoViewability::fromJsonObject(QJsonObject json) {

    m_player_impression_rate_isValid = ::OpenAPI::fromJsonValue(m_player_impression_rate, json[QString("playerImpressionRate")]);
    m_player_impression_rate_isSet = !json[QString("playerImpressionRate")].isNull() && m_player_impression_rate_isValid;

    m_video_iab_isValid = ::OpenAPI::fromJsonValue(m_video_iab, json[QString("videoIab")]);
    m_video_iab_isSet = !json[QString("videoIab")].isNull() && m_video_iab_isValid;

    m_video_viewable_rate_isValid = ::OpenAPI::fromJsonValue(m_video_viewable_rate, json[QString("videoViewableRate")]);
    m_video_viewable_rate_isSet = !json[QString("videoViewableRate")].isNull() && m_video_viewable_rate_isValid;
}

QString OAIDoubleVerifyVideoViewability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDoubleVerifyVideoViewability::asJsonObject() const {
    QJsonObject obj;
    if (m_player_impression_rate_isSet) {
        obj.insert(QString("playerImpressionRate"), ::OpenAPI::toJsonValue(m_player_impression_rate));
    }
    if (m_video_iab_isSet) {
        obj.insert(QString("videoIab"), ::OpenAPI::toJsonValue(m_video_iab));
    }
    if (m_video_viewable_rate_isSet) {
        obj.insert(QString("videoViewableRate"), ::OpenAPI::toJsonValue(m_video_viewable_rate));
    }
    return obj;
}

QString OAIDoubleVerifyVideoViewability::getPlayerImpressionRate() const {
    return m_player_impression_rate;
}
void OAIDoubleVerifyVideoViewability::setPlayerImpressionRate(const QString &player_impression_rate) {
    m_player_impression_rate = player_impression_rate;
    m_player_impression_rate_isSet = true;
}

bool OAIDoubleVerifyVideoViewability::is_player_impression_rate_Set() const{
    return m_player_impression_rate_isSet;
}

bool OAIDoubleVerifyVideoViewability::is_player_impression_rate_Valid() const{
    return m_player_impression_rate_isValid;
}

QString OAIDoubleVerifyVideoViewability::getVideoIab() const {
    return m_video_iab;
}
void OAIDoubleVerifyVideoViewability::setVideoIab(const QString &video_iab) {
    m_video_iab = video_iab;
    m_video_iab_isSet = true;
}

bool OAIDoubleVerifyVideoViewability::is_video_iab_Set() const{
    return m_video_iab_isSet;
}

bool OAIDoubleVerifyVideoViewability::is_video_iab_Valid() const{
    return m_video_iab_isValid;
}

QString OAIDoubleVerifyVideoViewability::getVideoViewableRate() const {
    return m_video_viewable_rate;
}
void OAIDoubleVerifyVideoViewability::setVideoViewableRate(const QString &video_viewable_rate) {
    m_video_viewable_rate = video_viewable_rate;
    m_video_viewable_rate_isSet = true;
}

bool OAIDoubleVerifyVideoViewability::is_video_viewable_rate_Set() const{
    return m_video_viewable_rate_isSet;
}

bool OAIDoubleVerifyVideoViewability::is_video_viewable_rate_Valid() const{
    return m_video_viewable_rate_isValid;
}

bool OAIDoubleVerifyVideoViewability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_player_impression_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_iab_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_viewable_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDoubleVerifyVideoViewability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
