/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPacing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPacing::OAIPacing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPacing::OAIPacing() {
    this->initializeModel();
}

OAIPacing::~OAIPacing() {}

void OAIPacing::initializeModel() {

    m_daily_max_impressions_isSet = false;
    m_daily_max_impressions_isValid = false;

    m_daily_max_micros_isSet = false;
    m_daily_max_micros_isValid = false;

    m_pacing_period_isSet = false;
    m_pacing_period_isValid = false;

    m_pacing_type_isSet = false;
    m_pacing_type_isValid = false;
}

void OAIPacing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPacing::fromJsonObject(QJsonObject json) {

    m_daily_max_impressions_isValid = ::OpenAPI::fromJsonValue(m_daily_max_impressions, json[QString("dailyMaxImpressions")]);
    m_daily_max_impressions_isSet = !json[QString("dailyMaxImpressions")].isNull() && m_daily_max_impressions_isValid;

    m_daily_max_micros_isValid = ::OpenAPI::fromJsonValue(m_daily_max_micros, json[QString("dailyMaxMicros")]);
    m_daily_max_micros_isSet = !json[QString("dailyMaxMicros")].isNull() && m_daily_max_micros_isValid;

    m_pacing_period_isValid = ::OpenAPI::fromJsonValue(m_pacing_period, json[QString("pacingPeriod")]);
    m_pacing_period_isSet = !json[QString("pacingPeriod")].isNull() && m_pacing_period_isValid;

    m_pacing_type_isValid = ::OpenAPI::fromJsonValue(m_pacing_type, json[QString("pacingType")]);
    m_pacing_type_isSet = !json[QString("pacingType")].isNull() && m_pacing_type_isValid;
}

QString OAIPacing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPacing::asJsonObject() const {
    QJsonObject obj;
    if (m_daily_max_impressions_isSet) {
        obj.insert(QString("dailyMaxImpressions"), ::OpenAPI::toJsonValue(m_daily_max_impressions));
    }
    if (m_daily_max_micros_isSet) {
        obj.insert(QString("dailyMaxMicros"), ::OpenAPI::toJsonValue(m_daily_max_micros));
    }
    if (m_pacing_period_isSet) {
        obj.insert(QString("pacingPeriod"), ::OpenAPI::toJsonValue(m_pacing_period));
    }
    if (m_pacing_type_isSet) {
        obj.insert(QString("pacingType"), ::OpenAPI::toJsonValue(m_pacing_type));
    }
    return obj;
}

QString OAIPacing::getDailyMaxImpressions() const {
    return m_daily_max_impressions;
}
void OAIPacing::setDailyMaxImpressions(const QString &daily_max_impressions) {
    m_daily_max_impressions = daily_max_impressions;
    m_daily_max_impressions_isSet = true;
}

bool OAIPacing::is_daily_max_impressions_Set() const{
    return m_daily_max_impressions_isSet;
}

bool OAIPacing::is_daily_max_impressions_Valid() const{
    return m_daily_max_impressions_isValid;
}

QString OAIPacing::getDailyMaxMicros() const {
    return m_daily_max_micros;
}
void OAIPacing::setDailyMaxMicros(const QString &daily_max_micros) {
    m_daily_max_micros = daily_max_micros;
    m_daily_max_micros_isSet = true;
}

bool OAIPacing::is_daily_max_micros_Set() const{
    return m_daily_max_micros_isSet;
}

bool OAIPacing::is_daily_max_micros_Valid() const{
    return m_daily_max_micros_isValid;
}

QString OAIPacing::getPacingPeriod() const {
    return m_pacing_period;
}
void OAIPacing::setPacingPeriod(const QString &pacing_period) {
    m_pacing_period = pacing_period;
    m_pacing_period_isSet = true;
}

bool OAIPacing::is_pacing_period_Set() const{
    return m_pacing_period_isSet;
}

bool OAIPacing::is_pacing_period_Valid() const{
    return m_pacing_period_isValid;
}

QString OAIPacing::getPacingType() const {
    return m_pacing_type;
}
void OAIPacing::setPacingType(const QString &pacing_type) {
    m_pacing_type = pacing_type;
    m_pacing_type_isSet = true;
}

bool OAIPacing::is_pacing_type_Set() const{
    return m_pacing_type_isSet;
}

bool OAIPacing::is_pacing_type_Valid() const{
    return m_pacing_type_isValid;
}

bool OAIPacing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_daily_max_impressions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_max_micros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pacing_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pacing_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPacing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
