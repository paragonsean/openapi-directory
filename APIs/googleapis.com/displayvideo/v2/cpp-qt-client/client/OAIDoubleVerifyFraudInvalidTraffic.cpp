/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDoubleVerifyFraudInvalidTraffic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDoubleVerifyFraudInvalidTraffic::OAIDoubleVerifyFraudInvalidTraffic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDoubleVerifyFraudInvalidTraffic::OAIDoubleVerifyFraudInvalidTraffic() {
    this->initializeModel();
}

OAIDoubleVerifyFraudInvalidTraffic::~OAIDoubleVerifyFraudInvalidTraffic() {}

void OAIDoubleVerifyFraudInvalidTraffic::initializeModel() {

    m_avoid_insufficient_option_isSet = false;
    m_avoid_insufficient_option_isValid = false;

    m_avoided_fraud_option_isSet = false;
    m_avoided_fraud_option_isValid = false;
}

void OAIDoubleVerifyFraudInvalidTraffic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDoubleVerifyFraudInvalidTraffic::fromJsonObject(QJsonObject json) {

    m_avoid_insufficient_option_isValid = ::OpenAPI::fromJsonValue(m_avoid_insufficient_option, json[QString("avoidInsufficientOption")]);
    m_avoid_insufficient_option_isSet = !json[QString("avoidInsufficientOption")].isNull() && m_avoid_insufficient_option_isValid;

    m_avoided_fraud_option_isValid = ::OpenAPI::fromJsonValue(m_avoided_fraud_option, json[QString("avoidedFraudOption")]);
    m_avoided_fraud_option_isSet = !json[QString("avoidedFraudOption")].isNull() && m_avoided_fraud_option_isValid;
}

QString OAIDoubleVerifyFraudInvalidTraffic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDoubleVerifyFraudInvalidTraffic::asJsonObject() const {
    QJsonObject obj;
    if (m_avoid_insufficient_option_isSet) {
        obj.insert(QString("avoidInsufficientOption"), ::OpenAPI::toJsonValue(m_avoid_insufficient_option));
    }
    if (m_avoided_fraud_option_isSet) {
        obj.insert(QString("avoidedFraudOption"), ::OpenAPI::toJsonValue(m_avoided_fraud_option));
    }
    return obj;
}

bool OAIDoubleVerifyFraudInvalidTraffic::isAvoidInsufficientOption() const {
    return m_avoid_insufficient_option;
}
void OAIDoubleVerifyFraudInvalidTraffic::setAvoidInsufficientOption(const bool &avoid_insufficient_option) {
    m_avoid_insufficient_option = avoid_insufficient_option;
    m_avoid_insufficient_option_isSet = true;
}

bool OAIDoubleVerifyFraudInvalidTraffic::is_avoid_insufficient_option_Set() const{
    return m_avoid_insufficient_option_isSet;
}

bool OAIDoubleVerifyFraudInvalidTraffic::is_avoid_insufficient_option_Valid() const{
    return m_avoid_insufficient_option_isValid;
}

QString OAIDoubleVerifyFraudInvalidTraffic::getAvoidedFraudOption() const {
    return m_avoided_fraud_option;
}
void OAIDoubleVerifyFraudInvalidTraffic::setAvoidedFraudOption(const QString &avoided_fraud_option) {
    m_avoided_fraud_option = avoided_fraud_option;
    m_avoided_fraud_option_isSet = true;
}

bool OAIDoubleVerifyFraudInvalidTraffic::is_avoided_fraud_option_Set() const{
    return m_avoided_fraud_option_isSet;
}

bool OAIDoubleVerifyFraudInvalidTraffic::is_avoided_fraud_option_Valid() const{
    return m_avoided_fraud_option_isValid;
}

bool OAIDoubleVerifyFraudInvalidTraffic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avoid_insufficient_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avoided_fraud_option_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDoubleVerifyFraudInvalidTraffic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
