/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditAdvertiserResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditAdvertiserResponse::OAIAuditAdvertiserResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditAdvertiserResponse::OAIAuditAdvertiserResponse() {
    this->initializeModel();
}

OAIAuditAdvertiserResponse::~OAIAuditAdvertiserResponse() {}

void OAIAuditAdvertiserResponse::initializeModel() {

    m_ad_group_criteria_count_isSet = false;
    m_ad_group_criteria_count_isValid = false;

    m_campaign_criteria_count_isSet = false;
    m_campaign_criteria_count_isValid = false;

    m_channels_count_isSet = false;
    m_channels_count_isValid = false;

    m_negative_keyword_lists_count_isSet = false;
    m_negative_keyword_lists_count_isValid = false;

    m_negatively_targeted_channels_count_isSet = false;
    m_negatively_targeted_channels_count_isValid = false;

    m_used_campaigns_count_isSet = false;
    m_used_campaigns_count_isValid = false;

    m_used_insertion_orders_count_isSet = false;
    m_used_insertion_orders_count_isValid = false;

    m_used_line_items_count_isSet = false;
    m_used_line_items_count_isValid = false;
}

void OAIAuditAdvertiserResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditAdvertiserResponse::fromJsonObject(QJsonObject json) {

    m_ad_group_criteria_count_isValid = ::OpenAPI::fromJsonValue(m_ad_group_criteria_count, json[QString("adGroupCriteriaCount")]);
    m_ad_group_criteria_count_isSet = !json[QString("adGroupCriteriaCount")].isNull() && m_ad_group_criteria_count_isValid;

    m_campaign_criteria_count_isValid = ::OpenAPI::fromJsonValue(m_campaign_criteria_count, json[QString("campaignCriteriaCount")]);
    m_campaign_criteria_count_isSet = !json[QString("campaignCriteriaCount")].isNull() && m_campaign_criteria_count_isValid;

    m_channels_count_isValid = ::OpenAPI::fromJsonValue(m_channels_count, json[QString("channelsCount")]);
    m_channels_count_isSet = !json[QString("channelsCount")].isNull() && m_channels_count_isValid;

    m_negative_keyword_lists_count_isValid = ::OpenAPI::fromJsonValue(m_negative_keyword_lists_count, json[QString("negativeKeywordListsCount")]);
    m_negative_keyword_lists_count_isSet = !json[QString("negativeKeywordListsCount")].isNull() && m_negative_keyword_lists_count_isValid;

    m_negatively_targeted_channels_count_isValid = ::OpenAPI::fromJsonValue(m_negatively_targeted_channels_count, json[QString("negativelyTargetedChannelsCount")]);
    m_negatively_targeted_channels_count_isSet = !json[QString("negativelyTargetedChannelsCount")].isNull() && m_negatively_targeted_channels_count_isValid;

    m_used_campaigns_count_isValid = ::OpenAPI::fromJsonValue(m_used_campaigns_count, json[QString("usedCampaignsCount")]);
    m_used_campaigns_count_isSet = !json[QString("usedCampaignsCount")].isNull() && m_used_campaigns_count_isValid;

    m_used_insertion_orders_count_isValid = ::OpenAPI::fromJsonValue(m_used_insertion_orders_count, json[QString("usedInsertionOrdersCount")]);
    m_used_insertion_orders_count_isSet = !json[QString("usedInsertionOrdersCount")].isNull() && m_used_insertion_orders_count_isValid;

    m_used_line_items_count_isValid = ::OpenAPI::fromJsonValue(m_used_line_items_count, json[QString("usedLineItemsCount")]);
    m_used_line_items_count_isSet = !json[QString("usedLineItemsCount")].isNull() && m_used_line_items_count_isValid;
}

QString OAIAuditAdvertiserResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditAdvertiserResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_group_criteria_count_isSet) {
        obj.insert(QString("adGroupCriteriaCount"), ::OpenAPI::toJsonValue(m_ad_group_criteria_count));
    }
    if (m_campaign_criteria_count_isSet) {
        obj.insert(QString("campaignCriteriaCount"), ::OpenAPI::toJsonValue(m_campaign_criteria_count));
    }
    if (m_channels_count_isSet) {
        obj.insert(QString("channelsCount"), ::OpenAPI::toJsonValue(m_channels_count));
    }
    if (m_negative_keyword_lists_count_isSet) {
        obj.insert(QString("negativeKeywordListsCount"), ::OpenAPI::toJsonValue(m_negative_keyword_lists_count));
    }
    if (m_negatively_targeted_channels_count_isSet) {
        obj.insert(QString("negativelyTargetedChannelsCount"), ::OpenAPI::toJsonValue(m_negatively_targeted_channels_count));
    }
    if (m_used_campaigns_count_isSet) {
        obj.insert(QString("usedCampaignsCount"), ::OpenAPI::toJsonValue(m_used_campaigns_count));
    }
    if (m_used_insertion_orders_count_isSet) {
        obj.insert(QString("usedInsertionOrdersCount"), ::OpenAPI::toJsonValue(m_used_insertion_orders_count));
    }
    if (m_used_line_items_count_isSet) {
        obj.insert(QString("usedLineItemsCount"), ::OpenAPI::toJsonValue(m_used_line_items_count));
    }
    return obj;
}

QString OAIAuditAdvertiserResponse::getAdGroupCriteriaCount() const {
    return m_ad_group_criteria_count;
}
void OAIAuditAdvertiserResponse::setAdGroupCriteriaCount(const QString &ad_group_criteria_count) {
    m_ad_group_criteria_count = ad_group_criteria_count;
    m_ad_group_criteria_count_isSet = true;
}

bool OAIAuditAdvertiserResponse::is_ad_group_criteria_count_Set() const{
    return m_ad_group_criteria_count_isSet;
}

bool OAIAuditAdvertiserResponse::is_ad_group_criteria_count_Valid() const{
    return m_ad_group_criteria_count_isValid;
}

QString OAIAuditAdvertiserResponse::getCampaignCriteriaCount() const {
    return m_campaign_criteria_count;
}
void OAIAuditAdvertiserResponse::setCampaignCriteriaCount(const QString &campaign_criteria_count) {
    m_campaign_criteria_count = campaign_criteria_count;
    m_campaign_criteria_count_isSet = true;
}

bool OAIAuditAdvertiserResponse::is_campaign_criteria_count_Set() const{
    return m_campaign_criteria_count_isSet;
}

bool OAIAuditAdvertiserResponse::is_campaign_criteria_count_Valid() const{
    return m_campaign_criteria_count_isValid;
}

QString OAIAuditAdvertiserResponse::getChannelsCount() const {
    return m_channels_count;
}
void OAIAuditAdvertiserResponse::setChannelsCount(const QString &channels_count) {
    m_channels_count = channels_count;
    m_channels_count_isSet = true;
}

bool OAIAuditAdvertiserResponse::is_channels_count_Set() const{
    return m_channels_count_isSet;
}

bool OAIAuditAdvertiserResponse::is_channels_count_Valid() const{
    return m_channels_count_isValid;
}

QString OAIAuditAdvertiserResponse::getNegativeKeywordListsCount() const {
    return m_negative_keyword_lists_count;
}
void OAIAuditAdvertiserResponse::setNegativeKeywordListsCount(const QString &negative_keyword_lists_count) {
    m_negative_keyword_lists_count = negative_keyword_lists_count;
    m_negative_keyword_lists_count_isSet = true;
}

bool OAIAuditAdvertiserResponse::is_negative_keyword_lists_count_Set() const{
    return m_negative_keyword_lists_count_isSet;
}

bool OAIAuditAdvertiserResponse::is_negative_keyword_lists_count_Valid() const{
    return m_negative_keyword_lists_count_isValid;
}

QString OAIAuditAdvertiserResponse::getNegativelyTargetedChannelsCount() const {
    return m_negatively_targeted_channels_count;
}
void OAIAuditAdvertiserResponse::setNegativelyTargetedChannelsCount(const QString &negatively_targeted_channels_count) {
    m_negatively_targeted_channels_count = negatively_targeted_channels_count;
    m_negatively_targeted_channels_count_isSet = true;
}

bool OAIAuditAdvertiserResponse::is_negatively_targeted_channels_count_Set() const{
    return m_negatively_targeted_channels_count_isSet;
}

bool OAIAuditAdvertiserResponse::is_negatively_targeted_channels_count_Valid() const{
    return m_negatively_targeted_channels_count_isValid;
}

QString OAIAuditAdvertiserResponse::getUsedCampaignsCount() const {
    return m_used_campaigns_count;
}
void OAIAuditAdvertiserResponse::setUsedCampaignsCount(const QString &used_campaigns_count) {
    m_used_campaigns_count = used_campaigns_count;
    m_used_campaigns_count_isSet = true;
}

bool OAIAuditAdvertiserResponse::is_used_campaigns_count_Set() const{
    return m_used_campaigns_count_isSet;
}

bool OAIAuditAdvertiserResponse::is_used_campaigns_count_Valid() const{
    return m_used_campaigns_count_isValid;
}

QString OAIAuditAdvertiserResponse::getUsedInsertionOrdersCount() const {
    return m_used_insertion_orders_count;
}
void OAIAuditAdvertiserResponse::setUsedInsertionOrdersCount(const QString &used_insertion_orders_count) {
    m_used_insertion_orders_count = used_insertion_orders_count;
    m_used_insertion_orders_count_isSet = true;
}

bool OAIAuditAdvertiserResponse::is_used_insertion_orders_count_Set() const{
    return m_used_insertion_orders_count_isSet;
}

bool OAIAuditAdvertiserResponse::is_used_insertion_orders_count_Valid() const{
    return m_used_insertion_orders_count_isValid;
}

QString OAIAuditAdvertiserResponse::getUsedLineItemsCount() const {
    return m_used_line_items_count;
}
void OAIAuditAdvertiserResponse::setUsedLineItemsCount(const QString &used_line_items_count) {
    m_used_line_items_count = used_line_items_count;
    m_used_line_items_count_isSet = true;
}

bool OAIAuditAdvertiserResponse::is_used_line_items_count_Set() const{
    return m_used_line_items_count_isSet;
}

bool OAIAuditAdvertiserResponse::is_used_line_items_count_Valid() const{
    return m_used_line_items_count_isValid;
}

bool OAIAuditAdvertiserResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_group_criteria_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_criteria_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negative_keyword_lists_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negatively_targeted_channels_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_campaigns_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_insertion_orders_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_line_items_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditAdvertiserResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
