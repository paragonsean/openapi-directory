/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventorySourceAccessors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventorySourceAccessors::OAIInventorySourceAccessors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventorySourceAccessors::OAIInventorySourceAccessors() {
    this->initializeModel();
}

OAIInventorySourceAccessors::~OAIInventorySourceAccessors() {}

void OAIInventorySourceAccessors::initializeModel() {

    m_advertisers_isSet = false;
    m_advertisers_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;
}

void OAIInventorySourceAccessors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventorySourceAccessors::fromJsonObject(QJsonObject json) {

    m_advertisers_isValid = ::OpenAPI::fromJsonValue(m_advertisers, json[QString("advertisers")]);
    m_advertisers_isSet = !json[QString("advertisers")].isNull() && m_advertisers_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;
}

QString OAIInventorySourceAccessors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventorySourceAccessors::asJsonObject() const {
    QJsonObject obj;
    if (m_advertisers.isSet()) {
        obj.insert(QString("advertisers"), ::OpenAPI::toJsonValue(m_advertisers));
    }
    if (m_partner.isSet()) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    return obj;
}

OAIInventorySourceAccessorsAdvertiserAccessors OAIInventorySourceAccessors::getAdvertisers() const {
    return m_advertisers;
}
void OAIInventorySourceAccessors::setAdvertisers(const OAIInventorySourceAccessorsAdvertiserAccessors &advertisers) {
    m_advertisers = advertisers;
    m_advertisers_isSet = true;
}

bool OAIInventorySourceAccessors::is_advertisers_Set() const{
    return m_advertisers_isSet;
}

bool OAIInventorySourceAccessors::is_advertisers_Valid() const{
    return m_advertisers_isValid;
}

OAIInventorySourceAccessorsPartnerAccessor OAIInventorySourceAccessors::getPartner() const {
    return m_partner;
}
void OAIInventorySourceAccessors::setPartner(const OAIInventorySourceAccessorsPartnerAccessor &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAIInventorySourceAccessors::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAIInventorySourceAccessors::is_partner_Valid() const{
    return m_partner_isValid;
}

bool OAIInventorySourceAccessors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertisers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventorySourceAccessors::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
