/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoPerformanceAd.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoPerformanceAd::OAIVideoPerformanceAd(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoPerformanceAd::OAIVideoPerformanceAd() {
    this->initializeModel();
}

OAIVideoPerformanceAd::~OAIVideoPerformanceAd() {}

void OAIVideoPerformanceAd::initializeModel() {

    m_action_button_labels_isSet = false;
    m_action_button_labels_isValid = false;

    m_companion_banners_isSet = false;
    m_companion_banners_isValid = false;

    m_custom_parameters_isSet = false;
    m_custom_parameters_isValid = false;

    m_descriptions_isSet = false;
    m_descriptions_isValid = false;

    m_display_url_breadcrumb1_isSet = false;
    m_display_url_breadcrumb1_isValid = false;

    m_display_url_breadcrumb2_isSet = false;
    m_display_url_breadcrumb2_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_final_url_isSet = false;
    m_final_url_isValid = false;

    m_headlines_isSet = false;
    m_headlines_isValid = false;

    m_long_headlines_isSet = false;
    m_long_headlines_isValid = false;

    m_tracking_url_isSet = false;
    m_tracking_url_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;
}

void OAIVideoPerformanceAd::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoPerformanceAd::fromJsonObject(QJsonObject json) {

    m_action_button_labels_isValid = ::OpenAPI::fromJsonValue(m_action_button_labels, json[QString("actionButtonLabels")]);
    m_action_button_labels_isSet = !json[QString("actionButtonLabels")].isNull() && m_action_button_labels_isValid;

    m_companion_banners_isValid = ::OpenAPI::fromJsonValue(m_companion_banners, json[QString("companionBanners")]);
    m_companion_banners_isSet = !json[QString("companionBanners")].isNull() && m_companion_banners_isValid;

    m_custom_parameters_isValid = ::OpenAPI::fromJsonValue(m_custom_parameters, json[QString("customParameters")]);
    m_custom_parameters_isSet = !json[QString("customParameters")].isNull() && m_custom_parameters_isValid;

    m_descriptions_isValid = ::OpenAPI::fromJsonValue(m_descriptions, json[QString("descriptions")]);
    m_descriptions_isSet = !json[QString("descriptions")].isNull() && m_descriptions_isValid;

    m_display_url_breadcrumb1_isValid = ::OpenAPI::fromJsonValue(m_display_url_breadcrumb1, json[QString("displayUrlBreadcrumb1")]);
    m_display_url_breadcrumb1_isSet = !json[QString("displayUrlBreadcrumb1")].isNull() && m_display_url_breadcrumb1_isValid;

    m_display_url_breadcrumb2_isValid = ::OpenAPI::fromJsonValue(m_display_url_breadcrumb2, json[QString("displayUrlBreadcrumb2")]);
    m_display_url_breadcrumb2_isSet = !json[QString("displayUrlBreadcrumb2")].isNull() && m_display_url_breadcrumb2_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_final_url_isValid = ::OpenAPI::fromJsonValue(m_final_url, json[QString("finalUrl")]);
    m_final_url_isSet = !json[QString("finalUrl")].isNull() && m_final_url_isValid;

    m_headlines_isValid = ::OpenAPI::fromJsonValue(m_headlines, json[QString("headlines")]);
    m_headlines_isSet = !json[QString("headlines")].isNull() && m_headlines_isValid;

    m_long_headlines_isValid = ::OpenAPI::fromJsonValue(m_long_headlines, json[QString("longHeadlines")]);
    m_long_headlines_isSet = !json[QString("longHeadlines")].isNull() && m_long_headlines_isValid;

    m_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_tracking_url, json[QString("trackingUrl")]);
    m_tracking_url_isSet = !json[QString("trackingUrl")].isNull() && m_tracking_url_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;
}

QString OAIVideoPerformanceAd::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoPerformanceAd::asJsonObject() const {
    QJsonObject obj;
    if (m_action_button_labels.size() > 0) {
        obj.insert(QString("actionButtonLabels"), ::OpenAPI::toJsonValue(m_action_button_labels));
    }
    if (m_companion_banners.size() > 0) {
        obj.insert(QString("companionBanners"), ::OpenAPI::toJsonValue(m_companion_banners));
    }
    if (m_custom_parameters.size() > 0) {
        obj.insert(QString("customParameters"), ::OpenAPI::toJsonValue(m_custom_parameters));
    }
    if (m_descriptions.size() > 0) {
        obj.insert(QString("descriptions"), ::OpenAPI::toJsonValue(m_descriptions));
    }
    if (m_display_url_breadcrumb1_isSet) {
        obj.insert(QString("displayUrlBreadcrumb1"), ::OpenAPI::toJsonValue(m_display_url_breadcrumb1));
    }
    if (m_display_url_breadcrumb2_isSet) {
        obj.insert(QString("displayUrlBreadcrumb2"), ::OpenAPI::toJsonValue(m_display_url_breadcrumb2));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_final_url_isSet) {
        obj.insert(QString("finalUrl"), ::OpenAPI::toJsonValue(m_final_url));
    }
    if (m_headlines.size() > 0) {
        obj.insert(QString("headlines"), ::OpenAPI::toJsonValue(m_headlines));
    }
    if (m_long_headlines.size() > 0) {
        obj.insert(QString("longHeadlines"), ::OpenAPI::toJsonValue(m_long_headlines));
    }
    if (m_tracking_url_isSet) {
        obj.insert(QString("trackingUrl"), ::OpenAPI::toJsonValue(m_tracking_url));
    }
    if (m_videos.size() > 0) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    return obj;
}

QList<QString> OAIVideoPerformanceAd::getActionButtonLabels() const {
    return m_action_button_labels;
}
void OAIVideoPerformanceAd::setActionButtonLabels(const QList<QString> &action_button_labels) {
    m_action_button_labels = action_button_labels;
    m_action_button_labels_isSet = true;
}

bool OAIVideoPerformanceAd::is_action_button_labels_Set() const{
    return m_action_button_labels_isSet;
}

bool OAIVideoPerformanceAd::is_action_button_labels_Valid() const{
    return m_action_button_labels_isValid;
}

QList<OAIImageAsset> OAIVideoPerformanceAd::getCompanionBanners() const {
    return m_companion_banners;
}
void OAIVideoPerformanceAd::setCompanionBanners(const QList<OAIImageAsset> &companion_banners) {
    m_companion_banners = companion_banners;
    m_companion_banners_isSet = true;
}

bool OAIVideoPerformanceAd::is_companion_banners_Set() const{
    return m_companion_banners_isSet;
}

bool OAIVideoPerformanceAd::is_companion_banners_Valid() const{
    return m_companion_banners_isValid;
}

QMap<QString, QString> OAIVideoPerformanceAd::getCustomParameters() const {
    return m_custom_parameters;
}
void OAIVideoPerformanceAd::setCustomParameters(const QMap<QString, QString> &custom_parameters) {
    m_custom_parameters = custom_parameters;
    m_custom_parameters_isSet = true;
}

bool OAIVideoPerformanceAd::is_custom_parameters_Set() const{
    return m_custom_parameters_isSet;
}

bool OAIVideoPerformanceAd::is_custom_parameters_Valid() const{
    return m_custom_parameters_isValid;
}

QList<QString> OAIVideoPerformanceAd::getDescriptions() const {
    return m_descriptions;
}
void OAIVideoPerformanceAd::setDescriptions(const QList<QString> &descriptions) {
    m_descriptions = descriptions;
    m_descriptions_isSet = true;
}

bool OAIVideoPerformanceAd::is_descriptions_Set() const{
    return m_descriptions_isSet;
}

bool OAIVideoPerformanceAd::is_descriptions_Valid() const{
    return m_descriptions_isValid;
}

QString OAIVideoPerformanceAd::getDisplayUrlBreadcrumb1() const {
    return m_display_url_breadcrumb1;
}
void OAIVideoPerformanceAd::setDisplayUrlBreadcrumb1(const QString &display_url_breadcrumb1) {
    m_display_url_breadcrumb1 = display_url_breadcrumb1;
    m_display_url_breadcrumb1_isSet = true;
}

bool OAIVideoPerformanceAd::is_display_url_breadcrumb1_Set() const{
    return m_display_url_breadcrumb1_isSet;
}

bool OAIVideoPerformanceAd::is_display_url_breadcrumb1_Valid() const{
    return m_display_url_breadcrumb1_isValid;
}

QString OAIVideoPerformanceAd::getDisplayUrlBreadcrumb2() const {
    return m_display_url_breadcrumb2;
}
void OAIVideoPerformanceAd::setDisplayUrlBreadcrumb2(const QString &display_url_breadcrumb2) {
    m_display_url_breadcrumb2 = display_url_breadcrumb2;
    m_display_url_breadcrumb2_isSet = true;
}

bool OAIVideoPerformanceAd::is_display_url_breadcrumb2_Set() const{
    return m_display_url_breadcrumb2_isSet;
}

bool OAIVideoPerformanceAd::is_display_url_breadcrumb2_Valid() const{
    return m_display_url_breadcrumb2_isValid;
}

QString OAIVideoPerformanceAd::getDomain() const {
    return m_domain;
}
void OAIVideoPerformanceAd::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIVideoPerformanceAd::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIVideoPerformanceAd::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIVideoPerformanceAd::getFinalUrl() const {
    return m_final_url;
}
void OAIVideoPerformanceAd::setFinalUrl(const QString &final_url) {
    m_final_url = final_url;
    m_final_url_isSet = true;
}

bool OAIVideoPerformanceAd::is_final_url_Set() const{
    return m_final_url_isSet;
}

bool OAIVideoPerformanceAd::is_final_url_Valid() const{
    return m_final_url_isValid;
}

QList<QString> OAIVideoPerformanceAd::getHeadlines() const {
    return m_headlines;
}
void OAIVideoPerformanceAd::setHeadlines(const QList<QString> &headlines) {
    m_headlines = headlines;
    m_headlines_isSet = true;
}

bool OAIVideoPerformanceAd::is_headlines_Set() const{
    return m_headlines_isSet;
}

bool OAIVideoPerformanceAd::is_headlines_Valid() const{
    return m_headlines_isValid;
}

QList<QString> OAIVideoPerformanceAd::getLongHeadlines() const {
    return m_long_headlines;
}
void OAIVideoPerformanceAd::setLongHeadlines(const QList<QString> &long_headlines) {
    m_long_headlines = long_headlines;
    m_long_headlines_isSet = true;
}

bool OAIVideoPerformanceAd::is_long_headlines_Set() const{
    return m_long_headlines_isSet;
}

bool OAIVideoPerformanceAd::is_long_headlines_Valid() const{
    return m_long_headlines_isValid;
}

QString OAIVideoPerformanceAd::getTrackingUrl() const {
    return m_tracking_url;
}
void OAIVideoPerformanceAd::setTrackingUrl(const QString &tracking_url) {
    m_tracking_url = tracking_url;
    m_tracking_url_isSet = true;
}

bool OAIVideoPerformanceAd::is_tracking_url_Set() const{
    return m_tracking_url_isSet;
}

bool OAIVideoPerformanceAd::is_tracking_url_Valid() const{
    return m_tracking_url_isValid;
}

QList<OAIYoutubeVideoDetails> OAIVideoPerformanceAd::getVideos() const {
    return m_videos;
}
void OAIVideoPerformanceAd::setVideos(const QList<OAIYoutubeVideoDetails> &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAIVideoPerformanceAd::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAIVideoPerformanceAd::is_videos_Valid() const{
    return m_videos_isValid;
}

bool OAIVideoPerformanceAd::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_button_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_companion_banners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_descriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_url_breadcrumb1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_url_breadcrumb2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headlines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_headlines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoPerformanceAd::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
