/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetFrequency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetFrequency::OAITargetFrequency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetFrequency::OAITargetFrequency() {
    this->initializeModel();
}

OAITargetFrequency::~OAITargetFrequency() {}

void OAITargetFrequency::initializeModel() {

    m_target_count_isSet = false;
    m_target_count_isValid = false;

    m_time_unit_isSet = false;
    m_time_unit_isValid = false;

    m_time_unit_count_isSet = false;
    m_time_unit_count_isValid = false;
}

void OAITargetFrequency::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetFrequency::fromJsonObject(QJsonObject json) {

    m_target_count_isValid = ::OpenAPI::fromJsonValue(m_target_count, json[QString("targetCount")]);
    m_target_count_isSet = !json[QString("targetCount")].isNull() && m_target_count_isValid;

    m_time_unit_isValid = ::OpenAPI::fromJsonValue(m_time_unit, json[QString("timeUnit")]);
    m_time_unit_isSet = !json[QString("timeUnit")].isNull() && m_time_unit_isValid;

    m_time_unit_count_isValid = ::OpenAPI::fromJsonValue(m_time_unit_count, json[QString("timeUnitCount")]);
    m_time_unit_count_isSet = !json[QString("timeUnitCount")].isNull() && m_time_unit_count_isValid;
}

QString OAITargetFrequency::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetFrequency::asJsonObject() const {
    QJsonObject obj;
    if (m_target_count_isSet) {
        obj.insert(QString("targetCount"), ::OpenAPI::toJsonValue(m_target_count));
    }
    if (m_time_unit_isSet) {
        obj.insert(QString("timeUnit"), ::OpenAPI::toJsonValue(m_time_unit));
    }
    if (m_time_unit_count_isSet) {
        obj.insert(QString("timeUnitCount"), ::OpenAPI::toJsonValue(m_time_unit_count));
    }
    return obj;
}

QString OAITargetFrequency::getTargetCount() const {
    return m_target_count;
}
void OAITargetFrequency::setTargetCount(const QString &target_count) {
    m_target_count = target_count;
    m_target_count_isSet = true;
}

bool OAITargetFrequency::is_target_count_Set() const{
    return m_target_count_isSet;
}

bool OAITargetFrequency::is_target_count_Valid() const{
    return m_target_count_isValid;
}

QString OAITargetFrequency::getTimeUnit() const {
    return m_time_unit;
}
void OAITargetFrequency::setTimeUnit(const QString &time_unit) {
    m_time_unit = time_unit;
    m_time_unit_isSet = true;
}

bool OAITargetFrequency::is_time_unit_Set() const{
    return m_time_unit_isSet;
}

bool OAITargetFrequency::is_time_unit_Valid() const{
    return m_time_unit_isValid;
}

qint32 OAITargetFrequency::getTimeUnitCount() const {
    return m_time_unit_count;
}
void OAITargetFrequency::setTimeUnitCount(const qint32 &time_unit_count) {
    m_time_unit_count = time_unit_count;
    m_time_unit_count_isSet = true;
}

bool OAITargetFrequency::is_time_unit_count_Set() const{
    return m_time_unit_count_isSet;
}

bool OAITargetFrequency::is_time_unit_count_Valid() const{
    return m_time_unit_count_isValid;
}

bool OAITargetFrequency::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_unit_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetFrequency::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
