/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManualTrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManualTrigger::OAIManualTrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManualTrigger::OAIManualTrigger() {
    this->initializeModel();
}

OAIManualTrigger::~OAIManualTrigger() {}

void OAIManualTrigger::initializeModel() {

    m_activation_duration_minutes_isSet = false;
    m_activation_duration_minutes_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_latest_activation_time_isSet = false;
    m_latest_activation_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_trigger_id_isSet = false;
    m_trigger_id_isValid = false;
}

void OAIManualTrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManualTrigger::fromJsonObject(QJsonObject json) {

    m_activation_duration_minutes_isValid = ::OpenAPI::fromJsonValue(m_activation_duration_minutes, json[QString("activationDurationMinutes")]);
    m_activation_duration_minutes_isSet = !json[QString("activationDurationMinutes")].isNull() && m_activation_duration_minutes_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_latest_activation_time_isValid = ::OpenAPI::fromJsonValue(m_latest_activation_time, json[QString("latestActivationTime")]);
    m_latest_activation_time_isSet = !json[QString("latestActivationTime")].isNull() && m_latest_activation_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_trigger_id_isValid = ::OpenAPI::fromJsonValue(m_trigger_id, json[QString("triggerId")]);
    m_trigger_id_isSet = !json[QString("triggerId")].isNull() && m_trigger_id_isValid;
}

QString OAIManualTrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManualTrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_duration_minutes_isSet) {
        obj.insert(QString("activationDurationMinutes"), ::OpenAPI::toJsonValue(m_activation_duration_minutes));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_latest_activation_time_isSet) {
        obj.insert(QString("latestActivationTime"), ::OpenAPI::toJsonValue(m_latest_activation_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_trigger_id_isSet) {
        obj.insert(QString("triggerId"), ::OpenAPI::toJsonValue(m_trigger_id));
    }
    return obj;
}

QString OAIManualTrigger::getActivationDurationMinutes() const {
    return m_activation_duration_minutes;
}
void OAIManualTrigger::setActivationDurationMinutes(const QString &activation_duration_minutes) {
    m_activation_duration_minutes = activation_duration_minutes;
    m_activation_duration_minutes_isSet = true;
}

bool OAIManualTrigger::is_activation_duration_minutes_Set() const{
    return m_activation_duration_minutes_isSet;
}

bool OAIManualTrigger::is_activation_duration_minutes_Valid() const{
    return m_activation_duration_minutes_isValid;
}

QString OAIManualTrigger::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIManualTrigger::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIManualTrigger::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIManualTrigger::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

QString OAIManualTrigger::getDisplayName() const {
    return m_display_name;
}
void OAIManualTrigger::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIManualTrigger::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIManualTrigger::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIManualTrigger::getLatestActivationTime() const {
    return m_latest_activation_time;
}
void OAIManualTrigger::setLatestActivationTime(const QString &latest_activation_time) {
    m_latest_activation_time = latest_activation_time;
    m_latest_activation_time_isSet = true;
}

bool OAIManualTrigger::is_latest_activation_time_Set() const{
    return m_latest_activation_time_isSet;
}

bool OAIManualTrigger::is_latest_activation_time_Valid() const{
    return m_latest_activation_time_isValid;
}

QString OAIManualTrigger::getName() const {
    return m_name;
}
void OAIManualTrigger::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIManualTrigger::is_name_Set() const{
    return m_name_isSet;
}

bool OAIManualTrigger::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIManualTrigger::getState() const {
    return m_state;
}
void OAIManualTrigger::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIManualTrigger::is_state_Set() const{
    return m_state_isSet;
}

bool OAIManualTrigger::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIManualTrigger::getTriggerId() const {
    return m_trigger_id;
}
void OAIManualTrigger::setTriggerId(const QString &trigger_id) {
    m_trigger_id = trigger_id;
    m_trigger_id_isSet = true;
}

bool OAIManualTrigger::is_trigger_id_Set() const{
    return m_trigger_id_isSet;
}

bool OAIManualTrigger::is_trigger_id_Valid() const{
    return m_trigger_id_isValid;
}

bool OAIManualTrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_duration_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_activation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManualTrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
