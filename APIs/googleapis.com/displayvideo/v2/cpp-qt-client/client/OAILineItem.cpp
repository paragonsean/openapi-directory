/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineItem::OAILineItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineItem::OAILineItem() {
    this->initializeModel();
}

OAILineItem::~OAILineItem() {}

void OAILineItem::initializeModel() {

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_bid_strategy_isSet = false;
    m_bid_strategy_isValid = false;

    m_budget_isSet = false;
    m_budget_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_conversion_counting_isSet = false;
    m_conversion_counting_isValid = false;

    m_creative_ids_isSet = false;
    m_creative_ids_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_entity_status_isSet = false;
    m_entity_status_isValid = false;

    m_exclude_new_exchanges_isSet = false;
    m_exclude_new_exchanges_isValid = false;

    m_flight_isSet = false;
    m_flight_isValid = false;

    m_frequency_cap_isSet = false;
    m_frequency_cap_isValid = false;

    m_insertion_order_id_isSet = false;
    m_insertion_order_id_isValid = false;

    m_integration_details_isSet = false;
    m_integration_details_isValid = false;

    m_line_item_id_isSet = false;
    m_line_item_id_isValid = false;

    m_line_item_type_isSet = false;
    m_line_item_type_isValid = false;

    m_mobile_app_isSet = false;
    m_mobile_app_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pacing_isSet = false;
    m_pacing_isValid = false;

    m_partner_costs_isSet = false;
    m_partner_costs_isValid = false;

    m_partner_revenue_model_isSet = false;
    m_partner_revenue_model_isValid = false;

    m_reservation_type_isSet = false;
    m_reservation_type_isValid = false;

    m_targeting_expansion_isSet = false;
    m_targeting_expansion_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_warning_messages_isSet = false;
    m_warning_messages_isValid = false;

    m_youtube_and_partners_settings_isSet = false;
    m_youtube_and_partners_settings_isValid = false;
}

void OAILineItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineItem::fromJsonObject(QJsonObject json) {

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_bid_strategy_isValid = ::OpenAPI::fromJsonValue(m_bid_strategy, json[QString("bidStrategy")]);
    m_bid_strategy_isSet = !json[QString("bidStrategy")].isNull() && m_bid_strategy_isValid;

    m_budget_isValid = ::OpenAPI::fromJsonValue(m_budget, json[QString("budget")]);
    m_budget_isSet = !json[QString("budget")].isNull() && m_budget_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaignId")]);
    m_campaign_id_isSet = !json[QString("campaignId")].isNull() && m_campaign_id_isValid;

    m_conversion_counting_isValid = ::OpenAPI::fromJsonValue(m_conversion_counting, json[QString("conversionCounting")]);
    m_conversion_counting_isSet = !json[QString("conversionCounting")].isNull() && m_conversion_counting_isValid;

    m_creative_ids_isValid = ::OpenAPI::fromJsonValue(m_creative_ids, json[QString("creativeIds")]);
    m_creative_ids_isSet = !json[QString("creativeIds")].isNull() && m_creative_ids_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_entity_status_isValid = ::OpenAPI::fromJsonValue(m_entity_status, json[QString("entityStatus")]);
    m_entity_status_isSet = !json[QString("entityStatus")].isNull() && m_entity_status_isValid;

    m_exclude_new_exchanges_isValid = ::OpenAPI::fromJsonValue(m_exclude_new_exchanges, json[QString("excludeNewExchanges")]);
    m_exclude_new_exchanges_isSet = !json[QString("excludeNewExchanges")].isNull() && m_exclude_new_exchanges_isValid;

    m_flight_isValid = ::OpenAPI::fromJsonValue(m_flight, json[QString("flight")]);
    m_flight_isSet = !json[QString("flight")].isNull() && m_flight_isValid;

    m_frequency_cap_isValid = ::OpenAPI::fromJsonValue(m_frequency_cap, json[QString("frequencyCap")]);
    m_frequency_cap_isSet = !json[QString("frequencyCap")].isNull() && m_frequency_cap_isValid;

    m_insertion_order_id_isValid = ::OpenAPI::fromJsonValue(m_insertion_order_id, json[QString("insertionOrderId")]);
    m_insertion_order_id_isSet = !json[QString("insertionOrderId")].isNull() && m_insertion_order_id_isValid;

    m_integration_details_isValid = ::OpenAPI::fromJsonValue(m_integration_details, json[QString("integrationDetails")]);
    m_integration_details_isSet = !json[QString("integrationDetails")].isNull() && m_integration_details_isValid;

    m_line_item_id_isValid = ::OpenAPI::fromJsonValue(m_line_item_id, json[QString("lineItemId")]);
    m_line_item_id_isSet = !json[QString("lineItemId")].isNull() && m_line_item_id_isValid;

    m_line_item_type_isValid = ::OpenAPI::fromJsonValue(m_line_item_type, json[QString("lineItemType")]);
    m_line_item_type_isSet = !json[QString("lineItemType")].isNull() && m_line_item_type_isValid;

    m_mobile_app_isValid = ::OpenAPI::fromJsonValue(m_mobile_app, json[QString("mobileApp")]);
    m_mobile_app_isSet = !json[QString("mobileApp")].isNull() && m_mobile_app_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pacing_isValid = ::OpenAPI::fromJsonValue(m_pacing, json[QString("pacing")]);
    m_pacing_isSet = !json[QString("pacing")].isNull() && m_pacing_isValid;

    m_partner_costs_isValid = ::OpenAPI::fromJsonValue(m_partner_costs, json[QString("partnerCosts")]);
    m_partner_costs_isSet = !json[QString("partnerCosts")].isNull() && m_partner_costs_isValid;

    m_partner_revenue_model_isValid = ::OpenAPI::fromJsonValue(m_partner_revenue_model, json[QString("partnerRevenueModel")]);
    m_partner_revenue_model_isSet = !json[QString("partnerRevenueModel")].isNull() && m_partner_revenue_model_isValid;

    m_reservation_type_isValid = ::OpenAPI::fromJsonValue(m_reservation_type, json[QString("reservationType")]);
    m_reservation_type_isSet = !json[QString("reservationType")].isNull() && m_reservation_type_isValid;

    m_targeting_expansion_isValid = ::OpenAPI::fromJsonValue(m_targeting_expansion, json[QString("targetingExpansion")]);
    m_targeting_expansion_isSet = !json[QString("targetingExpansion")].isNull() && m_targeting_expansion_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_warning_messages_isValid = ::OpenAPI::fromJsonValue(m_warning_messages, json[QString("warningMessages")]);
    m_warning_messages_isSet = !json[QString("warningMessages")].isNull() && m_warning_messages_isValid;

    m_youtube_and_partners_settings_isValid = ::OpenAPI::fromJsonValue(m_youtube_and_partners_settings, json[QString("youtubeAndPartnersSettings")]);
    m_youtube_and_partners_settings_isSet = !json[QString("youtubeAndPartnersSettings")].isNull() && m_youtube_and_partners_settings_isValid;
}

QString OAILineItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineItem::asJsonObject() const {
    QJsonObject obj;
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_bid_strategy.isSet()) {
        obj.insert(QString("bidStrategy"), ::OpenAPI::toJsonValue(m_bid_strategy));
    }
    if (m_budget.isSet()) {
        obj.insert(QString("budget"), ::OpenAPI::toJsonValue(m_budget));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_conversion_counting.isSet()) {
        obj.insert(QString("conversionCounting"), ::OpenAPI::toJsonValue(m_conversion_counting));
    }
    if (m_creative_ids.size() > 0) {
        obj.insert(QString("creativeIds"), ::OpenAPI::toJsonValue(m_creative_ids));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_entity_status_isSet) {
        obj.insert(QString("entityStatus"), ::OpenAPI::toJsonValue(m_entity_status));
    }
    if (m_exclude_new_exchanges_isSet) {
        obj.insert(QString("excludeNewExchanges"), ::OpenAPI::toJsonValue(m_exclude_new_exchanges));
    }
    if (m_flight.isSet()) {
        obj.insert(QString("flight"), ::OpenAPI::toJsonValue(m_flight));
    }
    if (m_frequency_cap.isSet()) {
        obj.insert(QString("frequencyCap"), ::OpenAPI::toJsonValue(m_frequency_cap));
    }
    if (m_insertion_order_id_isSet) {
        obj.insert(QString("insertionOrderId"), ::OpenAPI::toJsonValue(m_insertion_order_id));
    }
    if (m_integration_details.isSet()) {
        obj.insert(QString("integrationDetails"), ::OpenAPI::toJsonValue(m_integration_details));
    }
    if (m_line_item_id_isSet) {
        obj.insert(QString("lineItemId"), ::OpenAPI::toJsonValue(m_line_item_id));
    }
    if (m_line_item_type_isSet) {
        obj.insert(QString("lineItemType"), ::OpenAPI::toJsonValue(m_line_item_type));
    }
    if (m_mobile_app.isSet()) {
        obj.insert(QString("mobileApp"), ::OpenAPI::toJsonValue(m_mobile_app));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pacing.isSet()) {
        obj.insert(QString("pacing"), ::OpenAPI::toJsonValue(m_pacing));
    }
    if (m_partner_costs.size() > 0) {
        obj.insert(QString("partnerCosts"), ::OpenAPI::toJsonValue(m_partner_costs));
    }
    if (m_partner_revenue_model.isSet()) {
        obj.insert(QString("partnerRevenueModel"), ::OpenAPI::toJsonValue(m_partner_revenue_model));
    }
    if (m_reservation_type_isSet) {
        obj.insert(QString("reservationType"), ::OpenAPI::toJsonValue(m_reservation_type));
    }
    if (m_targeting_expansion.isSet()) {
        obj.insert(QString("targetingExpansion"), ::OpenAPI::toJsonValue(m_targeting_expansion));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_warning_messages.size() > 0) {
        obj.insert(QString("warningMessages"), ::OpenAPI::toJsonValue(m_warning_messages));
    }
    if (m_youtube_and_partners_settings.isSet()) {
        obj.insert(QString("youtubeAndPartnersSettings"), ::OpenAPI::toJsonValue(m_youtube_and_partners_settings));
    }
    return obj;
}

QString OAILineItem::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAILineItem::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAILineItem::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAILineItem::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

OAIBiddingStrategy OAILineItem::getBidStrategy() const {
    return m_bid_strategy;
}
void OAILineItem::setBidStrategy(const OAIBiddingStrategy &bid_strategy) {
    m_bid_strategy = bid_strategy;
    m_bid_strategy_isSet = true;
}

bool OAILineItem::is_bid_strategy_Set() const{
    return m_bid_strategy_isSet;
}

bool OAILineItem::is_bid_strategy_Valid() const{
    return m_bid_strategy_isValid;
}

OAILineItemBudget OAILineItem::getBudget() const {
    return m_budget;
}
void OAILineItem::setBudget(const OAILineItemBudget &budget) {
    m_budget = budget;
    m_budget_isSet = true;
}

bool OAILineItem::is_budget_Set() const{
    return m_budget_isSet;
}

bool OAILineItem::is_budget_Valid() const{
    return m_budget_isValid;
}

QString OAILineItem::getCampaignId() const {
    return m_campaign_id;
}
void OAILineItem::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAILineItem::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAILineItem::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

OAIConversionCountingConfig OAILineItem::getConversionCounting() const {
    return m_conversion_counting;
}
void OAILineItem::setConversionCounting(const OAIConversionCountingConfig &conversion_counting) {
    m_conversion_counting = conversion_counting;
    m_conversion_counting_isSet = true;
}

bool OAILineItem::is_conversion_counting_Set() const{
    return m_conversion_counting_isSet;
}

bool OAILineItem::is_conversion_counting_Valid() const{
    return m_conversion_counting_isValid;
}

QList<QString> OAILineItem::getCreativeIds() const {
    return m_creative_ids;
}
void OAILineItem::setCreativeIds(const QList<QString> &creative_ids) {
    m_creative_ids = creative_ids;
    m_creative_ids_isSet = true;
}

bool OAILineItem::is_creative_ids_Set() const{
    return m_creative_ids_isSet;
}

bool OAILineItem::is_creative_ids_Valid() const{
    return m_creative_ids_isValid;
}

QString OAILineItem::getDisplayName() const {
    return m_display_name;
}
void OAILineItem::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAILineItem::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAILineItem::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAILineItem::getEntityStatus() const {
    return m_entity_status;
}
void OAILineItem::setEntityStatus(const QString &entity_status) {
    m_entity_status = entity_status;
    m_entity_status_isSet = true;
}

bool OAILineItem::is_entity_status_Set() const{
    return m_entity_status_isSet;
}

bool OAILineItem::is_entity_status_Valid() const{
    return m_entity_status_isValid;
}

bool OAILineItem::isExcludeNewExchanges() const {
    return m_exclude_new_exchanges;
}
void OAILineItem::setExcludeNewExchanges(const bool &exclude_new_exchanges) {
    m_exclude_new_exchanges = exclude_new_exchanges;
    m_exclude_new_exchanges_isSet = true;
}

bool OAILineItem::is_exclude_new_exchanges_Set() const{
    return m_exclude_new_exchanges_isSet;
}

bool OAILineItem::is_exclude_new_exchanges_Valid() const{
    return m_exclude_new_exchanges_isValid;
}

OAILineItemFlight OAILineItem::getFlight() const {
    return m_flight;
}
void OAILineItem::setFlight(const OAILineItemFlight &flight) {
    m_flight = flight;
    m_flight_isSet = true;
}

bool OAILineItem::is_flight_Set() const{
    return m_flight_isSet;
}

bool OAILineItem::is_flight_Valid() const{
    return m_flight_isValid;
}

OAIFrequencyCap OAILineItem::getFrequencyCap() const {
    return m_frequency_cap;
}
void OAILineItem::setFrequencyCap(const OAIFrequencyCap &frequency_cap) {
    m_frequency_cap = frequency_cap;
    m_frequency_cap_isSet = true;
}

bool OAILineItem::is_frequency_cap_Set() const{
    return m_frequency_cap_isSet;
}

bool OAILineItem::is_frequency_cap_Valid() const{
    return m_frequency_cap_isValid;
}

QString OAILineItem::getInsertionOrderId() const {
    return m_insertion_order_id;
}
void OAILineItem::setInsertionOrderId(const QString &insertion_order_id) {
    m_insertion_order_id = insertion_order_id;
    m_insertion_order_id_isSet = true;
}

bool OAILineItem::is_insertion_order_id_Set() const{
    return m_insertion_order_id_isSet;
}

bool OAILineItem::is_insertion_order_id_Valid() const{
    return m_insertion_order_id_isValid;
}

OAIIntegrationDetails OAILineItem::getIntegrationDetails() const {
    return m_integration_details;
}
void OAILineItem::setIntegrationDetails(const OAIIntegrationDetails &integration_details) {
    m_integration_details = integration_details;
    m_integration_details_isSet = true;
}

bool OAILineItem::is_integration_details_Set() const{
    return m_integration_details_isSet;
}

bool OAILineItem::is_integration_details_Valid() const{
    return m_integration_details_isValid;
}

QString OAILineItem::getLineItemId() const {
    return m_line_item_id;
}
void OAILineItem::setLineItemId(const QString &line_item_id) {
    m_line_item_id = line_item_id;
    m_line_item_id_isSet = true;
}

bool OAILineItem::is_line_item_id_Set() const{
    return m_line_item_id_isSet;
}

bool OAILineItem::is_line_item_id_Valid() const{
    return m_line_item_id_isValid;
}

QString OAILineItem::getLineItemType() const {
    return m_line_item_type;
}
void OAILineItem::setLineItemType(const QString &line_item_type) {
    m_line_item_type = line_item_type;
    m_line_item_type_isSet = true;
}

bool OAILineItem::is_line_item_type_Set() const{
    return m_line_item_type_isSet;
}

bool OAILineItem::is_line_item_type_Valid() const{
    return m_line_item_type_isValid;
}

OAIMobileApp OAILineItem::getMobileApp() const {
    return m_mobile_app;
}
void OAILineItem::setMobileApp(const OAIMobileApp &mobile_app) {
    m_mobile_app = mobile_app;
    m_mobile_app_isSet = true;
}

bool OAILineItem::is_mobile_app_Set() const{
    return m_mobile_app_isSet;
}

bool OAILineItem::is_mobile_app_Valid() const{
    return m_mobile_app_isValid;
}

QString OAILineItem::getName() const {
    return m_name;
}
void OAILineItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILineItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAILineItem::is_name_Valid() const{
    return m_name_isValid;
}

OAIPacing OAILineItem::getPacing() const {
    return m_pacing;
}
void OAILineItem::setPacing(const OAIPacing &pacing) {
    m_pacing = pacing;
    m_pacing_isSet = true;
}

bool OAILineItem::is_pacing_Set() const{
    return m_pacing_isSet;
}

bool OAILineItem::is_pacing_Valid() const{
    return m_pacing_isValid;
}

QList<OAIPartnerCost> OAILineItem::getPartnerCosts() const {
    return m_partner_costs;
}
void OAILineItem::setPartnerCosts(const QList<OAIPartnerCost> &partner_costs) {
    m_partner_costs = partner_costs;
    m_partner_costs_isSet = true;
}

bool OAILineItem::is_partner_costs_Set() const{
    return m_partner_costs_isSet;
}

bool OAILineItem::is_partner_costs_Valid() const{
    return m_partner_costs_isValid;
}

OAIPartnerRevenueModel OAILineItem::getPartnerRevenueModel() const {
    return m_partner_revenue_model;
}
void OAILineItem::setPartnerRevenueModel(const OAIPartnerRevenueModel &partner_revenue_model) {
    m_partner_revenue_model = partner_revenue_model;
    m_partner_revenue_model_isSet = true;
}

bool OAILineItem::is_partner_revenue_model_Set() const{
    return m_partner_revenue_model_isSet;
}

bool OAILineItem::is_partner_revenue_model_Valid() const{
    return m_partner_revenue_model_isValid;
}

QString OAILineItem::getReservationType() const {
    return m_reservation_type;
}
void OAILineItem::setReservationType(const QString &reservation_type) {
    m_reservation_type = reservation_type;
    m_reservation_type_isSet = true;
}

bool OAILineItem::is_reservation_type_Set() const{
    return m_reservation_type_isSet;
}

bool OAILineItem::is_reservation_type_Valid() const{
    return m_reservation_type_isValid;
}

OAITargetingExpansionConfig OAILineItem::getTargetingExpansion() const {
    return m_targeting_expansion;
}
void OAILineItem::setTargetingExpansion(const OAITargetingExpansionConfig &targeting_expansion) {
    m_targeting_expansion = targeting_expansion;
    m_targeting_expansion_isSet = true;
}

bool OAILineItem::is_targeting_expansion_Set() const{
    return m_targeting_expansion_isSet;
}

bool OAILineItem::is_targeting_expansion_Valid() const{
    return m_targeting_expansion_isValid;
}

QString OAILineItem::getUpdateTime() const {
    return m_update_time;
}
void OAILineItem::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAILineItem::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAILineItem::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QList<QString> OAILineItem::getWarningMessages() const {
    return m_warning_messages;
}
void OAILineItem::setWarningMessages(const QList<QString> &warning_messages) {
    m_warning_messages = warning_messages;
    m_warning_messages_isSet = true;
}

bool OAILineItem::is_warning_messages_Set() const{
    return m_warning_messages_isSet;
}

bool OAILineItem::is_warning_messages_Valid() const{
    return m_warning_messages_isValid;
}

OAIYoutubeAndPartnersSettings OAILineItem::getYoutubeAndPartnersSettings() const {
    return m_youtube_and_partners_settings;
}
void OAILineItem::setYoutubeAndPartnersSettings(const OAIYoutubeAndPartnersSettings &youtube_and_partners_settings) {
    m_youtube_and_partners_settings = youtube_and_partners_settings;
    m_youtube_and_partners_settings_isSet = true;
}

bool OAILineItem::is_youtube_and_partners_settings_Set() const{
    return m_youtube_and_partners_settings_isSet;
}

bool OAILineItem::is_youtube_and_partners_settings_Valid() const{
    return m_youtube_and_partners_settings_isValid;
}

bool OAILineItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bid_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_budget.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_counting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_new_exchanges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_cap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insertion_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pacing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_costs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_revenue_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting_expansion.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_youtube_and_partners_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
