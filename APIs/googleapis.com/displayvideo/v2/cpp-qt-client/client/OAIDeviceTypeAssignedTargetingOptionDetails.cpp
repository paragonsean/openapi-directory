/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceTypeAssignedTargetingOptionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceTypeAssignedTargetingOptionDetails::OAIDeviceTypeAssignedTargetingOptionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceTypeAssignedTargetingOptionDetails::OAIDeviceTypeAssignedTargetingOptionDetails() {
    this->initializeModel();
}

OAIDeviceTypeAssignedTargetingOptionDetails::~OAIDeviceTypeAssignedTargetingOptionDetails() {}

void OAIDeviceTypeAssignedTargetingOptionDetails::initializeModel() {

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_youtube_and_partners_bid_multiplier_isSet = false;
    m_youtube_and_partners_bid_multiplier_isValid = false;
}

void OAIDeviceTypeAssignedTargetingOptionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceTypeAssignedTargetingOptionDetails::fromJsonObject(QJsonObject json) {

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_youtube_and_partners_bid_multiplier_isValid = ::OpenAPI::fromJsonValue(m_youtube_and_partners_bid_multiplier, json[QString("youtubeAndPartnersBidMultiplier")]);
    m_youtube_and_partners_bid_multiplier_isSet = !json[QString("youtubeAndPartnersBidMultiplier")].isNull() && m_youtube_and_partners_bid_multiplier_isValid;
}

QString OAIDeviceTypeAssignedTargetingOptionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceTypeAssignedTargetingOptionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_youtube_and_partners_bid_multiplier_isSet) {
        obj.insert(QString("youtubeAndPartnersBidMultiplier"), ::OpenAPI::toJsonValue(m_youtube_and_partners_bid_multiplier));
    }
    return obj;
}

QString OAIDeviceTypeAssignedTargetingOptionDetails::getDeviceType() const {
    return m_device_type;
}
void OAIDeviceTypeAssignedTargetingOptionDetails::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIDeviceTypeAssignedTargetingOptionDetails::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIDeviceTypeAssignedTargetingOptionDetails::is_device_type_Valid() const{
    return m_device_type_isValid;
}

double OAIDeviceTypeAssignedTargetingOptionDetails::getYoutubeAndPartnersBidMultiplier() const {
    return m_youtube_and_partners_bid_multiplier;
}
void OAIDeviceTypeAssignedTargetingOptionDetails::setYoutubeAndPartnersBidMultiplier(const double &youtube_and_partners_bid_multiplier) {
    m_youtube_and_partners_bid_multiplier = youtube_and_partners_bid_multiplier;
    m_youtube_and_partners_bid_multiplier_isSet = true;
}

bool OAIDeviceTypeAssignedTargetingOptionDetails::is_youtube_and_partners_bid_multiplier_Set() const{
    return m_youtube_and_partners_bid_multiplier_isSet;
}

bool OAIDeviceTypeAssignedTargetingOptionDetails::is_youtube_and_partners_bid_multiplier_Valid() const{
    return m_youtube_and_partners_bid_multiplier_isValid;
}

bool OAIDeviceTypeAssignedTargetingOptionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_youtube_and_partners_bid_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceTypeAssignedTargetingOptionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
