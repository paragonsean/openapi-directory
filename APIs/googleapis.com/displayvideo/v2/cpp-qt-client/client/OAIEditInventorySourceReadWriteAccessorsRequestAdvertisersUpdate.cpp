/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate() {
    this->initializeModel();
}

OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::~OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate() {}

void OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::initializeModel() {

    m_added_advertisers_isSet = false;
    m_added_advertisers_isValid = false;

    m_removed_advertisers_isSet = false;
    m_removed_advertisers_isValid = false;
}

void OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::fromJsonObject(QJsonObject json) {

    m_added_advertisers_isValid = ::OpenAPI::fromJsonValue(m_added_advertisers, json[QString("addedAdvertisers")]);
    m_added_advertisers_isSet = !json[QString("addedAdvertisers")].isNull() && m_added_advertisers_isValid;

    m_removed_advertisers_isValid = ::OpenAPI::fromJsonValue(m_removed_advertisers, json[QString("removedAdvertisers")]);
    m_removed_advertisers_isSet = !json[QString("removedAdvertisers")].isNull() && m_removed_advertisers_isValid;
}

QString OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_added_advertisers.size() > 0) {
        obj.insert(QString("addedAdvertisers"), ::OpenAPI::toJsonValue(m_added_advertisers));
    }
    if (m_removed_advertisers.size() > 0) {
        obj.insert(QString("removedAdvertisers"), ::OpenAPI::toJsonValue(m_removed_advertisers));
    }
    return obj;
}

QList<QString> OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::getAddedAdvertisers() const {
    return m_added_advertisers;
}
void OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::setAddedAdvertisers(const QList<QString> &added_advertisers) {
    m_added_advertisers = added_advertisers;
    m_added_advertisers_isSet = true;
}

bool OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::is_added_advertisers_Set() const{
    return m_added_advertisers_isSet;
}

bool OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::is_added_advertisers_Valid() const{
    return m_added_advertisers_isValid;
}

QList<QString> OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::getRemovedAdvertisers() const {
    return m_removed_advertisers;
}
void OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::setRemovedAdvertisers(const QList<QString> &removed_advertisers) {
    m_removed_advertisers = removed_advertisers;
    m_removed_advertisers_isSet = true;
}

bool OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::is_removed_advertisers_Set() const{
    return m_removed_advertisers_isSet;
}

bool OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::is_removed_advertisers_Valid() const{
    return m_removed_advertisers_isValid;
}

bool OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_advertisers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_removed_advertisers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
