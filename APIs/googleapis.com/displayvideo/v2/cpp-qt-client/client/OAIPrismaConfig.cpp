/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrismaConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrismaConfig::OAIPrismaConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrismaConfig::OAIPrismaConfig() {
    this->initializeModel();
}

OAIPrismaConfig::~OAIPrismaConfig() {}

void OAIPrismaConfig::initializeModel() {

    m_prisma_cpe_code_isSet = false;
    m_prisma_cpe_code_isValid = false;

    m_prisma_type_isSet = false;
    m_prisma_type_isValid = false;

    m_supplier_isSet = false;
    m_supplier_isValid = false;
}

void OAIPrismaConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrismaConfig::fromJsonObject(QJsonObject json) {

    m_prisma_cpe_code_isValid = ::OpenAPI::fromJsonValue(m_prisma_cpe_code, json[QString("prismaCpeCode")]);
    m_prisma_cpe_code_isSet = !json[QString("prismaCpeCode")].isNull() && m_prisma_cpe_code_isValid;

    m_prisma_type_isValid = ::OpenAPI::fromJsonValue(m_prisma_type, json[QString("prismaType")]);
    m_prisma_type_isSet = !json[QString("prismaType")].isNull() && m_prisma_type_isValid;

    m_supplier_isValid = ::OpenAPI::fromJsonValue(m_supplier, json[QString("supplier")]);
    m_supplier_isSet = !json[QString("supplier")].isNull() && m_supplier_isValid;
}

QString OAIPrismaConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrismaConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_prisma_cpe_code.isSet()) {
        obj.insert(QString("prismaCpeCode"), ::OpenAPI::toJsonValue(m_prisma_cpe_code));
    }
    if (m_prisma_type_isSet) {
        obj.insert(QString("prismaType"), ::OpenAPI::toJsonValue(m_prisma_type));
    }
    if (m_supplier_isSet) {
        obj.insert(QString("supplier"), ::OpenAPI::toJsonValue(m_supplier));
    }
    return obj;
}

OAIPrismaCpeCode OAIPrismaConfig::getPrismaCpeCode() const {
    return m_prisma_cpe_code;
}
void OAIPrismaConfig::setPrismaCpeCode(const OAIPrismaCpeCode &prisma_cpe_code) {
    m_prisma_cpe_code = prisma_cpe_code;
    m_prisma_cpe_code_isSet = true;
}

bool OAIPrismaConfig::is_prisma_cpe_code_Set() const{
    return m_prisma_cpe_code_isSet;
}

bool OAIPrismaConfig::is_prisma_cpe_code_Valid() const{
    return m_prisma_cpe_code_isValid;
}

QString OAIPrismaConfig::getPrismaType() const {
    return m_prisma_type;
}
void OAIPrismaConfig::setPrismaType(const QString &prisma_type) {
    m_prisma_type = prisma_type;
    m_prisma_type_isSet = true;
}

bool OAIPrismaConfig::is_prisma_type_Set() const{
    return m_prisma_type_isSet;
}

bool OAIPrismaConfig::is_prisma_type_Valid() const{
    return m_prisma_type_isValid;
}

QString OAIPrismaConfig::getSupplier() const {
    return m_supplier;
}
void OAIPrismaConfig::setSupplier(const QString &supplier) {
    m_supplier = supplier;
    m_supplier_isSet = true;
}

bool OAIPrismaConfig::is_supplier_Set() const{
    return m_supplier_isSet;
}

bool OAIPrismaConfig::is_supplier_Valid() const{
    return m_supplier_isValid;
}

bool OAIPrismaConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prisma_cpe_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prisma_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrismaConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
