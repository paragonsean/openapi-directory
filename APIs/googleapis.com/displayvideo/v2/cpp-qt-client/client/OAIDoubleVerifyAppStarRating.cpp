/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDoubleVerifyAppStarRating.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDoubleVerifyAppStarRating::OAIDoubleVerifyAppStarRating(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDoubleVerifyAppStarRating::OAIDoubleVerifyAppStarRating() {
    this->initializeModel();
}

OAIDoubleVerifyAppStarRating::~OAIDoubleVerifyAppStarRating() {}

void OAIDoubleVerifyAppStarRating::initializeModel() {

    m_avoid_insufficient_star_rating_isSet = false;
    m_avoid_insufficient_star_rating_isValid = false;

    m_avoided_star_rating_isSet = false;
    m_avoided_star_rating_isValid = false;
}

void OAIDoubleVerifyAppStarRating::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDoubleVerifyAppStarRating::fromJsonObject(QJsonObject json) {

    m_avoid_insufficient_star_rating_isValid = ::OpenAPI::fromJsonValue(m_avoid_insufficient_star_rating, json[QString("avoidInsufficientStarRating")]);
    m_avoid_insufficient_star_rating_isSet = !json[QString("avoidInsufficientStarRating")].isNull() && m_avoid_insufficient_star_rating_isValid;

    m_avoided_star_rating_isValid = ::OpenAPI::fromJsonValue(m_avoided_star_rating, json[QString("avoidedStarRating")]);
    m_avoided_star_rating_isSet = !json[QString("avoidedStarRating")].isNull() && m_avoided_star_rating_isValid;
}

QString OAIDoubleVerifyAppStarRating::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDoubleVerifyAppStarRating::asJsonObject() const {
    QJsonObject obj;
    if (m_avoid_insufficient_star_rating_isSet) {
        obj.insert(QString("avoidInsufficientStarRating"), ::OpenAPI::toJsonValue(m_avoid_insufficient_star_rating));
    }
    if (m_avoided_star_rating_isSet) {
        obj.insert(QString("avoidedStarRating"), ::OpenAPI::toJsonValue(m_avoided_star_rating));
    }
    return obj;
}

bool OAIDoubleVerifyAppStarRating::isAvoidInsufficientStarRating() const {
    return m_avoid_insufficient_star_rating;
}
void OAIDoubleVerifyAppStarRating::setAvoidInsufficientStarRating(const bool &avoid_insufficient_star_rating) {
    m_avoid_insufficient_star_rating = avoid_insufficient_star_rating;
    m_avoid_insufficient_star_rating_isSet = true;
}

bool OAIDoubleVerifyAppStarRating::is_avoid_insufficient_star_rating_Set() const{
    return m_avoid_insufficient_star_rating_isSet;
}

bool OAIDoubleVerifyAppStarRating::is_avoid_insufficient_star_rating_Valid() const{
    return m_avoid_insufficient_star_rating_isValid;
}

QString OAIDoubleVerifyAppStarRating::getAvoidedStarRating() const {
    return m_avoided_star_rating;
}
void OAIDoubleVerifyAppStarRating::setAvoidedStarRating(const QString &avoided_star_rating) {
    m_avoided_star_rating = avoided_star_rating;
    m_avoided_star_rating_isSet = true;
}

bool OAIDoubleVerifyAppStarRating::is_avoided_star_rating_Set() const{
    return m_avoided_star_rating_isSet;
}

bool OAIDoubleVerifyAppStarRating::is_avoided_star_rating_Valid() const{
    return m_avoided_star_rating_isValid;
}

bool OAIDoubleVerifyAppStarRating::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avoid_insufficient_star_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avoided_star_rating_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDoubleVerifyAppStarRating::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
