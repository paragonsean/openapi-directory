/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreative.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreative::OAICreative(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreative::OAICreative() {
    this->initializeModel();
}

OAICreative::~OAICreative() {}

void OAICreative::initializeModel() {

    m_additional_dimensions_isSet = false;
    m_additional_dimensions_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_appended_tag_isSet = false;
    m_appended_tag_isValid = false;

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_cm_placement_id_isSet = false;
    m_cm_placement_id_isValid = false;

    m_cm_tracking_ad_isSet = false;
    m_cm_tracking_ad_isValid = false;

    m_companion_creative_ids_isSet = false;
    m_companion_creative_ids_isValid = false;

    m_counter_events_isSet = false;
    m_counter_events_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creative_attributes_isSet = false;
    m_creative_attributes_isValid = false;

    m_creative_id_isSet = false;
    m_creative_id_isValid = false;

    m_creative_type_isSet = false;
    m_creative_type_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_dynamic_isSet = false;
    m_dynamic_isValid = false;

    m_entity_status_isSet = false;
    m_entity_status_isValid = false;

    m_exit_events_isSet = false;
    m_exit_events_isValid = false;

    m_expand_on_hover_isSet = false;
    m_expand_on_hover_isValid = false;

    m_expanding_direction_isSet = false;
    m_expanding_direction_isValid = false;

    m_hosting_source_isSet = false;
    m_hosting_source_isValid = false;

    m_html5_video_isSet = false;
    m_html5_video_isValid = false;

    m_ias_campaign_monitoring_isSet = false;
    m_ias_campaign_monitoring_isValid = false;

    m_integration_code_isSet = false;
    m_integration_code_isValid = false;

    m_js_tracker_url_isSet = false;
    m_js_tracker_url_isValid = false;

    m_line_item_ids_isSet = false;
    m_line_item_ids_isValid = false;

    m_media_duration_isSet = false;
    m_media_duration_isValid = false;

    m_mp3_audio_isSet = false;
    m_mp3_audio_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_oba_icon_isSet = false;
    m_oba_icon_isValid = false;

    m_ogg_audio_isSet = false;
    m_ogg_audio_isValid = false;

    m_progress_offset_isSet = false;
    m_progress_offset_isValid = false;

    m_require_html5_isSet = false;
    m_require_html5_isValid = false;

    m_require_mraid_isSet = false;
    m_require_mraid_isValid = false;

    m_require_ping_for_attribution_isSet = false;
    m_require_ping_for_attribution_isValid = false;

    m_review_status_isSet = false;
    m_review_status_isValid = false;

    m_skip_offset_isSet = false;
    m_skip_offset_isValid = false;

    m_skippable_isSet = false;
    m_skippable_isValid = false;

    m_third_party_tag_isSet = false;
    m_third_party_tag_isValid = false;

    m_third_party_urls_isSet = false;
    m_third_party_urls_isValid = false;

    m_timer_events_isSet = false;
    m_timer_events_isValid = false;

    m_tracker_urls_isSet = false;
    m_tracker_urls_isValid = false;

    m_transcodes_isSet = false;
    m_transcodes_isValid = false;

    m_universal_ad_id_isSet = false;
    m_universal_ad_id_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_vast_tag_url_isSet = false;
    m_vast_tag_url_isValid = false;

    m_vpaid_isSet = false;
    m_vpaid_isValid = false;
}

void OAICreative::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreative::fromJsonObject(QJsonObject json) {

    m_additional_dimensions_isValid = ::OpenAPI::fromJsonValue(m_additional_dimensions, json[QString("additionalDimensions")]);
    m_additional_dimensions_isSet = !json[QString("additionalDimensions")].isNull() && m_additional_dimensions_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_appended_tag_isValid = ::OpenAPI::fromJsonValue(m_appended_tag, json[QString("appendedTag")]);
    m_appended_tag_isSet = !json[QString("appendedTag")].isNull() && m_appended_tag_isValid;

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_cm_placement_id_isValid = ::OpenAPI::fromJsonValue(m_cm_placement_id, json[QString("cmPlacementId")]);
    m_cm_placement_id_isSet = !json[QString("cmPlacementId")].isNull() && m_cm_placement_id_isValid;

    m_cm_tracking_ad_isValid = ::OpenAPI::fromJsonValue(m_cm_tracking_ad, json[QString("cmTrackingAd")]);
    m_cm_tracking_ad_isSet = !json[QString("cmTrackingAd")].isNull() && m_cm_tracking_ad_isValid;

    m_companion_creative_ids_isValid = ::OpenAPI::fromJsonValue(m_companion_creative_ids, json[QString("companionCreativeIds")]);
    m_companion_creative_ids_isSet = !json[QString("companionCreativeIds")].isNull() && m_companion_creative_ids_isValid;

    m_counter_events_isValid = ::OpenAPI::fromJsonValue(m_counter_events, json[QString("counterEvents")]);
    m_counter_events_isSet = !json[QString("counterEvents")].isNull() && m_counter_events_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creative_attributes_isValid = ::OpenAPI::fromJsonValue(m_creative_attributes, json[QString("creativeAttributes")]);
    m_creative_attributes_isSet = !json[QString("creativeAttributes")].isNull() && m_creative_attributes_isValid;

    m_creative_id_isValid = ::OpenAPI::fromJsonValue(m_creative_id, json[QString("creativeId")]);
    m_creative_id_isSet = !json[QString("creativeId")].isNull() && m_creative_id_isValid;

    m_creative_type_isValid = ::OpenAPI::fromJsonValue(m_creative_type, json[QString("creativeType")]);
    m_creative_type_isSet = !json[QString("creativeType")].isNull() && m_creative_type_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_dynamic_isValid = ::OpenAPI::fromJsonValue(m_dynamic, json[QString("dynamic")]);
    m_dynamic_isSet = !json[QString("dynamic")].isNull() && m_dynamic_isValid;

    m_entity_status_isValid = ::OpenAPI::fromJsonValue(m_entity_status, json[QString("entityStatus")]);
    m_entity_status_isSet = !json[QString("entityStatus")].isNull() && m_entity_status_isValid;

    m_exit_events_isValid = ::OpenAPI::fromJsonValue(m_exit_events, json[QString("exitEvents")]);
    m_exit_events_isSet = !json[QString("exitEvents")].isNull() && m_exit_events_isValid;

    m_expand_on_hover_isValid = ::OpenAPI::fromJsonValue(m_expand_on_hover, json[QString("expandOnHover")]);
    m_expand_on_hover_isSet = !json[QString("expandOnHover")].isNull() && m_expand_on_hover_isValid;

    m_expanding_direction_isValid = ::OpenAPI::fromJsonValue(m_expanding_direction, json[QString("expandingDirection")]);
    m_expanding_direction_isSet = !json[QString("expandingDirection")].isNull() && m_expanding_direction_isValid;

    m_hosting_source_isValid = ::OpenAPI::fromJsonValue(m_hosting_source, json[QString("hostingSource")]);
    m_hosting_source_isSet = !json[QString("hostingSource")].isNull() && m_hosting_source_isValid;

    m_html5_video_isValid = ::OpenAPI::fromJsonValue(m_html5_video, json[QString("html5Video")]);
    m_html5_video_isSet = !json[QString("html5Video")].isNull() && m_html5_video_isValid;

    m_ias_campaign_monitoring_isValid = ::OpenAPI::fromJsonValue(m_ias_campaign_monitoring, json[QString("iasCampaignMonitoring")]);
    m_ias_campaign_monitoring_isSet = !json[QString("iasCampaignMonitoring")].isNull() && m_ias_campaign_monitoring_isValid;

    m_integration_code_isValid = ::OpenAPI::fromJsonValue(m_integration_code, json[QString("integrationCode")]);
    m_integration_code_isSet = !json[QString("integrationCode")].isNull() && m_integration_code_isValid;

    m_js_tracker_url_isValid = ::OpenAPI::fromJsonValue(m_js_tracker_url, json[QString("jsTrackerUrl")]);
    m_js_tracker_url_isSet = !json[QString("jsTrackerUrl")].isNull() && m_js_tracker_url_isValid;

    m_line_item_ids_isValid = ::OpenAPI::fromJsonValue(m_line_item_ids, json[QString("lineItemIds")]);
    m_line_item_ids_isSet = !json[QString("lineItemIds")].isNull() && m_line_item_ids_isValid;

    m_media_duration_isValid = ::OpenAPI::fromJsonValue(m_media_duration, json[QString("mediaDuration")]);
    m_media_duration_isSet = !json[QString("mediaDuration")].isNull() && m_media_duration_isValid;

    m_mp3_audio_isValid = ::OpenAPI::fromJsonValue(m_mp3_audio, json[QString("mp3Audio")]);
    m_mp3_audio_isSet = !json[QString("mp3Audio")].isNull() && m_mp3_audio_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_oba_icon_isValid = ::OpenAPI::fromJsonValue(m_oba_icon, json[QString("obaIcon")]);
    m_oba_icon_isSet = !json[QString("obaIcon")].isNull() && m_oba_icon_isValid;

    m_ogg_audio_isValid = ::OpenAPI::fromJsonValue(m_ogg_audio, json[QString("oggAudio")]);
    m_ogg_audio_isSet = !json[QString("oggAudio")].isNull() && m_ogg_audio_isValid;

    m_progress_offset_isValid = ::OpenAPI::fromJsonValue(m_progress_offset, json[QString("progressOffset")]);
    m_progress_offset_isSet = !json[QString("progressOffset")].isNull() && m_progress_offset_isValid;

    m_require_html5_isValid = ::OpenAPI::fromJsonValue(m_require_html5, json[QString("requireHtml5")]);
    m_require_html5_isSet = !json[QString("requireHtml5")].isNull() && m_require_html5_isValid;

    m_require_mraid_isValid = ::OpenAPI::fromJsonValue(m_require_mraid, json[QString("requireMraid")]);
    m_require_mraid_isSet = !json[QString("requireMraid")].isNull() && m_require_mraid_isValid;

    m_require_ping_for_attribution_isValid = ::OpenAPI::fromJsonValue(m_require_ping_for_attribution, json[QString("requirePingForAttribution")]);
    m_require_ping_for_attribution_isSet = !json[QString("requirePingForAttribution")].isNull() && m_require_ping_for_attribution_isValid;

    m_review_status_isValid = ::OpenAPI::fromJsonValue(m_review_status, json[QString("reviewStatus")]);
    m_review_status_isSet = !json[QString("reviewStatus")].isNull() && m_review_status_isValid;

    m_skip_offset_isValid = ::OpenAPI::fromJsonValue(m_skip_offset, json[QString("skipOffset")]);
    m_skip_offset_isSet = !json[QString("skipOffset")].isNull() && m_skip_offset_isValid;

    m_skippable_isValid = ::OpenAPI::fromJsonValue(m_skippable, json[QString("skippable")]);
    m_skippable_isSet = !json[QString("skippable")].isNull() && m_skippable_isValid;

    m_third_party_tag_isValid = ::OpenAPI::fromJsonValue(m_third_party_tag, json[QString("thirdPartyTag")]);
    m_third_party_tag_isSet = !json[QString("thirdPartyTag")].isNull() && m_third_party_tag_isValid;

    m_third_party_urls_isValid = ::OpenAPI::fromJsonValue(m_third_party_urls, json[QString("thirdPartyUrls")]);
    m_third_party_urls_isSet = !json[QString("thirdPartyUrls")].isNull() && m_third_party_urls_isValid;

    m_timer_events_isValid = ::OpenAPI::fromJsonValue(m_timer_events, json[QString("timerEvents")]);
    m_timer_events_isSet = !json[QString("timerEvents")].isNull() && m_timer_events_isValid;

    m_tracker_urls_isValid = ::OpenAPI::fromJsonValue(m_tracker_urls, json[QString("trackerUrls")]);
    m_tracker_urls_isSet = !json[QString("trackerUrls")].isNull() && m_tracker_urls_isValid;

    m_transcodes_isValid = ::OpenAPI::fromJsonValue(m_transcodes, json[QString("transcodes")]);
    m_transcodes_isSet = !json[QString("transcodes")].isNull() && m_transcodes_isValid;

    m_universal_ad_id_isValid = ::OpenAPI::fromJsonValue(m_universal_ad_id, json[QString("universalAdId")]);
    m_universal_ad_id_isSet = !json[QString("universalAdId")].isNull() && m_universal_ad_id_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_vast_tag_url_isValid = ::OpenAPI::fromJsonValue(m_vast_tag_url, json[QString("vastTagUrl")]);
    m_vast_tag_url_isSet = !json[QString("vastTagUrl")].isNull() && m_vast_tag_url_isValid;

    m_vpaid_isValid = ::OpenAPI::fromJsonValue(m_vpaid, json[QString("vpaid")]);
    m_vpaid_isSet = !json[QString("vpaid")].isNull() && m_vpaid_isValid;
}

QString OAICreative::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreative::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_dimensions.size() > 0) {
        obj.insert(QString("additionalDimensions"), ::OpenAPI::toJsonValue(m_additional_dimensions));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_appended_tag_isSet) {
        obj.insert(QString("appendedTag"), ::OpenAPI::toJsonValue(m_appended_tag));
    }
    if (m_assets.size() > 0) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_cm_placement_id_isSet) {
        obj.insert(QString("cmPlacementId"), ::OpenAPI::toJsonValue(m_cm_placement_id));
    }
    if (m_cm_tracking_ad.isSet()) {
        obj.insert(QString("cmTrackingAd"), ::OpenAPI::toJsonValue(m_cm_tracking_ad));
    }
    if (m_companion_creative_ids.size() > 0) {
        obj.insert(QString("companionCreativeIds"), ::OpenAPI::toJsonValue(m_companion_creative_ids));
    }
    if (m_counter_events.size() > 0) {
        obj.insert(QString("counterEvents"), ::OpenAPI::toJsonValue(m_counter_events));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creative_attributes.size() > 0) {
        obj.insert(QString("creativeAttributes"), ::OpenAPI::toJsonValue(m_creative_attributes));
    }
    if (m_creative_id_isSet) {
        obj.insert(QString("creativeId"), ::OpenAPI::toJsonValue(m_creative_id));
    }
    if (m_creative_type_isSet) {
        obj.insert(QString("creativeType"), ::OpenAPI::toJsonValue(m_creative_type));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_dynamic_isSet) {
        obj.insert(QString("dynamic"), ::OpenAPI::toJsonValue(m_dynamic));
    }
    if (m_entity_status_isSet) {
        obj.insert(QString("entityStatus"), ::OpenAPI::toJsonValue(m_entity_status));
    }
    if (m_exit_events.size() > 0) {
        obj.insert(QString("exitEvents"), ::OpenAPI::toJsonValue(m_exit_events));
    }
    if (m_expand_on_hover_isSet) {
        obj.insert(QString("expandOnHover"), ::OpenAPI::toJsonValue(m_expand_on_hover));
    }
    if (m_expanding_direction_isSet) {
        obj.insert(QString("expandingDirection"), ::OpenAPI::toJsonValue(m_expanding_direction));
    }
    if (m_hosting_source_isSet) {
        obj.insert(QString("hostingSource"), ::OpenAPI::toJsonValue(m_hosting_source));
    }
    if (m_html5_video_isSet) {
        obj.insert(QString("html5Video"), ::OpenAPI::toJsonValue(m_html5_video));
    }
    if (m_ias_campaign_monitoring_isSet) {
        obj.insert(QString("iasCampaignMonitoring"), ::OpenAPI::toJsonValue(m_ias_campaign_monitoring));
    }
    if (m_integration_code_isSet) {
        obj.insert(QString("integrationCode"), ::OpenAPI::toJsonValue(m_integration_code));
    }
    if (m_js_tracker_url_isSet) {
        obj.insert(QString("jsTrackerUrl"), ::OpenAPI::toJsonValue(m_js_tracker_url));
    }
    if (m_line_item_ids.size() > 0) {
        obj.insert(QString("lineItemIds"), ::OpenAPI::toJsonValue(m_line_item_ids));
    }
    if (m_media_duration_isSet) {
        obj.insert(QString("mediaDuration"), ::OpenAPI::toJsonValue(m_media_duration));
    }
    if (m_mp3_audio_isSet) {
        obj.insert(QString("mp3Audio"), ::OpenAPI::toJsonValue(m_mp3_audio));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_oba_icon.isSet()) {
        obj.insert(QString("obaIcon"), ::OpenAPI::toJsonValue(m_oba_icon));
    }
    if (m_ogg_audio_isSet) {
        obj.insert(QString("oggAudio"), ::OpenAPI::toJsonValue(m_ogg_audio));
    }
    if (m_progress_offset.isSet()) {
        obj.insert(QString("progressOffset"), ::OpenAPI::toJsonValue(m_progress_offset));
    }
    if (m_require_html5_isSet) {
        obj.insert(QString("requireHtml5"), ::OpenAPI::toJsonValue(m_require_html5));
    }
    if (m_require_mraid_isSet) {
        obj.insert(QString("requireMraid"), ::OpenAPI::toJsonValue(m_require_mraid));
    }
    if (m_require_ping_for_attribution_isSet) {
        obj.insert(QString("requirePingForAttribution"), ::OpenAPI::toJsonValue(m_require_ping_for_attribution));
    }
    if (m_review_status.isSet()) {
        obj.insert(QString("reviewStatus"), ::OpenAPI::toJsonValue(m_review_status));
    }
    if (m_skip_offset.isSet()) {
        obj.insert(QString("skipOffset"), ::OpenAPI::toJsonValue(m_skip_offset));
    }
    if (m_skippable_isSet) {
        obj.insert(QString("skippable"), ::OpenAPI::toJsonValue(m_skippable));
    }
    if (m_third_party_tag_isSet) {
        obj.insert(QString("thirdPartyTag"), ::OpenAPI::toJsonValue(m_third_party_tag));
    }
    if (m_third_party_urls.size() > 0) {
        obj.insert(QString("thirdPartyUrls"), ::OpenAPI::toJsonValue(m_third_party_urls));
    }
    if (m_timer_events.size() > 0) {
        obj.insert(QString("timerEvents"), ::OpenAPI::toJsonValue(m_timer_events));
    }
    if (m_tracker_urls.size() > 0) {
        obj.insert(QString("trackerUrls"), ::OpenAPI::toJsonValue(m_tracker_urls));
    }
    if (m_transcodes.size() > 0) {
        obj.insert(QString("transcodes"), ::OpenAPI::toJsonValue(m_transcodes));
    }
    if (m_universal_ad_id.isSet()) {
        obj.insert(QString("universalAdId"), ::OpenAPI::toJsonValue(m_universal_ad_id));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_vast_tag_url_isSet) {
        obj.insert(QString("vastTagUrl"), ::OpenAPI::toJsonValue(m_vast_tag_url));
    }
    if (m_vpaid_isSet) {
        obj.insert(QString("vpaid"), ::OpenAPI::toJsonValue(m_vpaid));
    }
    return obj;
}

QList<OAIDimensions> OAICreative::getAdditionalDimensions() const {
    return m_additional_dimensions;
}
void OAICreative::setAdditionalDimensions(const QList<OAIDimensions> &additional_dimensions) {
    m_additional_dimensions = additional_dimensions;
    m_additional_dimensions_isSet = true;
}

bool OAICreative::is_additional_dimensions_Set() const{
    return m_additional_dimensions_isSet;
}

bool OAICreative::is_additional_dimensions_Valid() const{
    return m_additional_dimensions_isValid;
}

QString OAICreative::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAICreative::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAICreative::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAICreative::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

QString OAICreative::getAppendedTag() const {
    return m_appended_tag;
}
void OAICreative::setAppendedTag(const QString &appended_tag) {
    m_appended_tag = appended_tag;
    m_appended_tag_isSet = true;
}

bool OAICreative::is_appended_tag_Set() const{
    return m_appended_tag_isSet;
}

bool OAICreative::is_appended_tag_Valid() const{
    return m_appended_tag_isValid;
}

QList<OAIAssetAssociation> OAICreative::getAssets() const {
    return m_assets;
}
void OAICreative::setAssets(const QList<OAIAssetAssociation> &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAICreative::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAICreative::is_assets_Valid() const{
    return m_assets_isValid;
}

QString OAICreative::getCmPlacementId() const {
    return m_cm_placement_id;
}
void OAICreative::setCmPlacementId(const QString &cm_placement_id) {
    m_cm_placement_id = cm_placement_id;
    m_cm_placement_id_isSet = true;
}

bool OAICreative::is_cm_placement_id_Set() const{
    return m_cm_placement_id_isSet;
}

bool OAICreative::is_cm_placement_id_Valid() const{
    return m_cm_placement_id_isValid;
}

OAICmTrackingAd OAICreative::getCmTrackingAd() const {
    return m_cm_tracking_ad;
}
void OAICreative::setCmTrackingAd(const OAICmTrackingAd &cm_tracking_ad) {
    m_cm_tracking_ad = cm_tracking_ad;
    m_cm_tracking_ad_isSet = true;
}

bool OAICreative::is_cm_tracking_ad_Set() const{
    return m_cm_tracking_ad_isSet;
}

bool OAICreative::is_cm_tracking_ad_Valid() const{
    return m_cm_tracking_ad_isValid;
}

QList<QString> OAICreative::getCompanionCreativeIds() const {
    return m_companion_creative_ids;
}
void OAICreative::setCompanionCreativeIds(const QList<QString> &companion_creative_ids) {
    m_companion_creative_ids = companion_creative_ids;
    m_companion_creative_ids_isSet = true;
}

bool OAICreative::is_companion_creative_ids_Set() const{
    return m_companion_creative_ids_isSet;
}

bool OAICreative::is_companion_creative_ids_Valid() const{
    return m_companion_creative_ids_isValid;
}

QList<OAICounterEvent> OAICreative::getCounterEvents() const {
    return m_counter_events;
}
void OAICreative::setCounterEvents(const QList<OAICounterEvent> &counter_events) {
    m_counter_events = counter_events;
    m_counter_events_isSet = true;
}

bool OAICreative::is_counter_events_Set() const{
    return m_counter_events_isSet;
}

bool OAICreative::is_counter_events_Valid() const{
    return m_counter_events_isValid;
}

QString OAICreative::getCreateTime() const {
    return m_create_time;
}
void OAICreative::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICreative::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICreative::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QList<QString> OAICreative::getCreativeAttributes() const {
    return m_creative_attributes;
}
void OAICreative::setCreativeAttributes(const QList<QString> &creative_attributes) {
    m_creative_attributes = creative_attributes;
    m_creative_attributes_isSet = true;
}

bool OAICreative::is_creative_attributes_Set() const{
    return m_creative_attributes_isSet;
}

bool OAICreative::is_creative_attributes_Valid() const{
    return m_creative_attributes_isValid;
}

QString OAICreative::getCreativeId() const {
    return m_creative_id;
}
void OAICreative::setCreativeId(const QString &creative_id) {
    m_creative_id = creative_id;
    m_creative_id_isSet = true;
}

bool OAICreative::is_creative_id_Set() const{
    return m_creative_id_isSet;
}

bool OAICreative::is_creative_id_Valid() const{
    return m_creative_id_isValid;
}

QString OAICreative::getCreativeType() const {
    return m_creative_type;
}
void OAICreative::setCreativeType(const QString &creative_type) {
    m_creative_type = creative_type;
    m_creative_type_isSet = true;
}

bool OAICreative::is_creative_type_Set() const{
    return m_creative_type_isSet;
}

bool OAICreative::is_creative_type_Valid() const{
    return m_creative_type_isValid;
}

OAIDimensions OAICreative::getDimensions() const {
    return m_dimensions;
}
void OAICreative::setDimensions(const OAIDimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAICreative::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAICreative::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAICreative::getDisplayName() const {
    return m_display_name;
}
void OAICreative::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICreative::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICreative::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAICreative::isDynamic() const {
    return m_dynamic;
}
void OAICreative::setDynamic(const bool &dynamic) {
    m_dynamic = dynamic;
    m_dynamic_isSet = true;
}

bool OAICreative::is_dynamic_Set() const{
    return m_dynamic_isSet;
}

bool OAICreative::is_dynamic_Valid() const{
    return m_dynamic_isValid;
}

QString OAICreative::getEntityStatus() const {
    return m_entity_status;
}
void OAICreative::setEntityStatus(const QString &entity_status) {
    m_entity_status = entity_status;
    m_entity_status_isSet = true;
}

bool OAICreative::is_entity_status_Set() const{
    return m_entity_status_isSet;
}

bool OAICreative::is_entity_status_Valid() const{
    return m_entity_status_isValid;
}

QList<OAIExitEvent> OAICreative::getExitEvents() const {
    return m_exit_events;
}
void OAICreative::setExitEvents(const QList<OAIExitEvent> &exit_events) {
    m_exit_events = exit_events;
    m_exit_events_isSet = true;
}

bool OAICreative::is_exit_events_Set() const{
    return m_exit_events_isSet;
}

bool OAICreative::is_exit_events_Valid() const{
    return m_exit_events_isValid;
}

bool OAICreative::isExpandOnHover() const {
    return m_expand_on_hover;
}
void OAICreative::setExpandOnHover(const bool &expand_on_hover) {
    m_expand_on_hover = expand_on_hover;
    m_expand_on_hover_isSet = true;
}

bool OAICreative::is_expand_on_hover_Set() const{
    return m_expand_on_hover_isSet;
}

bool OAICreative::is_expand_on_hover_Valid() const{
    return m_expand_on_hover_isValid;
}

QString OAICreative::getExpandingDirection() const {
    return m_expanding_direction;
}
void OAICreative::setExpandingDirection(const QString &expanding_direction) {
    m_expanding_direction = expanding_direction;
    m_expanding_direction_isSet = true;
}

bool OAICreative::is_expanding_direction_Set() const{
    return m_expanding_direction_isSet;
}

bool OAICreative::is_expanding_direction_Valid() const{
    return m_expanding_direction_isValid;
}

QString OAICreative::getHostingSource() const {
    return m_hosting_source;
}
void OAICreative::setHostingSource(const QString &hosting_source) {
    m_hosting_source = hosting_source;
    m_hosting_source_isSet = true;
}

bool OAICreative::is_hosting_source_Set() const{
    return m_hosting_source_isSet;
}

bool OAICreative::is_hosting_source_Valid() const{
    return m_hosting_source_isValid;
}

bool OAICreative::isHtml5Video() const {
    return m_html5_video;
}
void OAICreative::setHtml5Video(const bool &html5_video) {
    m_html5_video = html5_video;
    m_html5_video_isSet = true;
}

bool OAICreative::is_html5_video_Set() const{
    return m_html5_video_isSet;
}

bool OAICreative::is_html5_video_Valid() const{
    return m_html5_video_isValid;
}

bool OAICreative::isIasCampaignMonitoring() const {
    return m_ias_campaign_monitoring;
}
void OAICreative::setIasCampaignMonitoring(const bool &ias_campaign_monitoring) {
    m_ias_campaign_monitoring = ias_campaign_monitoring;
    m_ias_campaign_monitoring_isSet = true;
}

bool OAICreative::is_ias_campaign_monitoring_Set() const{
    return m_ias_campaign_monitoring_isSet;
}

bool OAICreative::is_ias_campaign_monitoring_Valid() const{
    return m_ias_campaign_monitoring_isValid;
}

QString OAICreative::getIntegrationCode() const {
    return m_integration_code;
}
void OAICreative::setIntegrationCode(const QString &integration_code) {
    m_integration_code = integration_code;
    m_integration_code_isSet = true;
}

bool OAICreative::is_integration_code_Set() const{
    return m_integration_code_isSet;
}

bool OAICreative::is_integration_code_Valid() const{
    return m_integration_code_isValid;
}

QString OAICreative::getJsTrackerUrl() const {
    return m_js_tracker_url;
}
void OAICreative::setJsTrackerUrl(const QString &js_tracker_url) {
    m_js_tracker_url = js_tracker_url;
    m_js_tracker_url_isSet = true;
}

bool OAICreative::is_js_tracker_url_Set() const{
    return m_js_tracker_url_isSet;
}

bool OAICreative::is_js_tracker_url_Valid() const{
    return m_js_tracker_url_isValid;
}

QList<QString> OAICreative::getLineItemIds() const {
    return m_line_item_ids;
}
void OAICreative::setLineItemIds(const QList<QString> &line_item_ids) {
    m_line_item_ids = line_item_ids;
    m_line_item_ids_isSet = true;
}

bool OAICreative::is_line_item_ids_Set() const{
    return m_line_item_ids_isSet;
}

bool OAICreative::is_line_item_ids_Valid() const{
    return m_line_item_ids_isValid;
}

QString OAICreative::getMediaDuration() const {
    return m_media_duration;
}
void OAICreative::setMediaDuration(const QString &media_duration) {
    m_media_duration = media_duration;
    m_media_duration_isSet = true;
}

bool OAICreative::is_media_duration_Set() const{
    return m_media_duration_isSet;
}

bool OAICreative::is_media_duration_Valid() const{
    return m_media_duration_isValid;
}

bool OAICreative::isMp3Audio() const {
    return m_mp3_audio;
}
void OAICreative::setMp3Audio(const bool &mp3_audio) {
    m_mp3_audio = mp3_audio;
    m_mp3_audio_isSet = true;
}

bool OAICreative::is_mp3_audio_Set() const{
    return m_mp3_audio_isSet;
}

bool OAICreative::is_mp3_audio_Valid() const{
    return m_mp3_audio_isValid;
}

QString OAICreative::getName() const {
    return m_name;
}
void OAICreative::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreative::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreative::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreative::getNotes() const {
    return m_notes;
}
void OAICreative::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAICreative::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAICreative::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIObaIcon OAICreative::getObaIcon() const {
    return m_oba_icon;
}
void OAICreative::setObaIcon(const OAIObaIcon &oba_icon) {
    m_oba_icon = oba_icon;
    m_oba_icon_isSet = true;
}

bool OAICreative::is_oba_icon_Set() const{
    return m_oba_icon_isSet;
}

bool OAICreative::is_oba_icon_Valid() const{
    return m_oba_icon_isValid;
}

bool OAICreative::isOggAudio() const {
    return m_ogg_audio;
}
void OAICreative::setOggAudio(const bool &ogg_audio) {
    m_ogg_audio = ogg_audio;
    m_ogg_audio_isSet = true;
}

bool OAICreative::is_ogg_audio_Set() const{
    return m_ogg_audio_isSet;
}

bool OAICreative::is_ogg_audio_Valid() const{
    return m_ogg_audio_isValid;
}

OAIAudioVideoOffset OAICreative::getProgressOffset() const {
    return m_progress_offset;
}
void OAICreative::setProgressOffset(const OAIAudioVideoOffset &progress_offset) {
    m_progress_offset = progress_offset;
    m_progress_offset_isSet = true;
}

bool OAICreative::is_progress_offset_Set() const{
    return m_progress_offset_isSet;
}

bool OAICreative::is_progress_offset_Valid() const{
    return m_progress_offset_isValid;
}

bool OAICreative::isRequireHtml5() const {
    return m_require_html5;
}
void OAICreative::setRequireHtml5(const bool &require_html5) {
    m_require_html5 = require_html5;
    m_require_html5_isSet = true;
}

bool OAICreative::is_require_html5_Set() const{
    return m_require_html5_isSet;
}

bool OAICreative::is_require_html5_Valid() const{
    return m_require_html5_isValid;
}

bool OAICreative::isRequireMraid() const {
    return m_require_mraid;
}
void OAICreative::setRequireMraid(const bool &require_mraid) {
    m_require_mraid = require_mraid;
    m_require_mraid_isSet = true;
}

bool OAICreative::is_require_mraid_Set() const{
    return m_require_mraid_isSet;
}

bool OAICreative::is_require_mraid_Valid() const{
    return m_require_mraid_isValid;
}

bool OAICreative::isRequirePingForAttribution() const {
    return m_require_ping_for_attribution;
}
void OAICreative::setRequirePingForAttribution(const bool &require_ping_for_attribution) {
    m_require_ping_for_attribution = require_ping_for_attribution;
    m_require_ping_for_attribution_isSet = true;
}

bool OAICreative::is_require_ping_for_attribution_Set() const{
    return m_require_ping_for_attribution_isSet;
}

bool OAICreative::is_require_ping_for_attribution_Valid() const{
    return m_require_ping_for_attribution_isValid;
}

OAIReviewStatusInfo OAICreative::getReviewStatus() const {
    return m_review_status;
}
void OAICreative::setReviewStatus(const OAIReviewStatusInfo &review_status) {
    m_review_status = review_status;
    m_review_status_isSet = true;
}

bool OAICreative::is_review_status_Set() const{
    return m_review_status_isSet;
}

bool OAICreative::is_review_status_Valid() const{
    return m_review_status_isValid;
}

OAIAudioVideoOffset OAICreative::getSkipOffset() const {
    return m_skip_offset;
}
void OAICreative::setSkipOffset(const OAIAudioVideoOffset &skip_offset) {
    m_skip_offset = skip_offset;
    m_skip_offset_isSet = true;
}

bool OAICreative::is_skip_offset_Set() const{
    return m_skip_offset_isSet;
}

bool OAICreative::is_skip_offset_Valid() const{
    return m_skip_offset_isValid;
}

bool OAICreative::isSkippable() const {
    return m_skippable;
}
void OAICreative::setSkippable(const bool &skippable) {
    m_skippable = skippable;
    m_skippable_isSet = true;
}

bool OAICreative::is_skippable_Set() const{
    return m_skippable_isSet;
}

bool OAICreative::is_skippable_Valid() const{
    return m_skippable_isValid;
}

QString OAICreative::getThirdPartyTag() const {
    return m_third_party_tag;
}
void OAICreative::setThirdPartyTag(const QString &third_party_tag) {
    m_third_party_tag = third_party_tag;
    m_third_party_tag_isSet = true;
}

bool OAICreative::is_third_party_tag_Set() const{
    return m_third_party_tag_isSet;
}

bool OAICreative::is_third_party_tag_Valid() const{
    return m_third_party_tag_isValid;
}

QList<OAIThirdPartyUrl> OAICreative::getThirdPartyUrls() const {
    return m_third_party_urls;
}
void OAICreative::setThirdPartyUrls(const QList<OAIThirdPartyUrl> &third_party_urls) {
    m_third_party_urls = third_party_urls;
    m_third_party_urls_isSet = true;
}

bool OAICreative::is_third_party_urls_Set() const{
    return m_third_party_urls_isSet;
}

bool OAICreative::is_third_party_urls_Valid() const{
    return m_third_party_urls_isValid;
}

QList<OAITimerEvent> OAICreative::getTimerEvents() const {
    return m_timer_events;
}
void OAICreative::setTimerEvents(const QList<OAITimerEvent> &timer_events) {
    m_timer_events = timer_events;
    m_timer_events_isSet = true;
}

bool OAICreative::is_timer_events_Set() const{
    return m_timer_events_isSet;
}

bool OAICreative::is_timer_events_Valid() const{
    return m_timer_events_isValid;
}

QList<QString> OAICreative::getTrackerUrls() const {
    return m_tracker_urls;
}
void OAICreative::setTrackerUrls(const QList<QString> &tracker_urls) {
    m_tracker_urls = tracker_urls;
    m_tracker_urls_isSet = true;
}

bool OAICreative::is_tracker_urls_Set() const{
    return m_tracker_urls_isSet;
}

bool OAICreative::is_tracker_urls_Valid() const{
    return m_tracker_urls_isValid;
}

QList<OAITranscode> OAICreative::getTranscodes() const {
    return m_transcodes;
}
void OAICreative::setTranscodes(const QList<OAITranscode> &transcodes) {
    m_transcodes = transcodes;
    m_transcodes_isSet = true;
}

bool OAICreative::is_transcodes_Set() const{
    return m_transcodes_isSet;
}

bool OAICreative::is_transcodes_Valid() const{
    return m_transcodes_isValid;
}

OAIUniversalAdId OAICreative::getUniversalAdId() const {
    return m_universal_ad_id;
}
void OAICreative::setUniversalAdId(const OAIUniversalAdId &universal_ad_id) {
    m_universal_ad_id = universal_ad_id;
    m_universal_ad_id_isSet = true;
}

bool OAICreative::is_universal_ad_id_Set() const{
    return m_universal_ad_id_isSet;
}

bool OAICreative::is_universal_ad_id_Valid() const{
    return m_universal_ad_id_isValid;
}

QString OAICreative::getUpdateTime() const {
    return m_update_time;
}
void OAICreative::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICreative::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICreative::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAICreative::getVastTagUrl() const {
    return m_vast_tag_url;
}
void OAICreative::setVastTagUrl(const QString &vast_tag_url) {
    m_vast_tag_url = vast_tag_url;
    m_vast_tag_url_isSet = true;
}

bool OAICreative::is_vast_tag_url_Set() const{
    return m_vast_tag_url_isSet;
}

bool OAICreative::is_vast_tag_url_Valid() const{
    return m_vast_tag_url_isValid;
}

bool OAICreative::isVpaid() const {
    return m_vpaid;
}
void OAICreative::setVpaid(const bool &vpaid) {
    m_vpaid = vpaid;
    m_vpaid_isSet = true;
}

bool OAICreative::is_vpaid_Set() const{
    return m_vpaid_isSet;
}

bool OAICreative::is_vpaid_Valid() const{
    return m_vpaid_isValid;
}

bool OAICreative::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_appended_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cm_placement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cm_tracking_ad.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_companion_creative_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_on_hover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expanding_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosting_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html5_video_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ias_campaign_monitoring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_js_tracker_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_item_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp3_audio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oba_icon.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ogg_audio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_html5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_mraid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_ping_for_attribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skippable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracker_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_universal_ad_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vast_tag_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpaid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreative::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
