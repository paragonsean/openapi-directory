/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomBiddingAlgorithmsApi_H
#define OAI_OAICustomBiddingAlgorithmsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomBiddingAlgorithm.h"
#include "OAICustomBiddingScript.h"
#include "OAICustomBiddingScriptRef.h"
#include "OAIListCustomBiddingAlgorithmsResponse.h"
#include "OAIListCustomBiddingScriptsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomBiddingAlgorithmsApi : public QObject {
    Q_OBJECT

public:
    OAICustomBiddingAlgorithmsApi(const int timeOut = 0);
    ~OAICustomBiddingAlgorithmsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_custom_bidding_algorithm OAICustomBiddingAlgorithm [optional]
    */
    virtual void displayvideo_customBiddingAlgorithms_create(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICustomBiddingAlgorithm> &oai_custom_bidding_algorithm = ::OpenAPI::OptionalParam<OAICustomBiddingAlgorithm>());

    /**
    * @param[in]  custom_bidding_algorithm_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  advertiser_id QString [optional]
    * @param[in]  partner_id QString [optional]
    */
    virtual void displayvideo_customBiddingAlgorithms_get(const QString &custom_bidding_algorithm_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &advertiser_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  advertiser_id QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  partner_id QString [optional]
    */
    virtual void displayvideo_customBiddingAlgorithms_list(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &advertiser_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  custom_bidding_algorithm_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_custom_bidding_algorithm OAICustomBiddingAlgorithm [optional]
    */
    virtual void displayvideo_customBiddingAlgorithms_patch(const QString &custom_bidding_algorithm_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICustomBiddingAlgorithm> &oai_custom_bidding_algorithm = ::OpenAPI::OptionalParam<OAICustomBiddingAlgorithm>());

    /**
    * @param[in]  custom_bidding_algorithm_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  advertiser_id QString [optional]
    * @param[in]  partner_id QString [optional]
    * @param[in]  oai_custom_bidding_script OAICustomBiddingScript [optional]
    */
    virtual void displayvideo_customBiddingAlgorithms_scripts_create(const QString &custom_bidding_algorithm_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &advertiser_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICustomBiddingScript> &oai_custom_bidding_script = ::OpenAPI::OptionalParam<OAICustomBiddingScript>());

    /**
    * @param[in]  custom_bidding_algorithm_id QString [required]
    * @param[in]  custom_bidding_script_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  advertiser_id QString [optional]
    * @param[in]  partner_id QString [optional]
    */
    virtual void displayvideo_customBiddingAlgorithms_scripts_get(const QString &custom_bidding_algorithm_id, const QString &custom_bidding_script_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &advertiser_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  custom_bidding_algorithm_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  advertiser_id QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  partner_id QString [optional]
    */
    virtual void displayvideo_customBiddingAlgorithms_scripts_list(const QString &custom_bidding_algorithm_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &advertiser_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  custom_bidding_algorithm_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  advertiser_id QString [optional]
    * @param[in]  partner_id QString [optional]
    */
    virtual void displayvideo_customBiddingAlgorithms_uploadScript(const QString &custom_bidding_algorithm_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &advertiser_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void displayvideo_customBiddingAlgorithms_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_customBiddingAlgorithms_getCallback(OAIHttpRequestWorker *worker);
    void displayvideo_customBiddingAlgorithms_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_customBiddingAlgorithms_patchCallback(OAIHttpRequestWorker *worker);
    void displayvideo_customBiddingAlgorithms_scripts_createCallback(OAIHttpRequestWorker *worker);
    void displayvideo_customBiddingAlgorithms_scripts_getCallback(OAIHttpRequestWorker *worker);
    void displayvideo_customBiddingAlgorithms_scripts_listCallback(OAIHttpRequestWorker *worker);
    void displayvideo_customBiddingAlgorithms_uploadScriptCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void displayvideo_customBiddingAlgorithms_createSignal(OAICustomBiddingAlgorithm summary);
    void displayvideo_customBiddingAlgorithms_getSignal(OAICustomBiddingAlgorithm summary);
    void displayvideo_customBiddingAlgorithms_listSignal(OAIListCustomBiddingAlgorithmsResponse summary);
    void displayvideo_customBiddingAlgorithms_patchSignal(OAICustomBiddingAlgorithm summary);
    void displayvideo_customBiddingAlgorithms_scripts_createSignal(OAICustomBiddingScript summary);
    void displayvideo_customBiddingAlgorithms_scripts_getSignal(OAICustomBiddingScript summary);
    void displayvideo_customBiddingAlgorithms_scripts_listSignal(OAIListCustomBiddingScriptsResponse summary);
    void displayvideo_customBiddingAlgorithms_uploadScriptSignal(OAICustomBiddingScriptRef summary);


    void displayvideo_customBiddingAlgorithms_createSignalFull(OAIHttpRequestWorker *worker, OAICustomBiddingAlgorithm summary);
    void displayvideo_customBiddingAlgorithms_getSignalFull(OAIHttpRequestWorker *worker, OAICustomBiddingAlgorithm summary);
    void displayvideo_customBiddingAlgorithms_listSignalFull(OAIHttpRequestWorker *worker, OAIListCustomBiddingAlgorithmsResponse summary);
    void displayvideo_customBiddingAlgorithms_patchSignalFull(OAIHttpRequestWorker *worker, OAICustomBiddingAlgorithm summary);
    void displayvideo_customBiddingAlgorithms_scripts_createSignalFull(OAIHttpRequestWorker *worker, OAICustomBiddingScript summary);
    void displayvideo_customBiddingAlgorithms_scripts_getSignalFull(OAIHttpRequestWorker *worker, OAICustomBiddingScript summary);
    void displayvideo_customBiddingAlgorithms_scripts_listSignalFull(OAIHttpRequestWorker *worker, OAIListCustomBiddingScriptsResponse summary);
    void displayvideo_customBiddingAlgorithms_uploadScriptSignalFull(OAIHttpRequestWorker *worker, OAICustomBiddingScriptRef summary);

    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_createSignalError() instead")
    void displayvideo_customBiddingAlgorithms_createSignalE(OAICustomBiddingAlgorithm summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_createSignalError(OAICustomBiddingAlgorithm summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_getSignalError() instead")
    void displayvideo_customBiddingAlgorithms_getSignalE(OAICustomBiddingAlgorithm summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_getSignalError(OAICustomBiddingAlgorithm summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_listSignalError() instead")
    void displayvideo_customBiddingAlgorithms_listSignalE(OAIListCustomBiddingAlgorithmsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_listSignalError(OAIListCustomBiddingAlgorithmsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_patchSignalError() instead")
    void displayvideo_customBiddingAlgorithms_patchSignalE(OAICustomBiddingAlgorithm summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_patchSignalError(OAICustomBiddingAlgorithm summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_scripts_createSignalError() instead")
    void displayvideo_customBiddingAlgorithms_scripts_createSignalE(OAICustomBiddingScript summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_scripts_createSignalError(OAICustomBiddingScript summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_scripts_getSignalError() instead")
    void displayvideo_customBiddingAlgorithms_scripts_getSignalE(OAICustomBiddingScript summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_scripts_getSignalError(OAICustomBiddingScript summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_scripts_listSignalError() instead")
    void displayvideo_customBiddingAlgorithms_scripts_listSignalE(OAIListCustomBiddingScriptsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_scripts_listSignalError(OAIListCustomBiddingScriptsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_uploadScriptSignalError() instead")
    void displayvideo_customBiddingAlgorithms_uploadScriptSignalE(OAICustomBiddingScriptRef summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_uploadScriptSignalError(OAICustomBiddingScriptRef summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_createSignalErrorFull() instead")
    void displayvideo_customBiddingAlgorithms_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_getSignalErrorFull() instead")
    void displayvideo_customBiddingAlgorithms_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_listSignalErrorFull() instead")
    void displayvideo_customBiddingAlgorithms_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_patchSignalErrorFull() instead")
    void displayvideo_customBiddingAlgorithms_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_scripts_createSignalErrorFull() instead")
    void displayvideo_customBiddingAlgorithms_scripts_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_scripts_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_scripts_getSignalErrorFull() instead")
    void displayvideo_customBiddingAlgorithms_scripts_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_scripts_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_scripts_listSignalErrorFull() instead")
    void displayvideo_customBiddingAlgorithms_scripts_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_scripts_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayvideo_customBiddingAlgorithms_uploadScriptSignalErrorFull() instead")
    void displayvideo_customBiddingAlgorithms_uploadScriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayvideo_customBiddingAlgorithms_uploadScriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
