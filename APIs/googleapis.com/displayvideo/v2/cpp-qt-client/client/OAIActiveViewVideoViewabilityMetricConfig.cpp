/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActiveViewVideoViewabilityMetricConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActiveViewVideoViewabilityMetricConfig::OAIActiveViewVideoViewabilityMetricConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActiveViewVideoViewabilityMetricConfig::OAIActiveViewVideoViewabilityMetricConfig() {
    this->initializeModel();
}

OAIActiveViewVideoViewabilityMetricConfig::~OAIActiveViewVideoViewabilityMetricConfig() {}

void OAIActiveViewVideoViewabilityMetricConfig::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_minimum_duration_isSet = false;
    m_minimum_duration_isValid = false;

    m_minimum_quartile_isSet = false;
    m_minimum_quartile_isValid = false;

    m_minimum_viewability_isSet = false;
    m_minimum_viewability_isValid = false;

    m_minimum_volume_isSet = false;
    m_minimum_volume_isValid = false;
}

void OAIActiveViewVideoViewabilityMetricConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActiveViewVideoViewabilityMetricConfig::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_minimum_duration_isValid = ::OpenAPI::fromJsonValue(m_minimum_duration, json[QString("minimumDuration")]);
    m_minimum_duration_isSet = !json[QString("minimumDuration")].isNull() && m_minimum_duration_isValid;

    m_minimum_quartile_isValid = ::OpenAPI::fromJsonValue(m_minimum_quartile, json[QString("minimumQuartile")]);
    m_minimum_quartile_isSet = !json[QString("minimumQuartile")].isNull() && m_minimum_quartile_isValid;

    m_minimum_viewability_isValid = ::OpenAPI::fromJsonValue(m_minimum_viewability, json[QString("minimumViewability")]);
    m_minimum_viewability_isSet = !json[QString("minimumViewability")].isNull() && m_minimum_viewability_isValid;

    m_minimum_volume_isValid = ::OpenAPI::fromJsonValue(m_minimum_volume, json[QString("minimumVolume")]);
    m_minimum_volume_isSet = !json[QString("minimumVolume")].isNull() && m_minimum_volume_isValid;
}

QString OAIActiveViewVideoViewabilityMetricConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActiveViewVideoViewabilityMetricConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_minimum_duration_isSet) {
        obj.insert(QString("minimumDuration"), ::OpenAPI::toJsonValue(m_minimum_duration));
    }
    if (m_minimum_quartile_isSet) {
        obj.insert(QString("minimumQuartile"), ::OpenAPI::toJsonValue(m_minimum_quartile));
    }
    if (m_minimum_viewability_isSet) {
        obj.insert(QString("minimumViewability"), ::OpenAPI::toJsonValue(m_minimum_viewability));
    }
    if (m_minimum_volume_isSet) {
        obj.insert(QString("minimumVolume"), ::OpenAPI::toJsonValue(m_minimum_volume));
    }
    return obj;
}

QString OAIActiveViewVideoViewabilityMetricConfig::getDisplayName() const {
    return m_display_name;
}
void OAIActiveViewVideoViewabilityMetricConfig::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIActiveViewVideoViewabilityMetricConfig::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIActiveViewVideoViewabilityMetricConfig::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIActiveViewVideoViewabilityMetricConfig::getMinimumDuration() const {
    return m_minimum_duration;
}
void OAIActiveViewVideoViewabilityMetricConfig::setMinimumDuration(const QString &minimum_duration) {
    m_minimum_duration = minimum_duration;
    m_minimum_duration_isSet = true;
}

bool OAIActiveViewVideoViewabilityMetricConfig::is_minimum_duration_Set() const{
    return m_minimum_duration_isSet;
}

bool OAIActiveViewVideoViewabilityMetricConfig::is_minimum_duration_Valid() const{
    return m_minimum_duration_isValid;
}

QString OAIActiveViewVideoViewabilityMetricConfig::getMinimumQuartile() const {
    return m_minimum_quartile;
}
void OAIActiveViewVideoViewabilityMetricConfig::setMinimumQuartile(const QString &minimum_quartile) {
    m_minimum_quartile = minimum_quartile;
    m_minimum_quartile_isSet = true;
}

bool OAIActiveViewVideoViewabilityMetricConfig::is_minimum_quartile_Set() const{
    return m_minimum_quartile_isSet;
}

bool OAIActiveViewVideoViewabilityMetricConfig::is_minimum_quartile_Valid() const{
    return m_minimum_quartile_isValid;
}

QString OAIActiveViewVideoViewabilityMetricConfig::getMinimumViewability() const {
    return m_minimum_viewability;
}
void OAIActiveViewVideoViewabilityMetricConfig::setMinimumViewability(const QString &minimum_viewability) {
    m_minimum_viewability = minimum_viewability;
    m_minimum_viewability_isSet = true;
}

bool OAIActiveViewVideoViewabilityMetricConfig::is_minimum_viewability_Set() const{
    return m_minimum_viewability_isSet;
}

bool OAIActiveViewVideoViewabilityMetricConfig::is_minimum_viewability_Valid() const{
    return m_minimum_viewability_isValid;
}

QString OAIActiveViewVideoViewabilityMetricConfig::getMinimumVolume() const {
    return m_minimum_volume;
}
void OAIActiveViewVideoViewabilityMetricConfig::setMinimumVolume(const QString &minimum_volume) {
    m_minimum_volume = minimum_volume;
    m_minimum_volume_isSet = true;
}

bool OAIActiveViewVideoViewabilityMetricConfig::is_minimum_volume_Set() const{
    return m_minimum_volume_isSet;
}

bool OAIActiveViewVideoViewabilityMetricConfig::is_minimum_volume_Valid() const{
    return m_minimum_volume_isValid;
}

bool OAIActiveViewVideoViewabilityMetricConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_quartile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_viewability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_volume_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActiveViewVideoViewabilityMetricConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
