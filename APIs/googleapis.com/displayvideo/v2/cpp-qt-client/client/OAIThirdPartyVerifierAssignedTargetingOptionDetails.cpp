/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThirdPartyVerifierAssignedTargetingOptionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThirdPartyVerifierAssignedTargetingOptionDetails::OAIThirdPartyVerifierAssignedTargetingOptionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThirdPartyVerifierAssignedTargetingOptionDetails::OAIThirdPartyVerifierAssignedTargetingOptionDetails() {
    this->initializeModel();
}

OAIThirdPartyVerifierAssignedTargetingOptionDetails::~OAIThirdPartyVerifierAssignedTargetingOptionDetails() {}

void OAIThirdPartyVerifierAssignedTargetingOptionDetails::initializeModel() {

    m_adloox_isSet = false;
    m_adloox_isValid = false;

    m_double_verify_isSet = false;
    m_double_verify_isValid = false;

    m_integral_ad_science_isSet = false;
    m_integral_ad_science_isValid = false;
}

void OAIThirdPartyVerifierAssignedTargetingOptionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThirdPartyVerifierAssignedTargetingOptionDetails::fromJsonObject(QJsonObject json) {

    m_adloox_isValid = ::OpenAPI::fromJsonValue(m_adloox, json[QString("adloox")]);
    m_adloox_isSet = !json[QString("adloox")].isNull() && m_adloox_isValid;

    m_double_verify_isValid = ::OpenAPI::fromJsonValue(m_double_verify, json[QString("doubleVerify")]);
    m_double_verify_isSet = !json[QString("doubleVerify")].isNull() && m_double_verify_isValid;

    m_integral_ad_science_isValid = ::OpenAPI::fromJsonValue(m_integral_ad_science, json[QString("integralAdScience")]);
    m_integral_ad_science_isSet = !json[QString("integralAdScience")].isNull() && m_integral_ad_science_isValid;
}

QString OAIThirdPartyVerifierAssignedTargetingOptionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThirdPartyVerifierAssignedTargetingOptionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_adloox.isSet()) {
        obj.insert(QString("adloox"), ::OpenAPI::toJsonValue(m_adloox));
    }
    if (m_double_verify.isSet()) {
        obj.insert(QString("doubleVerify"), ::OpenAPI::toJsonValue(m_double_verify));
    }
    if (m_integral_ad_science.isSet()) {
        obj.insert(QString("integralAdScience"), ::OpenAPI::toJsonValue(m_integral_ad_science));
    }
    return obj;
}

OAIAdloox OAIThirdPartyVerifierAssignedTargetingOptionDetails::getAdloox() const {
    return m_adloox;
}
void OAIThirdPartyVerifierAssignedTargetingOptionDetails::setAdloox(const OAIAdloox &adloox) {
    m_adloox = adloox;
    m_adloox_isSet = true;
}

bool OAIThirdPartyVerifierAssignedTargetingOptionDetails::is_adloox_Set() const{
    return m_adloox_isSet;
}

bool OAIThirdPartyVerifierAssignedTargetingOptionDetails::is_adloox_Valid() const{
    return m_adloox_isValid;
}

OAIDoubleVerify OAIThirdPartyVerifierAssignedTargetingOptionDetails::getDoubleVerify() const {
    return m_double_verify;
}
void OAIThirdPartyVerifierAssignedTargetingOptionDetails::setDoubleVerify(const OAIDoubleVerify &double_verify) {
    m_double_verify = double_verify;
    m_double_verify_isSet = true;
}

bool OAIThirdPartyVerifierAssignedTargetingOptionDetails::is_double_verify_Set() const{
    return m_double_verify_isSet;
}

bool OAIThirdPartyVerifierAssignedTargetingOptionDetails::is_double_verify_Valid() const{
    return m_double_verify_isValid;
}

OAIIntegralAdScience OAIThirdPartyVerifierAssignedTargetingOptionDetails::getIntegralAdScience() const {
    return m_integral_ad_science;
}
void OAIThirdPartyVerifierAssignedTargetingOptionDetails::setIntegralAdScience(const OAIIntegralAdScience &integral_ad_science) {
    m_integral_ad_science = integral_ad_science;
    m_integral_ad_science_isSet = true;
}

bool OAIThirdPartyVerifierAssignedTargetingOptionDetails::is_integral_ad_science_Set() const{
    return m_integral_ad_science_isSet;
}

bool OAIThirdPartyVerifierAssignedTargetingOptionDetails::is_integral_ad_science_Valid() const{
    return m_integral_ad_science_isValid;
}

bool OAIThirdPartyVerifierAssignedTargetingOptionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adloox.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_verify.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integral_ad_science.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThirdPartyVerifierAssignedTargetingOptionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
