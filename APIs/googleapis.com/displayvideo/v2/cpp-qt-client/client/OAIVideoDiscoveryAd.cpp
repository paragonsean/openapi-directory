/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoDiscoveryAd.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoDiscoveryAd::OAIVideoDiscoveryAd(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoDiscoveryAd::OAIVideoDiscoveryAd() {
    this->initializeModel();
}

OAIVideoDiscoveryAd::~OAIVideoDiscoveryAd() {}

void OAIVideoDiscoveryAd::initializeModel() {

    m_description1_isSet = false;
    m_description1_isValid = false;

    m_description2_isSet = false;
    m_description2_isValid = false;

    m_headline_isSet = false;
    m_headline_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;
}

void OAIVideoDiscoveryAd::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoDiscoveryAd::fromJsonObject(QJsonObject json) {

    m_description1_isValid = ::OpenAPI::fromJsonValue(m_description1, json[QString("description1")]);
    m_description1_isSet = !json[QString("description1")].isNull() && m_description1_isValid;

    m_description2_isValid = ::OpenAPI::fromJsonValue(m_description2, json[QString("description2")]);
    m_description2_isSet = !json[QString("description2")].isNull() && m_description2_isValid;

    m_headline_isValid = ::OpenAPI::fromJsonValue(m_headline, json[QString("headline")]);
    m_headline_isSet = !json[QString("headline")].isNull() && m_headline_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;
}

QString OAIVideoDiscoveryAd::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoDiscoveryAd::asJsonObject() const {
    QJsonObject obj;
    if (m_description1_isSet) {
        obj.insert(QString("description1"), ::OpenAPI::toJsonValue(m_description1));
    }
    if (m_description2_isSet) {
        obj.insert(QString("description2"), ::OpenAPI::toJsonValue(m_description2));
    }
    if (m_headline_isSet) {
        obj.insert(QString("headline"), ::OpenAPI::toJsonValue(m_headline));
    }
    if (m_thumbnail_isSet) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    if (m_video.isSet()) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    return obj;
}

QString OAIVideoDiscoveryAd::getDescription1() const {
    return m_description1;
}
void OAIVideoDiscoveryAd::setDescription1(const QString &description1) {
    m_description1 = description1;
    m_description1_isSet = true;
}

bool OAIVideoDiscoveryAd::is_description1_Set() const{
    return m_description1_isSet;
}

bool OAIVideoDiscoveryAd::is_description1_Valid() const{
    return m_description1_isValid;
}

QString OAIVideoDiscoveryAd::getDescription2() const {
    return m_description2;
}
void OAIVideoDiscoveryAd::setDescription2(const QString &description2) {
    m_description2 = description2;
    m_description2_isSet = true;
}

bool OAIVideoDiscoveryAd::is_description2_Set() const{
    return m_description2_isSet;
}

bool OAIVideoDiscoveryAd::is_description2_Valid() const{
    return m_description2_isValid;
}

QString OAIVideoDiscoveryAd::getHeadline() const {
    return m_headline;
}
void OAIVideoDiscoveryAd::setHeadline(const QString &headline) {
    m_headline = headline;
    m_headline_isSet = true;
}

bool OAIVideoDiscoveryAd::is_headline_Set() const{
    return m_headline_isSet;
}

bool OAIVideoDiscoveryAd::is_headline_Valid() const{
    return m_headline_isValid;
}

QString OAIVideoDiscoveryAd::getThumbnail() const {
    return m_thumbnail;
}
void OAIVideoDiscoveryAd::setThumbnail(const QString &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIVideoDiscoveryAd::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIVideoDiscoveryAd::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

OAIYoutubeVideoDetails OAIVideoDiscoveryAd::getVideo() const {
    return m_video;
}
void OAIVideoDiscoveryAd::setVideo(const OAIYoutubeVideoDetails &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAIVideoDiscoveryAd::is_video_Set() const{
    return m_video_isSet;
}

bool OAIVideoDiscoveryAd::is_video_Valid() const{
    return m_video_isValid;
}

bool OAIVideoDiscoveryAd::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoDiscoveryAd::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
