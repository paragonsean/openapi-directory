/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFloodlightActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFloodlightActivity::OAIFloodlightActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFloodlightActivity::OAIFloodlightActivity() {
    this->initializeModel();
}

OAIFloodlightActivity::~OAIFloodlightActivity() {}

void OAIFloodlightActivity::initializeModel() {

    m_advertiser_ids_isSet = false;
    m_advertiser_ids_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_floodlight_activity_id_isSet = false;
    m_floodlight_activity_id_isValid = false;

    m_floodlight_group_id_isSet = false;
    m_floodlight_group_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_remarketing_configs_isSet = false;
    m_remarketing_configs_isValid = false;

    m_serving_status_isSet = false;
    m_serving_status_isValid = false;

    m_ssl_required_isSet = false;
    m_ssl_required_isValid = false;
}

void OAIFloodlightActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFloodlightActivity::fromJsonObject(QJsonObject json) {

    m_advertiser_ids_isValid = ::OpenAPI::fromJsonValue(m_advertiser_ids, json[QString("advertiserIds")]);
    m_advertiser_ids_isSet = !json[QString("advertiserIds")].isNull() && m_advertiser_ids_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_floodlight_activity_id_isValid = ::OpenAPI::fromJsonValue(m_floodlight_activity_id, json[QString("floodlightActivityId")]);
    m_floodlight_activity_id_isSet = !json[QString("floodlightActivityId")].isNull() && m_floodlight_activity_id_isValid;

    m_floodlight_group_id_isValid = ::OpenAPI::fromJsonValue(m_floodlight_group_id, json[QString("floodlightGroupId")]);
    m_floodlight_group_id_isSet = !json[QString("floodlightGroupId")].isNull() && m_floodlight_group_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_remarketing_configs_isValid = ::OpenAPI::fromJsonValue(m_remarketing_configs, json[QString("remarketingConfigs")]);
    m_remarketing_configs_isSet = !json[QString("remarketingConfigs")].isNull() && m_remarketing_configs_isValid;

    m_serving_status_isValid = ::OpenAPI::fromJsonValue(m_serving_status, json[QString("servingStatus")]);
    m_serving_status_isSet = !json[QString("servingStatus")].isNull() && m_serving_status_isValid;

    m_ssl_required_isValid = ::OpenAPI::fromJsonValue(m_ssl_required, json[QString("sslRequired")]);
    m_ssl_required_isSet = !json[QString("sslRequired")].isNull() && m_ssl_required_isValid;
}

QString OAIFloodlightActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFloodlightActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_advertiser_ids.size() > 0) {
        obj.insert(QString("advertiserIds"), ::OpenAPI::toJsonValue(m_advertiser_ids));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_floodlight_activity_id_isSet) {
        obj.insert(QString("floodlightActivityId"), ::OpenAPI::toJsonValue(m_floodlight_activity_id));
    }
    if (m_floodlight_group_id_isSet) {
        obj.insert(QString("floodlightGroupId"), ::OpenAPI::toJsonValue(m_floodlight_group_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_remarketing_configs.size() > 0) {
        obj.insert(QString("remarketingConfigs"), ::OpenAPI::toJsonValue(m_remarketing_configs));
    }
    if (m_serving_status_isSet) {
        obj.insert(QString("servingStatus"), ::OpenAPI::toJsonValue(m_serving_status));
    }
    if (m_ssl_required_isSet) {
        obj.insert(QString("sslRequired"), ::OpenAPI::toJsonValue(m_ssl_required));
    }
    return obj;
}

QList<QString> OAIFloodlightActivity::getAdvertiserIds() const {
    return m_advertiser_ids;
}
void OAIFloodlightActivity::setAdvertiserIds(const QList<QString> &advertiser_ids) {
    m_advertiser_ids = advertiser_ids;
    m_advertiser_ids_isSet = true;
}

bool OAIFloodlightActivity::is_advertiser_ids_Set() const{
    return m_advertiser_ids_isSet;
}

bool OAIFloodlightActivity::is_advertiser_ids_Valid() const{
    return m_advertiser_ids_isValid;
}

QString OAIFloodlightActivity::getDisplayName() const {
    return m_display_name;
}
void OAIFloodlightActivity::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIFloodlightActivity::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIFloodlightActivity::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIFloodlightActivity::getFloodlightActivityId() const {
    return m_floodlight_activity_id;
}
void OAIFloodlightActivity::setFloodlightActivityId(const QString &floodlight_activity_id) {
    m_floodlight_activity_id = floodlight_activity_id;
    m_floodlight_activity_id_isSet = true;
}

bool OAIFloodlightActivity::is_floodlight_activity_id_Set() const{
    return m_floodlight_activity_id_isSet;
}

bool OAIFloodlightActivity::is_floodlight_activity_id_Valid() const{
    return m_floodlight_activity_id_isValid;
}

QString OAIFloodlightActivity::getFloodlightGroupId() const {
    return m_floodlight_group_id;
}
void OAIFloodlightActivity::setFloodlightGroupId(const QString &floodlight_group_id) {
    m_floodlight_group_id = floodlight_group_id;
    m_floodlight_group_id_isSet = true;
}

bool OAIFloodlightActivity::is_floodlight_group_id_Set() const{
    return m_floodlight_group_id_isSet;
}

bool OAIFloodlightActivity::is_floodlight_group_id_Valid() const{
    return m_floodlight_group_id_isValid;
}

QString OAIFloodlightActivity::getName() const {
    return m_name;
}
void OAIFloodlightActivity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFloodlightActivity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFloodlightActivity::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIRemarketingConfig> OAIFloodlightActivity::getRemarketingConfigs() const {
    return m_remarketing_configs;
}
void OAIFloodlightActivity::setRemarketingConfigs(const QList<OAIRemarketingConfig> &remarketing_configs) {
    m_remarketing_configs = remarketing_configs;
    m_remarketing_configs_isSet = true;
}

bool OAIFloodlightActivity::is_remarketing_configs_Set() const{
    return m_remarketing_configs_isSet;
}

bool OAIFloodlightActivity::is_remarketing_configs_Valid() const{
    return m_remarketing_configs_isValid;
}

QString OAIFloodlightActivity::getServingStatus() const {
    return m_serving_status;
}
void OAIFloodlightActivity::setServingStatus(const QString &serving_status) {
    m_serving_status = serving_status;
    m_serving_status_isSet = true;
}

bool OAIFloodlightActivity::is_serving_status_Set() const{
    return m_serving_status_isSet;
}

bool OAIFloodlightActivity::is_serving_status_Valid() const{
    return m_serving_status_isValid;
}

bool OAIFloodlightActivity::isSslRequired() const {
    return m_ssl_required;
}
void OAIFloodlightActivity::setSslRequired(const bool &ssl_required) {
    m_ssl_required = ssl_required;
    m_ssl_required_isSet = true;
}

bool OAIFloodlightActivity::is_ssl_required_Set() const{
    return m_ssl_required_isSet;
}

bool OAIFloodlightActivity::is_ssl_required_Valid() const{
    return m_ssl_required_isValid;
}

bool OAIFloodlightActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertiser_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remarketing_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_serving_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_required_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFloodlightActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
