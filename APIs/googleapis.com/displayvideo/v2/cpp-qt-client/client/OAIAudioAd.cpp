/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioAd.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioAd::OAIAudioAd(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioAd::OAIAudioAd() {
    this->initializeModel();
}

OAIAudioAd::~OAIAudioAd() {}

void OAIAudioAd::initializeModel() {

    m_display_url_isSet = false;
    m_display_url_isValid = false;

    m_final_url_isSet = false;
    m_final_url_isValid = false;

    m_tracking_url_isSet = false;
    m_tracking_url_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;
}

void OAIAudioAd::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioAd::fromJsonObject(QJsonObject json) {

    m_display_url_isValid = ::OpenAPI::fromJsonValue(m_display_url, json[QString("displayUrl")]);
    m_display_url_isSet = !json[QString("displayUrl")].isNull() && m_display_url_isValid;

    m_final_url_isValid = ::OpenAPI::fromJsonValue(m_final_url, json[QString("finalUrl")]);
    m_final_url_isSet = !json[QString("finalUrl")].isNull() && m_final_url_isValid;

    m_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_tracking_url, json[QString("trackingUrl")]);
    m_tracking_url_isSet = !json[QString("trackingUrl")].isNull() && m_tracking_url_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;
}

QString OAIAudioAd::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioAd::asJsonObject() const {
    QJsonObject obj;
    if (m_display_url_isSet) {
        obj.insert(QString("displayUrl"), ::OpenAPI::toJsonValue(m_display_url));
    }
    if (m_final_url_isSet) {
        obj.insert(QString("finalUrl"), ::OpenAPI::toJsonValue(m_final_url));
    }
    if (m_tracking_url_isSet) {
        obj.insert(QString("trackingUrl"), ::OpenAPI::toJsonValue(m_tracking_url));
    }
    if (m_video.isSet()) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    return obj;
}

QString OAIAudioAd::getDisplayUrl() const {
    return m_display_url;
}
void OAIAudioAd::setDisplayUrl(const QString &display_url) {
    m_display_url = display_url;
    m_display_url_isSet = true;
}

bool OAIAudioAd::is_display_url_Set() const{
    return m_display_url_isSet;
}

bool OAIAudioAd::is_display_url_Valid() const{
    return m_display_url_isValid;
}

QString OAIAudioAd::getFinalUrl() const {
    return m_final_url;
}
void OAIAudioAd::setFinalUrl(const QString &final_url) {
    m_final_url = final_url;
    m_final_url_isSet = true;
}

bool OAIAudioAd::is_final_url_Set() const{
    return m_final_url_isSet;
}

bool OAIAudioAd::is_final_url_Valid() const{
    return m_final_url_isValid;
}

QString OAIAudioAd::getTrackingUrl() const {
    return m_tracking_url;
}
void OAIAudioAd::setTrackingUrl(const QString &tracking_url) {
    m_tracking_url = tracking_url;
    m_tracking_url_isSet = true;
}

bool OAIAudioAd::is_tracking_url_Set() const{
    return m_tracking_url_isSet;
}

bool OAIAudioAd::is_tracking_url_Valid() const{
    return m_tracking_url_isValid;
}

OAIYoutubeVideoDetails OAIAudioAd::getVideo() const {
    return m_video;
}
void OAIAudioAd::setVideo(const OAIYoutubeVideoDetails &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAIAudioAd::is_video_Set() const{
    return m_video_isSet;
}

bool OAIAudioAd::is_video_Valid() const{
    return m_video_isValid;
}

bool OAIAudioAd::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioAd::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
