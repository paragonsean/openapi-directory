/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomBiddingAlgorithm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomBiddingAlgorithm::OAICustomBiddingAlgorithm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomBiddingAlgorithm::OAICustomBiddingAlgorithm() {
    this->initializeModel();
}

OAICustomBiddingAlgorithm::~OAICustomBiddingAlgorithm() {}

void OAICustomBiddingAlgorithm::initializeModel() {

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_custom_bidding_algorithm_id_isSet = false;
    m_custom_bidding_algorithm_id_isValid = false;

    m_custom_bidding_algorithm_type_isSet = false;
    m_custom_bidding_algorithm_type_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_entity_status_isSet = false;
    m_entity_status_isValid = false;

    m_model_details_isSet = false;
    m_model_details_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;

    m_shared_advertiser_ids_isSet = false;
    m_shared_advertiser_ids_isValid = false;
}

void OAICustomBiddingAlgorithm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomBiddingAlgorithm::fromJsonObject(QJsonObject json) {

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_custom_bidding_algorithm_id_isValid = ::OpenAPI::fromJsonValue(m_custom_bidding_algorithm_id, json[QString("customBiddingAlgorithmId")]);
    m_custom_bidding_algorithm_id_isSet = !json[QString("customBiddingAlgorithmId")].isNull() && m_custom_bidding_algorithm_id_isValid;

    m_custom_bidding_algorithm_type_isValid = ::OpenAPI::fromJsonValue(m_custom_bidding_algorithm_type, json[QString("customBiddingAlgorithmType")]);
    m_custom_bidding_algorithm_type_isSet = !json[QString("customBiddingAlgorithmType")].isNull() && m_custom_bidding_algorithm_type_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_entity_status_isValid = ::OpenAPI::fromJsonValue(m_entity_status, json[QString("entityStatus")]);
    m_entity_status_isSet = !json[QString("entityStatus")].isNull() && m_entity_status_isValid;

    m_model_details_isValid = ::OpenAPI::fromJsonValue(m_model_details, json[QString("modelDetails")]);
    m_model_details_isSet = !json[QString("modelDetails")].isNull() && m_model_details_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partnerId")]);
    m_partner_id_isSet = !json[QString("partnerId")].isNull() && m_partner_id_isValid;

    m_shared_advertiser_ids_isValid = ::OpenAPI::fromJsonValue(m_shared_advertiser_ids, json[QString("sharedAdvertiserIds")]);
    m_shared_advertiser_ids_isSet = !json[QString("sharedAdvertiserIds")].isNull() && m_shared_advertiser_ids_isValid;
}

QString OAICustomBiddingAlgorithm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomBiddingAlgorithm::asJsonObject() const {
    QJsonObject obj;
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_custom_bidding_algorithm_id_isSet) {
        obj.insert(QString("customBiddingAlgorithmId"), ::OpenAPI::toJsonValue(m_custom_bidding_algorithm_id));
    }
    if (m_custom_bidding_algorithm_type_isSet) {
        obj.insert(QString("customBiddingAlgorithmType"), ::OpenAPI::toJsonValue(m_custom_bidding_algorithm_type));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_entity_status_isSet) {
        obj.insert(QString("entityStatus"), ::OpenAPI::toJsonValue(m_entity_status));
    }
    if (m_model_details.size() > 0) {
        obj.insert(QString("modelDetails"), ::OpenAPI::toJsonValue(m_model_details));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_partner_id_isSet) {
        obj.insert(QString("partnerId"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    if (m_shared_advertiser_ids.size() > 0) {
        obj.insert(QString("sharedAdvertiserIds"), ::OpenAPI::toJsonValue(m_shared_advertiser_ids));
    }
    return obj;
}

QString OAICustomBiddingAlgorithm::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAICustomBiddingAlgorithm::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAICustomBiddingAlgorithm::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAICustomBiddingAlgorithm::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

QString OAICustomBiddingAlgorithm::getCustomBiddingAlgorithmId() const {
    return m_custom_bidding_algorithm_id;
}
void OAICustomBiddingAlgorithm::setCustomBiddingAlgorithmId(const QString &custom_bidding_algorithm_id) {
    m_custom_bidding_algorithm_id = custom_bidding_algorithm_id;
    m_custom_bidding_algorithm_id_isSet = true;
}

bool OAICustomBiddingAlgorithm::is_custom_bidding_algorithm_id_Set() const{
    return m_custom_bidding_algorithm_id_isSet;
}

bool OAICustomBiddingAlgorithm::is_custom_bidding_algorithm_id_Valid() const{
    return m_custom_bidding_algorithm_id_isValid;
}

QString OAICustomBiddingAlgorithm::getCustomBiddingAlgorithmType() const {
    return m_custom_bidding_algorithm_type;
}
void OAICustomBiddingAlgorithm::setCustomBiddingAlgorithmType(const QString &custom_bidding_algorithm_type) {
    m_custom_bidding_algorithm_type = custom_bidding_algorithm_type;
    m_custom_bidding_algorithm_type_isSet = true;
}

bool OAICustomBiddingAlgorithm::is_custom_bidding_algorithm_type_Set() const{
    return m_custom_bidding_algorithm_type_isSet;
}

bool OAICustomBiddingAlgorithm::is_custom_bidding_algorithm_type_Valid() const{
    return m_custom_bidding_algorithm_type_isValid;
}

QString OAICustomBiddingAlgorithm::getDisplayName() const {
    return m_display_name;
}
void OAICustomBiddingAlgorithm::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICustomBiddingAlgorithm::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICustomBiddingAlgorithm::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICustomBiddingAlgorithm::getEntityStatus() const {
    return m_entity_status;
}
void OAICustomBiddingAlgorithm::setEntityStatus(const QString &entity_status) {
    m_entity_status = entity_status;
    m_entity_status_isSet = true;
}

bool OAICustomBiddingAlgorithm::is_entity_status_Set() const{
    return m_entity_status_isSet;
}

bool OAICustomBiddingAlgorithm::is_entity_status_Valid() const{
    return m_entity_status_isValid;
}

QList<OAICustomBiddingModelDetails> OAICustomBiddingAlgorithm::getModelDetails() const {
    return m_model_details;
}
void OAICustomBiddingAlgorithm::setModelDetails(const QList<OAICustomBiddingModelDetails> &model_details) {
    m_model_details = model_details;
    m_model_details_isSet = true;
}

bool OAICustomBiddingAlgorithm::is_model_details_Set() const{
    return m_model_details_isSet;
}

bool OAICustomBiddingAlgorithm::is_model_details_Valid() const{
    return m_model_details_isValid;
}

QString OAICustomBiddingAlgorithm::getName() const {
    return m_name;
}
void OAICustomBiddingAlgorithm::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomBiddingAlgorithm::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomBiddingAlgorithm::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICustomBiddingAlgorithm::getPartnerId() const {
    return m_partner_id;
}
void OAICustomBiddingAlgorithm::setPartnerId(const QString &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAICustomBiddingAlgorithm::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAICustomBiddingAlgorithm::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

QList<QString> OAICustomBiddingAlgorithm::getSharedAdvertiserIds() const {
    return m_shared_advertiser_ids;
}
void OAICustomBiddingAlgorithm::setSharedAdvertiserIds(const QList<QString> &shared_advertiser_ids) {
    m_shared_advertiser_ids = shared_advertiser_ids;
    m_shared_advertiser_ids_isSet = true;
}

bool OAICustomBiddingAlgorithm::is_shared_advertiser_ids_Set() const{
    return m_shared_advertiser_ids_isSet;
}

bool OAICustomBiddingAlgorithm::is_shared_advertiser_ids_Valid() const{
    return m_shared_advertiser_ids_isValid;
}

bool OAICustomBiddingAlgorithm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_bidding_algorithm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_bidding_algorithm_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_advertiser_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomBiddingAlgorithm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
