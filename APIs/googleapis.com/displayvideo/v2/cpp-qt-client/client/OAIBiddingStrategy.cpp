/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBiddingStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBiddingStrategy::OAIBiddingStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBiddingStrategy::OAIBiddingStrategy() {
    this->initializeModel();
}

OAIBiddingStrategy::~OAIBiddingStrategy() {}

void OAIBiddingStrategy::initializeModel() {

    m_fixed_bid_isSet = false;
    m_fixed_bid_isValid = false;

    m_maximize_spend_auto_bid_isSet = false;
    m_maximize_spend_auto_bid_isValid = false;

    m_performance_goal_auto_bid_isSet = false;
    m_performance_goal_auto_bid_isValid = false;
}

void OAIBiddingStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBiddingStrategy::fromJsonObject(QJsonObject json) {

    m_fixed_bid_isValid = ::OpenAPI::fromJsonValue(m_fixed_bid, json[QString("fixedBid")]);
    m_fixed_bid_isSet = !json[QString("fixedBid")].isNull() && m_fixed_bid_isValid;

    m_maximize_spend_auto_bid_isValid = ::OpenAPI::fromJsonValue(m_maximize_spend_auto_bid, json[QString("maximizeSpendAutoBid")]);
    m_maximize_spend_auto_bid_isSet = !json[QString("maximizeSpendAutoBid")].isNull() && m_maximize_spend_auto_bid_isValid;

    m_performance_goal_auto_bid_isValid = ::OpenAPI::fromJsonValue(m_performance_goal_auto_bid, json[QString("performanceGoalAutoBid")]);
    m_performance_goal_auto_bid_isSet = !json[QString("performanceGoalAutoBid")].isNull() && m_performance_goal_auto_bid_isValid;
}

QString OAIBiddingStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBiddingStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_fixed_bid.isSet()) {
        obj.insert(QString("fixedBid"), ::OpenAPI::toJsonValue(m_fixed_bid));
    }
    if (m_maximize_spend_auto_bid.isSet()) {
        obj.insert(QString("maximizeSpendAutoBid"), ::OpenAPI::toJsonValue(m_maximize_spend_auto_bid));
    }
    if (m_performance_goal_auto_bid.isSet()) {
        obj.insert(QString("performanceGoalAutoBid"), ::OpenAPI::toJsonValue(m_performance_goal_auto_bid));
    }
    return obj;
}

OAIFixedBidStrategy OAIBiddingStrategy::getFixedBid() const {
    return m_fixed_bid;
}
void OAIBiddingStrategy::setFixedBid(const OAIFixedBidStrategy &fixed_bid) {
    m_fixed_bid = fixed_bid;
    m_fixed_bid_isSet = true;
}

bool OAIBiddingStrategy::is_fixed_bid_Set() const{
    return m_fixed_bid_isSet;
}

bool OAIBiddingStrategy::is_fixed_bid_Valid() const{
    return m_fixed_bid_isValid;
}

OAIMaximizeSpendBidStrategy OAIBiddingStrategy::getMaximizeSpendAutoBid() const {
    return m_maximize_spend_auto_bid;
}
void OAIBiddingStrategy::setMaximizeSpendAutoBid(const OAIMaximizeSpendBidStrategy &maximize_spend_auto_bid) {
    m_maximize_spend_auto_bid = maximize_spend_auto_bid;
    m_maximize_spend_auto_bid_isSet = true;
}

bool OAIBiddingStrategy::is_maximize_spend_auto_bid_Set() const{
    return m_maximize_spend_auto_bid_isSet;
}

bool OAIBiddingStrategy::is_maximize_spend_auto_bid_Valid() const{
    return m_maximize_spend_auto_bid_isValid;
}

OAIPerformanceGoalBidStrategy OAIBiddingStrategy::getPerformanceGoalAutoBid() const {
    return m_performance_goal_auto_bid;
}
void OAIBiddingStrategy::setPerformanceGoalAutoBid(const OAIPerformanceGoalBidStrategy &performance_goal_auto_bid) {
    m_performance_goal_auto_bid = performance_goal_auto_bid;
    m_performance_goal_auto_bid_isSet = true;
}

bool OAIBiddingStrategy::is_performance_goal_auto_bid_Set() const{
    return m_performance_goal_auto_bid_isSet;
}

bool OAIBiddingStrategy::is_performance_goal_auto_bid_Valid() const{
    return m_performance_goal_auto_bid_isValid;
}

bool OAIBiddingStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fixed_bid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximize_spend_auto_bid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_goal_auto_bid.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBiddingStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
