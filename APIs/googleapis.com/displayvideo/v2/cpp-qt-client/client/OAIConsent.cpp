/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsent::OAIConsent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsent::OAIConsent() {
    this->initializeModel();
}

OAIConsent::~OAIConsent() {}

void OAIConsent::initializeModel() {

    m_ad_personalization_isSet = false;
    m_ad_personalization_isValid = false;

    m_ad_user_data_isSet = false;
    m_ad_user_data_isValid = false;
}

void OAIConsent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsent::fromJsonObject(QJsonObject json) {

    m_ad_personalization_isValid = ::OpenAPI::fromJsonValue(m_ad_personalization, json[QString("adPersonalization")]);
    m_ad_personalization_isSet = !json[QString("adPersonalization")].isNull() && m_ad_personalization_isValid;

    m_ad_user_data_isValid = ::OpenAPI::fromJsonValue(m_ad_user_data, json[QString("adUserData")]);
    m_ad_user_data_isSet = !json[QString("adUserData")].isNull() && m_ad_user_data_isValid;
}

QString OAIConsent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsent::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_personalization_isSet) {
        obj.insert(QString("adPersonalization"), ::OpenAPI::toJsonValue(m_ad_personalization));
    }
    if (m_ad_user_data_isSet) {
        obj.insert(QString("adUserData"), ::OpenAPI::toJsonValue(m_ad_user_data));
    }
    return obj;
}

QString OAIConsent::getAdPersonalization() const {
    return m_ad_personalization;
}
void OAIConsent::setAdPersonalization(const QString &ad_personalization) {
    m_ad_personalization = ad_personalization;
    m_ad_personalization_isSet = true;
}

bool OAIConsent::is_ad_personalization_Set() const{
    return m_ad_personalization_isSet;
}

bool OAIConsent::is_ad_personalization_Valid() const{
    return m_ad_personalization_isValid;
}

QString OAIConsent::getAdUserData() const {
    return m_ad_user_data;
}
void OAIConsent::setAdUserData(const QString &ad_user_data) {
    m_ad_user_data = ad_user_data;
    m_ad_user_data_isSet = true;
}

bool OAIConsent::is_ad_user_data_Set() const{
    return m_ad_user_data_isSet;
}

bool OAIConsent::is_ad_user_data_Valid() const{
    return m_ad_user_data_isValid;
}

bool OAIConsent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_personalization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_user_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
