/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMobileDeviceIdList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMobileDeviceIdList::OAIMobileDeviceIdList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMobileDeviceIdList::OAIMobileDeviceIdList() {
    this->initializeModel();
}

OAIMobileDeviceIdList::~OAIMobileDeviceIdList() {}

void OAIMobileDeviceIdList::initializeModel() {

    m_consent_isSet = false;
    m_consent_isValid = false;

    m_mobile_device_ids_isSet = false;
    m_mobile_device_ids_isValid = false;
}

void OAIMobileDeviceIdList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMobileDeviceIdList::fromJsonObject(QJsonObject json) {

    m_consent_isValid = ::OpenAPI::fromJsonValue(m_consent, json[QString("consent")]);
    m_consent_isSet = !json[QString("consent")].isNull() && m_consent_isValid;

    m_mobile_device_ids_isValid = ::OpenAPI::fromJsonValue(m_mobile_device_ids, json[QString("mobileDeviceIds")]);
    m_mobile_device_ids_isSet = !json[QString("mobileDeviceIds")].isNull() && m_mobile_device_ids_isValid;
}

QString OAIMobileDeviceIdList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMobileDeviceIdList::asJsonObject() const {
    QJsonObject obj;
    if (m_consent.isSet()) {
        obj.insert(QString("consent"), ::OpenAPI::toJsonValue(m_consent));
    }
    if (m_mobile_device_ids.size() > 0) {
        obj.insert(QString("mobileDeviceIds"), ::OpenAPI::toJsonValue(m_mobile_device_ids));
    }
    return obj;
}

OAIConsent OAIMobileDeviceIdList::getConsent() const {
    return m_consent;
}
void OAIMobileDeviceIdList::setConsent(const OAIConsent &consent) {
    m_consent = consent;
    m_consent_isSet = true;
}

bool OAIMobileDeviceIdList::is_consent_Set() const{
    return m_consent_isSet;
}

bool OAIMobileDeviceIdList::is_consent_Valid() const{
    return m_consent_isValid;
}

QList<QString> OAIMobileDeviceIdList::getMobileDeviceIds() const {
    return m_mobile_device_ids;
}
void OAIMobileDeviceIdList::setMobileDeviceIds(const QList<QString> &mobile_device_ids) {
    m_mobile_device_ids = mobile_device_ids;
    m_mobile_device_ids_isSet = true;
}

bool OAIMobileDeviceIdList::is_mobile_device_ids_Set() const{
    return m_mobile_device_ids_isSet;
}

bool OAIMobileDeviceIdList::is_mobile_device_ids_Valid() const{
    return m_mobile_device_ids_isValid;
}

bool OAIMobileDeviceIdList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_device_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMobileDeviceIdList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
