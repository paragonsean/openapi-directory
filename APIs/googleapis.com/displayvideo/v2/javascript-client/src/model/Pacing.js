/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Pacing model module.
 * @module model/Pacing
 * @version v2
 */
class Pacing {
    /**
     * Constructs a new <code>Pacing</code>.
     * Settings that control the rate at which a budget is spent.
     * @alias module:model/Pacing
     */
    constructor() { 
        
        Pacing.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Pacing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pacing} obj Optional instance to populate.
     * @return {module:model/Pacing} The populated <code>Pacing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pacing();

            if (data.hasOwnProperty('dailyMaxImpressions')) {
                obj['dailyMaxImpressions'] = ApiClient.convertToType(data['dailyMaxImpressions'], 'String');
            }
            if (data.hasOwnProperty('dailyMaxMicros')) {
                obj['dailyMaxMicros'] = ApiClient.convertToType(data['dailyMaxMicros'], 'String');
            }
            if (data.hasOwnProperty('pacingPeriod')) {
                obj['pacingPeriod'] = ApiClient.convertToType(data['pacingPeriod'], 'String');
            }
            if (data.hasOwnProperty('pacingType')) {
                obj['pacingType'] = ApiClient.convertToType(data['pacingType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pacing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pacing</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dailyMaxImpressions'] && !(typeof data['dailyMaxImpressions'] === 'string' || data['dailyMaxImpressions'] instanceof String)) {
            throw new Error("Expected the field `dailyMaxImpressions` to be a primitive type in the JSON string but got " + data['dailyMaxImpressions']);
        }
        // ensure the json data is a string
        if (data['dailyMaxMicros'] && !(typeof data['dailyMaxMicros'] === 'string' || data['dailyMaxMicros'] instanceof String)) {
            throw new Error("Expected the field `dailyMaxMicros` to be a primitive type in the JSON string but got " + data['dailyMaxMicros']);
        }
        // ensure the json data is a string
        if (data['pacingPeriod'] && !(typeof data['pacingPeriod'] === 'string' || data['pacingPeriod'] instanceof String)) {
            throw new Error("Expected the field `pacingPeriod` to be a primitive type in the JSON string but got " + data['pacingPeriod']);
        }
        // ensure the json data is a string
        if (data['pacingType'] && !(typeof data['pacingType'] === 'string' || data['pacingType'] instanceof String)) {
            throw new Error("Expected the field `pacingType` to be a primitive type in the JSON string but got " + data['pacingType']);
        }

        return true;
    }


}



/**
 * Maximum number of impressions to serve every day. Applicable when the budget is impression based. Must be greater than 0.
 * @member {String} dailyMaxImpressions
 */
Pacing.prototype['dailyMaxImpressions'] = undefined;

/**
 * Maximum currency amount to spend every day in micros of advertiser's currency. Applicable when the budget is currency based. Must be greater than 0. For example, for 1.5 standard unit of the currency, set this field to 1500000. The value assigned will be rounded to whole billable units for the relevant currency by the following rules: any positive value less than a single billable unit will be rounded up to one billable unit and any value larger than a single billable unit will be rounded down to the nearest billable value. For example, if the currency's billable unit is 0.01, and this field is set to 10257770, it will round down to 10250000, a value of 10.25. If set to 505, it will round up to 10000, a value of 0.01.
 * @member {String} dailyMaxMicros
 */
Pacing.prototype['dailyMaxMicros'] = undefined;

/**
 * Required. The time period in which the pacing budget will be spent. When automatic budget allocation is enabled at the insertion order via automationType, this field is output only and defaults to `PACING_PERIOD_FLIGHT`.
 * @member {module:model/Pacing.PacingPeriodEnum} pacingPeriod
 */
Pacing.prototype['pacingPeriod'] = undefined;

/**
 * Required. The type of pacing that defines how the budget amount will be spent across the pacing_period.
 * @member {module:model/Pacing.PacingTypeEnum} pacingType
 */
Pacing.prototype['pacingType'] = undefined;





/**
 * Allowed values for the <code>pacingPeriod</code> property.
 * @enum {String}
 * @readonly
 */
Pacing['PacingPeriodEnum'] = {

    /**
     * value: "PACING_PERIOD_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "PACING_PERIOD_UNSPECIFIED",

    /**
     * value: "PACING_PERIOD_DAILY"
     * @const
     */
    "DAILY": "PACING_PERIOD_DAILY",

    /**
     * value: "PACING_PERIOD_FLIGHT"
     * @const
     */
    "FLIGHT": "PACING_PERIOD_FLIGHT"
};


/**
 * Allowed values for the <code>pacingType</code> property.
 * @enum {String}
 * @readonly
 */
Pacing['PacingTypeEnum'] = {

    /**
     * value: "PACING_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "PACING_TYPE_UNSPECIFIED",

    /**
     * value: "PACING_TYPE_AHEAD"
     * @const
     */
    "AHEAD": "PACING_TYPE_AHEAD",

    /**
     * value: "PACING_TYPE_ASAP"
     * @const
     */
    "ASAP": "PACING_TYPE_ASAP",

    /**
     * value: "PACING_TYPE_EVEN"
     * @const
     */
    "EVEN": "PACING_TYPE_EVEN"
};



export default Pacing;

