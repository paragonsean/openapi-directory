/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssignedUserRole model module.
 * @module model/AssignedUserRole
 * @version v2
 */
class AssignedUserRole {
    /**
     * Constructs a new <code>AssignedUserRole</code>.
     * A single assigned user role, which defines a user&#39;s authorized interaction with a specified partner or advertiser.
     * @alias module:model/AssignedUserRole
     */
    constructor() { 
        
        AssignedUserRole.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssignedUserRole</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssignedUserRole} obj Optional instance to populate.
     * @return {module:model/AssignedUserRole} The populated <code>AssignedUserRole</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssignedUserRole();

            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], 'String');
            }
            if (data.hasOwnProperty('assignedUserRoleId')) {
                obj['assignedUserRoleId'] = ApiClient.convertToType(data['assignedUserRoleId'], 'String');
            }
            if (data.hasOwnProperty('partnerId')) {
                obj['partnerId'] = ApiClient.convertToType(data['partnerId'], 'String');
            }
            if (data.hasOwnProperty('userRole')) {
                obj['userRole'] = ApiClient.convertToType(data['userRole'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssignedUserRole</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssignedUserRole</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['advertiserId'] && !(typeof data['advertiserId'] === 'string' || data['advertiserId'] instanceof String)) {
            throw new Error("Expected the field `advertiserId` to be a primitive type in the JSON string but got " + data['advertiserId']);
        }
        // ensure the json data is a string
        if (data['assignedUserRoleId'] && !(typeof data['assignedUserRoleId'] === 'string' || data['assignedUserRoleId'] instanceof String)) {
            throw new Error("Expected the field `assignedUserRoleId` to be a primitive type in the JSON string but got " + data['assignedUserRoleId']);
        }
        // ensure the json data is a string
        if (data['partnerId'] && !(typeof data['partnerId'] === 'string' || data['partnerId'] instanceof String)) {
            throw new Error("Expected the field `partnerId` to be a primitive type in the JSON string but got " + data['partnerId']);
        }
        // ensure the json data is a string
        if (data['userRole'] && !(typeof data['userRole'] === 'string' || data['userRole'] instanceof String)) {
            throw new Error("Expected the field `userRole` to be a primitive type in the JSON string but got " + data['userRole']);
        }

        return true;
    }


}



/**
 * The ID of the advertiser that the assigend user role applies to.
 * @member {String} advertiserId
 */
AssignedUserRole.prototype['advertiserId'] = undefined;

/**
 * Output only. The ID of the assigned user role.
 * @member {String} assignedUserRoleId
 */
AssignedUserRole.prototype['assignedUserRoleId'] = undefined;

/**
 * The ID of the partner that the assigned user role applies to.
 * @member {String} partnerId
 */
AssignedUserRole.prototype['partnerId'] = undefined;

/**
 * Required. The user role to assign to a user for the entity.
 * @member {module:model/AssignedUserRole.UserRoleEnum} userRole
 */
AssignedUserRole.prototype['userRole'] = undefined;





/**
 * Allowed values for the <code>userRole</code> property.
 * @enum {String}
 * @readonly
 */
AssignedUserRole['UserRoleEnum'] = {

    /**
     * value: "USER_ROLE_UNSPECIFIED"
     * @const
     */
    "USER_ROLE_UNSPECIFIED": "USER_ROLE_UNSPECIFIED",

    /**
     * value: "ADMIN"
     * @const
     */
    "ADMIN": "ADMIN",

    /**
     * value: "ADMIN_PARTNER_CLIENT"
     * @const
     */
    "ADMIN_PARTNER_CLIENT": "ADMIN_PARTNER_CLIENT",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "STANDARD_PLANNER"
     * @const
     */
    "STANDARD_PLANNER": "STANDARD_PLANNER",

    /**
     * value: "STANDARD_PLANNER_LIMITED"
     * @const
     */
    "STANDARD_PLANNER_LIMITED": "STANDARD_PLANNER_LIMITED",

    /**
     * value: "STANDARD_PARTNER_CLIENT"
     * @const
     */
    "STANDARD_PARTNER_CLIENT": "STANDARD_PARTNER_CLIENT",

    /**
     * value: "READ_ONLY"
     * @const
     */
    "READ_ONLY": "READ_ONLY",

    /**
     * value: "REPORTING_ONLY"
     * @const
     */
    "REPORTING_ONLY": "REPORTING_ONLY",

    /**
     * value: "LIMITED_REPORTING_ONLY"
     * @const
     */
    "LIMITED_REPORTING_ONLY": "LIMITED_REPORTING_ONLY",

    /**
     * value: "CREATIVE"
     * @const
     */
    "CREATIVE": "CREATIVE",

    /**
     * value: "CREATIVE_ADMIN"
     * @const
     */
    "CREATIVE_ADMIN": "CREATIVE_ADMIN"
};



export default AssignedUserRole;

