/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CombinedAudienceTargetingSetting from './CombinedAudienceTargetingSetting';

/**
 * The CombinedAudienceGroup model module.
 * @module model/CombinedAudienceGroup
 * @version v2
 */
class CombinedAudienceGroup {
    /**
     * Constructs a new <code>CombinedAudienceGroup</code>.
     * Details of combined audience group. All combined audience targeting settings are logically ‘OR’ of each other.
     * @alias module:model/CombinedAudienceGroup
     */
    constructor() { 
        
        CombinedAudienceGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CombinedAudienceGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CombinedAudienceGroup} obj Optional instance to populate.
     * @return {module:model/CombinedAudienceGroup} The populated <code>CombinedAudienceGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CombinedAudienceGroup();

            if (data.hasOwnProperty('settings')) {
                obj['settings'] = ApiClient.convertToType(data['settings'], [CombinedAudienceTargetingSetting]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CombinedAudienceGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CombinedAudienceGroup</code>.
     */
    static validateJSON(data) {
        if (data['settings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['settings'])) {
                throw new Error("Expected the field `settings` to be an array in the JSON data but got " + data['settings']);
            }
            // validate the optional field `settings` (array)
            for (const item of data['settings']) {
                CombinedAudienceTargetingSetting.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Required. All combined audience targeting settings in combined audience group. Repeated settings with same id will be ignored. The number of combined audience settings should be no more than five, error will be thrown otherwise.
 * @member {Array.<module:model/CombinedAudienceTargetingSetting>} settings
 */
CombinedAudienceGroup.prototype['settings'] = undefined;






export default CombinedAudienceGroup;

