/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CmHybridConfig model module.
 * @module model/CmHybridConfig
 * @version v2
 */
class CmHybridConfig {
    /**
     * Constructs a new <code>CmHybridConfig</code>.
     * Settings for advertisers that use both Campaign Manager 360 (CM360) and third-party ad servers.
     * @alias module:model/CmHybridConfig
     */
    constructor() { 
        
        CmHybridConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CmHybridConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CmHybridConfig} obj Optional instance to populate.
     * @return {module:model/CmHybridConfig} The populated <code>CmHybridConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CmHybridConfig();

            if (data.hasOwnProperty('cmAccountId')) {
                obj['cmAccountId'] = ApiClient.convertToType(data['cmAccountId'], 'String');
            }
            if (data.hasOwnProperty('cmAdvertiserIds')) {
                obj['cmAdvertiserIds'] = ApiClient.convertToType(data['cmAdvertiserIds'], ['String']);
            }
            if (data.hasOwnProperty('cmFloodlightConfigId')) {
                obj['cmFloodlightConfigId'] = ApiClient.convertToType(data['cmFloodlightConfigId'], 'String');
            }
            if (data.hasOwnProperty('cmFloodlightLinkingAuthorized')) {
                obj['cmFloodlightLinkingAuthorized'] = ApiClient.convertToType(data['cmFloodlightLinkingAuthorized'], 'Boolean');
            }
            if (data.hasOwnProperty('cmSyncableSiteIds')) {
                obj['cmSyncableSiteIds'] = ApiClient.convertToType(data['cmSyncableSiteIds'], ['String']);
            }
            if (data.hasOwnProperty('dv360ToCmCostReportingEnabled')) {
                obj['dv360ToCmCostReportingEnabled'] = ApiClient.convertToType(data['dv360ToCmCostReportingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('dv360ToCmDataSharingEnabled')) {
                obj['dv360ToCmDataSharingEnabled'] = ApiClient.convertToType(data['dv360ToCmDataSharingEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CmHybridConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CmHybridConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cmAccountId'] && !(typeof data['cmAccountId'] === 'string' || data['cmAccountId'] instanceof String)) {
            throw new Error("Expected the field `cmAccountId` to be a primitive type in the JSON string but got " + data['cmAccountId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cmAdvertiserIds'])) {
            throw new Error("Expected the field `cmAdvertiserIds` to be an array in the JSON data but got " + data['cmAdvertiserIds']);
        }
        // ensure the json data is a string
        if (data['cmFloodlightConfigId'] && !(typeof data['cmFloodlightConfigId'] === 'string' || data['cmFloodlightConfigId'] instanceof String)) {
            throw new Error("Expected the field `cmFloodlightConfigId` to be a primitive type in the JSON string but got " + data['cmFloodlightConfigId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cmSyncableSiteIds'])) {
            throw new Error("Expected the field `cmSyncableSiteIds` to be an array in the JSON data but got " + data['cmSyncableSiteIds']);
        }

        return true;
    }


}



/**
 * Required. Immutable. Account ID of the CM360 Floodlight configuration linked with the DV360 advertiser.
 * @member {String} cmAccountId
 */
CmHybridConfig.prototype['cmAccountId'] = undefined;

/**
 * Output only. The set of CM360 Advertiser IDs sharing the CM360 Floodlight configuration.
 * @member {Array.<String>} cmAdvertiserIds
 */
CmHybridConfig.prototype['cmAdvertiserIds'] = undefined;

/**
 * Required. Immutable. ID of the CM360 Floodlight configuration linked with the DV360 advertiser.
 * @member {String} cmFloodlightConfigId
 */
CmHybridConfig.prototype['cmFloodlightConfigId'] = undefined;

/**
 * Required. Immutable. By setting this field to `true`, you, on behalf of your company, authorize the sharing of information from the given Floodlight configuration to this Display & Video 360 advertiser.
 * @member {Boolean} cmFloodlightLinkingAuthorized
 */
CmHybridConfig.prototype['cmFloodlightLinkingAuthorized'] = undefined;

/**
 * A list of CM360 sites whose placements will be synced to DV360 as creatives. If absent or empty in CreateAdvertiser method, the system will automatically create a CM360 site. Removing sites from this list may cause DV360 creatives synced from CM360 to be deleted. At least one site must be specified.
 * @member {Array.<String>} cmSyncableSiteIds
 */
CmHybridConfig.prototype['cmSyncableSiteIds'] = undefined;

/**
 * Whether or not to report DV360 cost to CM360.
 * @member {Boolean} dv360ToCmCostReportingEnabled
 */
CmHybridConfig.prototype['dv360ToCmCostReportingEnabled'] = undefined;

/**
 * Whether or not to include DV360 data in CM360 data transfer reports.
 * @member {Boolean} dv360ToCmDataSharingEnabled
 */
CmHybridConfig.prototype['dv360ToCmDataSharingEnabled'] = undefined;






export default CmHybridConfig;

