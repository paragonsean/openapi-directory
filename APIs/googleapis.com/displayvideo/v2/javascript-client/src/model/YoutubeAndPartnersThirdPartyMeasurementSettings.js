/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ThirdPartyVendorConfig from './ThirdPartyVendorConfig';

/**
 * The YoutubeAndPartnersThirdPartyMeasurementSettings model module.
 * @module model/YoutubeAndPartnersThirdPartyMeasurementSettings
 * @version v2
 */
class YoutubeAndPartnersThirdPartyMeasurementSettings {
    /**
     * Constructs a new <code>YoutubeAndPartnersThirdPartyMeasurementSettings</code>.
     * Settings that control what third-party vendors are measuring specific line item metrics.
     * @alias module:model/YoutubeAndPartnersThirdPartyMeasurementSettings
     */
    constructor() { 
        
        YoutubeAndPartnersThirdPartyMeasurementSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>YoutubeAndPartnersThirdPartyMeasurementSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/YoutubeAndPartnersThirdPartyMeasurementSettings} obj Optional instance to populate.
     * @return {module:model/YoutubeAndPartnersThirdPartyMeasurementSettings} The populated <code>YoutubeAndPartnersThirdPartyMeasurementSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new YoutubeAndPartnersThirdPartyMeasurementSettings();

            if (data.hasOwnProperty('brandLiftVendorConfigs')) {
                obj['brandLiftVendorConfigs'] = ApiClient.convertToType(data['brandLiftVendorConfigs'], [ThirdPartyVendorConfig]);
            }
            if (data.hasOwnProperty('brandSafetyVendorConfigs')) {
                obj['brandSafetyVendorConfigs'] = ApiClient.convertToType(data['brandSafetyVendorConfigs'], [ThirdPartyVendorConfig]);
            }
            if (data.hasOwnProperty('reachVendorConfigs')) {
                obj['reachVendorConfigs'] = ApiClient.convertToType(data['reachVendorConfigs'], [ThirdPartyVendorConfig]);
            }
            if (data.hasOwnProperty('viewabilityVendorConfigs')) {
                obj['viewabilityVendorConfigs'] = ApiClient.convertToType(data['viewabilityVendorConfigs'], [ThirdPartyVendorConfig]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>YoutubeAndPartnersThirdPartyMeasurementSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>YoutubeAndPartnersThirdPartyMeasurementSettings</code>.
     */
    static validateJSON(data) {
        if (data['brandLiftVendorConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['brandLiftVendorConfigs'])) {
                throw new Error("Expected the field `brandLiftVendorConfigs` to be an array in the JSON data but got " + data['brandLiftVendorConfigs']);
            }
            // validate the optional field `brandLiftVendorConfigs` (array)
            for (const item of data['brandLiftVendorConfigs']) {
                ThirdPartyVendorConfig.validateJSON(item);
            };
        }
        if (data['brandSafetyVendorConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['brandSafetyVendorConfigs'])) {
                throw new Error("Expected the field `brandSafetyVendorConfigs` to be an array in the JSON data but got " + data['brandSafetyVendorConfigs']);
            }
            // validate the optional field `brandSafetyVendorConfigs` (array)
            for (const item of data['brandSafetyVendorConfigs']) {
                ThirdPartyVendorConfig.validateJSON(item);
            };
        }
        if (data['reachVendorConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reachVendorConfigs'])) {
                throw new Error("Expected the field `reachVendorConfigs` to be an array in the JSON data but got " + data['reachVendorConfigs']);
            }
            // validate the optional field `reachVendorConfigs` (array)
            for (const item of data['reachVendorConfigs']) {
                ThirdPartyVendorConfig.validateJSON(item);
            };
        }
        if (data['viewabilityVendorConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['viewabilityVendorConfigs'])) {
                throw new Error("Expected the field `viewabilityVendorConfigs` to be an array in the JSON data but got " + data['viewabilityVendorConfigs']);
            }
            // validate the optional field `viewabilityVendorConfigs` (array)
            for (const item of data['viewabilityVendorConfigs']) {
                ThirdPartyVendorConfig.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The third-party vendors measuring brand lift. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_DYNATA` * `THIRD_PARTY_VENDOR_KANTAR`
 * @member {Array.<module:model/ThirdPartyVendorConfig>} brandLiftVendorConfigs
 */
YoutubeAndPartnersThirdPartyMeasurementSettings.prototype['brandLiftVendorConfigs'] = undefined;

/**
 * The third-party vendors measuring brand safety. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_ZERF` * `THIRD_PARTY_VENDOR_DOUBLE_VERIFY` * `THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE`
 * @member {Array.<module:model/ThirdPartyVendorConfig>} brandSafetyVendorConfigs
 */
YoutubeAndPartnersThirdPartyMeasurementSettings.prototype['brandSafetyVendorConfigs'] = undefined;

/**
 * The third-party vendors measuring reach. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_NIELSEN` * `THIRD_PARTY_VENDOR_COMSCORE` * `THIRD_PARTY_VENDOR_KANTAR`
 * @member {Array.<module:model/ThirdPartyVendorConfig>} reachVendorConfigs
 */
YoutubeAndPartnersThirdPartyMeasurementSettings.prototype['reachVendorConfigs'] = undefined;

/**
 * The third-party vendors measuring viewability. The following third-party vendors are applicable: * `THIRD_PARTY_VENDOR_MOAT` * `THIRD_PARTY_VENDOR_DOUBLE_VERIFY` * `THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE` * `THIRD_PARTY_VENDOR_COMSCORE` * `THIRD_PARTY_VENDOR_TELEMETRY` * `THIRD_PARTY_VENDOR_MEETRICS`
 * @member {Array.<module:model/ThirdPartyVendorConfig>} viewabilityVendorConfigs
 */
YoutubeAndPartnersThirdPartyMeasurementSettings.prototype['viewabilityVendorConfigs'] = undefined;






export default YoutubeAndPartnersThirdPartyMeasurementSettings;

