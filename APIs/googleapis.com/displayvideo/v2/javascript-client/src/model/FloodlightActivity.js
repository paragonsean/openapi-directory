/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RemarketingConfig from './RemarketingConfig';

/**
 * The FloodlightActivity model module.
 * @module model/FloodlightActivity
 * @version v2
 */
class FloodlightActivity {
    /**
     * Constructs a new <code>FloodlightActivity</code>.
     * A single Floodlight activity.
     * @alias module:model/FloodlightActivity
     */
    constructor() { 
        
        FloodlightActivity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FloodlightActivity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FloodlightActivity} obj Optional instance to populate.
     * @return {module:model/FloodlightActivity} The populated <code>FloodlightActivity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FloodlightActivity();

            if (data.hasOwnProperty('advertiserIds')) {
                obj['advertiserIds'] = ApiClient.convertToType(data['advertiserIds'], ['String']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('floodlightActivityId')) {
                obj['floodlightActivityId'] = ApiClient.convertToType(data['floodlightActivityId'], 'String');
            }
            if (data.hasOwnProperty('floodlightGroupId')) {
                obj['floodlightGroupId'] = ApiClient.convertToType(data['floodlightGroupId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('remarketingConfigs')) {
                obj['remarketingConfigs'] = ApiClient.convertToType(data['remarketingConfigs'], [RemarketingConfig]);
            }
            if (data.hasOwnProperty('servingStatus')) {
                obj['servingStatus'] = ApiClient.convertToType(data['servingStatus'], 'String');
            }
            if (data.hasOwnProperty('sslRequired')) {
                obj['sslRequired'] = ApiClient.convertToType(data['sslRequired'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FloodlightActivity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FloodlightActivity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['advertiserIds'])) {
            throw new Error("Expected the field `advertiserIds` to be an array in the JSON data but got " + data['advertiserIds']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['floodlightActivityId'] && !(typeof data['floodlightActivityId'] === 'string' || data['floodlightActivityId'] instanceof String)) {
            throw new Error("Expected the field `floodlightActivityId` to be a primitive type in the JSON string but got " + data['floodlightActivityId']);
        }
        // ensure the json data is a string
        if (data['floodlightGroupId'] && !(typeof data['floodlightGroupId'] === 'string' || data['floodlightGroupId'] instanceof String)) {
            throw new Error("Expected the field `floodlightGroupId` to be a primitive type in the JSON string but got " + data['floodlightGroupId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['remarketingConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['remarketingConfigs'])) {
                throw new Error("Expected the field `remarketingConfigs` to be an array in the JSON data but got " + data['remarketingConfigs']);
            }
            // validate the optional field `remarketingConfigs` (array)
            for (const item of data['remarketingConfigs']) {
                RemarketingConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['servingStatus'] && !(typeof data['servingStatus'] === 'string' || data['servingStatus'] instanceof String)) {
            throw new Error("Expected the field `servingStatus` to be a primitive type in the JSON string but got " + data['servingStatus']);
        }

        return true;
    }


}



/**
 * Output only. IDs of the advertisers that have access to the parent Floodlight group. Only advertisers under the provided partner ID will be listed in this field.
 * @member {Array.<String>} advertiserIds
 */
FloodlightActivity.prototype['advertiserIds'] = undefined;

/**
 * Required. The display name of the Floodlight activity.
 * @member {String} displayName
 */
FloodlightActivity.prototype['displayName'] = undefined;

/**
 * Output only. The unique ID of the Floodlight activity. Assigned by the system.
 * @member {String} floodlightActivityId
 */
FloodlightActivity.prototype['floodlightActivityId'] = undefined;

/**
 * Required. Immutable. The ID of the parent Floodlight group.
 * @member {String} floodlightGroupId
 */
FloodlightActivity.prototype['floodlightGroupId'] = undefined;

/**
 * Output only. The resource name of the Floodlight activity.
 * @member {String} name
 */
FloodlightActivity.prototype['name'] = undefined;

/**
 * Output only. A list of configuration objects designating whether remarketing for this Floodlight Activity is enabled and available for a specifc advertiser. If enabled, this Floodlight Activity generates a remarketing user list that is able to be used in targeting under the advertiser.
 * @member {Array.<module:model/RemarketingConfig>} remarketingConfigs
 */
FloodlightActivity.prototype['remarketingConfigs'] = undefined;

/**
 * Optional. Whether the Floodlight activity is served.
 * @member {module:model/FloodlightActivity.ServingStatusEnum} servingStatus
 */
FloodlightActivity.prototype['servingStatus'] = undefined;

/**
 * Output only. Whether tags are required to be compliant.
 * @member {Boolean} sslRequired
 */
FloodlightActivity.prototype['sslRequired'] = undefined;





/**
 * Allowed values for the <code>servingStatus</code> property.
 * @enum {String}
 * @readonly
 */
FloodlightActivity['ServingStatusEnum'] = {

    /**
     * value: "FLOODLIGHT_ACTIVITY_SERVING_STATUS_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "FLOODLIGHT_ACTIVITY_SERVING_STATUS_UNSPECIFIED",

    /**
     * value: "FLOODLIGHT_ACTIVITY_SERVING_STATUS_ENABLED"
     * @const
     */
    "ENABLED": "FLOODLIGHT_ACTIVITY_SERVING_STATUS_ENABLED",

    /**
     * value: "FLOODLIGHT_ACTIVITY_SERVING_STATUS_DISABLED"
     * @const
     */
    "DISABLED": "FLOODLIGHT_ACTIVITY_SERVING_STATUS_DISABLED"
};



export default FloodlightActivity;

