/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BiddingStrategy from './BiddingStrategy';
import FrequencyCap from './FrequencyCap';
import InsertionOrderBudget from './InsertionOrderBudget';
import IntegrationDetails from './IntegrationDetails';
import Pacing from './Pacing';
import PartnerCost from './PartnerCost';
import PerformanceGoal from './PerformanceGoal';

/**
 * The InsertionOrder model module.
 * @module model/InsertionOrder
 * @version v2
 */
class InsertionOrder {
    /**
     * Constructs a new <code>InsertionOrder</code>.
     * A single insertion order.
     * @alias module:model/InsertionOrder
     */
    constructor() { 
        
        InsertionOrder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InsertionOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InsertionOrder} obj Optional instance to populate.
     * @return {module:model/InsertionOrder} The populated <code>InsertionOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InsertionOrder();

            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], 'String');
            }
            if (data.hasOwnProperty('bidStrategy')) {
                obj['bidStrategy'] = BiddingStrategy.constructFromObject(data['bidStrategy']);
            }
            if (data.hasOwnProperty('billableOutcome')) {
                obj['billableOutcome'] = ApiClient.convertToType(data['billableOutcome'], 'String');
            }
            if (data.hasOwnProperty('budget')) {
                obj['budget'] = InsertionOrderBudget.constructFromObject(data['budget']);
            }
            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('entityStatus')) {
                obj['entityStatus'] = ApiClient.convertToType(data['entityStatus'], 'String');
            }
            if (data.hasOwnProperty('frequencyCap')) {
                obj['frequencyCap'] = FrequencyCap.constructFromObject(data['frequencyCap']);
            }
            if (data.hasOwnProperty('insertionOrderId')) {
                obj['insertionOrderId'] = ApiClient.convertToType(data['insertionOrderId'], 'String');
            }
            if (data.hasOwnProperty('insertionOrderType')) {
                obj['insertionOrderType'] = ApiClient.convertToType(data['insertionOrderType'], 'String');
            }
            if (data.hasOwnProperty('integrationDetails')) {
                obj['integrationDetails'] = IntegrationDetails.constructFromObject(data['integrationDetails']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pacing')) {
                obj['pacing'] = Pacing.constructFromObject(data['pacing']);
            }
            if (data.hasOwnProperty('partnerCosts')) {
                obj['partnerCosts'] = ApiClient.convertToType(data['partnerCosts'], [PartnerCost]);
            }
            if (data.hasOwnProperty('performanceGoal')) {
                obj['performanceGoal'] = PerformanceGoal.constructFromObject(data['performanceGoal']);
            }
            if (data.hasOwnProperty('reservationType')) {
                obj['reservationType'] = ApiClient.convertToType(data['reservationType'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InsertionOrder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InsertionOrder</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['advertiserId'] && !(typeof data['advertiserId'] === 'string' || data['advertiserId'] instanceof String)) {
            throw new Error("Expected the field `advertiserId` to be a primitive type in the JSON string but got " + data['advertiserId']);
        }
        // validate the optional field `bidStrategy`
        if (data['bidStrategy']) { // data not null
          BiddingStrategy.validateJSON(data['bidStrategy']);
        }
        // ensure the json data is a string
        if (data['billableOutcome'] && !(typeof data['billableOutcome'] === 'string' || data['billableOutcome'] instanceof String)) {
            throw new Error("Expected the field `billableOutcome` to be a primitive type in the JSON string but got " + data['billableOutcome']);
        }
        // validate the optional field `budget`
        if (data['budget']) { // data not null
          InsertionOrderBudget.validateJSON(data['budget']);
        }
        // ensure the json data is a string
        if (data['campaignId'] && !(typeof data['campaignId'] === 'string' || data['campaignId'] instanceof String)) {
            throw new Error("Expected the field `campaignId` to be a primitive type in the JSON string but got " + data['campaignId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['entityStatus'] && !(typeof data['entityStatus'] === 'string' || data['entityStatus'] instanceof String)) {
            throw new Error("Expected the field `entityStatus` to be a primitive type in the JSON string but got " + data['entityStatus']);
        }
        // validate the optional field `frequencyCap`
        if (data['frequencyCap']) { // data not null
          FrequencyCap.validateJSON(data['frequencyCap']);
        }
        // ensure the json data is a string
        if (data['insertionOrderId'] && !(typeof data['insertionOrderId'] === 'string' || data['insertionOrderId'] instanceof String)) {
            throw new Error("Expected the field `insertionOrderId` to be a primitive type in the JSON string but got " + data['insertionOrderId']);
        }
        // ensure the json data is a string
        if (data['insertionOrderType'] && !(typeof data['insertionOrderType'] === 'string' || data['insertionOrderType'] instanceof String)) {
            throw new Error("Expected the field `insertionOrderType` to be a primitive type in the JSON string but got " + data['insertionOrderType']);
        }
        // validate the optional field `integrationDetails`
        if (data['integrationDetails']) { // data not null
          IntegrationDetails.validateJSON(data['integrationDetails']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `pacing`
        if (data['pacing']) { // data not null
          Pacing.validateJSON(data['pacing']);
        }
        if (data['partnerCosts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['partnerCosts'])) {
                throw new Error("Expected the field `partnerCosts` to be an array in the JSON data but got " + data['partnerCosts']);
            }
            // validate the optional field `partnerCosts` (array)
            for (const item of data['partnerCosts']) {
                PartnerCost.validateJSON(item);
            };
        }
        // validate the optional field `performanceGoal`
        if (data['performanceGoal']) { // data not null
          PerformanceGoal.validateJSON(data['performanceGoal']);
        }
        // ensure the json data is a string
        if (data['reservationType'] && !(typeof data['reservationType'] === 'string' || data['reservationType'] instanceof String)) {
            throw new Error("Expected the field `reservationType` to be a primitive type in the JSON string but got " + data['reservationType']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The unique ID of the advertiser the insertion order belongs to.
 * @member {String} advertiserId
 */
InsertionOrder.prototype['advertiserId'] = undefined;

/**
 * @member {module:model/BiddingStrategy} bidStrategy
 */
InsertionOrder.prototype['bidStrategy'] = undefined;

/**
 * Immutable. The billable outcome of the insertion order. Outcome based buying is deprecated. `BILLABLE_OUTCOME_PAY_PER_IMPRESSION` is the only valid value.
 * @member {module:model/InsertionOrder.BillableOutcomeEnum} billableOutcome
 */
InsertionOrder.prototype['billableOutcome'] = undefined;

/**
 * @member {module:model/InsertionOrderBudget} budget
 */
InsertionOrder.prototype['budget'] = undefined;

/**
 * Required. Immutable. The unique ID of the campaign that the insertion order belongs to.
 * @member {String} campaignId
 */
InsertionOrder.prototype['campaignId'] = undefined;

/**
 * Required. The display name of the insertion order. Must be UTF-8 encoded with a maximum size of 240 bytes.
 * @member {String} displayName
 */
InsertionOrder.prototype['displayName'] = undefined;

/**
 * Required. Controls whether or not the insertion order can spend its budget and bid on inventory. * For CreateInsertionOrder method, only `ENTITY_STATUS_DRAFT` is allowed. To activate an insertion order, use UpdateInsertionOrder method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * An insertion order cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other status. * An insertion order cannot be set to `ENTITY_STATUS_ACTIVE` if its parent campaign is not active.
 * @member {module:model/InsertionOrder.EntityStatusEnum} entityStatus
 */
InsertionOrder.prototype['entityStatus'] = undefined;

/**
 * @member {module:model/FrequencyCap} frequencyCap
 */
InsertionOrder.prototype['frequencyCap'] = undefined;

/**
 * Output only. The unique ID of the insertion order. Assigned by the system.
 * @member {String} insertionOrderId
 */
InsertionOrder.prototype['insertionOrderId'] = undefined;

/**
 * The type of insertion order. If this field is unspecified in creation, the value defaults to `RTB`.
 * @member {module:model/InsertionOrder.InsertionOrderTypeEnum} insertionOrderType
 */
InsertionOrder.prototype['insertionOrderType'] = undefined;

/**
 * @member {module:model/IntegrationDetails} integrationDetails
 */
InsertionOrder.prototype['integrationDetails'] = undefined;

/**
 * Output only. The resource name of the insertion order.
 * @member {String} name
 */
InsertionOrder.prototype['name'] = undefined;

/**
 * @member {module:model/Pacing} pacing
 */
InsertionOrder.prototype['pacing'] = undefined;

/**
 * The partner costs associated with the insertion order. If absent or empty in CreateInsertionOrder method, the newly created insertion order will inherit partner costs from the partner settings.
 * @member {Array.<module:model/PartnerCost>} partnerCosts
 */
InsertionOrder.prototype['partnerCosts'] = undefined;

/**
 * @member {module:model/PerformanceGoal} performanceGoal
 */
InsertionOrder.prototype['performanceGoal'] = undefined;

/**
 * Output only. The reservation type of the insertion order.
 * @member {module:model/InsertionOrder.ReservationTypeEnum} reservationType
 */
InsertionOrder.prototype['reservationType'] = undefined;

/**
 * Output only. The timestamp when the insertion order was last updated. Assigned by the system.
 * @member {String} updateTime
 */
InsertionOrder.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>billableOutcome</code> property.
 * @enum {String}
 * @readonly
 */
InsertionOrder['BillableOutcomeEnum'] = {

    /**
     * value: "BILLABLE_OUTCOME_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "BILLABLE_OUTCOME_UNSPECIFIED",

    /**
     * value: "BILLABLE_OUTCOME_PAY_PER_IMPRESSION"
     * @const
     */
    "PAY_PER_IMPRESSION": "BILLABLE_OUTCOME_PAY_PER_IMPRESSION",

    /**
     * value: "BILLABLE_OUTCOME_PAY_PER_CLICK"
     * @const
     */
    "PAY_PER_CLICK": "BILLABLE_OUTCOME_PAY_PER_CLICK",

    /**
     * value: "BILLABLE_OUTCOME_PAY_PER_VIEWABLE_IMPRESSION"
     * @const
     */
    "PAY_PER_VIEWABLE_IMPRESSION": "BILLABLE_OUTCOME_PAY_PER_VIEWABLE_IMPRESSION"
};


/**
 * Allowed values for the <code>entityStatus</code> property.
 * @enum {String}
 * @readonly
 */
InsertionOrder['EntityStatusEnum'] = {

    /**
     * value: "ENTITY_STATUS_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "ENTITY_STATUS_UNSPECIFIED",

    /**
     * value: "ENTITY_STATUS_ACTIVE"
     * @const
     */
    "ACTIVE": "ENTITY_STATUS_ACTIVE",

    /**
     * value: "ENTITY_STATUS_ARCHIVED"
     * @const
     */
    "ARCHIVED": "ENTITY_STATUS_ARCHIVED",

    /**
     * value: "ENTITY_STATUS_DRAFT"
     * @const
     */
    "DRAFT": "ENTITY_STATUS_DRAFT",

    /**
     * value: "ENTITY_STATUS_PAUSED"
     * @const
     */
    "PAUSED": "ENTITY_STATUS_PAUSED",

    /**
     * value: "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
     * @const
     */
    "SCHEDULED_FOR_DELETION": "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
};


/**
 * Allowed values for the <code>insertionOrderType</code> property.
 * @enum {String}
 * @readonly
 */
InsertionOrder['InsertionOrderTypeEnum'] = {

    /**
     * value: "INSERTION_ORDER_TYPE_UNSPECIFIED"
     * @const
     */
    "INSERTION_ORDER_TYPE_UNSPECIFIED": "INSERTION_ORDER_TYPE_UNSPECIFIED",

    /**
     * value: "RTB"
     * @const
     */
    "RTB": "RTB",

    /**
     * value: "OVER_THE_TOP"
     * @const
     */
    "OVER_THE_TOP": "OVER_THE_TOP"
};


/**
 * Allowed values for the <code>reservationType</code> property.
 * @enum {String}
 * @readonly
 */
InsertionOrder['ReservationTypeEnum'] = {

    /**
     * value: "RESERVATION_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "RESERVATION_TYPE_UNSPECIFIED",

    /**
     * value: "RESERVATION_TYPE_NOT_GUARANTEED"
     * @const
     */
    "NOT_GUARANTEED": "RESERVATION_TYPE_NOT_GUARANTEED",

    /**
     * value: "RESERVATION_TYPE_PROGRAMMATIC_GUARANTEED"
     * @const
     */
    "PROGRAMMATIC_GUARANTEED": "RESERVATION_TYPE_PROGRAMMATIC_GUARANTEED",

    /**
     * value: "RESERVATION_TYPE_TAG_GUARANTEED"
     * @const
     */
    "TAG_GUARANTEED": "RESERVATION_TYPE_TAG_GUARANTEED",

    /**
     * value: "RESERVATION_TYPE_PETRA_VIRAL"
     * @const
     */
    "PETRA_VIRAL": "RESERVATION_TYPE_PETRA_VIRAL",

    /**
     * value: "RESERVATION_TYPE_INSTANT_RESERVE"
     * @const
     */
    "INSTANT_RESERVE": "RESERVATION_TYPE_INSTANT_RESERVE"
};



export default InsertionOrder;

