/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ManualTrigger model module.
 * @module model/ManualTrigger
 * @version v2
 */
class ManualTrigger {
    /**
     * Constructs a new <code>ManualTrigger</code>.
     * A single manual trigger in Display &amp; Video 360. **Warning:** Line Items using manual triggers no longer serve in Display &amp; Video 360. This resource will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     * @alias module:model/ManualTrigger
     */
    constructor() { 
        
        ManualTrigger.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManualTrigger</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManualTrigger} obj Optional instance to populate.
     * @return {module:model/ManualTrigger} The populated <code>ManualTrigger</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManualTrigger();

            if (data.hasOwnProperty('activationDurationMinutes')) {
                obj['activationDurationMinutes'] = ApiClient.convertToType(data['activationDurationMinutes'], 'String');
            }
            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('latestActivationTime')) {
                obj['latestActivationTime'] = ApiClient.convertToType(data['latestActivationTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('triggerId')) {
                obj['triggerId'] = ApiClient.convertToType(data['triggerId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManualTrigger</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManualTrigger</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activationDurationMinutes'] && !(typeof data['activationDurationMinutes'] === 'string' || data['activationDurationMinutes'] instanceof String)) {
            throw new Error("Expected the field `activationDurationMinutes` to be a primitive type in the JSON string but got " + data['activationDurationMinutes']);
        }
        // ensure the json data is a string
        if (data['advertiserId'] && !(typeof data['advertiserId'] === 'string' || data['advertiserId'] instanceof String)) {
            throw new Error("Expected the field `advertiserId` to be a primitive type in the JSON string but got " + data['advertiserId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['latestActivationTime'] && !(typeof data['latestActivationTime'] === 'string' || data['latestActivationTime'] instanceof String)) {
            throw new Error("Expected the field `latestActivationTime` to be a primitive type in the JSON string but got " + data['latestActivationTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['triggerId'] && !(typeof data['triggerId'] === 'string' || data['triggerId'] instanceof String)) {
            throw new Error("Expected the field `triggerId` to be a primitive type in the JSON string but got " + data['triggerId']);
        }

        return true;
    }


}



/**
 * Required. The maximum duration of each activation in minutes. Must be between 1 and 360 inclusive. After this duration, the trigger will be automatically deactivated.
 * @member {String} activationDurationMinutes
 */
ManualTrigger.prototype['activationDurationMinutes'] = undefined;

/**
 * Required. Immutable. The unique ID of the advertiser that the manual trigger belongs to.
 * @member {String} advertiserId
 */
ManualTrigger.prototype['advertiserId'] = undefined;

/**
 * Required. The display name of the manual trigger. Must be UTF-8 encoded with a maximum size of 240 bytes.
 * @member {String} displayName
 */
ManualTrigger.prototype['displayName'] = undefined;

/**
 * Output only. The timestamp of the trigger's latest activation.
 * @member {String} latestActivationTime
 */
ManualTrigger.prototype['latestActivationTime'] = undefined;

/**
 * Output only. The resource name of the manual trigger.
 * @member {String} name
 */
ManualTrigger.prototype['name'] = undefined;

/**
 * Output only. The state of the manual trigger. Will be set to the `INACTIVE` state upon creation.
 * @member {module:model/ManualTrigger.StateEnum} state
 */
ManualTrigger.prototype['state'] = undefined;

/**
 * Output only. The unique ID of the manual trigger.
 * @member {String} triggerId
 */
ManualTrigger.prototype['triggerId'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ManualTrigger['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE"
};



export default ManualTrigger;

