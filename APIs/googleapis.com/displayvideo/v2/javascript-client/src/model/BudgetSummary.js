/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PrismaCpeCode from './PrismaCpeCode';

/**
 * The BudgetSummary model module.
 * @module model/BudgetSummary
 * @version v2
 */
class BudgetSummary {
    /**
     * Constructs a new <code>BudgetSummary</code>.
     * Summarized information of an individual campaign budget.
     * @alias module:model/BudgetSummary
     */
    constructor() { 
        
        BudgetSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BudgetSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BudgetSummary} obj Optional instance to populate.
     * @return {module:model/BudgetSummary} The populated <code>BudgetSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BudgetSummary();

            if (data.hasOwnProperty('externalBudgetId')) {
                obj['externalBudgetId'] = ApiClient.convertToType(data['externalBudgetId'], 'String');
            }
            if (data.hasOwnProperty('preTaxAmountMicros')) {
                obj['preTaxAmountMicros'] = ApiClient.convertToType(data['preTaxAmountMicros'], 'String');
            }
            if (data.hasOwnProperty('prismaCpeCode')) {
                obj['prismaCpeCode'] = PrismaCpeCode.constructFromObject(data['prismaCpeCode']);
            }
            if (data.hasOwnProperty('taxAmountMicros')) {
                obj['taxAmountMicros'] = ApiClient.convertToType(data['taxAmountMicros'], 'String');
            }
            if (data.hasOwnProperty('totalAmountMicros')) {
                obj['totalAmountMicros'] = ApiClient.convertToType(data['totalAmountMicros'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BudgetSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BudgetSummary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['externalBudgetId'] && !(typeof data['externalBudgetId'] === 'string' || data['externalBudgetId'] instanceof String)) {
            throw new Error("Expected the field `externalBudgetId` to be a primitive type in the JSON string but got " + data['externalBudgetId']);
        }
        // ensure the json data is a string
        if (data['preTaxAmountMicros'] && !(typeof data['preTaxAmountMicros'] === 'string' || data['preTaxAmountMicros'] instanceof String)) {
            throw new Error("Expected the field `preTaxAmountMicros` to be a primitive type in the JSON string but got " + data['preTaxAmountMicros']);
        }
        // validate the optional field `prismaCpeCode`
        if (data['prismaCpeCode']) { // data not null
          PrismaCpeCode.validateJSON(data['prismaCpeCode']);
        }
        // ensure the json data is a string
        if (data['taxAmountMicros'] && !(typeof data['taxAmountMicros'] === 'string' || data['taxAmountMicros'] instanceof String)) {
            throw new Error("Expected the field `taxAmountMicros` to be a primitive type in the JSON string but got " + data['taxAmountMicros']);
        }
        // ensure the json data is a string
        if (data['totalAmountMicros'] && !(typeof data['totalAmountMicros'] === 'string' || data['totalAmountMicros'] instanceof String)) {
            throw new Error("Expected the field `totalAmountMicros` to be a primitive type in the JSON string but got " + data['totalAmountMicros']);
        }

        return true;
    }


}



/**
 * Corresponds to the external_budget_id of a campaign budget. If the value is not set in the campaign budget, this field will be empty.
 * @member {String} externalBudgetId
 */
BudgetSummary.prototype['externalBudgetId'] = undefined;

/**
 * The sum of charges made under this budget before taxes, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
 * @member {String} preTaxAmountMicros
 */
BudgetSummary.prototype['preTaxAmountMicros'] = undefined;

/**
 * @member {module:model/PrismaCpeCode} prismaCpeCode
 */
BudgetSummary.prototype['prismaCpeCode'] = undefined;

/**
 * The amount of tax applied to charges under this budget, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
 * @member {String} taxAmountMicros
 */
BudgetSummary.prototype['taxAmountMicros'] = undefined;

/**
 * The total sum of charges made under this budget, including tax, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
 * @member {String} totalAmountMicros
 */
BudgetSummary.prototype['totalAmountMicros'] = undefined;






export default BudgetSummary;

