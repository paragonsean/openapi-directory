/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimensions from './Dimensions';

/**
 * The Transcode model module.
 * @module model/Transcode
 * @version v2
 */
class Transcode {
    /**
     * Constructs a new <code>Transcode</code>.
     * Represents information about the transcoded audio or video file.
     * @alias module:model/Transcode
     */
    constructor() { 
        
        Transcode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transcode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transcode} obj Optional instance to populate.
     * @return {module:model/Transcode} The populated <code>Transcode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transcode();

            if (data.hasOwnProperty('audioBitRateKbps')) {
                obj['audioBitRateKbps'] = ApiClient.convertToType(data['audioBitRateKbps'], 'String');
            }
            if (data.hasOwnProperty('audioSampleRateHz')) {
                obj['audioSampleRateHz'] = ApiClient.convertToType(data['audioSampleRateHz'], 'String');
            }
            if (data.hasOwnProperty('bitRateKbps')) {
                obj['bitRateKbps'] = ApiClient.convertToType(data['bitRateKbps'], 'String');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = Dimensions.constructFromObject(data['dimensions']);
            }
            if (data.hasOwnProperty('fileSizeBytes')) {
                obj['fileSizeBytes'] = ApiClient.convertToType(data['fileSizeBytes'], 'String');
            }
            if (data.hasOwnProperty('frameRate')) {
                obj['frameRate'] = ApiClient.convertToType(data['frameRate'], 'Number');
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('transcoded')) {
                obj['transcoded'] = ApiClient.convertToType(data['transcoded'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transcode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transcode</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['audioBitRateKbps'] && !(typeof data['audioBitRateKbps'] === 'string' || data['audioBitRateKbps'] instanceof String)) {
            throw new Error("Expected the field `audioBitRateKbps` to be a primitive type in the JSON string but got " + data['audioBitRateKbps']);
        }
        // ensure the json data is a string
        if (data['audioSampleRateHz'] && !(typeof data['audioSampleRateHz'] === 'string' || data['audioSampleRateHz'] instanceof String)) {
            throw new Error("Expected the field `audioSampleRateHz` to be a primitive type in the JSON string but got " + data['audioSampleRateHz']);
        }
        // ensure the json data is a string
        if (data['bitRateKbps'] && !(typeof data['bitRateKbps'] === 'string' || data['bitRateKbps'] instanceof String)) {
            throw new Error("Expected the field `bitRateKbps` to be a primitive type in the JSON string but got " + data['bitRateKbps']);
        }
        // validate the optional field `dimensions`
        if (data['dimensions']) { // data not null
          Dimensions.validateJSON(data['dimensions']);
        }
        // ensure the json data is a string
        if (data['fileSizeBytes'] && !(typeof data['fileSizeBytes'] === 'string' || data['fileSizeBytes'] instanceof String)) {
            throw new Error("Expected the field `fileSizeBytes` to be a primitive type in the JSON string but got " + data['fileSizeBytes']);
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The bit rate for the audio stream of the transcoded video, or the bit rate for the transcoded audio, in kilobits per second.
 * @member {String} audioBitRateKbps
 */
Transcode.prototype['audioBitRateKbps'] = undefined;

/**
 * The sample rate for the audio stream of the transcoded video, or the sample rate for the transcoded audio, in hertz.
 * @member {String} audioSampleRateHz
 */
Transcode.prototype['audioSampleRateHz'] = undefined;

/**
 * The transcoding bit rate of the transcoded video, in kilobits per second.
 * @member {String} bitRateKbps
 */
Transcode.prototype['bitRateKbps'] = undefined;

/**
 * @member {module:model/Dimensions} dimensions
 */
Transcode.prototype['dimensions'] = undefined;

/**
 * The size of the transcoded file, in bytes.
 * @member {String} fileSizeBytes
 */
Transcode.prototype['fileSizeBytes'] = undefined;

/**
 * The frame rate of the transcoded video, in frames per second.
 * @member {Number} frameRate
 */
Transcode.prototype['frameRate'] = undefined;

/**
 * The MIME type of the transcoded file.
 * @member {String} mimeType
 */
Transcode.prototype['mimeType'] = undefined;

/**
 * The name of the transcoded file.
 * @member {String} name
 */
Transcode.prototype['name'] = undefined;

/**
 * Indicates if the transcoding was successful.
 * @member {Boolean} transcoded
 */
Transcode.prototype['transcoded'] = undefined;






export default Transcode;

