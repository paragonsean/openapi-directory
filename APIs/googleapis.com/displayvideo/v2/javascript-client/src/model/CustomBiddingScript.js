/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomBiddingScriptRef from './CustomBiddingScriptRef';
import ScriptError from './ScriptError';

/**
 * The CustomBiddingScript model module.
 * @module model/CustomBiddingScript
 * @version v2
 */
class CustomBiddingScript {
    /**
     * Constructs a new <code>CustomBiddingScript</code>.
     * A single custom bidding script.
     * @alias module:model/CustomBiddingScript
     */
    constructor() { 
        
        CustomBiddingScript.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomBiddingScript</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomBiddingScript} obj Optional instance to populate.
     * @return {module:model/CustomBiddingScript} The populated <code>CustomBiddingScript</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomBiddingScript();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('customBiddingAlgorithmId')) {
                obj['customBiddingAlgorithmId'] = ApiClient.convertToType(data['customBiddingAlgorithmId'], 'String');
            }
            if (data.hasOwnProperty('customBiddingScriptId')) {
                obj['customBiddingScriptId'] = ApiClient.convertToType(data['customBiddingScriptId'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ScriptError]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('script')) {
                obj['script'] = CustomBiddingScriptRef.constructFromObject(data['script']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomBiddingScript</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomBiddingScript</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['customBiddingAlgorithmId'] && !(typeof data['customBiddingAlgorithmId'] === 'string' || data['customBiddingAlgorithmId'] instanceof String)) {
            throw new Error("Expected the field `customBiddingAlgorithmId` to be a primitive type in the JSON string but got " + data['customBiddingAlgorithmId']);
        }
        // ensure the json data is a string
        if (data['customBiddingScriptId'] && !(typeof data['customBiddingScriptId'] === 'string' || data['customBiddingScriptId'] instanceof String)) {
            throw new Error("Expected the field `customBiddingScriptId` to be a primitive type in the JSON string but got " + data['customBiddingScriptId']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                ScriptError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `script`
        if (data['script']) { // data not null
          CustomBiddingScriptRef.validateJSON(data['script']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. Whether the script is currently being used for scoring by the parent algorithm.
 * @member {Boolean} active
 */
CustomBiddingScript.prototype['active'] = undefined;

/**
 * Output only. The time when the script was created.
 * @member {String} createTime
 */
CustomBiddingScript.prototype['createTime'] = undefined;

/**
 * Output only. The unique ID of the custom bidding algorithm the script belongs to.
 * @member {String} customBiddingAlgorithmId
 */
CustomBiddingScript.prototype['customBiddingAlgorithmId'] = undefined;

/**
 * Output only. The unique ID of the custom bidding script.
 * @member {String} customBiddingScriptId
 */
CustomBiddingScript.prototype['customBiddingScriptId'] = undefined;

/**
 * Output only. Error details of a rejected custom bidding script. This field will only be populated when state is REJECTED.
 * @member {Array.<module:model/ScriptError>} errors
 */
CustomBiddingScript.prototype['errors'] = undefined;

/**
 * Output only. The resource name of the custom bidding script.
 * @member {String} name
 */
CustomBiddingScript.prototype['name'] = undefined;

/**
 * @member {module:model/CustomBiddingScriptRef} script
 */
CustomBiddingScript.prototype['script'] = undefined;

/**
 * Output only. The state of the custom bidding script.
 * @member {module:model/CustomBiddingScript.StateEnum} state
 */
CustomBiddingScript.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
CustomBiddingScript['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACCEPTED"
     * @const
     */
    "ACCEPTED": "ACCEPTED",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING"
};



export default CustomBiddingScript;

