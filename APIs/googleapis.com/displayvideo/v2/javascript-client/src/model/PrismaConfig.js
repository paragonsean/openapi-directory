/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PrismaCpeCode from './PrismaCpeCode';

/**
 * The PrismaConfig model module.
 * @module model/PrismaConfig
 * @version v2
 */
class PrismaConfig {
    /**
     * Constructs a new <code>PrismaConfig</code>.
     * Settings specific to the Mediaocean Prisma tool.
     * @alias module:model/PrismaConfig
     */
    constructor() { 
        
        PrismaConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PrismaConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrismaConfig} obj Optional instance to populate.
     * @return {module:model/PrismaConfig} The populated <code>PrismaConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrismaConfig();

            if (data.hasOwnProperty('prismaCpeCode')) {
                obj['prismaCpeCode'] = PrismaCpeCode.constructFromObject(data['prismaCpeCode']);
            }
            if (data.hasOwnProperty('prismaType')) {
                obj['prismaType'] = ApiClient.convertToType(data['prismaType'], 'String');
            }
            if (data.hasOwnProperty('supplier')) {
                obj['supplier'] = ApiClient.convertToType(data['supplier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrismaConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrismaConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `prismaCpeCode`
        if (data['prismaCpeCode']) { // data not null
          PrismaCpeCode.validateJSON(data['prismaCpeCode']);
        }
        // ensure the json data is a string
        if (data['prismaType'] && !(typeof data['prismaType'] === 'string' || data['prismaType'] instanceof String)) {
            throw new Error("Expected the field `prismaType` to be a primitive type in the JSON string but got " + data['prismaType']);
        }
        // ensure the json data is a string
        if (data['supplier'] && !(typeof data['supplier'] === 'string' || data['supplier'] instanceof String)) {
            throw new Error("Expected the field `supplier` to be a primitive type in the JSON string but got " + data['supplier']);
        }

        return true;
    }


}



/**
 * @member {module:model/PrismaCpeCode} prismaCpeCode
 */
PrismaConfig.prototype['prismaCpeCode'] = undefined;

/**
 * Required. The Prisma type.
 * @member {module:model/PrismaConfig.PrismaTypeEnum} prismaType
 */
PrismaConfig.prototype['prismaType'] = undefined;

/**
 * Required. The entity allocated this budget (DSP, site, etc.).
 * @member {String} supplier
 */
PrismaConfig.prototype['supplier'] = undefined;





/**
 * Allowed values for the <code>prismaType</code> property.
 * @enum {String}
 * @readonly
 */
PrismaConfig['PrismaTypeEnum'] = {

    /**
     * value: "PRISMA_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "PRISMA_TYPE_UNSPECIFIED",

    /**
     * value: "PRISMA_TYPE_DISPLAY"
     * @const
     */
    "DISPLAY": "PRISMA_TYPE_DISPLAY",

    /**
     * value: "PRISMA_TYPE_SEARCH"
     * @const
     */
    "SEARCH": "PRISMA_TYPE_SEARCH",

    /**
     * value: "PRISMA_TYPE_VIDEO"
     * @const
     */
    "VIDEO": "PRISMA_TYPE_VIDEO",

    /**
     * value: "PRISMA_TYPE_AUDIO"
     * @const
     */
    "AUDIO": "PRISMA_TYPE_AUDIO",

    /**
     * value: "PRISMA_TYPE_SOCIAL"
     * @const
     */
    "SOCIAL": "PRISMA_TYPE_SOCIAL",

    /**
     * value: "PRISMA_TYPE_FEE"
     * @const
     */
    "FEE": "PRISMA_TYPE_FEE"
};



export default PrismaConfig;

