/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TrackingFloodlightActivityConfig from './TrackingFloodlightActivityConfig';

/**
 * The ConversionCountingConfig model module.
 * @module model/ConversionCountingConfig
 * @version v2
 */
class ConversionCountingConfig {
    /**
     * Constructs a new <code>ConversionCountingConfig</code>.
     * Settings that control how conversions are counted. All post-click conversions will be counted. A percentage value can be set for post-view conversions counting.
     * @alias module:model/ConversionCountingConfig
     */
    constructor() { 
        
        ConversionCountingConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConversionCountingConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConversionCountingConfig} obj Optional instance to populate.
     * @return {module:model/ConversionCountingConfig} The populated <code>ConversionCountingConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConversionCountingConfig();

            if (data.hasOwnProperty('floodlightActivityConfigs')) {
                obj['floodlightActivityConfigs'] = ApiClient.convertToType(data['floodlightActivityConfigs'], [TrackingFloodlightActivityConfig]);
            }
            if (data.hasOwnProperty('postViewCountPercentageMillis')) {
                obj['postViewCountPercentageMillis'] = ApiClient.convertToType(data['postViewCountPercentageMillis'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConversionCountingConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConversionCountingConfig</code>.
     */
    static validateJSON(data) {
        if (data['floodlightActivityConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['floodlightActivityConfigs'])) {
                throw new Error("Expected the field `floodlightActivityConfigs` to be an array in the JSON data but got " + data['floodlightActivityConfigs']);
            }
            // validate the optional field `floodlightActivityConfigs` (array)
            for (const item of data['floodlightActivityConfigs']) {
                TrackingFloodlightActivityConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['postViewCountPercentageMillis'] && !(typeof data['postViewCountPercentageMillis'] === 'string' || data['postViewCountPercentageMillis'] instanceof String)) {
            throw new Error("Expected the field `postViewCountPercentageMillis` to be a primitive type in the JSON string but got " + data['postViewCountPercentageMillis']);
        }

        return true;
    }


}



/**
 * The Floodlight activity configs used to track conversions. The number of conversions counted is the sum of all of the conversions counted by all of the Floodlight activity IDs specified in this field.
 * @member {Array.<module:model/TrackingFloodlightActivityConfig>} floodlightActivityConfigs
 */
ConversionCountingConfig.prototype['floodlightActivityConfigs'] = undefined;

/**
 * The percentage of post-view conversions to count, in millis (1/1000 of a percent). Must be between 0 and 100000 inclusive. For example, to track 50% of the post-click conversions, set a value of 50000.
 * @member {String} postViewCountPercentageMillis
 */
ConversionCountingConfig.prototype['postViewCountPercentageMillis'] = undefined;






export default ConversionCountingConfig;

