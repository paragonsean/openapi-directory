/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContactInfo model module.
 * @module model/ContactInfo
 * @version v2
 */
class ContactInfo {
    /**
     * Constructs a new <code>ContactInfo</code>.
     * Contact information defining a Customer Match audience member.
     * @alias module:model/ContactInfo
     */
    constructor() { 
        
        ContactInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContactInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactInfo} obj Optional instance to populate.
     * @return {module:model/ContactInfo} The populated <code>ContactInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactInfo();

            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('hashedEmails')) {
                obj['hashedEmails'] = ApiClient.convertToType(data['hashedEmails'], ['String']);
            }
            if (data.hasOwnProperty('hashedFirstName')) {
                obj['hashedFirstName'] = ApiClient.convertToType(data['hashedFirstName'], 'String');
            }
            if (data.hasOwnProperty('hashedLastName')) {
                obj['hashedLastName'] = ApiClient.convertToType(data['hashedLastName'], 'String');
            }
            if (data.hasOwnProperty('hashedPhoneNumbers')) {
                obj['hashedPhoneNumbers'] = ApiClient.convertToType(data['hashedPhoneNumbers'], ['String']);
            }
            if (data.hasOwnProperty('zipCodes')) {
                obj['zipCodes'] = ApiClient.convertToType(data['zipCodes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['hashedEmails'])) {
            throw new Error("Expected the field `hashedEmails` to be an array in the JSON data but got " + data['hashedEmails']);
        }
        // ensure the json data is a string
        if (data['hashedFirstName'] && !(typeof data['hashedFirstName'] === 'string' || data['hashedFirstName'] instanceof String)) {
            throw new Error("Expected the field `hashedFirstName` to be a primitive type in the JSON string but got " + data['hashedFirstName']);
        }
        // ensure the json data is a string
        if (data['hashedLastName'] && !(typeof data['hashedLastName'] === 'string' || data['hashedLastName'] instanceof String)) {
            throw new Error("Expected the field `hashedLastName` to be a primitive type in the JSON string but got " + data['hashedLastName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['hashedPhoneNumbers'])) {
            throw new Error("Expected the field `hashedPhoneNumbers` to be an array in the JSON data but got " + data['hashedPhoneNumbers']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['zipCodes'])) {
            throw new Error("Expected the field `zipCodes` to be an array in the JSON data but got " + data['zipCodes']);
        }

        return true;
    }


}



/**
 * Country code of the member. Must also be set with the following fields: * hashed_first_name * hashed_last_name * zip_codes
 * @member {String} countryCode
 */
ContactInfo.prototype['countryCode'] = undefined;

/**
 * A list of SHA256 hashed email of the member. Before hashing, remove all whitespace and make sure the string is all lowercase.
 * @member {Array.<String>} hashedEmails
 */
ContactInfo.prototype['hashedEmails'] = undefined;

/**
 * SHA256 hashed first name of the member. Before hashing, remove all whitespace and make sure the string is all lowercase. Must also be set with the following fields: * country_code * hashed_last_name * zip_codes
 * @member {String} hashedFirstName
 */
ContactInfo.prototype['hashedFirstName'] = undefined;

/**
 * SHA256 hashed last name of the member. Before hashing, remove all whitespace and make sure the string is all lowercase. Must also be set with the following fields: * country_code * hashed_first_name * zip_codes
 * @member {String} hashedLastName
 */
ContactInfo.prototype['hashedLastName'] = undefined;

/**
 * A list of SHA256 hashed phone numbers of the member. Before hashing, all phone numbers must be formatted using the [E.164 format](//en.wikipedia.org/wiki/E.164) and include the country calling code.
 * @member {Array.<String>} hashedPhoneNumbers
 */
ContactInfo.prototype['hashedPhoneNumbers'] = undefined;

/**
 * A list of zip codes of the member. Must also be set with the following fields: * country_code * hashed_first_name * hashed_last_name
 * @member {Array.<String>} zipCodes
 */
ContactInfo.prototype['zipCodes'] = undefined;






export default ContactInfo;

