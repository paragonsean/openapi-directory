/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageAsset from './ImageAsset';
import YoutubeVideoDetails from './YoutubeVideoDetails';

/**
 * The VideoPerformanceAd model module.
 * @module model/VideoPerformanceAd
 * @version v2
 */
class VideoPerformanceAd {
    /**
     * Constructs a new <code>VideoPerformanceAd</code>.
     * Details for a video performance ad.
     * @alias module:model/VideoPerformanceAd
     */
    constructor() { 
        
        VideoPerformanceAd.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoPerformanceAd</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoPerformanceAd} obj Optional instance to populate.
     * @return {module:model/VideoPerformanceAd} The populated <code>VideoPerformanceAd</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoPerformanceAd();

            if (data.hasOwnProperty('actionButtonLabels')) {
                obj['actionButtonLabels'] = ApiClient.convertToType(data['actionButtonLabels'], ['String']);
            }
            if (data.hasOwnProperty('companionBanners')) {
                obj['companionBanners'] = ApiClient.convertToType(data['companionBanners'], [ImageAsset]);
            }
            if (data.hasOwnProperty('customParameters')) {
                obj['customParameters'] = ApiClient.convertToType(data['customParameters'], {'String': 'String'});
            }
            if (data.hasOwnProperty('descriptions')) {
                obj['descriptions'] = ApiClient.convertToType(data['descriptions'], ['String']);
            }
            if (data.hasOwnProperty('displayUrlBreadcrumb1')) {
                obj['displayUrlBreadcrumb1'] = ApiClient.convertToType(data['displayUrlBreadcrumb1'], 'String');
            }
            if (data.hasOwnProperty('displayUrlBreadcrumb2')) {
                obj['displayUrlBreadcrumb2'] = ApiClient.convertToType(data['displayUrlBreadcrumb2'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('finalUrl')) {
                obj['finalUrl'] = ApiClient.convertToType(data['finalUrl'], 'String');
            }
            if (data.hasOwnProperty('headlines')) {
                obj['headlines'] = ApiClient.convertToType(data['headlines'], ['String']);
            }
            if (data.hasOwnProperty('longHeadlines')) {
                obj['longHeadlines'] = ApiClient.convertToType(data['longHeadlines'], ['String']);
            }
            if (data.hasOwnProperty('trackingUrl')) {
                obj['trackingUrl'] = ApiClient.convertToType(data['trackingUrl'], 'String');
            }
            if (data.hasOwnProperty('videos')) {
                obj['videos'] = ApiClient.convertToType(data['videos'], [YoutubeVideoDetails]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoPerformanceAd</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoPerformanceAd</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['actionButtonLabels'])) {
            throw new Error("Expected the field `actionButtonLabels` to be an array in the JSON data but got " + data['actionButtonLabels']);
        }
        if (data['companionBanners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['companionBanners'])) {
                throw new Error("Expected the field `companionBanners` to be an array in the JSON data but got " + data['companionBanners']);
            }
            // validate the optional field `companionBanners` (array)
            for (const item of data['companionBanners']) {
                ImageAsset.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['descriptions'])) {
            throw new Error("Expected the field `descriptions` to be an array in the JSON data but got " + data['descriptions']);
        }
        // ensure the json data is a string
        if (data['displayUrlBreadcrumb1'] && !(typeof data['displayUrlBreadcrumb1'] === 'string' || data['displayUrlBreadcrumb1'] instanceof String)) {
            throw new Error("Expected the field `displayUrlBreadcrumb1` to be a primitive type in the JSON string but got " + data['displayUrlBreadcrumb1']);
        }
        // ensure the json data is a string
        if (data['displayUrlBreadcrumb2'] && !(typeof data['displayUrlBreadcrumb2'] === 'string' || data['displayUrlBreadcrumb2'] instanceof String)) {
            throw new Error("Expected the field `displayUrlBreadcrumb2` to be a primitive type in the JSON string but got " + data['displayUrlBreadcrumb2']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['finalUrl'] && !(typeof data['finalUrl'] === 'string' || data['finalUrl'] instanceof String)) {
            throw new Error("Expected the field `finalUrl` to be a primitive type in the JSON string but got " + data['finalUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['headlines'])) {
            throw new Error("Expected the field `headlines` to be an array in the JSON data but got " + data['headlines']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['longHeadlines'])) {
            throw new Error("Expected the field `longHeadlines` to be an array in the JSON data but got " + data['longHeadlines']);
        }
        // ensure the json data is a string
        if (data['trackingUrl'] && !(typeof data['trackingUrl'] === 'string' || data['trackingUrl'] instanceof String)) {
            throw new Error("Expected the field `trackingUrl` to be a primitive type in the JSON string but got " + data['trackingUrl']);
        }
        if (data['videos']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['videos'])) {
                throw new Error("Expected the field `videos` to be an array in the JSON data but got " + data['videos']);
            }
            // validate the optional field `videos` (array)
            for (const item of data['videos']) {
                YoutubeVideoDetails.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The list of text assets shown on the call-to-action button.
 * @member {Array.<String>} actionButtonLabels
 */
VideoPerformanceAd.prototype['actionButtonLabels'] = undefined;

/**
 * The list of companion banners used by this ad.
 * @member {Array.<module:model/ImageAsset>} companionBanners
 */
VideoPerformanceAd.prototype['companionBanners'] = undefined;

/**
 * The custom parameters to pass custom values to tracking URL template.
 * @member {Object.<String, String>} customParameters
 */
VideoPerformanceAd.prototype['customParameters'] = undefined;

/**
 * The list of descriptions shown on the call-to-action banner.
 * @member {Array.<String>} descriptions
 */
VideoPerformanceAd.prototype['descriptions'] = undefined;

/**
 * The first piece after the domain in the display URL.
 * @member {String} displayUrlBreadcrumb1
 */
VideoPerformanceAd.prototype['displayUrlBreadcrumb1'] = undefined;

/**
 * The second piece after the domain in the display URL.
 * @member {String} displayUrlBreadcrumb2
 */
VideoPerformanceAd.prototype['displayUrlBreadcrumb2'] = undefined;

/**
 * The domain of the display URL.
 * @member {String} domain
 */
VideoPerformanceAd.prototype['domain'] = undefined;

/**
 * The URL address of the webpage that people reach after they click the ad.
 * @member {String} finalUrl
 */
VideoPerformanceAd.prototype['finalUrl'] = undefined;

/**
 * The list of headlines shown on the call-to-action banner.
 * @member {Array.<String>} headlines
 */
VideoPerformanceAd.prototype['headlines'] = undefined;

/**
 * The list of lone headlines shown on the call-to-action banner.
 * @member {Array.<String>} longHeadlines
 */
VideoPerformanceAd.prototype['longHeadlines'] = undefined;

/**
 * The URL address loaded in the background for tracking purposes.
 * @member {String} trackingUrl
 */
VideoPerformanceAd.prototype['trackingUrl'] = undefined;

/**
 * The list of YouTube video assets used by this ad.
 * @member {Array.<module:model/YoutubeVideoDetails>} videos
 */
VideoPerformanceAd.prototype['videos'] = undefined;






export default VideoPerformanceAd;

