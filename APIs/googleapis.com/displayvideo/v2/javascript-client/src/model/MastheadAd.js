/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import YoutubeVideoDetails from './YoutubeVideoDetails';

/**
 * The MastheadAd model module.
 * @module model/MastheadAd
 * @version v2
 */
class MastheadAd {
    /**
     * Constructs a new <code>MastheadAd</code>.
     * Details for a Masthead Ad.
     * @alias module:model/MastheadAd
     */
    constructor() { 
        
        MastheadAd.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MastheadAd</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MastheadAd} obj Optional instance to populate.
     * @return {module:model/MastheadAd} The populated <code>MastheadAd</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MastheadAd();

            if (data.hasOwnProperty('autoplayVideoDuration')) {
                obj['autoplayVideoDuration'] = ApiClient.convertToType(data['autoplayVideoDuration'], 'String');
            }
            if (data.hasOwnProperty('autoplayVideoStartMillisecond')) {
                obj['autoplayVideoStartMillisecond'] = ApiClient.convertToType(data['autoplayVideoStartMillisecond'], 'String');
            }
            if (data.hasOwnProperty('callToActionButtonLabel')) {
                obj['callToActionButtonLabel'] = ApiClient.convertToType(data['callToActionButtonLabel'], 'String');
            }
            if (data.hasOwnProperty('callToActionFinalUrl')) {
                obj['callToActionFinalUrl'] = ApiClient.convertToType(data['callToActionFinalUrl'], 'String');
            }
            if (data.hasOwnProperty('callToActionTrackingUrl')) {
                obj['callToActionTrackingUrl'] = ApiClient.convertToType(data['callToActionTrackingUrl'], 'String');
            }
            if (data.hasOwnProperty('companionYoutubeVideos')) {
                obj['companionYoutubeVideos'] = ApiClient.convertToType(data['companionYoutubeVideos'], [YoutubeVideoDetails]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('headline')) {
                obj['headline'] = ApiClient.convertToType(data['headline'], 'String');
            }
            if (data.hasOwnProperty('showChannelArt')) {
                obj['showChannelArt'] = ApiClient.convertToType(data['showChannelArt'], 'Boolean');
            }
            if (data.hasOwnProperty('video')) {
                obj['video'] = YoutubeVideoDetails.constructFromObject(data['video']);
            }
            if (data.hasOwnProperty('videoAspectRatio')) {
                obj['videoAspectRatio'] = ApiClient.convertToType(data['videoAspectRatio'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MastheadAd</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MastheadAd</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['autoplayVideoDuration'] && !(typeof data['autoplayVideoDuration'] === 'string' || data['autoplayVideoDuration'] instanceof String)) {
            throw new Error("Expected the field `autoplayVideoDuration` to be a primitive type in the JSON string but got " + data['autoplayVideoDuration']);
        }
        // ensure the json data is a string
        if (data['autoplayVideoStartMillisecond'] && !(typeof data['autoplayVideoStartMillisecond'] === 'string' || data['autoplayVideoStartMillisecond'] instanceof String)) {
            throw new Error("Expected the field `autoplayVideoStartMillisecond` to be a primitive type in the JSON string but got " + data['autoplayVideoStartMillisecond']);
        }
        // ensure the json data is a string
        if (data['callToActionButtonLabel'] && !(typeof data['callToActionButtonLabel'] === 'string' || data['callToActionButtonLabel'] instanceof String)) {
            throw new Error("Expected the field `callToActionButtonLabel` to be a primitive type in the JSON string but got " + data['callToActionButtonLabel']);
        }
        // ensure the json data is a string
        if (data['callToActionFinalUrl'] && !(typeof data['callToActionFinalUrl'] === 'string' || data['callToActionFinalUrl'] instanceof String)) {
            throw new Error("Expected the field `callToActionFinalUrl` to be a primitive type in the JSON string but got " + data['callToActionFinalUrl']);
        }
        // ensure the json data is a string
        if (data['callToActionTrackingUrl'] && !(typeof data['callToActionTrackingUrl'] === 'string' || data['callToActionTrackingUrl'] instanceof String)) {
            throw new Error("Expected the field `callToActionTrackingUrl` to be a primitive type in the JSON string but got " + data['callToActionTrackingUrl']);
        }
        if (data['companionYoutubeVideos']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['companionYoutubeVideos'])) {
                throw new Error("Expected the field `companionYoutubeVideos` to be an array in the JSON data but got " + data['companionYoutubeVideos']);
            }
            // validate the optional field `companionYoutubeVideos` (array)
            for (const item of data['companionYoutubeVideos']) {
                YoutubeVideoDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['headline'] && !(typeof data['headline'] === 'string' || data['headline'] instanceof String)) {
            throw new Error("Expected the field `headline` to be a primitive type in the JSON string but got " + data['headline']);
        }
        // validate the optional field `video`
        if (data['video']) { // data not null
          YoutubeVideoDetails.validateJSON(data['video']);
        }
        // ensure the json data is a string
        if (data['videoAspectRatio'] && !(typeof data['videoAspectRatio'] === 'string' || data['videoAspectRatio'] instanceof String)) {
            throw new Error("Expected the field `videoAspectRatio` to be a primitive type in the JSON string but got " + data['videoAspectRatio']);
        }

        return true;
    }


}



/**
 * The duration of time the video will autoplay.
 * @member {String} autoplayVideoDuration
 */
MastheadAd.prototype['autoplayVideoDuration'] = undefined;

/**
 * The amount of time in milliseconds after which the video will start to play.
 * @member {String} autoplayVideoStartMillisecond
 */
MastheadAd.prototype['autoplayVideoStartMillisecond'] = undefined;

/**
 * The text on the call-to-action button.
 * @member {String} callToActionButtonLabel
 */
MastheadAd.prototype['callToActionButtonLabel'] = undefined;

/**
 * The destination URL for the call-to-action button.
 * @member {String} callToActionFinalUrl
 */
MastheadAd.prototype['callToActionFinalUrl'] = undefined;

/**
 * The tracking URL for the call-to-action button.
 * @member {String} callToActionTrackingUrl
 */
MastheadAd.prototype['callToActionTrackingUrl'] = undefined;

/**
 * The videos that appear next to the Masthead Ad on desktop. Can be no more than two.
 * @member {Array.<module:model/YoutubeVideoDetails>} companionYoutubeVideos
 */
MastheadAd.prototype['companionYoutubeVideos'] = undefined;

/**
 * The description of the ad.
 * @member {String} description
 */
MastheadAd.prototype['description'] = undefined;

/**
 * The headline of the ad.
 * @member {String} headline
 */
MastheadAd.prototype['headline'] = undefined;

/**
 * Whether to show a background or banner that appears at the top of a YouTube page.
 * @member {Boolean} showChannelArt
 */
MastheadAd.prototype['showChannelArt'] = undefined;

/**
 * @member {module:model/YoutubeVideoDetails} video
 */
MastheadAd.prototype['video'] = undefined;

/**
 * The aspect ratio of the autoplaying YouTube video on the Masthead.
 * @member {module:model/MastheadAd.VideoAspectRatioEnum} videoAspectRatio
 */
MastheadAd.prototype['videoAspectRatio'] = undefined;





/**
 * Allowed values for the <code>videoAspectRatio</code> property.
 * @enum {String}
 * @readonly
 */
MastheadAd['VideoAspectRatioEnum'] = {

    /**
     * value: "VIDEO_ASPECT_RATIO_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "VIDEO_ASPECT_RATIO_UNSPECIFIED",

    /**
     * value: "VIDEO_ASPECT_RATIO_WIDESCREEN"
     * @const
     */
    "WIDESCREEN": "VIDEO_ASPECT_RATIO_WIDESCREEN",

    /**
     * value: "VIDEO_ASPECT_RATIO_FIXED_16_9"
     * @const
     */
    "FIXED_16_9": "VIDEO_ASPECT_RATIO_FIXED_16_9"
};



export default MastheadAd;

