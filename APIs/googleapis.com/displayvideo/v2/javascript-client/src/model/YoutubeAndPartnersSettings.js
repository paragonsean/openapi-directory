/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FrequencyCap from './FrequencyCap';
import TargetFrequency from './TargetFrequency';
import VideoAdSequenceSettings from './VideoAdSequenceSettings';
import YoutubeAndPartnersBiddingStrategy from './YoutubeAndPartnersBiddingStrategy';
import YoutubeAndPartnersInventorySourceConfig from './YoutubeAndPartnersInventorySourceConfig';
import YoutubeAndPartnersThirdPartyMeasurementSettings from './YoutubeAndPartnersThirdPartyMeasurementSettings';

/**
 * The YoutubeAndPartnersSettings model module.
 * @module model/YoutubeAndPartnersSettings
 * @version v2
 */
class YoutubeAndPartnersSettings {
    /**
     * Constructs a new <code>YoutubeAndPartnersSettings</code>.
     * Settings for YouTube and Partners line items.
     * @alias module:model/YoutubeAndPartnersSettings
     */
    constructor() { 
        
        YoutubeAndPartnersSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>YoutubeAndPartnersSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/YoutubeAndPartnersSettings} obj Optional instance to populate.
     * @return {module:model/YoutubeAndPartnersSettings} The populated <code>YoutubeAndPartnersSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new YoutubeAndPartnersSettings();

            if (data.hasOwnProperty('biddingStrategy')) {
                obj['biddingStrategy'] = YoutubeAndPartnersBiddingStrategy.constructFromObject(data['biddingStrategy']);
            }
            if (data.hasOwnProperty('contentCategory')) {
                obj['contentCategory'] = ApiClient.convertToType(data['contentCategory'], 'String');
            }
            if (data.hasOwnProperty('effectiveContentCategory')) {
                obj['effectiveContentCategory'] = ApiClient.convertToType(data['effectiveContentCategory'], 'String');
            }
            if (data.hasOwnProperty('inventorySourceSettings')) {
                obj['inventorySourceSettings'] = YoutubeAndPartnersInventorySourceConfig.constructFromObject(data['inventorySourceSettings']);
            }
            if (data.hasOwnProperty('leadFormId')) {
                obj['leadFormId'] = ApiClient.convertToType(data['leadFormId'], 'String');
            }
            if (data.hasOwnProperty('linkedMerchantId')) {
                obj['linkedMerchantId'] = ApiClient.convertToType(data['linkedMerchantId'], 'String');
            }
            if (data.hasOwnProperty('relatedVideoIds')) {
                obj['relatedVideoIds'] = ApiClient.convertToType(data['relatedVideoIds'], ['String']);
            }
            if (data.hasOwnProperty('targetFrequency')) {
                obj['targetFrequency'] = TargetFrequency.constructFromObject(data['targetFrequency']);
            }
            if (data.hasOwnProperty('thirdPartyMeasurementSettings')) {
                obj['thirdPartyMeasurementSettings'] = YoutubeAndPartnersThirdPartyMeasurementSettings.constructFromObject(data['thirdPartyMeasurementSettings']);
            }
            if (data.hasOwnProperty('videoAdSequenceSettings')) {
                obj['videoAdSequenceSettings'] = VideoAdSequenceSettings.constructFromObject(data['videoAdSequenceSettings']);
            }
            if (data.hasOwnProperty('viewFrequencyCap')) {
                obj['viewFrequencyCap'] = FrequencyCap.constructFromObject(data['viewFrequencyCap']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>YoutubeAndPartnersSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>YoutubeAndPartnersSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `biddingStrategy`
        if (data['biddingStrategy']) { // data not null
          YoutubeAndPartnersBiddingStrategy.validateJSON(data['biddingStrategy']);
        }
        // ensure the json data is a string
        if (data['contentCategory'] && !(typeof data['contentCategory'] === 'string' || data['contentCategory'] instanceof String)) {
            throw new Error("Expected the field `contentCategory` to be a primitive type in the JSON string but got " + data['contentCategory']);
        }
        // ensure the json data is a string
        if (data['effectiveContentCategory'] && !(typeof data['effectiveContentCategory'] === 'string' || data['effectiveContentCategory'] instanceof String)) {
            throw new Error("Expected the field `effectiveContentCategory` to be a primitive type in the JSON string but got " + data['effectiveContentCategory']);
        }
        // validate the optional field `inventorySourceSettings`
        if (data['inventorySourceSettings']) { // data not null
          YoutubeAndPartnersInventorySourceConfig.validateJSON(data['inventorySourceSettings']);
        }
        // ensure the json data is a string
        if (data['leadFormId'] && !(typeof data['leadFormId'] === 'string' || data['leadFormId'] instanceof String)) {
            throw new Error("Expected the field `leadFormId` to be a primitive type in the JSON string but got " + data['leadFormId']);
        }
        // ensure the json data is a string
        if (data['linkedMerchantId'] && !(typeof data['linkedMerchantId'] === 'string' || data['linkedMerchantId'] instanceof String)) {
            throw new Error("Expected the field `linkedMerchantId` to be a primitive type in the JSON string but got " + data['linkedMerchantId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['relatedVideoIds'])) {
            throw new Error("Expected the field `relatedVideoIds` to be an array in the JSON data but got " + data['relatedVideoIds']);
        }
        // validate the optional field `targetFrequency`
        if (data['targetFrequency']) { // data not null
          TargetFrequency.validateJSON(data['targetFrequency']);
        }
        // validate the optional field `thirdPartyMeasurementSettings`
        if (data['thirdPartyMeasurementSettings']) { // data not null
          YoutubeAndPartnersThirdPartyMeasurementSettings.validateJSON(data['thirdPartyMeasurementSettings']);
        }
        // validate the optional field `videoAdSequenceSettings`
        if (data['videoAdSequenceSettings']) { // data not null
          VideoAdSequenceSettings.validateJSON(data['videoAdSequenceSettings']);
        }
        // validate the optional field `viewFrequencyCap`
        if (data['viewFrequencyCap']) { // data not null
          FrequencyCap.validateJSON(data['viewFrequencyCap']);
        }

        return true;
    }


}



/**
 * @member {module:model/YoutubeAndPartnersBiddingStrategy} biddingStrategy
 */
YoutubeAndPartnersSettings.prototype['biddingStrategy'] = undefined;

/**
 * The kind of content on which the YouTube and Partners ads will be shown.
 * @member {module:model/YoutubeAndPartnersSettings.ContentCategoryEnum} contentCategory
 */
YoutubeAndPartnersSettings.prototype['contentCategory'] = undefined;

/**
 * Output only. The content category which takes effect when serving the line item. When content category is set in both line item and advertiser, the stricter one will take effect when serving the line item.
 * @member {module:model/YoutubeAndPartnersSettings.EffectiveContentCategoryEnum} effectiveContentCategory
 */
YoutubeAndPartnersSettings.prototype['effectiveContentCategory'] = undefined;

/**
 * @member {module:model/YoutubeAndPartnersInventorySourceConfig} inventorySourceSettings
 */
YoutubeAndPartnersSettings.prototype['inventorySourceSettings'] = undefined;

/**
 * Optional. The ID of the form to generate leads.
 * @member {String} leadFormId
 */
YoutubeAndPartnersSettings.prototype['leadFormId'] = undefined;

/**
 * Optional. The ID of the merchant which is linked to the line item for product feed.
 * @member {String} linkedMerchantId
 */
YoutubeAndPartnersSettings.prototype['linkedMerchantId'] = undefined;

/**
 * Optional. The IDs of the videos appear below the primary video ad when the ad is playing in the YouTube app on mobile devices.
 * @member {Array.<String>} relatedVideoIds
 */
YoutubeAndPartnersSettings.prototype['relatedVideoIds'] = undefined;

/**
 * @member {module:model/TargetFrequency} targetFrequency
 */
YoutubeAndPartnersSettings.prototype['targetFrequency'] = undefined;

/**
 * @member {module:model/YoutubeAndPartnersThirdPartyMeasurementSettings} thirdPartyMeasurementSettings
 */
YoutubeAndPartnersSettings.prototype['thirdPartyMeasurementSettings'] = undefined;

/**
 * @member {module:model/VideoAdSequenceSettings} videoAdSequenceSettings
 */
YoutubeAndPartnersSettings.prototype['videoAdSequenceSettings'] = undefined;

/**
 * @member {module:model/FrequencyCap} viewFrequencyCap
 */
YoutubeAndPartnersSettings.prototype['viewFrequencyCap'] = undefined;





/**
 * Allowed values for the <code>contentCategory</code> property.
 * @enum {String}
 * @readonly
 */
YoutubeAndPartnersSettings['ContentCategoryEnum'] = {

    /**
     * value: "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED",

    /**
     * value: "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_STANDARD"
     * @const
     */
    "STANDARD": "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_STANDARD",

    /**
     * value: "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_EXPANDED"
     * @const
     */
    "EXPANDED": "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_EXPANDED",

    /**
     * value: "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_LIMITED"
     * @const
     */
    "LIMITED": "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_LIMITED"
};


/**
 * Allowed values for the <code>effectiveContentCategory</code> property.
 * @enum {String}
 * @readonly
 */
YoutubeAndPartnersSettings['EffectiveContentCategoryEnum'] = {

    /**
     * value: "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED",

    /**
     * value: "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_STANDARD"
     * @const
     */
    "STANDARD": "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_STANDARD",

    /**
     * value: "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_EXPANDED"
     * @const
     */
    "EXPANDED": "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_EXPANDED",

    /**
     * value: "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_LIMITED"
     * @const
     */
    "LIMITED": "YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_LIMITED"
};



export default YoutubeAndPartnersSettings;

