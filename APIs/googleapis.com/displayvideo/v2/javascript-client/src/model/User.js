/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssignedUserRole from './AssignedUserRole';

/**
 * The User model module.
 * @module model/User
 * @version v2
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * A single user in Display &amp; Video 360.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('assignedUserRoles')) {
                obj['assignedUserRoles'] = ApiClient.convertToType(data['assignedUserRoles'], [AssignedUserRole]);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('lastLoginTime')) {
                obj['lastLoginTime'] = ApiClient.convertToType(data['lastLoginTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        if (data['assignedUserRoles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['assignedUserRoles'])) {
                throw new Error("Expected the field `assignedUserRoles` to be an array in the JSON data but got " + data['assignedUserRoles']);
            }
            // validate the optional field `assignedUserRoles` (array)
            for (const item of data['assignedUserRoles']) {
                AssignedUserRole.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['lastLoginTime'] && !(typeof data['lastLoginTime'] === 'string' || data['lastLoginTime'] instanceof String)) {
            throw new Error("Expected the field `lastLoginTime` to be a primitive type in the JSON string but got " + data['lastLoginTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * The assigned user roles. Required in CreateUser. Output only in UpdateUser. Can only be updated through BulkEditAssignedUserRoles.
 * @member {Array.<module:model/AssignedUserRole>} assignedUserRoles
 */
User.prototype['assignedUserRoles'] = undefined;

/**
 * Required. The display name of the user. Must be UTF-8 encoded with a maximum size of 240 bytes.
 * @member {String} displayName
 */
User.prototype['displayName'] = undefined;

/**
 * Required. Immutable. The email address used to identify the user.
 * @member {String} email
 */
User.prototype['email'] = undefined;

/**
 * Output only. The timestamp when the user last logged in DV360 UI.
 * @member {String} lastLoginTime
 */
User.prototype['lastLoginTime'] = undefined;

/**
 * Output only. The resource name of the user.
 * @member {String} name
 */
User.prototype['name'] = undefined;

/**
 * Output only. The unique ID of the user. Assigned by the system.
 * @member {String} userId
 */
User.prototype['userId'] = undefined;






export default User;

