/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductFeedData from './ProductFeedData';
import TargetingExpansionConfig from './TargetingExpansionConfig';
import YoutubeAndPartnersBiddingStrategy from './YoutubeAndPartnersBiddingStrategy';

/**
 * The YoutubeAdGroup model module.
 * @module model/YoutubeAdGroup
 * @version v2
 */
class YoutubeAdGroup {
    /**
     * Constructs a new <code>YoutubeAdGroup</code>.
     * A single YouTube ad group associated with a YouTube and Partners line item.
     * @alias module:model/YoutubeAdGroup
     */
    constructor() { 
        
        YoutubeAdGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>YoutubeAdGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/YoutubeAdGroup} obj Optional instance to populate.
     * @return {module:model/YoutubeAdGroup} The populated <code>YoutubeAdGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new YoutubeAdGroup();

            if (data.hasOwnProperty('adGroupFormat')) {
                obj['adGroupFormat'] = ApiClient.convertToType(data['adGroupFormat'], 'String');
            }
            if (data.hasOwnProperty('adGroupId')) {
                obj['adGroupId'] = ApiClient.convertToType(data['adGroupId'], 'String');
            }
            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], 'String');
            }
            if (data.hasOwnProperty('biddingStrategy')) {
                obj['biddingStrategy'] = YoutubeAndPartnersBiddingStrategy.constructFromObject(data['biddingStrategy']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('entityStatus')) {
                obj['entityStatus'] = ApiClient.convertToType(data['entityStatus'], 'String');
            }
            if (data.hasOwnProperty('lineItemId')) {
                obj['lineItemId'] = ApiClient.convertToType(data['lineItemId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('productFeedData')) {
                obj['productFeedData'] = ProductFeedData.constructFromObject(data['productFeedData']);
            }
            if (data.hasOwnProperty('targetingExpansion')) {
                obj['targetingExpansion'] = TargetingExpansionConfig.constructFromObject(data['targetingExpansion']);
            }
            if (data.hasOwnProperty('youtubeAdIds')) {
                obj['youtubeAdIds'] = ApiClient.convertToType(data['youtubeAdIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>YoutubeAdGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>YoutubeAdGroup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adGroupFormat'] && !(typeof data['adGroupFormat'] === 'string' || data['adGroupFormat'] instanceof String)) {
            throw new Error("Expected the field `adGroupFormat` to be a primitive type in the JSON string but got " + data['adGroupFormat']);
        }
        // ensure the json data is a string
        if (data['adGroupId'] && !(typeof data['adGroupId'] === 'string' || data['adGroupId'] instanceof String)) {
            throw new Error("Expected the field `adGroupId` to be a primitive type in the JSON string but got " + data['adGroupId']);
        }
        // ensure the json data is a string
        if (data['advertiserId'] && !(typeof data['advertiserId'] === 'string' || data['advertiserId'] instanceof String)) {
            throw new Error("Expected the field `advertiserId` to be a primitive type in the JSON string but got " + data['advertiserId']);
        }
        // validate the optional field `biddingStrategy`
        if (data['biddingStrategy']) { // data not null
          YoutubeAndPartnersBiddingStrategy.validateJSON(data['biddingStrategy']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['entityStatus'] && !(typeof data['entityStatus'] === 'string' || data['entityStatus'] instanceof String)) {
            throw new Error("Expected the field `entityStatus` to be a primitive type in the JSON string but got " + data['entityStatus']);
        }
        // ensure the json data is a string
        if (data['lineItemId'] && !(typeof data['lineItemId'] === 'string' || data['lineItemId'] instanceof String)) {
            throw new Error("Expected the field `lineItemId` to be a primitive type in the JSON string but got " + data['lineItemId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `productFeedData`
        if (data['productFeedData']) { // data not null
          ProductFeedData.validateJSON(data['productFeedData']);
        }
        // validate the optional field `targetingExpansion`
        if (data['targetingExpansion']) { // data not null
          TargetingExpansionConfig.validateJSON(data['targetingExpansion']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['youtubeAdIds'])) {
            throw new Error("Expected the field `youtubeAdIds` to be an array in the JSON data but got " + data['youtubeAdIds']);
        }

        return true;
    }


}



/**
 * The format of the ads in the ad group.
 * @member {module:model/YoutubeAdGroup.AdGroupFormatEnum} adGroupFormat
 */
YoutubeAdGroup.prototype['adGroupFormat'] = undefined;

/**
 * The unique ID of the ad group. Assigned by the system.
 * @member {String} adGroupId
 */
YoutubeAdGroup.prototype['adGroupId'] = undefined;

/**
 * The unique ID of the advertiser the ad group belongs to.
 * @member {String} advertiserId
 */
YoutubeAdGroup.prototype['advertiserId'] = undefined;

/**
 * @member {module:model/YoutubeAndPartnersBiddingStrategy} biddingStrategy
 */
YoutubeAdGroup.prototype['biddingStrategy'] = undefined;

/**
 * The display name of the ad group. Must be UTF-8 encoded with a maximum size of 255 bytes.
 * @member {String} displayName
 */
YoutubeAdGroup.prototype['displayName'] = undefined;

/**
 * Controls whether or not the ad group can spend its budget and bid on inventory. If the ad group's parent line item is not active, the ad group can't spend its budget even if its own status is `ENTITY_STATUS_ACTIVE`.
 * @member {module:model/YoutubeAdGroup.EntityStatusEnum} entityStatus
 */
YoutubeAdGroup.prototype['entityStatus'] = undefined;

/**
 * The unique ID of the line item that the ad group belongs to.
 * @member {String} lineItemId
 */
YoutubeAdGroup.prototype['lineItemId'] = undefined;

/**
 * The resource name of the ad group.
 * @member {String} name
 */
YoutubeAdGroup.prototype['name'] = undefined;

/**
 * @member {module:model/ProductFeedData} productFeedData
 */
YoutubeAdGroup.prototype['productFeedData'] = undefined;

/**
 * @member {module:model/TargetingExpansionConfig} targetingExpansion
 */
YoutubeAdGroup.prototype['targetingExpansion'] = undefined;

/**
 * The IDs of the youtube_ad_group_ad resources associated with the ad group.
 * @member {Array.<String>} youtubeAdIds
 */
YoutubeAdGroup.prototype['youtubeAdIds'] = undefined;





/**
 * Allowed values for the <code>adGroupFormat</code> property.
 * @enum {String}
 * @readonly
 */
YoutubeAdGroup['AdGroupFormatEnum'] = {

    /**
     * value: "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_UNSPECIFIED",

    /**
     * value: "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_IN_STREAM"
     * @const
     */
    "IN_STREAM": "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_IN_STREAM",

    /**
     * value: "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_VIDEO_DISCOVERY"
     * @const
     */
    "VIDEO_DISCOVERY": "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_VIDEO_DISCOVERY",

    /**
     * value: "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_BUMPER"
     * @const
     */
    "BUMPER": "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_BUMPER",

    /**
     * value: "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_NON_SKIPPABLE_IN_STREAM"
     * @const
     */
    "NON_SKIPPABLE_IN_STREAM": "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_NON_SKIPPABLE_IN_STREAM",

    /**
     * value: "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_AUDIO"
     * @const
     */
    "AUDIO": "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_AUDIO",

    /**
     * value: "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_ACTION"
     * @const
     */
    "ACTION": "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_ACTION",

    /**
     * value: "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_REACH"
     * @const
     */
    "REACH": "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_REACH",

    /**
     * value: "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_MASTHEAD"
     * @const
     */
    "MASTHEAD": "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_MASTHEAD"
};


/**
 * Allowed values for the <code>entityStatus</code> property.
 * @enum {String}
 * @readonly
 */
YoutubeAdGroup['EntityStatusEnum'] = {

    /**
     * value: "ENTITY_STATUS_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "ENTITY_STATUS_UNSPECIFIED",

    /**
     * value: "ENTITY_STATUS_ACTIVE"
     * @const
     */
    "ACTIVE": "ENTITY_STATUS_ACTIVE",

    /**
     * value: "ENTITY_STATUS_ARCHIVED"
     * @const
     */
    "ARCHIVED": "ENTITY_STATUS_ARCHIVED",

    /**
     * value: "ENTITY_STATUS_DRAFT"
     * @const
     */
    "DRAFT": "ENTITY_STATUS_DRAFT",

    /**
     * value: "ENTITY_STATUS_PAUSED"
     * @const
     */
    "PAUSED": "ENTITY_STATUS_PAUSED",

    /**
     * value: "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
     * @const
     */
    "SCHEDULED_FOR_DELETION": "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
};



export default YoutubeAdGroup;

