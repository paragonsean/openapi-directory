/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TargetFrequency model module.
 * @module model/TargetFrequency
 * @version v2
 */
class TargetFrequency {
    /**
     * Constructs a new <code>TargetFrequency</code>.
     * Setting that controls the average number of times the ads will show to the same person over a certain period of time.
     * @alias module:model/TargetFrequency
     */
    constructor() { 
        
        TargetFrequency.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TargetFrequency</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TargetFrequency} obj Optional instance to populate.
     * @return {module:model/TargetFrequency} The populated <code>TargetFrequency</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TargetFrequency();

            if (data.hasOwnProperty('targetCount')) {
                obj['targetCount'] = ApiClient.convertToType(data['targetCount'], 'String');
            }
            if (data.hasOwnProperty('timeUnit')) {
                obj['timeUnit'] = ApiClient.convertToType(data['timeUnit'], 'String');
            }
            if (data.hasOwnProperty('timeUnitCount')) {
                obj['timeUnitCount'] = ApiClient.convertToType(data['timeUnitCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TargetFrequency</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TargetFrequency</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['targetCount'] && !(typeof data['targetCount'] === 'string' || data['targetCount'] instanceof String)) {
            throw new Error("Expected the field `targetCount` to be a primitive type in the JSON string but got " + data['targetCount']);
        }
        // ensure the json data is a string
        if (data['timeUnit'] && !(typeof data['timeUnit'] === 'string' || data['timeUnit'] instanceof String)) {
            throw new Error("Expected the field `timeUnit` to be a primitive type in the JSON string but got " + data['timeUnit']);
        }

        return true;
    }


}



/**
 * The target number of times, on average, the ads will be shown to the same person in the timespan dictated by time_unit and time_unit_count.
 * @member {String} targetCount
 */
TargetFrequency.prototype['targetCount'] = undefined;

/**
 * The unit of time in which the target frequency will be applied. The following time unit is applicable: * `TIME_UNIT_WEEKS`
 * @member {module:model/TargetFrequency.TimeUnitEnum} timeUnit
 */
TargetFrequency.prototype['timeUnit'] = undefined;

/**
 * The number of time_unit the target frequency will last. The following restrictions apply based on the value of time_unit: * `TIME_UNIT_WEEKS` - must be 1
 * @member {Number} timeUnitCount
 */
TargetFrequency.prototype['timeUnitCount'] = undefined;





/**
 * Allowed values for the <code>timeUnit</code> property.
 * @enum {String}
 * @readonly
 */
TargetFrequency['TimeUnitEnum'] = {

    /**
     * value: "TIME_UNIT_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "TIME_UNIT_UNSPECIFIED",

    /**
     * value: "TIME_UNIT_LIFETIME"
     * @const
     */
    "LIFETIME": "TIME_UNIT_LIFETIME",

    /**
     * value: "TIME_UNIT_MONTHS"
     * @const
     */
    "MONTHS": "TIME_UNIT_MONTHS",

    /**
     * value: "TIME_UNIT_WEEKS"
     * @const
     */
    "WEEKS": "TIME_UNIT_WEEKS",

    /**
     * value: "TIME_UNIT_DAYS"
     * @const
     */
    "DAYS": "TIME_UNIT_DAYS",

    /**
     * value: "TIME_UNIT_HOURS"
     * @const
     */
    "HOURS": "TIME_UNIT_HOURS",

    /**
     * value: "TIME_UNIT_MINUTES"
     * @const
     */
    "MINUTES": "TIME_UNIT_MINUTES"
};



export default TargetFrequency;

