/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ThirdPartyVendorConfig model module.
 * @module model/ThirdPartyVendorConfig
 * @version v2
 */
class ThirdPartyVendorConfig {
    /**
     * Constructs a new <code>ThirdPartyVendorConfig</code>.
     * Settings that control how third-party measurement vendors are configured.
     * @alias module:model/ThirdPartyVendorConfig
     */
    constructor() { 
        
        ThirdPartyVendorConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ThirdPartyVendorConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ThirdPartyVendorConfig} obj Optional instance to populate.
     * @return {module:model/ThirdPartyVendorConfig} The populated <code>ThirdPartyVendorConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ThirdPartyVendorConfig();

            if (data.hasOwnProperty('placementId')) {
                obj['placementId'] = ApiClient.convertToType(data['placementId'], 'String');
            }
            if (data.hasOwnProperty('vendor')) {
                obj['vendor'] = ApiClient.convertToType(data['vendor'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ThirdPartyVendorConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ThirdPartyVendorConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['placementId'] && !(typeof data['placementId'] === 'string' || data['placementId'] instanceof String)) {
            throw new Error("Expected the field `placementId` to be a primitive type in the JSON string but got " + data['placementId']);
        }
        // ensure the json data is a string
        if (data['vendor'] && !(typeof data['vendor'] === 'string' || data['vendor'] instanceof String)) {
            throw new Error("Expected the field `vendor` to be a primitive type in the JSON string but got " + data['vendor']);
        }

        return true;
    }


}



/**
 * The ID used by the platform of the third-party vendor to identify the line item.
 * @member {String} placementId
 */
ThirdPartyVendorConfig.prototype['placementId'] = undefined;

/**
 * The third-party measurement vendor.
 * @member {module:model/ThirdPartyVendorConfig.VendorEnum} vendor
 */
ThirdPartyVendorConfig.prototype['vendor'] = undefined;





/**
 * Allowed values for the <code>vendor</code> property.
 * @enum {String}
 * @readonly
 */
ThirdPartyVendorConfig['VendorEnum'] = {

    /**
     * value: "THIRD_PARTY_VENDOR_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "THIRD_PARTY_VENDOR_UNSPECIFIED",

    /**
     * value: "THIRD_PARTY_VENDOR_MOAT"
     * @const
     */
    "MOAT": "THIRD_PARTY_VENDOR_MOAT",

    /**
     * value: "THIRD_PARTY_VENDOR_DOUBLE_VERIFY"
     * @const
     */
    "DOUBLE_VERIFY": "THIRD_PARTY_VENDOR_DOUBLE_VERIFY",

    /**
     * value: "THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE"
     * @const
     */
    "INTEGRAL_AD_SCIENCE": "THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE",

    /**
     * value: "THIRD_PARTY_VENDOR_COMSCORE"
     * @const
     */
    "COMSCORE": "THIRD_PARTY_VENDOR_COMSCORE",

    /**
     * value: "THIRD_PARTY_VENDOR_TELEMETRY"
     * @const
     */
    "TELEMETRY": "THIRD_PARTY_VENDOR_TELEMETRY",

    /**
     * value: "THIRD_PARTY_VENDOR_MEETRICS"
     * @const
     */
    "MEETRICS": "THIRD_PARTY_VENDOR_MEETRICS",

    /**
     * value: "THIRD_PARTY_VENDOR_ZEFR"
     * @const
     */
    "ZEFR": "THIRD_PARTY_VENDOR_ZEFR",

    /**
     * value: "THIRD_PARTY_VENDOR_NIELSEN"
     * @const
     */
    "NIELSEN": "THIRD_PARTY_VENDOR_NIELSEN",

    /**
     * value: "THIRD_PARTY_VENDOR_KANTAR"
     * @const
     */
    "KANTAR": "THIRD_PARTY_VENDOR_KANTAR",

    /**
     * value: "THIRD_PARTY_VENDOR_DYNATA"
     * @const
     */
    "DYNATA": "THIRD_PARTY_VENDOR_DYNATA"
};



export default ThirdPartyVendorConfig;

