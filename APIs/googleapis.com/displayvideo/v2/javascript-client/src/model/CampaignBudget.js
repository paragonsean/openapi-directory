/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateRange from './DateRange';
import PrismaConfig from './PrismaConfig';

/**
 * The CampaignBudget model module.
 * @module model/CampaignBudget
 * @version v2
 */
class CampaignBudget {
    /**
     * Constructs a new <code>CampaignBudget</code>.
     * Settings that control how the campaign budget is allocated.
     * @alias module:model/CampaignBudget
     */
    constructor() { 
        
        CampaignBudget.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CampaignBudget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CampaignBudget} obj Optional instance to populate.
     * @return {module:model/CampaignBudget} The populated <code>CampaignBudget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CampaignBudget();

            if (data.hasOwnProperty('budgetAmountMicros')) {
                obj['budgetAmountMicros'] = ApiClient.convertToType(data['budgetAmountMicros'], 'String');
            }
            if (data.hasOwnProperty('budgetId')) {
                obj['budgetId'] = ApiClient.convertToType(data['budgetId'], 'String');
            }
            if (data.hasOwnProperty('budgetUnit')) {
                obj['budgetUnit'] = ApiClient.convertToType(data['budgetUnit'], 'String');
            }
            if (data.hasOwnProperty('dateRange')) {
                obj['dateRange'] = DateRange.constructFromObject(data['dateRange']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('externalBudgetId')) {
                obj['externalBudgetId'] = ApiClient.convertToType(data['externalBudgetId'], 'String');
            }
            if (data.hasOwnProperty('externalBudgetSource')) {
                obj['externalBudgetSource'] = ApiClient.convertToType(data['externalBudgetSource'], 'String');
            }
            if (data.hasOwnProperty('invoiceGroupingId')) {
                obj['invoiceGroupingId'] = ApiClient.convertToType(data['invoiceGroupingId'], 'String');
            }
            if (data.hasOwnProperty('prismaConfig')) {
                obj['prismaConfig'] = PrismaConfig.constructFromObject(data['prismaConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CampaignBudget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CampaignBudget</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['budgetAmountMicros'] && !(typeof data['budgetAmountMicros'] === 'string' || data['budgetAmountMicros'] instanceof String)) {
            throw new Error("Expected the field `budgetAmountMicros` to be a primitive type in the JSON string but got " + data['budgetAmountMicros']);
        }
        // ensure the json data is a string
        if (data['budgetId'] && !(typeof data['budgetId'] === 'string' || data['budgetId'] instanceof String)) {
            throw new Error("Expected the field `budgetId` to be a primitive type in the JSON string but got " + data['budgetId']);
        }
        // ensure the json data is a string
        if (data['budgetUnit'] && !(typeof data['budgetUnit'] === 'string' || data['budgetUnit'] instanceof String)) {
            throw new Error("Expected the field `budgetUnit` to be a primitive type in the JSON string but got " + data['budgetUnit']);
        }
        // validate the optional field `dateRange`
        if (data['dateRange']) { // data not null
          DateRange.validateJSON(data['dateRange']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['externalBudgetId'] && !(typeof data['externalBudgetId'] === 'string' || data['externalBudgetId'] instanceof String)) {
            throw new Error("Expected the field `externalBudgetId` to be a primitive type in the JSON string but got " + data['externalBudgetId']);
        }
        // ensure the json data is a string
        if (data['externalBudgetSource'] && !(typeof data['externalBudgetSource'] === 'string' || data['externalBudgetSource'] instanceof String)) {
            throw new Error("Expected the field `externalBudgetSource` to be a primitive type in the JSON string but got " + data['externalBudgetSource']);
        }
        // ensure the json data is a string
        if (data['invoiceGroupingId'] && !(typeof data['invoiceGroupingId'] === 'string' || data['invoiceGroupingId'] instanceof String)) {
            throw new Error("Expected the field `invoiceGroupingId` to be a primitive type in the JSON string but got " + data['invoiceGroupingId']);
        }
        // validate the optional field `prismaConfig`
        if (data['prismaConfig']) { // data not null
          PrismaConfig.validateJSON(data['prismaConfig']);
        }

        return true;
    }


}



/**
 * Required. The total amount the linked insertion order segments can budget. The amount is in micros. Must be greater than 0. For example, 500000000 represents 500 standard units of the currency.
 * @member {String} budgetAmountMicros
 */
CampaignBudget.prototype['budgetAmountMicros'] = undefined;

/**
 * The unique ID of the campaign budget. Assigned by the system. Do not set for new budgets. Must be included when updating or adding budgets to campaign_budgets. Otherwise, a new ID will be generated and assigned.
 * @member {String} budgetId
 */
CampaignBudget.prototype['budgetId'] = undefined;

/**
 * Required. Immutable. Specifies whether the budget is measured in currency or impressions.
 * @member {module:model/CampaignBudget.BudgetUnitEnum} budgetUnit
 */
CampaignBudget.prototype['budgetUnit'] = undefined;

/**
 * @member {module:model/DateRange} dateRange
 */
CampaignBudget.prototype['dateRange'] = undefined;

/**
 * Required. The display name of the budget. Must be UTF-8 encoded with a maximum size of 240 bytes.
 * @member {String} displayName
 */
CampaignBudget.prototype['displayName'] = undefined;

/**
 * Immutable. The ID identifying this budget to the external source. If this field is set and the invoice detail level of the corresponding billing profile is set to \"Budget level PO\", all impressions served against this budget will include this ID on the invoice. Must be unique under the campaign.
 * @member {String} externalBudgetId
 */
CampaignBudget.prototype['externalBudgetId'] = undefined;

/**
 * Required. The external source of the budget.
 * @member {module:model/CampaignBudget.ExternalBudgetSourceEnum} externalBudgetSource
 */
CampaignBudget.prototype['externalBudgetSource'] = undefined;

/**
 * Immutable. The ID used to group budgets to be included the same invoice. If this field is set and the invoice level of the corresponding billing profile is set to \"Budget invoice grouping ID\", all external_budget_id sharing the same invoice_grouping_id will be grouped in the same invoice.
 * @member {String} invoiceGroupingId
 */
CampaignBudget.prototype['invoiceGroupingId'] = undefined;

/**
 * @member {module:model/PrismaConfig} prismaConfig
 */
CampaignBudget.prototype['prismaConfig'] = undefined;





/**
 * Allowed values for the <code>budgetUnit</code> property.
 * @enum {String}
 * @readonly
 */
CampaignBudget['BudgetUnitEnum'] = {

    /**
     * value: "BUDGET_UNIT_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "BUDGET_UNIT_UNSPECIFIED",

    /**
     * value: "BUDGET_UNIT_CURRENCY"
     * @const
     */
    "CURRENCY": "BUDGET_UNIT_CURRENCY",

    /**
     * value: "BUDGET_UNIT_IMPRESSIONS"
     * @const
     */
    "IMPRESSIONS": "BUDGET_UNIT_IMPRESSIONS"
};


/**
 * Allowed values for the <code>externalBudgetSource</code> property.
 * @enum {String}
 * @readonly
 */
CampaignBudget['ExternalBudgetSourceEnum'] = {

    /**
     * value: "EXTERNAL_BUDGET_SOURCE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "EXTERNAL_BUDGET_SOURCE_UNSPECIFIED",

    /**
     * value: "EXTERNAL_BUDGET_SOURCE_NONE"
     * @const
     */
    "NONE": "EXTERNAL_BUDGET_SOURCE_NONE",

    /**
     * value: "EXTERNAL_BUDGET_SOURCE_MEDIA_OCEAN"
     * @const
     */
    "MEDIA_OCEAN": "EXTERNAL_BUDGET_SOURCE_MEDIA_OCEAN"
};



export default CampaignBudget;

