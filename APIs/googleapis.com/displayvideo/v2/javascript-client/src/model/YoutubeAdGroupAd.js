/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdUrl from './AdUrl';
import AudioAd from './AudioAd';
import BumperAd from './BumperAd';
import DisplayVideoSourceAd from './DisplayVideoSourceAd';
import InStreamAd from './InStreamAd';
import MastheadAd from './MastheadAd';
import NonSkippableAd from './NonSkippableAd';
import VideoDiscoveryAd from './VideoDiscoveryAd';
import VideoPerformanceAd from './VideoPerformanceAd';

/**
 * The YoutubeAdGroupAd model module.
 * @module model/YoutubeAdGroupAd
 * @version v2
 */
class YoutubeAdGroupAd {
    /**
     * Constructs a new <code>YoutubeAdGroupAd</code>.
     * A single ad associated with a YouTube ad group.
     * @alias module:model/YoutubeAdGroupAd
     */
    constructor() { 
        
        YoutubeAdGroupAd.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>YoutubeAdGroupAd</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/YoutubeAdGroupAd} obj Optional instance to populate.
     * @return {module:model/YoutubeAdGroupAd} The populated <code>YoutubeAdGroupAd</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new YoutubeAdGroupAd();

            if (data.hasOwnProperty('adGroupAdId')) {
                obj['adGroupAdId'] = ApiClient.convertToType(data['adGroupAdId'], 'String');
            }
            if (data.hasOwnProperty('adGroupId')) {
                obj['adGroupId'] = ApiClient.convertToType(data['adGroupId'], 'String');
            }
            if (data.hasOwnProperty('adUrls')) {
                obj['adUrls'] = ApiClient.convertToType(data['adUrls'], [AdUrl]);
            }
            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], 'String');
            }
            if (data.hasOwnProperty('audioAd')) {
                obj['audioAd'] = AudioAd.constructFromObject(data['audioAd']);
            }
            if (data.hasOwnProperty('bumperAd')) {
                obj['bumperAd'] = BumperAd.constructFromObject(data['bumperAd']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('displayVideoSourceAd')) {
                obj['displayVideoSourceAd'] = DisplayVideoSourceAd.constructFromObject(data['displayVideoSourceAd']);
            }
            if (data.hasOwnProperty('entityStatus')) {
                obj['entityStatus'] = ApiClient.convertToType(data['entityStatus'], 'String');
            }
            if (data.hasOwnProperty('inStreamAd')) {
                obj['inStreamAd'] = InStreamAd.constructFromObject(data['inStreamAd']);
            }
            if (data.hasOwnProperty('mastheadAd')) {
                obj['mastheadAd'] = MastheadAd.constructFromObject(data['mastheadAd']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nonSkippableAd')) {
                obj['nonSkippableAd'] = NonSkippableAd.constructFromObject(data['nonSkippableAd']);
            }
            if (data.hasOwnProperty('videoDiscoverAd')) {
                obj['videoDiscoverAd'] = VideoDiscoveryAd.constructFromObject(data['videoDiscoverAd']);
            }
            if (data.hasOwnProperty('videoPerformanceAd')) {
                obj['videoPerformanceAd'] = VideoPerformanceAd.constructFromObject(data['videoPerformanceAd']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>YoutubeAdGroupAd</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>YoutubeAdGroupAd</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adGroupAdId'] && !(typeof data['adGroupAdId'] === 'string' || data['adGroupAdId'] instanceof String)) {
            throw new Error("Expected the field `adGroupAdId` to be a primitive type in the JSON string but got " + data['adGroupAdId']);
        }
        // ensure the json data is a string
        if (data['adGroupId'] && !(typeof data['adGroupId'] === 'string' || data['adGroupId'] instanceof String)) {
            throw new Error("Expected the field `adGroupId` to be a primitive type in the JSON string but got " + data['adGroupId']);
        }
        if (data['adUrls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['adUrls'])) {
                throw new Error("Expected the field `adUrls` to be an array in the JSON data but got " + data['adUrls']);
            }
            // validate the optional field `adUrls` (array)
            for (const item of data['adUrls']) {
                AdUrl.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['advertiserId'] && !(typeof data['advertiserId'] === 'string' || data['advertiserId'] instanceof String)) {
            throw new Error("Expected the field `advertiserId` to be a primitive type in the JSON string but got " + data['advertiserId']);
        }
        // validate the optional field `audioAd`
        if (data['audioAd']) { // data not null
          AudioAd.validateJSON(data['audioAd']);
        }
        // validate the optional field `bumperAd`
        if (data['bumperAd']) { // data not null
          BumperAd.validateJSON(data['bumperAd']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `displayVideoSourceAd`
        if (data['displayVideoSourceAd']) { // data not null
          DisplayVideoSourceAd.validateJSON(data['displayVideoSourceAd']);
        }
        // ensure the json data is a string
        if (data['entityStatus'] && !(typeof data['entityStatus'] === 'string' || data['entityStatus'] instanceof String)) {
            throw new Error("Expected the field `entityStatus` to be a primitive type in the JSON string but got " + data['entityStatus']);
        }
        // validate the optional field `inStreamAd`
        if (data['inStreamAd']) { // data not null
          InStreamAd.validateJSON(data['inStreamAd']);
        }
        // validate the optional field `mastheadAd`
        if (data['mastheadAd']) { // data not null
          MastheadAd.validateJSON(data['mastheadAd']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `nonSkippableAd`
        if (data['nonSkippableAd']) { // data not null
          NonSkippableAd.validateJSON(data['nonSkippableAd']);
        }
        // validate the optional field `videoDiscoverAd`
        if (data['videoDiscoverAd']) { // data not null
          VideoDiscoveryAd.validateJSON(data['videoDiscoverAd']);
        }
        // validate the optional field `videoPerformanceAd`
        if (data['videoPerformanceAd']) { // data not null
          VideoPerformanceAd.validateJSON(data['videoPerformanceAd']);
        }

        return true;
    }


}



/**
 * The unique ID of the ad. Assigned by the system.
 * @member {String} adGroupAdId
 */
YoutubeAdGroupAd.prototype['adGroupAdId'] = undefined;

/**
 * The unique ID of the ad group that the ad belongs to.
 * @member {String} adGroupId
 */
YoutubeAdGroupAd.prototype['adGroupId'] = undefined;

/**
 * List of URLs used by the ad.
 * @member {Array.<module:model/AdUrl>} adUrls
 */
YoutubeAdGroupAd.prototype['adUrls'] = undefined;

/**
 * The unique ID of the advertiser the ad belongs to.
 * @member {String} advertiserId
 */
YoutubeAdGroupAd.prototype['advertiserId'] = undefined;

/**
 * @member {module:model/AudioAd} audioAd
 */
YoutubeAdGroupAd.prototype['audioAd'] = undefined;

/**
 * @member {module:model/BumperAd} bumperAd
 */
YoutubeAdGroupAd.prototype['bumperAd'] = undefined;

/**
 * The display name of the ad. Must be UTF-8 encoded with a maximum size of 255 bytes.
 * @member {String} displayName
 */
YoutubeAdGroupAd.prototype['displayName'] = undefined;

/**
 * @member {module:model/DisplayVideoSourceAd} displayVideoSourceAd
 */
YoutubeAdGroupAd.prototype['displayVideoSourceAd'] = undefined;

/**
 * The entity status of the ad.
 * @member {module:model/YoutubeAdGroupAd.EntityStatusEnum} entityStatus
 */
YoutubeAdGroupAd.prototype['entityStatus'] = undefined;

/**
 * @member {module:model/InStreamAd} inStreamAd
 */
YoutubeAdGroupAd.prototype['inStreamAd'] = undefined;

/**
 * @member {module:model/MastheadAd} mastheadAd
 */
YoutubeAdGroupAd.prototype['mastheadAd'] = undefined;

/**
 * The resource name of the ad.
 * @member {String} name
 */
YoutubeAdGroupAd.prototype['name'] = undefined;

/**
 * @member {module:model/NonSkippableAd} nonSkippableAd
 */
YoutubeAdGroupAd.prototype['nonSkippableAd'] = undefined;

/**
 * @member {module:model/VideoDiscoveryAd} videoDiscoverAd
 */
YoutubeAdGroupAd.prototype['videoDiscoverAd'] = undefined;

/**
 * @member {module:model/VideoPerformanceAd} videoPerformanceAd
 */
YoutubeAdGroupAd.prototype['videoPerformanceAd'] = undefined;





/**
 * Allowed values for the <code>entityStatus</code> property.
 * @enum {String}
 * @readonly
 */
YoutubeAdGroupAd['EntityStatusEnum'] = {

    /**
     * value: "ENTITY_STATUS_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "ENTITY_STATUS_UNSPECIFIED",

    /**
     * value: "ENTITY_STATUS_ACTIVE"
     * @const
     */
    "ACTIVE": "ENTITY_STATUS_ACTIVE",

    /**
     * value: "ENTITY_STATUS_ARCHIVED"
     * @const
     */
    "ARCHIVED": "ENTITY_STATUS_ARCHIVED",

    /**
     * value: "ENTITY_STATUS_DRAFT"
     * @const
     */
    "DRAFT": "ENTITY_STATUS_DRAFT",

    /**
     * value: "ENTITY_STATUS_PAUSED"
     * @const
     */
    "PAUSED": "ENTITY_STATUS_PAUSED",

    /**
     * value: "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
     * @const
     */
    "SCHEDULED_FOR_DELETION": "ENTITY_STATUS_SCHEDULED_FOR_DELETION"
};



export default YoutubeAdGroupAd;

