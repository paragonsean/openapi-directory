/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Advertiser from '../model/Advertiser';
import AssignedLocation from '../model/AssignedLocation';
import AssignedTargetingOption from '../model/AssignedTargetingOption';
import AuditAdvertiserResponse from '../model/AuditAdvertiserResponse';
import BulkEditAdvertiserAssignedTargetingOptionsRequest from '../model/BulkEditAdvertiserAssignedTargetingOptionsRequest';
import BulkEditAdvertiserAssignedTargetingOptionsResponse from '../model/BulkEditAdvertiserAssignedTargetingOptionsResponse';
import BulkEditAssignedLocationsRequest from '../model/BulkEditAssignedLocationsRequest';
import BulkEditAssignedLocationsResponse from '../model/BulkEditAssignedLocationsResponse';
import BulkEditAssignedTargetingOptionsRequest from '../model/BulkEditAssignedTargetingOptionsRequest';
import BulkEditAssignedTargetingOptionsResponse from '../model/BulkEditAssignedTargetingOptionsResponse';
import BulkEditNegativeKeywordsRequest from '../model/BulkEditNegativeKeywordsRequest';
import BulkEditNegativeKeywordsResponse from '../model/BulkEditNegativeKeywordsResponse';
import BulkEditSitesRequest from '../model/BulkEditSitesRequest';
import BulkEditSitesResponse from '../model/BulkEditSitesResponse';
import BulkListAdGroupAssignedTargetingOptionsResponse from '../model/BulkListAdGroupAssignedTargetingOptionsResponse';
import BulkListAdvertiserAssignedTargetingOptionsResponse from '../model/BulkListAdvertiserAssignedTargetingOptionsResponse';
import BulkListAssignedTargetingOptionsResponse from '../model/BulkListAssignedTargetingOptionsResponse';
import BulkListCampaignAssignedTargetingOptionsResponse from '../model/BulkListCampaignAssignedTargetingOptionsResponse';
import BulkListInsertionOrderAssignedTargetingOptionsResponse from '../model/BulkListInsertionOrderAssignedTargetingOptionsResponse';
import BulkUpdateLineItemsRequest from '../model/BulkUpdateLineItemsRequest';
import BulkUpdateLineItemsResponse from '../model/BulkUpdateLineItemsResponse';
import Campaign from '../model/Campaign';
import Channel from '../model/Channel';
import CreateAssetRequest from '../model/CreateAssetRequest';
import CreateAssetResponse from '../model/CreateAssetResponse';
import Creative from '../model/Creative';
import DuplicateLineItemRequest from '../model/DuplicateLineItemRequest';
import DuplicateLineItemResponse from '../model/DuplicateLineItemResponse';
import GenerateDefaultLineItemRequest from '../model/GenerateDefaultLineItemRequest';
import InsertionOrder from '../model/InsertionOrder';
import LineItem from '../model/LineItem';
import ListAdvertiserAssignedTargetingOptionsResponse from '../model/ListAdvertiserAssignedTargetingOptionsResponse';
import ListAdvertisersResponse from '../model/ListAdvertisersResponse';
import ListAssignedLocationsResponse from '../model/ListAssignedLocationsResponse';
import ListCampaignAssignedTargetingOptionsResponse from '../model/ListCampaignAssignedTargetingOptionsResponse';
import ListCampaignsResponse from '../model/ListCampaignsResponse';
import ListChannelsResponse from '../model/ListChannelsResponse';
import ListCreativesResponse from '../model/ListCreativesResponse';
import ListInsertionOrderAssignedTargetingOptionsResponse from '../model/ListInsertionOrderAssignedTargetingOptionsResponse';
import ListInsertionOrdersResponse from '../model/ListInsertionOrdersResponse';
import ListInvoicesResponse from '../model/ListInvoicesResponse';
import ListLineItemAssignedTargetingOptionsResponse from '../model/ListLineItemAssignedTargetingOptionsResponse';
import ListLineItemsResponse from '../model/ListLineItemsResponse';
import ListLocationListsResponse from '../model/ListLocationListsResponse';
import ListManualTriggersResponse from '../model/ListManualTriggersResponse';
import ListNegativeKeywordListsResponse from '../model/ListNegativeKeywordListsResponse';
import ListNegativeKeywordsResponse from '../model/ListNegativeKeywordsResponse';
import ListSitesResponse from '../model/ListSitesResponse';
import ListYoutubeAdGroupAdsResponse from '../model/ListYoutubeAdGroupAdsResponse';
import ListYoutubeAdGroupAssignedTargetingOptionsResponse from '../model/ListYoutubeAdGroupAssignedTargetingOptionsResponse';
import ListYoutubeAdGroupsResponse from '../model/ListYoutubeAdGroupsResponse';
import LocationList from '../model/LocationList';
import LookupInvoiceCurrencyResponse from '../model/LookupInvoiceCurrencyResponse';
import ManualTrigger from '../model/ManualTrigger';
import NegativeKeywordList from '../model/NegativeKeywordList';
import ReplaceNegativeKeywordsRequest from '../model/ReplaceNegativeKeywordsRequest';
import ReplaceNegativeKeywordsResponse from '../model/ReplaceNegativeKeywordsResponse';
import ReplaceSitesRequest from '../model/ReplaceSitesRequest';
import ReplaceSitesResponse from '../model/ReplaceSitesResponse';
import YoutubeAdGroup from '../model/YoutubeAdGroup';
import YoutubeAdGroupAd from '../model/YoutubeAdGroupAd';

/**
* Advertisers service.
* @module api/AdvertisersApi
* @version v2
*/
export default class AdvertisersApi {

    /**
    * Constructs a new AdvertisersApi. 
    * @alias module:api/AdvertisersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the displayvideoAdvertisersAssetsUpload operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersAssetsUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAssetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads an asset. Returns the ID of the newly uploaded asset if successful. The asset file size should be no more than 10 MB for images, 200 MB for ZIP files, and 1 GB for videos. Must be used within the [multipart media upload process](/display-video/api/guides/how-tos/upload#multipart). Examples using provided client libraries can be found in our [Creating Creatives guide](/display-video/api/guides/creating-creatives/overview#upload_an_asset).
     * @param {String} advertiserId Required. The ID of the advertiser this asset belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/CreateAssetRequest} [createAssetRequest] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersAssetsUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAssetResponse}
     */
    displayvideoAdvertisersAssetsUpload(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createAssetRequest'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersAssetsUpload");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = CreateAssetResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersAudit operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersAuditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditAdvertiserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Audits an advertiser. Returns the counts of used entities per resource type under the advertiser provided. Used entities count towards their respective resource limit. See https://support.google.com/displayvideo/answer/6071450.
     * @param {String} advertiserId Required. The ID of the advertiser to audit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [readMask] Optional. The specific fields to return. If no mask is specified, all fields in the response proto will be filled. Valid values are: * usedLineItemsCount * usedInsertionOrdersCount * usedCampaignsCount * channelsCount * negativelyTargetedChannelsCount * negativeKeywordListsCount * adGroupCriteriaCount * campaignCriteriaCount
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersAuditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditAdvertiserResponse}
     */
    displayvideoAdvertisersAudit(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersAudit");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'readMask': opts['readMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuditAdvertiserResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}:audit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersCampaignsCreate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersCampaignsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Campaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new campaign. Returns the newly created campaign if successful.
     * @param {String} advertiserId Output only. The unique ID of the advertiser the campaign belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Campaign} [campaign] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersCampaignsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Campaign}
     */
    displayvideoAdvertisersCampaignsCreate(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['campaign'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersCampaignsCreate");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Campaign;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/campaigns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersCampaignsDelete operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersCampaignsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently deletes a campaign. A deleted campaign cannot be recovered. The campaign should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to delete it. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors.
     * @param {String} advertiserId The ID of the advertiser this campaign belongs to.
     * @param {String} campaignId The ID of the campaign we need to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersCampaignsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    displayvideoAdvertisersCampaignsDelete(advertiserId, campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersCampaignsDelete");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling displayvideoAdvertisersCampaignsDelete");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'campaignId': campaignId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/campaigns/{campaignId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersCampaignsGet operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersCampaignsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Campaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a campaign.
     * @param {String} advertiserId Required. The ID of the advertiser this campaign belongs to.
     * @param {String} campaignId Required. The ID of the campaign to fetch.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersCampaignsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Campaign}
     */
    displayvideoAdvertisersCampaignsGet(advertiserId, campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersCampaignsGet");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling displayvideoAdvertisersCampaignsGet");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'campaignId': campaignId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Campaign;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/campaigns/{campaignId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersCampaignsList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersCampaignsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCampaignsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists campaigns in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, campaigns with `ENTITY_STATUS_ARCHIVED` will not be included in the results.
     * @param {String} advertiserId The ID of the advertiser to list campaigns for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by campaign fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * The `updateTime` field must use the `GREATER THAN OR EQUAL TO (>=)` or `LESS THAN OR EQUAL TO (<=)` operators. * All other fields must use the `EQUALS (=)` operator. Supported fields: * `campaignId` * `displayName` * `entityStatus` * `updateTime` (input in ISO 8601 format, or `YYYY-MM-DDTHH:MM:SSZ`) Examples: * All `ENTITY_STATUS_ACTIVE` or `ENTITY_STATUS_PAUSED` campaigns under an advertiser: `(entityStatus=\"ENTITY_STATUS_ACTIVE\" OR entityStatus=\"ENTITY_STATUS_PAUSED\")` * All campaigns with an update time less than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime<=\"2020-11-04T18:54:47Z\"` * All campaigns with an update time greater than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime>=\"2020-11-04T18:54:47Z\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `displayName` (default) * `entityStatus` * `updateTime` The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `displayName desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `200`. If unspecified will default to `100`.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCampaigns` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersCampaignsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCampaignsResponse}
     */
    displayvideoAdvertisersCampaignsList(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersCampaignsList");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCampaignsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/campaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersCampaignsListAssignedTargetingOptions operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersCampaignsListAssignedTargetingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkListCampaignAssignedTargetingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists assigned targeting options of a campaign across targeting types.
     * @param {String} advertiserId Required. The ID of the advertiser the campaign belongs to.
     * @param {String} campaignId Required. The ID of the campaign to list assigned targeting options for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR` logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `targetingType` * `inheritance` Examples: * `AssignedTargetingOption` resources of targeting type `TARGETING_TYPE_LANGUAGE` or `TARGETING_TYPE_GENDER`: `targetingType=\"TARGETING_TYPE_LANGUAGE\" OR targetingType=\"TARGETING_TYPE_GENDER\"` * `AssignedTargetingOption` resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER`: `inheritance=\"NOT_INHERITED\" OR inheritance=\"INHERITED_FROM_PARTNER\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `targetingType` (default) The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `targetingType desc`.
     * @param {Number} [pageSize] Requested page size. The size must be an integer between `1` and `5000`. If unspecified, the default is `5000`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token that lets the client fetch the next page of results. Typically, this is the value of next_page_token returned from the previous call to `BulkListCampaignAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersCampaignsListAssignedTargetingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkListCampaignAssignedTargetingOptionsResponse}
     */
    displayvideoAdvertisersCampaignsListAssignedTargetingOptions(advertiserId, campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersCampaignsListAssignedTargetingOptions");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling displayvideoAdvertisersCampaignsListAssignedTargetingOptions");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'campaignId': campaignId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BulkListCampaignAssignedTargetingOptionsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/campaigns/{campaignId}:listAssignedTargetingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersCampaignsPatch operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersCampaignsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Campaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing campaign. Returns the updated campaign if successful.
     * @param {String} advertiserId Output only. The unique ID of the advertiser the campaign belongs to.
     * @param {String} campaignId Output only. The unique ID of the campaign. Assigned by the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [updateMask] Required. The mask to control which fields to update.
     * @param {module:model/Campaign} [campaign] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersCampaignsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Campaign}
     */
    displayvideoAdvertisersCampaignsPatch(advertiserId, campaignId, opts, callback) {
      opts = opts || {};
      let postBody = opts['campaign'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersCampaignsPatch");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling displayvideoAdvertisersCampaignsPatch");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'campaignId': campaignId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'updateMask': opts['updateMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Campaign;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/campaigns/{campaignId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGet operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignedTargetingOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a single targeting option assigned to a campaign.
     * @param {String} advertiserId Required. The ID of the advertiser the campaign belongs to.
     * @param {String} campaignId Required. The ID of the campaign the assigned targeting option belongs to.
     * @param {module:model/String} targetingType Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_VIEWABILITY`
     * @param {String} assignedTargetingOptionId Required. An identifier unique to the targeting type in this campaign that identifies the assigned targeting option being requested.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignedTargetingOption}
     */
    displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGet(advertiserId, campaignId, targetingType, assignedTargetingOptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGet");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGet");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGet");
      }
      // verify the required parameter 'assignedTargetingOptionId' is set
      if (assignedTargetingOptionId === undefined || assignedTargetingOptionId === null) {
        throw new Error("Missing the required parameter 'assignedTargetingOptionId' when calling displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGet");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'campaignId': campaignId,
        'targetingType': targetingType,
        'assignedTargetingOptionId': assignedTargetingOptionId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssignedTargetingOption;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/campaigns/{campaignId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCampaignAssignedTargetingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the targeting options assigned to a campaign for a specified targeting type.
     * @param {String} advertiserId Required. The ID of the advertiser the campaign belongs to.
     * @param {String} campaignId Required. The ID of the campaign to list assigned targeting options for.
     * @param {module:model/String} targetingType Required. Identifies the type of assigned targeting options to list. Supported targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_VIEWABILITY`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR` logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedTargetingOptionId` * `inheritance` Examples: * `AssignedTargetingOption` resources with ID 1 or 2 `assignedTargetingOptionId=\"1\" OR assignedTargetingOptionId=\"2\"` * `AssignedTargetingOption` resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER` `inheritance=\"NOT_INHERITED\" OR inheritance=\"INHERITED_FROM_PARTNER\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `assignedTargetingOptionId desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `5000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCampaignAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCampaignAssignedTargetingOptionsResponse}
     */
    displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsList(advertiserId, campaignId, targetingType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsList");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsList");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsList");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'campaignId': campaignId,
        'targetingType': targetingType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCampaignAssignedTargetingOptionsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/campaigns/{campaignId}/targetingTypes/{targetingType}/assignedTargetingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersChannelsCreate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersChannelsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new channel. Returns the newly created channel if successful.
     * @param {String} advertiserId The ID of the advertiser that owns the created channel.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [partnerId] The ID of the partner that owns the created channel.
     * @param {module:model/Channel} [channel] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersChannelsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    displayvideoAdvertisersChannelsCreate(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['channel'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersChannelsCreate");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Channel;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersChannelsList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersChannelsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists channels for a partner or advertiser.
     * @param {String} advertiserId The ID of the advertiser that owns the channels.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by channel fields. Supported syntax: * Filter expressions for channel can only contain at most one restriction. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `displayName` Examples: * All channels for which the display name contains \"google\": `displayName : \"google\"`. The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `displayName` (default) * `channelId` The default sorting order is ascending. To specify descending order for a field, a suffix \" desc\" should be added to the field name. Example: `displayName desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListChannels` method. If not specified, the first page of results will be returned.
     * @param {String} [partnerId] The ID of the partner that owns the channels.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersChannelsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelsResponse}
     */
    displayvideoAdvertisersChannelsList(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersChannelsList");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersChannelsPatch operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersChannelsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a channel. Returns the updated channel if successful.
     * @param {String} advertiserId The ID of the advertiser that owns the created channel.
     * @param {String} channelId Output only. The unique ID of the channel. Assigned by the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [partnerId] The ID of the partner that owns the created channel.
     * @param {String} [updateMask] Required. The mask to control which fields to update.
     * @param {module:model/Channel} [channel] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersChannelsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    displayvideoAdvertisersChannelsPatch(advertiserId, channelId, opts, callback) {
      opts = opts || {};
      let postBody = opts['channel'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersChannelsPatch");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling displayvideoAdvertisersChannelsPatch");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'channelId': channelId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'partnerId': opts['partnerId'],
        'updateMask': opts['updateMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Channel;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/channels/{channelId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersChannelsSitesBulkEdit operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersChannelsSitesBulkEditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEditSitesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk edits sites under a single channel. The operation will delete the sites provided in BulkEditSitesRequest.deleted_sites and then create the sites provided in BulkEditSitesRequest.created_sites.
     * @param {String} advertiserId The ID of the advertiser that owns the parent channel.
     * @param {String} channelId Required. The ID of the parent channel to which the sites belong.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BulkEditSitesRequest} [bulkEditSitesRequest] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersChannelsSitesBulkEditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEditSitesResponse}
     */
    displayvideoAdvertisersChannelsSitesBulkEdit(advertiserId, channelId, opts, callback) {
      opts = opts || {};
      let postBody = opts['bulkEditSitesRequest'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersChannelsSitesBulkEdit");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling displayvideoAdvertisersChannelsSitesBulkEdit");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'channelId': channelId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEditSitesResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/channels/{channelId}/sites:bulkEdit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersChannelsSitesDelete operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersChannelsSitesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a site from a channel.
     * @param {String} advertiserId The ID of the advertiser that owns the parent channel.
     * @param {String} channelId Required. The ID of the parent channel to which the site belongs.
     * @param {String} urlOrAppId Required. The URL or app ID of the site to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [partnerId] The ID of the partner that owns the parent channel.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersChannelsSitesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    displayvideoAdvertisersChannelsSitesDelete(advertiserId, channelId, urlOrAppId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersChannelsSitesDelete");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling displayvideoAdvertisersChannelsSitesDelete");
      }
      // verify the required parameter 'urlOrAppId' is set
      if (urlOrAppId === undefined || urlOrAppId === null) {
        throw new Error("Missing the required parameter 'urlOrAppId' when calling displayvideoAdvertisersChannelsSitesDelete");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'channelId': channelId,
        'urlOrAppId': urlOrAppId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/channels/{channelId}/sites/{urlOrAppId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersChannelsSitesList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersChannelsSitesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSitesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists sites in a channel.
     * @param {String} advertiserId The ID of the advertiser that owns the parent channel.
     * @param {String} channelId Required. The ID of the parent channel to which the requested sites belong.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by site fields. Supported syntax: * Filter expressions for site retrieval can only contain at most one restriction. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `urlOrAppId` Examples: * All sites for which the URL or app ID contains \"google\": `urlOrAppId : \"google\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `urlOrAppId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix \" desc\" should be added to the field name. Example: `urlOrAppId desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `10000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListSites` method. If not specified, the first page of results will be returned.
     * @param {String} [partnerId] The ID of the partner that owns the parent channel.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersChannelsSitesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSitesResponse}
     */
    displayvideoAdvertisersChannelsSitesList(advertiserId, channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersChannelsSitesList");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling displayvideoAdvertisersChannelsSitesList");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'channelId': channelId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSitesResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/channels/{channelId}/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersChannelsSitesReplace operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersChannelsSitesReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplaceSitesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces all of the sites under a single channel. The operation will replace the sites under a channel with the sites provided in ReplaceSitesRequest.new_sites. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors.
     * @param {String} advertiserId The ID of the advertiser that owns the parent channel.
     * @param {String} channelId Required. The ID of the parent channel whose sites will be replaced.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ReplaceSitesRequest} [replaceSitesRequest] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersChannelsSitesReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplaceSitesResponse}
     */
    displayvideoAdvertisersChannelsSitesReplace(advertiserId, channelId, opts, callback) {
      opts = opts || {};
      let postBody = opts['replaceSitesRequest'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersChannelsSitesReplace");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling displayvideoAdvertisersChannelsSitesReplace");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'channelId': channelId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplaceSitesResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/channels/{channelId}/sites:replace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersCreate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Advertiser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new advertiser. Returns the newly created advertiser if successful. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Advertiser} [advertiser] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Advertiser}
     */
    displayvideoAdvertisersCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['advertiser'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Advertiser;
      return this.apiClient.callApi(
        '/v2/advertisers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersCreativesCreate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersCreativesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Creative} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new creative. Returns the newly created creative if successful. A [\"Standard\" user role](//support.google.com/displayvideo/answer/2723011) or greater for the parent advertiser or partner is required to make this request.
     * @param {String} advertiserId Output only. The unique ID of the advertiser the creative belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Creative} [creative] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersCreativesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Creative}
     */
    displayvideoAdvertisersCreativesCreate(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['creative'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersCreativesCreate");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Creative;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/creatives', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersCreativesDelete operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersCreativesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a creative. Returns error code `NOT_FOUND` if the creative does not exist. The creative should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, before it can be deleted. A [\"Standard\" user role](//support.google.com/displayvideo/answer/2723011) or greater for the parent advertiser or partner is required to make this request.
     * @param {String} advertiserId The ID of the advertiser this creative belongs to.
     * @param {String} creativeId The ID of the creative to be deleted.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersCreativesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    displayvideoAdvertisersCreativesDelete(advertiserId, creativeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersCreativesDelete");
      }
      // verify the required parameter 'creativeId' is set
      if (creativeId === undefined || creativeId === null) {
        throw new Error("Missing the required parameter 'creativeId' when calling displayvideoAdvertisersCreativesDelete");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'creativeId': creativeId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/creatives/{creativeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersCreativesGet operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersCreativesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Creative} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a creative.
     * @param {String} advertiserId Required. The ID of the advertiser this creative belongs to.
     * @param {String} creativeId Required. The ID of the creative to fetch.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersCreativesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Creative}
     */
    displayvideoAdvertisersCreativesGet(advertiserId, creativeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersCreativesGet");
      }
      // verify the required parameter 'creativeId' is set
      if (creativeId === undefined || creativeId === null) {
        throw new Error("Missing the required parameter 'creativeId' when calling displayvideoAdvertisersCreativesGet");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'creativeId': creativeId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Creative;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/creatives/{creativeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersCreativesList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersCreativesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCreativesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists creatives in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, creatives with `ENTITY_STATUS_ARCHIVED` will not be included in the results.
     * @param {String} advertiserId Required. The ID of the advertiser to list creatives for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by creative fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * The `lineItemIds` field must use the `HAS (:)` operator. * The `updateTime` field must use the `GREATER THAN OR EQUAL TO (>=)` or `LESS THAN OR EQUAL TO (<=)` operators. * All other fields must use the `EQUALS (=)` operator. * For `entityStatus`, `minDuration`, `maxDuration`, `updateTime`, and `dynamic` fields, there may be at most one restriction. Supported Fields: * `approvalStatus` * `creativeId` * `creativeType` * `dimensions` (input in the form of `{width}x{height}`) * `dynamic` * `entityStatus` * `exchangeReviewStatus` (input in the form of `{exchange}-{reviewStatus}`) * `lineItemIds` * `maxDuration` (input in the form of `{duration}s`. Only seconds are supported) * `minDuration` (input in the form of `{duration}s`. Only seconds are supported) * `updateTime` (input in ISO 8601 format, or `YYYY-MM-DDTHH:MM:SSZ`) Notes: * For `updateTime`, a creative resource's field value reflects the last time that a creative has been updated, which includes updates made by the system (e.g. creative review updates). Examples: * All native creatives: `creativeType=\"CREATIVE_TYPE_NATIVE\"` * All active creatives with 300x400 or 50x100 dimensions: `entityStatus=\"ENTITY_STATUS_ACTIVE\" AND (dimensions=\"300x400\" OR dimensions=\"50x100\")` * All dynamic creatives that are approved by AdX or AppNexus, with a minimum duration of 5 seconds and 200ms: `dynamic=\"true\" AND minDuration=\"5.2s\" AND (exchangeReviewStatus=\"EXCHANGE_GOOGLE_AD_MANAGER-REVIEW_STATUS_APPROVED\" OR exchangeReviewStatus=\"EXCHANGE_APPNEXUS-REVIEW_STATUS_APPROVED\")` * All video creatives that are associated with line item ID 1 or 2: `creativeType=\"CREATIVE_TYPE_VIDEO\" AND (lineItemIds:1 OR lineItemIds:2)` * Find creatives by multiple creative IDs: `creativeId=1 OR creativeId=2` * All creatives with an update time greater than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime>=\"2020-11-04T18:54:47Z\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `creativeId` (default) * `createTime` * `mediaDuration` * `dimensions` (sorts by width first, then by height) The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `createTime desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCreatives` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersCreativesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCreativesResponse}
     */
    displayvideoAdvertisersCreativesList(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersCreativesList");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCreativesResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/creatives', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersCreativesPatch operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersCreativesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Creative} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing creative. Returns the updated creative if successful. A [\"Standard\" user role](//support.google.com/displayvideo/answer/2723011) or greater for the parent advertiser or partner is required to make this request.
     * @param {String} advertiserId Output only. The unique ID of the advertiser the creative belongs to.
     * @param {String} creativeId Output only. The unique ID of the creative. Assigned by the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [updateMask] Required. The mask to control which fields to update.
     * @param {module:model/Creative} [creative] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersCreativesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Creative}
     */
    displayvideoAdvertisersCreativesPatch(advertiserId, creativeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['creative'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersCreativesPatch");
      }
      // verify the required parameter 'creativeId' is set
      if (creativeId === undefined || creativeId === null) {
        throw new Error("Missing the required parameter 'creativeId' when calling displayvideoAdvertisersCreativesPatch");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'creativeId': creativeId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'updateMask': opts['updateMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Creative;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/creatives/{creativeId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersDelete operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an advertiser. Deleting an advertiser will delete all of its child resources, for example, campaigns, insertion orders and line items. A deleted advertiser cannot be recovered.
     * @param {String} advertiserId The ID of the advertiser we need to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    displayvideoAdvertisersDelete(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersDelete");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersEditAssignedTargetingOptions operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersEditAssignedTargetingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEditAdvertiserAssignedTargetingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edits targeting options under a single advertiser. The operation will delete the assigned targeting options provided in BulkEditAdvertiserAssignedTargetingOptionsRequest.delete_requests and then create the assigned targeting options provided in BulkEditAdvertiserAssignedTargetingOptionsRequest.create_requests .
     * @param {String} advertiserId Required. The ID of the advertiser.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BulkEditAdvertiserAssignedTargetingOptionsRequest} [bulkEditAdvertiserAssignedTargetingOptionsRequest] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersEditAssignedTargetingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEditAdvertiserAssignedTargetingOptionsResponse}
     */
    displayvideoAdvertisersEditAssignedTargetingOptions(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['bulkEditAdvertiserAssignedTargetingOptionsRequest'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersEditAssignedTargetingOptions");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEditAdvertiserAssignedTargetingOptionsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}:editAssignedTargetingOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersGet operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Advertiser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an advertiser.
     * @param {String} advertiserId Required. The ID of the advertiser to fetch.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Advertiser}
     */
    displayvideoAdvertisersGet(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersGet");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Advertiser;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersInsertionOrdersCreate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InsertionOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new insertion order. Returns the newly created insertion order if successful.
     * @param {String} advertiserId Output only. The unique ID of the advertiser the insertion order belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/InsertionOrder} [insertionOrder] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsertionOrder}
     */
    displayvideoAdvertisersInsertionOrdersCreate(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['insertionOrder'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersInsertionOrdersCreate");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InsertionOrder;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/insertionOrders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersInsertionOrdersDelete operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an insertion order. Returns error code `NOT_FOUND` if the insertion order does not exist. The insertion order should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to delete it.
     * @param {String} advertiserId The ID of the advertiser this insertion order belongs to.
     * @param {String} insertionOrderId The ID of the insertion order to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    displayvideoAdvertisersInsertionOrdersDelete(advertiserId, insertionOrderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersInsertionOrdersDelete");
      }
      // verify the required parameter 'insertionOrderId' is set
      if (insertionOrderId === undefined || insertionOrderId === null) {
        throw new Error("Missing the required parameter 'insertionOrderId' when calling displayvideoAdvertisersInsertionOrdersDelete");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'insertionOrderId': insertionOrderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersInsertionOrdersGet operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InsertionOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an insertion order. Returns error code `NOT_FOUND` if the insertion order does not exist.
     * @param {String} advertiserId Required. The ID of the advertiser this insertion order belongs to.
     * @param {String} insertionOrderId Required. The ID of the insertion order to fetch.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsertionOrder}
     */
    displayvideoAdvertisersInsertionOrdersGet(advertiserId, insertionOrderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersInsertionOrdersGet");
      }
      // verify the required parameter 'insertionOrderId' is set
      if (insertionOrderId === undefined || insertionOrderId === null) {
        throw new Error("Missing the required parameter 'insertionOrderId' when calling displayvideoAdvertisersInsertionOrdersGet");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'insertionOrderId': insertionOrderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InsertionOrder;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersInsertionOrdersList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInsertionOrdersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists insertion orders in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, insertion orders with `ENTITY_STATUS_ARCHIVED` will not be included in the results.
     * @param {String} advertiserId Required. The ID of the advertiser to list insertion orders for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by insertion order fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * The `updateTime` field must use the `GREATER THAN OR EQUAL TO (>=)` or `LESS THAN OR EQUAL TO (<=)` operators. * All other fields must use the `EQUALS (=)` operator. Supported fields: * `campaignId` * `displayName` * `entityStatus` * `updateTime` (input in ISO 8601 format, or `YYYY-MM-DDTHH:MM:SSZ`) Examples: * All insertion orders under a campaign: `campaignId=\"1234\"` * All `ENTITY_STATUS_ACTIVE` or `ENTITY_STATUS_PAUSED` insertion orders under an advertiser: `(entityStatus=\"ENTITY_STATUS_ACTIVE\" OR entityStatus=\"ENTITY_STATUS_PAUSED\")` * All insertion orders with an update time less than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime<=\"2020-11-04T18:54:47Z\"` * All insertion orders with an update time greater than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime>=\"2020-11-04T18:54:47Z\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * \"displayName\" (default) * \"entityStatus\" * \"updateTime\" The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `displayName desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `100`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListInsertionOrders` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInsertionOrdersResponse}
     */
    displayvideoAdvertisersInsertionOrdersList(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersInsertionOrdersList");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInsertionOrdersResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/insertionOrders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersInsertionOrdersListAssignedTargetingOptions operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersListAssignedTargetingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkListInsertionOrderAssignedTargetingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists assigned targeting options of an insertion order across targeting types.
     * @param {String} advertiserId Required. The ID of the advertiser the insertion order belongs to.
     * @param {String} insertionOrderId Required. The ID of the insertion order to list assigned targeting options for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `targetingType` * `inheritance` Examples: * `AssignedTargetingOption` resources of targeting type `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` or `TARGETING_TYPE_CHANNEL`: `targetingType=\"TARGETING_TYPE_PROXIMITY_LOCATION_LIST\" OR targetingType=\"TARGETING_TYPE_CHANNEL\"` * `AssignedTargetingOption` resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER`: `inheritance=\"NOT_INHERITED\" OR inheritance=\"INHERITED_FROM_PARTNER\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `targetingType` (default) The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `targetingType desc`.
     * @param {Number} [pageSize] Requested page size. The size must be an integer between `1` and `5000`. If unspecified, the default is `5000`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token that lets the client fetch the next page of results. Typically, this is the value of next_page_token returned from the previous call to `BulkListInsertionOrderAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersListAssignedTargetingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkListInsertionOrderAssignedTargetingOptionsResponse}
     */
    displayvideoAdvertisersInsertionOrdersListAssignedTargetingOptions(advertiserId, insertionOrderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersInsertionOrdersListAssignedTargetingOptions");
      }
      // verify the required parameter 'insertionOrderId' is set
      if (insertionOrderId === undefined || insertionOrderId === null) {
        throw new Error("Missing the required parameter 'insertionOrderId' when calling displayvideoAdvertisersInsertionOrdersListAssignedTargetingOptions");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'insertionOrderId': insertionOrderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BulkListInsertionOrderAssignedTargetingOptionsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}:listAssignedTargetingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersInsertionOrdersPatch operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InsertionOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing insertion order. Returns the updated insertion order if successful.
     * @param {String} advertiserId Output only. The unique ID of the advertiser the insertion order belongs to.
     * @param {String} insertionOrderId Output only. The unique ID of the insertion order. Assigned by the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [updateMask] Required. The mask to control which fields to update.
     * @param {module:model/InsertionOrder} [insertionOrder] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsertionOrder}
     */
    displayvideoAdvertisersInsertionOrdersPatch(advertiserId, insertionOrderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['insertionOrder'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersInsertionOrdersPatch");
      }
      // verify the required parameter 'insertionOrderId' is set
      if (insertionOrderId === undefined || insertionOrderId === null) {
        throw new Error("Missing the required parameter 'insertionOrderId' when calling displayvideoAdvertisersInsertionOrdersPatch");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'insertionOrderId': insertionOrderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'updateMask': opts['updateMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InsertionOrder;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignedTargetingOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns a targeting option to an insertion order. Returns the assigned targeting option if successful. Supported targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_VIEWABILITY`
     * @param {String} advertiserId Required. The ID of the advertiser the insertion order belongs to.
     * @param {String} insertionOrderId Required. The ID of the insertion order the assigned targeting option will belong to.
     * @param {module:model/String} targetingType Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_VIEWABILITY`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/AssignedTargetingOption} [assignedTargetingOption] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignedTargetingOption}
     */
    displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreate(advertiserId, insertionOrderId, targetingType, opts, callback) {
      opts = opts || {};
      let postBody = opts['assignedTargetingOption'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreate");
      }
      // verify the required parameter 'insertionOrderId' is set
      if (insertionOrderId === undefined || insertionOrderId === null) {
        throw new Error("Missing the required parameter 'insertionOrderId' when calling displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreate");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreate");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'insertionOrderId': insertionOrderId,
        'targetingType': targetingType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssignedTargetingOption;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}/targetingTypes/{targetingType}/assignedTargetingOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDelete operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an assigned targeting option from an insertion order. Supported targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_VIEWABILITY`
     * @param {String} advertiserId Required. The ID of the advertiser the insertion order belongs to.
     * @param {String} insertionOrderId Required. The ID of the insertion order the assigned targeting option belongs to.
     * @param {module:model/String} targetingType Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_VIEWABILITY`
     * @param {String} assignedTargetingOptionId Required. The ID of the assigned targeting option to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDelete(advertiserId, insertionOrderId, targetingType, assignedTargetingOptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDelete");
      }
      // verify the required parameter 'insertionOrderId' is set
      if (insertionOrderId === undefined || insertionOrderId === null) {
        throw new Error("Missing the required parameter 'insertionOrderId' when calling displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDelete");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDelete");
      }
      // verify the required parameter 'assignedTargetingOptionId' is set
      if (assignedTargetingOptionId === undefined || assignedTargetingOptionId === null) {
        throw new Error("Missing the required parameter 'assignedTargetingOptionId' when calling displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDelete");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'insertionOrderId': insertionOrderId,
        'targetingType': targetingType,
        'assignedTargetingOptionId': assignedTargetingOptionId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGet operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignedTargetingOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a single targeting option assigned to an insertion order.
     * @param {String} advertiserId Required. The ID of the advertiser the insertion order belongs to.
     * @param {String} insertionOrderId Required. The ID of the insertion order the assigned targeting option belongs to.
     * @param {module:model/String} targetingType Required. Identifies the type of this assigned targeting option. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_VIEWABILITY`
     * @param {String} assignedTargetingOptionId Required. An identifier unique to the targeting type in this insertion order that identifies the assigned targeting option being requested.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignedTargetingOption}
     */
    displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGet(advertiserId, insertionOrderId, targetingType, assignedTargetingOptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGet");
      }
      // verify the required parameter 'insertionOrderId' is set
      if (insertionOrderId === undefined || insertionOrderId === null) {
        throw new Error("Missing the required parameter 'insertionOrderId' when calling displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGet");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGet");
      }
      // verify the required parameter 'assignedTargetingOptionId' is set
      if (assignedTargetingOptionId === undefined || assignedTargetingOptionId === null) {
        throw new Error("Missing the required parameter 'assignedTargetingOptionId' when calling displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGet");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'insertionOrderId': insertionOrderId,
        'targetingType': targetingType,
        'assignedTargetingOptionId': assignedTargetingOptionId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssignedTargetingOption;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInsertionOrderAssignedTargetingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the targeting options assigned to an insertion order.
     * @param {String} advertiserId Required. The ID of the advertiser the insertion order belongs to.
     * @param {String} insertionOrderId Required. The ID of the insertion order to list assigned targeting options for.
     * @param {module:model/String} targetingType Required. Identifies the type of assigned targeting options to list. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_VIEWABILITY`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedTargetingOptionId` * `inheritance` Examples: * `AssignedTargetingOption` resources with ID 1 or 2: `assignedTargetingOptionId=\"1\" OR assignedTargetingOptionId=\"2\"` * `AssignedTargetingOption` resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER`: `inheritance=\"NOT_INHERITED\" OR inheritance=\"INHERITED_FROM_PARTNER\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `assignedTargetingOptionId desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `5000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListInsertionOrderAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInsertionOrderAssignedTargetingOptionsResponse}
     */
    displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsList(advertiserId, insertionOrderId, targetingType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsList");
      }
      // verify the required parameter 'insertionOrderId' is set
      if (insertionOrderId === undefined || insertionOrderId === null) {
        throw new Error("Missing the required parameter 'insertionOrderId' when calling displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsList");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsList");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'insertionOrderId': insertionOrderId,
        'targetingType': targetingType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInsertionOrderAssignedTargetingOptionsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}/targetingTypes/{targetingType}/assignedTargetingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersInvoicesList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersInvoicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInvoicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists invoices posted for an advertiser in a given month. Invoices generated by billing profiles with a \"Partner\" invoice level are not retrievable through this method.
     * @param {String} advertiserId Required. The ID of the advertiser to list invoices for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [issueMonth] The month to list the invoices for. If not set, the request will retrieve invoices for the previous month. Must be in the format YYYYMM.
     * @param {module:model/String} [loiSapinInvoiceType] Select type of invoice to retrieve for Loi Sapin advertisers. Only applicable to Loi Sapin advertisers. Will be ignored otherwise.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListInvoices` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersInvoicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInvoicesResponse}
     */
    displayvideoAdvertisersInvoicesList(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersInvoicesList");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'issueMonth': opts['issueMonth'],
        'loiSapinInvoiceType': opts['loiSapinInvoiceType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInvoicesResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersInvoicesLookupInvoiceCurrency operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersInvoicesLookupInvoiceCurrencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LookupInvoiceCurrencyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the invoice currency used by an advertiser in a given month.
     * @param {String} advertiserId Required. The ID of the advertiser to lookup currency for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [invoiceMonth] Month for which the currency is needed. If not set, the request will return existing currency settings for the advertiser. Must be in the format YYYYMM.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersInvoicesLookupInvoiceCurrencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LookupInvoiceCurrencyResponse}
     */
    displayvideoAdvertisersInvoicesLookupInvoiceCurrency(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersInvoicesLookupInvoiceCurrency");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'invoiceMonth': opts['invoiceMonth']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LookupInvoiceCurrencyResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/invoices:lookupInvoiceCurrency', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptions operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEditAssignedTargetingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk edits targeting options under multiple line items. The operation will delete the assigned targeting options provided in BulkEditAssignedTargetingOptionsRequest.delete_requests and then create the assigned targeting options provided in BulkEditAssignedTargetingOptionsRequest.create_requests. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * lineItems.bulkUpdate * lineItems.patch * assignedTargetingOptions.create * assignedTargetingOptions.delete YouTube & Partners line items cannot be created or updated using the API.
     * @param {String} advertiserId Required. The ID of the advertiser the line items belong to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BulkEditAssignedTargetingOptionsRequest} [bulkEditAssignedTargetingOptionsRequest] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEditAssignedTargetingOptionsResponse}
     */
    displayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptions(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['bulkEditAssignedTargetingOptionsRequest'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptions");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEditAssignedTargetingOptionsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/lineItems:bulkEditAssignedTargetingOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLineItemsBulkListAssignedTargetingOptions operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLineItemsBulkListAssignedTargetingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkListAssignedTargetingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists assigned targeting options for multiple line items across targeting types.
     * @param {String} advertiserId Required. The ID of the advertiser the line items belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical operator `OR` on the same field. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `targetingType` * `inheritance` Examples: * `AssignedTargetingOption` resources of targeting type `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` or `TARGETING_TYPE_CHANNEL`: `targetingType=\"TARGETING_TYPE_PROXIMITY_LOCATION_LIST\" OR targetingType=\"TARGETING_TYPE_CHANNEL\"` * `AssignedTargetingOption` resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER`: `inheritance=\"NOT_INHERITED\" OR inheritance=\"INHERITED_FROM_PARTNER\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {Array.<String>} [lineItemIds] Required. The IDs of the line items to list assigned targeting options for.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `lineItemId` (default) * `assignedTargetingOption.targetingType` The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `targetingType desc`.
     * @param {Number} [pageSize] Requested page size. The size must be an integer between `1` and `5000`. If unspecified, the default is `5000`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token that lets the client fetch the next page of results. Typically, this is the value of next_page_token returned from the previous call to the `BulkListAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLineItemsBulkListAssignedTargetingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkListAssignedTargetingOptionsResponse}
     */
    displayvideoAdvertisersLineItemsBulkListAssignedTargetingOptions(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLineItemsBulkListAssignedTargetingOptions");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'lineItemIds': this.apiClient.buildCollectionParam(opts['lineItemIds'], 'multi'),
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BulkListAssignedTargetingOptionsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/lineItems:bulkListAssignedTargetingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLineItemsBulkUpdate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLineItemsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkUpdateLineItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates multiple line items. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * BulkEditAssignedTargetingOptions * UpdateLineItem * assignedTargetingOptions.create * assignedTargetingOptions.delete YouTube & Partners line items cannot be created or updated using the API.
     * @param {String} advertiserId Required. The ID of the advertiser this line item belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BulkUpdateLineItemsRequest} [bulkUpdateLineItemsRequest] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLineItemsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkUpdateLineItemsResponse}
     */
    displayvideoAdvertisersLineItemsBulkUpdate(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['bulkUpdateLineItemsRequest'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLineItemsBulkUpdate");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkUpdateLineItemsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/lineItems:bulkUpdate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLineItemsCreate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLineItemsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new line item. Returns the newly created line item if successful. YouTube & Partners line items cannot be created or updated using the API.
     * @param {String} advertiserId Output only. The unique ID of the advertiser the line item belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/LineItem} [lineItem] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLineItemsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineItem}
     */
    displayvideoAdvertisersLineItemsCreate(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['lineItem'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLineItemsCreate");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LineItem;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/lineItems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLineItemsDelete operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLineItemsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a line item. Returns error code `NOT_FOUND` if the line item does not exist. The line item should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to delete it. YouTube & Partners line items cannot be created or updated using the API.
     * @param {String} advertiserId The ID of the advertiser this line item belongs to.
     * @param {String} lineItemId The ID of the line item to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLineItemsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    displayvideoAdvertisersLineItemsDelete(advertiserId, lineItemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLineItemsDelete");
      }
      // verify the required parameter 'lineItemId' is set
      if (lineItemId === undefined || lineItemId === null) {
        throw new Error("Missing the required parameter 'lineItemId' when calling displayvideoAdvertisersLineItemsDelete");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'lineItemId': lineItemId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLineItemsDuplicate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLineItemsDuplicateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DuplicateLineItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicates a line item. Returns the ID of the created line item if successful. YouTube & Partners line items cannot be created or updated using the API. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors.
     * @param {String} advertiserId Required. The ID of the advertiser this line item belongs to.
     * @param {String} lineItemId Required. The ID of the line item to duplicate.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/DuplicateLineItemRequest} [duplicateLineItemRequest] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLineItemsDuplicateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DuplicateLineItemResponse}
     */
    displayvideoAdvertisersLineItemsDuplicate(advertiserId, lineItemId, opts, callback) {
      opts = opts || {};
      let postBody = opts['duplicateLineItemRequest'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLineItemsDuplicate");
      }
      // verify the required parameter 'lineItemId' is set
      if (lineItemId === undefined || lineItemId === null) {
        throw new Error("Missing the required parameter 'lineItemId' when calling displayvideoAdvertisersLineItemsDuplicate");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'lineItemId': lineItemId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DuplicateLineItemResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}:duplicate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLineItemsGenerateDefault operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLineItemsGenerateDefaultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new line item with settings (including targeting) inherited from the insertion order and an `ENTITY_STATUS_DRAFT` entity_status. Returns the newly created line item if successful. There are default values based on the three fields: * The insertion order's insertion_order_type * The insertion order's automation_type * The given line_item_type YouTube & Partners line items cannot be created or updated using the API.
     * @param {String} advertiserId Required. The ID of the advertiser this line item belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GenerateDefaultLineItemRequest} [generateDefaultLineItemRequest] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLineItemsGenerateDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineItem}
     */
    displayvideoAdvertisersLineItemsGenerateDefault(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['generateDefaultLineItemRequest'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLineItemsGenerateDefault");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LineItem;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/lineItems:generateDefault', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLineItemsGet operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLineItemsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a line item.
     * @param {String} advertiserId Required. The ID of the advertiser this line item belongs to.
     * @param {String} lineItemId Required. The ID of the line item to fetch.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLineItemsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineItem}
     */
    displayvideoAdvertisersLineItemsGet(advertiserId, lineItemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLineItemsGet");
      }
      // verify the required parameter 'lineItemId' is set
      if (lineItemId === undefined || lineItemId === null) {
        throw new Error("Missing the required parameter 'lineItemId' when calling displayvideoAdvertisersLineItemsGet");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'lineItemId': lineItemId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LineItem;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLineItemsList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLineItemsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLineItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists line items in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, line items with `ENTITY_STATUS_ARCHIVED` will not be included in the results.
     * @param {String} advertiserId Required. The ID of the advertiser to list line items for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by line item fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * The `updateTime` field must use the `GREATER THAN OR EQUAL TO (>=)` or `LESS THAN OR EQUAL TO (<=)` operators. * All other fields must use the `EQUALS (=)` operator. Supported fields: * `campaignId` * `displayName` * `entityStatus` * `insertionOrderId` * `lineItemId` * `lineItemType` * `updateTime` (input in ISO 8601 format, or `YYYY-MM-DDTHH:MM:SSZ`) Examples: * All line items under an insertion order: `insertionOrderId=\"1234\"` * All `ENTITY_STATUS_ACTIVE` or `ENTITY_STATUS_PAUSED` and `LINE_ITEM_TYPE_DISPLAY_DEFAULT` line items under an advertiser: `(entityStatus=\"ENTITY_STATUS_ACTIVE\" OR entityStatus=\"ENTITY_STATUS_PAUSED\") AND lineItemType=\"LINE_ITEM_TYPE_DISPLAY_DEFAULT\"` * All line items with an update time less than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime<=\"2020-11-04T18:54:47Z\"` * All line items with an update time greater than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime>=\"2020-11-04T18:54:47Z\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `displayName` (default) * `entityStatus` * `updateTime` The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `displayName desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListLineItems` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLineItemsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLineItemsResponse}
     */
    displayvideoAdvertisersLineItemsList(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLineItemsList");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLineItemsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/lineItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLineItemsPatch operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLineItemsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing line item. Returns the updated line item if successful. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * BulkEditAssignedTargetingOptions * BulkUpdateLineItems * assignedTargetingOptions.create * assignedTargetingOptions.delete YouTube & Partners line items cannot be created or updated using the API. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors.
     * @param {String} advertiserId Output only. The unique ID of the advertiser the line item belongs to.
     * @param {String} lineItemId Output only. The unique ID of the line item. Assigned by the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [updateMask] Required. The mask to control which fields to update.
     * @param {module:model/LineItem} [lineItem] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLineItemsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineItem}
     */
    displayvideoAdvertisersLineItemsPatch(advertiserId, lineItemId, opts, callback) {
      opts = opts || {};
      let postBody = opts['lineItem'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLineItemsPatch");
      }
      // verify the required parameter 'lineItemId' is set
      if (lineItemId === undefined || lineItemId === null) {
        throw new Error("Missing the required parameter 'lineItemId' when calling displayvideoAdvertisersLineItemsPatch");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'lineItemId': lineItemId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'updateMask': opts['updateMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LineItem;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignedTargetingOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns a targeting option to a line item. Returns the assigned targeting option if successful. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * lineItems.bulkEditAssignedTargetingOptions * lineItems.bulkUpdate * lineItems.patch * DeleteLineItemAssignedTargetingOption YouTube & Partners line items cannot be created or updated using the API.
     * @param {String} advertiserId Required. The ID of the advertiser the line item belongs to.
     * @param {String} lineItemId Required. The ID of the line item the assigned targeting option will belong to.
     * @param {module:model/String} targetingType Required. Identifies the type of this assigned targeting option. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_VIEWABILITY`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/AssignedTargetingOption} [assignedTargetingOption] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignedTargetingOption}
     */
    displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreate(advertiserId, lineItemId, targetingType, opts, callback) {
      opts = opts || {};
      let postBody = opts['assignedTargetingOption'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreate");
      }
      // verify the required parameter 'lineItemId' is set
      if (lineItemId === undefined || lineItemId === null) {
        throw new Error("Missing the required parameter 'lineItemId' when calling displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreate");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreate");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'lineItemId': lineItemId,
        'targetingType': targetingType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssignedTargetingOption;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}/targetingTypes/{targetingType}/assignedTargetingOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDelete operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an assigned targeting option from a line item. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * lineItems.bulkEditAssignedTargetingOptions * lineItems.bulkUpdate * lineItems.patch * CreateLineItemAssignedTargetingOption YouTube & Partners line items cannot be created or updated using the API.
     * @param {String} advertiserId Required. The ID of the advertiser the line item belongs to.
     * @param {String} lineItemId Required. The ID of the line item the assigned targeting option belongs to.
     * @param {module:model/String} targetingType Required. Identifies the type of this assigned targeting option. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_VIEWABILITY`
     * @param {String} assignedTargetingOptionId Required. The ID of the assigned targeting option to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDelete(advertiserId, lineItemId, targetingType, assignedTargetingOptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDelete");
      }
      // verify the required parameter 'lineItemId' is set
      if (lineItemId === undefined || lineItemId === null) {
        throw new Error("Missing the required parameter 'lineItemId' when calling displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDelete");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDelete");
      }
      // verify the required parameter 'assignedTargetingOptionId' is set
      if (assignedTargetingOptionId === undefined || assignedTargetingOptionId === null) {
        throw new Error("Missing the required parameter 'assignedTargetingOptionId' when calling displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDelete");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'lineItemId': lineItemId,
        'targetingType': targetingType,
        'assignedTargetingOptionId': assignedTargetingOptionId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGet operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignedTargetingOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a single targeting option assigned to a line item.
     * @param {String} advertiserId Required. The ID of the advertiser the line item belongs to.
     * @param {String} lineItemId Required. The ID of the line item the assigned targeting option belongs to.
     * @param {module:model/String} targetingType Required. Identifies the type of this assigned targeting option. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_VIEWABILITY` * `TARGETING_TYPE_YOUTUBE_CHANNEL` (only for `LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIDEO_SEQUENCE` line items) * `TARGETING_TYPE_YOUTUBE_VIDEO` (only for `LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIDEO_SEQUENCE` line items)
     * @param {String} assignedTargetingOptionId Required. An identifier unique to the targeting type in this line item that identifies the assigned targeting option being requested.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignedTargetingOption}
     */
    displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGet(advertiserId, lineItemId, targetingType, assignedTargetingOptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGet");
      }
      // verify the required parameter 'lineItemId' is set
      if (lineItemId === undefined || lineItemId === null) {
        throw new Error("Missing the required parameter 'lineItemId' when calling displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGet");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGet");
      }
      // verify the required parameter 'assignedTargetingOptionId' is set
      if (assignedTargetingOptionId === undefined || assignedTargetingOptionId === null) {
        throw new Error("Missing the required parameter 'assignedTargetingOptionId' when calling displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGet");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'lineItemId': lineItemId,
        'targetingType': targetingType,
        'assignedTargetingOptionId': assignedTargetingOptionId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssignedTargetingOption;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLineItemAssignedTargetingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the targeting options assigned to a line item.
     * @param {String} advertiserId Required. The ID of the advertiser the line item belongs to.
     * @param {String} lineItemId Required. The ID of the line item to list assigned targeting options for.
     * @param {module:model/String} targetingType Required. Identifies the type of assigned targeting options to list. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_VIEWABILITY` * `TARGETING_TYPE_YOUTUBE_CHANNEL` (only for `LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIDEO_SEQUENCE` line items) * `TARGETING_TYPE_YOUTUBE_VIDEO` (only for `LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIDEO_SEQUENCE` line items)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedTargetingOptionId` * `inheritance` Examples: * `AssignedTargetingOption` resources with ID 1 or 2: `assignedTargetingOptionId=\"1\" OR assignedTargetingOptionId=\"2\"` * `AssignedTargetingOption` resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER`: `inheritance=\"NOT_INHERITED\" OR inheritance=\"INHERITED_FROM_PARTNER\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `assignedTargetingOptionId desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `5000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListLineItemAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLineItemAssignedTargetingOptionsResponse}
     */
    displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsList(advertiserId, lineItemId, targetingType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsList");
      }
      // verify the required parameter 'lineItemId' is set
      if (lineItemId === undefined || lineItemId === null) {
        throw new Error("Missing the required parameter 'lineItemId' when calling displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsList");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsList");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'lineItemId': lineItemId,
        'targetingType': targetingType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLineItemAssignedTargetingOptionsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/lineItems/{lineItemId}/targetingTypes/{targetingType}/assignedTargetingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAdvertisersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists advertisers that are accessible to the current user. The order is defined by the order_by parameter. A single partner_id is required. Cross-partner listing is not supported.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by advertiser fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. * A restriction has the form of `{field} {operator} {value}`. * The `updateTime` field must use the `GREATER THAN OR EQUAL TO (>=)` or `LESS THAN OR EQUAL TO (<=)` operators. * All other fields must use the `EQUALS (=)` operator. Supported fields: * `advertiserId` * `displayName` * `entityStatus` * `updateTime` (input in ISO 8601 format, or `YYYY-MM-DDTHH:MM:SSZ`) Examples: * All active advertisers under a partner: `entityStatus=\"ENTITY_STATUS_ACTIVE\"` * All advertisers with an update time less than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime<=\"2020-11-04T18:54:47Z\"` * All advertisers with an update time greater than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime>=\"2020-11-04T18:54:47Z\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `displayName` (default) * `entityStatus` * `updateTime` The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. For example, `displayName desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `200`. If unspecified will default to `100`.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListAdvertisers` method. If not specified, the first page of results will be returned.
     * @param {String} [partnerId] Required. The ID of the partner that the fetched advertisers should all belong to. The system only supports listing advertisers for one partner at a time.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAdvertisersResponse}
     */
    displayvideoAdvertisersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAdvertisersResponse;
      return this.apiClient.callApi(
        '/v2/advertisers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersListAssignedTargetingOptions operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersListAssignedTargetingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkListAdvertiserAssignedTargetingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists assigned targeting options of an advertiser across targeting types.
     * @param {String} advertiserId Required. The ID of the advertiser the line item belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR` logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=) operator`. Supported fields: * `targetingType` Examples: * targetingType with value TARGETING_TYPE_CHANNEL `targetingType=\"TARGETING_TYPE_CHANNEL\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `targetingType` (default) The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `targetingType desc`.
     * @param {Number} [pageSize] Requested page size. The size must be an integer between `1` and `5000`. If unspecified, the default is '5000'. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token that lets the client fetch the next page of results. Typically, this is the value of next_page_token returned from the previous call to `BulkListAdvertiserAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersListAssignedTargetingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkListAdvertiserAssignedTargetingOptionsResponse}
     */
    displayvideoAdvertisersListAssignedTargetingOptions(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersListAssignedTargetingOptions");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BulkListAdvertiserAssignedTargetingOptionsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}:listAssignedTargetingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLocationListsAssignedLocationsBulkEdit operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLocationListsAssignedLocationsBulkEditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEditAssignedLocationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk edits multiple assignments between locations and a single location list. The operation will delete the assigned locations provided in deletedAssignedLocations and then create the assigned locations provided in createdAssignedLocations.
     * @param {String} advertiserId Required. The ID of the DV360 advertiser to which the location list belongs.
     * @param {String} locationListId Required. The ID of the location list to which these assignments are assigned.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BulkEditAssignedLocationsRequest} [bulkEditAssignedLocationsRequest] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLocationListsAssignedLocationsBulkEditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEditAssignedLocationsResponse}
     */
    displayvideoAdvertisersLocationListsAssignedLocationsBulkEdit(advertiserId, locationListId, opts, callback) {
      opts = opts || {};
      let postBody = opts['bulkEditAssignedLocationsRequest'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLocationListsAssignedLocationsBulkEdit");
      }
      // verify the required parameter 'locationListId' is set
      if (locationListId === undefined || locationListId === null) {
        throw new Error("Missing the required parameter 'locationListId' when calling displayvideoAdvertisersLocationListsAssignedLocationsBulkEdit");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'locationListId': locationListId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEditAssignedLocationsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations:bulkEdit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLocationListsAssignedLocationsCreate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLocationListsAssignedLocationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignedLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an assignment between a location and a location list.
     * @param {String} advertiserId Required. The ID of the DV360 advertiser to which the location list belongs.
     * @param {String} locationListId Required. The ID of the location list for which the assignment will be created.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/AssignedLocation} [assignedLocation] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLocationListsAssignedLocationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignedLocation}
     */
    displayvideoAdvertisersLocationListsAssignedLocationsCreate(advertiserId, locationListId, opts, callback) {
      opts = opts || {};
      let postBody = opts['assignedLocation'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLocationListsAssignedLocationsCreate");
      }
      // verify the required parameter 'locationListId' is set
      if (locationListId === undefined || locationListId === null) {
        throw new Error("Missing the required parameter 'locationListId' when calling displayvideoAdvertisersLocationListsAssignedLocationsCreate");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'locationListId': locationListId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssignedLocation;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLocationListsAssignedLocationsDelete operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLocationListsAssignedLocationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the assignment between a location and a location list.
     * @param {String} advertiserId Required. The ID of the DV360 advertiser to which the location list belongs.
     * @param {String} locationListId Required. The ID of the location list to which this assignment is assigned.
     * @param {String} assignedLocationId Required. The ID of the assigned location to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLocationListsAssignedLocationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    displayvideoAdvertisersLocationListsAssignedLocationsDelete(advertiserId, locationListId, assignedLocationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLocationListsAssignedLocationsDelete");
      }
      // verify the required parameter 'locationListId' is set
      if (locationListId === undefined || locationListId === null) {
        throw new Error("Missing the required parameter 'locationListId' when calling displayvideoAdvertisersLocationListsAssignedLocationsDelete");
      }
      // verify the required parameter 'assignedLocationId' is set
      if (assignedLocationId === undefined || assignedLocationId === null) {
        throw new Error("Missing the required parameter 'assignedLocationId' when calling displayvideoAdvertisersLocationListsAssignedLocationsDelete");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'locationListId': locationListId,
        'assignedLocationId': assignedLocationId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations/{assignedLocationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLocationListsAssignedLocationsList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLocationListsAssignedLocationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssignedLocationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists locations assigned to a location list.
     * @param {String} advertiserId Required. The ID of the DV360 advertiser to which the location list belongs.
     * @param {String} locationListId Required. The ID of the location list to which these assignments are assigned.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by location list assignment fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR` logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedLocationId` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `assignedLocationId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix \" desc\" should be added to the field name. Example: `assignedLocationId desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListAssignedLocations` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLocationListsAssignedLocationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssignedLocationsResponse}
     */
    displayvideoAdvertisersLocationListsAssignedLocationsList(advertiserId, locationListId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLocationListsAssignedLocationsList");
      }
      // verify the required parameter 'locationListId' is set
      if (locationListId === undefined || locationListId === null) {
        throw new Error("Missing the required parameter 'locationListId' when calling displayvideoAdvertisersLocationListsAssignedLocationsList");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'locationListId': locationListId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAssignedLocationsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLocationListsCreate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLocationListsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new location list. Returns the newly created location list if successful.
     * @param {String} advertiserId Required. The ID of the DV360 advertiser to which the location list belongs.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/LocationList} [locationList] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLocationListsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationList}
     */
    displayvideoAdvertisersLocationListsCreate(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['locationList'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLocationListsCreate");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LocationList;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/locationLists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLocationListsList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLocationListsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLocationListsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists location lists based on a given advertiser id.
     * @param {String} advertiserId Required. The ID of the DV360 advertiser to which the fetched location lists belong.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by location list fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `locationType` Examples: * All regional location list: `locationType=\"TARGETING_LOCATION_TYPE_REGIONAL\"` * All proximity location list: `locationType=\"TARGETING_LOCATION_TYPE_PROXIMITY\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `locationListId` (default) * `displayName` The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `displayName desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `200`. Defaults to `100` if not set. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListLocationLists` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLocationListsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLocationListsResponse}
     */
    displayvideoAdvertisersLocationListsList(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLocationListsList");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLocationListsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/locationLists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersLocationListsPatch operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersLocationListsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a location list. Returns the updated location list if successful.
     * @param {String} advertiserId Required. The ID of the DV360 advertiser to which the location lists belongs.
     * @param {String} locationListId Output only. The unique ID of the location list. Assigned by the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [updateMask] Required. The mask to control which fields to update.
     * @param {module:model/LocationList} [locationList] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersLocationListsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationList}
     */
    displayvideoAdvertisersLocationListsPatch(advertiserId, locationListId, opts, callback) {
      opts = opts || {};
      let postBody = opts['locationList'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersLocationListsPatch");
      }
      // verify the required parameter 'locationListId' is set
      if (locationListId === undefined || locationListId === null) {
        throw new Error("Missing the required parameter 'locationListId' when calling displayvideoAdvertisersLocationListsPatch");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'locationListId': locationListId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'updateMask': opts['updateMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LocationList;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/locationLists/{locationListId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersManualTriggersActivate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersManualTriggersActivateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManualTrigger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates a manual trigger. Each activation of the manual trigger must be at least 5 minutes apart, otherwise an error will be returned. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     * @param {String} advertiserId Required. The ID of the advertiser that the manual trigger belongs.
     * @param {String} triggerId Required. The ID of the manual trigger to activate.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersManualTriggersActivateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManualTrigger}
     */
    displayvideoAdvertisersManualTriggersActivate(advertiserId, triggerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersManualTriggersActivate");
      }
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling displayvideoAdvertisersManualTriggersActivate");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'triggerId': triggerId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManualTrigger;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/manualTriggers/{triggerId}:activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersManualTriggersCreate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersManualTriggersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManualTrigger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new manual trigger. Returns the newly created manual trigger if successful. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     * @param {String} advertiserId Required. Immutable. The unique ID of the advertiser that the manual trigger belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ManualTrigger} [manualTrigger] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersManualTriggersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManualTrigger}
     */
    displayvideoAdvertisersManualTriggersCreate(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['manualTrigger'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersManualTriggersCreate");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManualTrigger;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/manualTriggers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersManualTriggersDeactivate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersManualTriggersDeactivateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManualTrigger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivates a manual trigger. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     * @param {String} advertiserId Required. The ID of the advertiser that the manual trigger belongs.
     * @param {String} triggerId Required. The ID of the manual trigger to deactivate.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersManualTriggersDeactivateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManualTrigger}
     */
    displayvideoAdvertisersManualTriggersDeactivate(advertiserId, triggerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersManualTriggersDeactivate");
      }
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling displayvideoAdvertisersManualTriggersDeactivate");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'triggerId': triggerId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManualTrigger;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/manualTriggers/{triggerId}:deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersManualTriggersGet operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersManualTriggersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManualTrigger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a manual trigger. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     * @param {String} advertiserId Required. The ID of the advertiser this manual trigger belongs to.
     * @param {String} triggerId Required. The ID of the manual trigger to fetch.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersManualTriggersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManualTrigger}
     */
    displayvideoAdvertisersManualTriggersGet(advertiserId, triggerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersManualTriggersGet");
      }
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling displayvideoAdvertisersManualTriggersGet");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'triggerId': triggerId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManualTrigger;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/manualTriggers/{triggerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersManualTriggersList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersManualTriggersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListManualTriggersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists manual triggers that are accessible to the current user for a given advertiser ID. The order is defined by the order_by parameter. A single advertiser_id is required. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     * @param {String} advertiserId Required. The ID of the advertiser that the fetched manual triggers belong to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by manual trigger fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `displayName` * `state` Examples: * All active manual triggers under an advertiser: `state=\"ACTIVE\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `displayName` (default) * `state` The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. For example, `displayName desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `200`. If unspecified will default to `100`.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListManualTriggers` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersManualTriggersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListManualTriggersResponse}
     */
    displayvideoAdvertisersManualTriggersList(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersManualTriggersList");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListManualTriggersResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/manualTriggers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersManualTriggersPatch operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersManualTriggersPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManualTrigger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a manual trigger. Returns the updated manual trigger if successful. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     * @param {String} advertiserId Required. Immutable. The unique ID of the advertiser that the manual trigger belongs to.
     * @param {String} triggerId Output only. The unique ID of the manual trigger.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [updateMask] Required. The mask to control which fields to update.
     * @param {module:model/ManualTrigger} [manualTrigger] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersManualTriggersPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManualTrigger}
     */
    displayvideoAdvertisersManualTriggersPatch(advertiserId, triggerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['manualTrigger'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersManualTriggersPatch");
      }
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling displayvideoAdvertisersManualTriggersPatch");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'triggerId': triggerId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'updateMask': opts['updateMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManualTrigger;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/manualTriggers/{triggerId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersNegativeKeywordListsCreate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersNegativeKeywordListsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NegativeKeywordList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new negative keyword list. Returns the newly created negative keyword list if successful.
     * @param {String} advertiserId Required. The ID of the DV360 advertiser to which the negative keyword list will belong.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/NegativeKeywordList} [negativeKeywordList] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersNegativeKeywordListsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NegativeKeywordList}
     */
    displayvideoAdvertisersNegativeKeywordListsCreate(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['negativeKeywordList'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersNegativeKeywordListsCreate");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NegativeKeywordList;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/negativeKeywordLists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersNegativeKeywordListsList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersNegativeKeywordListsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNegativeKeywordListsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists negative keyword lists based on a given advertiser id.
     * @param {String} advertiserId Required. The ID of the DV360 advertiser to which the fetched negative keyword lists belong.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `200`. Defaults to `100` if not set. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListNegativeKeywordLists` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersNegativeKeywordListsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNegativeKeywordListsResponse}
     */
    displayvideoAdvertisersNegativeKeywordListsList(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersNegativeKeywordListsList");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListNegativeKeywordListsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/negativeKeywordLists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEdit operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkEditNegativeKeywordsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk edits negative keywords in a single negative keyword list. The operation will delete the negative keywords provided in BulkEditNegativeKeywordsRequest.deleted_negative_keywords and then create the negative keywords provided in BulkEditNegativeKeywordsRequest.created_negative_keywords. This operation is guaranteed to be atomic and will never result in a partial success or partial failure.
     * @param {String} advertiserId Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs.
     * @param {String} negativeKeywordListId Required. The ID of the parent negative keyword list to which the negative keywords belong.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BulkEditNegativeKeywordsRequest} [bulkEditNegativeKeywordsRequest] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkEditNegativeKeywordsResponse}
     */
    displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEdit(advertiserId, negativeKeywordListId, opts, callback) {
      opts = opts || {};
      let postBody = opts['bulkEditNegativeKeywordsRequest'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEdit");
      }
      // verify the required parameter 'negativeKeywordListId' is set
      if (negativeKeywordListId === undefined || negativeKeywordListId === null) {
        throw new Error("Missing the required parameter 'negativeKeywordListId' when calling displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEdit");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'negativeKeywordListId': negativeKeywordListId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkEditNegativeKeywordsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListId}/negativeKeywords:bulkEdit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDelete operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a negative keyword from a negative keyword list.
     * @param {String} advertiserId Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs.
     * @param {String} negativeKeywordListId Required. The ID of the parent negative keyword list to which the negative keyword belongs.
     * @param {String} keywordValue Required. The keyword value of the negative keyword to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDelete(advertiserId, negativeKeywordListId, keywordValue, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDelete");
      }
      // verify the required parameter 'negativeKeywordListId' is set
      if (negativeKeywordListId === undefined || negativeKeywordListId === null) {
        throw new Error("Missing the required parameter 'negativeKeywordListId' when calling displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDelete");
      }
      // verify the required parameter 'keywordValue' is set
      if (keywordValue === undefined || keywordValue === null) {
        throw new Error("Missing the required parameter 'keywordValue' when calling displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDelete");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'negativeKeywordListId': negativeKeywordListId,
        'keywordValue': keywordValue
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListId}/negativeKeywords/{keywordValue}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNegativeKeywordsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists negative keywords in a negative keyword list.
     * @param {String} advertiserId Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs.
     * @param {String} negativeKeywordListId Required. The ID of the parent negative keyword list to which the requested negative keywords belong.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by negative keyword fields. Supported syntax: * Filter expressions for negative keywords can only contain at most one restriction. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `keywordValue` Examples: * All negative keywords for which the keyword value contains \"google\": `keywordValue : \"google\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `keywordValue` (default) The default sorting order is ascending. To specify descending order for a field, a suffix \" desc\" should be added to the field name. Example: `keywordValue desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `1000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListNegativeKeywords` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNegativeKeywordsResponse}
     */
    displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsList(advertiserId, negativeKeywordListId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsList");
      }
      // verify the required parameter 'negativeKeywordListId' is set
      if (negativeKeywordListId === undefined || negativeKeywordListId === null) {
        throw new Error("Missing the required parameter 'negativeKeywordListId' when calling displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsList");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'negativeKeywordListId': negativeKeywordListId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListNegativeKeywordsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListId}/negativeKeywords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplace operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplaceNegativeKeywordsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces all negative keywords in a single negative keyword list. The operation will replace the keywords in a negative keyword list with keywords provided in ReplaceNegativeKeywordsRequest.new_negative_keywords.
     * @param {String} advertiserId Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs.
     * @param {String} negativeKeywordListId Required. The ID of the parent negative keyword list to which the negative keywords belong.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ReplaceNegativeKeywordsRequest} [replaceNegativeKeywordsRequest] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplaceNegativeKeywordsResponse}
     */
    displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplace(advertiserId, negativeKeywordListId, opts, callback) {
      opts = opts || {};
      let postBody = opts['replaceNegativeKeywordsRequest'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplace");
      }
      // verify the required parameter 'negativeKeywordListId' is set
      if (negativeKeywordListId === undefined || negativeKeywordListId === null) {
        throw new Error("Missing the required parameter 'negativeKeywordListId' when calling displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplace");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'negativeKeywordListId': negativeKeywordListId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplaceNegativeKeywordsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListId}/negativeKeywords:replace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersNegativeKeywordListsPatch operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersNegativeKeywordListsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NegativeKeywordList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a negative keyword list. Returns the updated negative keyword list if successful.
     * @param {String} advertiserId Required. The ID of the DV360 advertiser to which the negative keyword list belongs.
     * @param {String} negativeKeywordListId Output only. The unique ID of the negative keyword list. Assigned by the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [updateMask] Required. The mask to control which fields to update.
     * @param {module:model/NegativeKeywordList} [negativeKeywordList] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersNegativeKeywordListsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NegativeKeywordList}
     */
    displayvideoAdvertisersNegativeKeywordListsPatch(advertiserId, negativeKeywordListId, opts, callback) {
      opts = opts || {};
      let postBody = opts['negativeKeywordList'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersNegativeKeywordListsPatch");
      }
      // verify the required parameter 'negativeKeywordListId' is set
      if (negativeKeywordListId === undefined || negativeKeywordListId === null) {
        throw new Error("Missing the required parameter 'negativeKeywordListId' when calling displayvideoAdvertisersNegativeKeywordListsPatch");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'negativeKeywordListId': negativeKeywordListId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'updateMask': opts['updateMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NegativeKeywordList;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersPatch operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Advertiser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing advertiser. Returns the updated advertiser if successful.
     * @param {String} advertiserId Output only. The unique ID of the advertiser. Assigned by the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [updateMask] Required. The mask to control which fields to update.
     * @param {module:model/Advertiser} [advertiser] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Advertiser}
     */
    displayvideoAdvertisersPatch(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['advertiser'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersPatch");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'updateMask': opts['updateMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Advertiser;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreate operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignedTargetingOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns a targeting option to an advertiser. Returns the assigned targeting option if successful.
     * @param {String} advertiserId Required. The ID of the advertiser.
     * @param {module:model/String} targetingType Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/AssignedTargetingOption} [assignedTargetingOption] 
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignedTargetingOption}
     */
    displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreate(advertiserId, targetingType, opts, callback) {
      opts = opts || {};
      let postBody = opts['assignedTargetingOption'];
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreate");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreate");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'targetingType': targetingType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssignedTargetingOption;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/targetingTypes/{targetingType}/assignedTargetingOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDelete operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an assigned targeting option from an advertiser.
     * @param {String} advertiserId Required. The ID of the advertiser.
     * @param {module:model/String} targetingType Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`
     * @param {String} assignedTargetingOptionId Required. The ID of the assigned targeting option to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDelete(advertiserId, targetingType, assignedTargetingOptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDelete");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDelete");
      }
      // verify the required parameter 'assignedTargetingOptionId' is set
      if (assignedTargetingOptionId === undefined || assignedTargetingOptionId === null) {
        throw new Error("Missing the required parameter 'assignedTargetingOptionId' when calling displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDelete");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'targetingType': targetingType,
        'assignedTargetingOptionId': assignedTargetingOptionId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGet operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignedTargetingOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a single targeting option assigned to an advertiser.
     * @param {String} advertiserId Required. The ID of the advertiser.
     * @param {module:model/String} targetingType Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_YOUTUBE_VIDEO` * `TARGETING_TYPE_YOUTUBE_CHANNEL`
     * @param {String} assignedTargetingOptionId Required. An identifier unique to the targeting type in this advertiser that identifies the assigned targeting option being requested.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignedTargetingOption}
     */
    displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGet(advertiserId, targetingType, assignedTargetingOptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGet");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGet");
      }
      // verify the required parameter 'assignedTargetingOptionId' is set
      if (assignedTargetingOptionId === undefined || assignedTargetingOptionId === null) {
        throw new Error("Missing the required parameter 'assignedTargetingOptionId' when calling displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGet");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'targetingType': targetingType,
        'assignedTargetingOptionId': assignedTargetingOptionId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssignedTargetingOption;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAdvertiserAssignedTargetingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the targeting options assigned to an advertiser.
     * @param {String} advertiserId Required. The ID of the advertiser.
     * @param {module:model/String} targetingType Required. Identifies the type of assigned targeting options to list. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_YOUTUBE_VIDEO` * `TARGETING_TYPE_YOUTUBE_CHANNEL`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR` logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedTargetingOptionId` Examples: * `AssignedTargetingOption` with ID 123456: `assignedTargetingOptionId=\"123456\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `assignedTargetingOptionId desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `5000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListAdvertiserAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAdvertiserAssignedTargetingOptionsResponse}
     */
    displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsList(advertiserId, targetingType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsList");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsList");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'targetingType': targetingType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAdvertiserAssignedTargetingOptionsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/targetingTypes/{targetingType}/assignedTargetingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersYoutubeAdGroupAdsGet operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersYoutubeAdGroupAdsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/YoutubeAdGroupAd} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a YouTube ad group ad.
     * @param {String} advertiserId Required. The ID of the advertiser this ad group ad belongs to.
     * @param {String} youtubeAdGroupAdId Required. The ID of the ad group ad to fetch.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersYoutubeAdGroupAdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/YoutubeAdGroupAd}
     */
    displayvideoAdvertisersYoutubeAdGroupAdsGet(advertiserId, youtubeAdGroupAdId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersYoutubeAdGroupAdsGet");
      }
      // verify the required parameter 'youtubeAdGroupAdId' is set
      if (youtubeAdGroupAdId === undefined || youtubeAdGroupAdId === null) {
        throw new Error("Missing the required parameter 'youtubeAdGroupAdId' when calling displayvideoAdvertisersYoutubeAdGroupAdsGet");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'youtubeAdGroupAdId': youtubeAdGroupAdId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = YoutubeAdGroupAd;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/youtubeAdGroupAds/{youtubeAdGroupAdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersYoutubeAdGroupAdsList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersYoutubeAdGroupAdsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListYoutubeAdGroupAdsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists YouTube ad group ads.
     * @param {String} advertiserId Required. The ID of the advertiser the ad groups belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by custom YouTube ad group ad fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` and `OR`. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `adGroupId` * `displayName` * `entityStatus` * `adGroupAdId` Examples: * All ad group ads under an ad group: `adGroupId=\"1234\"` * All ad group ads under an ad group with an entityStatus of `ENTITY_STATUS_ACTIVE` or `ENTITY_STATUS_PAUSED`: `(entityStatus=\"ENTITY_STATUS_ACTIVE\" OR entityStatus=\"ENTITY_STATUS_PAUSED\") AND adGroupId=\"12345\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `displayName` (default) * `entityStatus` The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `displayName desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `100`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListYoutubeAdGroupAds` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersYoutubeAdGroupAdsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListYoutubeAdGroupAdsResponse}
     */
    displayvideoAdvertisersYoutubeAdGroupAdsList(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersYoutubeAdGroupAdsList");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListYoutubeAdGroupAdsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/youtubeAdGroupAds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptions operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkListAdGroupAssignedTargetingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists assigned targeting options for multiple YouTube ad groups across targeting types. Inherited assigned targeting options are not included.
     * @param {String} advertiserId Required. The ID of the advertiser the line items belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Optional. Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `targetingType` Examples: * `AssignedTargetingOption` resources of targeting type `TARGETING_TYPE_YOUTUBE_VIDEO` or `TARGETING_TYPE_YOUTUBE_CHANNEL`: `targetingType=\"TARGETING_TYPE_YOUTUBE_VIDEO\" OR targetingType=\"TARGETING_TYPE_YOUTUBE_CHANNEL\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Optional. Field by which to sort the list. Acceptable values are: * `adGroupId` (default) * `assignedTargetingOption.targetingType` The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `targetingType desc`.
     * @param {Number} [pageSize] Optional. Requested page size. The size must be an integer between `1` and `5000`. If unspecified, the default is `5000`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] Optional. A token that lets the client fetch the next page of results. Typically, this is the value of next_page_token returned from the previous call to the `BulkListAdGroupAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
     * @param {Array.<String>} [youtubeAdGroupIds] Required. The IDs of the youtube ad groups to list assigned targeting options for.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkListAdGroupAssignedTargetingOptionsResponse}
     */
    displayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptions(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptions");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'youtubeAdGroupIds': this.apiClient.buildCollectionParam(opts['youtubeAdGroupIds'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BulkListAdGroupAssignedTargetingOptionsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/youtubeAdGroups:bulkListAdGroupAssignedTargetingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersYoutubeAdGroupsGet operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersYoutubeAdGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/YoutubeAdGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a YouTube ad group.
     * @param {String} advertiserId Required. The ID of the advertiser this ad group belongs to.
     * @param {String} youtubeAdGroupId Required. The ID of the ad group to fetch.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersYoutubeAdGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/YoutubeAdGroup}
     */
    displayvideoAdvertisersYoutubeAdGroupsGet(advertiserId, youtubeAdGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersYoutubeAdGroupsGet");
      }
      // verify the required parameter 'youtubeAdGroupId' is set
      if (youtubeAdGroupId === undefined || youtubeAdGroupId === null) {
        throw new Error("Missing the required parameter 'youtubeAdGroupId' when calling displayvideoAdvertisersYoutubeAdGroupsGet");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'youtubeAdGroupId': youtubeAdGroupId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = YoutubeAdGroup;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/youtubeAdGroups/{youtubeAdGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersYoutubeAdGroupsList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersYoutubeAdGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListYoutubeAdGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists YouTube ad groups.
     * @param {String} advertiserId Required. The ID of the advertiser the ad groups belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by custom YouTube ad group fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` and `OR`. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported properties: * `adGroupId` * `displayName` * `entityStatus` * `lineItemId` * `adGroupFormat` Examples: * All ad groups under an line item: `lineItemId=\"1234\"` * All `ENTITY_STATUS_ACTIVE` or `ENTITY_STATUS_PAUSED` `YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_IN_STREAM` ad groups under an advertiser: `(entityStatus=\"ENTITY_STATUS_ACTIVE\" OR entityStatus=\"ENTITY_STATUS_PAUSED\") AND adGroupFormat=\"YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_IN_STREAM\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `displayName` (default) * `entityStatus` The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `displayName desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListYoutubeAdGroups` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersYoutubeAdGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListYoutubeAdGroupsResponse}
     */
    displayvideoAdvertisersYoutubeAdGroupsList(advertiserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersYoutubeAdGroupsList");
      }

      let pathParams = {
        'advertiserId': advertiserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListYoutubeAdGroupsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/youtubeAdGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGet operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignedTargetingOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a single targeting option assigned to a YouTube ad group. Inherited assigned targeting options are not included.
     * @param {String} advertiserId Required. The ID of the advertiser the ad group belongs to.
     * @param {String} youtubeAdGroupId Required. The ID of the ad group the assigned targeting option belongs to.
     * @param {module:model/String} targetingType Required. Identifies the type of this assigned targeting option. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SESSION_POSITION` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_YOUTUBE_CHANNEL` * `TARGETING_TYPE_YOUTUBE_VIDEO`
     * @param {String} assignedTargetingOptionId Required. An identifier unique to the targeting type in this line item that identifies the assigned targeting option being requested.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignedTargetingOption}
     */
    displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGet(advertiserId, youtubeAdGroupId, targetingType, assignedTargetingOptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGet");
      }
      // verify the required parameter 'youtubeAdGroupId' is set
      if (youtubeAdGroupId === undefined || youtubeAdGroupId === null) {
        throw new Error("Missing the required parameter 'youtubeAdGroupId' when calling displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGet");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGet");
      }
      // verify the required parameter 'assignedTargetingOptionId' is set
      if (assignedTargetingOptionId === undefined || assignedTargetingOptionId === null) {
        throw new Error("Missing the required parameter 'assignedTargetingOptionId' when calling displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGet");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'youtubeAdGroupId': youtubeAdGroupId,
        'targetingType': targetingType,
        'assignedTargetingOptionId': assignedTargetingOptionId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssignedTargetingOption;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/youtubeAdGroups/{youtubeAdGroupId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsList operation.
     * @callback module:api/AdvertisersApi~displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListYoutubeAdGroupAssignedTargetingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the targeting options assigned to a YouTube ad group. Inherited assigned targeting options are not included.
     * @param {String} advertiserId Required. The ID of the advertiser the ad group belongs to.
     * @param {String} youtubeAdGroupId Required. The ID of the ad group to list assigned targeting options for.
     * @param {module:model/String} targetingType Required. Identifies the type of assigned targeting options to list. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SESSION_POSITION` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_YOUTUBE_CHANNEL` * `TARGETING_TYPE_YOUTUBE_VIDEO`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedTargetingOptionId` Examples: * `AssignedTargetingOption` resources with ID 1 or 2: `assignedTargetingOptionId=\"1\" OR assignedTargetingOptionId=\"2\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `assignedTargetingOptionId desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `5000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListYoutubeAdGroupAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
     * @param {module:api/AdvertisersApi~displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListYoutubeAdGroupAssignedTargetingOptionsResponse}
     */
    displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsList(advertiserId, youtubeAdGroupId, targetingType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsList");
      }
      // verify the required parameter 'youtubeAdGroupId' is set
      if (youtubeAdGroupId === undefined || youtubeAdGroupId === null) {
        throw new Error("Missing the required parameter 'youtubeAdGroupId' when calling displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsList");
      }
      // verify the required parameter 'targetingType' is set
      if (targetingType === undefined || targetingType === null) {
        throw new Error("Missing the required parameter 'targetingType' when calling displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsList");
      }

      let pathParams = {
        'advertiserId': advertiserId,
        'youtubeAdGroupId': youtubeAdGroupId,
        'targetingType': targetingType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListYoutubeAdGroupAssignedTargetingOptionsResponse;
      return this.apiClient.callApi(
        '/v2/advertisers/{advertiserId}/youtubeAdGroups/{youtubeAdGroupId}/targetingTypes/{targetingType}/assignedTargetingOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
