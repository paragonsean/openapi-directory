/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FloodlightActivity from '../model/FloodlightActivity';
import FloodlightGroup from '../model/FloodlightGroup';
import ListFloodlightActivitiesResponse from '../model/ListFloodlightActivitiesResponse';

/**
* FloodlightGroups service.
* @module api/FloodlightGroupsApi
* @version v2
*/
export default class FloodlightGroupsApi {

    /**
    * Constructs a new FloodlightGroupsApi. 
    * @alias module:api/FloodlightGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the displayvideoFloodlightGroupsFloodlightActivitiesGet operation.
     * @callback module:api/FloodlightGroupsApi~displayvideoFloodlightGroupsFloodlightActivitiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FloodlightActivity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Floodlight activity.
     * @param {String} floodlightGroupId Required. The ID of the parent Floodlight group to which the requested Floodlight activity belongs.
     * @param {String} floodlightActivityId Required. The ID of the Floodlight activity to fetch.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [partnerId] Required. The ID of the partner through which the Floodlight activity is being accessed.
     * @param {module:api/FloodlightGroupsApi~displayvideoFloodlightGroupsFloodlightActivitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FloodlightActivity}
     */
    displayvideoFloodlightGroupsFloodlightActivitiesGet(floodlightGroupId, floodlightActivityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'floodlightGroupId' is set
      if (floodlightGroupId === undefined || floodlightGroupId === null) {
        throw new Error("Missing the required parameter 'floodlightGroupId' when calling displayvideoFloodlightGroupsFloodlightActivitiesGet");
      }
      // verify the required parameter 'floodlightActivityId' is set
      if (floodlightActivityId === undefined || floodlightActivityId === null) {
        throw new Error("Missing the required parameter 'floodlightActivityId' when calling displayvideoFloodlightGroupsFloodlightActivitiesGet");
      }

      let pathParams = {
        'floodlightGroupId': floodlightGroupId,
        'floodlightActivityId': floodlightActivityId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FloodlightActivity;
      return this.apiClient.callApi(
        '/v2/floodlightGroups/{floodlightGroupId}/floodlightActivities/{floodlightActivityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoFloodlightGroupsFloodlightActivitiesList operation.
     * @callback module:api/FloodlightGroupsApi~displayvideoFloodlightGroupsFloodlightActivitiesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFloodlightActivitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists Floodlight activities in a Floodlight group.
     * @param {String} floodlightGroupId Required. The ID of the parent Floodlight group to which the requested Floodlight activities belong.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [orderBy] Optional. Field by which to sort the list. Acceptable values are: * `displayName` (default) * `floodlightActivityId` The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. Example: `displayName desc`.
     * @param {Number} [pageSize] Optional. Requested page size. Must be between `1` and `100`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
     * @param {String} [pageToken] Optional. A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListFloodlightActivities` method. If not specified, the first page of results will be returned.
     * @param {String} [partnerId] Required. The ID of the partner through which the Floodlight activities are being accessed.
     * @param {module:api/FloodlightGroupsApi~displayvideoFloodlightGroupsFloodlightActivitiesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFloodlightActivitiesResponse}
     */
    displayvideoFloodlightGroupsFloodlightActivitiesList(floodlightGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'floodlightGroupId' is set
      if (floodlightGroupId === undefined || floodlightGroupId === null) {
        throw new Error("Missing the required parameter 'floodlightGroupId' when calling displayvideoFloodlightGroupsFloodlightActivitiesList");
      }

      let pathParams = {
        'floodlightGroupId': floodlightGroupId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFloodlightActivitiesResponse;
      return this.apiClient.callApi(
        '/v2/floodlightGroups/{floodlightGroupId}/floodlightActivities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoFloodlightGroupsGet operation.
     * @callback module:api/FloodlightGroupsApi~displayvideoFloodlightGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FloodlightGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Floodlight group.
     * @param {String} floodlightGroupId Required. The ID of the Floodlight group to fetch.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [partnerId] Required. The partner context by which the Floodlight group is being accessed.
     * @param {module:api/FloodlightGroupsApi~displayvideoFloodlightGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FloodlightGroup}
     */
    displayvideoFloodlightGroupsGet(floodlightGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'floodlightGroupId' is set
      if (floodlightGroupId === undefined || floodlightGroupId === null) {
        throw new Error("Missing the required parameter 'floodlightGroupId' when calling displayvideoFloodlightGroupsGet");
      }

      let pathParams = {
        'floodlightGroupId': floodlightGroupId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FloodlightGroup;
      return this.apiClient.callApi(
        '/v2/floodlightGroups/{floodlightGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
