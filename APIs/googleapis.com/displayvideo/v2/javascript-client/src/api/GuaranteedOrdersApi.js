/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EditGuaranteedOrderReadAccessorsRequest from '../model/EditGuaranteedOrderReadAccessorsRequest';
import EditGuaranteedOrderReadAccessorsResponse from '../model/EditGuaranteedOrderReadAccessorsResponse';
import GuaranteedOrder from '../model/GuaranteedOrder';
import ListGuaranteedOrdersResponse from '../model/ListGuaranteedOrdersResponse';

/**
* GuaranteedOrders service.
* @module api/GuaranteedOrdersApi
* @version v2
*/
export default class GuaranteedOrdersApi {

    /**
    * Constructs a new GuaranteedOrdersApi. 
    * @alias module:api/GuaranteedOrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the displayvideoGuaranteedOrdersCreate operation.
     * @callback module:api/GuaranteedOrdersApi~displayvideoGuaranteedOrdersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GuaranteedOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new guaranteed order. Returns the newly created guaranteed order if successful.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [advertiserId] The ID of the advertiser that the request is being made within.
     * @param {String} [partnerId] The ID of the partner that the request is being made within.
     * @param {module:model/GuaranteedOrder} [guaranteedOrder] 
     * @param {module:api/GuaranteedOrdersApi~displayvideoGuaranteedOrdersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GuaranteedOrder}
     */
    displayvideoGuaranteedOrdersCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['guaranteedOrder'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'advertiserId': opts['advertiserId'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GuaranteedOrder;
      return this.apiClient.callApi(
        '/v2/guaranteedOrders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoGuaranteedOrdersEditGuaranteedOrderReadAccessors operation.
     * @callback module:api/GuaranteedOrdersApi~displayvideoGuaranteedOrdersEditGuaranteedOrderReadAccessorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditGuaranteedOrderReadAccessorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edits read advertisers of a guaranteed order.
     * @param {String} guaranteedOrderId Required. The ID of the guaranteed order to edit. The ID is of the format `{exchange}-{legacy_guaranteed_order_id}`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/EditGuaranteedOrderReadAccessorsRequest} [editGuaranteedOrderReadAccessorsRequest] 
     * @param {module:api/GuaranteedOrdersApi~displayvideoGuaranteedOrdersEditGuaranteedOrderReadAccessorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditGuaranteedOrderReadAccessorsResponse}
     */
    displayvideoGuaranteedOrdersEditGuaranteedOrderReadAccessors(guaranteedOrderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['editGuaranteedOrderReadAccessorsRequest'];
      // verify the required parameter 'guaranteedOrderId' is set
      if (guaranteedOrderId === undefined || guaranteedOrderId === null) {
        throw new Error("Missing the required parameter 'guaranteedOrderId' when calling displayvideoGuaranteedOrdersEditGuaranteedOrderReadAccessors");
      }

      let pathParams = {
        'guaranteedOrderId': guaranteedOrderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EditGuaranteedOrderReadAccessorsResponse;
      return this.apiClient.callApi(
        '/v2/guaranteedOrders/{guaranteedOrderId}:editGuaranteedOrderReadAccessors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoGuaranteedOrdersGet operation.
     * @callback module:api/GuaranteedOrdersApi~displayvideoGuaranteedOrdersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GuaranteedOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a guaranteed order.
     * @param {String} guaranteedOrderId Required. The ID of the guaranteed order to fetch. The ID is of the format `{exchange}-{legacy_guaranteed_order_id}`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [advertiserId] The ID of the advertiser that has access to the guaranteed order.
     * @param {String} [partnerId] The ID of the partner that has access to the guaranteed order.
     * @param {module:api/GuaranteedOrdersApi~displayvideoGuaranteedOrdersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GuaranteedOrder}
     */
    displayvideoGuaranteedOrdersGet(guaranteedOrderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guaranteedOrderId' is set
      if (guaranteedOrderId === undefined || guaranteedOrderId === null) {
        throw new Error("Missing the required parameter 'guaranteedOrderId' when calling displayvideoGuaranteedOrdersGet");
      }

      let pathParams = {
        'guaranteedOrderId': guaranteedOrderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'advertiserId': opts['advertiserId'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GuaranteedOrder;
      return this.apiClient.callApi(
        '/v2/guaranteedOrders/{guaranteedOrderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoGuaranteedOrdersList operation.
     * @callback module:api/GuaranteedOrdersApi~displayvideoGuaranteedOrdersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListGuaranteedOrdersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists guaranteed orders that are accessible to the current user. The order is defined by the order_by parameter. If a filter by entity_status is not specified, guaranteed orders with entity status `ENTITY_STATUS_ARCHIVED` will not be included in the results.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [advertiserId] The ID of the advertiser that has access to the guaranteed order.
     * @param {String} [filter] Allows filtering by guaranteed order fields. * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `guaranteed_order_id` * `exchange` * `display_name` * `status.entityStatus` Examples: * All active guaranteed orders: `status.entityStatus=\"ENTITY_STATUS_ACTIVE\"` * Guaranteed orders belonging to Google Ad Manager or Rubicon exchanges: `exchange=\"EXCHANGE_GOOGLE_AD_MANAGER\" OR exchange=\"EXCHANGE_RUBICON\"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
     * @param {String} [orderBy] Field by which to sort the list. Acceptable values are: * `displayName` (default) The default sorting order is ascending. To specify descending order for a field, a suffix \"desc\" should be added to the field name. For example, `displayName desc`.
     * @param {Number} [pageSize] Requested page size. Must be between `1` and `200`. If unspecified will default to `100`.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListGuaranteedOrders` method. If not specified, the first page of results will be returned.
     * @param {String} [partnerId] The ID of the partner that has access to the guaranteed order.
     * @param {module:api/GuaranteedOrdersApi~displayvideoGuaranteedOrdersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListGuaranteedOrdersResponse}
     */
    displayvideoGuaranteedOrdersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'advertiserId': opts['advertiserId'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'partnerId': opts['partnerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListGuaranteedOrdersResponse;
      return this.apiClient.callApi(
        '/v2/guaranteedOrders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayvideoGuaranteedOrdersPatch operation.
     * @callback module:api/GuaranteedOrdersApi~displayvideoGuaranteedOrdersPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GuaranteedOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing guaranteed order. Returns the updated guaranteed order if successful.
     * @param {String} guaranteedOrderId Output only. The unique identifier of the guaranteed order. The guaranteed order IDs have the format `{exchange}-{legacy_guaranteed_order_id}`.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [advertiserId] The ID of the advertiser that the request is being made within.
     * @param {String} [partnerId] The ID of the partner that the request is being made within.
     * @param {String} [updateMask] Required. The mask to control which fields to update.
     * @param {module:model/GuaranteedOrder} [guaranteedOrder] 
     * @param {module:api/GuaranteedOrdersApi~displayvideoGuaranteedOrdersPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GuaranteedOrder}
     */
    displayvideoGuaranteedOrdersPatch(guaranteedOrderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['guaranteedOrder'];
      // verify the required parameter 'guaranteedOrderId' is set
      if (guaranteedOrderId === undefined || guaranteedOrderId === null) {
        throw new Error("Missing the required parameter 'guaranteedOrderId' when calling displayvideoGuaranteedOrdersPatch");
      }

      let pathParams = {
        'guaranteedOrderId': guaranteedOrderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'advertiserId': opts['advertiserId'],
        'partnerId': opts['partnerId'],
        'updateMask': opts['updateMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GuaranteedOrder;
      return this.apiClient.callApi(
        '/v2/guaranteedOrders/{guaranteedOrderId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
