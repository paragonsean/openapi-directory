/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details for assigned POI targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is &#x60;TARGETING_TYPE_POI&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PoiAssignedTargetingOptionDetails {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_PROXIMITY_RADIUS_AMOUNT = "proximityRadiusAmount";
  @SerializedName(SERIALIZED_NAME_PROXIMITY_RADIUS_AMOUNT)
  private Double proximityRadiusAmount;

  /**
   * Required. The unit of distance by which the targeting radius is measured.
   */
  @JsonAdapter(ProximityRadiusUnitEnum.Adapter.class)
  public enum ProximityRadiusUnitEnum {
    UNSPECIFIED("DISTANCE_UNIT_UNSPECIFIED"),
    
    MILES("DISTANCE_UNIT_MILES"),
    
    KILOMETERS("DISTANCE_UNIT_KILOMETERS");

    private String value;

    ProximityRadiusUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProximityRadiusUnitEnum fromValue(String value) {
      for (ProximityRadiusUnitEnum b : ProximityRadiusUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProximityRadiusUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProximityRadiusUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProximityRadiusUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProximityRadiusUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProximityRadiusUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROXIMITY_RADIUS_UNIT = "proximityRadiusUnit";
  @SerializedName(SERIALIZED_NAME_PROXIMITY_RADIUS_UNIT)
  private ProximityRadiusUnitEnum proximityRadiusUnit;

  public static final String SERIALIZED_NAME_TARGETING_OPTION_ID = "targetingOptionId";
  @SerializedName(SERIALIZED_NAME_TARGETING_OPTION_ID)
  private String targetingOptionId;

  public PoiAssignedTargetingOptionDetails() {
  }

  public PoiAssignedTargetingOptionDetails(
     String displayName, 
     Double latitude, 
     Double longitude
  ) {
    this();
    this.displayName = displayName;
    this.latitude = latitude;
    this.longitude = longitude;
  }

  /**
   * Output only. The display name of a POI, e.g. \&quot;Times Square\&quot;, \&quot;Space Needle\&quot;, followed by its full address if available.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Output only. Latitude of the POI rounding to 6th decimal place.
   * @return latitude
   */
  @javax.annotation.Nullable
  public Double getLatitude() {
    return latitude;
  }



  /**
   * Output only. Longitude of the POI rounding to 6th decimal place.
   * @return longitude
   */
  @javax.annotation.Nullable
  public Double getLongitude() {
    return longitude;
  }



  public PoiAssignedTargetingOptionDetails proximityRadiusAmount(Double proximityRadiusAmount) {
    this.proximityRadiusAmount = proximityRadiusAmount;
    return this;
  }

  /**
   * Required. The radius of the area around the POI that will be targeted. The units of the radius are specified by proximity_radius_unit. Must be 1 to 800 if unit is &#x60;DISTANCE_UNIT_KILOMETERS&#x60; and 1 to 500 if unit is &#x60;DISTANCE_UNIT_MILES&#x60;.
   * @return proximityRadiusAmount
   */
  @javax.annotation.Nullable
  public Double getProximityRadiusAmount() {
    return proximityRadiusAmount;
  }

  public void setProximityRadiusAmount(Double proximityRadiusAmount) {
    this.proximityRadiusAmount = proximityRadiusAmount;
  }


  public PoiAssignedTargetingOptionDetails proximityRadiusUnit(ProximityRadiusUnitEnum proximityRadiusUnit) {
    this.proximityRadiusUnit = proximityRadiusUnit;
    return this;
  }

  /**
   * Required. The unit of distance by which the targeting radius is measured.
   * @return proximityRadiusUnit
   */
  @javax.annotation.Nullable
  public ProximityRadiusUnitEnum getProximityRadiusUnit() {
    return proximityRadiusUnit;
  }

  public void setProximityRadiusUnit(ProximityRadiusUnitEnum proximityRadiusUnit) {
    this.proximityRadiusUnit = proximityRadiusUnit;
  }


  public PoiAssignedTargetingOptionDetails targetingOptionId(String targetingOptionId) {
    this.targetingOptionId = targetingOptionId;
    return this;
  }

  /**
   * Required. The targeting_option_id of a TargetingOption of type &#x60;TARGETING_TYPE_POI&#x60;. Accepted POI targeting option IDs can be retrieved using &#x60;targetingTypes.targetingOptions.search&#x60;. If targeting a specific latitude/longitude coordinate removed from an address or POI name, you can generate the necessary targeting option ID by rounding the desired coordinate values to the 6th decimal place, removing the decimals, and concatenating the string values separated by a semicolon. For example, you can target the latitude/longitude pair of 40.7414691, -74.003387 using the targeting option ID \&quot;40741469;-74003387\&quot;. **Upon** **creation, this field value will be updated to append a semicolon and** **alphanumerical hash value if only latitude/longitude coordinates are** **provided.**
   * @return targetingOptionId
   */
  @javax.annotation.Nullable
  public String getTargetingOptionId() {
    return targetingOptionId;
  }

  public void setTargetingOptionId(String targetingOptionId) {
    this.targetingOptionId = targetingOptionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoiAssignedTargetingOptionDetails poiAssignedTargetingOptionDetails = (PoiAssignedTargetingOptionDetails) o;
    return Objects.equals(this.displayName, poiAssignedTargetingOptionDetails.displayName) &&
        Objects.equals(this.latitude, poiAssignedTargetingOptionDetails.latitude) &&
        Objects.equals(this.longitude, poiAssignedTargetingOptionDetails.longitude) &&
        Objects.equals(this.proximityRadiusAmount, poiAssignedTargetingOptionDetails.proximityRadiusAmount) &&
        Objects.equals(this.proximityRadiusUnit, poiAssignedTargetingOptionDetails.proximityRadiusUnit) &&
        Objects.equals(this.targetingOptionId, poiAssignedTargetingOptionDetails.targetingOptionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, latitude, longitude, proximityRadiusAmount, proximityRadiusUnit, targetingOptionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoiAssignedTargetingOptionDetails {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    proximityRadiusAmount: ").append(toIndentedString(proximityRadiusAmount)).append("\n");
    sb.append("    proximityRadiusUnit: ").append(toIndentedString(proximityRadiusUnit)).append("\n");
    sb.append("    targetingOptionId: ").append(toIndentedString(targetingOptionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("proximityRadiusAmount");
    openapiFields.add("proximityRadiusUnit");
    openapiFields.add("targetingOptionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PoiAssignedTargetingOptionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PoiAssignedTargetingOptionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PoiAssignedTargetingOptionDetails is not found in the empty JSON string", PoiAssignedTargetingOptionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PoiAssignedTargetingOptionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PoiAssignedTargetingOptionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("proximityRadiusUnit") != null && !jsonObj.get("proximityRadiusUnit").isJsonNull()) && !jsonObj.get("proximityRadiusUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proximityRadiusUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proximityRadiusUnit").toString()));
      }
      // validate the optional field `proximityRadiusUnit`
      if (jsonObj.get("proximityRadiusUnit") != null && !jsonObj.get("proximityRadiusUnit").isJsonNull()) {
        ProximityRadiusUnitEnum.validateJsonElement(jsonObj.get("proximityRadiusUnit"));
      }
      if ((jsonObj.get("targetingOptionId") != null && !jsonObj.get("targetingOptionId").isJsonNull()) && !jsonObj.get("targetingOptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetingOptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetingOptionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PoiAssignedTargetingOptionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PoiAssignedTargetingOptionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PoiAssignedTargetingOptionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PoiAssignedTargetingOptionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PoiAssignedTargetingOptionDetails>() {
           @Override
           public void write(JsonWriter out, PoiAssignedTargetingOptionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PoiAssignedTargetingOptionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PoiAssignedTargetingOptionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PoiAssignedTargetingOptionDetails
   * @throws IOException if the JSON string is invalid with respect to PoiAssignedTargetingOptionDetails
   */
  public static PoiAssignedTargetingOptionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PoiAssignedTargetingOptionDetails.class);
  }

  /**
   * Convert an instance of PoiAssignedTargetingOptionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

