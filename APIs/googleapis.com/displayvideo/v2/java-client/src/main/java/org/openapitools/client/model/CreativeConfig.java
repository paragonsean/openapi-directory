/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InventorySourceDisplayCreativeConfig;
import org.openapitools.client.model.InventorySourceVideoCreativeConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creative requirements configuration for the inventory source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeConfig {
  /**
   * The type of creative that can be assigned to the inventory source. Only the following types are supported: * &#x60;CREATIVE_TYPE_STANDARD&#x60; * &#x60;CREATIVE_TYPE_VIDEO&#x60;
   */
  @JsonAdapter(CreativeTypeEnum.Adapter.class)
  public enum CreativeTypeEnum {
    UNSPECIFIED("CREATIVE_TYPE_UNSPECIFIED"),
    
    STANDARD("CREATIVE_TYPE_STANDARD"),
    
    EXPANDABLE("CREATIVE_TYPE_EXPANDABLE"),
    
    VIDEO("CREATIVE_TYPE_VIDEO"),
    
    NATIVE("CREATIVE_TYPE_NATIVE"),
    
    TEMPLATED_APP_INSTALL("CREATIVE_TYPE_TEMPLATED_APP_INSTALL"),
    
    NATIVE_SITE_SQUARE("CREATIVE_TYPE_NATIVE_SITE_SQUARE"),
    
    TEMPLATED_APP_INSTALL_INTERSTITIAL("CREATIVE_TYPE_TEMPLATED_APP_INSTALL_INTERSTITIAL"),
    
    LIGHTBOX("CREATIVE_TYPE_LIGHTBOX"),
    
    NATIVE_APP_INSTALL("CREATIVE_TYPE_NATIVE_APP_INSTALL"),
    
    NATIVE_APP_INSTALL_SQUARE("CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE"),
    
    AUDIO("CREATIVE_TYPE_AUDIO"),
    
    PUBLISHER_HOSTED("CREATIVE_TYPE_PUBLISHER_HOSTED"),
    
    NATIVE_VIDEO("CREATIVE_TYPE_NATIVE_VIDEO"),
    
    TEMPLATED_APP_INSTALL_VIDEO("CREATIVE_TYPE_TEMPLATED_APP_INSTALL_VIDEO");

    private String value;

    CreativeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreativeTypeEnum fromValue(String value) {
      for (CreativeTypeEnum b : CreativeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreativeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreativeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreativeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreativeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreativeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATIVE_TYPE = "creativeType";
  @SerializedName(SERIALIZED_NAME_CREATIVE_TYPE)
  private CreativeTypeEnum creativeType;

  public static final String SERIALIZED_NAME_DISPLAY_CREATIVE_CONFIG = "displayCreativeConfig";
  @SerializedName(SERIALIZED_NAME_DISPLAY_CREATIVE_CONFIG)
  private InventorySourceDisplayCreativeConfig displayCreativeConfig;

  public static final String SERIALIZED_NAME_VIDEO_CREATIVE_CONFIG = "videoCreativeConfig";
  @SerializedName(SERIALIZED_NAME_VIDEO_CREATIVE_CONFIG)
  private InventorySourceVideoCreativeConfig videoCreativeConfig;

  public CreativeConfig() {
  }

  public CreativeConfig creativeType(CreativeTypeEnum creativeType) {
    this.creativeType = creativeType;
    return this;
  }

  /**
   * The type of creative that can be assigned to the inventory source. Only the following types are supported: * &#x60;CREATIVE_TYPE_STANDARD&#x60; * &#x60;CREATIVE_TYPE_VIDEO&#x60;
   * @return creativeType
   */
  @javax.annotation.Nullable
  public CreativeTypeEnum getCreativeType() {
    return creativeType;
  }

  public void setCreativeType(CreativeTypeEnum creativeType) {
    this.creativeType = creativeType;
  }


  public CreativeConfig displayCreativeConfig(InventorySourceDisplayCreativeConfig displayCreativeConfig) {
    this.displayCreativeConfig = displayCreativeConfig;
    return this;
  }

  /**
   * Get displayCreativeConfig
   * @return displayCreativeConfig
   */
  @javax.annotation.Nullable
  public InventorySourceDisplayCreativeConfig getDisplayCreativeConfig() {
    return displayCreativeConfig;
  }

  public void setDisplayCreativeConfig(InventorySourceDisplayCreativeConfig displayCreativeConfig) {
    this.displayCreativeConfig = displayCreativeConfig;
  }


  public CreativeConfig videoCreativeConfig(InventorySourceVideoCreativeConfig videoCreativeConfig) {
    this.videoCreativeConfig = videoCreativeConfig;
    return this;
  }

  /**
   * Get videoCreativeConfig
   * @return videoCreativeConfig
   */
  @javax.annotation.Nullable
  public InventorySourceVideoCreativeConfig getVideoCreativeConfig() {
    return videoCreativeConfig;
  }

  public void setVideoCreativeConfig(InventorySourceVideoCreativeConfig videoCreativeConfig) {
    this.videoCreativeConfig = videoCreativeConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeConfig creativeConfig = (CreativeConfig) o;
    return Objects.equals(this.creativeType, creativeConfig.creativeType) &&
        Objects.equals(this.displayCreativeConfig, creativeConfig.displayCreativeConfig) &&
        Objects.equals(this.videoCreativeConfig, creativeConfig.videoCreativeConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creativeType, displayCreativeConfig, videoCreativeConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeConfig {\n");
    sb.append("    creativeType: ").append(toIndentedString(creativeType)).append("\n");
    sb.append("    displayCreativeConfig: ").append(toIndentedString(displayCreativeConfig)).append("\n");
    sb.append("    videoCreativeConfig: ").append(toIndentedString(videoCreativeConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creativeType");
    openapiFields.add("displayCreativeConfig");
    openapiFields.add("videoCreativeConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeConfig is not found in the empty JSON string", CreativeConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreativeConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreativeConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creativeType") != null && !jsonObj.get("creativeType").isJsonNull()) && !jsonObj.get("creativeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeType").toString()));
      }
      // validate the optional field `creativeType`
      if (jsonObj.get("creativeType") != null && !jsonObj.get("creativeType").isJsonNull()) {
        CreativeTypeEnum.validateJsonElement(jsonObj.get("creativeType"));
      }
      // validate the optional field `displayCreativeConfig`
      if (jsonObj.get("displayCreativeConfig") != null && !jsonObj.get("displayCreativeConfig").isJsonNull()) {
        InventorySourceDisplayCreativeConfig.validateJsonElement(jsonObj.get("displayCreativeConfig"));
      }
      // validate the optional field `videoCreativeConfig`
      if (jsonObj.get("videoCreativeConfig") != null && !jsonObj.get("videoCreativeConfig").isJsonNull()) {
        InventorySourceVideoCreativeConfig.validateJsonElement(jsonObj.get("videoCreativeConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreativeConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreativeConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreativeConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreativeConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CreativeConfig>() {
           @Override
           public void write(JsonWriter out, CreativeConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreativeConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreativeConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeConfig
   * @throws IOException if the JSON string is invalid with respect to CreativeConfig
   */
  public static CreativeConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeConfig.class);
  }

  /**
   * Convert an instance of CreativeConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

