/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ImageAsset;
import org.openapitools.client.model.YoutubeVideoDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details for a video performance ad.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoPerformanceAd {
  public static final String SERIALIZED_NAME_ACTION_BUTTON_LABELS = "actionButtonLabels";
  @SerializedName(SERIALIZED_NAME_ACTION_BUTTON_LABELS)
  private List<String> actionButtonLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPANION_BANNERS = "companionBanners";
  @SerializedName(SERIALIZED_NAME_COMPANION_BANNERS)
  private List<ImageAsset> companionBanners = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_PARAMETERS = "customParameters";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PARAMETERS)
  private Map<String, String> customParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_DESCRIPTIONS = "descriptions";
  @SerializedName(SERIALIZED_NAME_DESCRIPTIONS)
  private List<String> descriptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_URL_BREADCRUMB1 = "displayUrlBreadcrumb1";
  @SerializedName(SERIALIZED_NAME_DISPLAY_URL_BREADCRUMB1)
  private String displayUrlBreadcrumb1;

  public static final String SERIALIZED_NAME_DISPLAY_URL_BREADCRUMB2 = "displayUrlBreadcrumb2";
  @SerializedName(SERIALIZED_NAME_DISPLAY_URL_BREADCRUMB2)
  private String displayUrlBreadcrumb2;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_FINAL_URL = "finalUrl";
  @SerializedName(SERIALIZED_NAME_FINAL_URL)
  private String finalUrl;

  public static final String SERIALIZED_NAME_HEADLINES = "headlines";
  @SerializedName(SERIALIZED_NAME_HEADLINES)
  private List<String> headlines = new ArrayList<>();

  public static final String SERIALIZED_NAME_LONG_HEADLINES = "longHeadlines";
  @SerializedName(SERIALIZED_NAME_LONG_HEADLINES)
  private List<String> longHeadlines = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACKING_URL = "trackingUrl";
  @SerializedName(SERIALIZED_NAME_TRACKING_URL)
  private String trackingUrl;

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private List<YoutubeVideoDetails> videos = new ArrayList<>();

  public VideoPerformanceAd() {
  }

  public VideoPerformanceAd actionButtonLabels(List<String> actionButtonLabels) {
    this.actionButtonLabels = actionButtonLabels;
    return this;
  }

  public VideoPerformanceAd addActionButtonLabelsItem(String actionButtonLabelsItem) {
    if (this.actionButtonLabels == null) {
      this.actionButtonLabels = new ArrayList<>();
    }
    this.actionButtonLabels.add(actionButtonLabelsItem);
    return this;
  }

  /**
   * The list of text assets shown on the call-to-action button.
   * @return actionButtonLabels
   */
  @javax.annotation.Nullable
  public List<String> getActionButtonLabels() {
    return actionButtonLabels;
  }

  public void setActionButtonLabels(List<String> actionButtonLabels) {
    this.actionButtonLabels = actionButtonLabels;
  }


  public VideoPerformanceAd companionBanners(List<ImageAsset> companionBanners) {
    this.companionBanners = companionBanners;
    return this;
  }

  public VideoPerformanceAd addCompanionBannersItem(ImageAsset companionBannersItem) {
    if (this.companionBanners == null) {
      this.companionBanners = new ArrayList<>();
    }
    this.companionBanners.add(companionBannersItem);
    return this;
  }

  /**
   * The list of companion banners used by this ad.
   * @return companionBanners
   */
  @javax.annotation.Nullable
  public List<ImageAsset> getCompanionBanners() {
    return companionBanners;
  }

  public void setCompanionBanners(List<ImageAsset> companionBanners) {
    this.companionBanners = companionBanners;
  }


  public VideoPerformanceAd customParameters(Map<String, String> customParameters) {
    this.customParameters = customParameters;
    return this;
  }

  public VideoPerformanceAd putCustomParametersItem(String key, String customParametersItem) {
    if (this.customParameters == null) {
      this.customParameters = new HashMap<>();
    }
    this.customParameters.put(key, customParametersItem);
    return this;
  }

  /**
   * The custom parameters to pass custom values to tracking URL template.
   * @return customParameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getCustomParameters() {
    return customParameters;
  }

  public void setCustomParameters(Map<String, String> customParameters) {
    this.customParameters = customParameters;
  }


  public VideoPerformanceAd descriptions(List<String> descriptions) {
    this.descriptions = descriptions;
    return this;
  }

  public VideoPerformanceAd addDescriptionsItem(String descriptionsItem) {
    if (this.descriptions == null) {
      this.descriptions = new ArrayList<>();
    }
    this.descriptions.add(descriptionsItem);
    return this;
  }

  /**
   * The list of descriptions shown on the call-to-action banner.
   * @return descriptions
   */
  @javax.annotation.Nullable
  public List<String> getDescriptions() {
    return descriptions;
  }

  public void setDescriptions(List<String> descriptions) {
    this.descriptions = descriptions;
  }


  public VideoPerformanceAd displayUrlBreadcrumb1(String displayUrlBreadcrumb1) {
    this.displayUrlBreadcrumb1 = displayUrlBreadcrumb1;
    return this;
  }

  /**
   * The first piece after the domain in the display URL.
   * @return displayUrlBreadcrumb1
   */
  @javax.annotation.Nullable
  public String getDisplayUrlBreadcrumb1() {
    return displayUrlBreadcrumb1;
  }

  public void setDisplayUrlBreadcrumb1(String displayUrlBreadcrumb1) {
    this.displayUrlBreadcrumb1 = displayUrlBreadcrumb1;
  }


  public VideoPerformanceAd displayUrlBreadcrumb2(String displayUrlBreadcrumb2) {
    this.displayUrlBreadcrumb2 = displayUrlBreadcrumb2;
    return this;
  }

  /**
   * The second piece after the domain in the display URL.
   * @return displayUrlBreadcrumb2
   */
  @javax.annotation.Nullable
  public String getDisplayUrlBreadcrumb2() {
    return displayUrlBreadcrumb2;
  }

  public void setDisplayUrlBreadcrumb2(String displayUrlBreadcrumb2) {
    this.displayUrlBreadcrumb2 = displayUrlBreadcrumb2;
  }


  public VideoPerformanceAd domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * The domain of the display URL.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public VideoPerformanceAd finalUrl(String finalUrl) {
    this.finalUrl = finalUrl;
    return this;
  }

  /**
   * The URL address of the webpage that people reach after they click the ad.
   * @return finalUrl
   */
  @javax.annotation.Nullable
  public String getFinalUrl() {
    return finalUrl;
  }

  public void setFinalUrl(String finalUrl) {
    this.finalUrl = finalUrl;
  }


  public VideoPerformanceAd headlines(List<String> headlines) {
    this.headlines = headlines;
    return this;
  }

  public VideoPerformanceAd addHeadlinesItem(String headlinesItem) {
    if (this.headlines == null) {
      this.headlines = new ArrayList<>();
    }
    this.headlines.add(headlinesItem);
    return this;
  }

  /**
   * The list of headlines shown on the call-to-action banner.
   * @return headlines
   */
  @javax.annotation.Nullable
  public List<String> getHeadlines() {
    return headlines;
  }

  public void setHeadlines(List<String> headlines) {
    this.headlines = headlines;
  }


  public VideoPerformanceAd longHeadlines(List<String> longHeadlines) {
    this.longHeadlines = longHeadlines;
    return this;
  }

  public VideoPerformanceAd addLongHeadlinesItem(String longHeadlinesItem) {
    if (this.longHeadlines == null) {
      this.longHeadlines = new ArrayList<>();
    }
    this.longHeadlines.add(longHeadlinesItem);
    return this;
  }

  /**
   * The list of lone headlines shown on the call-to-action banner.
   * @return longHeadlines
   */
  @javax.annotation.Nullable
  public List<String> getLongHeadlines() {
    return longHeadlines;
  }

  public void setLongHeadlines(List<String> longHeadlines) {
    this.longHeadlines = longHeadlines;
  }


  public VideoPerformanceAd trackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
    return this;
  }

  /**
   * The URL address loaded in the background for tracking purposes.
   * @return trackingUrl
   */
  @javax.annotation.Nullable
  public String getTrackingUrl() {
    return trackingUrl;
  }

  public void setTrackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
  }


  public VideoPerformanceAd videos(List<YoutubeVideoDetails> videos) {
    this.videos = videos;
    return this;
  }

  public VideoPerformanceAd addVideosItem(YoutubeVideoDetails videosItem) {
    if (this.videos == null) {
      this.videos = new ArrayList<>();
    }
    this.videos.add(videosItem);
    return this;
  }

  /**
   * The list of YouTube video assets used by this ad.
   * @return videos
   */
  @javax.annotation.Nullable
  public List<YoutubeVideoDetails> getVideos() {
    return videos;
  }

  public void setVideos(List<YoutubeVideoDetails> videos) {
    this.videos = videos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoPerformanceAd videoPerformanceAd = (VideoPerformanceAd) o;
    return Objects.equals(this.actionButtonLabels, videoPerformanceAd.actionButtonLabels) &&
        Objects.equals(this.companionBanners, videoPerformanceAd.companionBanners) &&
        Objects.equals(this.customParameters, videoPerformanceAd.customParameters) &&
        Objects.equals(this.descriptions, videoPerformanceAd.descriptions) &&
        Objects.equals(this.displayUrlBreadcrumb1, videoPerformanceAd.displayUrlBreadcrumb1) &&
        Objects.equals(this.displayUrlBreadcrumb2, videoPerformanceAd.displayUrlBreadcrumb2) &&
        Objects.equals(this.domain, videoPerformanceAd.domain) &&
        Objects.equals(this.finalUrl, videoPerformanceAd.finalUrl) &&
        Objects.equals(this.headlines, videoPerformanceAd.headlines) &&
        Objects.equals(this.longHeadlines, videoPerformanceAd.longHeadlines) &&
        Objects.equals(this.trackingUrl, videoPerformanceAd.trackingUrl) &&
        Objects.equals(this.videos, videoPerformanceAd.videos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionButtonLabels, companionBanners, customParameters, descriptions, displayUrlBreadcrumb1, displayUrlBreadcrumb2, domain, finalUrl, headlines, longHeadlines, trackingUrl, videos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoPerformanceAd {\n");
    sb.append("    actionButtonLabels: ").append(toIndentedString(actionButtonLabels)).append("\n");
    sb.append("    companionBanners: ").append(toIndentedString(companionBanners)).append("\n");
    sb.append("    customParameters: ").append(toIndentedString(customParameters)).append("\n");
    sb.append("    descriptions: ").append(toIndentedString(descriptions)).append("\n");
    sb.append("    displayUrlBreadcrumb1: ").append(toIndentedString(displayUrlBreadcrumb1)).append("\n");
    sb.append("    displayUrlBreadcrumb2: ").append(toIndentedString(displayUrlBreadcrumb2)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    finalUrl: ").append(toIndentedString(finalUrl)).append("\n");
    sb.append("    headlines: ").append(toIndentedString(headlines)).append("\n");
    sb.append("    longHeadlines: ").append(toIndentedString(longHeadlines)).append("\n");
    sb.append("    trackingUrl: ").append(toIndentedString(trackingUrl)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionButtonLabels");
    openapiFields.add("companionBanners");
    openapiFields.add("customParameters");
    openapiFields.add("descriptions");
    openapiFields.add("displayUrlBreadcrumb1");
    openapiFields.add("displayUrlBreadcrumb2");
    openapiFields.add("domain");
    openapiFields.add("finalUrl");
    openapiFields.add("headlines");
    openapiFields.add("longHeadlines");
    openapiFields.add("trackingUrl");
    openapiFields.add("videos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoPerformanceAd
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoPerformanceAd.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoPerformanceAd is not found in the empty JSON string", VideoPerformanceAd.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoPerformanceAd.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoPerformanceAd` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("actionButtonLabels") != null && !jsonObj.get("actionButtonLabels").isJsonNull() && !jsonObj.get("actionButtonLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionButtonLabels` to be an array in the JSON string but got `%s`", jsonObj.get("actionButtonLabels").toString()));
      }
      if (jsonObj.get("companionBanners") != null && !jsonObj.get("companionBanners").isJsonNull()) {
        JsonArray jsonArraycompanionBanners = jsonObj.getAsJsonArray("companionBanners");
        if (jsonArraycompanionBanners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("companionBanners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `companionBanners` to be an array in the JSON string but got `%s`", jsonObj.get("companionBanners").toString()));
          }

          // validate the optional field `companionBanners` (array)
          for (int i = 0; i < jsonArraycompanionBanners.size(); i++) {
            ImageAsset.validateJsonElement(jsonArraycompanionBanners.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("descriptions") != null && !jsonObj.get("descriptions").isJsonNull() && !jsonObj.get("descriptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptions` to be an array in the JSON string but got `%s`", jsonObj.get("descriptions").toString()));
      }
      if ((jsonObj.get("displayUrlBreadcrumb1") != null && !jsonObj.get("displayUrlBreadcrumb1").isJsonNull()) && !jsonObj.get("displayUrlBreadcrumb1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayUrlBreadcrumb1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayUrlBreadcrumb1").toString()));
      }
      if ((jsonObj.get("displayUrlBreadcrumb2") != null && !jsonObj.get("displayUrlBreadcrumb2").isJsonNull()) && !jsonObj.get("displayUrlBreadcrumb2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayUrlBreadcrumb2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayUrlBreadcrumb2").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("finalUrl") != null && !jsonObj.get("finalUrl").isJsonNull()) && !jsonObj.get("finalUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finalUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finalUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("headlines") != null && !jsonObj.get("headlines").isJsonNull() && !jsonObj.get("headlines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `headlines` to be an array in the JSON string but got `%s`", jsonObj.get("headlines").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("longHeadlines") != null && !jsonObj.get("longHeadlines").isJsonNull() && !jsonObj.get("longHeadlines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `longHeadlines` to be an array in the JSON string but got `%s`", jsonObj.get("longHeadlines").toString()));
      }
      if ((jsonObj.get("trackingUrl") != null && !jsonObj.get("trackingUrl").isJsonNull()) && !jsonObj.get("trackingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingUrl").toString()));
      }
      if (jsonObj.get("videos") != null && !jsonObj.get("videos").isJsonNull()) {
        JsonArray jsonArrayvideos = jsonObj.getAsJsonArray("videos");
        if (jsonArrayvideos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("videos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `videos` to be an array in the JSON string but got `%s`", jsonObj.get("videos").toString()));
          }

          // validate the optional field `videos` (array)
          for (int i = 0; i < jsonArrayvideos.size(); i++) {
            YoutubeVideoDetails.validateJsonElement(jsonArrayvideos.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoPerformanceAd.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoPerformanceAd' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoPerformanceAd> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoPerformanceAd.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoPerformanceAd>() {
           @Override
           public void write(JsonWriter out, VideoPerformanceAd value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoPerformanceAd read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoPerformanceAd given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoPerformanceAd
   * @throws IOException if the JSON string is invalid with respect to VideoPerformanceAd
   */
  public static VideoPerformanceAd fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoPerformanceAd.class);
  }

  /**
   * Convert an instance of VideoPerformanceAd to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

