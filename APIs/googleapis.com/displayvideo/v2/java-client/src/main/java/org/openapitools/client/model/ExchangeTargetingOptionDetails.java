/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a targetable exchange. This will be populated in the exchange_details field of a TargetingOption when targeting_type is &#x60;TARGETING_TYPE_EXCHANGE&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExchangeTargetingOptionDetails {
  /**
   * Output only. The type of exchange.
   */
  @JsonAdapter(ExchangeEnum.Adapter.class)
  public enum ExchangeEnum {
    UNSPECIFIED("EXCHANGE_UNSPECIFIED"),
    
    GOOGLE_AD_MANAGER("EXCHANGE_GOOGLE_AD_MANAGER"),
    
    APPNEXUS("EXCHANGE_APPNEXUS"),
    
    BRIGHTROLL("EXCHANGE_BRIGHTROLL"),
    
    ADFORM("EXCHANGE_ADFORM"),
    
    ADMETA("EXCHANGE_ADMETA"),
    
    ADMIXER("EXCHANGE_ADMIXER"),
    
    ADSMOGO("EXCHANGE_ADSMOGO"),
    
    ADSWIZZ("EXCHANGE_ADSWIZZ"),
    
    BIDSWITCH("EXCHANGE_BIDSWITCH"),
    
    BRIGHTROLL_DISPLAY("EXCHANGE_BRIGHTROLL_DISPLAY"),
    
    CADREON("EXCHANGE_CADREON"),
    
    DAILYMOTION("EXCHANGE_DAILYMOTION"),
    
    FIVE("EXCHANGE_FIVE"),
    
    FLUCT("EXCHANGE_FLUCT"),
    
    FREEWHEEL("EXCHANGE_FREEWHEEL"),
    
    GENIEE("EXCHANGE_GENIEE"),
    
    GUMGUM("EXCHANGE_GUMGUM"),
    
    IMOBILE("EXCHANGE_IMOBILE"),
    
    IBILLBOARD("EXCHANGE_IBILLBOARD"),
    
    IMPROVE_DIGITAL("EXCHANGE_IMPROVE_DIGITAL"),
    
    INDEX("EXCHANGE_INDEX"),
    
    KARGO("EXCHANGE_KARGO"),
    
    MICROAD("EXCHANGE_MICROAD"),
    
    MOPUB("EXCHANGE_MOPUB"),
    
    NEND("EXCHANGE_NEND"),
    
    ONE_BY_AOL_DISPLAY("EXCHANGE_ONE_BY_AOL_DISPLAY"),
    
    ONE_BY_AOL_MOBILE("EXCHANGE_ONE_BY_AOL_MOBILE"),
    
    ONE_BY_AOL_VIDEO("EXCHANGE_ONE_BY_AOL_VIDEO"),
    
    OOYALA("EXCHANGE_OOYALA"),
    
    OPENX("EXCHANGE_OPENX"),
    
    PERMODO("EXCHANGE_PERMODO"),
    
    PLATFORMONE("EXCHANGE_PLATFORMONE"),
    
    PLATFORMID("EXCHANGE_PLATFORMID"),
    
    PUBMATIC("EXCHANGE_PUBMATIC"),
    
    PULSEPOINT("EXCHANGE_PULSEPOINT"),
    
    REVENUEMAX("EXCHANGE_REVENUEMAX"),
    
    RUBICON("EXCHANGE_RUBICON"),
    
    SMARTCLIP("EXCHANGE_SMARTCLIP"),
    
    SMARTRTB("EXCHANGE_SMARTRTB"),
    
    SMARTSTREAMTV("EXCHANGE_SMARTSTREAMTV"),
    
    SOVRN("EXCHANGE_SOVRN"),
    
    SPOTXCHANGE("EXCHANGE_SPOTXCHANGE"),
    
    STROER("EXCHANGE_STROER"),
    
    TEADSTV("EXCHANGE_TEADSTV"),
    
    TELARIA("EXCHANGE_TELARIA"),
    
    TVN("EXCHANGE_TVN"),
    
    UNITED("EXCHANGE_UNITED"),
    
    YIELDLAB("EXCHANGE_YIELDLAB"),
    
    YIELDMO("EXCHANGE_YIELDMO"),
    
    UNRULYX("EXCHANGE_UNRULYX"),
    
    OPEN8("EXCHANGE_OPEN8"),
    
    TRITON("EXCHANGE_TRITON"),
    
    TRIPLELIFT("EXCHANGE_TRIPLELIFT"),
    
    TABOOLA("EXCHANGE_TABOOLA"),
    
    INMOBI("EXCHANGE_INMOBI"),
    
    SMAATO("EXCHANGE_SMAATO"),
    
    AJA("EXCHANGE_AJA"),
    
    SUPERSHIP("EXCHANGE_SUPERSHIP"),
    
    NEXSTAR_DIGITAL("EXCHANGE_NEXSTAR_DIGITAL"),
    
    WAZE("EXCHANGE_WAZE"),
    
    SOUNDCAST("EXCHANGE_SOUNDCAST"),
    
    SHARETHROUGH("EXCHANGE_SHARETHROUGH"),
    
    FYBER("EXCHANGE_FYBER"),
    
    RED_FOR_PUBLISHERS("EXCHANGE_RED_FOR_PUBLISHERS"),
    
    MEDIANET("EXCHANGE_MEDIANET"),
    
    TAPJOY("EXCHANGE_TAPJOY"),
    
    VISTAR("EXCHANGE_VISTAR"),
    
    DAX("EXCHANGE_DAX"),
    
    JCD("EXCHANGE_JCD"),
    
    PLACE_EXCHANGE("EXCHANGE_PLACE_EXCHANGE"),
    
    APPLOVIN("EXCHANGE_APPLOVIN"),
    
    CONNATIX("EXCHANGE_CONNATIX"),
    
    RESET_DIGITAL("EXCHANGE_RESET_DIGITAL"),
    
    HIVESTACK("EXCHANGE_HIVESTACK"),
    
    APPLOVIN_GBID("EXCHANGE_APPLOVIN_GBID"),
    
    FYBER_GBID("EXCHANGE_FYBER_GBID"),
    
    UNITY_GBID("EXCHANGE_UNITY_GBID"),
    
    CHARTBOOST_GBID("EXCHANGE_CHARTBOOST_GBID"),
    
    ADMOST_GBID("EXCHANGE_ADMOST_GBID"),
    
    TOPON_GBID("EXCHANGE_TOPON_GBID");

    private String value;

    ExchangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExchangeEnum fromValue(String value) {
      for (ExchangeEnum b : ExchangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExchangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExchangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExchangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExchangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExchangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCHANGE = "exchange";
  @SerializedName(SERIALIZED_NAME_EXCHANGE)
  private ExchangeEnum exchange;

  public ExchangeTargetingOptionDetails() {
  }

  public ExchangeTargetingOptionDetails(
     ExchangeEnum exchange
  ) {
    this();
    this.exchange = exchange;
  }

  /**
   * Output only. The type of exchange.
   * @return exchange
   */
  @javax.annotation.Nullable
  public ExchangeEnum getExchange() {
    return exchange;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExchangeTargetingOptionDetails exchangeTargetingOptionDetails = (ExchangeTargetingOptionDetails) o;
    return Objects.equals(this.exchange, exchangeTargetingOptionDetails.exchange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exchange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExchangeTargetingOptionDetails {\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exchange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExchangeTargetingOptionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExchangeTargetingOptionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExchangeTargetingOptionDetails is not found in the empty JSON string", ExchangeTargetingOptionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExchangeTargetingOptionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExchangeTargetingOptionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("exchange") != null && !jsonObj.get("exchange").isJsonNull()) && !jsonObj.get("exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchange").toString()));
      }
      // validate the optional field `exchange`
      if (jsonObj.get("exchange") != null && !jsonObj.get("exchange").isJsonNull()) {
        ExchangeEnum.validateJsonElement(jsonObj.get("exchange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExchangeTargetingOptionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExchangeTargetingOptionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExchangeTargetingOptionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExchangeTargetingOptionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ExchangeTargetingOptionDetails>() {
           @Override
           public void write(JsonWriter out, ExchangeTargetingOptionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExchangeTargetingOptionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExchangeTargetingOptionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExchangeTargetingOptionDetails
   * @throws IOException if the JSON string is invalid with respect to ExchangeTargetingOptionDetails
   */
  public static ExchangeTargetingOptionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExchangeTargetingOptionDetails.class);
  }

  /**
   * Convert an instance of ExchangeTargetingOptionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

