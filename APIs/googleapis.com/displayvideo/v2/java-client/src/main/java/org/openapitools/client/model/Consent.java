/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User consent status.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Consent {
  /**
   * Represents consent for ad personalization.
   */
  @JsonAdapter(AdPersonalizationEnum.Adapter.class)
  public enum AdPersonalizationEnum {
    UNSPECIFIED("CONSENT_STATUS_UNSPECIFIED"),
    
    GRANTED("CONSENT_STATUS_GRANTED"),
    
    DENIED("CONSENT_STATUS_DENIED");

    private String value;

    AdPersonalizationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdPersonalizationEnum fromValue(String value) {
      for (AdPersonalizationEnum b : AdPersonalizationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdPersonalizationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdPersonalizationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdPersonalizationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdPersonalizationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdPersonalizationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AD_PERSONALIZATION = "adPersonalization";
  @SerializedName(SERIALIZED_NAME_AD_PERSONALIZATION)
  private AdPersonalizationEnum adPersonalization;

  /**
   * Represents consent for ad user data.
   */
  @JsonAdapter(AdUserDataEnum.Adapter.class)
  public enum AdUserDataEnum {
    UNSPECIFIED("CONSENT_STATUS_UNSPECIFIED"),
    
    GRANTED("CONSENT_STATUS_GRANTED"),
    
    DENIED("CONSENT_STATUS_DENIED");

    private String value;

    AdUserDataEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdUserDataEnum fromValue(String value) {
      for (AdUserDataEnum b : AdUserDataEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdUserDataEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdUserDataEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdUserDataEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdUserDataEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdUserDataEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AD_USER_DATA = "adUserData";
  @SerializedName(SERIALIZED_NAME_AD_USER_DATA)
  private AdUserDataEnum adUserData;

  public Consent() {
  }

  public Consent adPersonalization(AdPersonalizationEnum adPersonalization) {
    this.adPersonalization = adPersonalization;
    return this;
  }

  /**
   * Represents consent for ad personalization.
   * @return adPersonalization
   */
  @javax.annotation.Nullable
  public AdPersonalizationEnum getAdPersonalization() {
    return adPersonalization;
  }

  public void setAdPersonalization(AdPersonalizationEnum adPersonalization) {
    this.adPersonalization = adPersonalization;
  }


  public Consent adUserData(AdUserDataEnum adUserData) {
    this.adUserData = adUserData;
    return this;
  }

  /**
   * Represents consent for ad user data.
   * @return adUserData
   */
  @javax.annotation.Nullable
  public AdUserDataEnum getAdUserData() {
    return adUserData;
  }

  public void setAdUserData(AdUserDataEnum adUserData) {
    this.adUserData = adUserData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Consent consent = (Consent) o;
    return Objects.equals(this.adPersonalization, consent.adPersonalization) &&
        Objects.equals(this.adUserData, consent.adUserData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adPersonalization, adUserData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Consent {\n");
    sb.append("    adPersonalization: ").append(toIndentedString(adPersonalization)).append("\n");
    sb.append("    adUserData: ").append(toIndentedString(adUserData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adPersonalization");
    openapiFields.add("adUserData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Consent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Consent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Consent is not found in the empty JSON string", Consent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Consent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Consent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adPersonalization") != null && !jsonObj.get("adPersonalization").isJsonNull()) && !jsonObj.get("adPersonalization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adPersonalization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adPersonalization").toString()));
      }
      // validate the optional field `adPersonalization`
      if (jsonObj.get("adPersonalization") != null && !jsonObj.get("adPersonalization").isJsonNull()) {
        AdPersonalizationEnum.validateJsonElement(jsonObj.get("adPersonalization"));
      }
      if ((jsonObj.get("adUserData") != null && !jsonObj.get("adUserData").isJsonNull()) && !jsonObj.get("adUserData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adUserData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adUserData").toString()));
      }
      // validate the optional field `adUserData`
      if (jsonObj.get("adUserData") != null && !jsonObj.get("adUserData").isJsonNull()) {
        AdUserDataEnum.validateJsonElement(jsonObj.get("adUserData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Consent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Consent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Consent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Consent.class));

       return (TypeAdapter<T>) new TypeAdapter<Consent>() {
           @Override
           public void write(JsonWriter out, Consent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Consent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Consent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Consent
   * @throws IOException if the JSON string is invalid with respect to Consent
   */
  public static Consent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Consent.class);
  }

  /**
   * Convert an instance of Consent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

