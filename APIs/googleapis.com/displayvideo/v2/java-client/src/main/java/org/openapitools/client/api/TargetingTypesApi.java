/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListTargetingOptionsResponse;
import org.openapitools.client.model.SearchTargetingOptionsRequest;
import org.openapitools.client.model.SearchTargetingOptionsResponse;
import org.openapitools.client.model.TargetingOption;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TargetingTypesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TargetingTypesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TargetingTypesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for displayvideoTargetingTypesTargetingOptionsGet
     * @param targetingType Required. The type of targeting option to retrieve. Accepted values are: * &#x60;TARGETING_TYPE_APP_CATEGORY&#x60; * &#x60;TARGETING_TYPE_AGE_RANGE&#x60; * &#x60;TARGETING_TYPE_GENDER&#x60; * &#x60;TARGETING_TYPE_VIDEO_PLAYER_SIZE&#x60; * &#x60;TARGETING_TYPE_USER_REWARDED_CONTENT&#x60; * &#x60;TARGETING_TYPE_PARENTAL_STATUS&#x60; * &#x60;TARGETING_TYPE_CONTENT_INSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_DEVICE_TYPE&#x60; * &#x60;TARGETING_TYPE_BROWSER&#x60; * &#x60;TARGETING_TYPE_HOUSEHOLD_INCOME&#x60; * &#x60;TARGETING_TYPE_ON_SCREEN_POSITION&#x60; * &#x60;TARGETING_TYPE_CARRIER_AND_ISP&#x60; * &#x60;TARGETING_TYPE_OPERATING_SYSTEM&#x60; * &#x60;TARGETING_TYPE_DEVICE_MAKE_MODEL&#x60; * &#x60;TARGETING_TYPE_ENVIRONMENT&#x60; * &#x60;TARGETING_TYPE_CATEGORY&#x60; * &#x60;TARGETING_TYPE_VIEWABILITY&#x60; * &#x60;TARGETING_TYPE_AUTHORIZED_SELLER_STATUS&#x60; * &#x60;TARGETING_TYPE_LANGUAGE&#x60; * &#x60;TARGETING_TYPE_GEO_REGION&#x60; * &#x60;TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_SUB_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_NATIVE_CONTENT_POSITION&#x60; * &#x60;TARGETING_TYPE_OMID&#x60; (required)
     * @param targetingOptionId Required. The ID of the of targeting option to retrieve. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param advertiserId Required. The Advertiser this request is being made in the context of. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call displayvideoTargetingTypesTargetingOptionsGetCall(String targetingType, String targetingOptionId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String advertiserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/targetingTypes/{targetingType}/targetingOptions/{targetingOptionId}"
            .replace("{" + "targetingType" + "}", localVarApiClient.escapeString(targetingType.toString()))
            .replace("{" + "targetingOptionId" + "}", localVarApiClient.escapeString(targetingOptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (advertiserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advertiserId", advertiserId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call displayvideoTargetingTypesTargetingOptionsGetValidateBeforeCall(String targetingType, String targetingOptionId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String advertiserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetingType' is set
        if (targetingType == null) {
            throw new ApiException("Missing the required parameter 'targetingType' when calling displayvideoTargetingTypesTargetingOptionsGet(Async)");
        }

        // verify the required parameter 'targetingOptionId' is set
        if (targetingOptionId == null) {
            throw new ApiException("Missing the required parameter 'targetingOptionId' when calling displayvideoTargetingTypesTargetingOptionsGet(Async)");
        }

        return displayvideoTargetingTypesTargetingOptionsGetCall(targetingType, targetingOptionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, _callback);

    }

    /**
     * 
     * Gets a single targeting option.
     * @param targetingType Required. The type of targeting option to retrieve. Accepted values are: * &#x60;TARGETING_TYPE_APP_CATEGORY&#x60; * &#x60;TARGETING_TYPE_AGE_RANGE&#x60; * &#x60;TARGETING_TYPE_GENDER&#x60; * &#x60;TARGETING_TYPE_VIDEO_PLAYER_SIZE&#x60; * &#x60;TARGETING_TYPE_USER_REWARDED_CONTENT&#x60; * &#x60;TARGETING_TYPE_PARENTAL_STATUS&#x60; * &#x60;TARGETING_TYPE_CONTENT_INSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_DEVICE_TYPE&#x60; * &#x60;TARGETING_TYPE_BROWSER&#x60; * &#x60;TARGETING_TYPE_HOUSEHOLD_INCOME&#x60; * &#x60;TARGETING_TYPE_ON_SCREEN_POSITION&#x60; * &#x60;TARGETING_TYPE_CARRIER_AND_ISP&#x60; * &#x60;TARGETING_TYPE_OPERATING_SYSTEM&#x60; * &#x60;TARGETING_TYPE_DEVICE_MAKE_MODEL&#x60; * &#x60;TARGETING_TYPE_ENVIRONMENT&#x60; * &#x60;TARGETING_TYPE_CATEGORY&#x60; * &#x60;TARGETING_TYPE_VIEWABILITY&#x60; * &#x60;TARGETING_TYPE_AUTHORIZED_SELLER_STATUS&#x60; * &#x60;TARGETING_TYPE_LANGUAGE&#x60; * &#x60;TARGETING_TYPE_GEO_REGION&#x60; * &#x60;TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_SUB_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_NATIVE_CONTENT_POSITION&#x60; * &#x60;TARGETING_TYPE_OMID&#x60; (required)
     * @param targetingOptionId Required. The ID of the of targeting option to retrieve. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param advertiserId Required. The Advertiser this request is being made in the context of. (optional)
     * @return TargetingOption
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public TargetingOption displayvideoTargetingTypesTargetingOptionsGet(String targetingType, String targetingOptionId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String advertiserId) throws ApiException {
        ApiResponse<TargetingOption> localVarResp = displayvideoTargetingTypesTargetingOptionsGetWithHttpInfo(targetingType, targetingOptionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a single targeting option.
     * @param targetingType Required. The type of targeting option to retrieve. Accepted values are: * &#x60;TARGETING_TYPE_APP_CATEGORY&#x60; * &#x60;TARGETING_TYPE_AGE_RANGE&#x60; * &#x60;TARGETING_TYPE_GENDER&#x60; * &#x60;TARGETING_TYPE_VIDEO_PLAYER_SIZE&#x60; * &#x60;TARGETING_TYPE_USER_REWARDED_CONTENT&#x60; * &#x60;TARGETING_TYPE_PARENTAL_STATUS&#x60; * &#x60;TARGETING_TYPE_CONTENT_INSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_DEVICE_TYPE&#x60; * &#x60;TARGETING_TYPE_BROWSER&#x60; * &#x60;TARGETING_TYPE_HOUSEHOLD_INCOME&#x60; * &#x60;TARGETING_TYPE_ON_SCREEN_POSITION&#x60; * &#x60;TARGETING_TYPE_CARRIER_AND_ISP&#x60; * &#x60;TARGETING_TYPE_OPERATING_SYSTEM&#x60; * &#x60;TARGETING_TYPE_DEVICE_MAKE_MODEL&#x60; * &#x60;TARGETING_TYPE_ENVIRONMENT&#x60; * &#x60;TARGETING_TYPE_CATEGORY&#x60; * &#x60;TARGETING_TYPE_VIEWABILITY&#x60; * &#x60;TARGETING_TYPE_AUTHORIZED_SELLER_STATUS&#x60; * &#x60;TARGETING_TYPE_LANGUAGE&#x60; * &#x60;TARGETING_TYPE_GEO_REGION&#x60; * &#x60;TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_SUB_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_NATIVE_CONTENT_POSITION&#x60; * &#x60;TARGETING_TYPE_OMID&#x60; (required)
     * @param targetingOptionId Required. The ID of the of targeting option to retrieve. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param advertiserId Required. The Advertiser this request is being made in the context of. (optional)
     * @return ApiResponse&lt;TargetingOption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetingOption> displayvideoTargetingTypesTargetingOptionsGetWithHttpInfo(String targetingType, String targetingOptionId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String advertiserId) throws ApiException {
        okhttp3.Call localVarCall = displayvideoTargetingTypesTargetingOptionsGetValidateBeforeCall(targetingType, targetingOptionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, null);
        Type localVarReturnType = new TypeToken<TargetingOption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a single targeting option.
     * @param targetingType Required. The type of targeting option to retrieve. Accepted values are: * &#x60;TARGETING_TYPE_APP_CATEGORY&#x60; * &#x60;TARGETING_TYPE_AGE_RANGE&#x60; * &#x60;TARGETING_TYPE_GENDER&#x60; * &#x60;TARGETING_TYPE_VIDEO_PLAYER_SIZE&#x60; * &#x60;TARGETING_TYPE_USER_REWARDED_CONTENT&#x60; * &#x60;TARGETING_TYPE_PARENTAL_STATUS&#x60; * &#x60;TARGETING_TYPE_CONTENT_INSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_DEVICE_TYPE&#x60; * &#x60;TARGETING_TYPE_BROWSER&#x60; * &#x60;TARGETING_TYPE_HOUSEHOLD_INCOME&#x60; * &#x60;TARGETING_TYPE_ON_SCREEN_POSITION&#x60; * &#x60;TARGETING_TYPE_CARRIER_AND_ISP&#x60; * &#x60;TARGETING_TYPE_OPERATING_SYSTEM&#x60; * &#x60;TARGETING_TYPE_DEVICE_MAKE_MODEL&#x60; * &#x60;TARGETING_TYPE_ENVIRONMENT&#x60; * &#x60;TARGETING_TYPE_CATEGORY&#x60; * &#x60;TARGETING_TYPE_VIEWABILITY&#x60; * &#x60;TARGETING_TYPE_AUTHORIZED_SELLER_STATUS&#x60; * &#x60;TARGETING_TYPE_LANGUAGE&#x60; * &#x60;TARGETING_TYPE_GEO_REGION&#x60; * &#x60;TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_SUB_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_NATIVE_CONTENT_POSITION&#x60; * &#x60;TARGETING_TYPE_OMID&#x60; (required)
     * @param targetingOptionId Required. The ID of the of targeting option to retrieve. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param advertiserId Required. The Advertiser this request is being made in the context of. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call displayvideoTargetingTypesTargetingOptionsGetAsync(String targetingType, String targetingOptionId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String advertiserId, final ApiCallback<TargetingOption> _callback) throws ApiException {

        okhttp3.Call localVarCall = displayvideoTargetingTypesTargetingOptionsGetValidateBeforeCall(targetingType, targetingOptionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, _callback);
        Type localVarReturnType = new TypeToken<TargetingOption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for displayvideoTargetingTypesTargetingOptionsList
     * @param targetingType Required. The type of targeting option to be listed. Accepted values are: * &#x60;TARGETING_TYPE_APP_CATEGORY&#x60; * &#x60;TARGETING_TYPE_AGE_RANGE&#x60; * &#x60;TARGETING_TYPE_GENDER&#x60; * &#x60;TARGETING_TYPE_VIDEO_PLAYER_SIZE&#x60; * &#x60;TARGETING_TYPE_USER_REWARDED_CONTENT&#x60; * &#x60;TARGETING_TYPE_PARENTAL_STATUS&#x60; * &#x60;TARGETING_TYPE_CONTENT_INSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_DEVICE_TYPE&#x60; * &#x60;TARGETING_TYPE_BROWSER&#x60; * &#x60;TARGETING_TYPE_HOUSEHOLD_INCOME&#x60; * &#x60;TARGETING_TYPE_ON_SCREEN_POSITION&#x60; * &#x60;TARGETING_TYPE_CARRIER_AND_ISP&#x60; * &#x60;TARGETING_TYPE_OPERATING_SYSTEM&#x60; * &#x60;TARGETING_TYPE_DEVICE_MAKE_MODEL&#x60; * &#x60;TARGETING_TYPE_ENVIRONMENT&#x60; * &#x60;TARGETING_TYPE_CATEGORY&#x60; * &#x60;TARGETING_TYPE_VIEWABILITY&#x60; * &#x60;TARGETING_TYPE_AUTHORIZED_SELLER_STATUS&#x60; * &#x60;TARGETING_TYPE_LANGUAGE&#x60; * &#x60;TARGETING_TYPE_GEO_REGION&#x60; * &#x60;TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_SUB_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_NATIVE_CONTENT_POSITION&#x60; * &#x60;TARGETING_TYPE_OMID&#x60; (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param advertiserId Required. The Advertiser this request is being made in the context of. (optional)
     * @param filter Allows filtering by targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by &#x60;OR&#x60; logical operators. * A restriction has the form of &#x60;{field} {operator} {value}&#x60;. * All fields must use the &#x60;EQUALS (&#x3D;)&#x60; operator. Supported fields: * &#x60;carrierAndIspDetails.type&#x60; * &#x60;geoRegionDetails.geoRegionType&#x60; * &#x60;targetingOptionId&#x60; Examples: * All &#x60;GEO REGION&#x60; targeting options that belong to sub type &#x60;GEO_REGION_TYPE_COUNTRY&#x60; or &#x60;GEO_REGION_TYPE_STATE&#x60;: &#x60;geoRegionDetails.geoRegionType&#x3D;\&quot;GEO_REGION_TYPE_COUNTRY\&quot; OR geoRegionDetails.geoRegionType&#x3D;\&quot;GEO_REGION_TYPE_STATE\&quot;&#x60; * All &#x60;CARRIER AND ISP&#x60; targeting options that belong to sub type &#x60;CARRIER_AND_ISP_TYPE_CARRIER&#x60;: &#x60;carrierAndIspDetails.type&#x3D;\&quot;CARRIER_AND_ISP_TYPE_CARRIER\&quot;&#x60; The length of this field should be no more than 500 characters. Reference our [filter &#x60;LIST&#x60; requests](/display-video/api/guides/how-tos/filters) guide for more information. (optional)
     * @param orderBy Field by which to sort the list. Acceptable values are: * &#x60;targetingOptionId&#x60; (default) The default sorting order is ascending. To specify descending order for a field, a suffix \&quot;desc\&quot; should be added to the field name. Example: &#x60;targetingOptionId desc&#x60;. (optional)
     * @param pageSize Requested page size. Must be between &#x60;1&#x60; and &#x60;200&#x60;. If unspecified will default to &#x60;100&#x60;. Returns error code &#x60;INVALID_ARGUMENT&#x60; if an invalid value is specified. (optional)
     * @param pageToken A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to &#x60;ListTargetingOptions&#x60; method. If not specified, the first page of results will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call displayvideoTargetingTypesTargetingOptionsListCall(String targetingType, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String advertiserId, String filter, String orderBy, Integer pageSize, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/targetingTypes/{targetingType}/targetingOptions"
            .replace("{" + "targetingType" + "}", localVarApiClient.escapeString(targetingType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (advertiserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advertiserId", advertiserId));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call displayvideoTargetingTypesTargetingOptionsListValidateBeforeCall(String targetingType, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String advertiserId, String filter, String orderBy, Integer pageSize, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetingType' is set
        if (targetingType == null) {
            throw new ApiException("Missing the required parameter 'targetingType' when calling displayvideoTargetingTypesTargetingOptionsList(Async)");
        }

        return displayvideoTargetingTypesTargetingOptionsListCall(targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, filter, orderBy, pageSize, pageToken, _callback);

    }

    /**
     * 
     * Lists targeting options of a given type.
     * @param targetingType Required. The type of targeting option to be listed. Accepted values are: * &#x60;TARGETING_TYPE_APP_CATEGORY&#x60; * &#x60;TARGETING_TYPE_AGE_RANGE&#x60; * &#x60;TARGETING_TYPE_GENDER&#x60; * &#x60;TARGETING_TYPE_VIDEO_PLAYER_SIZE&#x60; * &#x60;TARGETING_TYPE_USER_REWARDED_CONTENT&#x60; * &#x60;TARGETING_TYPE_PARENTAL_STATUS&#x60; * &#x60;TARGETING_TYPE_CONTENT_INSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_DEVICE_TYPE&#x60; * &#x60;TARGETING_TYPE_BROWSER&#x60; * &#x60;TARGETING_TYPE_HOUSEHOLD_INCOME&#x60; * &#x60;TARGETING_TYPE_ON_SCREEN_POSITION&#x60; * &#x60;TARGETING_TYPE_CARRIER_AND_ISP&#x60; * &#x60;TARGETING_TYPE_OPERATING_SYSTEM&#x60; * &#x60;TARGETING_TYPE_DEVICE_MAKE_MODEL&#x60; * &#x60;TARGETING_TYPE_ENVIRONMENT&#x60; * &#x60;TARGETING_TYPE_CATEGORY&#x60; * &#x60;TARGETING_TYPE_VIEWABILITY&#x60; * &#x60;TARGETING_TYPE_AUTHORIZED_SELLER_STATUS&#x60; * &#x60;TARGETING_TYPE_LANGUAGE&#x60; * &#x60;TARGETING_TYPE_GEO_REGION&#x60; * &#x60;TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_SUB_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_NATIVE_CONTENT_POSITION&#x60; * &#x60;TARGETING_TYPE_OMID&#x60; (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param advertiserId Required. The Advertiser this request is being made in the context of. (optional)
     * @param filter Allows filtering by targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by &#x60;OR&#x60; logical operators. * A restriction has the form of &#x60;{field} {operator} {value}&#x60;. * All fields must use the &#x60;EQUALS (&#x3D;)&#x60; operator. Supported fields: * &#x60;carrierAndIspDetails.type&#x60; * &#x60;geoRegionDetails.geoRegionType&#x60; * &#x60;targetingOptionId&#x60; Examples: * All &#x60;GEO REGION&#x60; targeting options that belong to sub type &#x60;GEO_REGION_TYPE_COUNTRY&#x60; or &#x60;GEO_REGION_TYPE_STATE&#x60;: &#x60;geoRegionDetails.geoRegionType&#x3D;\&quot;GEO_REGION_TYPE_COUNTRY\&quot; OR geoRegionDetails.geoRegionType&#x3D;\&quot;GEO_REGION_TYPE_STATE\&quot;&#x60; * All &#x60;CARRIER AND ISP&#x60; targeting options that belong to sub type &#x60;CARRIER_AND_ISP_TYPE_CARRIER&#x60;: &#x60;carrierAndIspDetails.type&#x3D;\&quot;CARRIER_AND_ISP_TYPE_CARRIER\&quot;&#x60; The length of this field should be no more than 500 characters. Reference our [filter &#x60;LIST&#x60; requests](/display-video/api/guides/how-tos/filters) guide for more information. (optional)
     * @param orderBy Field by which to sort the list. Acceptable values are: * &#x60;targetingOptionId&#x60; (default) The default sorting order is ascending. To specify descending order for a field, a suffix \&quot;desc\&quot; should be added to the field name. Example: &#x60;targetingOptionId desc&#x60;. (optional)
     * @param pageSize Requested page size. Must be between &#x60;1&#x60; and &#x60;200&#x60;. If unspecified will default to &#x60;100&#x60;. Returns error code &#x60;INVALID_ARGUMENT&#x60; if an invalid value is specified. (optional)
     * @param pageToken A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to &#x60;ListTargetingOptions&#x60; method. If not specified, the first page of results will be returned. (optional)
     * @return ListTargetingOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ListTargetingOptionsResponse displayvideoTargetingTypesTargetingOptionsList(String targetingType, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String advertiserId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListTargetingOptionsResponse> localVarResp = displayvideoTargetingTypesTargetingOptionsListWithHttpInfo(targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, filter, orderBy, pageSize, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists targeting options of a given type.
     * @param targetingType Required. The type of targeting option to be listed. Accepted values are: * &#x60;TARGETING_TYPE_APP_CATEGORY&#x60; * &#x60;TARGETING_TYPE_AGE_RANGE&#x60; * &#x60;TARGETING_TYPE_GENDER&#x60; * &#x60;TARGETING_TYPE_VIDEO_PLAYER_SIZE&#x60; * &#x60;TARGETING_TYPE_USER_REWARDED_CONTENT&#x60; * &#x60;TARGETING_TYPE_PARENTAL_STATUS&#x60; * &#x60;TARGETING_TYPE_CONTENT_INSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_DEVICE_TYPE&#x60; * &#x60;TARGETING_TYPE_BROWSER&#x60; * &#x60;TARGETING_TYPE_HOUSEHOLD_INCOME&#x60; * &#x60;TARGETING_TYPE_ON_SCREEN_POSITION&#x60; * &#x60;TARGETING_TYPE_CARRIER_AND_ISP&#x60; * &#x60;TARGETING_TYPE_OPERATING_SYSTEM&#x60; * &#x60;TARGETING_TYPE_DEVICE_MAKE_MODEL&#x60; * &#x60;TARGETING_TYPE_ENVIRONMENT&#x60; * &#x60;TARGETING_TYPE_CATEGORY&#x60; * &#x60;TARGETING_TYPE_VIEWABILITY&#x60; * &#x60;TARGETING_TYPE_AUTHORIZED_SELLER_STATUS&#x60; * &#x60;TARGETING_TYPE_LANGUAGE&#x60; * &#x60;TARGETING_TYPE_GEO_REGION&#x60; * &#x60;TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_SUB_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_NATIVE_CONTENT_POSITION&#x60; * &#x60;TARGETING_TYPE_OMID&#x60; (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param advertiserId Required. The Advertiser this request is being made in the context of. (optional)
     * @param filter Allows filtering by targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by &#x60;OR&#x60; logical operators. * A restriction has the form of &#x60;{field} {operator} {value}&#x60;. * All fields must use the &#x60;EQUALS (&#x3D;)&#x60; operator. Supported fields: * &#x60;carrierAndIspDetails.type&#x60; * &#x60;geoRegionDetails.geoRegionType&#x60; * &#x60;targetingOptionId&#x60; Examples: * All &#x60;GEO REGION&#x60; targeting options that belong to sub type &#x60;GEO_REGION_TYPE_COUNTRY&#x60; or &#x60;GEO_REGION_TYPE_STATE&#x60;: &#x60;geoRegionDetails.geoRegionType&#x3D;\&quot;GEO_REGION_TYPE_COUNTRY\&quot; OR geoRegionDetails.geoRegionType&#x3D;\&quot;GEO_REGION_TYPE_STATE\&quot;&#x60; * All &#x60;CARRIER AND ISP&#x60; targeting options that belong to sub type &#x60;CARRIER_AND_ISP_TYPE_CARRIER&#x60;: &#x60;carrierAndIspDetails.type&#x3D;\&quot;CARRIER_AND_ISP_TYPE_CARRIER\&quot;&#x60; The length of this field should be no more than 500 characters. Reference our [filter &#x60;LIST&#x60; requests](/display-video/api/guides/how-tos/filters) guide for more information. (optional)
     * @param orderBy Field by which to sort the list. Acceptable values are: * &#x60;targetingOptionId&#x60; (default) The default sorting order is ascending. To specify descending order for a field, a suffix \&quot;desc\&quot; should be added to the field name. Example: &#x60;targetingOptionId desc&#x60;. (optional)
     * @param pageSize Requested page size. Must be between &#x60;1&#x60; and &#x60;200&#x60;. If unspecified will default to &#x60;100&#x60;. Returns error code &#x60;INVALID_ARGUMENT&#x60; if an invalid value is specified. (optional)
     * @param pageToken A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to &#x60;ListTargetingOptions&#x60; method. If not specified, the first page of results will be returned. (optional)
     * @return ApiResponse&lt;ListTargetingOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTargetingOptionsResponse> displayvideoTargetingTypesTargetingOptionsListWithHttpInfo(String targetingType, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String advertiserId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = displayvideoTargetingTypesTargetingOptionsListValidateBeforeCall(targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, filter, orderBy, pageSize, pageToken, null);
        Type localVarReturnType = new TypeToken<ListTargetingOptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists targeting options of a given type.
     * @param targetingType Required. The type of targeting option to be listed. Accepted values are: * &#x60;TARGETING_TYPE_APP_CATEGORY&#x60; * &#x60;TARGETING_TYPE_AGE_RANGE&#x60; * &#x60;TARGETING_TYPE_GENDER&#x60; * &#x60;TARGETING_TYPE_VIDEO_PLAYER_SIZE&#x60; * &#x60;TARGETING_TYPE_USER_REWARDED_CONTENT&#x60; * &#x60;TARGETING_TYPE_PARENTAL_STATUS&#x60; * &#x60;TARGETING_TYPE_CONTENT_INSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION&#x60; * &#x60;TARGETING_TYPE_DEVICE_TYPE&#x60; * &#x60;TARGETING_TYPE_BROWSER&#x60; * &#x60;TARGETING_TYPE_HOUSEHOLD_INCOME&#x60; * &#x60;TARGETING_TYPE_ON_SCREEN_POSITION&#x60; * &#x60;TARGETING_TYPE_CARRIER_AND_ISP&#x60; * &#x60;TARGETING_TYPE_OPERATING_SYSTEM&#x60; * &#x60;TARGETING_TYPE_DEVICE_MAKE_MODEL&#x60; * &#x60;TARGETING_TYPE_ENVIRONMENT&#x60; * &#x60;TARGETING_TYPE_CATEGORY&#x60; * &#x60;TARGETING_TYPE_VIEWABILITY&#x60; * &#x60;TARGETING_TYPE_AUTHORIZED_SELLER_STATUS&#x60; * &#x60;TARGETING_TYPE_LANGUAGE&#x60; * &#x60;TARGETING_TYPE_GEO_REGION&#x60; * &#x60;TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_SUB_EXCHANGE&#x60; * &#x60;TARGETING_TYPE_NATIVE_CONTENT_POSITION&#x60; * &#x60;TARGETING_TYPE_OMID&#x60; (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param advertiserId Required. The Advertiser this request is being made in the context of. (optional)
     * @param filter Allows filtering by targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by &#x60;OR&#x60; logical operators. * A restriction has the form of &#x60;{field} {operator} {value}&#x60;. * All fields must use the &#x60;EQUALS (&#x3D;)&#x60; operator. Supported fields: * &#x60;carrierAndIspDetails.type&#x60; * &#x60;geoRegionDetails.geoRegionType&#x60; * &#x60;targetingOptionId&#x60; Examples: * All &#x60;GEO REGION&#x60; targeting options that belong to sub type &#x60;GEO_REGION_TYPE_COUNTRY&#x60; or &#x60;GEO_REGION_TYPE_STATE&#x60;: &#x60;geoRegionDetails.geoRegionType&#x3D;\&quot;GEO_REGION_TYPE_COUNTRY\&quot; OR geoRegionDetails.geoRegionType&#x3D;\&quot;GEO_REGION_TYPE_STATE\&quot;&#x60; * All &#x60;CARRIER AND ISP&#x60; targeting options that belong to sub type &#x60;CARRIER_AND_ISP_TYPE_CARRIER&#x60;: &#x60;carrierAndIspDetails.type&#x3D;\&quot;CARRIER_AND_ISP_TYPE_CARRIER\&quot;&#x60; The length of this field should be no more than 500 characters. Reference our [filter &#x60;LIST&#x60; requests](/display-video/api/guides/how-tos/filters) guide for more information. (optional)
     * @param orderBy Field by which to sort the list. Acceptable values are: * &#x60;targetingOptionId&#x60; (default) The default sorting order is ascending. To specify descending order for a field, a suffix \&quot;desc\&quot; should be added to the field name. Example: &#x60;targetingOptionId desc&#x60;. (optional)
     * @param pageSize Requested page size. Must be between &#x60;1&#x60; and &#x60;200&#x60;. If unspecified will default to &#x60;100&#x60;. Returns error code &#x60;INVALID_ARGUMENT&#x60; if an invalid value is specified. (optional)
     * @param pageToken A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to &#x60;ListTargetingOptions&#x60; method. If not specified, the first page of results will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call displayvideoTargetingTypesTargetingOptionsListAsync(String targetingType, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String advertiserId, String filter, String orderBy, Integer pageSize, String pageToken, final ApiCallback<ListTargetingOptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = displayvideoTargetingTypesTargetingOptionsListValidateBeforeCall(targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, filter, orderBy, pageSize, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListTargetingOptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for displayvideoTargetingTypesTargetingOptionsSearch
     * @param targetingType Required. The type of targeting options to retrieve. Accepted values are: * &#x60;TARGETING_TYPE_GEO_REGION&#x60; * &#x60;TARGETING_TYPE_POI&#x60; * &#x60;TARGETING_TYPE_BUSINESS_CHAIN&#x60; (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param searchTargetingOptionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call displayvideoTargetingTypesTargetingOptionsSearchCall(String targetingType, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, SearchTargetingOptionsRequest searchTargetingOptionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchTargetingOptionsRequest;

        // create path and map variables
        String localVarPath = "/v2/targetingTypes/{targetingType}/targetingOptions:search"
            .replace("{" + "targetingType" + "}", localVarApiClient.escapeString(targetingType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call displayvideoTargetingTypesTargetingOptionsSearchValidateBeforeCall(String targetingType, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, SearchTargetingOptionsRequest searchTargetingOptionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetingType' is set
        if (targetingType == null) {
            throw new ApiException("Missing the required parameter 'targetingType' when calling displayvideoTargetingTypesTargetingOptionsSearch(Async)");
        }

        return displayvideoTargetingTypesTargetingOptionsSearchCall(targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, searchTargetingOptionsRequest, _callback);

    }

    /**
     * 
     * Searches for targeting options of a given type based on the given search terms.
     * @param targetingType Required. The type of targeting options to retrieve. Accepted values are: * &#x60;TARGETING_TYPE_GEO_REGION&#x60; * &#x60;TARGETING_TYPE_POI&#x60; * &#x60;TARGETING_TYPE_BUSINESS_CHAIN&#x60; (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param searchTargetingOptionsRequest  (optional)
     * @return SearchTargetingOptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SearchTargetingOptionsResponse displayvideoTargetingTypesTargetingOptionsSearch(String targetingType, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, SearchTargetingOptionsRequest searchTargetingOptionsRequest) throws ApiException {
        ApiResponse<SearchTargetingOptionsResponse> localVarResp = displayvideoTargetingTypesTargetingOptionsSearchWithHttpInfo(targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, searchTargetingOptionsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Searches for targeting options of a given type based on the given search terms.
     * @param targetingType Required. The type of targeting options to retrieve. Accepted values are: * &#x60;TARGETING_TYPE_GEO_REGION&#x60; * &#x60;TARGETING_TYPE_POI&#x60; * &#x60;TARGETING_TYPE_BUSINESS_CHAIN&#x60; (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param searchTargetingOptionsRequest  (optional)
     * @return ApiResponse&lt;SearchTargetingOptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchTargetingOptionsResponse> displayvideoTargetingTypesTargetingOptionsSearchWithHttpInfo(String targetingType, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, SearchTargetingOptionsRequest searchTargetingOptionsRequest) throws ApiException {
        okhttp3.Call localVarCall = displayvideoTargetingTypesTargetingOptionsSearchValidateBeforeCall(targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, searchTargetingOptionsRequest, null);
        Type localVarReturnType = new TypeToken<SearchTargetingOptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Searches for targeting options of a given type based on the given search terms.
     * @param targetingType Required. The type of targeting options to retrieve. Accepted values are: * &#x60;TARGETING_TYPE_GEO_REGION&#x60; * &#x60;TARGETING_TYPE_POI&#x60; * &#x60;TARGETING_TYPE_BUSINESS_CHAIN&#x60; (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param searchTargetingOptionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call displayvideoTargetingTypesTargetingOptionsSearchAsync(String targetingType, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, SearchTargetingOptionsRequest searchTargetingOptionsRequest, final ApiCallback<SearchTargetingOptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = displayvideoTargetingTypesTargetingOptionsSearchValidateBeforeCall(targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, searchTargetingOptionsRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchTargetingOptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
