/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImageAsset;
import org.openapitools.client.model.YoutubeVideoDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Common attributes for in-stream, non-skippable and bumper ads.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommonInStreamAttribute {
  public static final String SERIALIZED_NAME_ACTION_BUTTON_LABEL = "actionButtonLabel";
  @SerializedName(SERIALIZED_NAME_ACTION_BUTTON_LABEL)
  private String actionButtonLabel;

  public static final String SERIALIZED_NAME_ACTION_HEADLINE = "actionHeadline";
  @SerializedName(SERIALIZED_NAME_ACTION_HEADLINE)
  private String actionHeadline;

  public static final String SERIALIZED_NAME_COMPANION_BANNER = "companionBanner";
  @SerializedName(SERIALIZED_NAME_COMPANION_BANNER)
  private ImageAsset companionBanner;

  public static final String SERIALIZED_NAME_DISPLAY_URL = "displayUrl";
  @SerializedName(SERIALIZED_NAME_DISPLAY_URL)
  private String displayUrl;

  public static final String SERIALIZED_NAME_FINAL_URL = "finalUrl";
  @SerializedName(SERIALIZED_NAME_FINAL_URL)
  private String finalUrl;

  public static final String SERIALIZED_NAME_TRACKING_URL = "trackingUrl";
  @SerializedName(SERIALIZED_NAME_TRACKING_URL)
  private String trackingUrl;

  public static final String SERIALIZED_NAME_VIDEO = "video";
  @SerializedName(SERIALIZED_NAME_VIDEO)
  private YoutubeVideoDetails video;

  public CommonInStreamAttribute() {
  }

  public CommonInStreamAttribute actionButtonLabel(String actionButtonLabel) {
    this.actionButtonLabel = actionButtonLabel;
    return this;
  }

  /**
   * The text on the call-to-action button.
   * @return actionButtonLabel
   */
  @javax.annotation.Nullable
  public String getActionButtonLabel() {
    return actionButtonLabel;
  }

  public void setActionButtonLabel(String actionButtonLabel) {
    this.actionButtonLabel = actionButtonLabel;
  }


  public CommonInStreamAttribute actionHeadline(String actionHeadline) {
    this.actionHeadline = actionHeadline;
    return this;
  }

  /**
   * The headline of the call-to-action banner.
   * @return actionHeadline
   */
  @javax.annotation.Nullable
  public String getActionHeadline() {
    return actionHeadline;
  }

  public void setActionHeadline(String actionHeadline) {
    this.actionHeadline = actionHeadline;
  }


  public CommonInStreamAttribute companionBanner(ImageAsset companionBanner) {
    this.companionBanner = companionBanner;
    return this;
  }

  /**
   * Get companionBanner
   * @return companionBanner
   */
  @javax.annotation.Nullable
  public ImageAsset getCompanionBanner() {
    return companionBanner;
  }

  public void setCompanionBanner(ImageAsset companionBanner) {
    this.companionBanner = companionBanner;
  }


  public CommonInStreamAttribute displayUrl(String displayUrl) {
    this.displayUrl = displayUrl;
    return this;
  }

  /**
   * The webpage address that appears with the ad.
   * @return displayUrl
   */
  @javax.annotation.Nullable
  public String getDisplayUrl() {
    return displayUrl;
  }

  public void setDisplayUrl(String displayUrl) {
    this.displayUrl = displayUrl;
  }


  public CommonInStreamAttribute finalUrl(String finalUrl) {
    this.finalUrl = finalUrl;
    return this;
  }

  /**
   * The URL address of the webpage that people reach after they click the ad.
   * @return finalUrl
   */
  @javax.annotation.Nullable
  public String getFinalUrl() {
    return finalUrl;
  }

  public void setFinalUrl(String finalUrl) {
    this.finalUrl = finalUrl;
  }


  public CommonInStreamAttribute trackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
    return this;
  }

  /**
   * The URL address loaded in the background for tracking purposes.
   * @return trackingUrl
   */
  @javax.annotation.Nullable
  public String getTrackingUrl() {
    return trackingUrl;
  }

  public void setTrackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
  }


  public CommonInStreamAttribute video(YoutubeVideoDetails video) {
    this.video = video;
    return this;
  }

  /**
   * Get video
   * @return video
   */
  @javax.annotation.Nullable
  public YoutubeVideoDetails getVideo() {
    return video;
  }

  public void setVideo(YoutubeVideoDetails video) {
    this.video = video;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonInStreamAttribute commonInStreamAttribute = (CommonInStreamAttribute) o;
    return Objects.equals(this.actionButtonLabel, commonInStreamAttribute.actionButtonLabel) &&
        Objects.equals(this.actionHeadline, commonInStreamAttribute.actionHeadline) &&
        Objects.equals(this.companionBanner, commonInStreamAttribute.companionBanner) &&
        Objects.equals(this.displayUrl, commonInStreamAttribute.displayUrl) &&
        Objects.equals(this.finalUrl, commonInStreamAttribute.finalUrl) &&
        Objects.equals(this.trackingUrl, commonInStreamAttribute.trackingUrl) &&
        Objects.equals(this.video, commonInStreamAttribute.video);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionButtonLabel, actionHeadline, companionBanner, displayUrl, finalUrl, trackingUrl, video);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonInStreamAttribute {\n");
    sb.append("    actionButtonLabel: ").append(toIndentedString(actionButtonLabel)).append("\n");
    sb.append("    actionHeadline: ").append(toIndentedString(actionHeadline)).append("\n");
    sb.append("    companionBanner: ").append(toIndentedString(companionBanner)).append("\n");
    sb.append("    displayUrl: ").append(toIndentedString(displayUrl)).append("\n");
    sb.append("    finalUrl: ").append(toIndentedString(finalUrl)).append("\n");
    sb.append("    trackingUrl: ").append(toIndentedString(trackingUrl)).append("\n");
    sb.append("    video: ").append(toIndentedString(video)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionButtonLabel");
    openapiFields.add("actionHeadline");
    openapiFields.add("companionBanner");
    openapiFields.add("displayUrl");
    openapiFields.add("finalUrl");
    openapiFields.add("trackingUrl");
    openapiFields.add("video");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommonInStreamAttribute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommonInStreamAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommonInStreamAttribute is not found in the empty JSON string", CommonInStreamAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommonInStreamAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommonInStreamAttribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionButtonLabel") != null && !jsonObj.get("actionButtonLabel").isJsonNull()) && !jsonObj.get("actionButtonLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionButtonLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionButtonLabel").toString()));
      }
      if ((jsonObj.get("actionHeadline") != null && !jsonObj.get("actionHeadline").isJsonNull()) && !jsonObj.get("actionHeadline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionHeadline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionHeadline").toString()));
      }
      // validate the optional field `companionBanner`
      if (jsonObj.get("companionBanner") != null && !jsonObj.get("companionBanner").isJsonNull()) {
        ImageAsset.validateJsonElement(jsonObj.get("companionBanner"));
      }
      if ((jsonObj.get("displayUrl") != null && !jsonObj.get("displayUrl").isJsonNull()) && !jsonObj.get("displayUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayUrl").toString()));
      }
      if ((jsonObj.get("finalUrl") != null && !jsonObj.get("finalUrl").isJsonNull()) && !jsonObj.get("finalUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finalUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finalUrl").toString()));
      }
      if ((jsonObj.get("trackingUrl") != null && !jsonObj.get("trackingUrl").isJsonNull()) && !jsonObj.get("trackingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingUrl").toString()));
      }
      // validate the optional field `video`
      if (jsonObj.get("video") != null && !jsonObj.get("video").isJsonNull()) {
        YoutubeVideoDetails.validateJsonElement(jsonObj.get("video"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommonInStreamAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommonInStreamAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommonInStreamAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommonInStreamAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<CommonInStreamAttribute>() {
           @Override
           public void write(JsonWriter out, CommonInStreamAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommonInStreamAttribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommonInStreamAttribute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommonInStreamAttribute
   * @throws IOException if the JSON string is invalid with respect to CommonInStreamAttribute
   */
  public static CommonInStreamAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommonInStreamAttribute.class);
  }

  /**
   * Convert an instance of CommonInStreamAttribute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

