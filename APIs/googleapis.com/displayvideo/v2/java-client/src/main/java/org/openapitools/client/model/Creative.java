/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssetAssociation;
import org.openapitools.client.model.AudioVideoOffset;
import org.openapitools.client.model.CmTrackingAd;
import org.openapitools.client.model.CounterEvent;
import org.openapitools.client.model.Dimensions;
import org.openapitools.client.model.ExitEvent;
import org.openapitools.client.model.ObaIcon;
import org.openapitools.client.model.ReviewStatusInfo;
import org.openapitools.client.model.ThirdPartyUrl;
import org.openapitools.client.model.TimerEvent;
import org.openapitools.client.model.Transcode;
import org.openapitools.client.model.UniversalAdId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single Creative.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Creative {
  public static final String SERIALIZED_NAME_ADDITIONAL_DIMENSIONS = "additionalDimensions";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DIMENSIONS)
  private List<Dimensions> additionalDimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_APPENDED_TAG = "appendedTag";
  @SerializedName(SERIALIZED_NAME_APPENDED_TAG)
  private String appendedTag;

  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private List<AssetAssociation> assets = new ArrayList<>();

  public static final String SERIALIZED_NAME_CM_PLACEMENT_ID = "cmPlacementId";
  @SerializedName(SERIALIZED_NAME_CM_PLACEMENT_ID)
  private String cmPlacementId;

  public static final String SERIALIZED_NAME_CM_TRACKING_AD = "cmTrackingAd";
  @SerializedName(SERIALIZED_NAME_CM_TRACKING_AD)
  private CmTrackingAd cmTrackingAd;

  public static final String SERIALIZED_NAME_COMPANION_CREATIVE_IDS = "companionCreativeIds";
  @SerializedName(SERIALIZED_NAME_COMPANION_CREATIVE_IDS)
  private List<String> companionCreativeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTER_EVENTS = "counterEvents";
  @SerializedName(SERIALIZED_NAME_COUNTER_EVENTS)
  private List<CounterEvent> counterEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  /**
   * Gets or Sets creativeAttributes
   */
  @JsonAdapter(CreativeAttributesEnum.Adapter.class)
  public enum CreativeAttributesEnum {
    UNSPECIFIED("CREATIVE_ATTRIBUTE_UNSPECIFIED"),
    
    VAST("CREATIVE_ATTRIBUTE_VAST"),
    
    VPAID_LINEAR("CREATIVE_ATTRIBUTE_VPAID_LINEAR"),
    
    VPAID_NON_LINEAR("CREATIVE_ATTRIBUTE_VPAID_NON_LINEAR");

    private String value;

    CreativeAttributesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreativeAttributesEnum fromValue(String value) {
      for (CreativeAttributesEnum b : CreativeAttributesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreativeAttributesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreativeAttributesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreativeAttributesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreativeAttributesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreativeAttributesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATIVE_ATTRIBUTES = "creativeAttributes";
  @SerializedName(SERIALIZED_NAME_CREATIVE_ATTRIBUTES)
  private List<CreativeAttributesEnum> creativeAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATIVE_ID = "creativeId";
  @SerializedName(SERIALIZED_NAME_CREATIVE_ID)
  private String creativeId;

  /**
   * Required. Immutable. The type of the creative.
   */
  @JsonAdapter(CreativeTypeEnum.Adapter.class)
  public enum CreativeTypeEnum {
    UNSPECIFIED("CREATIVE_TYPE_UNSPECIFIED"),
    
    STANDARD("CREATIVE_TYPE_STANDARD"),
    
    EXPANDABLE("CREATIVE_TYPE_EXPANDABLE"),
    
    VIDEO("CREATIVE_TYPE_VIDEO"),
    
    NATIVE("CREATIVE_TYPE_NATIVE"),
    
    TEMPLATED_APP_INSTALL("CREATIVE_TYPE_TEMPLATED_APP_INSTALL"),
    
    NATIVE_SITE_SQUARE("CREATIVE_TYPE_NATIVE_SITE_SQUARE"),
    
    TEMPLATED_APP_INSTALL_INTERSTITIAL("CREATIVE_TYPE_TEMPLATED_APP_INSTALL_INTERSTITIAL"),
    
    LIGHTBOX("CREATIVE_TYPE_LIGHTBOX"),
    
    NATIVE_APP_INSTALL("CREATIVE_TYPE_NATIVE_APP_INSTALL"),
    
    NATIVE_APP_INSTALL_SQUARE("CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE"),
    
    AUDIO("CREATIVE_TYPE_AUDIO"),
    
    PUBLISHER_HOSTED("CREATIVE_TYPE_PUBLISHER_HOSTED"),
    
    NATIVE_VIDEO("CREATIVE_TYPE_NATIVE_VIDEO"),
    
    TEMPLATED_APP_INSTALL_VIDEO("CREATIVE_TYPE_TEMPLATED_APP_INSTALL_VIDEO");

    private String value;

    CreativeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreativeTypeEnum fromValue(String value) {
      for (CreativeTypeEnum b : CreativeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreativeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreativeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreativeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreativeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreativeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATIVE_TYPE = "creativeType";
  @SerializedName(SERIALIZED_NAME_CREATIVE_TYPE)
  private CreativeTypeEnum creativeType;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Dimensions dimensions;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DYNAMIC = "dynamic";
  @SerializedName(SERIALIZED_NAME_DYNAMIC)
  private Boolean dynamic;

  /**
   * Required. Controls whether or not the creative can serve. Accepted values are: * &#x60;ENTITY_STATUS_ACTIVE&#x60; * &#x60;ENTITY_STATUS_ARCHIVED&#x60; * &#x60;ENTITY_STATUS_PAUSED&#x60;
   */
  @JsonAdapter(EntityStatusEnum.Adapter.class)
  public enum EntityStatusEnum {
    UNSPECIFIED("ENTITY_STATUS_UNSPECIFIED"),
    
    ACTIVE("ENTITY_STATUS_ACTIVE"),
    
    ARCHIVED("ENTITY_STATUS_ARCHIVED"),
    
    DRAFT("ENTITY_STATUS_DRAFT"),
    
    PAUSED("ENTITY_STATUS_PAUSED"),
    
    SCHEDULED_FOR_DELETION("ENTITY_STATUS_SCHEDULED_FOR_DELETION");

    private String value;

    EntityStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityStatusEnum fromValue(String value) {
      for (EntityStatusEnum b : EntityStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_STATUS = "entityStatus";
  @SerializedName(SERIALIZED_NAME_ENTITY_STATUS)
  private EntityStatusEnum entityStatus;

  public static final String SERIALIZED_NAME_EXIT_EVENTS = "exitEvents";
  @SerializedName(SERIALIZED_NAME_EXIT_EVENTS)
  private List<ExitEvent> exitEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPAND_ON_HOVER = "expandOnHover";
  @SerializedName(SERIALIZED_NAME_EXPAND_ON_HOVER)
  private Boolean expandOnHover;

  /**
   * Optional. Specifies the expanding direction of the creative. Required and only valid for third-party expandable creatives. Third-party expandable creatives are creatives with following hosting source: * &#x60;HOSTING_SOURCE_THIRD_PARTY&#x60; combined with following creative_type: * &#x60;CREATIVE_TYPE_EXPANDABLE&#x60;
   */
  @JsonAdapter(ExpandingDirectionEnum.Adapter.class)
  public enum ExpandingDirectionEnum {
    UNSPECIFIED("EXPANDING_DIRECTION_UNSPECIFIED"),
    
    NONE("EXPANDING_DIRECTION_NONE"),
    
    UP("EXPANDING_DIRECTION_UP"),
    
    DOWN("EXPANDING_DIRECTION_DOWN"),
    
    LEFT("EXPANDING_DIRECTION_LEFT"),
    
    RIGHT("EXPANDING_DIRECTION_RIGHT"),
    
    UP_AND_LEFT("EXPANDING_DIRECTION_UP_AND_LEFT"),
    
    UP_AND_RIGHT("EXPANDING_DIRECTION_UP_AND_RIGHT"),
    
    DOWN_AND_LEFT("EXPANDING_DIRECTION_DOWN_AND_LEFT"),
    
    DOWN_AND_RIGHT("EXPANDING_DIRECTION_DOWN_AND_RIGHT"),
    
    UP_OR_DOWN("EXPANDING_DIRECTION_UP_OR_DOWN"),
    
    LEFT_OR_RIGHT("EXPANDING_DIRECTION_LEFT_OR_RIGHT"),
    
    ANY_DIAGONAL("EXPANDING_DIRECTION_ANY_DIAGONAL");

    private String value;

    ExpandingDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpandingDirectionEnum fromValue(String value) {
      for (ExpandingDirectionEnum b : ExpandingDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpandingDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpandingDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpandingDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpandingDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpandingDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPANDING_DIRECTION = "expandingDirection";
  @SerializedName(SERIALIZED_NAME_EXPANDING_DIRECTION)
  private ExpandingDirectionEnum expandingDirection;

  /**
   * Required. Indicates where the creative is hosted.
   */
  @JsonAdapter(HostingSourceEnum.Adapter.class)
  public enum HostingSourceEnum {
    UNSPECIFIED("HOSTING_SOURCE_UNSPECIFIED"),
    
    CM("HOSTING_SOURCE_CM"),
    
    THIRD_PARTY("HOSTING_SOURCE_THIRD_PARTY"),
    
    HOSTED("HOSTING_SOURCE_HOSTED"),
    
    RICH_MEDIA("HOSTING_SOURCE_RICH_MEDIA");

    private String value;

    HostingSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HostingSourceEnum fromValue(String value) {
      for (HostingSourceEnum b : HostingSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HostingSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HostingSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HostingSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HostingSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HostingSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOSTING_SOURCE = "hostingSource";
  @SerializedName(SERIALIZED_NAME_HOSTING_SOURCE)
  private HostingSourceEnum hostingSource;

  public static final String SERIALIZED_NAME_HTML5_VIDEO = "html5Video";
  @SerializedName(SERIALIZED_NAME_HTML5_VIDEO)
  private Boolean html5Video;

  public static final String SERIALIZED_NAME_IAS_CAMPAIGN_MONITORING = "iasCampaignMonitoring";
  @SerializedName(SERIALIZED_NAME_IAS_CAMPAIGN_MONITORING)
  private Boolean iasCampaignMonitoring;

  public static final String SERIALIZED_NAME_INTEGRATION_CODE = "integrationCode";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_CODE)
  private String integrationCode;

  public static final String SERIALIZED_NAME_JS_TRACKER_URL = "jsTrackerUrl";
  @SerializedName(SERIALIZED_NAME_JS_TRACKER_URL)
  private String jsTrackerUrl;

  public static final String SERIALIZED_NAME_LINE_ITEM_IDS = "lineItemIds";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_IDS)
  private List<String> lineItemIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIA_DURATION = "mediaDuration";
  @SerializedName(SERIALIZED_NAME_MEDIA_DURATION)
  private String mediaDuration;

  public static final String SERIALIZED_NAME_MP3_AUDIO = "mp3Audio";
  @SerializedName(SERIALIZED_NAME_MP3_AUDIO)
  private Boolean mp3Audio;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_OBA_ICON = "obaIcon";
  @SerializedName(SERIALIZED_NAME_OBA_ICON)
  private ObaIcon obaIcon;

  public static final String SERIALIZED_NAME_OGG_AUDIO = "oggAudio";
  @SerializedName(SERIALIZED_NAME_OGG_AUDIO)
  private Boolean oggAudio;

  public static final String SERIALIZED_NAME_PROGRESS_OFFSET = "progressOffset";
  @SerializedName(SERIALIZED_NAME_PROGRESS_OFFSET)
  private AudioVideoOffset progressOffset;

  public static final String SERIALIZED_NAME_REQUIRE_HTML5 = "requireHtml5";
  @SerializedName(SERIALIZED_NAME_REQUIRE_HTML5)
  private Boolean requireHtml5;

  public static final String SERIALIZED_NAME_REQUIRE_MRAID = "requireMraid";
  @SerializedName(SERIALIZED_NAME_REQUIRE_MRAID)
  private Boolean requireMraid;

  public static final String SERIALIZED_NAME_REQUIRE_PING_FOR_ATTRIBUTION = "requirePingForAttribution";
  @SerializedName(SERIALIZED_NAME_REQUIRE_PING_FOR_ATTRIBUTION)
  private Boolean requirePingForAttribution;

  public static final String SERIALIZED_NAME_REVIEW_STATUS = "reviewStatus";
  @SerializedName(SERIALIZED_NAME_REVIEW_STATUS)
  private ReviewStatusInfo reviewStatus;

  public static final String SERIALIZED_NAME_SKIP_OFFSET = "skipOffset";
  @SerializedName(SERIALIZED_NAME_SKIP_OFFSET)
  private AudioVideoOffset skipOffset;

  public static final String SERIALIZED_NAME_SKIPPABLE = "skippable";
  @SerializedName(SERIALIZED_NAME_SKIPPABLE)
  private Boolean skippable;

  public static final String SERIALIZED_NAME_THIRD_PARTY_TAG = "thirdPartyTag";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_TAG)
  private String thirdPartyTag;

  public static final String SERIALIZED_NAME_THIRD_PARTY_URLS = "thirdPartyUrls";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_URLS)
  private List<ThirdPartyUrl> thirdPartyUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMER_EVENTS = "timerEvents";
  @SerializedName(SERIALIZED_NAME_TIMER_EVENTS)
  private List<TimerEvent> timerEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACKER_URLS = "trackerUrls";
  @SerializedName(SERIALIZED_NAME_TRACKER_URLS)
  private List<String> trackerUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSCODES = "transcodes";
  @SerializedName(SERIALIZED_NAME_TRANSCODES)
  private List<Transcode> transcodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIVERSAL_AD_ID = "universalAdId";
  @SerializedName(SERIALIZED_NAME_UNIVERSAL_AD_ID)
  private UniversalAdId universalAdId;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VAST_TAG_URL = "vastTagUrl";
  @SerializedName(SERIALIZED_NAME_VAST_TAG_URL)
  private String vastTagUrl;

  public static final String SERIALIZED_NAME_VPAID = "vpaid";
  @SerializedName(SERIALIZED_NAME_VPAID)
  private Boolean vpaid;

  public Creative() {
  }

  public Creative(
     String advertiserId, 
     String cmPlacementId, 
     String createTime, 
     List<CreativeAttributesEnum> creativeAttributes, 
     String creativeId, 
     Boolean dynamic, 
     Boolean html5Video, 
     List<String> lineItemIds, 
     String mediaDuration, 
     Boolean mp3Audio, 
     String name, 
     Boolean oggAudio, 
     List<Transcode> transcodes, 
     String updateTime, 
     Boolean vpaid
  ) {
    this();
    this.advertiserId = advertiserId;
    this.cmPlacementId = cmPlacementId;
    this.createTime = createTime;
    this.creativeAttributes = creativeAttributes;
    this.creativeId = creativeId;
    this.dynamic = dynamic;
    this.html5Video = html5Video;
    this.lineItemIds = lineItemIds;
    this.mediaDuration = mediaDuration;
    this.mp3Audio = mp3Audio;
    this.name = name;
    this.oggAudio = oggAudio;
    this.transcodes = transcodes;
    this.updateTime = updateTime;
    this.vpaid = vpaid;
  }

  public Creative additionalDimensions(List<Dimensions> additionalDimensions) {
    this.additionalDimensions = additionalDimensions;
    return this;
  }

  public Creative addAdditionalDimensionsItem(Dimensions additionalDimensionsItem) {
    if (this.additionalDimensions == null) {
      this.additionalDimensions = new ArrayList<>();
    }
    this.additionalDimensions.add(additionalDimensionsItem);
    return this;
  }

  /**
   * Additional dimensions. Applicable when creative_type is one of: * &#x60;CREATIVE_TYPE_STANDARD&#x60; * &#x60;CREATIVE_TYPE_EXPANDABLE&#x60; * &#x60;CREATIVE_TYPE_NATIVE&#x60; * &#x60;CREATIVE_TYPE_NATIVE_SITE_SQUARE&#x60; * &#x60;CREATIVE_TYPE_LIGHTBOX&#x60; * &#x60;CREATIVE_TYPE_PUBLISHER_HOSTED&#x60; If this field is specified, width_pixels and height_pixels are both required and must be greater than or equal to 0.
   * @return additionalDimensions
   */
  @javax.annotation.Nullable
  public List<Dimensions> getAdditionalDimensions() {
    return additionalDimensions;
  }

  public void setAdditionalDimensions(List<Dimensions> additionalDimensions) {
    this.additionalDimensions = additionalDimensions;
  }


  /**
   * Output only. The unique ID of the advertiser the creative belongs to.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public String getAdvertiserId() {
    return advertiserId;
  }



  public Creative appendedTag(String appendedTag) {
    this.appendedTag = appendedTag;
    return this;
  }

  /**
   * Third-party HTML tracking tag to be appended to the creative tag.
   * @return appendedTag
   */
  @javax.annotation.Nullable
  public String getAppendedTag() {
    return appendedTag;
  }

  public void setAppendedTag(String appendedTag) {
    this.appendedTag = appendedTag;
  }


  public Creative assets(List<AssetAssociation> assets) {
    this.assets = assets;
    return this;
  }

  public Creative addAssetsItem(AssetAssociation assetsItem) {
    if (this.assets == null) {
      this.assets = new ArrayList<>();
    }
    this.assets.add(assetsItem);
    return this;
  }

  /**
   * Required. Assets associated to this creative.
   * @return assets
   */
  @javax.annotation.Nullable
  public List<AssetAssociation> getAssets() {
    return assets;
  }

  public void setAssets(List<AssetAssociation> assets) {
    this.assets = assets;
  }


  /**
   * Output only. The unique ID of the Campaign Manager 360 placement associated with the creative. This field is only applicable for creatives that are synced from Campaign Manager.
   * @return cmPlacementId
   */
  @javax.annotation.Nullable
  public String getCmPlacementId() {
    return cmPlacementId;
  }



  public Creative cmTrackingAd(CmTrackingAd cmTrackingAd) {
    this.cmTrackingAd = cmTrackingAd;
    return this;
  }

  /**
   * Get cmTrackingAd
   * @return cmTrackingAd
   */
  @javax.annotation.Nullable
  public CmTrackingAd getCmTrackingAd() {
    return cmTrackingAd;
  }

  public void setCmTrackingAd(CmTrackingAd cmTrackingAd) {
    this.cmTrackingAd = cmTrackingAd;
  }


  public Creative companionCreativeIds(List<String> companionCreativeIds) {
    this.companionCreativeIds = companionCreativeIds;
    return this;
  }

  public Creative addCompanionCreativeIdsItem(String companionCreativeIdsItem) {
    if (this.companionCreativeIds == null) {
      this.companionCreativeIds = new ArrayList<>();
    }
    this.companionCreativeIds.add(companionCreativeIdsItem);
    return this;
  }

  /**
   * The IDs of companion creatives for a video creative. You can assign existing display creatives (with image or HTML5 assets) to serve surrounding the publisher&#39;s video player. Companions display around the video player while the video is playing and remain after the video has completed. Creatives contain additional dimensions can not be companion creatives. This field is only supported for following creative_type: * &#x60;CREATIVE_TYPE_AUDIO&#x60; * &#x60;CREATIVE_TYPE_VIDEO&#x60;
   * @return companionCreativeIds
   */
  @javax.annotation.Nullable
  public List<String> getCompanionCreativeIds() {
    return companionCreativeIds;
  }

  public void setCompanionCreativeIds(List<String> companionCreativeIds) {
    this.companionCreativeIds = companionCreativeIds;
  }


  public Creative counterEvents(List<CounterEvent> counterEvents) {
    this.counterEvents = counterEvents;
    return this;
  }

  public Creative addCounterEventsItem(CounterEvent counterEventsItem) {
    if (this.counterEvents == null) {
      this.counterEvents = new ArrayList<>();
    }
    this.counterEvents.add(counterEventsItem);
    return this;
  }

  /**
   * Counter events for a rich media creative. Counters track the number of times that a user interacts with any part of a rich media creative in a specified way (mouse-overs, mouse-outs, clicks, taps, data loading, keyboard entries, etc.). Any event that can be captured in the creative can be recorded as a counter. Leave it empty or unset for creatives containing image assets only.
   * @return counterEvents
   */
  @javax.annotation.Nullable
  public List<CounterEvent> getCounterEvents() {
    return counterEvents;
  }

  public void setCounterEvents(List<CounterEvent> counterEvents) {
    this.counterEvents = counterEvents;
  }


  /**
   * Output only. The timestamp when the creative was created. Assigned by the system.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. A list of attributes of the creative that is generated by the system.
   * @return creativeAttributes
   */
  @javax.annotation.Nullable
  public List<CreativeAttributesEnum> getCreativeAttributes() {
    return creativeAttributes;
  }



  /**
   * Output only. The unique ID of the creative. Assigned by the system.
   * @return creativeId
   */
  @javax.annotation.Nullable
  public String getCreativeId() {
    return creativeId;
  }



  public Creative creativeType(CreativeTypeEnum creativeType) {
    this.creativeType = creativeType;
    return this;
  }

  /**
   * Required. Immutable. The type of the creative.
   * @return creativeType
   */
  @javax.annotation.Nullable
  public CreativeTypeEnum getCreativeType() {
    return creativeType;
  }

  public void setCreativeType(CreativeTypeEnum creativeType) {
    this.creativeType = creativeType;
  }


  public Creative dimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public Dimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
  }


  public Creative displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The display name of the creative. Must be UTF-8 encoded with a maximum size of 240 bytes.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. Indicates whether the creative is dynamic.
   * @return dynamic
   */
  @javax.annotation.Nullable
  public Boolean getDynamic() {
    return dynamic;
  }



  public Creative entityStatus(EntityStatusEnum entityStatus) {
    this.entityStatus = entityStatus;
    return this;
  }

  /**
   * Required. Controls whether or not the creative can serve. Accepted values are: * &#x60;ENTITY_STATUS_ACTIVE&#x60; * &#x60;ENTITY_STATUS_ARCHIVED&#x60; * &#x60;ENTITY_STATUS_PAUSED&#x60;
   * @return entityStatus
   */
  @javax.annotation.Nullable
  public EntityStatusEnum getEntityStatus() {
    return entityStatus;
  }

  public void setEntityStatus(EntityStatusEnum entityStatus) {
    this.entityStatus = entityStatus;
  }


  public Creative exitEvents(List<ExitEvent> exitEvents) {
    this.exitEvents = exitEvents;
    return this;
  }

  public Creative addExitEventsItem(ExitEvent exitEventsItem) {
    if (this.exitEvents == null) {
      this.exitEvents = new ArrayList<>();
    }
    this.exitEvents.add(exitEventsItem);
    return this;
  }

  /**
   * Required. Exit events for this creative. An exit (also known as a click tag) is any area in your creative that someone can click or tap to open an advertiser&#39;s landing page. Every creative must include at least one exit. You can add an exit to your creative in any of the following ways: * Use Google Web Designer&#39;s tap area. * Define a JavaScript variable called \&quot;clickTag\&quot;. * Use the Enabler (Enabler.exit()) to track exits in rich media formats.
   * @return exitEvents
   */
  @javax.annotation.Nullable
  public List<ExitEvent> getExitEvents() {
    return exitEvents;
  }

  public void setExitEvents(List<ExitEvent> exitEvents) {
    this.exitEvents = exitEvents;
  }


  public Creative expandOnHover(Boolean expandOnHover) {
    this.expandOnHover = expandOnHover;
    return this;
  }

  /**
   * Optional. Indicates the creative will automatically expand on hover. Optional and only valid for third-party expandable creatives. Third-party expandable creatives are creatives with following hosting source: * &#x60;HOSTING_SOURCE_THIRD_PARTY&#x60; combined with following creative_type: * &#x60;CREATIVE_TYPE_EXPANDABLE&#x60;
   * @return expandOnHover
   */
  @javax.annotation.Nullable
  public Boolean getExpandOnHover() {
    return expandOnHover;
  }

  public void setExpandOnHover(Boolean expandOnHover) {
    this.expandOnHover = expandOnHover;
  }


  public Creative expandingDirection(ExpandingDirectionEnum expandingDirection) {
    this.expandingDirection = expandingDirection;
    return this;
  }

  /**
   * Optional. Specifies the expanding direction of the creative. Required and only valid for third-party expandable creatives. Third-party expandable creatives are creatives with following hosting source: * &#x60;HOSTING_SOURCE_THIRD_PARTY&#x60; combined with following creative_type: * &#x60;CREATIVE_TYPE_EXPANDABLE&#x60;
   * @return expandingDirection
   */
  @javax.annotation.Nullable
  public ExpandingDirectionEnum getExpandingDirection() {
    return expandingDirection;
  }

  public void setExpandingDirection(ExpandingDirectionEnum expandingDirection) {
    this.expandingDirection = expandingDirection;
  }


  public Creative hostingSource(HostingSourceEnum hostingSource) {
    this.hostingSource = hostingSource;
    return this;
  }

  /**
   * Required. Indicates where the creative is hosted.
   * @return hostingSource
   */
  @javax.annotation.Nullable
  public HostingSourceEnum getHostingSource() {
    return hostingSource;
  }

  public void setHostingSource(HostingSourceEnum hostingSource) {
    this.hostingSource = hostingSource;
  }


  /**
   * Output only. Indicates the third-party VAST tag creative requires HTML5 Video support. Output only and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following hosting_source: * &#x60;HOSTING_SOURCE_THIRD_PARTY&#x60; combined with following creative_type: * &#x60;CREATIVE_TYPE_VIDEO&#x60;
   * @return html5Video
   */
  @javax.annotation.Nullable
  public Boolean getHtml5Video() {
    return html5Video;
  }



  public Creative iasCampaignMonitoring(Boolean iasCampaignMonitoring) {
    this.iasCampaignMonitoring = iasCampaignMonitoring;
    return this;
  }

  /**
   * Indicates whether Integral Ad Science (IAS) campaign monitoring is enabled. To enable this for the creative, make sure the Advertiser.creative_config.ias_client_id has been set to your IAS client ID.
   * @return iasCampaignMonitoring
   */
  @javax.annotation.Nullable
  public Boolean getIasCampaignMonitoring() {
    return iasCampaignMonitoring;
  }

  public void setIasCampaignMonitoring(Boolean iasCampaignMonitoring) {
    this.iasCampaignMonitoring = iasCampaignMonitoring;
  }


  public Creative integrationCode(String integrationCode) {
    this.integrationCode = integrationCode;
    return this;
  }

  /**
   * ID information used to link this creative to an external system. Must be UTF-8 encoded with a length of no more than 10,000 characters.
   * @return integrationCode
   */
  @javax.annotation.Nullable
  public String getIntegrationCode() {
    return integrationCode;
  }

  public void setIntegrationCode(String integrationCode) {
    this.integrationCode = integrationCode;
  }


  public Creative jsTrackerUrl(String jsTrackerUrl) {
    this.jsTrackerUrl = jsTrackerUrl;
    return this;
  }

  /**
   * JavaScript measurement URL from supported third-party verification providers (ComScore, DoubleVerify, IAS, Moat). HTML script tags are not supported. This field is only writeable in following creative_type: * &#x60;CREATIVE_TYPE_NATIVE&#x60; * &#x60;CREATIVE_TYPE_NATIVE_SITE_SQUARE&#x60; * &#x60;CREATIVE_TYPE_NATIVE_VIDEO&#x60;
   * @return jsTrackerUrl
   */
  @javax.annotation.Nullable
  public String getJsTrackerUrl() {
    return jsTrackerUrl;
  }

  public void setJsTrackerUrl(String jsTrackerUrl) {
    this.jsTrackerUrl = jsTrackerUrl;
  }


  /**
   * Output only. The IDs of the line items this creative is associated with. To associate a creative to a line item, use LineItem.creative_ids instead.
   * @return lineItemIds
   */
  @javax.annotation.Nullable
  public List<String> getLineItemIds() {
    return lineItemIds;
  }



  /**
   * Output only. Media duration of the creative. Applicable when creative_type is one of: * &#x60;CREATIVE_TYPE_VIDEO&#x60; * &#x60;CREATIVE_TYPE_AUDIO&#x60; * &#x60;CREATIVE_TYPE_NATIVE_VIDEO&#x60; * &#x60;CREATIVE_TYPE_PUBLISHER_HOSTED&#x60;
   * @return mediaDuration
   */
  @javax.annotation.Nullable
  public String getMediaDuration() {
    return mediaDuration;
  }



  /**
   * Output only. Indicates the third-party audio creative supports MP3. Output only and only valid for third-party audio creatives. Third-party audio creatives are creatives with following hosting_source: * &#x60;HOSTING_SOURCE_THIRD_PARTY&#x60; combined with following creative_type: * &#x60;CREATIVE_TYPE_AUDIO&#x60;
   * @return mp3Audio
   */
  @javax.annotation.Nullable
  public Boolean getMp3Audio() {
    return mp3Audio;
  }



  /**
   * Output only. The resource name of the creative.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Creative notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * User notes for this creative. Must be UTF-8 encoded with a length of no more than 20,000 characters.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Creative obaIcon(ObaIcon obaIcon) {
    this.obaIcon = obaIcon;
    return this;
  }

  /**
   * Get obaIcon
   * @return obaIcon
   */
  @javax.annotation.Nullable
  public ObaIcon getObaIcon() {
    return obaIcon;
  }

  public void setObaIcon(ObaIcon obaIcon) {
    this.obaIcon = obaIcon;
  }


  /**
   * Output only. Indicates the third-party audio creative supports OGG. Output only and only valid for third-party audio creatives. Third-party audio creatives are creatives with following hosting_source: * &#x60;HOSTING_SOURCE_THIRD_PARTY&#x60; combined with following creative_type: * &#x60;CREATIVE_TYPE_AUDIO&#x60;
   * @return oggAudio
   */
  @javax.annotation.Nullable
  public Boolean getOggAudio() {
    return oggAudio;
  }



  public Creative progressOffset(AudioVideoOffset progressOffset) {
    this.progressOffset = progressOffset;
    return this;
  }

  /**
   * Get progressOffset
   * @return progressOffset
   */
  @javax.annotation.Nullable
  public AudioVideoOffset getProgressOffset() {
    return progressOffset;
  }

  public void setProgressOffset(AudioVideoOffset progressOffset) {
    this.progressOffset = progressOffset;
  }


  public Creative requireHtml5(Boolean requireHtml5) {
    this.requireHtml5 = requireHtml5;
    return this;
  }

  /**
   * Optional. Indicates that the creative relies on HTML5 to render properly. Optional and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * &#x60;HOSTING_SOURCE_THIRD_PARTY&#x60; combined with following creative_type: * &#x60;CREATIVE_TYPE_STANDARD&#x60; * &#x60;CREATIVE_TYPE_EXPANDABLE&#x60;
   * @return requireHtml5
   */
  @javax.annotation.Nullable
  public Boolean getRequireHtml5() {
    return requireHtml5;
  }

  public void setRequireHtml5(Boolean requireHtml5) {
    this.requireHtml5 = requireHtml5;
  }


  public Creative requireMraid(Boolean requireMraid) {
    this.requireMraid = requireMraid;
    return this;
  }

  /**
   * Optional. Indicates that the creative requires MRAID (Mobile Rich Media Ad Interface Definitions system). Set this if the creative relies on mobile gestures for interactivity, such as swiping or tapping. Optional and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * &#x60;HOSTING_SOURCE_THIRD_PARTY&#x60; combined with following creative_type: * &#x60;CREATIVE_TYPE_STANDARD&#x60; * &#x60;CREATIVE_TYPE_EXPANDABLE&#x60;
   * @return requireMraid
   */
  @javax.annotation.Nullable
  public Boolean getRequireMraid() {
    return requireMraid;
  }

  public void setRequireMraid(Boolean requireMraid) {
    this.requireMraid = requireMraid;
  }


  public Creative requirePingForAttribution(Boolean requirePingForAttribution) {
    this.requirePingForAttribution = requirePingForAttribution;
    return this;
  }

  /**
   * Optional. Indicates that the creative will wait for a return ping for attribution. Only valid when using a Campaign Manager 360 tracking ad with a third-party ad server parameter and the ${DC_DBM_TOKEN} macro. Optional and only valid for third-party tag creatives or third-party VAST tag creatives. Third-party tag creatives are creatives with following hosting_source: * &#x60;HOSTING_SOURCE_THIRD_PARTY&#x60; combined with following creative_type: * &#x60;CREATIVE_TYPE_STANDARD&#x60; * &#x60;CREATIVE_TYPE_EXPANDABLE&#x60; Third-party VAST tag creatives are creatives with following hosting_source: * &#x60;HOSTING_SOURCE_THIRD_PARTY&#x60; combined with following creative_type: * &#x60;CREATIVE_TYPE_AUDIO&#x60; * &#x60;CREATIVE_TYPE_VIDEO&#x60;
   * @return requirePingForAttribution
   */
  @javax.annotation.Nullable
  public Boolean getRequirePingForAttribution() {
    return requirePingForAttribution;
  }

  public void setRequirePingForAttribution(Boolean requirePingForAttribution) {
    this.requirePingForAttribution = requirePingForAttribution;
  }


  public Creative reviewStatus(ReviewStatusInfo reviewStatus) {
    this.reviewStatus = reviewStatus;
    return this;
  }

  /**
   * Get reviewStatus
   * @return reviewStatus
   */
  @javax.annotation.Nullable
  public ReviewStatusInfo getReviewStatus() {
    return reviewStatus;
  }

  public void setReviewStatus(ReviewStatusInfo reviewStatus) {
    this.reviewStatus = reviewStatus;
  }


  public Creative skipOffset(AudioVideoOffset skipOffset) {
    this.skipOffset = skipOffset;
    return this;
  }

  /**
   * Get skipOffset
   * @return skipOffset
   */
  @javax.annotation.Nullable
  public AudioVideoOffset getSkipOffset() {
    return skipOffset;
  }

  public void setSkipOffset(AudioVideoOffset skipOffset) {
    this.skipOffset = skipOffset;
  }


  public Creative skippable(Boolean skippable) {
    this.skippable = skippable;
    return this;
  }

  /**
   * Whether the user can choose to skip a video creative. This field is only supported for the following creative_type: * &#x60;CREATIVE_TYPE_VIDEO&#x60;
   * @return skippable
   */
  @javax.annotation.Nullable
  public Boolean getSkippable() {
    return skippable;
  }

  public void setSkippable(Boolean skippable) {
    this.skippable = skippable;
  }


  public Creative thirdPartyTag(String thirdPartyTag) {
    this.thirdPartyTag = thirdPartyTag;
    return this;
  }

  /**
   * Optional. The original third-party tag used for the creative. Required and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * &#x60;HOSTING_SOURCE_THIRD_PARTY&#x60; combined with following creative_type: * &#x60;CREATIVE_TYPE_STANDARD&#x60; * &#x60;CREATIVE_TYPE_EXPANDABLE&#x60;
   * @return thirdPartyTag
   */
  @javax.annotation.Nullable
  public String getThirdPartyTag() {
    return thirdPartyTag;
  }

  public void setThirdPartyTag(String thirdPartyTag) {
    this.thirdPartyTag = thirdPartyTag;
  }


  public Creative thirdPartyUrls(List<ThirdPartyUrl> thirdPartyUrls) {
    this.thirdPartyUrls = thirdPartyUrls;
    return this;
  }

  public Creative addThirdPartyUrlsItem(ThirdPartyUrl thirdPartyUrlsItem) {
    if (this.thirdPartyUrls == null) {
      this.thirdPartyUrls = new ArrayList<>();
    }
    this.thirdPartyUrls.add(thirdPartyUrlsItem);
    return this;
  }

  /**
   * Tracking URLs from third parties to track interactions with a video creative. This field is only supported for the following creative_type: * &#x60;CREATIVE_TYPE_AUDIO&#x60; * &#x60;CREATIVE_TYPE_VIDEO&#x60; * &#x60;CREATIVE_TYPE_NATIVE_VIDEO&#x60;
   * @return thirdPartyUrls
   */
  @javax.annotation.Nullable
  public List<ThirdPartyUrl> getThirdPartyUrls() {
    return thirdPartyUrls;
  }

  public void setThirdPartyUrls(List<ThirdPartyUrl> thirdPartyUrls) {
    this.thirdPartyUrls = thirdPartyUrls;
  }


  public Creative timerEvents(List<TimerEvent> timerEvents) {
    this.timerEvents = timerEvents;
    return this;
  }

  public Creative addTimerEventsItem(TimerEvent timerEventsItem) {
    if (this.timerEvents == null) {
      this.timerEvents = new ArrayList<>();
    }
    this.timerEvents.add(timerEventsItem);
    return this;
  }

  /**
   * Timer custom events for a rich media creative. Timers track the time during which a user views and interacts with a specified part of a rich media creative. A creative can have multiple timer events, each timed independently. Leave it empty or unset for creatives containing image assets only.
   * @return timerEvents
   */
  @javax.annotation.Nullable
  public List<TimerEvent> getTimerEvents() {
    return timerEvents;
  }

  public void setTimerEvents(List<TimerEvent> timerEvents) {
    this.timerEvents = timerEvents;
  }


  public Creative trackerUrls(List<String> trackerUrls) {
    this.trackerUrls = trackerUrls;
    return this;
  }

  public Creative addTrackerUrlsItem(String trackerUrlsItem) {
    if (this.trackerUrls == null) {
      this.trackerUrls = new ArrayList<>();
    }
    this.trackerUrls.add(trackerUrlsItem);
    return this;
  }

  /**
   * Tracking URLs for analytics providers or third-party ad technology vendors. The URLs must start with https (except on inventory that doesn&#39;t require SSL compliance). If using macros in your URL, use only macros supported by Display &amp; Video 360. Standard URLs only, no IMG or SCRIPT tags. This field is only writeable in following creative_type: * &#x60;CREATIVE_TYPE_NATIVE&#x60; * &#x60;CREATIVE_TYPE_NATIVE_SITE_SQUARE&#x60; * &#x60;CREATIVE_TYPE_NATIVE_VIDEO&#x60;
   * @return trackerUrls
   */
  @javax.annotation.Nullable
  public List<String> getTrackerUrls() {
    return trackerUrls;
  }

  public void setTrackerUrls(List<String> trackerUrls) {
    this.trackerUrls = trackerUrls;
  }


  /**
   * Output only. Audio/Video transcodes. Display &amp; Video 360 transcodes the main asset into a number of alternative versions that use different file formats or have different properties (resolution, audio bit rate, and video bit rate), each designed for specific video players or bandwidths. These transcodes give a publisher&#39;s system more options to choose from for each impression on your video and ensures that the appropriate file serves based on the viewer’s connection and screen size. This field is only supported in following creative_type: * &#x60;CREATIVE_TYPE_VIDEO&#x60; * &#x60;CREATIVE_TYPE_NATIVE_VIDEO&#x60; * &#x60;CREATIVE_TYPE_AUDIO&#x60;
   * @return transcodes
   */
  @javax.annotation.Nullable
  public List<Transcode> getTranscodes() {
    return transcodes;
  }



  public Creative universalAdId(UniversalAdId universalAdId) {
    this.universalAdId = universalAdId;
    return this;
  }

  /**
   * Get universalAdId
   * @return universalAdId
   */
  @javax.annotation.Nullable
  public UniversalAdId getUniversalAdId() {
    return universalAdId;
  }

  public void setUniversalAdId(UniversalAdId universalAdId) {
    this.universalAdId = universalAdId;
  }


  /**
   * Output only. The timestamp when the creative was last updated, either by the user or system (e.g. creative review). Assigned by the system.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public Creative vastTagUrl(String vastTagUrl) {
    this.vastTagUrl = vastTagUrl;
    return this;
  }

  /**
   * Optional. The URL of the VAST tag for a third-party VAST tag creative. Required and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following hosting_source: * &#x60;HOSTING_SOURCE_THIRD_PARTY&#x60; combined with following creative_type: * &#x60;CREATIVE_TYPE_AUDIO&#x60; * &#x60;CREATIVE_TYPE_VIDEO&#x60;
   * @return vastTagUrl
   */
  @javax.annotation.Nullable
  public String getVastTagUrl() {
    return vastTagUrl;
  }

  public void setVastTagUrl(String vastTagUrl) {
    this.vastTagUrl = vastTagUrl;
  }


  /**
   * Output only. Indicates the third-party VAST tag creative requires VPAID (Digital Video Player-Ad Interface). Output only and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following hosting_source: * &#x60;HOSTING_SOURCE_THIRD_PARTY&#x60; combined with following creative_type: * &#x60;CREATIVE_TYPE_VIDEO&#x60;
   * @return vpaid
   */
  @javax.annotation.Nullable
  public Boolean getVpaid() {
    return vpaid;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Creative creative = (Creative) o;
    return Objects.equals(this.additionalDimensions, creative.additionalDimensions) &&
        Objects.equals(this.advertiserId, creative.advertiserId) &&
        Objects.equals(this.appendedTag, creative.appendedTag) &&
        Objects.equals(this.assets, creative.assets) &&
        Objects.equals(this.cmPlacementId, creative.cmPlacementId) &&
        Objects.equals(this.cmTrackingAd, creative.cmTrackingAd) &&
        Objects.equals(this.companionCreativeIds, creative.companionCreativeIds) &&
        Objects.equals(this.counterEvents, creative.counterEvents) &&
        Objects.equals(this.createTime, creative.createTime) &&
        Objects.equals(this.creativeAttributes, creative.creativeAttributes) &&
        Objects.equals(this.creativeId, creative.creativeId) &&
        Objects.equals(this.creativeType, creative.creativeType) &&
        Objects.equals(this.dimensions, creative.dimensions) &&
        Objects.equals(this.displayName, creative.displayName) &&
        Objects.equals(this.dynamic, creative.dynamic) &&
        Objects.equals(this.entityStatus, creative.entityStatus) &&
        Objects.equals(this.exitEvents, creative.exitEvents) &&
        Objects.equals(this.expandOnHover, creative.expandOnHover) &&
        Objects.equals(this.expandingDirection, creative.expandingDirection) &&
        Objects.equals(this.hostingSource, creative.hostingSource) &&
        Objects.equals(this.html5Video, creative.html5Video) &&
        Objects.equals(this.iasCampaignMonitoring, creative.iasCampaignMonitoring) &&
        Objects.equals(this.integrationCode, creative.integrationCode) &&
        Objects.equals(this.jsTrackerUrl, creative.jsTrackerUrl) &&
        Objects.equals(this.lineItemIds, creative.lineItemIds) &&
        Objects.equals(this.mediaDuration, creative.mediaDuration) &&
        Objects.equals(this.mp3Audio, creative.mp3Audio) &&
        Objects.equals(this.name, creative.name) &&
        Objects.equals(this.notes, creative.notes) &&
        Objects.equals(this.obaIcon, creative.obaIcon) &&
        Objects.equals(this.oggAudio, creative.oggAudio) &&
        Objects.equals(this.progressOffset, creative.progressOffset) &&
        Objects.equals(this.requireHtml5, creative.requireHtml5) &&
        Objects.equals(this.requireMraid, creative.requireMraid) &&
        Objects.equals(this.requirePingForAttribution, creative.requirePingForAttribution) &&
        Objects.equals(this.reviewStatus, creative.reviewStatus) &&
        Objects.equals(this.skipOffset, creative.skipOffset) &&
        Objects.equals(this.skippable, creative.skippable) &&
        Objects.equals(this.thirdPartyTag, creative.thirdPartyTag) &&
        Objects.equals(this.thirdPartyUrls, creative.thirdPartyUrls) &&
        Objects.equals(this.timerEvents, creative.timerEvents) &&
        Objects.equals(this.trackerUrls, creative.trackerUrls) &&
        Objects.equals(this.transcodes, creative.transcodes) &&
        Objects.equals(this.universalAdId, creative.universalAdId) &&
        Objects.equals(this.updateTime, creative.updateTime) &&
        Objects.equals(this.vastTagUrl, creative.vastTagUrl) &&
        Objects.equals(this.vpaid, creative.vpaid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalDimensions, advertiserId, appendedTag, assets, cmPlacementId, cmTrackingAd, companionCreativeIds, counterEvents, createTime, creativeAttributes, creativeId, creativeType, dimensions, displayName, dynamic, entityStatus, exitEvents, expandOnHover, expandingDirection, hostingSource, html5Video, iasCampaignMonitoring, integrationCode, jsTrackerUrl, lineItemIds, mediaDuration, mp3Audio, name, notes, obaIcon, oggAudio, progressOffset, requireHtml5, requireMraid, requirePingForAttribution, reviewStatus, skipOffset, skippable, thirdPartyTag, thirdPartyUrls, timerEvents, trackerUrls, transcodes, universalAdId, updateTime, vastTagUrl, vpaid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Creative {\n");
    sb.append("    additionalDimensions: ").append(toIndentedString(additionalDimensions)).append("\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    appendedTag: ").append(toIndentedString(appendedTag)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    cmPlacementId: ").append(toIndentedString(cmPlacementId)).append("\n");
    sb.append("    cmTrackingAd: ").append(toIndentedString(cmTrackingAd)).append("\n");
    sb.append("    companionCreativeIds: ").append(toIndentedString(companionCreativeIds)).append("\n");
    sb.append("    counterEvents: ").append(toIndentedString(counterEvents)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    creativeAttributes: ").append(toIndentedString(creativeAttributes)).append("\n");
    sb.append("    creativeId: ").append(toIndentedString(creativeId)).append("\n");
    sb.append("    creativeType: ").append(toIndentedString(creativeType)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    dynamic: ").append(toIndentedString(dynamic)).append("\n");
    sb.append("    entityStatus: ").append(toIndentedString(entityStatus)).append("\n");
    sb.append("    exitEvents: ").append(toIndentedString(exitEvents)).append("\n");
    sb.append("    expandOnHover: ").append(toIndentedString(expandOnHover)).append("\n");
    sb.append("    expandingDirection: ").append(toIndentedString(expandingDirection)).append("\n");
    sb.append("    hostingSource: ").append(toIndentedString(hostingSource)).append("\n");
    sb.append("    html5Video: ").append(toIndentedString(html5Video)).append("\n");
    sb.append("    iasCampaignMonitoring: ").append(toIndentedString(iasCampaignMonitoring)).append("\n");
    sb.append("    integrationCode: ").append(toIndentedString(integrationCode)).append("\n");
    sb.append("    jsTrackerUrl: ").append(toIndentedString(jsTrackerUrl)).append("\n");
    sb.append("    lineItemIds: ").append(toIndentedString(lineItemIds)).append("\n");
    sb.append("    mediaDuration: ").append(toIndentedString(mediaDuration)).append("\n");
    sb.append("    mp3Audio: ").append(toIndentedString(mp3Audio)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    obaIcon: ").append(toIndentedString(obaIcon)).append("\n");
    sb.append("    oggAudio: ").append(toIndentedString(oggAudio)).append("\n");
    sb.append("    progressOffset: ").append(toIndentedString(progressOffset)).append("\n");
    sb.append("    requireHtml5: ").append(toIndentedString(requireHtml5)).append("\n");
    sb.append("    requireMraid: ").append(toIndentedString(requireMraid)).append("\n");
    sb.append("    requirePingForAttribution: ").append(toIndentedString(requirePingForAttribution)).append("\n");
    sb.append("    reviewStatus: ").append(toIndentedString(reviewStatus)).append("\n");
    sb.append("    skipOffset: ").append(toIndentedString(skipOffset)).append("\n");
    sb.append("    skippable: ").append(toIndentedString(skippable)).append("\n");
    sb.append("    thirdPartyTag: ").append(toIndentedString(thirdPartyTag)).append("\n");
    sb.append("    thirdPartyUrls: ").append(toIndentedString(thirdPartyUrls)).append("\n");
    sb.append("    timerEvents: ").append(toIndentedString(timerEvents)).append("\n");
    sb.append("    trackerUrls: ").append(toIndentedString(trackerUrls)).append("\n");
    sb.append("    transcodes: ").append(toIndentedString(transcodes)).append("\n");
    sb.append("    universalAdId: ").append(toIndentedString(universalAdId)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    vastTagUrl: ").append(toIndentedString(vastTagUrl)).append("\n");
    sb.append("    vpaid: ").append(toIndentedString(vpaid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalDimensions");
    openapiFields.add("advertiserId");
    openapiFields.add("appendedTag");
    openapiFields.add("assets");
    openapiFields.add("cmPlacementId");
    openapiFields.add("cmTrackingAd");
    openapiFields.add("companionCreativeIds");
    openapiFields.add("counterEvents");
    openapiFields.add("createTime");
    openapiFields.add("creativeAttributes");
    openapiFields.add("creativeId");
    openapiFields.add("creativeType");
    openapiFields.add("dimensions");
    openapiFields.add("displayName");
    openapiFields.add("dynamic");
    openapiFields.add("entityStatus");
    openapiFields.add("exitEvents");
    openapiFields.add("expandOnHover");
    openapiFields.add("expandingDirection");
    openapiFields.add("hostingSource");
    openapiFields.add("html5Video");
    openapiFields.add("iasCampaignMonitoring");
    openapiFields.add("integrationCode");
    openapiFields.add("jsTrackerUrl");
    openapiFields.add("lineItemIds");
    openapiFields.add("mediaDuration");
    openapiFields.add("mp3Audio");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("obaIcon");
    openapiFields.add("oggAudio");
    openapiFields.add("progressOffset");
    openapiFields.add("requireHtml5");
    openapiFields.add("requireMraid");
    openapiFields.add("requirePingForAttribution");
    openapiFields.add("reviewStatus");
    openapiFields.add("skipOffset");
    openapiFields.add("skippable");
    openapiFields.add("thirdPartyTag");
    openapiFields.add("thirdPartyUrls");
    openapiFields.add("timerEvents");
    openapiFields.add("trackerUrls");
    openapiFields.add("transcodes");
    openapiFields.add("universalAdId");
    openapiFields.add("updateTime");
    openapiFields.add("vastTagUrl");
    openapiFields.add("vpaid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Creative
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Creative.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Creative is not found in the empty JSON string", Creative.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Creative.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Creative` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalDimensions") != null && !jsonObj.get("additionalDimensions").isJsonNull()) {
        JsonArray jsonArrayadditionalDimensions = jsonObj.getAsJsonArray("additionalDimensions");
        if (jsonArrayadditionalDimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalDimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalDimensions` to be an array in the JSON string but got `%s`", jsonObj.get("additionalDimensions").toString()));
          }

          // validate the optional field `additionalDimensions` (array)
          for (int i = 0; i < jsonArrayadditionalDimensions.size(); i++) {
            Dimensions.validateJsonElement(jsonArrayadditionalDimensions.get(i));
          };
        }
      }
      if ((jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull()) && !jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      if ((jsonObj.get("appendedTag") != null && !jsonObj.get("appendedTag").isJsonNull()) && !jsonObj.get("appendedTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appendedTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appendedTag").toString()));
      }
      if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
        JsonArray jsonArrayassets = jsonObj.getAsJsonArray("assets");
        if (jsonArrayassets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assets` to be an array in the JSON string but got `%s`", jsonObj.get("assets").toString()));
          }

          // validate the optional field `assets` (array)
          for (int i = 0; i < jsonArrayassets.size(); i++) {
            AssetAssociation.validateJsonElement(jsonArrayassets.get(i));
          };
        }
      }
      if ((jsonObj.get("cmPlacementId") != null && !jsonObj.get("cmPlacementId").isJsonNull()) && !jsonObj.get("cmPlacementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cmPlacementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cmPlacementId").toString()));
      }
      // validate the optional field `cmTrackingAd`
      if (jsonObj.get("cmTrackingAd") != null && !jsonObj.get("cmTrackingAd").isJsonNull()) {
        CmTrackingAd.validateJsonElement(jsonObj.get("cmTrackingAd"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("companionCreativeIds") != null && !jsonObj.get("companionCreativeIds").isJsonNull() && !jsonObj.get("companionCreativeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `companionCreativeIds` to be an array in the JSON string but got `%s`", jsonObj.get("companionCreativeIds").toString()));
      }
      if (jsonObj.get("counterEvents") != null && !jsonObj.get("counterEvents").isJsonNull()) {
        JsonArray jsonArraycounterEvents = jsonObj.getAsJsonArray("counterEvents");
        if (jsonArraycounterEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("counterEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `counterEvents` to be an array in the JSON string but got `%s`", jsonObj.get("counterEvents").toString()));
          }

          // validate the optional field `counterEvents` (array)
          for (int i = 0; i < jsonArraycounterEvents.size(); i++) {
            CounterEvent.validateJsonElement(jsonArraycounterEvents.get(i));
          };
        }
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("creativeAttributes") != null && !jsonObj.get("creativeAttributes").isJsonNull() && !jsonObj.get("creativeAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("creativeAttributes").toString()));
      }
      if ((jsonObj.get("creativeId") != null && !jsonObj.get("creativeId").isJsonNull()) && !jsonObj.get("creativeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeId").toString()));
      }
      if ((jsonObj.get("creativeType") != null && !jsonObj.get("creativeType").isJsonNull()) && !jsonObj.get("creativeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeType").toString()));
      }
      // validate the optional field `creativeType`
      if (jsonObj.get("creativeType") != null && !jsonObj.get("creativeType").isJsonNull()) {
        CreativeTypeEnum.validateJsonElement(jsonObj.get("creativeType"));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        Dimensions.validateJsonElement(jsonObj.get("dimensions"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("entityStatus") != null && !jsonObj.get("entityStatus").isJsonNull()) && !jsonObj.get("entityStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityStatus").toString()));
      }
      // validate the optional field `entityStatus`
      if (jsonObj.get("entityStatus") != null && !jsonObj.get("entityStatus").isJsonNull()) {
        EntityStatusEnum.validateJsonElement(jsonObj.get("entityStatus"));
      }
      if (jsonObj.get("exitEvents") != null && !jsonObj.get("exitEvents").isJsonNull()) {
        JsonArray jsonArrayexitEvents = jsonObj.getAsJsonArray("exitEvents");
        if (jsonArrayexitEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exitEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exitEvents` to be an array in the JSON string but got `%s`", jsonObj.get("exitEvents").toString()));
          }

          // validate the optional field `exitEvents` (array)
          for (int i = 0; i < jsonArrayexitEvents.size(); i++) {
            ExitEvent.validateJsonElement(jsonArrayexitEvents.get(i));
          };
        }
      }
      if ((jsonObj.get("expandingDirection") != null && !jsonObj.get("expandingDirection").isJsonNull()) && !jsonObj.get("expandingDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expandingDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expandingDirection").toString()));
      }
      // validate the optional field `expandingDirection`
      if (jsonObj.get("expandingDirection") != null && !jsonObj.get("expandingDirection").isJsonNull()) {
        ExpandingDirectionEnum.validateJsonElement(jsonObj.get("expandingDirection"));
      }
      if ((jsonObj.get("hostingSource") != null && !jsonObj.get("hostingSource").isJsonNull()) && !jsonObj.get("hostingSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostingSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostingSource").toString()));
      }
      // validate the optional field `hostingSource`
      if (jsonObj.get("hostingSource") != null && !jsonObj.get("hostingSource").isJsonNull()) {
        HostingSourceEnum.validateJsonElement(jsonObj.get("hostingSource"));
      }
      if ((jsonObj.get("integrationCode") != null && !jsonObj.get("integrationCode").isJsonNull()) && !jsonObj.get("integrationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integrationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integrationCode").toString()));
      }
      if ((jsonObj.get("jsTrackerUrl") != null && !jsonObj.get("jsTrackerUrl").isJsonNull()) && !jsonObj.get("jsTrackerUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jsTrackerUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jsTrackerUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lineItemIds") != null && !jsonObj.get("lineItemIds").isJsonNull() && !jsonObj.get("lineItemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItemIds` to be an array in the JSON string but got `%s`", jsonObj.get("lineItemIds").toString()));
      }
      if ((jsonObj.get("mediaDuration") != null && !jsonObj.get("mediaDuration").isJsonNull()) && !jsonObj.get("mediaDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaDuration").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // validate the optional field `obaIcon`
      if (jsonObj.get("obaIcon") != null && !jsonObj.get("obaIcon").isJsonNull()) {
        ObaIcon.validateJsonElement(jsonObj.get("obaIcon"));
      }
      // validate the optional field `progressOffset`
      if (jsonObj.get("progressOffset") != null && !jsonObj.get("progressOffset").isJsonNull()) {
        AudioVideoOffset.validateJsonElement(jsonObj.get("progressOffset"));
      }
      // validate the optional field `reviewStatus`
      if (jsonObj.get("reviewStatus") != null && !jsonObj.get("reviewStatus").isJsonNull()) {
        ReviewStatusInfo.validateJsonElement(jsonObj.get("reviewStatus"));
      }
      // validate the optional field `skipOffset`
      if (jsonObj.get("skipOffset") != null && !jsonObj.get("skipOffset").isJsonNull()) {
        AudioVideoOffset.validateJsonElement(jsonObj.get("skipOffset"));
      }
      if ((jsonObj.get("thirdPartyTag") != null && !jsonObj.get("thirdPartyTag").isJsonNull()) && !jsonObj.get("thirdPartyTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thirdPartyTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thirdPartyTag").toString()));
      }
      if (jsonObj.get("thirdPartyUrls") != null && !jsonObj.get("thirdPartyUrls").isJsonNull()) {
        JsonArray jsonArraythirdPartyUrls = jsonObj.getAsJsonArray("thirdPartyUrls");
        if (jsonArraythirdPartyUrls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thirdPartyUrls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thirdPartyUrls` to be an array in the JSON string but got `%s`", jsonObj.get("thirdPartyUrls").toString()));
          }

          // validate the optional field `thirdPartyUrls` (array)
          for (int i = 0; i < jsonArraythirdPartyUrls.size(); i++) {
            ThirdPartyUrl.validateJsonElement(jsonArraythirdPartyUrls.get(i));
          };
        }
      }
      if (jsonObj.get("timerEvents") != null && !jsonObj.get("timerEvents").isJsonNull()) {
        JsonArray jsonArraytimerEvents = jsonObj.getAsJsonArray("timerEvents");
        if (jsonArraytimerEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timerEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timerEvents` to be an array in the JSON string but got `%s`", jsonObj.get("timerEvents").toString()));
          }

          // validate the optional field `timerEvents` (array)
          for (int i = 0; i < jsonArraytimerEvents.size(); i++) {
            TimerEvent.validateJsonElement(jsonArraytimerEvents.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("trackerUrls") != null && !jsonObj.get("trackerUrls").isJsonNull() && !jsonObj.get("trackerUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackerUrls` to be an array in the JSON string but got `%s`", jsonObj.get("trackerUrls").toString()));
      }
      if (jsonObj.get("transcodes") != null && !jsonObj.get("transcodes").isJsonNull()) {
        JsonArray jsonArraytranscodes = jsonObj.getAsJsonArray("transcodes");
        if (jsonArraytranscodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transcodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transcodes` to be an array in the JSON string but got `%s`", jsonObj.get("transcodes").toString()));
          }

          // validate the optional field `transcodes` (array)
          for (int i = 0; i < jsonArraytranscodes.size(); i++) {
            Transcode.validateJsonElement(jsonArraytranscodes.get(i));
          };
        }
      }
      // validate the optional field `universalAdId`
      if (jsonObj.get("universalAdId") != null && !jsonObj.get("universalAdId").isJsonNull()) {
        UniversalAdId.validateJsonElement(jsonObj.get("universalAdId"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("vastTagUrl") != null && !jsonObj.get("vastTagUrl").isJsonNull()) && !jsonObj.get("vastTagUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vastTagUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vastTagUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Creative.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Creative' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Creative> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Creative.class));

       return (TypeAdapter<T>) new TypeAdapter<Creative>() {
           @Override
           public void write(JsonWriter out, Creative value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Creative read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Creative given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Creative
   * @throws IOException if the JSON string is invalid with respect to Creative
   */
  public static Creative fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Creative.class);
  }

  /**
   * Convert an instance of Creative to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

