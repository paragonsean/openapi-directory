/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for LineItemService.BulkUpdateLineItems.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BulkUpdateLineItemsResponse {
  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Status> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAILED_LINE_ITEM_IDS = "failedLineItemIds";
  @SerializedName(SERIALIZED_NAME_FAILED_LINE_ITEM_IDS)
  private List<String> failedLineItemIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKIPPED_LINE_ITEM_IDS = "skippedLineItemIds";
  @SerializedName(SERIALIZED_NAME_SKIPPED_LINE_ITEM_IDS)
  private List<String> skippedLineItemIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_LINE_ITEM_IDS = "updatedLineItemIds";
  @SerializedName(SERIALIZED_NAME_UPDATED_LINE_ITEM_IDS)
  private List<String> updatedLineItemIds = new ArrayList<>();

  public BulkUpdateLineItemsResponse() {
  }

  public BulkUpdateLineItemsResponse errors(List<Status> errors) {
    this.errors = errors;
    return this;
  }

  public BulkUpdateLineItemsResponse addErrorsItem(Status errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Errors returned by line items that failed to update.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<Status> getErrors() {
    return errors;
  }

  public void setErrors(List<Status> errors) {
    this.errors = errors;
  }


  public BulkUpdateLineItemsResponse failedLineItemIds(List<String> failedLineItemIds) {
    this.failedLineItemIds = failedLineItemIds;
    return this;
  }

  public BulkUpdateLineItemsResponse addFailedLineItemIdsItem(String failedLineItemIdsItem) {
    if (this.failedLineItemIds == null) {
      this.failedLineItemIds = new ArrayList<>();
    }
    this.failedLineItemIds.add(failedLineItemIdsItem);
    return this;
  }

  /**
   * The IDs of line items that failed to update.
   * @return failedLineItemIds
   */
  @javax.annotation.Nullable
  public List<String> getFailedLineItemIds() {
    return failedLineItemIds;
  }

  public void setFailedLineItemIds(List<String> failedLineItemIds) {
    this.failedLineItemIds = failedLineItemIds;
  }


  public BulkUpdateLineItemsResponse skippedLineItemIds(List<String> skippedLineItemIds) {
    this.skippedLineItemIds = skippedLineItemIds;
    return this;
  }

  public BulkUpdateLineItemsResponse addSkippedLineItemIdsItem(String skippedLineItemIdsItem) {
    if (this.skippedLineItemIds == null) {
      this.skippedLineItemIds = new ArrayList<>();
    }
    this.skippedLineItemIds.add(skippedLineItemIdsItem);
    return this;
  }

  /**
   * The IDs of line items that are skipped for updates. For example, unnecessary mutates that will result in effectively no changes to line items will be skipped and corresponding line item IDs can be tracked here.
   * @return skippedLineItemIds
   */
  @javax.annotation.Nullable
  public List<String> getSkippedLineItemIds() {
    return skippedLineItemIds;
  }

  public void setSkippedLineItemIds(List<String> skippedLineItemIds) {
    this.skippedLineItemIds = skippedLineItemIds;
  }


  public BulkUpdateLineItemsResponse updatedLineItemIds(List<String> updatedLineItemIds) {
    this.updatedLineItemIds = updatedLineItemIds;
    return this;
  }

  public BulkUpdateLineItemsResponse addUpdatedLineItemIdsItem(String updatedLineItemIdsItem) {
    if (this.updatedLineItemIds == null) {
      this.updatedLineItemIds = new ArrayList<>();
    }
    this.updatedLineItemIds.add(updatedLineItemIdsItem);
    return this;
  }

  /**
   * The IDs of successfully updated line items.
   * @return updatedLineItemIds
   */
  @javax.annotation.Nullable
  public List<String> getUpdatedLineItemIds() {
    return updatedLineItemIds;
  }

  public void setUpdatedLineItemIds(List<String> updatedLineItemIds) {
    this.updatedLineItemIds = updatedLineItemIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkUpdateLineItemsResponse bulkUpdateLineItemsResponse = (BulkUpdateLineItemsResponse) o;
    return Objects.equals(this.errors, bulkUpdateLineItemsResponse.errors) &&
        Objects.equals(this.failedLineItemIds, bulkUpdateLineItemsResponse.failedLineItemIds) &&
        Objects.equals(this.skippedLineItemIds, bulkUpdateLineItemsResponse.skippedLineItemIds) &&
        Objects.equals(this.updatedLineItemIds, bulkUpdateLineItemsResponse.updatedLineItemIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errors, failedLineItemIds, skippedLineItemIds, updatedLineItemIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkUpdateLineItemsResponse {\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    failedLineItemIds: ").append(toIndentedString(failedLineItemIds)).append("\n");
    sb.append("    skippedLineItemIds: ").append(toIndentedString(skippedLineItemIds)).append("\n");
    sb.append("    updatedLineItemIds: ").append(toIndentedString(updatedLineItemIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errors");
    openapiFields.add("failedLineItemIds");
    openapiFields.add("skippedLineItemIds");
    openapiFields.add("updatedLineItemIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BulkUpdateLineItemsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkUpdateLineItemsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkUpdateLineItemsResponse is not found in the empty JSON string", BulkUpdateLineItemsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkUpdateLineItemsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkUpdateLineItemsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            Status.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("failedLineItemIds") != null && !jsonObj.get("failedLineItemIds").isJsonNull() && !jsonObj.get("failedLineItemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failedLineItemIds` to be an array in the JSON string but got `%s`", jsonObj.get("failedLineItemIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("skippedLineItemIds") != null && !jsonObj.get("skippedLineItemIds").isJsonNull() && !jsonObj.get("skippedLineItemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `skippedLineItemIds` to be an array in the JSON string but got `%s`", jsonObj.get("skippedLineItemIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("updatedLineItemIds") != null && !jsonObj.get("updatedLineItemIds").isJsonNull() && !jsonObj.get("updatedLineItemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedLineItemIds` to be an array in the JSON string but got `%s`", jsonObj.get("updatedLineItemIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkUpdateLineItemsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkUpdateLineItemsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkUpdateLineItemsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkUpdateLineItemsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkUpdateLineItemsResponse>() {
           @Override
           public void write(JsonWriter out, BulkUpdateLineItemsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkUpdateLineItemsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BulkUpdateLineItemsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BulkUpdateLineItemsResponse
   * @throws IOException if the JSON string is invalid with respect to BulkUpdateLineItemsResponse
   */
  public static BulkUpdateLineItemsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkUpdateLineItemsResponse.class);
  }

  /**
   * Convert an instance of BulkUpdateLineItemsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

