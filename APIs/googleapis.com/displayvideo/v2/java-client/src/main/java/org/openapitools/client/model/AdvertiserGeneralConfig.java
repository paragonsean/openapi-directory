/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * General settings of an advertiser.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdvertiserGeneralConfig {
  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DOMAIN_URL = "domainUrl";
  @SerializedName(SERIALIZED_NAME_DOMAIN_URL)
  private String domainUrl;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public AdvertiserGeneralConfig() {
  }

  public AdvertiserGeneralConfig(
     String timeZone
  ) {
    this();
    this.timeZone = timeZone;
  }

  public AdvertiserGeneralConfig currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Required. Immutable. Advertiser&#39;s currency in ISO 4217 format. Accepted codes and the currencies they represent are: Currency Code : Currency Name * &#x60;ARS&#x60; : Argentine Peso * &#x60;AUD&#x60; : Australian Dollar * &#x60;BRL&#x60; : Brazilian Real * &#x60;CAD&#x60; : Canadian Dollar * &#x60;CHF&#x60; : Swiss Franc * &#x60;CLP&#x60; : Chilean Peso * &#x60;CNY&#x60; : Chinese Yuan * &#x60;COP&#x60; : Colombian Peso * &#x60;CZK&#x60; : Czech Koruna * &#x60;DKK&#x60; : Danish Krone * &#x60;EGP&#x60; : Egyption Pound * &#x60;EUR&#x60; : Euro * &#x60;GBP&#x60; : British Pound * &#x60;HKD&#x60; : Hong Kong Dollar * &#x60;HUF&#x60; : Hungarian Forint * &#x60;IDR&#x60; : Indonesian Rupiah * &#x60;ILS&#x60; : Israeli Shekel * &#x60;INR&#x60; : Indian Rupee * &#x60;JPY&#x60; : Japanese Yen * &#x60;KRW&#x60; : South Korean Won * &#x60;MXN&#x60; : Mexican Pesos * &#x60;MYR&#x60; : Malaysian Ringgit * &#x60;NGN&#x60; : Nigerian Naira * &#x60;NOK&#x60; : Norwegian Krone * &#x60;NZD&#x60; : New Zealand Dollar * &#x60;PEN&#x60; : Peruvian Nuevo Sol * &#x60;PLN&#x60; : Polish Zloty * &#x60;RON&#x60; : New Romanian Leu * &#x60;RUB&#x60; : Russian Ruble * &#x60;SEK&#x60; : Swedish Krona * &#x60;TRY&#x60; : Turkish Lira * &#x60;TWD&#x60; : New Taiwan Dollar * &#x60;USD&#x60; : US Dollar * &#x60;ZAR&#x60; : South African Rand
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public AdvertiserGeneralConfig domainUrl(String domainUrl) {
    this.domainUrl = domainUrl;
    return this;
  }

  /**
   * Required. The domain URL of the advertiser&#39;s primary website. The system will send this information to publishers that require website URL to associate a campaign with an advertiser. Provide a URL with no path or query string, beginning with &#x60;http:&#x60; or &#x60;https:&#x60;. For example, http://www.example.com
   * @return domainUrl
   */
  @javax.annotation.Nullable
  public String getDomainUrl() {
    return domainUrl;
  }

  public void setDomainUrl(String domainUrl) {
    this.domainUrl = domainUrl;
  }


  /**
   * Output only. The standard TZ database name of the advertiser&#39;s time zone. For example, &#x60;America/New_York&#x60;. See more at: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones For CM360 hybrid advertisers, the time zone is the same as that of the associated CM360 account; for third-party only advertisers, the time zone is the same as that of the parent partner.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvertiserGeneralConfig advertiserGeneralConfig = (AdvertiserGeneralConfig) o;
    return Objects.equals(this.currencyCode, advertiserGeneralConfig.currencyCode) &&
        Objects.equals(this.domainUrl, advertiserGeneralConfig.domainUrl) &&
        Objects.equals(this.timeZone, advertiserGeneralConfig.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, domainUrl, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvertiserGeneralConfig {\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    domainUrl: ").append(toIndentedString(domainUrl)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyCode");
    openapiFields.add("domainUrl");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdvertiserGeneralConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdvertiserGeneralConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdvertiserGeneralConfig is not found in the empty JSON string", AdvertiserGeneralConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdvertiserGeneralConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdvertiserGeneralConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("domainUrl") != null && !jsonObj.get("domainUrl").isJsonNull()) && !jsonObj.get("domainUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainUrl").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdvertiserGeneralConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdvertiserGeneralConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdvertiserGeneralConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdvertiserGeneralConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AdvertiserGeneralConfig>() {
           @Override
           public void write(JsonWriter out, AdvertiserGeneralConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdvertiserGeneralConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdvertiserGeneralConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdvertiserGeneralConfig
   * @throws IOException if the JSON string is invalid with respect to AdvertiserGeneralConfig
   */
  public static AdvertiserGeneralConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdvertiserGeneralConfig.class);
  }

  /**
   * Convert an instance of AdvertiserGeneralConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

