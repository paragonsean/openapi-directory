/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings that control how partner revenue is calculated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartnerRevenueModel {
  public static final String SERIALIZED_NAME_MARKUP_AMOUNT = "markupAmount";
  @SerializedName(SERIALIZED_NAME_MARKUP_AMOUNT)
  private String markupAmount;

  /**
   * Required. The markup type of the partner revenue model.
   */
  @JsonAdapter(MarkupTypeEnum.Adapter.class)
  public enum MarkupTypeEnum {
    UNSPECIFIED("PARTNER_REVENUE_MODEL_MARKUP_TYPE_UNSPECIFIED"),
    
    CPM("PARTNER_REVENUE_MODEL_MARKUP_TYPE_CPM"),
    
    MEDIA_COST_MARKUP("PARTNER_REVENUE_MODEL_MARKUP_TYPE_MEDIA_COST_MARKUP"),
    
    TOTAL_MEDIA_COST_MARKUP("PARTNER_REVENUE_MODEL_MARKUP_TYPE_TOTAL_MEDIA_COST_MARKUP");

    private String value;

    MarkupTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MarkupTypeEnum fromValue(String value) {
      for (MarkupTypeEnum b : MarkupTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MarkupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MarkupTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MarkupTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MarkupTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MarkupTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MARKUP_TYPE = "markupType";
  @SerializedName(SERIALIZED_NAME_MARKUP_TYPE)
  private MarkupTypeEnum markupType;

  public PartnerRevenueModel() {
  }

  public PartnerRevenueModel markupAmount(String markupAmount) {
    this.markupAmount = markupAmount;
    return this;
  }

  /**
   * Required. The markup amount of the partner revenue model. Must be greater than or equal to 0. * When the markup_type is set to be &#x60;PARTNER_REVENUE_MODEL_MARKUP_TYPE_CPM&#x60;, this field represents the CPM markup in micros of advertiser&#39;s currency. For example, 1500000 represents 1.5 standard units of the currency. * When the markup_type is set to be &#x60;PARTNER_REVENUE_MODEL_MARKUP_TYPE_MEDIA_COST_MARKUP&#x60;, this field represents the media cost percent markup in millis. For example, 100 represents 0.1% (decimal 0.001). * When the markup_type is set to be &#x60;PARTNER_REVENUE_MODEL_MARKUP_TYPE_TOTAL_MEDIA_COST_MARKUP&#x60;, this field represents the total media cost percent markup in millis. For example, 100 represents 0.1% (decimal 0.001).
   * @return markupAmount
   */
  @javax.annotation.Nullable
  public String getMarkupAmount() {
    return markupAmount;
  }

  public void setMarkupAmount(String markupAmount) {
    this.markupAmount = markupAmount;
  }


  public PartnerRevenueModel markupType(MarkupTypeEnum markupType) {
    this.markupType = markupType;
    return this;
  }

  /**
   * Required. The markup type of the partner revenue model.
   * @return markupType
   */
  @javax.annotation.Nullable
  public MarkupTypeEnum getMarkupType() {
    return markupType;
  }

  public void setMarkupType(MarkupTypeEnum markupType) {
    this.markupType = markupType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartnerRevenueModel partnerRevenueModel = (PartnerRevenueModel) o;
    return Objects.equals(this.markupAmount, partnerRevenueModel.markupAmount) &&
        Objects.equals(this.markupType, partnerRevenueModel.markupType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(markupAmount, markupType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartnerRevenueModel {\n");
    sb.append("    markupAmount: ").append(toIndentedString(markupAmount)).append("\n");
    sb.append("    markupType: ").append(toIndentedString(markupType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("markupAmount");
    openapiFields.add("markupType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartnerRevenueModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartnerRevenueModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartnerRevenueModel is not found in the empty JSON string", PartnerRevenueModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartnerRevenueModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartnerRevenueModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("markupAmount") != null && !jsonObj.get("markupAmount").isJsonNull()) && !jsonObj.get("markupAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `markupAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("markupAmount").toString()));
      }
      if ((jsonObj.get("markupType") != null && !jsonObj.get("markupType").isJsonNull()) && !jsonObj.get("markupType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `markupType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("markupType").toString()));
      }
      // validate the optional field `markupType`
      if (jsonObj.get("markupType") != null && !jsonObj.get("markupType").isJsonNull()) {
        MarkupTypeEnum.validateJsonElement(jsonObj.get("markupType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartnerRevenueModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartnerRevenueModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartnerRevenueModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartnerRevenueModel.class));

       return (TypeAdapter<T>) new TypeAdapter<PartnerRevenueModel>() {
           @Override
           public void write(JsonWriter out, PartnerRevenueModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartnerRevenueModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartnerRevenueModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartnerRevenueModel
   * @throws IOException if the JSON string is invalid with respect to PartnerRevenueModel
   */
  public static PartnerRevenueModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartnerRevenueModel.class);
  }

  /**
   * Convert an instance of PartnerRevenueModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

