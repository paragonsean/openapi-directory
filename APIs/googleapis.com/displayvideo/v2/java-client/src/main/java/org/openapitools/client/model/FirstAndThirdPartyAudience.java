/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContactInfoList;
import org.openapitools.client.model.MobileDeviceIdList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a first or third party audience list used for targeting. First party audiences are created via usage of client data. Third party audiences are provided by Third Party data providers and can only be licensed to customers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FirstAndThirdPartyAudience {
  public static final String SERIALIZED_NAME_ACTIVE_DISPLAY_AUDIENCE_SIZE = "activeDisplayAudienceSize";
  @SerializedName(SERIALIZED_NAME_ACTIVE_DISPLAY_AUDIENCE_SIZE)
  private String activeDisplayAudienceSize;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  /**
   * Output only. The source of the audience.
   */
  @JsonAdapter(AudienceSourceEnum.Adapter.class)
  public enum AudienceSourceEnum {
    AUDIENCE_SOURCE_UNSPECIFIED("AUDIENCE_SOURCE_UNSPECIFIED"),
    
    DISPLAY_VIDEO_360("DISPLAY_VIDEO_360"),
    
    CAMPAIGN_MANAGER("CAMPAIGN_MANAGER"),
    
    AD_MANAGER("AD_MANAGER"),
    
    SEARCH_ADS_360("SEARCH_ADS_360"),
    
    YOUTUBE("YOUTUBE"),
    
    ADS_DATA_HUB("ADS_DATA_HUB");

    private String value;

    AudienceSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudienceSourceEnum fromValue(String value) {
      for (AudienceSourceEnum b : AudienceSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudienceSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudienceSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudienceSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudienceSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AudienceSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUDIENCE_SOURCE = "audienceSource";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_SOURCE)
  private AudienceSourceEnum audienceSource;

  /**
   * The type of the audience.
   */
  @JsonAdapter(AudienceTypeEnum.Adapter.class)
  public enum AudienceTypeEnum {
    AUDIENCE_TYPE_UNSPECIFIED("AUDIENCE_TYPE_UNSPECIFIED"),
    
    CUSTOMER_MATCH_CONTACT_INFO("CUSTOMER_MATCH_CONTACT_INFO"),
    
    CUSTOMER_MATCH_DEVICE_ID("CUSTOMER_MATCH_DEVICE_ID"),
    
    CUSTOMER_MATCH_USER_ID("CUSTOMER_MATCH_USER_ID"),
    
    ACTIVITY_BASED("ACTIVITY_BASED"),
    
    FREQUENCY_CAP("FREQUENCY_CAP"),
    
    TAG_BASED("TAG_BASED"),
    
    YOUTUBE_USERS("YOUTUBE_USERS"),
    
    LICENSED("LICENSED");

    private String value;

    AudienceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudienceTypeEnum fromValue(String value) {
      for (AudienceTypeEnum b : AudienceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudienceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudienceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudienceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudienceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AudienceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUDIENCE_TYPE = "audienceType";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_TYPE)
  private AudienceTypeEnum audienceType;

  public static final String SERIALIZED_NAME_CONTACT_INFO_LIST = "contactInfoList";
  @SerializedName(SERIALIZED_NAME_CONTACT_INFO_LIST)
  private ContactInfoList contactInfoList;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_AUDIENCE_SIZE = "displayAudienceSize";
  @SerializedName(SERIALIZED_NAME_DISPLAY_AUDIENCE_SIZE)
  private String displayAudienceSize;

  public static final String SERIALIZED_NAME_DISPLAY_DESKTOP_AUDIENCE_SIZE = "displayDesktopAudienceSize";
  @SerializedName(SERIALIZED_NAME_DISPLAY_DESKTOP_AUDIENCE_SIZE)
  private String displayDesktopAudienceSize;

  public static final String SERIALIZED_NAME_DISPLAY_MOBILE_APP_AUDIENCE_SIZE = "displayMobileAppAudienceSize";
  @SerializedName(SERIALIZED_NAME_DISPLAY_MOBILE_APP_AUDIENCE_SIZE)
  private String displayMobileAppAudienceSize;

  public static final String SERIALIZED_NAME_DISPLAY_MOBILE_WEB_AUDIENCE_SIZE = "displayMobileWebAudienceSize";
  @SerializedName(SERIALIZED_NAME_DISPLAY_MOBILE_WEB_AUDIENCE_SIZE)
  private String displayMobileWebAudienceSize;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FIRST_AND_THIRD_PARTY_AUDIENCE_ID = "firstAndThirdPartyAudienceId";
  @SerializedName(SERIALIZED_NAME_FIRST_AND_THIRD_PARTY_AUDIENCE_ID)
  private String firstAndThirdPartyAudienceId;

  /**
   * Whether the audience is a first or third party audience.
   */
  @JsonAdapter(FirstAndThirdPartyAudienceTypeEnum.Adapter.class)
  public enum FirstAndThirdPartyAudienceTypeEnum {
    UNSPECIFIED("FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_UNSPECIFIED"),
    
    FIRST_PARTY("FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_FIRST_PARTY"),
    
    THIRD_PARTY("FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_THIRD_PARTY");

    private String value;

    FirstAndThirdPartyAudienceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FirstAndThirdPartyAudienceTypeEnum fromValue(String value) {
      for (FirstAndThirdPartyAudienceTypeEnum b : FirstAndThirdPartyAudienceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FirstAndThirdPartyAudienceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FirstAndThirdPartyAudienceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FirstAndThirdPartyAudienceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FirstAndThirdPartyAudienceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FirstAndThirdPartyAudienceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE = "firstAndThirdPartyAudienceType";
  @SerializedName(SERIALIZED_NAME_FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE)
  private FirstAndThirdPartyAudienceTypeEnum firstAndThirdPartyAudienceType;

  public static final String SERIALIZED_NAME_GMAIL_AUDIENCE_SIZE = "gmailAudienceSize";
  @SerializedName(SERIALIZED_NAME_GMAIL_AUDIENCE_SIZE)
  private String gmailAudienceSize;

  public static final String SERIALIZED_NAME_MEMBERSHIP_DURATION_DAYS = "membershipDurationDays";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_DURATION_DAYS)
  private String membershipDurationDays;

  public static final String SERIALIZED_NAME_MOBILE_DEVICE_ID_LIST = "mobileDeviceIdList";
  @SerializedName(SERIALIZED_NAME_MOBILE_DEVICE_ID_LIST)
  private MobileDeviceIdList mobileDeviceIdList;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_YOUTUBE_AUDIENCE_SIZE = "youtubeAudienceSize";
  @SerializedName(SERIALIZED_NAME_YOUTUBE_AUDIENCE_SIZE)
  private String youtubeAudienceSize;

  public FirstAndThirdPartyAudience() {
  }

  public FirstAndThirdPartyAudience(
     String activeDisplayAudienceSize, 
     AudienceSourceEnum audienceSource, 
     String displayAudienceSize, 
     String displayDesktopAudienceSize, 
     String displayMobileAppAudienceSize, 
     String displayMobileWebAudienceSize, 
     String firstAndThirdPartyAudienceId, 
     String gmailAudienceSize, 
     String name, 
     String youtubeAudienceSize
  ) {
    this();
    this.activeDisplayAudienceSize = activeDisplayAudienceSize;
    this.audienceSource = audienceSource;
    this.displayAudienceSize = displayAudienceSize;
    this.displayDesktopAudienceSize = displayDesktopAudienceSize;
    this.displayMobileAppAudienceSize = displayMobileAppAudienceSize;
    this.displayMobileWebAudienceSize = displayMobileWebAudienceSize;
    this.firstAndThirdPartyAudienceId = firstAndThirdPartyAudienceId;
    this.gmailAudienceSize = gmailAudienceSize;
    this.name = name;
    this.youtubeAudienceSize = youtubeAudienceSize;
  }

  /**
   * Output only. The estimated audience size for the Display network in the past month. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only returned in GET request.
   * @return activeDisplayAudienceSize
   */
  @javax.annotation.Nullable
  public String getActiveDisplayAudienceSize() {
    return activeDisplayAudienceSize;
  }



  public FirstAndThirdPartyAudience appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The app_id matches with the type of the mobile_device_ids being uploaded. Only applicable to audience_type &#x60;CUSTOMER_MATCH_DEVICE_ID&#x60;
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  /**
   * Output only. The source of the audience.
   * @return audienceSource
   */
  @javax.annotation.Nullable
  public AudienceSourceEnum getAudienceSource() {
    return audienceSource;
  }



  public FirstAndThirdPartyAudience audienceType(AudienceTypeEnum audienceType) {
    this.audienceType = audienceType;
    return this;
  }

  /**
   * The type of the audience.
   * @return audienceType
   */
  @javax.annotation.Nullable
  public AudienceTypeEnum getAudienceType() {
    return audienceType;
  }

  public void setAudienceType(AudienceTypeEnum audienceType) {
    this.audienceType = audienceType;
  }


  public FirstAndThirdPartyAudience contactInfoList(ContactInfoList contactInfoList) {
    this.contactInfoList = contactInfoList;
    return this;
  }

  /**
   * Get contactInfoList
   * @return contactInfoList
   */
  @javax.annotation.Nullable
  public ContactInfoList getContactInfoList() {
    return contactInfoList;
  }

  public void setContactInfoList(ContactInfoList contactInfoList) {
    this.contactInfoList = contactInfoList;
  }


  public FirstAndThirdPartyAudience description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The user-provided description of the audience. Only applicable to first party audiences.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Output only. The estimated audience size for the Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only returned in GET request.
   * @return displayAudienceSize
   */
  @javax.annotation.Nullable
  public String getDisplayAudienceSize() {
    return displayAudienceSize;
  }



  /**
   * Output only. The estimated desktop audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
   * @return displayDesktopAudienceSize
   */
  @javax.annotation.Nullable
  public String getDisplayDesktopAudienceSize() {
    return displayDesktopAudienceSize;
  }



  /**
   * Output only. The estimated mobile app audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
   * @return displayMobileAppAudienceSize
   */
  @javax.annotation.Nullable
  public String getDisplayMobileAppAudienceSize() {
    return displayMobileAppAudienceSize;
  }



  /**
   * Output only. The estimated mobile web audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
   * @return displayMobileWebAudienceSize
   */
  @javax.annotation.Nullable
  public String getDisplayMobileWebAudienceSize() {
    return displayMobileWebAudienceSize;
  }



  public FirstAndThirdPartyAudience displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the first and third party audience.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. The unique ID of the first and third party audience. Assigned by the system.
   * @return firstAndThirdPartyAudienceId
   */
  @javax.annotation.Nullable
  public String getFirstAndThirdPartyAudienceId() {
    return firstAndThirdPartyAudienceId;
  }



  public FirstAndThirdPartyAudience firstAndThirdPartyAudienceType(FirstAndThirdPartyAudienceTypeEnum firstAndThirdPartyAudienceType) {
    this.firstAndThirdPartyAudienceType = firstAndThirdPartyAudienceType;
    return this;
  }

  /**
   * Whether the audience is a first or third party audience.
   * @return firstAndThirdPartyAudienceType
   */
  @javax.annotation.Nullable
  public FirstAndThirdPartyAudienceTypeEnum getFirstAndThirdPartyAudienceType() {
    return firstAndThirdPartyAudienceType;
  }

  public void setFirstAndThirdPartyAudienceType(FirstAndThirdPartyAudienceTypeEnum firstAndThirdPartyAudienceType) {
    this.firstAndThirdPartyAudienceType = firstAndThirdPartyAudienceType;
  }


  /**
   * Output only. The estimated audience size for Gmail network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
   * @return gmailAudienceSize
   */
  @javax.annotation.Nullable
  public String getGmailAudienceSize() {
    return gmailAudienceSize;
  }



  public FirstAndThirdPartyAudience membershipDurationDays(String membershipDurationDays) {
    this.membershipDurationDays = membershipDurationDays;
    return this;
  }

  /**
   * The duration in days that an entry remains in the audience after the qualifying event. If the audience has no expiration, set the value of this field to 10000. Otherwise, the set value must be greater than 0 and less than or equal to 540. Only applicable to first party audiences. This field is required if one of the following audience_type is used: * &#x60;CUSTOMER_MATCH_CONTACT_INFO&#x60; * &#x60;CUSTOMER_MATCH_DEVICE_ID&#x60;
   * @return membershipDurationDays
   */
  @javax.annotation.Nullable
  public String getMembershipDurationDays() {
    return membershipDurationDays;
  }

  public void setMembershipDurationDays(String membershipDurationDays) {
    this.membershipDurationDays = membershipDurationDays;
  }


  public FirstAndThirdPartyAudience mobileDeviceIdList(MobileDeviceIdList mobileDeviceIdList) {
    this.mobileDeviceIdList = mobileDeviceIdList;
    return this;
  }

  /**
   * Get mobileDeviceIdList
   * @return mobileDeviceIdList
   */
  @javax.annotation.Nullable
  public MobileDeviceIdList getMobileDeviceIdList() {
    return mobileDeviceIdList;
  }

  public void setMobileDeviceIdList(MobileDeviceIdList mobileDeviceIdList) {
    this.mobileDeviceIdList = mobileDeviceIdList;
  }


  /**
   * Output only. The resource name of the first and third party audience.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The estimated audience size for YouTube network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
   * @return youtubeAudienceSize
   */
  @javax.annotation.Nullable
  public String getYoutubeAudienceSize() {
    return youtubeAudienceSize;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirstAndThirdPartyAudience firstAndThirdPartyAudience = (FirstAndThirdPartyAudience) o;
    return Objects.equals(this.activeDisplayAudienceSize, firstAndThirdPartyAudience.activeDisplayAudienceSize) &&
        Objects.equals(this.appId, firstAndThirdPartyAudience.appId) &&
        Objects.equals(this.audienceSource, firstAndThirdPartyAudience.audienceSource) &&
        Objects.equals(this.audienceType, firstAndThirdPartyAudience.audienceType) &&
        Objects.equals(this.contactInfoList, firstAndThirdPartyAudience.contactInfoList) &&
        Objects.equals(this.description, firstAndThirdPartyAudience.description) &&
        Objects.equals(this.displayAudienceSize, firstAndThirdPartyAudience.displayAudienceSize) &&
        Objects.equals(this.displayDesktopAudienceSize, firstAndThirdPartyAudience.displayDesktopAudienceSize) &&
        Objects.equals(this.displayMobileAppAudienceSize, firstAndThirdPartyAudience.displayMobileAppAudienceSize) &&
        Objects.equals(this.displayMobileWebAudienceSize, firstAndThirdPartyAudience.displayMobileWebAudienceSize) &&
        Objects.equals(this.displayName, firstAndThirdPartyAudience.displayName) &&
        Objects.equals(this.firstAndThirdPartyAudienceId, firstAndThirdPartyAudience.firstAndThirdPartyAudienceId) &&
        Objects.equals(this.firstAndThirdPartyAudienceType, firstAndThirdPartyAudience.firstAndThirdPartyAudienceType) &&
        Objects.equals(this.gmailAudienceSize, firstAndThirdPartyAudience.gmailAudienceSize) &&
        Objects.equals(this.membershipDurationDays, firstAndThirdPartyAudience.membershipDurationDays) &&
        Objects.equals(this.mobileDeviceIdList, firstAndThirdPartyAudience.mobileDeviceIdList) &&
        Objects.equals(this.name, firstAndThirdPartyAudience.name) &&
        Objects.equals(this.youtubeAudienceSize, firstAndThirdPartyAudience.youtubeAudienceSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeDisplayAudienceSize, appId, audienceSource, audienceType, contactInfoList, description, displayAudienceSize, displayDesktopAudienceSize, displayMobileAppAudienceSize, displayMobileWebAudienceSize, displayName, firstAndThirdPartyAudienceId, firstAndThirdPartyAudienceType, gmailAudienceSize, membershipDurationDays, mobileDeviceIdList, name, youtubeAudienceSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirstAndThirdPartyAudience {\n");
    sb.append("    activeDisplayAudienceSize: ").append(toIndentedString(activeDisplayAudienceSize)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    audienceSource: ").append(toIndentedString(audienceSource)).append("\n");
    sb.append("    audienceType: ").append(toIndentedString(audienceType)).append("\n");
    sb.append("    contactInfoList: ").append(toIndentedString(contactInfoList)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayAudienceSize: ").append(toIndentedString(displayAudienceSize)).append("\n");
    sb.append("    displayDesktopAudienceSize: ").append(toIndentedString(displayDesktopAudienceSize)).append("\n");
    sb.append("    displayMobileAppAudienceSize: ").append(toIndentedString(displayMobileAppAudienceSize)).append("\n");
    sb.append("    displayMobileWebAudienceSize: ").append(toIndentedString(displayMobileWebAudienceSize)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    firstAndThirdPartyAudienceId: ").append(toIndentedString(firstAndThirdPartyAudienceId)).append("\n");
    sb.append("    firstAndThirdPartyAudienceType: ").append(toIndentedString(firstAndThirdPartyAudienceType)).append("\n");
    sb.append("    gmailAudienceSize: ").append(toIndentedString(gmailAudienceSize)).append("\n");
    sb.append("    membershipDurationDays: ").append(toIndentedString(membershipDurationDays)).append("\n");
    sb.append("    mobileDeviceIdList: ").append(toIndentedString(mobileDeviceIdList)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    youtubeAudienceSize: ").append(toIndentedString(youtubeAudienceSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeDisplayAudienceSize");
    openapiFields.add("appId");
    openapiFields.add("audienceSource");
    openapiFields.add("audienceType");
    openapiFields.add("contactInfoList");
    openapiFields.add("description");
    openapiFields.add("displayAudienceSize");
    openapiFields.add("displayDesktopAudienceSize");
    openapiFields.add("displayMobileAppAudienceSize");
    openapiFields.add("displayMobileWebAudienceSize");
    openapiFields.add("displayName");
    openapiFields.add("firstAndThirdPartyAudienceId");
    openapiFields.add("firstAndThirdPartyAudienceType");
    openapiFields.add("gmailAudienceSize");
    openapiFields.add("membershipDurationDays");
    openapiFields.add("mobileDeviceIdList");
    openapiFields.add("name");
    openapiFields.add("youtubeAudienceSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FirstAndThirdPartyAudience
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FirstAndThirdPartyAudience.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FirstAndThirdPartyAudience is not found in the empty JSON string", FirstAndThirdPartyAudience.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FirstAndThirdPartyAudience.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FirstAndThirdPartyAudience` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activeDisplayAudienceSize") != null && !jsonObj.get("activeDisplayAudienceSize").isJsonNull()) && !jsonObj.get("activeDisplayAudienceSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeDisplayAudienceSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeDisplayAudienceSize").toString()));
      }
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if ((jsonObj.get("audienceSource") != null && !jsonObj.get("audienceSource").isJsonNull()) && !jsonObj.get("audienceSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audienceSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audienceSource").toString()));
      }
      // validate the optional field `audienceSource`
      if (jsonObj.get("audienceSource") != null && !jsonObj.get("audienceSource").isJsonNull()) {
        AudienceSourceEnum.validateJsonElement(jsonObj.get("audienceSource"));
      }
      if ((jsonObj.get("audienceType") != null && !jsonObj.get("audienceType").isJsonNull()) && !jsonObj.get("audienceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audienceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audienceType").toString()));
      }
      // validate the optional field `audienceType`
      if (jsonObj.get("audienceType") != null && !jsonObj.get("audienceType").isJsonNull()) {
        AudienceTypeEnum.validateJsonElement(jsonObj.get("audienceType"));
      }
      // validate the optional field `contactInfoList`
      if (jsonObj.get("contactInfoList") != null && !jsonObj.get("contactInfoList").isJsonNull()) {
        ContactInfoList.validateJsonElement(jsonObj.get("contactInfoList"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayAudienceSize") != null && !jsonObj.get("displayAudienceSize").isJsonNull()) && !jsonObj.get("displayAudienceSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayAudienceSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayAudienceSize").toString()));
      }
      if ((jsonObj.get("displayDesktopAudienceSize") != null && !jsonObj.get("displayDesktopAudienceSize").isJsonNull()) && !jsonObj.get("displayDesktopAudienceSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayDesktopAudienceSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayDesktopAudienceSize").toString()));
      }
      if ((jsonObj.get("displayMobileAppAudienceSize") != null && !jsonObj.get("displayMobileAppAudienceSize").isJsonNull()) && !jsonObj.get("displayMobileAppAudienceSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayMobileAppAudienceSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayMobileAppAudienceSize").toString()));
      }
      if ((jsonObj.get("displayMobileWebAudienceSize") != null && !jsonObj.get("displayMobileWebAudienceSize").isJsonNull()) && !jsonObj.get("displayMobileWebAudienceSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayMobileWebAudienceSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayMobileWebAudienceSize").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("firstAndThirdPartyAudienceId") != null && !jsonObj.get("firstAndThirdPartyAudienceId").isJsonNull()) && !jsonObj.get("firstAndThirdPartyAudienceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstAndThirdPartyAudienceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstAndThirdPartyAudienceId").toString()));
      }
      if ((jsonObj.get("firstAndThirdPartyAudienceType") != null && !jsonObj.get("firstAndThirdPartyAudienceType").isJsonNull()) && !jsonObj.get("firstAndThirdPartyAudienceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstAndThirdPartyAudienceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstAndThirdPartyAudienceType").toString()));
      }
      // validate the optional field `firstAndThirdPartyAudienceType`
      if (jsonObj.get("firstAndThirdPartyAudienceType") != null && !jsonObj.get("firstAndThirdPartyAudienceType").isJsonNull()) {
        FirstAndThirdPartyAudienceTypeEnum.validateJsonElement(jsonObj.get("firstAndThirdPartyAudienceType"));
      }
      if ((jsonObj.get("gmailAudienceSize") != null && !jsonObj.get("gmailAudienceSize").isJsonNull()) && !jsonObj.get("gmailAudienceSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gmailAudienceSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gmailAudienceSize").toString()));
      }
      if ((jsonObj.get("membershipDurationDays") != null && !jsonObj.get("membershipDurationDays").isJsonNull()) && !jsonObj.get("membershipDurationDays").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `membershipDurationDays` to be a primitive type in the JSON string but got `%s`", jsonObj.get("membershipDurationDays").toString()));
      }
      // validate the optional field `mobileDeviceIdList`
      if (jsonObj.get("mobileDeviceIdList") != null && !jsonObj.get("mobileDeviceIdList").isJsonNull()) {
        MobileDeviceIdList.validateJsonElement(jsonObj.get("mobileDeviceIdList"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("youtubeAudienceSize") != null && !jsonObj.get("youtubeAudienceSize").isJsonNull()) && !jsonObj.get("youtubeAudienceSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `youtubeAudienceSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("youtubeAudienceSize").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FirstAndThirdPartyAudience.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FirstAndThirdPartyAudience' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FirstAndThirdPartyAudience> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FirstAndThirdPartyAudience.class));

       return (TypeAdapter<T>) new TypeAdapter<FirstAndThirdPartyAudience>() {
           @Override
           public void write(JsonWriter out, FirstAndThirdPartyAudience value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FirstAndThirdPartyAudience read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FirstAndThirdPartyAudience given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FirstAndThirdPartyAudience
   * @throws IOException if the JSON string is invalid with respect to FirstAndThirdPartyAudience
   */
  public static FirstAndThirdPartyAudience fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FirstAndThirdPartyAudience.class);
  }

  /**
   * Convert an instance of FirstAndThirdPartyAudience to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

