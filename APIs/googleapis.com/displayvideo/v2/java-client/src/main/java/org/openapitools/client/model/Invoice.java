/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.openapitools.client.model.BudgetSummary;
import org.openapitools.client.model.DateRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single invoice.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Invoice {
  public static final String SERIALIZED_NAME_BUDGET_INVOICE_GROUPING_ID = "budgetInvoiceGroupingId";
  @SerializedName(SERIALIZED_NAME_BUDGET_INVOICE_GROUPING_ID)
  private String budgetInvoiceGroupingId;

  public static final String SERIALIZED_NAME_BUDGET_SUMMARIES = "budgetSummaries";
  @SerializedName(SERIALIZED_NAME_BUDGET_SUMMARIES)
  private List<BudgetSummary> budgetSummaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_CORRECTED_INVOICE_ID = "correctedInvoiceId";
  @SerializedName(SERIALIZED_NAME_CORRECTED_INVOICE_ID)
  private String correctedInvoiceId;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private Date dueDate;

  public static final String SERIALIZED_NAME_INVOICE_ID = "invoiceId";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  private String invoiceId;

  /**
   * The type of invoice document.
   */
  @JsonAdapter(InvoiceTypeEnum.Adapter.class)
  public enum InvoiceTypeEnum {
    UNSPECIFIED("INVOICE_TYPE_UNSPECIFIED"),
    
    CREDIT("INVOICE_TYPE_CREDIT"),
    
    INVOICE("INVOICE_TYPE_INVOICE");

    private String value;

    InvoiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvoiceTypeEnum fromValue(String value) {
      for (InvoiceTypeEnum b : InvoiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvoiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvoiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvoiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvoiceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InvoiceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVOICE_TYPE = "invoiceType";
  @SerializedName(SERIALIZED_NAME_INVOICE_TYPE)
  private InvoiceTypeEnum invoiceType;

  public static final String SERIALIZED_NAME_ISSUE_DATE = "issueDate";
  @SerializedName(SERIALIZED_NAME_ISSUE_DATE)
  private Date issueDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NON_BUDGET_MICROS = "nonBudgetMicros";
  @SerializedName(SERIALIZED_NAME_NON_BUDGET_MICROS)
  private String nonBudgetMicros;

  public static final String SERIALIZED_NAME_PAYMENTS_ACCOUNT_ID = "paymentsAccountId";
  @SerializedName(SERIALIZED_NAME_PAYMENTS_ACCOUNT_ID)
  private String paymentsAccountId;

  public static final String SERIALIZED_NAME_PAYMENTS_PROFILE_ID = "paymentsProfileId";
  @SerializedName(SERIALIZED_NAME_PAYMENTS_PROFILE_ID)
  private String paymentsProfileId;

  public static final String SERIALIZED_NAME_PDF_URL = "pdfUrl";
  @SerializedName(SERIALIZED_NAME_PDF_URL)
  private String pdfUrl;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER_NUMBER = "purchaseOrderNumber";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER_NUMBER)
  private String purchaseOrderNumber;

  public static final String SERIALIZED_NAME_REPLACED_INVOICE_IDS = "replacedInvoiceIds";
  @SerializedName(SERIALIZED_NAME_REPLACED_INVOICE_IDS)
  private List<String> replacedInvoiceIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_DATE_RANGE = "serviceDateRange";
  @SerializedName(SERIALIZED_NAME_SERVICE_DATE_RANGE)
  private DateRange serviceDateRange;

  public static final String SERIALIZED_NAME_SUBTOTAL_AMOUNT_MICROS = "subtotalAmountMicros";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_AMOUNT_MICROS)
  private String subtotalAmountMicros;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT_MICROS = "totalAmountMicros";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_MICROS)
  private String totalAmountMicros;

  public static final String SERIALIZED_NAME_TOTAL_TAX_AMOUNT_MICROS = "totalTaxAmountMicros";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX_AMOUNT_MICROS)
  private String totalTaxAmountMicros;

  public Invoice() {
  }

  public Invoice budgetInvoiceGroupingId(String budgetInvoiceGroupingId) {
    this.budgetInvoiceGroupingId = budgetInvoiceGroupingId;
    return this;
  }

  /**
   * The budget grouping ID for this invoice. This field will only be set if the invoice level of the corresponding billing profile was set to \&quot;Budget invoice grouping ID\&quot;.
   * @return budgetInvoiceGroupingId
   */
  @javax.annotation.Nullable
  public String getBudgetInvoiceGroupingId() {
    return budgetInvoiceGroupingId;
  }

  public void setBudgetInvoiceGroupingId(String budgetInvoiceGroupingId) {
    this.budgetInvoiceGroupingId = budgetInvoiceGroupingId;
  }


  public Invoice budgetSummaries(List<BudgetSummary> budgetSummaries) {
    this.budgetSummaries = budgetSummaries;
    return this;
  }

  public Invoice addBudgetSummariesItem(BudgetSummary budgetSummariesItem) {
    if (this.budgetSummaries == null) {
      this.budgetSummaries = new ArrayList<>();
    }
    this.budgetSummaries.add(budgetSummariesItem);
    return this;
  }

  /**
   * The list of summarized information for each budget associated with this invoice. This field will only be set if the invoice detail level of the corresponding billing profile was set to \&quot;Budget level PO\&quot;.
   * @return budgetSummaries
   */
  @javax.annotation.Nullable
  public List<BudgetSummary> getBudgetSummaries() {
    return budgetSummaries;
  }

  public void setBudgetSummaries(List<BudgetSummary> budgetSummaries) {
    this.budgetSummaries = budgetSummaries;
  }


  public Invoice correctedInvoiceId(String correctedInvoiceId) {
    this.correctedInvoiceId = correctedInvoiceId;
    return this;
  }

  /**
   * The ID of the original invoice being adjusted by this invoice, if applicable. May appear on the invoice PDF as &#x60;Reference invoice number&#x60;. If replaced_invoice_ids is set, this field will be empty.
   * @return correctedInvoiceId
   */
  @javax.annotation.Nullable
  public String getCorrectedInvoiceId() {
    return correctedInvoiceId;
  }

  public void setCorrectedInvoiceId(String correctedInvoiceId) {
    this.correctedInvoiceId = correctedInvoiceId;
  }


  public Invoice currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency used in the invoice in ISO 4217 format.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Invoice displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the invoice.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Invoice dueDate(Date dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Get dueDate
   * @return dueDate
   */
  @javax.annotation.Nullable
  public Date getDueDate() {
    return dueDate;
  }

  public void setDueDate(Date dueDate) {
    this.dueDate = dueDate;
  }


  public Invoice invoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
    return this;
  }

  /**
   * The unique ID of the invoice.
   * @return invoiceId
   */
  @javax.annotation.Nullable
  public String getInvoiceId() {
    return invoiceId;
  }

  public void setInvoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
  }


  public Invoice invoiceType(InvoiceTypeEnum invoiceType) {
    this.invoiceType = invoiceType;
    return this;
  }

  /**
   * The type of invoice document.
   * @return invoiceType
   */
  @javax.annotation.Nullable
  public InvoiceTypeEnum getInvoiceType() {
    return invoiceType;
  }

  public void setInvoiceType(InvoiceTypeEnum invoiceType) {
    this.invoiceType = invoiceType;
  }


  public Invoice issueDate(Date issueDate) {
    this.issueDate = issueDate;
    return this;
  }

  /**
   * Get issueDate
   * @return issueDate
   */
  @javax.annotation.Nullable
  public Date getIssueDate() {
    return issueDate;
  }

  public void setIssueDate(Date issueDate) {
    this.issueDate = issueDate;
  }


  public Invoice name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the invoice.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Invoice nonBudgetMicros(String nonBudgetMicros) {
    this.nonBudgetMicros = nonBudgetMicros;
    return this;
  }

  /**
   * The total amount of costs or adjustments not tied to a particular budget, in micros of the invoice&#39;s currency. For example, if currency_code is &#x60;USD&#x60;, then 1000000 represents one US dollar.
   * @return nonBudgetMicros
   */
  @javax.annotation.Nullable
  public String getNonBudgetMicros() {
    return nonBudgetMicros;
  }

  public void setNonBudgetMicros(String nonBudgetMicros) {
    this.nonBudgetMicros = nonBudgetMicros;
  }


  public Invoice paymentsAccountId(String paymentsAccountId) {
    this.paymentsAccountId = paymentsAccountId;
    return this;
  }

  /**
   * The ID of the payments account the invoice belongs to. Appears on the invoice PDF as &#x60;Billing Account Number&#x60;.
   * @return paymentsAccountId
   */
  @javax.annotation.Nullable
  public String getPaymentsAccountId() {
    return paymentsAccountId;
  }

  public void setPaymentsAccountId(String paymentsAccountId) {
    this.paymentsAccountId = paymentsAccountId;
  }


  public Invoice paymentsProfileId(String paymentsProfileId) {
    this.paymentsProfileId = paymentsProfileId;
    return this;
  }

  /**
   * The ID of the payments profile the invoice belongs to. Appears on the invoice PDF as &#x60;Billing ID&#x60;.
   * @return paymentsProfileId
   */
  @javax.annotation.Nullable
  public String getPaymentsProfileId() {
    return paymentsProfileId;
  }

  public void setPaymentsProfileId(String paymentsProfileId) {
    this.paymentsProfileId = paymentsProfileId;
  }


  public Invoice pdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
    return this;
  }

  /**
   * The URL to download a PDF copy of the invoice. This URL is user specific and requires a valid OAuth 2.0 access token to access. The access token must be provided in an &#x60;Authorization: Bearer&#x60; HTTP header and be authorized for one of the following scopes: * &#x60;https://www.googleapis.com/auth/display-video-mediaplanning&#x60; * &#x60;https://www.googleapis.com/auth/display-video&#x60; The URL will be valid for 7 days after retrieval of this invoice object or until this invoice is retrieved again.
   * @return pdfUrl
   */
  @javax.annotation.Nullable
  public String getPdfUrl() {
    return pdfUrl;
  }

  public void setPdfUrl(String pdfUrl) {
    this.pdfUrl = pdfUrl;
  }


  public Invoice purchaseOrderNumber(String purchaseOrderNumber) {
    this.purchaseOrderNumber = purchaseOrderNumber;
    return this;
  }

  /**
   * Purchase order number associated with the invoice.
   * @return purchaseOrderNumber
   */
  @javax.annotation.Nullable
  public String getPurchaseOrderNumber() {
    return purchaseOrderNumber;
  }

  public void setPurchaseOrderNumber(String purchaseOrderNumber) {
    this.purchaseOrderNumber = purchaseOrderNumber;
  }


  public Invoice replacedInvoiceIds(List<String> replacedInvoiceIds) {
    this.replacedInvoiceIds = replacedInvoiceIds;
    return this;
  }

  public Invoice addReplacedInvoiceIdsItem(String replacedInvoiceIdsItem) {
    if (this.replacedInvoiceIds == null) {
      this.replacedInvoiceIds = new ArrayList<>();
    }
    this.replacedInvoiceIds.add(replacedInvoiceIdsItem);
    return this;
  }

  /**
   * The ID(s) of any originally issued invoice that is being cancelled by this invoice, if applicable. Multiple invoices may be listed if those invoices are being consolidated into a single invoice. May appear on invoice PDF as &#x60;Replaced invoice numbers&#x60;. If corrected_invoice_id is set, this field will be empty.
   * @return replacedInvoiceIds
   */
  @javax.annotation.Nullable
  public List<String> getReplacedInvoiceIds() {
    return replacedInvoiceIds;
  }

  public void setReplacedInvoiceIds(List<String> replacedInvoiceIds) {
    this.replacedInvoiceIds = replacedInvoiceIds;
  }


  public Invoice serviceDateRange(DateRange serviceDateRange) {
    this.serviceDateRange = serviceDateRange;
    return this;
  }

  /**
   * Get serviceDateRange
   * @return serviceDateRange
   */
  @javax.annotation.Nullable
  public DateRange getServiceDateRange() {
    return serviceDateRange;
  }

  public void setServiceDateRange(DateRange serviceDateRange) {
    this.serviceDateRange = serviceDateRange;
  }


  public Invoice subtotalAmountMicros(String subtotalAmountMicros) {
    this.subtotalAmountMicros = subtotalAmountMicros;
    return this;
  }

  /**
   * The pre-tax subtotal amount, in micros of the invoice&#39;s currency. For example, if currency_code is &#x60;USD&#x60;, then 1000000 represents one US dollar.
   * @return subtotalAmountMicros
   */
  @javax.annotation.Nullable
  public String getSubtotalAmountMicros() {
    return subtotalAmountMicros;
  }

  public void setSubtotalAmountMicros(String subtotalAmountMicros) {
    this.subtotalAmountMicros = subtotalAmountMicros;
  }


  public Invoice totalAmountMicros(String totalAmountMicros) {
    this.totalAmountMicros = totalAmountMicros;
    return this;
  }

  /**
   * The invoice total amount, in micros of the invoice&#39;s currency. For example, if currency_code is &#x60;USD&#x60;, then 1000000 represents one US dollar.
   * @return totalAmountMicros
   */
  @javax.annotation.Nullable
  public String getTotalAmountMicros() {
    return totalAmountMicros;
  }

  public void setTotalAmountMicros(String totalAmountMicros) {
    this.totalAmountMicros = totalAmountMicros;
  }


  public Invoice totalTaxAmountMicros(String totalTaxAmountMicros) {
    this.totalTaxAmountMicros = totalTaxAmountMicros;
    return this;
  }

  /**
   * The sum of all taxes in invoice, in micros of the invoice&#39;s currency. For example, if currency_code is &#x60;USD&#x60;, then 1000000 represents one US dollar.
   * @return totalTaxAmountMicros
   */
  @javax.annotation.Nullable
  public String getTotalTaxAmountMicros() {
    return totalTaxAmountMicros;
  }

  public void setTotalTaxAmountMicros(String totalTaxAmountMicros) {
    this.totalTaxAmountMicros = totalTaxAmountMicros;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Invoice invoice = (Invoice) o;
    return Objects.equals(this.budgetInvoiceGroupingId, invoice.budgetInvoiceGroupingId) &&
        Objects.equals(this.budgetSummaries, invoice.budgetSummaries) &&
        Objects.equals(this.correctedInvoiceId, invoice.correctedInvoiceId) &&
        Objects.equals(this.currencyCode, invoice.currencyCode) &&
        Objects.equals(this.displayName, invoice.displayName) &&
        Objects.equals(this.dueDate, invoice.dueDate) &&
        Objects.equals(this.invoiceId, invoice.invoiceId) &&
        Objects.equals(this.invoiceType, invoice.invoiceType) &&
        Objects.equals(this.issueDate, invoice.issueDate) &&
        Objects.equals(this.name, invoice.name) &&
        Objects.equals(this.nonBudgetMicros, invoice.nonBudgetMicros) &&
        Objects.equals(this.paymentsAccountId, invoice.paymentsAccountId) &&
        Objects.equals(this.paymentsProfileId, invoice.paymentsProfileId) &&
        Objects.equals(this.pdfUrl, invoice.pdfUrl) &&
        Objects.equals(this.purchaseOrderNumber, invoice.purchaseOrderNumber) &&
        Objects.equals(this.replacedInvoiceIds, invoice.replacedInvoiceIds) &&
        Objects.equals(this.serviceDateRange, invoice.serviceDateRange) &&
        Objects.equals(this.subtotalAmountMicros, invoice.subtotalAmountMicros) &&
        Objects.equals(this.totalAmountMicros, invoice.totalAmountMicros) &&
        Objects.equals(this.totalTaxAmountMicros, invoice.totalTaxAmountMicros);
  }

  @Override
  public int hashCode() {
    return Objects.hash(budgetInvoiceGroupingId, budgetSummaries, correctedInvoiceId, currencyCode, displayName, dueDate, invoiceId, invoiceType, issueDate, name, nonBudgetMicros, paymentsAccountId, paymentsProfileId, pdfUrl, purchaseOrderNumber, replacedInvoiceIds, serviceDateRange, subtotalAmountMicros, totalAmountMicros, totalTaxAmountMicros);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Invoice {\n");
    sb.append("    budgetInvoiceGroupingId: ").append(toIndentedString(budgetInvoiceGroupingId)).append("\n");
    sb.append("    budgetSummaries: ").append(toIndentedString(budgetSummaries)).append("\n");
    sb.append("    correctedInvoiceId: ").append(toIndentedString(correctedInvoiceId)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    invoiceType: ").append(toIndentedString(invoiceType)).append("\n");
    sb.append("    issueDate: ").append(toIndentedString(issueDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nonBudgetMicros: ").append(toIndentedString(nonBudgetMicros)).append("\n");
    sb.append("    paymentsAccountId: ").append(toIndentedString(paymentsAccountId)).append("\n");
    sb.append("    paymentsProfileId: ").append(toIndentedString(paymentsProfileId)).append("\n");
    sb.append("    pdfUrl: ").append(toIndentedString(pdfUrl)).append("\n");
    sb.append("    purchaseOrderNumber: ").append(toIndentedString(purchaseOrderNumber)).append("\n");
    sb.append("    replacedInvoiceIds: ").append(toIndentedString(replacedInvoiceIds)).append("\n");
    sb.append("    serviceDateRange: ").append(toIndentedString(serviceDateRange)).append("\n");
    sb.append("    subtotalAmountMicros: ").append(toIndentedString(subtotalAmountMicros)).append("\n");
    sb.append("    totalAmountMicros: ").append(toIndentedString(totalAmountMicros)).append("\n");
    sb.append("    totalTaxAmountMicros: ").append(toIndentedString(totalTaxAmountMicros)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("budgetInvoiceGroupingId");
    openapiFields.add("budgetSummaries");
    openapiFields.add("correctedInvoiceId");
    openapiFields.add("currencyCode");
    openapiFields.add("displayName");
    openapiFields.add("dueDate");
    openapiFields.add("invoiceId");
    openapiFields.add("invoiceType");
    openapiFields.add("issueDate");
    openapiFields.add("name");
    openapiFields.add("nonBudgetMicros");
    openapiFields.add("paymentsAccountId");
    openapiFields.add("paymentsProfileId");
    openapiFields.add("pdfUrl");
    openapiFields.add("purchaseOrderNumber");
    openapiFields.add("replacedInvoiceIds");
    openapiFields.add("serviceDateRange");
    openapiFields.add("subtotalAmountMicros");
    openapiFields.add("totalAmountMicros");
    openapiFields.add("totalTaxAmountMicros");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Invoice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Invoice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Invoice is not found in the empty JSON string", Invoice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Invoice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Invoice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("budgetInvoiceGroupingId") != null && !jsonObj.get("budgetInvoiceGroupingId").isJsonNull()) && !jsonObj.get("budgetInvoiceGroupingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budgetInvoiceGroupingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budgetInvoiceGroupingId").toString()));
      }
      if (jsonObj.get("budgetSummaries") != null && !jsonObj.get("budgetSummaries").isJsonNull()) {
        JsonArray jsonArraybudgetSummaries = jsonObj.getAsJsonArray("budgetSummaries");
        if (jsonArraybudgetSummaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("budgetSummaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `budgetSummaries` to be an array in the JSON string but got `%s`", jsonObj.get("budgetSummaries").toString()));
          }

          // validate the optional field `budgetSummaries` (array)
          for (int i = 0; i < jsonArraybudgetSummaries.size(); i++) {
            BudgetSummary.validateJsonElement(jsonArraybudgetSummaries.get(i));
          };
        }
      }
      if ((jsonObj.get("correctedInvoiceId") != null && !jsonObj.get("correctedInvoiceId").isJsonNull()) && !jsonObj.get("correctedInvoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correctedInvoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correctedInvoiceId").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `dueDate`
      if (jsonObj.get("dueDate") != null && !jsonObj.get("dueDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("dueDate"));
      }
      if ((jsonObj.get("invoiceId") != null && !jsonObj.get("invoiceId").isJsonNull()) && !jsonObj.get("invoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceId").toString()));
      }
      if ((jsonObj.get("invoiceType") != null && !jsonObj.get("invoiceType").isJsonNull()) && !jsonObj.get("invoiceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceType").toString()));
      }
      // validate the optional field `invoiceType`
      if (jsonObj.get("invoiceType") != null && !jsonObj.get("invoiceType").isJsonNull()) {
        InvoiceTypeEnum.validateJsonElement(jsonObj.get("invoiceType"));
      }
      // validate the optional field `issueDate`
      if (jsonObj.get("issueDate") != null && !jsonObj.get("issueDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("issueDate"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nonBudgetMicros") != null && !jsonObj.get("nonBudgetMicros").isJsonNull()) && !jsonObj.get("nonBudgetMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonBudgetMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonBudgetMicros").toString()));
      }
      if ((jsonObj.get("paymentsAccountId") != null && !jsonObj.get("paymentsAccountId").isJsonNull()) && !jsonObj.get("paymentsAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentsAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentsAccountId").toString()));
      }
      if ((jsonObj.get("paymentsProfileId") != null && !jsonObj.get("paymentsProfileId").isJsonNull()) && !jsonObj.get("paymentsProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentsProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentsProfileId").toString()));
      }
      if ((jsonObj.get("pdfUrl") != null && !jsonObj.get("pdfUrl").isJsonNull()) && !jsonObj.get("pdfUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdfUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdfUrl").toString()));
      }
      if ((jsonObj.get("purchaseOrderNumber") != null && !jsonObj.get("purchaseOrderNumber").isJsonNull()) && !jsonObj.get("purchaseOrderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseOrderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseOrderNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("replacedInvoiceIds") != null && !jsonObj.get("replacedInvoiceIds").isJsonNull() && !jsonObj.get("replacedInvoiceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `replacedInvoiceIds` to be an array in the JSON string but got `%s`", jsonObj.get("replacedInvoiceIds").toString()));
      }
      // validate the optional field `serviceDateRange`
      if (jsonObj.get("serviceDateRange") != null && !jsonObj.get("serviceDateRange").isJsonNull()) {
        DateRange.validateJsonElement(jsonObj.get("serviceDateRange"));
      }
      if ((jsonObj.get("subtotalAmountMicros") != null && !jsonObj.get("subtotalAmountMicros").isJsonNull()) && !jsonObj.get("subtotalAmountMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtotalAmountMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtotalAmountMicros").toString()));
      }
      if ((jsonObj.get("totalAmountMicros") != null && !jsonObj.get("totalAmountMicros").isJsonNull()) && !jsonObj.get("totalAmountMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalAmountMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalAmountMicros").toString()));
      }
      if ((jsonObj.get("totalTaxAmountMicros") != null && !jsonObj.get("totalTaxAmountMicros").isJsonNull()) && !jsonObj.get("totalTaxAmountMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalTaxAmountMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalTaxAmountMicros").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Invoice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Invoice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Invoice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Invoice.class));

       return (TypeAdapter<T>) new TypeAdapter<Invoice>() {
           @Override
           public void write(JsonWriter out, Invoice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Invoice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Invoice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Invoice
   * @throws IOException if the JSON string is invalid with respect to Invoice
   */
  public static Invoice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Invoice.class);
  }

  /**
   * Convert an instance of Invoice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

