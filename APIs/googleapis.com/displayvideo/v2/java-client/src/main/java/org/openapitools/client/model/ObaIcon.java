/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Dimensions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OBA Icon for a Creative
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ObaIcon {
  public static final String SERIALIZED_NAME_CLICK_TRACKING_URL = "clickTrackingUrl";
  @SerializedName(SERIALIZED_NAME_CLICK_TRACKING_URL)
  private String clickTrackingUrl;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Dimensions dimensions;

  public static final String SERIALIZED_NAME_LANDING_PAGE_URL = "landingPageUrl";
  @SerializedName(SERIALIZED_NAME_LANDING_PAGE_URL)
  private String landingPageUrl;

  /**
   * The position of the OBA icon on the creative.
   */
  @JsonAdapter(PositionEnum.Adapter.class)
  public enum PositionEnum {
    UNSPECIFIED("OBA_ICON_POSITION_UNSPECIFIED"),
    
    UPPER_RIGHT("OBA_ICON_POSITION_UPPER_RIGHT"),
    
    UPPER_LEFT("OBA_ICON_POSITION_UPPER_LEFT"),
    
    LOWER_RIGHT("OBA_ICON_POSITION_LOWER_RIGHT"),
    
    LOWER_LEFT("OBA_ICON_POSITION_LOWER_LEFT");

    private String value;

    PositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PositionEnum fromValue(String value) {
      for (PositionEnum b : PositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private PositionEnum position;

  public static final String SERIALIZED_NAME_PROGRAM = "program";
  @SerializedName(SERIALIZED_NAME_PROGRAM)
  private String program;

  public static final String SERIALIZED_NAME_RESOURCE_MIME_TYPE = "resourceMimeType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_MIME_TYPE)
  private String resourceMimeType;

  public static final String SERIALIZED_NAME_RESOURCE_URL = "resourceUrl";
  @SerializedName(SERIALIZED_NAME_RESOURCE_URL)
  private String resourceUrl;

  public static final String SERIALIZED_NAME_VIEW_TRACKING_URL = "viewTrackingUrl";
  @SerializedName(SERIALIZED_NAME_VIEW_TRACKING_URL)
  private String viewTrackingUrl;

  public ObaIcon() {
  }

  public ObaIcon clickTrackingUrl(String clickTrackingUrl) {
    this.clickTrackingUrl = clickTrackingUrl;
    return this;
  }

  /**
   * Required. The click tracking URL of the OBA icon. Only URLs of the following domains are allowed: * https://info.evidon.com * https://l.betrad.com
   * @return clickTrackingUrl
   */
  @javax.annotation.Nullable
  public String getClickTrackingUrl() {
    return clickTrackingUrl;
  }

  public void setClickTrackingUrl(String clickTrackingUrl) {
    this.clickTrackingUrl = clickTrackingUrl;
  }


  public ObaIcon dimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public Dimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
  }


  public ObaIcon landingPageUrl(String landingPageUrl) {
    this.landingPageUrl = landingPageUrl;
    return this;
  }

  /**
   * Required. The landing page URL of the OBA icon. Only URLs of the following domains are allowed: * https://info.evidon.com * https://l.betrad.com
   * @return landingPageUrl
   */
  @javax.annotation.Nullable
  public String getLandingPageUrl() {
    return landingPageUrl;
  }

  public void setLandingPageUrl(String landingPageUrl) {
    this.landingPageUrl = landingPageUrl;
  }


  public ObaIcon position(PositionEnum position) {
    this.position = position;
    return this;
  }

  /**
   * The position of the OBA icon on the creative.
   * @return position
   */
  @javax.annotation.Nullable
  public PositionEnum getPosition() {
    return position;
  }

  public void setPosition(PositionEnum position) {
    this.position = position;
  }


  public ObaIcon program(String program) {
    this.program = program;
    return this;
  }

  /**
   * The program of the OBA icon. For example: “AdChoices”.
   * @return program
   */
  @javax.annotation.Nullable
  public String getProgram() {
    return program;
  }

  public void setProgram(String program) {
    this.program = program;
  }


  public ObaIcon resourceMimeType(String resourceMimeType) {
    this.resourceMimeType = resourceMimeType;
    return this;
  }

  /**
   * The MIME type of the OBA icon resource.
   * @return resourceMimeType
   */
  @javax.annotation.Nullable
  public String getResourceMimeType() {
    return resourceMimeType;
  }

  public void setResourceMimeType(String resourceMimeType) {
    this.resourceMimeType = resourceMimeType;
  }


  public ObaIcon resourceUrl(String resourceUrl) {
    this.resourceUrl = resourceUrl;
    return this;
  }

  /**
   * The URL of the OBA icon resource.
   * @return resourceUrl
   */
  @javax.annotation.Nullable
  public String getResourceUrl() {
    return resourceUrl;
  }

  public void setResourceUrl(String resourceUrl) {
    this.resourceUrl = resourceUrl;
  }


  public ObaIcon viewTrackingUrl(String viewTrackingUrl) {
    this.viewTrackingUrl = viewTrackingUrl;
    return this;
  }

  /**
   * Required. The view tracking URL of the OBA icon. Only URLs of the following domains are allowed: * https://info.evidon.com * https://l.betrad.com
   * @return viewTrackingUrl
   */
  @javax.annotation.Nullable
  public String getViewTrackingUrl() {
    return viewTrackingUrl;
  }

  public void setViewTrackingUrl(String viewTrackingUrl) {
    this.viewTrackingUrl = viewTrackingUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObaIcon obaIcon = (ObaIcon) o;
    return Objects.equals(this.clickTrackingUrl, obaIcon.clickTrackingUrl) &&
        Objects.equals(this.dimensions, obaIcon.dimensions) &&
        Objects.equals(this.landingPageUrl, obaIcon.landingPageUrl) &&
        Objects.equals(this.position, obaIcon.position) &&
        Objects.equals(this.program, obaIcon.program) &&
        Objects.equals(this.resourceMimeType, obaIcon.resourceMimeType) &&
        Objects.equals(this.resourceUrl, obaIcon.resourceUrl) &&
        Objects.equals(this.viewTrackingUrl, obaIcon.viewTrackingUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clickTrackingUrl, dimensions, landingPageUrl, position, program, resourceMimeType, resourceUrl, viewTrackingUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObaIcon {\n");
    sb.append("    clickTrackingUrl: ").append(toIndentedString(clickTrackingUrl)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    landingPageUrl: ").append(toIndentedString(landingPageUrl)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    program: ").append(toIndentedString(program)).append("\n");
    sb.append("    resourceMimeType: ").append(toIndentedString(resourceMimeType)).append("\n");
    sb.append("    resourceUrl: ").append(toIndentedString(resourceUrl)).append("\n");
    sb.append("    viewTrackingUrl: ").append(toIndentedString(viewTrackingUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clickTrackingUrl");
    openapiFields.add("dimensions");
    openapiFields.add("landingPageUrl");
    openapiFields.add("position");
    openapiFields.add("program");
    openapiFields.add("resourceMimeType");
    openapiFields.add("resourceUrl");
    openapiFields.add("viewTrackingUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ObaIcon
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObaIcon.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObaIcon is not found in the empty JSON string", ObaIcon.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObaIcon.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObaIcon` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clickTrackingUrl") != null && !jsonObj.get("clickTrackingUrl").isJsonNull()) && !jsonObj.get("clickTrackingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickTrackingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickTrackingUrl").toString()));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        Dimensions.validateJsonElement(jsonObj.get("dimensions"));
      }
      if ((jsonObj.get("landingPageUrl") != null && !jsonObj.get("landingPageUrl").isJsonNull()) && !jsonObj.get("landingPageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `landingPageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("landingPageUrl").toString()));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      // validate the optional field `position`
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
        PositionEnum.validateJsonElement(jsonObj.get("position"));
      }
      if ((jsonObj.get("program") != null && !jsonObj.get("program").isJsonNull()) && !jsonObj.get("program").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `program` to be a primitive type in the JSON string but got `%s`", jsonObj.get("program").toString()));
      }
      if ((jsonObj.get("resourceMimeType") != null && !jsonObj.get("resourceMimeType").isJsonNull()) && !jsonObj.get("resourceMimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceMimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceMimeType").toString()));
      }
      if ((jsonObj.get("resourceUrl") != null && !jsonObj.get("resourceUrl").isJsonNull()) && !jsonObj.get("resourceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceUrl").toString()));
      }
      if ((jsonObj.get("viewTrackingUrl") != null && !jsonObj.get("viewTrackingUrl").isJsonNull()) && !jsonObj.get("viewTrackingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewTrackingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewTrackingUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObaIcon.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObaIcon' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObaIcon> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObaIcon.class));

       return (TypeAdapter<T>) new TypeAdapter<ObaIcon>() {
           @Override
           public void write(JsonWriter out, ObaIcon value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObaIcon read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ObaIcon given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ObaIcon
   * @throws IOException if the JSON string is invalid with respect to ObaIcon
   */
  public static ObaIcon fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObaIcon.class);
  }

  /**
   * Convert an instance of ObaIcon to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

