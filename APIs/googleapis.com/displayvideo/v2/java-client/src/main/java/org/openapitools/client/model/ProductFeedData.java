/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProductMatchDimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of product feed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductFeedData {
  public static final String SERIALIZED_NAME_IS_FEED_DISABLED = "isFeedDisabled";
  @SerializedName(SERIALIZED_NAME_IS_FEED_DISABLED)
  private Boolean isFeedDisabled;

  public static final String SERIALIZED_NAME_PRODUCT_MATCH_DIMENSIONS = "productMatchDimensions";
  @SerializedName(SERIALIZED_NAME_PRODUCT_MATCH_DIMENSIONS)
  private List<ProductMatchDimension> productMatchDimensions = new ArrayList<>();

  /**
   * How products are selected by the product feed.
   */
  @JsonAdapter(ProductMatchTypeEnum.Adapter.class)
  public enum ProductMatchTypeEnum {
    UNSPECIFIED("PRODUCT_MATCH_TYPE_UNSPECIFIED"),
    
    ALL_PRODUCTS("PRODUCT_MATCH_TYPE_ALL_PRODUCTS"),
    
    SPECIFIC_PRODUCTS("PRODUCT_MATCH_TYPE_SPECIFIC_PRODUCTS"),
    
    CUSTOM_LABEL("PRODUCT_MATCH_TYPE_CUSTOM_LABEL");

    private String value;

    ProductMatchTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductMatchTypeEnum fromValue(String value) {
      for (ProductMatchTypeEnum b : ProductMatchTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductMatchTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductMatchTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductMatchTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductMatchTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductMatchTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_MATCH_TYPE = "productMatchType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_MATCH_TYPE)
  private ProductMatchTypeEnum productMatchType;

  public ProductFeedData() {
  }

  public ProductFeedData isFeedDisabled(Boolean isFeedDisabled) {
    this.isFeedDisabled = isFeedDisabled;
    return this;
  }

  /**
   * Whether the product feed has opted-out of showing products.
   * @return isFeedDisabled
   */
  @javax.annotation.Nullable
  public Boolean getIsFeedDisabled() {
    return isFeedDisabled;
  }

  public void setIsFeedDisabled(Boolean isFeedDisabled) {
    this.isFeedDisabled = isFeedDisabled;
  }


  public ProductFeedData productMatchDimensions(List<ProductMatchDimension> productMatchDimensions) {
    this.productMatchDimensions = productMatchDimensions;
    return this;
  }

  public ProductFeedData addProductMatchDimensionsItem(ProductMatchDimension productMatchDimensionsItem) {
    if (this.productMatchDimensions == null) {
      this.productMatchDimensions = new ArrayList<>();
    }
    this.productMatchDimensions.add(productMatchDimensionsItem);
    return this;
  }

  /**
   * A list of dimensions used to match products.
   * @return productMatchDimensions
   */
  @javax.annotation.Nullable
  public List<ProductMatchDimension> getProductMatchDimensions() {
    return productMatchDimensions;
  }

  public void setProductMatchDimensions(List<ProductMatchDimension> productMatchDimensions) {
    this.productMatchDimensions = productMatchDimensions;
  }


  public ProductFeedData productMatchType(ProductMatchTypeEnum productMatchType) {
    this.productMatchType = productMatchType;
    return this;
  }

  /**
   * How products are selected by the product feed.
   * @return productMatchType
   */
  @javax.annotation.Nullable
  public ProductMatchTypeEnum getProductMatchType() {
    return productMatchType;
  }

  public void setProductMatchType(ProductMatchTypeEnum productMatchType) {
    this.productMatchType = productMatchType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductFeedData productFeedData = (ProductFeedData) o;
    return Objects.equals(this.isFeedDisabled, productFeedData.isFeedDisabled) &&
        Objects.equals(this.productMatchDimensions, productFeedData.productMatchDimensions) &&
        Objects.equals(this.productMatchType, productFeedData.productMatchType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isFeedDisabled, productMatchDimensions, productMatchType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductFeedData {\n");
    sb.append("    isFeedDisabled: ").append(toIndentedString(isFeedDisabled)).append("\n");
    sb.append("    productMatchDimensions: ").append(toIndentedString(productMatchDimensions)).append("\n");
    sb.append("    productMatchType: ").append(toIndentedString(productMatchType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isFeedDisabled");
    openapiFields.add("productMatchDimensions");
    openapiFields.add("productMatchType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductFeedData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductFeedData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductFeedData is not found in the empty JSON string", ProductFeedData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductFeedData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductFeedData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("productMatchDimensions") != null && !jsonObj.get("productMatchDimensions").isJsonNull()) {
        JsonArray jsonArrayproductMatchDimensions = jsonObj.getAsJsonArray("productMatchDimensions");
        if (jsonArrayproductMatchDimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productMatchDimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productMatchDimensions` to be an array in the JSON string but got `%s`", jsonObj.get("productMatchDimensions").toString()));
          }

          // validate the optional field `productMatchDimensions` (array)
          for (int i = 0; i < jsonArrayproductMatchDimensions.size(); i++) {
            ProductMatchDimension.validateJsonElement(jsonArrayproductMatchDimensions.get(i));
          };
        }
      }
      if ((jsonObj.get("productMatchType") != null && !jsonObj.get("productMatchType").isJsonNull()) && !jsonObj.get("productMatchType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productMatchType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productMatchType").toString()));
      }
      // validate the optional field `productMatchType`
      if (jsonObj.get("productMatchType") != null && !jsonObj.get("productMatchType").isJsonNull()) {
        ProductMatchTypeEnum.validateJsonElement(jsonObj.get("productMatchType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductFeedData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductFeedData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductFeedData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductFeedData.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductFeedData>() {
           @Override
           public void write(JsonWriter out, ProductFeedData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductFeedData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductFeedData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductFeedData
   * @throws IOException if the JSON string is invalid with respect to ProductFeedData
   */
  public static ProductFeedData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductFeedData.class);
  }

  /**
   * Convert an instance of ProductFeedData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

