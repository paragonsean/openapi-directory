/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DateRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings that control the budget of a single budget segment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InsertionOrderBudgetSegment {
  public static final String SERIALIZED_NAME_BUDGET_AMOUNT_MICROS = "budgetAmountMicros";
  @SerializedName(SERIALIZED_NAME_BUDGET_AMOUNT_MICROS)
  private String budgetAmountMicros;

  public static final String SERIALIZED_NAME_CAMPAIGN_BUDGET_ID = "campaignBudgetId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_BUDGET_ID)
  private String campaignBudgetId;

  public static final String SERIALIZED_NAME_DATE_RANGE = "dateRange";
  @SerializedName(SERIALIZED_NAME_DATE_RANGE)
  private DateRange dateRange;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public InsertionOrderBudgetSegment() {
  }

  public InsertionOrderBudgetSegment budgetAmountMicros(String budgetAmountMicros) {
    this.budgetAmountMicros = budgetAmountMicros;
    return this;
  }

  /**
   * Required. The budget amount the insertion order will spend for the given date_range. The amount is in micros. Must be greater than 0. For example, 500000000 represents 500 standard units of the currency.
   * @return budgetAmountMicros
   */
  @javax.annotation.Nullable
  public String getBudgetAmountMicros() {
    return budgetAmountMicros;
  }

  public void setBudgetAmountMicros(String budgetAmountMicros) {
    this.budgetAmountMicros = budgetAmountMicros;
  }


  public InsertionOrderBudgetSegment campaignBudgetId(String campaignBudgetId) {
    this.campaignBudgetId = campaignBudgetId;
    return this;
  }

  /**
   * The budget_id of the campaign budget that this insertion order budget segment is a part of.
   * @return campaignBudgetId
   */
  @javax.annotation.Nullable
  public String getCampaignBudgetId() {
    return campaignBudgetId;
  }

  public void setCampaignBudgetId(String campaignBudgetId) {
    this.campaignBudgetId = campaignBudgetId;
  }


  public InsertionOrderBudgetSegment dateRange(DateRange dateRange) {
    this.dateRange = dateRange;
    return this;
  }

  /**
   * Get dateRange
   * @return dateRange
   */
  @javax.annotation.Nullable
  public DateRange getDateRange() {
    return dateRange;
  }

  public void setDateRange(DateRange dateRange) {
    this.dateRange = dateRange;
  }


  public InsertionOrderBudgetSegment description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The budget segment description. It can be used to enter Purchase Order information for each budget segment and have that information printed on the invoices. Must be UTF-8 encoded.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsertionOrderBudgetSegment insertionOrderBudgetSegment = (InsertionOrderBudgetSegment) o;
    return Objects.equals(this.budgetAmountMicros, insertionOrderBudgetSegment.budgetAmountMicros) &&
        Objects.equals(this.campaignBudgetId, insertionOrderBudgetSegment.campaignBudgetId) &&
        Objects.equals(this.dateRange, insertionOrderBudgetSegment.dateRange) &&
        Objects.equals(this.description, insertionOrderBudgetSegment.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(budgetAmountMicros, campaignBudgetId, dateRange, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsertionOrderBudgetSegment {\n");
    sb.append("    budgetAmountMicros: ").append(toIndentedString(budgetAmountMicros)).append("\n");
    sb.append("    campaignBudgetId: ").append(toIndentedString(campaignBudgetId)).append("\n");
    sb.append("    dateRange: ").append(toIndentedString(dateRange)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("budgetAmountMicros");
    openapiFields.add("campaignBudgetId");
    openapiFields.add("dateRange");
    openapiFields.add("description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InsertionOrderBudgetSegment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InsertionOrderBudgetSegment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsertionOrderBudgetSegment is not found in the empty JSON string", InsertionOrderBudgetSegment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InsertionOrderBudgetSegment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InsertionOrderBudgetSegment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("budgetAmountMicros") != null && !jsonObj.get("budgetAmountMicros").isJsonNull()) && !jsonObj.get("budgetAmountMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budgetAmountMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budgetAmountMicros").toString()));
      }
      if ((jsonObj.get("campaignBudgetId") != null && !jsonObj.get("campaignBudgetId").isJsonNull()) && !jsonObj.get("campaignBudgetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignBudgetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignBudgetId").toString()));
      }
      // validate the optional field `dateRange`
      if (jsonObj.get("dateRange") != null && !jsonObj.get("dateRange").isJsonNull()) {
        DateRange.validateJsonElement(jsonObj.get("dateRange"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsertionOrderBudgetSegment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsertionOrderBudgetSegment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsertionOrderBudgetSegment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsertionOrderBudgetSegment.class));

       return (TypeAdapter<T>) new TypeAdapter<InsertionOrderBudgetSegment>() {
           @Override
           public void write(JsonWriter out, InsertionOrderBudgetSegment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InsertionOrderBudgetSegment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InsertionOrderBudgetSegment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InsertionOrderBudgetSegment
   * @throws IOException if the JSON string is invalid with respect to InsertionOrderBudgetSegment
   */
  public static InsertionOrderBudgetSegment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsertionOrderBudgetSegment.class);
  }

  /**
   * Convert an instance of InsertionOrderBudgetSegment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

