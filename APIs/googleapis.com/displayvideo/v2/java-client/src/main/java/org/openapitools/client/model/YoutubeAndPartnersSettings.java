/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FrequencyCap;
import org.openapitools.client.model.TargetFrequency;
import org.openapitools.client.model.VideoAdSequenceSettings;
import org.openapitools.client.model.YoutubeAndPartnersBiddingStrategy;
import org.openapitools.client.model.YoutubeAndPartnersInventorySourceConfig;
import org.openapitools.client.model.YoutubeAndPartnersThirdPartyMeasurementSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for YouTube and Partners line items.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class YoutubeAndPartnersSettings {
  public static final String SERIALIZED_NAME_BIDDING_STRATEGY = "biddingStrategy";
  @SerializedName(SERIALIZED_NAME_BIDDING_STRATEGY)
  private YoutubeAndPartnersBiddingStrategy biddingStrategy;

  /**
   * The kind of content on which the YouTube and Partners ads will be shown.
   */
  @JsonAdapter(ContentCategoryEnum.Adapter.class)
  public enum ContentCategoryEnum {
    UNSPECIFIED("YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED"),
    
    STANDARD("YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_STANDARD"),
    
    EXPANDED("YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_EXPANDED"),
    
    LIMITED("YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_LIMITED");

    private String value;

    ContentCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentCategoryEnum fromValue(String value) {
      for (ContentCategoryEnum b : ContentCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_CATEGORY = "contentCategory";
  @SerializedName(SERIALIZED_NAME_CONTENT_CATEGORY)
  private ContentCategoryEnum contentCategory;

  /**
   * Output only. The content category which takes effect when serving the line item. When content category is set in both line item and advertiser, the stricter one will take effect when serving the line item.
   */
  @JsonAdapter(EffectiveContentCategoryEnum.Adapter.class)
  public enum EffectiveContentCategoryEnum {
    UNSPECIFIED("YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_UNSPECIFIED"),
    
    STANDARD("YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_STANDARD"),
    
    EXPANDED("YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_EXPANDED"),
    
    LIMITED("YOUTUBE_AND_PARTNERS_CONTENT_CATEGORY_LIMITED");

    private String value;

    EffectiveContentCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EffectiveContentCategoryEnum fromValue(String value) {
      for (EffectiveContentCategoryEnum b : EffectiveContentCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EffectiveContentCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EffectiveContentCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EffectiveContentCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EffectiveContentCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EffectiveContentCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EFFECTIVE_CONTENT_CATEGORY = "effectiveContentCategory";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_CONTENT_CATEGORY)
  private EffectiveContentCategoryEnum effectiveContentCategory;

  public static final String SERIALIZED_NAME_INVENTORY_SOURCE_SETTINGS = "inventorySourceSettings";
  @SerializedName(SERIALIZED_NAME_INVENTORY_SOURCE_SETTINGS)
  private YoutubeAndPartnersInventorySourceConfig inventorySourceSettings;

  public static final String SERIALIZED_NAME_LEAD_FORM_ID = "leadFormId";
  @SerializedName(SERIALIZED_NAME_LEAD_FORM_ID)
  private String leadFormId;

  public static final String SERIALIZED_NAME_LINKED_MERCHANT_ID = "linkedMerchantId";
  @SerializedName(SERIALIZED_NAME_LINKED_MERCHANT_ID)
  private String linkedMerchantId;

  public static final String SERIALIZED_NAME_RELATED_VIDEO_IDS = "relatedVideoIds";
  @SerializedName(SERIALIZED_NAME_RELATED_VIDEO_IDS)
  private List<String> relatedVideoIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_FREQUENCY = "targetFrequency";
  @SerializedName(SERIALIZED_NAME_TARGET_FREQUENCY)
  private TargetFrequency targetFrequency;

  public static final String SERIALIZED_NAME_THIRD_PARTY_MEASUREMENT_SETTINGS = "thirdPartyMeasurementSettings";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_MEASUREMENT_SETTINGS)
  private YoutubeAndPartnersThirdPartyMeasurementSettings thirdPartyMeasurementSettings;

  public static final String SERIALIZED_NAME_VIDEO_AD_SEQUENCE_SETTINGS = "videoAdSequenceSettings";
  @SerializedName(SERIALIZED_NAME_VIDEO_AD_SEQUENCE_SETTINGS)
  private VideoAdSequenceSettings videoAdSequenceSettings;

  public static final String SERIALIZED_NAME_VIEW_FREQUENCY_CAP = "viewFrequencyCap";
  @SerializedName(SERIALIZED_NAME_VIEW_FREQUENCY_CAP)
  private FrequencyCap viewFrequencyCap;

  public YoutubeAndPartnersSettings() {
  }

  public YoutubeAndPartnersSettings(
     EffectiveContentCategoryEnum effectiveContentCategory
  ) {
    this();
    this.effectiveContentCategory = effectiveContentCategory;
  }

  public YoutubeAndPartnersSettings biddingStrategy(YoutubeAndPartnersBiddingStrategy biddingStrategy) {
    this.biddingStrategy = biddingStrategy;
    return this;
  }

  /**
   * Get biddingStrategy
   * @return biddingStrategy
   */
  @javax.annotation.Nullable
  public YoutubeAndPartnersBiddingStrategy getBiddingStrategy() {
    return biddingStrategy;
  }

  public void setBiddingStrategy(YoutubeAndPartnersBiddingStrategy biddingStrategy) {
    this.biddingStrategy = biddingStrategy;
  }


  public YoutubeAndPartnersSettings contentCategory(ContentCategoryEnum contentCategory) {
    this.contentCategory = contentCategory;
    return this;
  }

  /**
   * The kind of content on which the YouTube and Partners ads will be shown.
   * @return contentCategory
   */
  @javax.annotation.Nullable
  public ContentCategoryEnum getContentCategory() {
    return contentCategory;
  }

  public void setContentCategory(ContentCategoryEnum contentCategory) {
    this.contentCategory = contentCategory;
  }


  /**
   * Output only. The content category which takes effect when serving the line item. When content category is set in both line item and advertiser, the stricter one will take effect when serving the line item.
   * @return effectiveContentCategory
   */
  @javax.annotation.Nullable
  public EffectiveContentCategoryEnum getEffectiveContentCategory() {
    return effectiveContentCategory;
  }



  public YoutubeAndPartnersSettings inventorySourceSettings(YoutubeAndPartnersInventorySourceConfig inventorySourceSettings) {
    this.inventorySourceSettings = inventorySourceSettings;
    return this;
  }

  /**
   * Get inventorySourceSettings
   * @return inventorySourceSettings
   */
  @javax.annotation.Nullable
  public YoutubeAndPartnersInventorySourceConfig getInventorySourceSettings() {
    return inventorySourceSettings;
  }

  public void setInventorySourceSettings(YoutubeAndPartnersInventorySourceConfig inventorySourceSettings) {
    this.inventorySourceSettings = inventorySourceSettings;
  }


  public YoutubeAndPartnersSettings leadFormId(String leadFormId) {
    this.leadFormId = leadFormId;
    return this;
  }

  /**
   * Optional. The ID of the form to generate leads.
   * @return leadFormId
   */
  @javax.annotation.Nullable
  public String getLeadFormId() {
    return leadFormId;
  }

  public void setLeadFormId(String leadFormId) {
    this.leadFormId = leadFormId;
  }


  public YoutubeAndPartnersSettings linkedMerchantId(String linkedMerchantId) {
    this.linkedMerchantId = linkedMerchantId;
    return this;
  }

  /**
   * Optional. The ID of the merchant which is linked to the line item for product feed.
   * @return linkedMerchantId
   */
  @javax.annotation.Nullable
  public String getLinkedMerchantId() {
    return linkedMerchantId;
  }

  public void setLinkedMerchantId(String linkedMerchantId) {
    this.linkedMerchantId = linkedMerchantId;
  }


  public YoutubeAndPartnersSettings relatedVideoIds(List<String> relatedVideoIds) {
    this.relatedVideoIds = relatedVideoIds;
    return this;
  }

  public YoutubeAndPartnersSettings addRelatedVideoIdsItem(String relatedVideoIdsItem) {
    if (this.relatedVideoIds == null) {
      this.relatedVideoIds = new ArrayList<>();
    }
    this.relatedVideoIds.add(relatedVideoIdsItem);
    return this;
  }

  /**
   * Optional. The IDs of the videos appear below the primary video ad when the ad is playing in the YouTube app on mobile devices.
   * @return relatedVideoIds
   */
  @javax.annotation.Nullable
  public List<String> getRelatedVideoIds() {
    return relatedVideoIds;
  }

  public void setRelatedVideoIds(List<String> relatedVideoIds) {
    this.relatedVideoIds = relatedVideoIds;
  }


  public YoutubeAndPartnersSettings targetFrequency(TargetFrequency targetFrequency) {
    this.targetFrequency = targetFrequency;
    return this;
  }

  /**
   * Get targetFrequency
   * @return targetFrequency
   */
  @javax.annotation.Nullable
  public TargetFrequency getTargetFrequency() {
    return targetFrequency;
  }

  public void setTargetFrequency(TargetFrequency targetFrequency) {
    this.targetFrequency = targetFrequency;
  }


  public YoutubeAndPartnersSettings thirdPartyMeasurementSettings(YoutubeAndPartnersThirdPartyMeasurementSettings thirdPartyMeasurementSettings) {
    this.thirdPartyMeasurementSettings = thirdPartyMeasurementSettings;
    return this;
  }

  /**
   * Get thirdPartyMeasurementSettings
   * @return thirdPartyMeasurementSettings
   */
  @javax.annotation.Nullable
  public YoutubeAndPartnersThirdPartyMeasurementSettings getThirdPartyMeasurementSettings() {
    return thirdPartyMeasurementSettings;
  }

  public void setThirdPartyMeasurementSettings(YoutubeAndPartnersThirdPartyMeasurementSettings thirdPartyMeasurementSettings) {
    this.thirdPartyMeasurementSettings = thirdPartyMeasurementSettings;
  }


  public YoutubeAndPartnersSettings videoAdSequenceSettings(VideoAdSequenceSettings videoAdSequenceSettings) {
    this.videoAdSequenceSettings = videoAdSequenceSettings;
    return this;
  }

  /**
   * Get videoAdSequenceSettings
   * @return videoAdSequenceSettings
   */
  @javax.annotation.Nullable
  public VideoAdSequenceSettings getVideoAdSequenceSettings() {
    return videoAdSequenceSettings;
  }

  public void setVideoAdSequenceSettings(VideoAdSequenceSettings videoAdSequenceSettings) {
    this.videoAdSequenceSettings = videoAdSequenceSettings;
  }


  public YoutubeAndPartnersSettings viewFrequencyCap(FrequencyCap viewFrequencyCap) {
    this.viewFrequencyCap = viewFrequencyCap;
    return this;
  }

  /**
   * Get viewFrequencyCap
   * @return viewFrequencyCap
   */
  @javax.annotation.Nullable
  public FrequencyCap getViewFrequencyCap() {
    return viewFrequencyCap;
  }

  public void setViewFrequencyCap(FrequencyCap viewFrequencyCap) {
    this.viewFrequencyCap = viewFrequencyCap;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    YoutubeAndPartnersSettings youtubeAndPartnersSettings = (YoutubeAndPartnersSettings) o;
    return Objects.equals(this.biddingStrategy, youtubeAndPartnersSettings.biddingStrategy) &&
        Objects.equals(this.contentCategory, youtubeAndPartnersSettings.contentCategory) &&
        Objects.equals(this.effectiveContentCategory, youtubeAndPartnersSettings.effectiveContentCategory) &&
        Objects.equals(this.inventorySourceSettings, youtubeAndPartnersSettings.inventorySourceSettings) &&
        Objects.equals(this.leadFormId, youtubeAndPartnersSettings.leadFormId) &&
        Objects.equals(this.linkedMerchantId, youtubeAndPartnersSettings.linkedMerchantId) &&
        Objects.equals(this.relatedVideoIds, youtubeAndPartnersSettings.relatedVideoIds) &&
        Objects.equals(this.targetFrequency, youtubeAndPartnersSettings.targetFrequency) &&
        Objects.equals(this.thirdPartyMeasurementSettings, youtubeAndPartnersSettings.thirdPartyMeasurementSettings) &&
        Objects.equals(this.videoAdSequenceSettings, youtubeAndPartnersSettings.videoAdSequenceSettings) &&
        Objects.equals(this.viewFrequencyCap, youtubeAndPartnersSettings.viewFrequencyCap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(biddingStrategy, contentCategory, effectiveContentCategory, inventorySourceSettings, leadFormId, linkedMerchantId, relatedVideoIds, targetFrequency, thirdPartyMeasurementSettings, videoAdSequenceSettings, viewFrequencyCap);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class YoutubeAndPartnersSettings {\n");
    sb.append("    biddingStrategy: ").append(toIndentedString(biddingStrategy)).append("\n");
    sb.append("    contentCategory: ").append(toIndentedString(contentCategory)).append("\n");
    sb.append("    effectiveContentCategory: ").append(toIndentedString(effectiveContentCategory)).append("\n");
    sb.append("    inventorySourceSettings: ").append(toIndentedString(inventorySourceSettings)).append("\n");
    sb.append("    leadFormId: ").append(toIndentedString(leadFormId)).append("\n");
    sb.append("    linkedMerchantId: ").append(toIndentedString(linkedMerchantId)).append("\n");
    sb.append("    relatedVideoIds: ").append(toIndentedString(relatedVideoIds)).append("\n");
    sb.append("    targetFrequency: ").append(toIndentedString(targetFrequency)).append("\n");
    sb.append("    thirdPartyMeasurementSettings: ").append(toIndentedString(thirdPartyMeasurementSettings)).append("\n");
    sb.append("    videoAdSequenceSettings: ").append(toIndentedString(videoAdSequenceSettings)).append("\n");
    sb.append("    viewFrequencyCap: ").append(toIndentedString(viewFrequencyCap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("biddingStrategy");
    openapiFields.add("contentCategory");
    openapiFields.add("effectiveContentCategory");
    openapiFields.add("inventorySourceSettings");
    openapiFields.add("leadFormId");
    openapiFields.add("linkedMerchantId");
    openapiFields.add("relatedVideoIds");
    openapiFields.add("targetFrequency");
    openapiFields.add("thirdPartyMeasurementSettings");
    openapiFields.add("videoAdSequenceSettings");
    openapiFields.add("viewFrequencyCap");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to YoutubeAndPartnersSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!YoutubeAndPartnersSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in YoutubeAndPartnersSettings is not found in the empty JSON string", YoutubeAndPartnersSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!YoutubeAndPartnersSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `YoutubeAndPartnersSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `biddingStrategy`
      if (jsonObj.get("biddingStrategy") != null && !jsonObj.get("biddingStrategy").isJsonNull()) {
        YoutubeAndPartnersBiddingStrategy.validateJsonElement(jsonObj.get("biddingStrategy"));
      }
      if ((jsonObj.get("contentCategory") != null && !jsonObj.get("contentCategory").isJsonNull()) && !jsonObj.get("contentCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentCategory").toString()));
      }
      // validate the optional field `contentCategory`
      if (jsonObj.get("contentCategory") != null && !jsonObj.get("contentCategory").isJsonNull()) {
        ContentCategoryEnum.validateJsonElement(jsonObj.get("contentCategory"));
      }
      if ((jsonObj.get("effectiveContentCategory") != null && !jsonObj.get("effectiveContentCategory").isJsonNull()) && !jsonObj.get("effectiveContentCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveContentCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveContentCategory").toString()));
      }
      // validate the optional field `effectiveContentCategory`
      if (jsonObj.get("effectiveContentCategory") != null && !jsonObj.get("effectiveContentCategory").isJsonNull()) {
        EffectiveContentCategoryEnum.validateJsonElement(jsonObj.get("effectiveContentCategory"));
      }
      // validate the optional field `inventorySourceSettings`
      if (jsonObj.get("inventorySourceSettings") != null && !jsonObj.get("inventorySourceSettings").isJsonNull()) {
        YoutubeAndPartnersInventorySourceConfig.validateJsonElement(jsonObj.get("inventorySourceSettings"));
      }
      if ((jsonObj.get("leadFormId") != null && !jsonObj.get("leadFormId").isJsonNull()) && !jsonObj.get("leadFormId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leadFormId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leadFormId").toString()));
      }
      if ((jsonObj.get("linkedMerchantId") != null && !jsonObj.get("linkedMerchantId").isJsonNull()) && !jsonObj.get("linkedMerchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedMerchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedMerchantId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("relatedVideoIds") != null && !jsonObj.get("relatedVideoIds").isJsonNull() && !jsonObj.get("relatedVideoIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedVideoIds` to be an array in the JSON string but got `%s`", jsonObj.get("relatedVideoIds").toString()));
      }
      // validate the optional field `targetFrequency`
      if (jsonObj.get("targetFrequency") != null && !jsonObj.get("targetFrequency").isJsonNull()) {
        TargetFrequency.validateJsonElement(jsonObj.get("targetFrequency"));
      }
      // validate the optional field `thirdPartyMeasurementSettings`
      if (jsonObj.get("thirdPartyMeasurementSettings") != null && !jsonObj.get("thirdPartyMeasurementSettings").isJsonNull()) {
        YoutubeAndPartnersThirdPartyMeasurementSettings.validateJsonElement(jsonObj.get("thirdPartyMeasurementSettings"));
      }
      // validate the optional field `videoAdSequenceSettings`
      if (jsonObj.get("videoAdSequenceSettings") != null && !jsonObj.get("videoAdSequenceSettings").isJsonNull()) {
        VideoAdSequenceSettings.validateJsonElement(jsonObj.get("videoAdSequenceSettings"));
      }
      // validate the optional field `viewFrequencyCap`
      if (jsonObj.get("viewFrequencyCap") != null && !jsonObj.get("viewFrequencyCap").isJsonNull()) {
        FrequencyCap.validateJsonElement(jsonObj.get("viewFrequencyCap"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!YoutubeAndPartnersSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'YoutubeAndPartnersSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<YoutubeAndPartnersSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(YoutubeAndPartnersSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<YoutubeAndPartnersSettings>() {
           @Override
           public void write(JsonWriter out, YoutubeAndPartnersSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public YoutubeAndPartnersSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of YoutubeAndPartnersSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of YoutubeAndPartnersSettings
   * @throws IOException if the JSON string is invalid with respect to YoutubeAndPartnersSettings
   */
  public static YoutubeAndPartnersSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, YoutubeAndPartnersSettings.class);
  }

  /**
   * Convert an instance of YoutubeAndPartnersSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

