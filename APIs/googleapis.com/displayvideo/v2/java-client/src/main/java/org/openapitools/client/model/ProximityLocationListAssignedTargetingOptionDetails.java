/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Targeting details for proximity location list. This will be populated in the details field of an AssignedTargetingOption when targeting_type is &#x60;TARGETING_TYPE_PROXIMITY_LOCATION_LIST&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProximityLocationListAssignedTargetingOptionDetails {
  public static final String SERIALIZED_NAME_PROXIMITY_LOCATION_LIST_ID = "proximityLocationListId";
  @SerializedName(SERIALIZED_NAME_PROXIMITY_LOCATION_LIST_ID)
  private String proximityLocationListId;

  public static final String SERIALIZED_NAME_PROXIMITY_RADIUS = "proximityRadius";
  @SerializedName(SERIALIZED_NAME_PROXIMITY_RADIUS)
  private Double proximityRadius;

  /**
   * Required. Radius distance units.
   */
  @JsonAdapter(ProximityRadiusUnitEnum.Adapter.class)
  public enum ProximityRadiusUnitEnum {
    UNSPECIFIED("PROXIMITY_RADIUS_UNIT_UNSPECIFIED"),
    
    MILES("PROXIMITY_RADIUS_UNIT_MILES"),
    
    KILOMETERS("PROXIMITY_RADIUS_UNIT_KILOMETERS");

    private String value;

    ProximityRadiusUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProximityRadiusUnitEnum fromValue(String value) {
      for (ProximityRadiusUnitEnum b : ProximityRadiusUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProximityRadiusUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProximityRadiusUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProximityRadiusUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProximityRadiusUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProximityRadiusUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROXIMITY_RADIUS_UNIT = "proximityRadiusUnit";
  @SerializedName(SERIALIZED_NAME_PROXIMITY_RADIUS_UNIT)
  private ProximityRadiusUnitEnum proximityRadiusUnit;

  public ProximityLocationListAssignedTargetingOptionDetails() {
  }

  public ProximityLocationListAssignedTargetingOptionDetails proximityLocationListId(String proximityLocationListId) {
    this.proximityLocationListId = proximityLocationListId;
    return this;
  }

  /**
   * Required. ID of the proximity location list. Should refer to the location_list_id field of a LocationList resource whose type is &#x60;TARGETING_LOCATION_TYPE_PROXIMITY&#x60;.
   * @return proximityLocationListId
   */
  @javax.annotation.Nullable
  public String getProximityLocationListId() {
    return proximityLocationListId;
  }

  public void setProximityLocationListId(String proximityLocationListId) {
    this.proximityLocationListId = proximityLocationListId;
  }


  public ProximityLocationListAssignedTargetingOptionDetails proximityRadius(Double proximityRadius) {
    this.proximityRadius = proximityRadius;
    return this;
  }

  /**
   * Required. Radius expressed in the distance units set in proximity_radius_unit. This represents the size of the area around a chosen location that will be targeted. Radius should be between 1 and 500 miles or 800 kilometers.
   * @return proximityRadius
   */
  @javax.annotation.Nullable
  public Double getProximityRadius() {
    return proximityRadius;
  }

  public void setProximityRadius(Double proximityRadius) {
    this.proximityRadius = proximityRadius;
  }


  public ProximityLocationListAssignedTargetingOptionDetails proximityRadiusUnit(ProximityRadiusUnitEnum proximityRadiusUnit) {
    this.proximityRadiusUnit = proximityRadiusUnit;
    return this;
  }

  /**
   * Required. Radius distance units.
   * @return proximityRadiusUnit
   */
  @javax.annotation.Nullable
  public ProximityRadiusUnitEnum getProximityRadiusUnit() {
    return proximityRadiusUnit;
  }

  public void setProximityRadiusUnit(ProximityRadiusUnitEnum proximityRadiusUnit) {
    this.proximityRadiusUnit = proximityRadiusUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProximityLocationListAssignedTargetingOptionDetails proximityLocationListAssignedTargetingOptionDetails = (ProximityLocationListAssignedTargetingOptionDetails) o;
    return Objects.equals(this.proximityLocationListId, proximityLocationListAssignedTargetingOptionDetails.proximityLocationListId) &&
        Objects.equals(this.proximityRadius, proximityLocationListAssignedTargetingOptionDetails.proximityRadius) &&
        Objects.equals(this.proximityRadiusUnit, proximityLocationListAssignedTargetingOptionDetails.proximityRadiusUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(proximityLocationListId, proximityRadius, proximityRadiusUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProximityLocationListAssignedTargetingOptionDetails {\n");
    sb.append("    proximityLocationListId: ").append(toIndentedString(proximityLocationListId)).append("\n");
    sb.append("    proximityRadius: ").append(toIndentedString(proximityRadius)).append("\n");
    sb.append("    proximityRadiusUnit: ").append(toIndentedString(proximityRadiusUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("proximityLocationListId");
    openapiFields.add("proximityRadius");
    openapiFields.add("proximityRadiusUnit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProximityLocationListAssignedTargetingOptionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProximityLocationListAssignedTargetingOptionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProximityLocationListAssignedTargetingOptionDetails is not found in the empty JSON string", ProximityLocationListAssignedTargetingOptionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProximityLocationListAssignedTargetingOptionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProximityLocationListAssignedTargetingOptionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("proximityLocationListId") != null && !jsonObj.get("proximityLocationListId").isJsonNull()) && !jsonObj.get("proximityLocationListId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proximityLocationListId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proximityLocationListId").toString()));
      }
      if ((jsonObj.get("proximityRadiusUnit") != null && !jsonObj.get("proximityRadiusUnit").isJsonNull()) && !jsonObj.get("proximityRadiusUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proximityRadiusUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proximityRadiusUnit").toString()));
      }
      // validate the optional field `proximityRadiusUnit`
      if (jsonObj.get("proximityRadiusUnit") != null && !jsonObj.get("proximityRadiusUnit").isJsonNull()) {
        ProximityRadiusUnitEnum.validateJsonElement(jsonObj.get("proximityRadiusUnit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProximityLocationListAssignedTargetingOptionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProximityLocationListAssignedTargetingOptionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProximityLocationListAssignedTargetingOptionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProximityLocationListAssignedTargetingOptionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ProximityLocationListAssignedTargetingOptionDetails>() {
           @Override
           public void write(JsonWriter out, ProximityLocationListAssignedTargetingOptionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProximityLocationListAssignedTargetingOptionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProximityLocationListAssignedTargetingOptionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProximityLocationListAssignedTargetingOptionDetails
   * @throws IOException if the JSON string is invalid with respect to ProximityLocationListAssignedTargetingOptionDetails
   */
  public static ProximityLocationListAssignedTargetingOptionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProximityLocationListAssignedTargetingOptionDetails.class);
  }

  /**
   * Convert an instance of ProximityLocationListAssignedTargetingOptionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

