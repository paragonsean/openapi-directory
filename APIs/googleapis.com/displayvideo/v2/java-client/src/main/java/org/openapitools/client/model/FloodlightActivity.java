/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RemarketingConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single Floodlight activity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FloodlightActivity {
  public static final String SERIALIZED_NAME_ADVERTISER_IDS = "advertiserIds";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_IDS)
  private List<String> advertiserIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_ID = "floodlightActivityId";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_ID)
  private String floodlightActivityId;

  public static final String SERIALIZED_NAME_FLOODLIGHT_GROUP_ID = "floodlightGroupId";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_GROUP_ID)
  private String floodlightGroupId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REMARKETING_CONFIGS = "remarketingConfigs";
  @SerializedName(SERIALIZED_NAME_REMARKETING_CONFIGS)
  private List<RemarketingConfig> remarketingConfigs = new ArrayList<>();

  /**
   * Optional. Whether the Floodlight activity is served.
   */
  @JsonAdapter(ServingStatusEnum.Adapter.class)
  public enum ServingStatusEnum {
    UNSPECIFIED("FLOODLIGHT_ACTIVITY_SERVING_STATUS_UNSPECIFIED"),
    
    ENABLED("FLOODLIGHT_ACTIVITY_SERVING_STATUS_ENABLED"),
    
    DISABLED("FLOODLIGHT_ACTIVITY_SERVING_STATUS_DISABLED");

    private String value;

    ServingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServingStatusEnum fromValue(String value) {
      for (ServingStatusEnum b : ServingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVING_STATUS = "servingStatus";
  @SerializedName(SERIALIZED_NAME_SERVING_STATUS)
  private ServingStatusEnum servingStatus;

  public static final String SERIALIZED_NAME_SSL_REQUIRED = "sslRequired";
  @SerializedName(SERIALIZED_NAME_SSL_REQUIRED)
  private Boolean sslRequired;

  public FloodlightActivity() {
  }

  public FloodlightActivity(
     List<String> advertiserIds, 
     String floodlightActivityId, 
     String name, 
     List<RemarketingConfig> remarketingConfigs, 
     Boolean sslRequired
  ) {
    this();
    this.advertiserIds = advertiserIds;
    this.floodlightActivityId = floodlightActivityId;
    this.name = name;
    this.remarketingConfigs = remarketingConfigs;
    this.sslRequired = sslRequired;
  }

  /**
   * Output only. IDs of the advertisers that have access to the parent Floodlight group. Only advertisers under the provided partner ID will be listed in this field.
   * @return advertiserIds
   */
  @javax.annotation.Nullable
  public List<String> getAdvertiserIds() {
    return advertiserIds;
  }



  public FloodlightActivity displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The display name of the Floodlight activity.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. The unique ID of the Floodlight activity. Assigned by the system.
   * @return floodlightActivityId
   */
  @javax.annotation.Nullable
  public String getFloodlightActivityId() {
    return floodlightActivityId;
  }



  public FloodlightActivity floodlightGroupId(String floodlightGroupId) {
    this.floodlightGroupId = floodlightGroupId;
    return this;
  }

  /**
   * Required. Immutable. The ID of the parent Floodlight group.
   * @return floodlightGroupId
   */
  @javax.annotation.Nullable
  public String getFloodlightGroupId() {
    return floodlightGroupId;
  }

  public void setFloodlightGroupId(String floodlightGroupId) {
    this.floodlightGroupId = floodlightGroupId;
  }


  /**
   * Output only. The resource name of the Floodlight activity.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. A list of configuration objects designating whether remarketing for this Floodlight Activity is enabled and available for a specifc advertiser. If enabled, this Floodlight Activity generates a remarketing user list that is able to be used in targeting under the advertiser.
   * @return remarketingConfigs
   */
  @javax.annotation.Nullable
  public List<RemarketingConfig> getRemarketingConfigs() {
    return remarketingConfigs;
  }



  public FloodlightActivity servingStatus(ServingStatusEnum servingStatus) {
    this.servingStatus = servingStatus;
    return this;
  }

  /**
   * Optional. Whether the Floodlight activity is served.
   * @return servingStatus
   */
  @javax.annotation.Nullable
  public ServingStatusEnum getServingStatus() {
    return servingStatus;
  }

  public void setServingStatus(ServingStatusEnum servingStatus) {
    this.servingStatus = servingStatus;
  }


  /**
   * Output only. Whether tags are required to be compliant.
   * @return sslRequired
   */
  @javax.annotation.Nullable
  public Boolean getSslRequired() {
    return sslRequired;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FloodlightActivity floodlightActivity = (FloodlightActivity) o;
    return Objects.equals(this.advertiserIds, floodlightActivity.advertiserIds) &&
        Objects.equals(this.displayName, floodlightActivity.displayName) &&
        Objects.equals(this.floodlightActivityId, floodlightActivity.floodlightActivityId) &&
        Objects.equals(this.floodlightGroupId, floodlightActivity.floodlightGroupId) &&
        Objects.equals(this.name, floodlightActivity.name) &&
        Objects.equals(this.remarketingConfigs, floodlightActivity.remarketingConfigs) &&
        Objects.equals(this.servingStatus, floodlightActivity.servingStatus) &&
        Objects.equals(this.sslRequired, floodlightActivity.sslRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertiserIds, displayName, floodlightActivityId, floodlightGroupId, name, remarketingConfigs, servingStatus, sslRequired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FloodlightActivity {\n");
    sb.append("    advertiserIds: ").append(toIndentedString(advertiserIds)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    floodlightActivityId: ").append(toIndentedString(floodlightActivityId)).append("\n");
    sb.append("    floodlightGroupId: ").append(toIndentedString(floodlightGroupId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    remarketingConfigs: ").append(toIndentedString(remarketingConfigs)).append("\n");
    sb.append("    servingStatus: ").append(toIndentedString(servingStatus)).append("\n");
    sb.append("    sslRequired: ").append(toIndentedString(sslRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertiserIds");
    openapiFields.add("displayName");
    openapiFields.add("floodlightActivityId");
    openapiFields.add("floodlightGroupId");
    openapiFields.add("name");
    openapiFields.add("remarketingConfigs");
    openapiFields.add("servingStatus");
    openapiFields.add("sslRequired");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FloodlightActivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FloodlightActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FloodlightActivity is not found in the empty JSON string", FloodlightActivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FloodlightActivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FloodlightActivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("advertiserIds") != null && !jsonObj.get("advertiserIds").isJsonNull() && !jsonObj.get("advertiserIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserIds` to be an array in the JSON string but got `%s`", jsonObj.get("advertiserIds").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("floodlightActivityId") != null && !jsonObj.get("floodlightActivityId").isJsonNull()) && !jsonObj.get("floodlightActivityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightActivityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightActivityId").toString()));
      }
      if ((jsonObj.get("floodlightGroupId") != null && !jsonObj.get("floodlightGroupId").isJsonNull()) && !jsonObj.get("floodlightGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightGroupId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("remarketingConfigs") != null && !jsonObj.get("remarketingConfigs").isJsonNull()) {
        JsonArray jsonArrayremarketingConfigs = jsonObj.getAsJsonArray("remarketingConfigs");
        if (jsonArrayremarketingConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("remarketingConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `remarketingConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("remarketingConfigs").toString()));
          }

          // validate the optional field `remarketingConfigs` (array)
          for (int i = 0; i < jsonArrayremarketingConfigs.size(); i++) {
            RemarketingConfig.validateJsonElement(jsonArrayremarketingConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("servingStatus") != null && !jsonObj.get("servingStatus").isJsonNull()) && !jsonObj.get("servingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servingStatus").toString()));
      }
      // validate the optional field `servingStatus`
      if (jsonObj.get("servingStatus") != null && !jsonObj.get("servingStatus").isJsonNull()) {
        ServingStatusEnum.validateJsonElement(jsonObj.get("servingStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FloodlightActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FloodlightActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FloodlightActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FloodlightActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<FloodlightActivity>() {
           @Override
           public void write(JsonWriter out, FloodlightActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FloodlightActivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FloodlightActivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FloodlightActivity
   * @throws IOException if the JSON string is invalid with respect to FloodlightActivity
   */
  public static FloodlightActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FloodlightActivity.class);
  }

  /**
   * Convert an instance of FloodlightActivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

