/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Dimensions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents information about the transcoded audio or video file.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transcode {
  public static final String SERIALIZED_NAME_AUDIO_BIT_RATE_KBPS = "audioBitRateKbps";
  @SerializedName(SERIALIZED_NAME_AUDIO_BIT_RATE_KBPS)
  private String audioBitRateKbps;

  public static final String SERIALIZED_NAME_AUDIO_SAMPLE_RATE_HZ = "audioSampleRateHz";
  @SerializedName(SERIALIZED_NAME_AUDIO_SAMPLE_RATE_HZ)
  private String audioSampleRateHz;

  public static final String SERIALIZED_NAME_BIT_RATE_KBPS = "bitRateKbps";
  @SerializedName(SERIALIZED_NAME_BIT_RATE_KBPS)
  private String bitRateKbps;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Dimensions dimensions;

  public static final String SERIALIZED_NAME_FILE_SIZE_BYTES = "fileSizeBytes";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE_BYTES)
  private String fileSizeBytes;

  public static final String SERIALIZED_NAME_FRAME_RATE = "frameRate";
  @SerializedName(SERIALIZED_NAME_FRAME_RATE)
  private Float frameRate;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TRANSCODED = "transcoded";
  @SerializedName(SERIALIZED_NAME_TRANSCODED)
  private Boolean transcoded;

  public Transcode() {
  }

  public Transcode audioBitRateKbps(String audioBitRateKbps) {
    this.audioBitRateKbps = audioBitRateKbps;
    return this;
  }

  /**
   * The bit rate for the audio stream of the transcoded video, or the bit rate for the transcoded audio, in kilobits per second.
   * @return audioBitRateKbps
   */
  @javax.annotation.Nullable
  public String getAudioBitRateKbps() {
    return audioBitRateKbps;
  }

  public void setAudioBitRateKbps(String audioBitRateKbps) {
    this.audioBitRateKbps = audioBitRateKbps;
  }


  public Transcode audioSampleRateHz(String audioSampleRateHz) {
    this.audioSampleRateHz = audioSampleRateHz;
    return this;
  }

  /**
   * The sample rate for the audio stream of the transcoded video, or the sample rate for the transcoded audio, in hertz.
   * @return audioSampleRateHz
   */
  @javax.annotation.Nullable
  public String getAudioSampleRateHz() {
    return audioSampleRateHz;
  }

  public void setAudioSampleRateHz(String audioSampleRateHz) {
    this.audioSampleRateHz = audioSampleRateHz;
  }


  public Transcode bitRateKbps(String bitRateKbps) {
    this.bitRateKbps = bitRateKbps;
    return this;
  }

  /**
   * The transcoding bit rate of the transcoded video, in kilobits per second.
   * @return bitRateKbps
   */
  @javax.annotation.Nullable
  public String getBitRateKbps() {
    return bitRateKbps;
  }

  public void setBitRateKbps(String bitRateKbps) {
    this.bitRateKbps = bitRateKbps;
  }


  public Transcode dimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public Dimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
  }


  public Transcode fileSizeBytes(String fileSizeBytes) {
    this.fileSizeBytes = fileSizeBytes;
    return this;
  }

  /**
   * The size of the transcoded file, in bytes.
   * @return fileSizeBytes
   */
  @javax.annotation.Nullable
  public String getFileSizeBytes() {
    return fileSizeBytes;
  }

  public void setFileSizeBytes(String fileSizeBytes) {
    this.fileSizeBytes = fileSizeBytes;
  }


  public Transcode frameRate(Float frameRate) {
    this.frameRate = frameRate;
    return this;
  }

  /**
   * The frame rate of the transcoded video, in frames per second.
   * @return frameRate
   */
  @javax.annotation.Nullable
  public Float getFrameRate() {
    return frameRate;
  }

  public void setFrameRate(Float frameRate) {
    this.frameRate = frameRate;
  }


  public Transcode mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * The MIME type of the transcoded file.
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public Transcode name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the transcoded file.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Transcode transcoded(Boolean transcoded) {
    this.transcoded = transcoded;
    return this;
  }

  /**
   * Indicates if the transcoding was successful.
   * @return transcoded
   */
  @javax.annotation.Nullable
  public Boolean getTranscoded() {
    return transcoded;
  }

  public void setTranscoded(Boolean transcoded) {
    this.transcoded = transcoded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transcode transcode = (Transcode) o;
    return Objects.equals(this.audioBitRateKbps, transcode.audioBitRateKbps) &&
        Objects.equals(this.audioSampleRateHz, transcode.audioSampleRateHz) &&
        Objects.equals(this.bitRateKbps, transcode.bitRateKbps) &&
        Objects.equals(this.dimensions, transcode.dimensions) &&
        Objects.equals(this.fileSizeBytes, transcode.fileSizeBytes) &&
        Objects.equals(this.frameRate, transcode.frameRate) &&
        Objects.equals(this.mimeType, transcode.mimeType) &&
        Objects.equals(this.name, transcode.name) &&
        Objects.equals(this.transcoded, transcode.transcoded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioBitRateKbps, audioSampleRateHz, bitRateKbps, dimensions, fileSizeBytes, frameRate, mimeType, name, transcoded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transcode {\n");
    sb.append("    audioBitRateKbps: ").append(toIndentedString(audioBitRateKbps)).append("\n");
    sb.append("    audioSampleRateHz: ").append(toIndentedString(audioSampleRateHz)).append("\n");
    sb.append("    bitRateKbps: ").append(toIndentedString(bitRateKbps)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    fileSizeBytes: ").append(toIndentedString(fileSizeBytes)).append("\n");
    sb.append("    frameRate: ").append(toIndentedString(frameRate)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    transcoded: ").append(toIndentedString(transcoded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audioBitRateKbps");
    openapiFields.add("audioSampleRateHz");
    openapiFields.add("bitRateKbps");
    openapiFields.add("dimensions");
    openapiFields.add("fileSizeBytes");
    openapiFields.add("frameRate");
    openapiFields.add("mimeType");
    openapiFields.add("name");
    openapiFields.add("transcoded");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transcode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transcode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transcode is not found in the empty JSON string", Transcode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transcode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transcode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audioBitRateKbps") != null && !jsonObj.get("audioBitRateKbps").isJsonNull()) && !jsonObj.get("audioBitRateKbps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioBitRateKbps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audioBitRateKbps").toString()));
      }
      if ((jsonObj.get("audioSampleRateHz") != null && !jsonObj.get("audioSampleRateHz").isJsonNull()) && !jsonObj.get("audioSampleRateHz").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioSampleRateHz` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audioSampleRateHz").toString()));
      }
      if ((jsonObj.get("bitRateKbps") != null && !jsonObj.get("bitRateKbps").isJsonNull()) && !jsonObj.get("bitRateKbps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bitRateKbps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bitRateKbps").toString()));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        Dimensions.validateJsonElement(jsonObj.get("dimensions"));
      }
      if ((jsonObj.get("fileSizeBytes") != null && !jsonObj.get("fileSizeBytes").isJsonNull()) && !jsonObj.get("fileSizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileSizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileSizeBytes").toString()));
      }
      if ((jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transcode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transcode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transcode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transcode.class));

       return (TypeAdapter<T>) new TypeAdapter<Transcode>() {
           @Override
           public void write(JsonWriter out, Transcode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transcode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transcode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transcode
   * @throws IOException if the JSON string is invalid with respect to Transcode
   */
  public static Transcode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transcode.class);
  }

  /**
   * Convert an instance of Transcode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

