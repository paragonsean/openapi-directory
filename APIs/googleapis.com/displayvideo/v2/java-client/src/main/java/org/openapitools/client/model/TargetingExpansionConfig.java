/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings that control the [optimized targeting](//support.google.com/displayvideo/answer/12060859) settings of the line item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TargetingExpansionConfig {
  public static final String SERIALIZED_NAME_EXCLUDE_FIRST_PARTY_AUDIENCE = "excludeFirstPartyAudience";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_EXCLUDE_FIRST_PARTY_AUDIENCE)
  private Boolean excludeFirstPartyAudience;

  /**
   * Required. Whether optimized targeting is turned on. This field supports the following values: * &#x60;NO_EXPANSION&#x60;: optimized targeting is turned off * &#x60;LEAST_EXPANSION&#x60;: optimized targeting is turned on If this field is set to any other value, it will automatically be set to &#x60;LEAST_EXPANSION&#x60;. &#x60;NO_EXPANSION&#x60; will be the default value for the field and will be automatically assigned if you do not set the field.
   */
  @JsonAdapter(TargetingExpansionLevelEnum.Adapter.class)
  public enum TargetingExpansionLevelEnum {
    TARGETING_EXPANSION_LEVEL_UNSPECIFIED("TARGETING_EXPANSION_LEVEL_UNSPECIFIED"),
    
    NO_EXPANSION("NO_EXPANSION"),
    
    LEAST_EXPANSION("LEAST_EXPANSION"),
    
    SOME_EXPANSION("SOME_EXPANSION"),
    
    BALANCED_EXPANSION("BALANCED_EXPANSION"),
    
    MORE_EXPANSION("MORE_EXPANSION"),
    
    MOST_EXPANSION("MOST_EXPANSION");

    private String value;

    TargetingExpansionLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetingExpansionLevelEnum fromValue(String value) {
      for (TargetingExpansionLevelEnum b : TargetingExpansionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetingExpansionLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetingExpansionLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetingExpansionLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetingExpansionLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetingExpansionLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGETING_EXPANSION_LEVEL = "targetingExpansionLevel";
  @SerializedName(SERIALIZED_NAME_TARGETING_EXPANSION_LEVEL)
  private TargetingExpansionLevelEnum targetingExpansionLevel;

  public TargetingExpansionConfig() {
  }

  @Deprecated
  public TargetingExpansionConfig excludeFirstPartyAudience(Boolean excludeFirstPartyAudience) {
    this.excludeFirstPartyAudience = excludeFirstPartyAudience;
    return this;
  }

  /**
   * Whether to exclude first-party audiences from use in targeting expansion. This field was deprecated with the launch of [optimized targeting](//support.google.com/displayvideo/answer/12060859). This field will be set to &#x60;false&#x60;. If this field is set to &#x60;true&#x60; when deprecated, all positive first-party audience targeting assigned to this line item will be replaced with negative targeting of the same first-party audiences to ensure the continued exclusion of those audiences.
   * @return excludeFirstPartyAudience
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getExcludeFirstPartyAudience() {
    return excludeFirstPartyAudience;
  }

  @Deprecated
  public void setExcludeFirstPartyAudience(Boolean excludeFirstPartyAudience) {
    this.excludeFirstPartyAudience = excludeFirstPartyAudience;
  }


  public TargetingExpansionConfig targetingExpansionLevel(TargetingExpansionLevelEnum targetingExpansionLevel) {
    this.targetingExpansionLevel = targetingExpansionLevel;
    return this;
  }

  /**
   * Required. Whether optimized targeting is turned on. This field supports the following values: * &#x60;NO_EXPANSION&#x60;: optimized targeting is turned off * &#x60;LEAST_EXPANSION&#x60;: optimized targeting is turned on If this field is set to any other value, it will automatically be set to &#x60;LEAST_EXPANSION&#x60;. &#x60;NO_EXPANSION&#x60; will be the default value for the field and will be automatically assigned if you do not set the field.
   * @return targetingExpansionLevel
   */
  @javax.annotation.Nullable
  public TargetingExpansionLevelEnum getTargetingExpansionLevel() {
    return targetingExpansionLevel;
  }

  public void setTargetingExpansionLevel(TargetingExpansionLevelEnum targetingExpansionLevel) {
    this.targetingExpansionLevel = targetingExpansionLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetingExpansionConfig targetingExpansionConfig = (TargetingExpansionConfig) o;
    return Objects.equals(this.excludeFirstPartyAudience, targetingExpansionConfig.excludeFirstPartyAudience) &&
        Objects.equals(this.targetingExpansionLevel, targetingExpansionConfig.targetingExpansionLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludeFirstPartyAudience, targetingExpansionLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetingExpansionConfig {\n");
    sb.append("    excludeFirstPartyAudience: ").append(toIndentedString(excludeFirstPartyAudience)).append("\n");
    sb.append("    targetingExpansionLevel: ").append(toIndentedString(targetingExpansionLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("excludeFirstPartyAudience");
    openapiFields.add("targetingExpansionLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TargetingExpansionConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TargetingExpansionConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetingExpansionConfig is not found in the empty JSON string", TargetingExpansionConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TargetingExpansionConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetingExpansionConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("targetingExpansionLevel") != null && !jsonObj.get("targetingExpansionLevel").isJsonNull()) && !jsonObj.get("targetingExpansionLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetingExpansionLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetingExpansionLevel").toString()));
      }
      // validate the optional field `targetingExpansionLevel`
      if (jsonObj.get("targetingExpansionLevel") != null && !jsonObj.get("targetingExpansionLevel").isJsonNull()) {
        TargetingExpansionLevelEnum.validateJsonElement(jsonObj.get("targetingExpansionLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetingExpansionConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetingExpansionConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetingExpansionConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetingExpansionConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetingExpansionConfig>() {
           @Override
           public void write(JsonWriter out, TargetingExpansionConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetingExpansionConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TargetingExpansionConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TargetingExpansionConfig
   * @throws IOException if the JSON string is invalid with respect to TargetingExpansionConfig
   */
  public static TargetingExpansionConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetingExpansionConfig.class);
  }

  /**
   * Convert an instance of TargetingExpansionConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

