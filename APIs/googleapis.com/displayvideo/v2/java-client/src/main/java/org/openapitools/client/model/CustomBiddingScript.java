/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomBiddingScriptRef;
import org.openapitools.client.model.ScriptError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single custom bidding script.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:09.670881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomBiddingScript {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CUSTOM_BIDDING_ALGORITHM_ID = "customBiddingAlgorithmId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_BIDDING_ALGORITHM_ID)
  private String customBiddingAlgorithmId;

  public static final String SERIALIZED_NAME_CUSTOM_BIDDING_SCRIPT_ID = "customBiddingScriptId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_BIDDING_SCRIPT_ID)
  private String customBiddingScriptId;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<ScriptError> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private CustomBiddingScriptRef script;

  /**
   * Output only. The state of the custom bidding script.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACCEPTED("ACCEPTED"),
    
    REJECTED("REJECTED"),
    
    PENDING("PENDING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public CustomBiddingScript() {
  }

  public CustomBiddingScript(
     Boolean active, 
     String createTime, 
     String customBiddingAlgorithmId, 
     String customBiddingScriptId, 
     List<ScriptError> errors, 
     String name, 
     StateEnum state
  ) {
    this();
    this.active = active;
    this.createTime = createTime;
    this.customBiddingAlgorithmId = customBiddingAlgorithmId;
    this.customBiddingScriptId = customBiddingScriptId;
    this.errors = errors;
    this.name = name;
    this.state = state;
  }

  /**
   * Output only. Whether the script is currently being used for scoring by the parent algorithm.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }



  /**
   * Output only. The time when the script was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The unique ID of the custom bidding algorithm the script belongs to.
   * @return customBiddingAlgorithmId
   */
  @javax.annotation.Nullable
  public String getCustomBiddingAlgorithmId() {
    return customBiddingAlgorithmId;
  }



  /**
   * Output only. The unique ID of the custom bidding script.
   * @return customBiddingScriptId
   */
  @javax.annotation.Nullable
  public String getCustomBiddingScriptId() {
    return customBiddingScriptId;
  }



  /**
   * Output only. Error details of a rejected custom bidding script. This field will only be populated when state is REJECTED.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<ScriptError> getErrors() {
    return errors;
  }



  /**
   * Output only. The resource name of the custom bidding script.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public CustomBiddingScript script(CustomBiddingScriptRef script) {
    this.script = script;
    return this;
  }

  /**
   * Get script
   * @return script
   */
  @javax.annotation.Nullable
  public CustomBiddingScriptRef getScript() {
    return script;
  }

  public void setScript(CustomBiddingScriptRef script) {
    this.script = script;
  }


  /**
   * Output only. The state of the custom bidding script.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomBiddingScript customBiddingScript = (CustomBiddingScript) o;
    return Objects.equals(this.active, customBiddingScript.active) &&
        Objects.equals(this.createTime, customBiddingScript.createTime) &&
        Objects.equals(this.customBiddingAlgorithmId, customBiddingScript.customBiddingAlgorithmId) &&
        Objects.equals(this.customBiddingScriptId, customBiddingScript.customBiddingScriptId) &&
        Objects.equals(this.errors, customBiddingScript.errors) &&
        Objects.equals(this.name, customBiddingScript.name) &&
        Objects.equals(this.script, customBiddingScript.script) &&
        Objects.equals(this.state, customBiddingScript.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, createTime, customBiddingAlgorithmId, customBiddingScriptId, errors, name, script, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomBiddingScript {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    customBiddingAlgorithmId: ").append(toIndentedString(customBiddingAlgorithmId)).append("\n");
    sb.append("    customBiddingScriptId: ").append(toIndentedString(customBiddingScriptId)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("createTime");
    openapiFields.add("customBiddingAlgorithmId");
    openapiFields.add("customBiddingScriptId");
    openapiFields.add("errors");
    openapiFields.add("name");
    openapiFields.add("script");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomBiddingScript
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomBiddingScript.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomBiddingScript is not found in the empty JSON string", CustomBiddingScript.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomBiddingScript.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomBiddingScript` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("customBiddingAlgorithmId") != null && !jsonObj.get("customBiddingAlgorithmId").isJsonNull()) && !jsonObj.get("customBiddingAlgorithmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customBiddingAlgorithmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customBiddingAlgorithmId").toString()));
      }
      if ((jsonObj.get("customBiddingScriptId") != null && !jsonObj.get("customBiddingScriptId").isJsonNull()) && !jsonObj.get("customBiddingScriptId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customBiddingScriptId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customBiddingScriptId").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            ScriptError.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `script`
      if (jsonObj.get("script") != null && !jsonObj.get("script").isJsonNull()) {
        CustomBiddingScriptRef.validateJsonElement(jsonObj.get("script"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomBiddingScript.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomBiddingScript' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomBiddingScript> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomBiddingScript.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomBiddingScript>() {
           @Override
           public void write(JsonWriter out, CustomBiddingScript value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomBiddingScript read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomBiddingScript given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomBiddingScript
   * @throws IOException if the JSON string is invalid with respect to CustomBiddingScript
   */
  public static CustomBiddingScript fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomBiddingScript.class);
  }

  /**
   * Convert an instance of CustomBiddingScript to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

