/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Advertiser;
import org.openapitools.client.model.AssignedLocation;
import org.openapitools.client.model.AssignedTargetingOption;
import org.openapitools.client.model.AuditAdvertiserResponse;
import org.openapitools.client.model.BulkEditAdvertiserAssignedTargetingOptionsRequest;
import org.openapitools.client.model.BulkEditAdvertiserAssignedTargetingOptionsResponse;
import org.openapitools.client.model.BulkEditAssignedLocationsRequest;
import org.openapitools.client.model.BulkEditAssignedLocationsResponse;
import org.openapitools.client.model.BulkEditAssignedTargetingOptionsRequest;
import org.openapitools.client.model.BulkEditAssignedTargetingOptionsResponse;
import org.openapitools.client.model.BulkEditNegativeKeywordsRequest;
import org.openapitools.client.model.BulkEditNegativeKeywordsResponse;
import org.openapitools.client.model.BulkEditSitesRequest;
import org.openapitools.client.model.BulkEditSitesResponse;
import org.openapitools.client.model.BulkListAdGroupAssignedTargetingOptionsResponse;
import org.openapitools.client.model.BulkListAdvertiserAssignedTargetingOptionsResponse;
import org.openapitools.client.model.BulkListAssignedTargetingOptionsResponse;
import org.openapitools.client.model.BulkListCampaignAssignedTargetingOptionsResponse;
import org.openapitools.client.model.BulkListInsertionOrderAssignedTargetingOptionsResponse;
import org.openapitools.client.model.BulkUpdateLineItemsRequest;
import org.openapitools.client.model.BulkUpdateLineItemsResponse;
import org.openapitools.client.model.Campaign;
import org.openapitools.client.model.Channel;
import org.openapitools.client.model.CreateAssetRequest;
import org.openapitools.client.model.CreateAssetResponse;
import org.openapitools.client.model.Creative;
import org.openapitools.client.model.DuplicateLineItemRequest;
import org.openapitools.client.model.DuplicateLineItemResponse;
import org.openapitools.client.model.GenerateDefaultLineItemRequest;
import org.openapitools.client.model.InsertionOrder;
import org.openapitools.client.model.LineItem;
import org.openapitools.client.model.ListAdvertiserAssignedTargetingOptionsResponse;
import org.openapitools.client.model.ListAdvertisersResponse;
import org.openapitools.client.model.ListAssignedLocationsResponse;
import org.openapitools.client.model.ListCampaignAssignedTargetingOptionsResponse;
import org.openapitools.client.model.ListCampaignsResponse;
import org.openapitools.client.model.ListChannelsResponse;
import org.openapitools.client.model.ListCreativesResponse;
import org.openapitools.client.model.ListInsertionOrderAssignedTargetingOptionsResponse;
import org.openapitools.client.model.ListInsertionOrdersResponse;
import org.openapitools.client.model.ListInvoicesResponse;
import org.openapitools.client.model.ListLineItemAssignedTargetingOptionsResponse;
import org.openapitools.client.model.ListLineItemsResponse;
import org.openapitools.client.model.ListLocationListsResponse;
import org.openapitools.client.model.ListManualTriggersResponse;
import org.openapitools.client.model.ListNegativeKeywordListsResponse;
import org.openapitools.client.model.ListNegativeKeywordsResponse;
import org.openapitools.client.model.ListSitesResponse;
import org.openapitools.client.model.ListYoutubeAdGroupAdsResponse;
import org.openapitools.client.model.ListYoutubeAdGroupAssignedTargetingOptionsResponse;
import org.openapitools.client.model.ListYoutubeAdGroupsResponse;
import org.openapitools.client.model.LocationList;
import org.openapitools.client.model.LookupInvoiceCurrencyResponse;
import org.openapitools.client.model.ManualTrigger;
import org.openapitools.client.model.NegativeKeywordList;
import org.openapitools.client.model.ReplaceNegativeKeywordsRequest;
import org.openapitools.client.model.ReplaceNegativeKeywordsResponse;
import org.openapitools.client.model.ReplaceSitesRequest;
import org.openapitools.client.model.ReplaceSitesResponse;
import org.openapitools.client.model.YoutubeAdGroup;
import org.openapitools.client.model.YoutubeAdGroupAd;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdvertisersApi
 */
@Disabled
public class AdvertisersApiTest {

    private final AdvertisersApi api = new AdvertisersApi();

    /**
     * Uploads an asset. Returns the ID of the newly uploaded asset if successful. The asset file size should be no more than 10 MB for images, 200 MB for ZIP files, and 1 GB for videos. Must be used within the [multipart media upload process](/display-video/api/guides/how-tos/upload#multipart). Examples using provided client libraries can be found in our [Creating Creatives guide](/display-video/api/guides/creating-creatives/overview#upload_an_asset).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersAssetsUploadTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CreateAssetRequest createAssetRequest = null;
        CreateAssetResponse response = api.displayvideoAdvertisersAssetsUpload(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createAssetRequest);
        // TODO: test validations
    }

    /**
     * Audits an advertiser. Returns the counts of used entities per resource type under the advertiser provided. Used entities count towards their respective resource limit. See https://support.google.com/displayvideo/answer/6071450.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersAuditTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String readMask = null;
        AuditAdvertiserResponse response = api.displayvideoAdvertisersAudit(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, readMask);
        // TODO: test validations
    }

    /**
     * Creates a new campaign. Returns the newly created campaign if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersCampaignsCreateTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Campaign campaign = null;
        Campaign response = api.displayvideoAdvertisersCampaignsCreate(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, campaign);
        // TODO: test validations
    }

    /**
     * Permanently deletes a campaign. A deleted campaign cannot be recovered. The campaign should be archived first, i.e. set entity_status to &#x60;ENTITY_STATUS_ARCHIVED&#x60;, to be able to delete it. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersCampaignsDeleteTest() throws ApiException {
        String advertiserId = null;
        String campaignId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.displayvideoAdvertisersCampaignsDelete(advertiserId, campaignId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersCampaignsGetTest() throws ApiException {
        String advertiserId = null;
        String campaignId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Campaign response = api.displayvideoAdvertisersCampaignsGet(advertiserId, campaignId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists campaigns in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, campaigns with &#x60;ENTITY_STATUS_ARCHIVED&#x60; will not be included in the results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersCampaignsListTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCampaignsResponse response = api.displayvideoAdvertisersCampaignsList(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists assigned targeting options of a campaign across targeting types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersCampaignsListAssignedTargetingOptionsTest() throws ApiException {
        String advertiserId = null;
        String campaignId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        BulkListCampaignAssignedTargetingOptionsResponse response = api.displayvideoAdvertisersCampaignsListAssignedTargetingOptions(advertiserId, campaignId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates an existing campaign. Returns the updated campaign if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersCampaignsPatchTest() throws ApiException {
        String advertiserId = null;
        String campaignId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Campaign campaign = null;
        Campaign response = api.displayvideoAdvertisersCampaignsPatch(advertiserId, campaignId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, campaign);
        // TODO: test validations
    }

    /**
     * Gets a single targeting option assigned to a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGetTest() throws ApiException {
        String advertiserId = null;
        String campaignId = null;
        String targetingType = null;
        String assignedTargetingOptionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AssignedTargetingOption response = api.displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsGet(advertiserId, campaignId, targetingType, assignedTargetingOptionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the targeting options assigned to a campaign for a specified targeting type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsListTest() throws ApiException {
        String advertiserId = null;
        String campaignId = null;
        String targetingType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCampaignAssignedTargetingOptionsResponse response = api.displayvideoAdvertisersCampaignsTargetingTypesAssignedTargetingOptionsList(advertiserId, campaignId, targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new channel. Returns the newly created channel if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersChannelsCreateTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String partnerId = null;
        Channel channel = null;
        Channel response = api.displayvideoAdvertisersChannelsCreate(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, partnerId, channel);
        // TODO: test validations
    }

    /**
     * Lists channels for a partner or advertiser.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersChannelsListTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String partnerId = null;
        ListChannelsResponse response = api.displayvideoAdvertisersChannelsList(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken, partnerId);
        // TODO: test validations
    }

    /**
     * Updates a channel. Returns the updated channel if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersChannelsPatchTest() throws ApiException {
        String advertiserId = null;
        String channelId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String partnerId = null;
        String updateMask = null;
        Channel channel = null;
        Channel response = api.displayvideoAdvertisersChannelsPatch(advertiserId, channelId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, partnerId, updateMask, channel);
        // TODO: test validations
    }

    /**
     * Bulk edits sites under a single channel. The operation will delete the sites provided in BulkEditSitesRequest.deleted_sites and then create the sites provided in BulkEditSitesRequest.created_sites.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersChannelsSitesBulkEditTest() throws ApiException {
        String advertiserId = null;
        String channelId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BulkEditSitesRequest bulkEditSitesRequest = null;
        BulkEditSitesResponse response = api.displayvideoAdvertisersChannelsSitesBulkEdit(advertiserId, channelId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, bulkEditSitesRequest);
        // TODO: test validations
    }

    /**
     * Deletes a site from a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersChannelsSitesDeleteTest() throws ApiException {
        String advertiserId = null;
        String channelId = null;
        String urlOrAppId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String partnerId = null;
        Object response = api.displayvideoAdvertisersChannelsSitesDelete(advertiserId, channelId, urlOrAppId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, partnerId);
        // TODO: test validations
    }

    /**
     * Lists sites in a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersChannelsSitesListTest() throws ApiException {
        String advertiserId = null;
        String channelId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String partnerId = null;
        ListSitesResponse response = api.displayvideoAdvertisersChannelsSitesList(advertiserId, channelId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken, partnerId);
        // TODO: test validations
    }

    /**
     * Replaces all of the sites under a single channel. The operation will replace the sites under a channel with the sites provided in ReplaceSitesRequest.new_sites. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersChannelsSitesReplaceTest() throws ApiException {
        String advertiserId = null;
        String channelId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReplaceSitesRequest replaceSitesRequest = null;
        ReplaceSitesResponse response = api.displayvideoAdvertisersChannelsSitesReplace(advertiserId, channelId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, replaceSitesRequest);
        // TODO: test validations
    }

    /**
     * Creates a new advertiser. Returns the newly created advertiser if successful. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Advertiser advertiser = null;
        Advertiser response = api.displayvideoAdvertisersCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiser);
        // TODO: test validations
    }

    /**
     * Creates a new creative. Returns the newly created creative if successful. A [\&quot;Standard\&quot; user role](//support.google.com/displayvideo/answer/2723011) or greater for the parent advertiser or partner is required to make this request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersCreativesCreateTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Creative creative = null;
        Creative response = api.displayvideoAdvertisersCreativesCreate(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, creative);
        // TODO: test validations
    }

    /**
     * Deletes a creative. Returns error code &#x60;NOT_FOUND&#x60; if the creative does not exist. The creative should be archived first, i.e. set entity_status to &#x60;ENTITY_STATUS_ARCHIVED&#x60;, before it can be deleted. A [\&quot;Standard\&quot; user role](//support.google.com/displayvideo/answer/2723011) or greater for the parent advertiser or partner is required to make this request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersCreativesDeleteTest() throws ApiException {
        String advertiserId = null;
        String creativeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.displayvideoAdvertisersCreativesDelete(advertiserId, creativeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a creative.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersCreativesGetTest() throws ApiException {
        String advertiserId = null;
        String creativeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Creative response = api.displayvideoAdvertisersCreativesGet(advertiserId, creativeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists creatives in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, creatives with &#x60;ENTITY_STATUS_ARCHIVED&#x60; will not be included in the results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersCreativesListTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCreativesResponse response = api.displayvideoAdvertisersCreativesList(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates an existing creative. Returns the updated creative if successful. A [\&quot;Standard\&quot; user role](//support.google.com/displayvideo/answer/2723011) or greater for the parent advertiser or partner is required to make this request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersCreativesPatchTest() throws ApiException {
        String advertiserId = null;
        String creativeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Creative creative = null;
        Creative response = api.displayvideoAdvertisersCreativesPatch(advertiserId, creativeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, creative);
        // TODO: test validations
    }

    /**
     * Deletes an advertiser. Deleting an advertiser will delete all of its child resources, for example, campaigns, insertion orders and line items. A deleted advertiser cannot be recovered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersDeleteTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.displayvideoAdvertisersDelete(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Edits targeting options under a single advertiser. The operation will delete the assigned targeting options provided in BulkEditAdvertiserAssignedTargetingOptionsRequest.delete_requests and then create the assigned targeting options provided in BulkEditAdvertiserAssignedTargetingOptionsRequest.create_requests .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersEditAssignedTargetingOptionsTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BulkEditAdvertiserAssignedTargetingOptionsRequest bulkEditAdvertiserAssignedTargetingOptionsRequest = null;
        BulkEditAdvertiserAssignedTargetingOptionsResponse response = api.displayvideoAdvertisersEditAssignedTargetingOptions(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, bulkEditAdvertiserAssignedTargetingOptionsRequest);
        // TODO: test validations
    }

    /**
     * Gets an advertiser.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersGetTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Advertiser response = api.displayvideoAdvertisersGet(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a new insertion order. Returns the newly created insertion order if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersInsertionOrdersCreateTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InsertionOrder insertionOrder = null;
        InsertionOrder response = api.displayvideoAdvertisersInsertionOrdersCreate(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, insertionOrder);
        // TODO: test validations
    }

    /**
     * Deletes an insertion order. Returns error code &#x60;NOT_FOUND&#x60; if the insertion order does not exist. The insertion order should be archived first, i.e. set entity_status to &#x60;ENTITY_STATUS_ARCHIVED&#x60;, to be able to delete it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersInsertionOrdersDeleteTest() throws ApiException {
        String advertiserId = null;
        String insertionOrderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.displayvideoAdvertisersInsertionOrdersDelete(advertiserId, insertionOrderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets an insertion order. Returns error code &#x60;NOT_FOUND&#x60; if the insertion order does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersInsertionOrdersGetTest() throws ApiException {
        String advertiserId = null;
        String insertionOrderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InsertionOrder response = api.displayvideoAdvertisersInsertionOrdersGet(advertiserId, insertionOrderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists insertion orders in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, insertion orders with &#x60;ENTITY_STATUS_ARCHIVED&#x60; will not be included in the results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersInsertionOrdersListTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListInsertionOrdersResponse response = api.displayvideoAdvertisersInsertionOrdersList(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists assigned targeting options of an insertion order across targeting types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersInsertionOrdersListAssignedTargetingOptionsTest() throws ApiException {
        String advertiserId = null;
        String insertionOrderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        BulkListInsertionOrderAssignedTargetingOptionsResponse response = api.displayvideoAdvertisersInsertionOrdersListAssignedTargetingOptions(advertiserId, insertionOrderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates an existing insertion order. Returns the updated insertion order if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersInsertionOrdersPatchTest() throws ApiException {
        String advertiserId = null;
        String insertionOrderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        InsertionOrder insertionOrder = null;
        InsertionOrder response = api.displayvideoAdvertisersInsertionOrdersPatch(advertiserId, insertionOrderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, insertionOrder);
        // TODO: test validations
    }

    /**
     * Assigns a targeting option to an insertion order. Returns the assigned targeting option if successful. Supported targeting types: * &#x60;TARGETING_TYPE_AGE_RANGE&#x60; * &#x60;TARGETING_TYPE_BROWSER&#x60; * &#x60;TARGETING_TYPE_CATEGORY&#x60; * &#x60;TARGETING_TYPE_CHANNEL&#x60; * &#x60;TARGETING_TYPE_DEVICE_MAKE_MODEL&#x60; * &#x60;TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_ENVIRONMENT&#x60; * &#x60;TARGETING_TYPE_GENDER&#x60; * &#x60;TARGETING_TYPE_KEYWORD&#x60; * &#x60;TARGETING_TYPE_LANGUAGE&#x60; * &#x60;TARGETING_TYPE_NEGATIVE_KEYWORD_LIST&#x60; * &#x60;TARGETING_TYPE_OPERATING_SYSTEM&#x60; * &#x60;TARGETING_TYPE_PARENTAL_STATUS&#x60; * &#x60;TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_VIEWABILITY&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreateTest() throws ApiException {
        String advertiserId = null;
        String insertionOrderId = null;
        String targetingType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AssignedTargetingOption assignedTargetingOption = null;
        AssignedTargetingOption response = api.displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsCreate(advertiserId, insertionOrderId, targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, assignedTargetingOption);
        // TODO: test validations
    }

    /**
     * Deletes an assigned targeting option from an insertion order. Supported targeting types: * &#x60;TARGETING_TYPE_AGE_RANGE&#x60; * &#x60;TARGETING_TYPE_BROWSER&#x60; * &#x60;TARGETING_TYPE_CATEGORY&#x60; * &#x60;TARGETING_TYPE_CHANNEL&#x60; * &#x60;TARGETING_TYPE_DEVICE_MAKE_MODEL&#x60; * &#x60;TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_ENVIRONMENT&#x60; * &#x60;TARGETING_TYPE_GENDER&#x60; * &#x60;TARGETING_TYPE_KEYWORD&#x60; * &#x60;TARGETING_TYPE_LANGUAGE&#x60; * &#x60;TARGETING_TYPE_NEGATIVE_KEYWORD_LIST&#x60; * &#x60;TARGETING_TYPE_OPERATING_SYSTEM&#x60; * &#x60;TARGETING_TYPE_PARENTAL_STATUS&#x60; * &#x60;TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION&#x60; * &#x60;TARGETING_TYPE_VIEWABILITY&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDeleteTest() throws ApiException {
        String advertiserId = null;
        String insertionOrderId = null;
        String targetingType = null;
        String assignedTargetingOptionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsDelete(advertiserId, insertionOrderId, targetingType, assignedTargetingOptionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a single targeting option assigned to an insertion order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGetTest() throws ApiException {
        String advertiserId = null;
        String insertionOrderId = null;
        String targetingType = null;
        String assignedTargetingOptionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AssignedTargetingOption response = api.displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsGet(advertiserId, insertionOrderId, targetingType, assignedTargetingOptionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the targeting options assigned to an insertion order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsListTest() throws ApiException {
        String advertiserId = null;
        String insertionOrderId = null;
        String targetingType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListInsertionOrderAssignedTargetingOptionsResponse response = api.displayvideoAdvertisersInsertionOrdersTargetingTypesAssignedTargetingOptionsList(advertiserId, insertionOrderId, targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists invoices posted for an advertiser in a given month. Invoices generated by billing profiles with a \&quot;Partner\&quot; invoice level are not retrievable through this method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersInvoicesListTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String issueMonth = null;
        String loiSapinInvoiceType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListInvoicesResponse response = api.displayvideoAdvertisersInvoicesList(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, issueMonth, loiSapinInvoiceType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieves the invoice currency used by an advertiser in a given month.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersInvoicesLookupInvoiceCurrencyTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String invoiceMonth = null;
        LookupInvoiceCurrencyResponse response = api.displayvideoAdvertisersInvoicesLookupInvoiceCurrency(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, invoiceMonth);
        // TODO: test validations
    }

    /**
     * Bulk edits targeting options under multiple line items. The operation will delete the assigned targeting options provided in BulkEditAssignedTargetingOptionsRequest.delete_requests and then create the assigned targeting options provided in BulkEditAssignedTargetingOptionsRequest.create_requests. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * lineItems.bulkUpdate * lineItems.patch * assignedTargetingOptions.create * assignedTargetingOptions.delete YouTube &amp; Partners line items cannot be created or updated using the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptionsTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BulkEditAssignedTargetingOptionsRequest bulkEditAssignedTargetingOptionsRequest = null;
        BulkEditAssignedTargetingOptionsResponse response = api.displayvideoAdvertisersLineItemsBulkEditAssignedTargetingOptions(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, bulkEditAssignedTargetingOptionsRequest);
        // TODO: test validations
    }

    /**
     * Lists assigned targeting options for multiple line items across targeting types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLineItemsBulkListAssignedTargetingOptionsTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        List<String> lineItemIds = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        BulkListAssignedTargetingOptionsResponse response = api.displayvideoAdvertisersLineItemsBulkListAssignedTargetingOptions(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, lineItemIds, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates multiple line items. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * BulkEditAssignedTargetingOptions * UpdateLineItem * assignedTargetingOptions.create * assignedTargetingOptions.delete YouTube &amp; Partners line items cannot be created or updated using the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLineItemsBulkUpdateTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BulkUpdateLineItemsRequest bulkUpdateLineItemsRequest = null;
        BulkUpdateLineItemsResponse response = api.displayvideoAdvertisersLineItemsBulkUpdate(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, bulkUpdateLineItemsRequest);
        // TODO: test validations
    }

    /**
     * Creates a new line item. Returns the newly created line item if successful. YouTube &amp; Partners line items cannot be created or updated using the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLineItemsCreateTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LineItem lineItem = null;
        LineItem response = api.displayvideoAdvertisersLineItemsCreate(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, lineItem);
        // TODO: test validations
    }

    /**
     * Deletes a line item. Returns error code &#x60;NOT_FOUND&#x60; if the line item does not exist. The line item should be archived first, i.e. set entity_status to &#x60;ENTITY_STATUS_ARCHIVED&#x60;, to be able to delete it. YouTube &amp; Partners line items cannot be created or updated using the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLineItemsDeleteTest() throws ApiException {
        String advertiserId = null;
        String lineItemId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.displayvideoAdvertisersLineItemsDelete(advertiserId, lineItemId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Duplicates a line item. Returns the ID of the created line item if successful. YouTube &amp; Partners line items cannot be created or updated using the API. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLineItemsDuplicateTest() throws ApiException {
        String advertiserId = null;
        String lineItemId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DuplicateLineItemRequest duplicateLineItemRequest = null;
        DuplicateLineItemResponse response = api.displayvideoAdvertisersLineItemsDuplicate(advertiserId, lineItemId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, duplicateLineItemRequest);
        // TODO: test validations
    }

    /**
     * Creates a new line item with settings (including targeting) inherited from the insertion order and an &#x60;ENTITY_STATUS_DRAFT&#x60; entity_status. Returns the newly created line item if successful. There are default values based on the three fields: * The insertion order&#39;s insertion_order_type * The insertion order&#39;s automation_type * The given line_item_type YouTube &amp; Partners line items cannot be created or updated using the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLineItemsGenerateDefaultTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GenerateDefaultLineItemRequest generateDefaultLineItemRequest = null;
        LineItem response = api.displayvideoAdvertisersLineItemsGenerateDefault(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, generateDefaultLineItemRequest);
        // TODO: test validations
    }

    /**
     * Gets a line item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLineItemsGetTest() throws ApiException {
        String advertiserId = null;
        String lineItemId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LineItem response = api.displayvideoAdvertisersLineItemsGet(advertiserId, lineItemId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists line items in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, line items with &#x60;ENTITY_STATUS_ARCHIVED&#x60; will not be included in the results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLineItemsListTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLineItemsResponse response = api.displayvideoAdvertisersLineItemsList(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates an existing line item. Returns the updated line item if successful. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * BulkEditAssignedTargetingOptions * BulkUpdateLineItems * assignedTargetingOptions.create * assignedTargetingOptions.delete YouTube &amp; Partners line items cannot be created or updated using the API. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLineItemsPatchTest() throws ApiException {
        String advertiserId = null;
        String lineItemId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        LineItem lineItem = null;
        LineItem response = api.displayvideoAdvertisersLineItemsPatch(advertiserId, lineItemId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, lineItem);
        // TODO: test validations
    }

    /**
     * Assigns a targeting option to a line item. Returns the assigned targeting option if successful. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * lineItems.bulkEditAssignedTargetingOptions * lineItems.bulkUpdate * lineItems.patch * DeleteLineItemAssignedTargetingOption YouTube &amp; Partners line items cannot be created or updated using the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreateTest() throws ApiException {
        String advertiserId = null;
        String lineItemId = null;
        String targetingType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AssignedTargetingOption assignedTargetingOption = null;
        AssignedTargetingOption response = api.displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsCreate(advertiserId, lineItemId, targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, assignedTargetingOption);
        // TODO: test validations
    }

    /**
     * Deletes an assigned targeting option from a line item. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * lineItems.bulkEditAssignedTargetingOptions * lineItems.bulkUpdate * lineItems.patch * CreateLineItemAssignedTargetingOption YouTube &amp; Partners line items cannot be created or updated using the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDeleteTest() throws ApiException {
        String advertiserId = null;
        String lineItemId = null;
        String targetingType = null;
        String assignedTargetingOptionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsDelete(advertiserId, lineItemId, targetingType, assignedTargetingOptionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a single targeting option assigned to a line item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGetTest() throws ApiException {
        String advertiserId = null;
        String lineItemId = null;
        String targetingType = null;
        String assignedTargetingOptionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AssignedTargetingOption response = api.displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsGet(advertiserId, lineItemId, targetingType, assignedTargetingOptionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the targeting options assigned to a line item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsListTest() throws ApiException {
        String advertiserId = null;
        String lineItemId = null;
        String targetingType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLineItemAssignedTargetingOptionsResponse response = api.displayvideoAdvertisersLineItemsTargetingTypesAssignedTargetingOptionsList(advertiserId, lineItemId, targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists advertisers that are accessible to the current user. The order is defined by the order_by parameter. A single partner_id is required. Cross-partner listing is not supported.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String partnerId = null;
        ListAdvertisersResponse response = api.displayvideoAdvertisersList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken, partnerId);
        // TODO: test validations
    }

    /**
     * Lists assigned targeting options of an advertiser across targeting types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersListAssignedTargetingOptionsTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        BulkListAdvertiserAssignedTargetingOptionsResponse response = api.displayvideoAdvertisersListAssignedTargetingOptions(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Bulk edits multiple assignments between locations and a single location list. The operation will delete the assigned locations provided in deletedAssignedLocations and then create the assigned locations provided in createdAssignedLocations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLocationListsAssignedLocationsBulkEditTest() throws ApiException {
        String advertiserId = null;
        String locationListId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BulkEditAssignedLocationsRequest bulkEditAssignedLocationsRequest = null;
        BulkEditAssignedLocationsResponse response = api.displayvideoAdvertisersLocationListsAssignedLocationsBulkEdit(advertiserId, locationListId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, bulkEditAssignedLocationsRequest);
        // TODO: test validations
    }

    /**
     * Creates an assignment between a location and a location list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLocationListsAssignedLocationsCreateTest() throws ApiException {
        String advertiserId = null;
        String locationListId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AssignedLocation assignedLocation = null;
        AssignedLocation response = api.displayvideoAdvertisersLocationListsAssignedLocationsCreate(advertiserId, locationListId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, assignedLocation);
        // TODO: test validations
    }

    /**
     * Deletes the assignment between a location and a location list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLocationListsAssignedLocationsDeleteTest() throws ApiException {
        String advertiserId = null;
        String locationListId = null;
        String assignedLocationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.displayvideoAdvertisersLocationListsAssignedLocationsDelete(advertiserId, locationListId, assignedLocationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists locations assigned to a location list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLocationListsAssignedLocationsListTest() throws ApiException {
        String advertiserId = null;
        String locationListId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAssignedLocationsResponse response = api.displayvideoAdvertisersLocationListsAssignedLocationsList(advertiserId, locationListId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new location list. Returns the newly created location list if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLocationListsCreateTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LocationList locationList = null;
        LocationList response = api.displayvideoAdvertisersLocationListsCreate(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, locationList);
        // TODO: test validations
    }

    /**
     * Lists location lists based on a given advertiser id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLocationListsListTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationListsResponse response = api.displayvideoAdvertisersLocationListsList(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a location list. Returns the updated location list if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersLocationListsPatchTest() throws ApiException {
        String advertiserId = null;
        String locationListId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        LocationList locationList = null;
        LocationList response = api.displayvideoAdvertisersLocationListsPatch(advertiserId, locationListId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, locationList);
        // TODO: test validations
    }

    /**
     * Activates a manual trigger. Each activation of the manual trigger must be at least 5 minutes apart, otherwise an error will be returned. **Warning:** Line Items using manual triggers no longer serve in Display &amp; Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersManualTriggersActivateTest() throws ApiException {
        String advertiserId = null;
        String triggerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        ManualTrigger response = api.displayvideoAdvertisersManualTriggersActivate(advertiserId, triggerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Creates a new manual trigger. Returns the newly created manual trigger if successful. **Warning:** Line Items using manual triggers no longer serve in Display &amp; Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersManualTriggersCreateTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ManualTrigger manualTrigger = null;
        ManualTrigger response = api.displayvideoAdvertisersManualTriggersCreate(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, manualTrigger);
        // TODO: test validations
    }

    /**
     * Deactivates a manual trigger. **Warning:** Line Items using manual triggers no longer serve in Display &amp; Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersManualTriggersDeactivateTest() throws ApiException {
        String advertiserId = null;
        String triggerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        ManualTrigger response = api.displayvideoAdvertisersManualTriggersDeactivate(advertiserId, triggerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Gets a manual trigger. **Warning:** Line Items using manual triggers no longer serve in Display &amp; Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersManualTriggersGetTest() throws ApiException {
        String advertiserId = null;
        String triggerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ManualTrigger response = api.displayvideoAdvertisersManualTriggersGet(advertiserId, triggerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists manual triggers that are accessible to the current user for a given advertiser ID. The order is defined by the order_by parameter. A single advertiser_id is required. **Warning:** Line Items using manual triggers no longer serve in Display &amp; Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersManualTriggersListTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListManualTriggersResponse response = api.displayvideoAdvertisersManualTriggersList(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a manual trigger. Returns the updated manual trigger if successful. **Warning:** Line Items using manual triggers no longer serve in Display &amp; Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersManualTriggersPatchTest() throws ApiException {
        String advertiserId = null;
        String triggerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        ManualTrigger manualTrigger = null;
        ManualTrigger response = api.displayvideoAdvertisersManualTriggersPatch(advertiserId, triggerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, manualTrigger);
        // TODO: test validations
    }

    /**
     * Creates a new negative keyword list. Returns the newly created negative keyword list if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersNegativeKeywordListsCreateTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        NegativeKeywordList negativeKeywordList = null;
        NegativeKeywordList response = api.displayvideoAdvertisersNegativeKeywordListsCreate(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, negativeKeywordList);
        // TODO: test validations
    }

    /**
     * Lists negative keyword lists based on a given advertiser id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersNegativeKeywordListsListTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListNegativeKeywordListsResponse response = api.displayvideoAdvertisersNegativeKeywordListsList(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Bulk edits negative keywords in a single negative keyword list. The operation will delete the negative keywords provided in BulkEditNegativeKeywordsRequest.deleted_negative_keywords and then create the negative keywords provided in BulkEditNegativeKeywordsRequest.created_negative_keywords. This operation is guaranteed to be atomic and will never result in a partial success or partial failure.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEditTest() throws ApiException {
        String advertiserId = null;
        String negativeKeywordListId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BulkEditNegativeKeywordsRequest bulkEditNegativeKeywordsRequest = null;
        BulkEditNegativeKeywordsResponse response = api.displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsBulkEdit(advertiserId, negativeKeywordListId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, bulkEditNegativeKeywordsRequest);
        // TODO: test validations
    }

    /**
     * Deletes a negative keyword from a negative keyword list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDeleteTest() throws ApiException {
        String advertiserId = null;
        String negativeKeywordListId = null;
        String keywordValue = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsDelete(advertiserId, negativeKeywordListId, keywordValue, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists negative keywords in a negative keyword list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsListTest() throws ApiException {
        String advertiserId = null;
        String negativeKeywordListId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListNegativeKeywordsResponse response = api.displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsList(advertiserId, negativeKeywordListId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Replaces all negative keywords in a single negative keyword list. The operation will replace the keywords in a negative keyword list with keywords provided in ReplaceNegativeKeywordsRequest.new_negative_keywords.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplaceTest() throws ApiException {
        String advertiserId = null;
        String negativeKeywordListId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReplaceNegativeKeywordsRequest replaceNegativeKeywordsRequest = null;
        ReplaceNegativeKeywordsResponse response = api.displayvideoAdvertisersNegativeKeywordListsNegativeKeywordsReplace(advertiserId, negativeKeywordListId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, replaceNegativeKeywordsRequest);
        // TODO: test validations
    }

    /**
     * Updates a negative keyword list. Returns the updated negative keyword list if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersNegativeKeywordListsPatchTest() throws ApiException {
        String advertiserId = null;
        String negativeKeywordListId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        NegativeKeywordList negativeKeywordList = null;
        NegativeKeywordList response = api.displayvideoAdvertisersNegativeKeywordListsPatch(advertiserId, negativeKeywordListId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, negativeKeywordList);
        // TODO: test validations
    }

    /**
     * Updates an existing advertiser. Returns the updated advertiser if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersPatchTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Advertiser advertiser = null;
        Advertiser response = api.displayvideoAdvertisersPatch(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, advertiser);
        // TODO: test validations
    }

    /**
     * Assigns a targeting option to an advertiser. Returns the assigned targeting option if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreateTest() throws ApiException {
        String advertiserId = null;
        String targetingType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AssignedTargetingOption assignedTargetingOption = null;
        AssignedTargetingOption response = api.displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsCreate(advertiserId, targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, assignedTargetingOption);
        // TODO: test validations
    }

    /**
     * Deletes an assigned targeting option from an advertiser.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDeleteTest() throws ApiException {
        String advertiserId = null;
        String targetingType = null;
        String assignedTargetingOptionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsDelete(advertiserId, targetingType, assignedTargetingOptionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a single targeting option assigned to an advertiser.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGetTest() throws ApiException {
        String advertiserId = null;
        String targetingType = null;
        String assignedTargetingOptionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AssignedTargetingOption response = api.displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsGet(advertiserId, targetingType, assignedTargetingOptionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the targeting options assigned to an advertiser.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsListTest() throws ApiException {
        String advertiserId = null;
        String targetingType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAdvertiserAssignedTargetingOptionsResponse response = api.displayvideoAdvertisersTargetingTypesAssignedTargetingOptionsList(advertiserId, targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Gets a YouTube ad group ad.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersYoutubeAdGroupAdsGetTest() throws ApiException {
        String advertiserId = null;
        String youtubeAdGroupAdId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        YoutubeAdGroupAd response = api.displayvideoAdvertisersYoutubeAdGroupAdsGet(advertiserId, youtubeAdGroupAdId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists YouTube ad group ads.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersYoutubeAdGroupAdsListTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListYoutubeAdGroupAdsResponse response = api.displayvideoAdvertisersYoutubeAdGroupAdsList(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists assigned targeting options for multiple YouTube ad groups across targeting types. Inherited assigned targeting options are not included.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptionsTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        List<String> youtubeAdGroupIds = null;
        BulkListAdGroupAssignedTargetingOptionsResponse response = api.displayvideoAdvertisersYoutubeAdGroupsBulkListAdGroupAssignedTargetingOptions(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken, youtubeAdGroupIds);
        // TODO: test validations
    }

    /**
     * Gets a YouTube ad group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersYoutubeAdGroupsGetTest() throws ApiException {
        String advertiserId = null;
        String youtubeAdGroupId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        YoutubeAdGroup response = api.displayvideoAdvertisersYoutubeAdGroupsGet(advertiserId, youtubeAdGroupId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists YouTube ad groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersYoutubeAdGroupsListTest() throws ApiException {
        String advertiserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListYoutubeAdGroupsResponse response = api.displayvideoAdvertisersYoutubeAdGroupsList(advertiserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Gets a single targeting option assigned to a YouTube ad group. Inherited assigned targeting options are not included.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGetTest() throws ApiException {
        String advertiserId = null;
        String youtubeAdGroupId = null;
        String targetingType = null;
        String assignedTargetingOptionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AssignedTargetingOption response = api.displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsGet(advertiserId, youtubeAdGroupId, targetingType, assignedTargetingOptionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the targeting options assigned to a YouTube ad group. Inherited assigned targeting options are not included.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsListTest() throws ApiException {
        String advertiserId = null;
        String youtubeAdGroupId = null;
        String targetingType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListYoutubeAdGroupAssignedTargetingOptionsResponse response = api.displayvideoAdvertisersYoutubeAdGroupsTargetingTypesAssignedTargetingOptionsList(advertiserId, youtubeAdGroupId, targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

}
