/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssignedTargetingOption;
import org.openapitools.client.model.BulkEditPartnerAssignedTargetingOptionsRequest;
import org.openapitools.client.model.BulkEditPartnerAssignedTargetingOptionsResponse;
import org.openapitools.client.model.BulkEditSitesRequest;
import org.openapitools.client.model.BulkEditSitesResponse;
import org.openapitools.client.model.Channel;
import org.openapitools.client.model.ListChannelsResponse;
import org.openapitools.client.model.ListPartnerAssignedTargetingOptionsResponse;
import org.openapitools.client.model.ListPartnersResponse;
import org.openapitools.client.model.ListSitesResponse;
import org.openapitools.client.model.Partner;
import org.openapitools.client.model.ReplaceSitesRequest;
import org.openapitools.client.model.ReplaceSitesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PartnersApi
 */
@Disabled
public class PartnersApiTest {

    private final PartnersApi api = new PartnersApi();

    /**
     * Creates a new channel. Returns the newly created channel if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoPartnersChannelsCreateTest() throws ApiException {
        String partnerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        Channel channel = null;
        Channel response = api.displayvideoPartnersChannelsCreate(partnerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, channel);
        // TODO: test validations
    }

    /**
     * Lists channels for a partner or advertiser.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoPartnersChannelsListTest() throws ApiException {
        String partnerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListChannelsResponse response = api.displayvideoPartnersChannelsList(partnerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a channel. Returns the updated channel if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoPartnersChannelsPatchTest() throws ApiException {
        String partnerId = null;
        String channelId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        String updateMask = null;
        Channel channel = null;
        Channel response = api.displayvideoPartnersChannelsPatch(partnerId, channelId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, updateMask, channel);
        // TODO: test validations
    }

    /**
     * Bulk edits sites under a single channel. The operation will delete the sites provided in BulkEditSitesRequest.deleted_sites and then create the sites provided in BulkEditSitesRequest.created_sites.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoPartnersChannelsSitesBulkEditTest() throws ApiException {
        String partnerId = null;
        String channelId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BulkEditSitesRequest bulkEditSitesRequest = null;
        BulkEditSitesResponse response = api.displayvideoPartnersChannelsSitesBulkEdit(partnerId, channelId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, bulkEditSitesRequest);
        // TODO: test validations
    }

    /**
     * Deletes a site from a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoPartnersChannelsSitesDeleteTest() throws ApiException {
        String partnerId = null;
        String channelId = null;
        String urlOrAppId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        Object response = api.displayvideoPartnersChannelsSitesDelete(partnerId, channelId, urlOrAppId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId);
        // TODO: test validations
    }

    /**
     * Lists sites in a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoPartnersChannelsSitesListTest() throws ApiException {
        String partnerId = null;
        String channelId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListSitesResponse response = api.displayvideoPartnersChannelsSitesList(partnerId, channelId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Replaces all of the sites under a single channel. The operation will replace the sites under a channel with the sites provided in ReplaceSitesRequest.new_sites. **This method regularly experiences high latency.** We recommend [increasing your default timeout](/display-video/api/guides/best-practices/timeouts#client_library_timeout) to avoid errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoPartnersChannelsSitesReplaceTest() throws ApiException {
        String partnerId = null;
        String channelId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReplaceSitesRequest replaceSitesRequest = null;
        ReplaceSitesResponse response = api.displayvideoPartnersChannelsSitesReplace(partnerId, channelId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, replaceSitesRequest);
        // TODO: test validations
    }

    /**
     * Edits targeting options under a single partner. The operation will delete the assigned targeting options provided in BulkEditPartnerAssignedTargetingOptionsRequest.deleteRequests and then create the assigned targeting options provided in BulkEditPartnerAssignedTargetingOptionsRequest.createRequests .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoPartnersEditAssignedTargetingOptionsTest() throws ApiException {
        String partnerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BulkEditPartnerAssignedTargetingOptionsRequest bulkEditPartnerAssignedTargetingOptionsRequest = null;
        BulkEditPartnerAssignedTargetingOptionsResponse response = api.displayvideoPartnersEditAssignedTargetingOptions(partnerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, bulkEditPartnerAssignedTargetingOptionsRequest);
        // TODO: test validations
    }

    /**
     * Gets a partner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoPartnersGetTest() throws ApiException {
        String partnerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Partner response = api.displayvideoPartnersGet(partnerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists partners that are accessible to the current user. The order is defined by the order_by parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoPartnersListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPartnersResponse response = api.displayvideoPartnersList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Assigns a targeting option to a partner. Returns the assigned targeting option if successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateTest() throws ApiException {
        String partnerId = null;
        String targetingType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AssignedTargetingOption assignedTargetingOption = null;
        AssignedTargetingOption response = api.displayvideoPartnersTargetingTypesAssignedTargetingOptionsCreate(partnerId, targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, assignedTargetingOption);
        // TODO: test validations
    }

    /**
     * Deletes an assigned targeting option from a partner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteTest() throws ApiException {
        String partnerId = null;
        String targetingType = null;
        String assignedTargetingOptionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.displayvideoPartnersTargetingTypesAssignedTargetingOptionsDelete(partnerId, targetingType, assignedTargetingOptionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a single targeting option assigned to a partner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoPartnersTargetingTypesAssignedTargetingOptionsGetTest() throws ApiException {
        String partnerId = null;
        String targetingType = null;
        String assignedTargetingOptionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AssignedTargetingOption response = api.displayvideoPartnersTargetingTypesAssignedTargetingOptionsGet(partnerId, targetingType, assignedTargetingOptionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the targeting options assigned to a partner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoPartnersTargetingTypesAssignedTargetingOptionsListTest() throws ApiException {
        String partnerId = null;
        String targetingType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPartnerAssignedTargetingOptionsResponse response = api.displayvideoPartnersTargetingTypesAssignedTargetingOptionsList(partnerId, targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

}
