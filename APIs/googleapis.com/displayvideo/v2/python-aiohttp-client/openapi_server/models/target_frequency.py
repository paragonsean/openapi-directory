# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetFrequency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_count: str=None, time_unit: str=None, time_unit_count: int=None):
        """TargetFrequency - a model defined in OpenAPI

        :param target_count: The target_count of this TargetFrequency.
        :param time_unit: The time_unit of this TargetFrequency.
        :param time_unit_count: The time_unit_count of this TargetFrequency.
        """
        self.openapi_types = {
            'target_count': str,
            'time_unit': str,
            'time_unit_count': int
        }

        self.attribute_map = {
            'target_count': 'targetCount',
            'time_unit': 'timeUnit',
            'time_unit_count': 'timeUnitCount'
        }

        self._target_count = target_count
        self._time_unit = time_unit
        self._time_unit_count = time_unit_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetFrequency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetFrequency of this TargetFrequency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_count(self):
        """Gets the target_count of this TargetFrequency.

        The target number of times, on average, the ads will be shown to the same person in the timespan dictated by time_unit and time_unit_count.

        :return: The target_count of this TargetFrequency.
        :rtype: str
        """
        return self._target_count

    @target_count.setter
    def target_count(self, target_count):
        """Sets the target_count of this TargetFrequency.

        The target number of times, on average, the ads will be shown to the same person in the timespan dictated by time_unit and time_unit_count.

        :param target_count: The target_count of this TargetFrequency.
        :type target_count: str
        """

        self._target_count = target_count

    @property
    def time_unit(self):
        """Gets the time_unit of this TargetFrequency.

        The unit of time in which the target frequency will be applied. The following time unit is applicable: * `TIME_UNIT_WEEKS`

        :return: The time_unit of this TargetFrequency.
        :rtype: str
        """
        return self._time_unit

    @time_unit.setter
    def time_unit(self, time_unit):
        """Sets the time_unit of this TargetFrequency.

        The unit of time in which the target frequency will be applied. The following time unit is applicable: * `TIME_UNIT_WEEKS`

        :param time_unit: The time_unit of this TargetFrequency.
        :type time_unit: str
        """
        allowed_values = ["TIME_UNIT_UNSPECIFIED", "TIME_UNIT_LIFETIME", "TIME_UNIT_MONTHS", "TIME_UNIT_WEEKS", "TIME_UNIT_DAYS", "TIME_UNIT_HOURS", "TIME_UNIT_MINUTES"]  # noqa: E501
        if time_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `time_unit` ({0}), must be one of {1}"
                .format(time_unit, allowed_values)
            )

        self._time_unit = time_unit

    @property
    def time_unit_count(self):
        """Gets the time_unit_count of this TargetFrequency.

        The number of time_unit the target frequency will last. The following restrictions apply based on the value of time_unit: * `TIME_UNIT_WEEKS` - must be 1

        :return: The time_unit_count of this TargetFrequency.
        :rtype: int
        """
        return self._time_unit_count

    @time_unit_count.setter
    def time_unit_count(self, time_unit_count):
        """Sets the time_unit_count of this TargetFrequency.

        The number of time_unit the target frequency will last. The following restrictions apply based on the value of time_unit: * `TIME_UNIT_WEEKS` - must be 1

        :param time_unit_count: The time_unit_count of this TargetFrequency.
        :type time_unit_count: int
        """

        self._time_unit_count = time_unit_count
