# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.video_ad_sequence_step import VideoAdSequenceStep
from openapi_server import util


class VideoAdSequenceSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, minimum_duration: str=None, steps: List[VideoAdSequenceStep]=None):
        """VideoAdSequenceSettings - a model defined in OpenAPI

        :param minimum_duration: The minimum_duration of this VideoAdSequenceSettings.
        :param steps: The steps of this VideoAdSequenceSettings.
        """
        self.openapi_types = {
            'minimum_duration': str,
            'steps': List[VideoAdSequenceStep]
        }

        self.attribute_map = {
            'minimum_duration': 'minimumDuration',
            'steps': 'steps'
        }

        self._minimum_duration = minimum_duration
        self._steps = steps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoAdSequenceSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoAdSequenceSettings of this VideoAdSequenceSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def minimum_duration(self):
        """Gets the minimum_duration of this VideoAdSequenceSettings.

        The minimum time interval before the same user sees this sequence again.

        :return: The minimum_duration of this VideoAdSequenceSettings.
        :rtype: str
        """
        return self._minimum_duration

    @minimum_duration.setter
    def minimum_duration(self, minimum_duration):
        """Sets the minimum_duration of this VideoAdSequenceSettings.

        The minimum time interval before the same user sees this sequence again.

        :param minimum_duration: The minimum_duration of this VideoAdSequenceSettings.
        :type minimum_duration: str
        """
        allowed_values = ["VIDEO_AD_SEQUENCE_MINIMUM_DURATION_UNSPECIFIED", "VIDEO_AD_SEQUENCE_MINIMUM_DURATION_WEEK", "VIDEO_AD_SEQUENCE_MINIMUM_DURATION_MONTH"]  # noqa: E501
        if minimum_duration not in allowed_values:
            raise ValueError(
                "Invalid value for `minimum_duration` ({0}), must be one of {1}"
                .format(minimum_duration, allowed_values)
            )

        self._minimum_duration = minimum_duration

    @property
    def steps(self):
        """Gets the steps of this VideoAdSequenceSettings.

        The steps of which the sequence consists.

        :return: The steps of this VideoAdSequenceSettings.
        :rtype: List[VideoAdSequenceStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this VideoAdSequenceSettings.

        The steps of which the sequence consists.

        :param steps: The steps of this VideoAdSequenceSettings.
        :type steps: List[VideoAdSequenceStep]
        """

        self._steps = steps
