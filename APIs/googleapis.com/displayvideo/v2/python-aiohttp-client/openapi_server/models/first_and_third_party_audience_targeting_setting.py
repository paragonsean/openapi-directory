# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FirstAndThirdPartyAudienceTargetingSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_and_third_party_audience_id: str=None, recency: str=None):
        """FirstAndThirdPartyAudienceTargetingSetting - a model defined in OpenAPI

        :param first_and_third_party_audience_id: The first_and_third_party_audience_id of this FirstAndThirdPartyAudienceTargetingSetting.
        :param recency: The recency of this FirstAndThirdPartyAudienceTargetingSetting.
        """
        self.openapi_types = {
            'first_and_third_party_audience_id': str,
            'recency': str
        }

        self.attribute_map = {
            'first_and_third_party_audience_id': 'firstAndThirdPartyAudienceId',
            'recency': 'recency'
        }

        self._first_and_third_party_audience_id = first_and_third_party_audience_id
        self._recency = recency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirstAndThirdPartyAudienceTargetingSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirstAndThirdPartyAudienceTargetingSetting of this FirstAndThirdPartyAudienceTargetingSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_and_third_party_audience_id(self):
        """Gets the first_and_third_party_audience_id of this FirstAndThirdPartyAudienceTargetingSetting.

        Required. First and third party audience id of the first and third party audience targeting setting. This id is first_and_third_party_audience_id.

        :return: The first_and_third_party_audience_id of this FirstAndThirdPartyAudienceTargetingSetting.
        :rtype: str
        """
        return self._first_and_third_party_audience_id

    @first_and_third_party_audience_id.setter
    def first_and_third_party_audience_id(self, first_and_third_party_audience_id):
        """Sets the first_and_third_party_audience_id of this FirstAndThirdPartyAudienceTargetingSetting.

        Required. First and third party audience id of the first and third party audience targeting setting. This id is first_and_third_party_audience_id.

        :param first_and_third_party_audience_id: The first_and_third_party_audience_id of this FirstAndThirdPartyAudienceTargetingSetting.
        :type first_and_third_party_audience_id: str
        """

        self._first_and_third_party_audience_id = first_and_third_party_audience_id

    @property
    def recency(self):
        """Gets the recency of this FirstAndThirdPartyAudienceTargetingSetting.

        The recency of the first and third party audience targeting setting. Only applicable to first party audiences, otherwise will be ignored. For more info, refer to https://support.google.com/displayvideo/answer/2949947#recency When unspecified, no recency limit will be used.

        :return: The recency of this FirstAndThirdPartyAudienceTargetingSetting.
        :rtype: str
        """
        return self._recency

    @recency.setter
    def recency(self, recency):
        """Sets the recency of this FirstAndThirdPartyAudienceTargetingSetting.

        The recency of the first and third party audience targeting setting. Only applicable to first party audiences, otherwise will be ignored. For more info, refer to https://support.google.com/displayvideo/answer/2949947#recency When unspecified, no recency limit will be used.

        :param recency: The recency of this FirstAndThirdPartyAudienceTargetingSetting.
        :type recency: str
        """
        allowed_values = ["RECENCY_NO_LIMIT", "RECENCY_1_MINUTE", "RECENCY_5_MINUTES", "RECENCY_10_MINUTES", "RECENCY_15_MINUTES", "RECENCY_30_MINUTES", "RECENCY_1_HOUR", "RECENCY_2_HOURS", "RECENCY_3_HOURS", "RECENCY_6_HOURS", "RECENCY_12_HOURS", "RECENCY_1_DAY", "RECENCY_2_DAYS", "RECENCY_3_DAYS", "RECENCY_5_DAYS", "RECENCY_7_DAYS", "RECENCY_10_DAYS", "RECENCY_14_DAYS", "RECENCY_15_DAYS", "RECENCY_21_DAYS", "RECENCY_28_DAYS", "RECENCY_30_DAYS", "RECENCY_40_DAYS", "RECENCY_45_DAYS", "RECENCY_60_DAYS", "RECENCY_90_DAYS", "RECENCY_120_DAYS", "RECENCY_180_DAYS", "RECENCY_270_DAYS", "RECENCY_365_DAYS"]  # noqa: E501
        if recency not in allowed_values:
            raise ValueError(
                "Invalid value for `recency` ({0}), must be one of {1}"
                .format(recency, allowed_values)
            )

        self._recency = recency
