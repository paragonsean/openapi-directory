# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OnScreenPositionAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_type: str=None, on_screen_position: str=None, targeting_option_id: str=None):
        """OnScreenPositionAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param ad_type: The ad_type of this OnScreenPositionAssignedTargetingOptionDetails.
        :param on_screen_position: The on_screen_position of this OnScreenPositionAssignedTargetingOptionDetails.
        :param targeting_option_id: The targeting_option_id of this OnScreenPositionAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'ad_type': str,
            'on_screen_position': str,
            'targeting_option_id': str
        }

        self.attribute_map = {
            'ad_type': 'adType',
            'on_screen_position': 'onScreenPosition',
            'targeting_option_id': 'targetingOptionId'
        }

        self._ad_type = ad_type
        self._on_screen_position = on_screen_position
        self._targeting_option_id = targeting_option_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnScreenPositionAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OnScreenPositionAssignedTargetingOptionDetails of this OnScreenPositionAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_type(self):
        """Gets the ad_type of this OnScreenPositionAssignedTargetingOptionDetails.

        Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default. Possible values are: * `AD_TYPE_DISPLAY`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_DISPLAY_DEFAULT`. * `AD_TYPE_VIDEO`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_VIDEO_DEFAULT`.

        :return: The ad_type of this OnScreenPositionAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._ad_type

    @ad_type.setter
    def ad_type(self, ad_type):
        """Sets the ad_type of this OnScreenPositionAssignedTargetingOptionDetails.

        Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default. Possible values are: * `AD_TYPE_DISPLAY`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_DISPLAY_DEFAULT`. * `AD_TYPE_VIDEO`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_VIDEO_DEFAULT`.

        :param ad_type: The ad_type of this OnScreenPositionAssignedTargetingOptionDetails.
        :type ad_type: str
        """
        allowed_values = ["AD_TYPE_UNSPECIFIED", "AD_TYPE_DISPLAY", "AD_TYPE_VIDEO", "AD_TYPE_AUDIO"]  # noqa: E501
        if ad_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ad_type` ({0}), must be one of {1}"
                .format(ad_type, allowed_values)
            )

        self._ad_type = ad_type

    @property
    def on_screen_position(self):
        """Gets the on_screen_position of this OnScreenPositionAssignedTargetingOptionDetails.

        Output only. The on screen position.

        :return: The on_screen_position of this OnScreenPositionAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._on_screen_position

    @on_screen_position.setter
    def on_screen_position(self, on_screen_position):
        """Sets the on_screen_position of this OnScreenPositionAssignedTargetingOptionDetails.

        Output only. The on screen position.

        :param on_screen_position: The on_screen_position of this OnScreenPositionAssignedTargetingOptionDetails.
        :type on_screen_position: str
        """
        allowed_values = ["ON_SCREEN_POSITION_UNSPECIFIED", "ON_SCREEN_POSITION_UNKNOWN", "ON_SCREEN_POSITION_ABOVE_THE_FOLD", "ON_SCREEN_POSITION_BELOW_THE_FOLD"]  # noqa: E501
        if on_screen_position not in allowed_values:
            raise ValueError(
                "Invalid value for `on_screen_position` ({0}), must be one of {1}"
                .format(on_screen_position, allowed_values)
            )

        self._on_screen_position = on_screen_position

    @property
    def targeting_option_id(self):
        """Gets the targeting_option_id of this OnScreenPositionAssignedTargetingOptionDetails.

        Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_ON_SCREEN_POSITION`.

        :return: The targeting_option_id of this OnScreenPositionAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._targeting_option_id

    @targeting_option_id.setter
    def targeting_option_id(self, targeting_option_id):
        """Sets the targeting_option_id of this OnScreenPositionAssignedTargetingOptionDetails.

        Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_ON_SCREEN_POSITION`.

        :param targeting_option_id: The targeting_option_id of this OnScreenPositionAssignedTargetingOptionDetails.
        :type targeting_option_id: str
        """

        self._targeting_option_id = targeting_option_id
