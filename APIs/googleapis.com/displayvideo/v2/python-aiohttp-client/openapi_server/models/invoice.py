# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.budget_summary import BudgetSummary
from openapi_server.models.date_range import DateRange
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class Invoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, budget_invoice_grouping_id: str=None, budget_summaries: List[BudgetSummary]=None, corrected_invoice_id: str=None, currency_code: str=None, display_name: str=None, due_date: ModelDate=None, invoice_id: str=None, invoice_type: str=None, issue_date: ModelDate=None, name: str=None, non_budget_micros: str=None, payments_account_id: str=None, payments_profile_id: str=None, pdf_url: str=None, purchase_order_number: str=None, replaced_invoice_ids: List[str]=None, service_date_range: DateRange=None, subtotal_amount_micros: str=None, total_amount_micros: str=None, total_tax_amount_micros: str=None):
        """Invoice - a model defined in OpenAPI

        :param budget_invoice_grouping_id: The budget_invoice_grouping_id of this Invoice.
        :param budget_summaries: The budget_summaries of this Invoice.
        :param corrected_invoice_id: The corrected_invoice_id of this Invoice.
        :param currency_code: The currency_code of this Invoice.
        :param display_name: The display_name of this Invoice.
        :param due_date: The due_date of this Invoice.
        :param invoice_id: The invoice_id of this Invoice.
        :param invoice_type: The invoice_type of this Invoice.
        :param issue_date: The issue_date of this Invoice.
        :param name: The name of this Invoice.
        :param non_budget_micros: The non_budget_micros of this Invoice.
        :param payments_account_id: The payments_account_id of this Invoice.
        :param payments_profile_id: The payments_profile_id of this Invoice.
        :param pdf_url: The pdf_url of this Invoice.
        :param purchase_order_number: The purchase_order_number of this Invoice.
        :param replaced_invoice_ids: The replaced_invoice_ids of this Invoice.
        :param service_date_range: The service_date_range of this Invoice.
        :param subtotal_amount_micros: The subtotal_amount_micros of this Invoice.
        :param total_amount_micros: The total_amount_micros of this Invoice.
        :param total_tax_amount_micros: The total_tax_amount_micros of this Invoice.
        """
        self.openapi_types = {
            'budget_invoice_grouping_id': str,
            'budget_summaries': List[BudgetSummary],
            'corrected_invoice_id': str,
            'currency_code': str,
            'display_name': str,
            'due_date': ModelDate,
            'invoice_id': str,
            'invoice_type': str,
            'issue_date': ModelDate,
            'name': str,
            'non_budget_micros': str,
            'payments_account_id': str,
            'payments_profile_id': str,
            'pdf_url': str,
            'purchase_order_number': str,
            'replaced_invoice_ids': List[str],
            'service_date_range': DateRange,
            'subtotal_amount_micros': str,
            'total_amount_micros': str,
            'total_tax_amount_micros': str
        }

        self.attribute_map = {
            'budget_invoice_grouping_id': 'budgetInvoiceGroupingId',
            'budget_summaries': 'budgetSummaries',
            'corrected_invoice_id': 'correctedInvoiceId',
            'currency_code': 'currencyCode',
            'display_name': 'displayName',
            'due_date': 'dueDate',
            'invoice_id': 'invoiceId',
            'invoice_type': 'invoiceType',
            'issue_date': 'issueDate',
            'name': 'name',
            'non_budget_micros': 'nonBudgetMicros',
            'payments_account_id': 'paymentsAccountId',
            'payments_profile_id': 'paymentsProfileId',
            'pdf_url': 'pdfUrl',
            'purchase_order_number': 'purchaseOrderNumber',
            'replaced_invoice_ids': 'replacedInvoiceIds',
            'service_date_range': 'serviceDateRange',
            'subtotal_amount_micros': 'subtotalAmountMicros',
            'total_amount_micros': 'totalAmountMicros',
            'total_tax_amount_micros': 'totalTaxAmountMicros'
        }

        self._budget_invoice_grouping_id = budget_invoice_grouping_id
        self._budget_summaries = budget_summaries
        self._corrected_invoice_id = corrected_invoice_id
        self._currency_code = currency_code
        self._display_name = display_name
        self._due_date = due_date
        self._invoice_id = invoice_id
        self._invoice_type = invoice_type
        self._issue_date = issue_date
        self._name = name
        self._non_budget_micros = non_budget_micros
        self._payments_account_id = payments_account_id
        self._payments_profile_id = payments_profile_id
        self._pdf_url = pdf_url
        self._purchase_order_number = purchase_order_number
        self._replaced_invoice_ids = replaced_invoice_ids
        self._service_date_range = service_date_range
        self._subtotal_amount_micros = subtotal_amount_micros
        self._total_amount_micros = total_amount_micros
        self._total_tax_amount_micros = total_tax_amount_micros

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Invoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Invoice of this Invoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def budget_invoice_grouping_id(self):
        """Gets the budget_invoice_grouping_id of this Invoice.

        The budget grouping ID for this invoice. This field will only be set if the invoice level of the corresponding billing profile was set to \"Budget invoice grouping ID\".

        :return: The budget_invoice_grouping_id of this Invoice.
        :rtype: str
        """
        return self._budget_invoice_grouping_id

    @budget_invoice_grouping_id.setter
    def budget_invoice_grouping_id(self, budget_invoice_grouping_id):
        """Sets the budget_invoice_grouping_id of this Invoice.

        The budget grouping ID for this invoice. This field will only be set if the invoice level of the corresponding billing profile was set to \"Budget invoice grouping ID\".

        :param budget_invoice_grouping_id: The budget_invoice_grouping_id of this Invoice.
        :type budget_invoice_grouping_id: str
        """

        self._budget_invoice_grouping_id = budget_invoice_grouping_id

    @property
    def budget_summaries(self):
        """Gets the budget_summaries of this Invoice.

        The list of summarized information for each budget associated with this invoice. This field will only be set if the invoice detail level of the corresponding billing profile was set to \"Budget level PO\".

        :return: The budget_summaries of this Invoice.
        :rtype: List[BudgetSummary]
        """
        return self._budget_summaries

    @budget_summaries.setter
    def budget_summaries(self, budget_summaries):
        """Sets the budget_summaries of this Invoice.

        The list of summarized information for each budget associated with this invoice. This field will only be set if the invoice detail level of the corresponding billing profile was set to \"Budget level PO\".

        :param budget_summaries: The budget_summaries of this Invoice.
        :type budget_summaries: List[BudgetSummary]
        """

        self._budget_summaries = budget_summaries

    @property
    def corrected_invoice_id(self):
        """Gets the corrected_invoice_id of this Invoice.

        The ID of the original invoice being adjusted by this invoice, if applicable. May appear on the invoice PDF as `Reference invoice number`. If replaced_invoice_ids is set, this field will be empty.

        :return: The corrected_invoice_id of this Invoice.
        :rtype: str
        """
        return self._corrected_invoice_id

    @corrected_invoice_id.setter
    def corrected_invoice_id(self, corrected_invoice_id):
        """Sets the corrected_invoice_id of this Invoice.

        The ID of the original invoice being adjusted by this invoice, if applicable. May appear on the invoice PDF as `Reference invoice number`. If replaced_invoice_ids is set, this field will be empty.

        :param corrected_invoice_id: The corrected_invoice_id of this Invoice.
        :type corrected_invoice_id: str
        """

        self._corrected_invoice_id = corrected_invoice_id

    @property
    def currency_code(self):
        """Gets the currency_code of this Invoice.

        The currency used in the invoice in ISO 4217 format.

        :return: The currency_code of this Invoice.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Invoice.

        The currency used in the invoice in ISO 4217 format.

        :param currency_code: The currency_code of this Invoice.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def display_name(self):
        """Gets the display_name of this Invoice.

        The display name of the invoice.

        :return: The display_name of this Invoice.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Invoice.

        The display name of the invoice.

        :param display_name: The display_name of this Invoice.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def due_date(self):
        """Gets the due_date of this Invoice.


        :return: The due_date of this Invoice.
        :rtype: ModelDate
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Invoice.


        :param due_date: The due_date of this Invoice.
        :type due_date: ModelDate
        """

        self._due_date = due_date

    @property
    def invoice_id(self):
        """Gets the invoice_id of this Invoice.

        The unique ID of the invoice.

        :return: The invoice_id of this Invoice.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this Invoice.

        The unique ID of the invoice.

        :param invoice_id: The invoice_id of this Invoice.
        :type invoice_id: str
        """

        self._invoice_id = invoice_id

    @property
    def invoice_type(self):
        """Gets the invoice_type of this Invoice.

        The type of invoice document.

        :return: The invoice_type of this Invoice.
        :rtype: str
        """
        return self._invoice_type

    @invoice_type.setter
    def invoice_type(self, invoice_type):
        """Sets the invoice_type of this Invoice.

        The type of invoice document.

        :param invoice_type: The invoice_type of this Invoice.
        :type invoice_type: str
        """
        allowed_values = ["INVOICE_TYPE_UNSPECIFIED", "INVOICE_TYPE_CREDIT", "INVOICE_TYPE_INVOICE"]  # noqa: E501
        if invoice_type not in allowed_values:
            raise ValueError(
                "Invalid value for `invoice_type` ({0}), must be one of {1}"
                .format(invoice_type, allowed_values)
            )

        self._invoice_type = invoice_type

    @property
    def issue_date(self):
        """Gets the issue_date of this Invoice.


        :return: The issue_date of this Invoice.
        :rtype: ModelDate
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this Invoice.


        :param issue_date: The issue_date of this Invoice.
        :type issue_date: ModelDate
        """

        self._issue_date = issue_date

    @property
    def name(self):
        """Gets the name of this Invoice.

        The resource name of the invoice.

        :return: The name of this Invoice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Invoice.

        The resource name of the invoice.

        :param name: The name of this Invoice.
        :type name: str
        """

        self._name = name

    @property
    def non_budget_micros(self):
        """Gets the non_budget_micros of this Invoice.

        The total amount of costs or adjustments not tied to a particular budget, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.

        :return: The non_budget_micros of this Invoice.
        :rtype: str
        """
        return self._non_budget_micros

    @non_budget_micros.setter
    def non_budget_micros(self, non_budget_micros):
        """Sets the non_budget_micros of this Invoice.

        The total amount of costs or adjustments not tied to a particular budget, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.

        :param non_budget_micros: The non_budget_micros of this Invoice.
        :type non_budget_micros: str
        """

        self._non_budget_micros = non_budget_micros

    @property
    def payments_account_id(self):
        """Gets the payments_account_id of this Invoice.

        The ID of the payments account the invoice belongs to. Appears on the invoice PDF as `Billing Account Number`.

        :return: The payments_account_id of this Invoice.
        :rtype: str
        """
        return self._payments_account_id

    @payments_account_id.setter
    def payments_account_id(self, payments_account_id):
        """Sets the payments_account_id of this Invoice.

        The ID of the payments account the invoice belongs to. Appears on the invoice PDF as `Billing Account Number`.

        :param payments_account_id: The payments_account_id of this Invoice.
        :type payments_account_id: str
        """

        self._payments_account_id = payments_account_id

    @property
    def payments_profile_id(self):
        """Gets the payments_profile_id of this Invoice.

        The ID of the payments profile the invoice belongs to. Appears on the invoice PDF as `Billing ID`.

        :return: The payments_profile_id of this Invoice.
        :rtype: str
        """
        return self._payments_profile_id

    @payments_profile_id.setter
    def payments_profile_id(self, payments_profile_id):
        """Sets the payments_profile_id of this Invoice.

        The ID of the payments profile the invoice belongs to. Appears on the invoice PDF as `Billing ID`.

        :param payments_profile_id: The payments_profile_id of this Invoice.
        :type payments_profile_id: str
        """

        self._payments_profile_id = payments_profile_id

    @property
    def pdf_url(self):
        """Gets the pdf_url of this Invoice.

        The URL to download a PDF copy of the invoice. This URL is user specific and requires a valid OAuth 2.0 access token to access. The access token must be provided in an `Authorization: Bearer` HTTP header and be authorized for one of the following scopes: * `https://www.googleapis.com/auth/display-video-mediaplanning` * `https://www.googleapis.com/auth/display-video` The URL will be valid for 7 days after retrieval of this invoice object or until this invoice is retrieved again.

        :return: The pdf_url of this Invoice.
        :rtype: str
        """
        return self._pdf_url

    @pdf_url.setter
    def pdf_url(self, pdf_url):
        """Sets the pdf_url of this Invoice.

        The URL to download a PDF copy of the invoice. This URL is user specific and requires a valid OAuth 2.0 access token to access. The access token must be provided in an `Authorization: Bearer` HTTP header and be authorized for one of the following scopes: * `https://www.googleapis.com/auth/display-video-mediaplanning` * `https://www.googleapis.com/auth/display-video` The URL will be valid for 7 days after retrieval of this invoice object or until this invoice is retrieved again.

        :param pdf_url: The pdf_url of this Invoice.
        :type pdf_url: str
        """

        self._pdf_url = pdf_url

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this Invoice.

        Purchase order number associated with the invoice.

        :return: The purchase_order_number of this Invoice.
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this Invoice.

        Purchase order number associated with the invoice.

        :param purchase_order_number: The purchase_order_number of this Invoice.
        :type purchase_order_number: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def replaced_invoice_ids(self):
        """Gets the replaced_invoice_ids of this Invoice.

        The ID(s) of any originally issued invoice that is being cancelled by this invoice, if applicable. Multiple invoices may be listed if those invoices are being consolidated into a single invoice. May appear on invoice PDF as `Replaced invoice numbers`. If corrected_invoice_id is set, this field will be empty.

        :return: The replaced_invoice_ids of this Invoice.
        :rtype: List[str]
        """
        return self._replaced_invoice_ids

    @replaced_invoice_ids.setter
    def replaced_invoice_ids(self, replaced_invoice_ids):
        """Sets the replaced_invoice_ids of this Invoice.

        The ID(s) of any originally issued invoice that is being cancelled by this invoice, if applicable. Multiple invoices may be listed if those invoices are being consolidated into a single invoice. May appear on invoice PDF as `Replaced invoice numbers`. If corrected_invoice_id is set, this field will be empty.

        :param replaced_invoice_ids: The replaced_invoice_ids of this Invoice.
        :type replaced_invoice_ids: List[str]
        """

        self._replaced_invoice_ids = replaced_invoice_ids

    @property
    def service_date_range(self):
        """Gets the service_date_range of this Invoice.


        :return: The service_date_range of this Invoice.
        :rtype: DateRange
        """
        return self._service_date_range

    @service_date_range.setter
    def service_date_range(self, service_date_range):
        """Sets the service_date_range of this Invoice.


        :param service_date_range: The service_date_range of this Invoice.
        :type service_date_range: DateRange
        """

        self._service_date_range = service_date_range

    @property
    def subtotal_amount_micros(self):
        """Gets the subtotal_amount_micros of this Invoice.

        The pre-tax subtotal amount, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.

        :return: The subtotal_amount_micros of this Invoice.
        :rtype: str
        """
        return self._subtotal_amount_micros

    @subtotal_amount_micros.setter
    def subtotal_amount_micros(self, subtotal_amount_micros):
        """Sets the subtotal_amount_micros of this Invoice.

        The pre-tax subtotal amount, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.

        :param subtotal_amount_micros: The subtotal_amount_micros of this Invoice.
        :type subtotal_amount_micros: str
        """

        self._subtotal_amount_micros = subtotal_amount_micros

    @property
    def total_amount_micros(self):
        """Gets the total_amount_micros of this Invoice.

        The invoice total amount, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.

        :return: The total_amount_micros of this Invoice.
        :rtype: str
        """
        return self._total_amount_micros

    @total_amount_micros.setter
    def total_amount_micros(self, total_amount_micros):
        """Sets the total_amount_micros of this Invoice.

        The invoice total amount, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.

        :param total_amount_micros: The total_amount_micros of this Invoice.
        :type total_amount_micros: str
        """

        self._total_amount_micros = total_amount_micros

    @property
    def total_tax_amount_micros(self):
        """Gets the total_tax_amount_micros of this Invoice.

        The sum of all taxes in invoice, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.

        :return: The total_tax_amount_micros of this Invoice.
        :rtype: str
        """
        return self._total_tax_amount_micros

    @total_tax_amount_micros.setter
    def total_tax_amount_micros(self, total_tax_amount_micros):
        """Sets the total_tax_amount_micros of this Invoice.

        The sum of all taxes in invoice, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.

        :param total_tax_amount_micros: The total_tax_amount_micros of this Invoice.
        :type total_tax_amount_micros: str
        """

        self._total_tax_amount_micros = total_tax_amount_micros
