# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Pacing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, daily_max_impressions: str=None, daily_max_micros: str=None, pacing_period: str=None, pacing_type: str=None):
        """Pacing - a model defined in OpenAPI

        :param daily_max_impressions: The daily_max_impressions of this Pacing.
        :param daily_max_micros: The daily_max_micros of this Pacing.
        :param pacing_period: The pacing_period of this Pacing.
        :param pacing_type: The pacing_type of this Pacing.
        """
        self.openapi_types = {
            'daily_max_impressions': str,
            'daily_max_micros': str,
            'pacing_period': str,
            'pacing_type': str
        }

        self.attribute_map = {
            'daily_max_impressions': 'dailyMaxImpressions',
            'daily_max_micros': 'dailyMaxMicros',
            'pacing_period': 'pacingPeriod',
            'pacing_type': 'pacingType'
        }

        self._daily_max_impressions = daily_max_impressions
        self._daily_max_micros = daily_max_micros
        self._pacing_period = pacing_period
        self._pacing_type = pacing_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pacing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pacing of this Pacing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def daily_max_impressions(self):
        """Gets the daily_max_impressions of this Pacing.

        Maximum number of impressions to serve every day. Applicable when the budget is impression based. Must be greater than 0.

        :return: The daily_max_impressions of this Pacing.
        :rtype: str
        """
        return self._daily_max_impressions

    @daily_max_impressions.setter
    def daily_max_impressions(self, daily_max_impressions):
        """Sets the daily_max_impressions of this Pacing.

        Maximum number of impressions to serve every day. Applicable when the budget is impression based. Must be greater than 0.

        :param daily_max_impressions: The daily_max_impressions of this Pacing.
        :type daily_max_impressions: str
        """

        self._daily_max_impressions = daily_max_impressions

    @property
    def daily_max_micros(self):
        """Gets the daily_max_micros of this Pacing.

        Maximum currency amount to spend every day in micros of advertiser's currency. Applicable when the budget is currency based. Must be greater than 0. For example, for 1.5 standard unit of the currency, set this field to 1500000. The value assigned will be rounded to whole billable units for the relevant currency by the following rules: any positive value less than a single billable unit will be rounded up to one billable unit and any value larger than a single billable unit will be rounded down to the nearest billable value. For example, if the currency's billable unit is 0.01, and this field is set to 10257770, it will round down to 10250000, a value of 10.25. If set to 505, it will round up to 10000, a value of 0.01.

        :return: The daily_max_micros of this Pacing.
        :rtype: str
        """
        return self._daily_max_micros

    @daily_max_micros.setter
    def daily_max_micros(self, daily_max_micros):
        """Sets the daily_max_micros of this Pacing.

        Maximum currency amount to spend every day in micros of advertiser's currency. Applicable when the budget is currency based. Must be greater than 0. For example, for 1.5 standard unit of the currency, set this field to 1500000. The value assigned will be rounded to whole billable units for the relevant currency by the following rules: any positive value less than a single billable unit will be rounded up to one billable unit and any value larger than a single billable unit will be rounded down to the nearest billable value. For example, if the currency's billable unit is 0.01, and this field is set to 10257770, it will round down to 10250000, a value of 10.25. If set to 505, it will round up to 10000, a value of 0.01.

        :param daily_max_micros: The daily_max_micros of this Pacing.
        :type daily_max_micros: str
        """

        self._daily_max_micros = daily_max_micros

    @property
    def pacing_period(self):
        """Gets the pacing_period of this Pacing.

        Required. The time period in which the pacing budget will be spent. When automatic budget allocation is enabled at the insertion order via automationType, this field is output only and defaults to `PACING_PERIOD_FLIGHT`.

        :return: The pacing_period of this Pacing.
        :rtype: str
        """
        return self._pacing_period

    @pacing_period.setter
    def pacing_period(self, pacing_period):
        """Sets the pacing_period of this Pacing.

        Required. The time period in which the pacing budget will be spent. When automatic budget allocation is enabled at the insertion order via automationType, this field is output only and defaults to `PACING_PERIOD_FLIGHT`.

        :param pacing_period: The pacing_period of this Pacing.
        :type pacing_period: str
        """
        allowed_values = ["PACING_PERIOD_UNSPECIFIED", "PACING_PERIOD_DAILY", "PACING_PERIOD_FLIGHT"]  # noqa: E501
        if pacing_period not in allowed_values:
            raise ValueError(
                "Invalid value for `pacing_period` ({0}), must be one of {1}"
                .format(pacing_period, allowed_values)
            )

        self._pacing_period = pacing_period

    @property
    def pacing_type(self):
        """Gets the pacing_type of this Pacing.

        Required. The type of pacing that defines how the budget amount will be spent across the pacing_period.

        :return: The pacing_type of this Pacing.
        :rtype: str
        """
        return self._pacing_type

    @pacing_type.setter
    def pacing_type(self, pacing_type):
        """Sets the pacing_type of this Pacing.

        Required. The type of pacing that defines how the budget amount will be spent across the pacing_period.

        :param pacing_type: The pacing_type of this Pacing.
        :type pacing_type: str
        """
        allowed_values = ["PACING_TYPE_UNSPECIFIED", "PACING_TYPE_AHEAD", "PACING_TYPE_ASAP", "PACING_TYPE_EVEN"]  # noqa: E501
        if pacing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pacing_type` ({0}), must be one of {1}"
                .format(pacing_type, allowed_values)
            )

        self._pacing_type = pacing_type
