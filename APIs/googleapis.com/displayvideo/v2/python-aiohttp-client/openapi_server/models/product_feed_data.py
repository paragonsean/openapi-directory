# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_match_dimension import ProductMatchDimension
from openapi_server import util


class ProductFeedData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_feed_disabled: bool=None, product_match_dimensions: List[ProductMatchDimension]=None, product_match_type: str=None):
        """ProductFeedData - a model defined in OpenAPI

        :param is_feed_disabled: The is_feed_disabled of this ProductFeedData.
        :param product_match_dimensions: The product_match_dimensions of this ProductFeedData.
        :param product_match_type: The product_match_type of this ProductFeedData.
        """
        self.openapi_types = {
            'is_feed_disabled': bool,
            'product_match_dimensions': List[ProductMatchDimension],
            'product_match_type': str
        }

        self.attribute_map = {
            'is_feed_disabled': 'isFeedDisabled',
            'product_match_dimensions': 'productMatchDimensions',
            'product_match_type': 'productMatchType'
        }

        self._is_feed_disabled = is_feed_disabled
        self._product_match_dimensions = product_match_dimensions
        self._product_match_type = product_match_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductFeedData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductFeedData of this ProductFeedData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_feed_disabled(self):
        """Gets the is_feed_disabled of this ProductFeedData.

        Whether the product feed has opted-out of showing products.

        :return: The is_feed_disabled of this ProductFeedData.
        :rtype: bool
        """
        return self._is_feed_disabled

    @is_feed_disabled.setter
    def is_feed_disabled(self, is_feed_disabled):
        """Sets the is_feed_disabled of this ProductFeedData.

        Whether the product feed has opted-out of showing products.

        :param is_feed_disabled: The is_feed_disabled of this ProductFeedData.
        :type is_feed_disabled: bool
        """

        self._is_feed_disabled = is_feed_disabled

    @property
    def product_match_dimensions(self):
        """Gets the product_match_dimensions of this ProductFeedData.

        A list of dimensions used to match products.

        :return: The product_match_dimensions of this ProductFeedData.
        :rtype: List[ProductMatchDimension]
        """
        return self._product_match_dimensions

    @product_match_dimensions.setter
    def product_match_dimensions(self, product_match_dimensions):
        """Sets the product_match_dimensions of this ProductFeedData.

        A list of dimensions used to match products.

        :param product_match_dimensions: The product_match_dimensions of this ProductFeedData.
        :type product_match_dimensions: List[ProductMatchDimension]
        """

        self._product_match_dimensions = product_match_dimensions

    @property
    def product_match_type(self):
        """Gets the product_match_type of this ProductFeedData.

        How products are selected by the product feed.

        :return: The product_match_type of this ProductFeedData.
        :rtype: str
        """
        return self._product_match_type

    @product_match_type.setter
    def product_match_type(self, product_match_type):
        """Sets the product_match_type of this ProductFeedData.

        How products are selected by the product feed.

        :param product_match_type: The product_match_type of this ProductFeedData.
        :type product_match_type: str
        """
        allowed_values = ["PRODUCT_MATCH_TYPE_UNSPECIFIED", "PRODUCT_MATCH_TYPE_ALL_PRODUCTS", "PRODUCT_MATCH_TYPE_SPECIFIC_PRODUCTS", "PRODUCT_MATCH_TYPE_CUSTOM_LABEL"]  # noqa: E501
        if product_match_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_match_type` ({0}), must be one of {1}"
                .format(product_match_type, allowed_values)
            )

        self._product_match_type = product_match_type
