# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomBiddingModelDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertiser_id: str=None, readiness_state: str=None, suspension_state: str=None):
        """CustomBiddingModelDetails - a model defined in OpenAPI

        :param advertiser_id: The advertiser_id of this CustomBiddingModelDetails.
        :param readiness_state: The readiness_state of this CustomBiddingModelDetails.
        :param suspension_state: The suspension_state of this CustomBiddingModelDetails.
        """
        self.openapi_types = {
            'advertiser_id': str,
            'readiness_state': str,
            'suspension_state': str
        }

        self.attribute_map = {
            'advertiser_id': 'advertiserId',
            'readiness_state': 'readinessState',
            'suspension_state': 'suspensionState'
        }

        self._advertiser_id = advertiser_id
        self._readiness_state = readiness_state
        self._suspension_state = suspension_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomBiddingModelDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomBiddingModelDetails of this CustomBiddingModelDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this CustomBiddingModelDetails.

        The unique ID of the relevant advertiser.

        :return: The advertiser_id of this CustomBiddingModelDetails.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this CustomBiddingModelDetails.

        The unique ID of the relevant advertiser.

        :param advertiser_id: The advertiser_id of this CustomBiddingModelDetails.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def readiness_state(self):
        """Gets the readiness_state of this CustomBiddingModelDetails.

        The readiness state of custom bidding model.

        :return: The readiness_state of this CustomBiddingModelDetails.
        :rtype: str
        """
        return self._readiness_state

    @readiness_state.setter
    def readiness_state(self, readiness_state):
        """Sets the readiness_state of this CustomBiddingModelDetails.

        The readiness state of custom bidding model.

        :param readiness_state: The readiness_state of this CustomBiddingModelDetails.
        :type readiness_state: str
        """
        allowed_values = ["READINESS_STATE_UNSPECIFIED", "READINESS_STATE_ACTIVE", "READINESS_STATE_INSUFFICIENT_DATA", "READINESS_STATE_TRAINING", "READINESS_STATE_NO_VALID_SCRIPT"]  # noqa: E501
        if readiness_state not in allowed_values:
            raise ValueError(
                "Invalid value for `readiness_state` ({0}), must be one of {1}"
                .format(readiness_state, allowed_values)
            )

        self._readiness_state = readiness_state

    @property
    def suspension_state(self):
        """Gets the suspension_state of this CustomBiddingModelDetails.

        Output only. The suspension state of custom bidding model.

        :return: The suspension_state of this CustomBiddingModelDetails.
        :rtype: str
        """
        return self._suspension_state

    @suspension_state.setter
    def suspension_state(self, suspension_state):
        """Sets the suspension_state of this CustomBiddingModelDetails.

        Output only. The suspension state of custom bidding model.

        :param suspension_state: The suspension_state of this CustomBiddingModelDetails.
        :type suspension_state: str
        """
        allowed_values = ["SUSPENSION_STATE_UNSPECIFIED", "SUSPENSION_STATE_ENABLED", "SUSPENSION_STATE_DORMANT", "SUSPENSION_STATE_SUSPENDED"]  # noqa: E501
        if suspension_state not in allowed_values:
            raise ValueError(
                "Invalid value for `suspension_state` ({0}), must be one of {1}"
                .format(suspension_state, allowed_values)
            )

        self._suspension_state = suspension_state
