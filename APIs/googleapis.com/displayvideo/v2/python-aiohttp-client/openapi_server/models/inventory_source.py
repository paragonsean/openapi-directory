# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creative_config import CreativeConfig
from openapi_server.models.inventory_source_accessors import InventorySourceAccessors
from openapi_server.models.inventory_source_status import InventorySourceStatus
from openapi_server.models.rate_details import RateDetails
from openapi_server.models.time_range import TimeRange
from openapi_server import util


class InventorySource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commitment: str=None, creative_configs: List[CreativeConfig]=None, deal_id: str=None, delivery_method: str=None, display_name: str=None, exchange: str=None, guaranteed_order_id: str=None, inventory_source_id: str=None, inventory_source_product_type: str=None, inventory_source_type: str=None, name: str=None, publisher_name: str=None, rate_details: RateDetails=None, read_advertiser_ids: List[str]=None, read_partner_ids: List[str]=None, read_write_accessors: InventorySourceAccessors=None, status: InventorySourceStatus=None, time_range: TimeRange=None, update_time: str=None):
        """InventorySource - a model defined in OpenAPI

        :param commitment: The commitment of this InventorySource.
        :param creative_configs: The creative_configs of this InventorySource.
        :param deal_id: The deal_id of this InventorySource.
        :param delivery_method: The delivery_method of this InventorySource.
        :param display_name: The display_name of this InventorySource.
        :param exchange: The exchange of this InventorySource.
        :param guaranteed_order_id: The guaranteed_order_id of this InventorySource.
        :param inventory_source_id: The inventory_source_id of this InventorySource.
        :param inventory_source_product_type: The inventory_source_product_type of this InventorySource.
        :param inventory_source_type: The inventory_source_type of this InventorySource.
        :param name: The name of this InventorySource.
        :param publisher_name: The publisher_name of this InventorySource.
        :param rate_details: The rate_details of this InventorySource.
        :param read_advertiser_ids: The read_advertiser_ids of this InventorySource.
        :param read_partner_ids: The read_partner_ids of this InventorySource.
        :param read_write_accessors: The read_write_accessors of this InventorySource.
        :param status: The status of this InventorySource.
        :param time_range: The time_range of this InventorySource.
        :param update_time: The update_time of this InventorySource.
        """
        self.openapi_types = {
            'commitment': str,
            'creative_configs': List[CreativeConfig],
            'deal_id': str,
            'delivery_method': str,
            'display_name': str,
            'exchange': str,
            'guaranteed_order_id': str,
            'inventory_source_id': str,
            'inventory_source_product_type': str,
            'inventory_source_type': str,
            'name': str,
            'publisher_name': str,
            'rate_details': RateDetails,
            'read_advertiser_ids': List[str],
            'read_partner_ids': List[str],
            'read_write_accessors': InventorySourceAccessors,
            'status': InventorySourceStatus,
            'time_range': TimeRange,
            'update_time': str
        }

        self.attribute_map = {
            'commitment': 'commitment',
            'creative_configs': 'creativeConfigs',
            'deal_id': 'dealId',
            'delivery_method': 'deliveryMethod',
            'display_name': 'displayName',
            'exchange': 'exchange',
            'guaranteed_order_id': 'guaranteedOrderId',
            'inventory_source_id': 'inventorySourceId',
            'inventory_source_product_type': 'inventorySourceProductType',
            'inventory_source_type': 'inventorySourceType',
            'name': 'name',
            'publisher_name': 'publisherName',
            'rate_details': 'rateDetails',
            'read_advertiser_ids': 'readAdvertiserIds',
            'read_partner_ids': 'readPartnerIds',
            'read_write_accessors': 'readWriteAccessors',
            'status': 'status',
            'time_range': 'timeRange',
            'update_time': 'updateTime'
        }

        self._commitment = commitment
        self._creative_configs = creative_configs
        self._deal_id = deal_id
        self._delivery_method = delivery_method
        self._display_name = display_name
        self._exchange = exchange
        self._guaranteed_order_id = guaranteed_order_id
        self._inventory_source_id = inventory_source_id
        self._inventory_source_product_type = inventory_source_product_type
        self._inventory_source_type = inventory_source_type
        self._name = name
        self._publisher_name = publisher_name
        self._rate_details = rate_details
        self._read_advertiser_ids = read_advertiser_ids
        self._read_partner_ids = read_partner_ids
        self._read_write_accessors = read_write_accessors
        self._status = status
        self._time_range = time_range
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InventorySource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InventorySource of this InventorySource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commitment(self):
        """Gets the commitment of this InventorySource.

        Whether the inventory source has a guaranteed or non-guaranteed delivery.

        :return: The commitment of this InventorySource.
        :rtype: str
        """
        return self._commitment

    @commitment.setter
    def commitment(self, commitment):
        """Sets the commitment of this InventorySource.

        Whether the inventory source has a guaranteed or non-guaranteed delivery.

        :param commitment: The commitment of this InventorySource.
        :type commitment: str
        """
        allowed_values = ["INVENTORY_SOURCE_COMMITMENT_UNSPECIFIED", "INVENTORY_SOURCE_COMMITMENT_GUARANTEED", "INVENTORY_SOURCE_COMMITMENT_NON_GUARANTEED"]  # noqa: E501
        if commitment not in allowed_values:
            raise ValueError(
                "Invalid value for `commitment` ({0}), must be one of {1}"
                .format(commitment, allowed_values)
            )

        self._commitment = commitment

    @property
    def creative_configs(self):
        """Gets the creative_configs of this InventorySource.

        The creative requirements of the inventory source. Not applicable for auction packages.

        :return: The creative_configs of this InventorySource.
        :rtype: List[CreativeConfig]
        """
        return self._creative_configs

    @creative_configs.setter
    def creative_configs(self, creative_configs):
        """Sets the creative_configs of this InventorySource.

        The creative requirements of the inventory source. Not applicable for auction packages.

        :param creative_configs: The creative_configs of this InventorySource.
        :type creative_configs: List[CreativeConfig]
        """

        self._creative_configs = creative_configs

    @property
    def deal_id(self):
        """Gets the deal_id of this InventorySource.

        The ID in the exchange space that uniquely identifies the inventory source. Must be unique across buyers within each exchange but not necessarily unique across exchanges.

        :return: The deal_id of this InventorySource.
        :rtype: str
        """
        return self._deal_id

    @deal_id.setter
    def deal_id(self, deal_id):
        """Sets the deal_id of this InventorySource.

        The ID in the exchange space that uniquely identifies the inventory source. Must be unique across buyers within each exchange but not necessarily unique across exchanges.

        :param deal_id: The deal_id of this InventorySource.
        :type deal_id: str
        """

        self._deal_id = deal_id

    @property
    def delivery_method(self):
        """Gets the delivery_method of this InventorySource.

        The delivery method of the inventory source. * For non-guaranteed inventory sources, the only acceptable value is `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`. * For guaranteed inventory sources, acceptable values are `INVENTORY_SOURCE_DELIVERY_METHOD_TAG` and `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`.

        :return: The delivery_method of this InventorySource.
        :rtype: str
        """
        return self._delivery_method

    @delivery_method.setter
    def delivery_method(self, delivery_method):
        """Sets the delivery_method of this InventorySource.

        The delivery method of the inventory source. * For non-guaranteed inventory sources, the only acceptable value is `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`. * For guaranteed inventory sources, acceptable values are `INVENTORY_SOURCE_DELIVERY_METHOD_TAG` and `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`.

        :param delivery_method: The delivery_method of this InventorySource.
        :type delivery_method: str
        """
        allowed_values = ["INVENTORY_SOURCE_DELIVERY_METHOD_UNSPECIFIED", "INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC", "INVENTORY_SOURCE_DELIVERY_METHOD_TAG"]  # noqa: E501
        if delivery_method not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_method` ({0}), must be one of {1}"
                .format(delivery_method, allowed_values)
            )

        self._delivery_method = delivery_method

    @property
    def display_name(self):
        """Gets the display_name of this InventorySource.

        The display name of the inventory source. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :return: The display_name of this InventorySource.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InventorySource.

        The display name of the inventory source. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :param display_name: The display_name of this InventorySource.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def exchange(self):
        """Gets the exchange of this InventorySource.

        The exchange to which the inventory source belongs.

        :return: The exchange of this InventorySource.
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this InventorySource.

        The exchange to which the inventory source belongs.

        :param exchange: The exchange of this InventorySource.
        :type exchange: str
        """
        allowed_values = ["EXCHANGE_UNSPECIFIED", "EXCHANGE_GOOGLE_AD_MANAGER", "EXCHANGE_APPNEXUS", "EXCHANGE_BRIGHTROLL", "EXCHANGE_ADFORM", "EXCHANGE_ADMETA", "EXCHANGE_ADMIXER", "EXCHANGE_ADSMOGO", "EXCHANGE_ADSWIZZ", "EXCHANGE_BIDSWITCH", "EXCHANGE_BRIGHTROLL_DISPLAY", "EXCHANGE_CADREON", "EXCHANGE_DAILYMOTION", "EXCHANGE_FIVE", "EXCHANGE_FLUCT", "EXCHANGE_FREEWHEEL", "EXCHANGE_GENIEE", "EXCHANGE_GUMGUM", "EXCHANGE_IMOBILE", "EXCHANGE_IBILLBOARD", "EXCHANGE_IMPROVE_DIGITAL", "EXCHANGE_INDEX", "EXCHANGE_KARGO", "EXCHANGE_MICROAD", "EXCHANGE_MOPUB", "EXCHANGE_NEND", "EXCHANGE_ONE_BY_AOL_DISPLAY", "EXCHANGE_ONE_BY_AOL_MOBILE", "EXCHANGE_ONE_BY_AOL_VIDEO", "EXCHANGE_OOYALA", "EXCHANGE_OPENX", "EXCHANGE_PERMODO", "EXCHANGE_PLATFORMONE", "EXCHANGE_PLATFORMID", "EXCHANGE_PUBMATIC", "EXCHANGE_PULSEPOINT", "EXCHANGE_REVENUEMAX", "EXCHANGE_RUBICON", "EXCHANGE_SMARTCLIP", "EXCHANGE_SMARTRTB", "EXCHANGE_SMARTSTREAMTV", "EXCHANGE_SOVRN", "EXCHANGE_SPOTXCHANGE", "EXCHANGE_STROER", "EXCHANGE_TEADSTV", "EXCHANGE_TELARIA", "EXCHANGE_TVN", "EXCHANGE_UNITED", "EXCHANGE_YIELDLAB", "EXCHANGE_YIELDMO", "EXCHANGE_UNRULYX", "EXCHANGE_OPEN8", "EXCHANGE_TRITON", "EXCHANGE_TRIPLELIFT", "EXCHANGE_TABOOLA", "EXCHANGE_INMOBI", "EXCHANGE_SMAATO", "EXCHANGE_AJA", "EXCHANGE_SUPERSHIP", "EXCHANGE_NEXSTAR_DIGITAL", "EXCHANGE_WAZE", "EXCHANGE_SOUNDCAST", "EXCHANGE_SHARETHROUGH", "EXCHANGE_FYBER", "EXCHANGE_RED_FOR_PUBLISHERS", "EXCHANGE_MEDIANET", "EXCHANGE_TAPJOY", "EXCHANGE_VISTAR", "EXCHANGE_DAX", "EXCHANGE_JCD", "EXCHANGE_PLACE_EXCHANGE", "EXCHANGE_APPLOVIN", "EXCHANGE_CONNATIX", "EXCHANGE_RESET_DIGITAL", "EXCHANGE_HIVESTACK", "EXCHANGE_APPLOVIN_GBID", "EXCHANGE_FYBER_GBID", "EXCHANGE_UNITY_GBID", "EXCHANGE_CHARTBOOST_GBID", "EXCHANGE_ADMOST_GBID", "EXCHANGE_TOPON_GBID"]  # noqa: E501
        if exchange not in allowed_values:
            raise ValueError(
                "Invalid value for `exchange` ({0}), must be one of {1}"
                .format(exchange, allowed_values)
            )

        self._exchange = exchange

    @property
    def guaranteed_order_id(self):
        """Gets the guaranteed_order_id of this InventorySource.

        Immutable. The ID of the guaranteed order that this inventory source belongs to. Only applicable when commitment is `INVENTORY_SOURCE_COMMITMENT_GUARANTEED`.

        :return: The guaranteed_order_id of this InventorySource.
        :rtype: str
        """
        return self._guaranteed_order_id

    @guaranteed_order_id.setter
    def guaranteed_order_id(self, guaranteed_order_id):
        """Sets the guaranteed_order_id of this InventorySource.

        Immutable. The ID of the guaranteed order that this inventory source belongs to. Only applicable when commitment is `INVENTORY_SOURCE_COMMITMENT_GUARANTEED`.

        :param guaranteed_order_id: The guaranteed_order_id of this InventorySource.
        :type guaranteed_order_id: str
        """

        self._guaranteed_order_id = guaranteed_order_id

    @property
    def inventory_source_id(self):
        """Gets the inventory_source_id of this InventorySource.

        Output only. The unique ID of the inventory source. Assigned by the system.

        :return: The inventory_source_id of this InventorySource.
        :rtype: str
        """
        return self._inventory_source_id

    @inventory_source_id.setter
    def inventory_source_id(self, inventory_source_id):
        """Sets the inventory_source_id of this InventorySource.

        Output only. The unique ID of the inventory source. Assigned by the system.

        :param inventory_source_id: The inventory_source_id of this InventorySource.
        :type inventory_source_id: str
        """

        self._inventory_source_id = inventory_source_id

    @property
    def inventory_source_product_type(self):
        """Gets the inventory_source_product_type of this InventorySource.

        Output only. The product type of the inventory source, denoting the way through which it sells inventory.

        :return: The inventory_source_product_type of this InventorySource.
        :rtype: str
        """
        return self._inventory_source_product_type

    @inventory_source_product_type.setter
    def inventory_source_product_type(self, inventory_source_product_type):
        """Sets the inventory_source_product_type of this InventorySource.

        Output only. The product type of the inventory source, denoting the way through which it sells inventory.

        :param inventory_source_product_type: The inventory_source_product_type of this InventorySource.
        :type inventory_source_product_type: str
        """
        allowed_values = ["INVENTORY_SOURCE_PRODUCT_TYPE_UNSPECIFIED", "PREFERRED_DEAL", "PRIVATE_AUCTION", "PROGRAMMATIC_GUARANTEED", "TAG_GUARANTEED", "YOUTUBE_RESERVE", "INSTANT_RESERVE", "GUARANTEED_PACKAGE", "PROGRAMMATIC_TV", "AUCTION_PACKAGE"]  # noqa: E501
        if inventory_source_product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `inventory_source_product_type` ({0}), must be one of {1}"
                .format(inventory_source_product_type, allowed_values)
            )

        self._inventory_source_product_type = inventory_source_product_type

    @property
    def inventory_source_type(self):
        """Gets the inventory_source_type of this InventorySource.

        Denotes the type of the inventory source.

        :return: The inventory_source_type of this InventorySource.
        :rtype: str
        """
        return self._inventory_source_type

    @inventory_source_type.setter
    def inventory_source_type(self, inventory_source_type):
        """Sets the inventory_source_type of this InventorySource.

        Denotes the type of the inventory source.

        :param inventory_source_type: The inventory_source_type of this InventorySource.
        :type inventory_source_type: str
        """
        allowed_values = ["INVENTORY_SOURCE_TYPE_UNSPECIFIED", "INVENTORY_SOURCE_TYPE_PRIVATE", "INVENTORY_SOURCE_TYPE_AUCTION_PACKAGE"]  # noqa: E501
        if inventory_source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `inventory_source_type` ({0}), must be one of {1}"
                .format(inventory_source_type, allowed_values)
            )

        self._inventory_source_type = inventory_source_type

    @property
    def name(self):
        """Gets the name of this InventorySource.

        Output only. The resource name of the inventory source.

        :return: The name of this InventorySource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InventorySource.

        Output only. The resource name of the inventory source.

        :param name: The name of this InventorySource.
        :type name: str
        """

        self._name = name

    @property
    def publisher_name(self):
        """Gets the publisher_name of this InventorySource.

        The publisher/seller name of the inventory source.

        :return: The publisher_name of this InventorySource.
        :rtype: str
        """
        return self._publisher_name

    @publisher_name.setter
    def publisher_name(self, publisher_name):
        """Sets the publisher_name of this InventorySource.

        The publisher/seller name of the inventory source.

        :param publisher_name: The publisher_name of this InventorySource.
        :type publisher_name: str
        """

        self._publisher_name = publisher_name

    @property
    def rate_details(self):
        """Gets the rate_details of this InventorySource.


        :return: The rate_details of this InventorySource.
        :rtype: RateDetails
        """
        return self._rate_details

    @rate_details.setter
    def rate_details(self, rate_details):
        """Sets the rate_details of this InventorySource.


        :param rate_details: The rate_details of this InventorySource.
        :type rate_details: RateDetails
        """

        self._rate_details = rate_details

    @property
    def read_advertiser_ids(self):
        """Gets the read_advertiser_ids of this InventorySource.

        Output only. The IDs of advertisers with read-only access to the inventory source.

        :return: The read_advertiser_ids of this InventorySource.
        :rtype: List[str]
        """
        return self._read_advertiser_ids

    @read_advertiser_ids.setter
    def read_advertiser_ids(self, read_advertiser_ids):
        """Sets the read_advertiser_ids of this InventorySource.

        Output only. The IDs of advertisers with read-only access to the inventory source.

        :param read_advertiser_ids: The read_advertiser_ids of this InventorySource.
        :type read_advertiser_ids: List[str]
        """

        self._read_advertiser_ids = read_advertiser_ids

    @property
    def read_partner_ids(self):
        """Gets the read_partner_ids of this InventorySource.

        Output only. The IDs of partners with read-only access to the inventory source. All advertisers of partners in this field inherit read-only access to the inventory source.

        :return: The read_partner_ids of this InventorySource.
        :rtype: List[str]
        """
        return self._read_partner_ids

    @read_partner_ids.setter
    def read_partner_ids(self, read_partner_ids):
        """Sets the read_partner_ids of this InventorySource.

        Output only. The IDs of partners with read-only access to the inventory source. All advertisers of partners in this field inherit read-only access to the inventory source.

        :param read_partner_ids: The read_partner_ids of this InventorySource.
        :type read_partner_ids: List[str]
        """

        self._read_partner_ids = read_partner_ids

    @property
    def read_write_accessors(self):
        """Gets the read_write_accessors of this InventorySource.


        :return: The read_write_accessors of this InventorySource.
        :rtype: InventorySourceAccessors
        """
        return self._read_write_accessors

    @read_write_accessors.setter
    def read_write_accessors(self, read_write_accessors):
        """Sets the read_write_accessors of this InventorySource.


        :param read_write_accessors: The read_write_accessors of this InventorySource.
        :type read_write_accessors: InventorySourceAccessors
        """

        self._read_write_accessors = read_write_accessors

    @property
    def status(self):
        """Gets the status of this InventorySource.


        :return: The status of this InventorySource.
        :rtype: InventorySourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InventorySource.


        :param status: The status of this InventorySource.
        :type status: InventorySourceStatus
        """

        self._status = status

    @property
    def time_range(self):
        """Gets the time_range of this InventorySource.


        :return: The time_range of this InventorySource.
        :rtype: TimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this InventorySource.


        :param time_range: The time_range of this InventorySource.
        :type time_range: TimeRange
        """

        self._time_range = time_range

    @property
    def update_time(self):
        """Gets the update_time of this InventorySource.

        Output only. The timestamp when the inventory source was last updated. Assigned by the system.

        :return: The update_time of this InventorySource.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this InventorySource.

        Output only. The timestamp when the inventory source was last updated. Assigned by the system.

        :param update_time: The update_time of this InventorySource.
        :type update_time: str
        """

        self._update_time = update_time
