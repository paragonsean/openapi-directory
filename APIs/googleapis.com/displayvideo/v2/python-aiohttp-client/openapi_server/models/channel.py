# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Channel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertiser_id: str=None, channel_id: str=None, display_name: str=None, name: str=None, negatively_targeted_line_item_count: str=None, partner_id: str=None, positively_targeted_line_item_count: str=None):
        """Channel - a model defined in OpenAPI

        :param advertiser_id: The advertiser_id of this Channel.
        :param channel_id: The channel_id of this Channel.
        :param display_name: The display_name of this Channel.
        :param name: The name of this Channel.
        :param negatively_targeted_line_item_count: The negatively_targeted_line_item_count of this Channel.
        :param partner_id: The partner_id of this Channel.
        :param positively_targeted_line_item_count: The positively_targeted_line_item_count of this Channel.
        """
        self.openapi_types = {
            'advertiser_id': str,
            'channel_id': str,
            'display_name': str,
            'name': str,
            'negatively_targeted_line_item_count': str,
            'partner_id': str,
            'positively_targeted_line_item_count': str
        }

        self.attribute_map = {
            'advertiser_id': 'advertiserId',
            'channel_id': 'channelId',
            'display_name': 'displayName',
            'name': 'name',
            'negatively_targeted_line_item_count': 'negativelyTargetedLineItemCount',
            'partner_id': 'partnerId',
            'positively_targeted_line_item_count': 'positivelyTargetedLineItemCount'
        }

        self._advertiser_id = advertiser_id
        self._channel_id = channel_id
        self._display_name = display_name
        self._name = name
        self._negatively_targeted_line_item_count = negatively_targeted_line_item_count
        self._partner_id = partner_id
        self._positively_targeted_line_item_count = positively_targeted_line_item_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Channel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Channel of this Channel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this Channel.

        The ID of the advertiser that owns the channel.

        :return: The advertiser_id of this Channel.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this Channel.

        The ID of the advertiser that owns the channel.

        :param advertiser_id: The advertiser_id of this Channel.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def channel_id(self):
        """Gets the channel_id of this Channel.

        Output only. The unique ID of the channel. Assigned by the system.

        :return: The channel_id of this Channel.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this Channel.

        Output only. The unique ID of the channel. Assigned by the system.

        :param channel_id: The channel_id of this Channel.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def display_name(self):
        """Gets the display_name of this Channel.

        Required. The display name of the channel. Must be UTF-8 encoded with a maximum length of 240 bytes.

        :return: The display_name of this Channel.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Channel.

        Required. The display name of the channel. Must be UTF-8 encoded with a maximum length of 240 bytes.

        :param display_name: The display_name of this Channel.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this Channel.

        Output only. The resource name of the channel.

        :return: The name of this Channel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Channel.

        Output only. The resource name of the channel.

        :param name: The name of this Channel.
        :type name: str
        """

        self._name = name

    @property
    def negatively_targeted_line_item_count(self):
        """Gets the negatively_targeted_line_item_count of this Channel.

        Output only. Number of line items that are directly targeting this channel negatively.

        :return: The negatively_targeted_line_item_count of this Channel.
        :rtype: str
        """
        return self._negatively_targeted_line_item_count

    @negatively_targeted_line_item_count.setter
    def negatively_targeted_line_item_count(self, negatively_targeted_line_item_count):
        """Sets the negatively_targeted_line_item_count of this Channel.

        Output only. Number of line items that are directly targeting this channel negatively.

        :param negatively_targeted_line_item_count: The negatively_targeted_line_item_count of this Channel.
        :type negatively_targeted_line_item_count: str
        """

        self._negatively_targeted_line_item_count = negatively_targeted_line_item_count

    @property
    def partner_id(self):
        """Gets the partner_id of this Channel.

        The ID of the partner that owns the channel.

        :return: The partner_id of this Channel.
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this Channel.

        The ID of the partner that owns the channel.

        :param partner_id: The partner_id of this Channel.
        :type partner_id: str
        """

        self._partner_id = partner_id

    @property
    def positively_targeted_line_item_count(self):
        """Gets the positively_targeted_line_item_count of this Channel.

        Output only. Number of line items that are directly targeting this channel positively.

        :return: The positively_targeted_line_item_count of this Channel.
        :rtype: str
        """
        return self._positively_targeted_line_item_count

    @positively_targeted_line_item_count.setter
    def positively_targeted_line_item_count(self, positively_targeted_line_item_count):
        """Sets the positively_targeted_line_item_count of this Channel.

        Output only. Number of line items that are directly targeting this channel positively.

        :param positively_targeted_line_item_count: The positively_targeted_line_item_count of this Channel.
        :type positively_targeted_line_item_count: str
        """

        self._positively_targeted_line_item_count = positively_targeted_line_item_count
