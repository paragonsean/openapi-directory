# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_feed_data import ProductFeedData
from openapi_server.models.targeting_expansion_config import TargetingExpansionConfig
from openapi_server.models.youtube_and_partners_bidding_strategy import YoutubeAndPartnersBiddingStrategy
from openapi_server import util


class YoutubeAdGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_group_format: str=None, ad_group_id: str=None, advertiser_id: str=None, bidding_strategy: YoutubeAndPartnersBiddingStrategy=None, display_name: str=None, entity_status: str=None, line_item_id: str=None, name: str=None, product_feed_data: ProductFeedData=None, targeting_expansion: TargetingExpansionConfig=None, youtube_ad_ids: List[str]=None):
        """YoutubeAdGroup - a model defined in OpenAPI

        :param ad_group_format: The ad_group_format of this YoutubeAdGroup.
        :param ad_group_id: The ad_group_id of this YoutubeAdGroup.
        :param advertiser_id: The advertiser_id of this YoutubeAdGroup.
        :param bidding_strategy: The bidding_strategy of this YoutubeAdGroup.
        :param display_name: The display_name of this YoutubeAdGroup.
        :param entity_status: The entity_status of this YoutubeAdGroup.
        :param line_item_id: The line_item_id of this YoutubeAdGroup.
        :param name: The name of this YoutubeAdGroup.
        :param product_feed_data: The product_feed_data of this YoutubeAdGroup.
        :param targeting_expansion: The targeting_expansion of this YoutubeAdGroup.
        :param youtube_ad_ids: The youtube_ad_ids of this YoutubeAdGroup.
        """
        self.openapi_types = {
            'ad_group_format': str,
            'ad_group_id': str,
            'advertiser_id': str,
            'bidding_strategy': YoutubeAndPartnersBiddingStrategy,
            'display_name': str,
            'entity_status': str,
            'line_item_id': str,
            'name': str,
            'product_feed_data': ProductFeedData,
            'targeting_expansion': TargetingExpansionConfig,
            'youtube_ad_ids': List[str]
        }

        self.attribute_map = {
            'ad_group_format': 'adGroupFormat',
            'ad_group_id': 'adGroupId',
            'advertiser_id': 'advertiserId',
            'bidding_strategy': 'biddingStrategy',
            'display_name': 'displayName',
            'entity_status': 'entityStatus',
            'line_item_id': 'lineItemId',
            'name': 'name',
            'product_feed_data': 'productFeedData',
            'targeting_expansion': 'targetingExpansion',
            'youtube_ad_ids': 'youtubeAdIds'
        }

        self._ad_group_format = ad_group_format
        self._ad_group_id = ad_group_id
        self._advertiser_id = advertiser_id
        self._bidding_strategy = bidding_strategy
        self._display_name = display_name
        self._entity_status = entity_status
        self._line_item_id = line_item_id
        self._name = name
        self._product_feed_data = product_feed_data
        self._targeting_expansion = targeting_expansion
        self._youtube_ad_ids = youtube_ad_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'YoutubeAdGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The YoutubeAdGroup of this YoutubeAdGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_group_format(self):
        """Gets the ad_group_format of this YoutubeAdGroup.

        The format of the ads in the ad group.

        :return: The ad_group_format of this YoutubeAdGroup.
        :rtype: str
        """
        return self._ad_group_format

    @ad_group_format.setter
    def ad_group_format(self, ad_group_format):
        """Sets the ad_group_format of this YoutubeAdGroup.

        The format of the ads in the ad group.

        :param ad_group_format: The ad_group_format of this YoutubeAdGroup.
        :type ad_group_format: str
        """
        allowed_values = ["YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_UNSPECIFIED", "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_IN_STREAM", "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_VIDEO_DISCOVERY", "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_BUMPER", "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_NON_SKIPPABLE_IN_STREAM", "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_AUDIO", "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_ACTION", "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_REACH", "YOUTUBE_AND_PARTNERS_AD_GROUP_FORMAT_MASTHEAD"]  # noqa: E501
        if ad_group_format not in allowed_values:
            raise ValueError(
                "Invalid value for `ad_group_format` ({0}), must be one of {1}"
                .format(ad_group_format, allowed_values)
            )

        self._ad_group_format = ad_group_format

    @property
    def ad_group_id(self):
        """Gets the ad_group_id of this YoutubeAdGroup.

        The unique ID of the ad group. Assigned by the system.

        :return: The ad_group_id of this YoutubeAdGroup.
        :rtype: str
        """
        return self._ad_group_id

    @ad_group_id.setter
    def ad_group_id(self, ad_group_id):
        """Sets the ad_group_id of this YoutubeAdGroup.

        The unique ID of the ad group. Assigned by the system.

        :param ad_group_id: The ad_group_id of this YoutubeAdGroup.
        :type ad_group_id: str
        """

        self._ad_group_id = ad_group_id

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this YoutubeAdGroup.

        The unique ID of the advertiser the ad group belongs to.

        :return: The advertiser_id of this YoutubeAdGroup.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this YoutubeAdGroup.

        The unique ID of the advertiser the ad group belongs to.

        :param advertiser_id: The advertiser_id of this YoutubeAdGroup.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def bidding_strategy(self):
        """Gets the bidding_strategy of this YoutubeAdGroup.


        :return: The bidding_strategy of this YoutubeAdGroup.
        :rtype: YoutubeAndPartnersBiddingStrategy
        """
        return self._bidding_strategy

    @bidding_strategy.setter
    def bidding_strategy(self, bidding_strategy):
        """Sets the bidding_strategy of this YoutubeAdGroup.


        :param bidding_strategy: The bidding_strategy of this YoutubeAdGroup.
        :type bidding_strategy: YoutubeAndPartnersBiddingStrategy
        """

        self._bidding_strategy = bidding_strategy

    @property
    def display_name(self):
        """Gets the display_name of this YoutubeAdGroup.

        The display name of the ad group. Must be UTF-8 encoded with a maximum size of 255 bytes.

        :return: The display_name of this YoutubeAdGroup.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this YoutubeAdGroup.

        The display name of the ad group. Must be UTF-8 encoded with a maximum size of 255 bytes.

        :param display_name: The display_name of this YoutubeAdGroup.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def entity_status(self):
        """Gets the entity_status of this YoutubeAdGroup.

        Controls whether or not the ad group can spend its budget and bid on inventory. If the ad group's parent line item is not active, the ad group can't spend its budget even if its own status is `ENTITY_STATUS_ACTIVE`.

        :return: The entity_status of this YoutubeAdGroup.
        :rtype: str
        """
        return self._entity_status

    @entity_status.setter
    def entity_status(self, entity_status):
        """Sets the entity_status of this YoutubeAdGroup.

        Controls whether or not the ad group can spend its budget and bid on inventory. If the ad group's parent line item is not active, the ad group can't spend its budget even if its own status is `ENTITY_STATUS_ACTIVE`.

        :param entity_status: The entity_status of this YoutubeAdGroup.
        :type entity_status: str
        """
        allowed_values = ["ENTITY_STATUS_UNSPECIFIED", "ENTITY_STATUS_ACTIVE", "ENTITY_STATUS_ARCHIVED", "ENTITY_STATUS_DRAFT", "ENTITY_STATUS_PAUSED", "ENTITY_STATUS_SCHEDULED_FOR_DELETION"]  # noqa: E501
        if entity_status not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_status` ({0}), must be one of {1}"
                .format(entity_status, allowed_values)
            )

        self._entity_status = entity_status

    @property
    def line_item_id(self):
        """Gets the line_item_id of this YoutubeAdGroup.

        The unique ID of the line item that the ad group belongs to.

        :return: The line_item_id of this YoutubeAdGroup.
        :rtype: str
        """
        return self._line_item_id

    @line_item_id.setter
    def line_item_id(self, line_item_id):
        """Sets the line_item_id of this YoutubeAdGroup.

        The unique ID of the line item that the ad group belongs to.

        :param line_item_id: The line_item_id of this YoutubeAdGroup.
        :type line_item_id: str
        """

        self._line_item_id = line_item_id

    @property
    def name(self):
        """Gets the name of this YoutubeAdGroup.

        The resource name of the ad group.

        :return: The name of this YoutubeAdGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this YoutubeAdGroup.

        The resource name of the ad group.

        :param name: The name of this YoutubeAdGroup.
        :type name: str
        """

        self._name = name

    @property
    def product_feed_data(self):
        """Gets the product_feed_data of this YoutubeAdGroup.


        :return: The product_feed_data of this YoutubeAdGroup.
        :rtype: ProductFeedData
        """
        return self._product_feed_data

    @product_feed_data.setter
    def product_feed_data(self, product_feed_data):
        """Sets the product_feed_data of this YoutubeAdGroup.


        :param product_feed_data: The product_feed_data of this YoutubeAdGroup.
        :type product_feed_data: ProductFeedData
        """

        self._product_feed_data = product_feed_data

    @property
    def targeting_expansion(self):
        """Gets the targeting_expansion of this YoutubeAdGroup.


        :return: The targeting_expansion of this YoutubeAdGroup.
        :rtype: TargetingExpansionConfig
        """
        return self._targeting_expansion

    @targeting_expansion.setter
    def targeting_expansion(self, targeting_expansion):
        """Sets the targeting_expansion of this YoutubeAdGroup.


        :param targeting_expansion: The targeting_expansion of this YoutubeAdGroup.
        :type targeting_expansion: TargetingExpansionConfig
        """

        self._targeting_expansion = targeting_expansion

    @property
    def youtube_ad_ids(self):
        """Gets the youtube_ad_ids of this YoutubeAdGroup.

        The IDs of the youtube_ad_group_ad resources associated with the ad group.

        :return: The youtube_ad_ids of this YoutubeAdGroup.
        :rtype: List[str]
        """
        return self._youtube_ad_ids

    @youtube_ad_ids.setter
    def youtube_ad_ids(self, youtube_ad_ids):
        """Sets the youtube_ad_ids of this YoutubeAdGroup.

        The IDs of the youtube_ad_group_ad resources associated with the ad group.

        :param youtube_ad_ids: The youtube_ad_ids of this YoutubeAdGroup.
        :type youtube_ad_ids: List[str]
        """

        self._youtube_ad_ids = youtube_ad_ids
