# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioContentTypeTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_content_type: str=None):
        """AudioContentTypeTargetingOptionDetails - a model defined in OpenAPI

        :param audio_content_type: The audio_content_type of this AudioContentTypeTargetingOptionDetails.
        """
        self.openapi_types = {
            'audio_content_type': str
        }

        self.attribute_map = {
            'audio_content_type': 'audioContentType'
        }

        self._audio_content_type = audio_content_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioContentTypeTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioContentTypeTargetingOptionDetails of this AudioContentTypeTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_content_type(self):
        """Gets the audio_content_type of this AudioContentTypeTargetingOptionDetails.

        Output only. The audio content type.

        :return: The audio_content_type of this AudioContentTypeTargetingOptionDetails.
        :rtype: str
        """
        return self._audio_content_type

    @audio_content_type.setter
    def audio_content_type(self, audio_content_type):
        """Sets the audio_content_type of this AudioContentTypeTargetingOptionDetails.

        Output only. The audio content type.

        :param audio_content_type: The audio_content_type of this AudioContentTypeTargetingOptionDetails.
        :type audio_content_type: str
        """
        allowed_values = ["AUDIO_CONTENT_TYPE_UNSPECIFIED", "AUDIO_CONTENT_TYPE_UNKNOWN", "AUDIO_CONTENT_TYPE_MUSIC", "AUDIO_CONTENT_TYPE_BROADCAST", "AUDIO_CONTENT_TYPE_PODCAST"]  # noqa: E501
        if audio_content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `audio_content_type` ({0}), must be one of {1}"
                .format(audio_content_type, allowed_values)
            )

        self._audio_content_type = audio_content_type
