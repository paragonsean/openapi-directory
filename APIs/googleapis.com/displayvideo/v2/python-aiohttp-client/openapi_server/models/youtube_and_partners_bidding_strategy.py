# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class YoutubeAndPartnersBiddingStrategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_group_effective_target_cpa_source: str=None, ad_group_effective_target_cpa_value: str=None, type: str=None, value: str=None):
        """YoutubeAndPartnersBiddingStrategy - a model defined in OpenAPI

        :param ad_group_effective_target_cpa_source: The ad_group_effective_target_cpa_source of this YoutubeAndPartnersBiddingStrategy.
        :param ad_group_effective_target_cpa_value: The ad_group_effective_target_cpa_value of this YoutubeAndPartnersBiddingStrategy.
        :param type: The type of this YoutubeAndPartnersBiddingStrategy.
        :param value: The value of this YoutubeAndPartnersBiddingStrategy.
        """
        self.openapi_types = {
            'ad_group_effective_target_cpa_source': str,
            'ad_group_effective_target_cpa_value': str,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'ad_group_effective_target_cpa_source': 'adGroupEffectiveTargetCpaSource',
            'ad_group_effective_target_cpa_value': 'adGroupEffectiveTargetCpaValue',
            'type': 'type',
            'value': 'value'
        }

        self._ad_group_effective_target_cpa_source = ad_group_effective_target_cpa_source
        self._ad_group_effective_target_cpa_value = ad_group_effective_target_cpa_value
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'YoutubeAndPartnersBiddingStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The YoutubeAndPartnersBiddingStrategy of this YoutubeAndPartnersBiddingStrategy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_group_effective_target_cpa_source(self):
        """Gets the ad_group_effective_target_cpa_source of this YoutubeAndPartnersBiddingStrategy.

        Output only. Source of the effective target CPA value for ad group.

        :return: The ad_group_effective_target_cpa_source of this YoutubeAndPartnersBiddingStrategy.
        :rtype: str
        """
        return self._ad_group_effective_target_cpa_source

    @ad_group_effective_target_cpa_source.setter
    def ad_group_effective_target_cpa_source(self, ad_group_effective_target_cpa_source):
        """Sets the ad_group_effective_target_cpa_source of this YoutubeAndPartnersBiddingStrategy.

        Output only. Source of the effective target CPA value for ad group.

        :param ad_group_effective_target_cpa_source: The ad_group_effective_target_cpa_source of this YoutubeAndPartnersBiddingStrategy.
        :type ad_group_effective_target_cpa_source: str
        """
        allowed_values = ["BIDDING_SOURCE_UNSPECIFIED", "BIDDING_SOURCE_LINE_ITEM", "BIDDING_SOURCE_AD_GROUP"]  # noqa: E501
        if ad_group_effective_target_cpa_source not in allowed_values:
            raise ValueError(
                "Invalid value for `ad_group_effective_target_cpa_source` ({0}), must be one of {1}"
                .format(ad_group_effective_target_cpa_source, allowed_values)
            )

        self._ad_group_effective_target_cpa_source = ad_group_effective_target_cpa_source

    @property
    def ad_group_effective_target_cpa_value(self):
        """Gets the ad_group_effective_target_cpa_value of this YoutubeAndPartnersBiddingStrategy.

        Output only. The effective target CPA for ad group, in micros of advertiser's currency.

        :return: The ad_group_effective_target_cpa_value of this YoutubeAndPartnersBiddingStrategy.
        :rtype: str
        """
        return self._ad_group_effective_target_cpa_value

    @ad_group_effective_target_cpa_value.setter
    def ad_group_effective_target_cpa_value(self, ad_group_effective_target_cpa_value):
        """Sets the ad_group_effective_target_cpa_value of this YoutubeAndPartnersBiddingStrategy.

        Output only. The effective target CPA for ad group, in micros of advertiser's currency.

        :param ad_group_effective_target_cpa_value: The ad_group_effective_target_cpa_value of this YoutubeAndPartnersBiddingStrategy.
        :type ad_group_effective_target_cpa_value: str
        """

        self._ad_group_effective_target_cpa_value = ad_group_effective_target_cpa_value

    @property
    def type(self):
        """Gets the type of this YoutubeAndPartnersBiddingStrategy.

        The type of the bidding strategy.

        :return: The type of this YoutubeAndPartnersBiddingStrategy.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this YoutubeAndPartnersBiddingStrategy.

        The type of the bidding strategy.

        :param type: The type of this YoutubeAndPartnersBiddingStrategy.
        :type type: str
        """
        allowed_values = ["YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_UNSPECIFIED", "YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_MANUAL_CPV", "YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_MANUAL_CPM", "YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_TARGET_CPA", "YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_TARGET_CPM", "YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_MAXIMIZE_LIFT", "YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_MAXIMIZE_CONVERSIONS", "YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_TARGET_CPV", "YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_TARGET_ROAS", "YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_MAXIMIZE_CONVERSION_VALUE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this YoutubeAndPartnersBiddingStrategy.

        The value used by the bidding strategy. When the bidding strategy is assigned at the line item level, this field is only applicable for the following strategy types: * `YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_TARGET_CPA` * `YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_TARGET_ROAS` When the bidding strategy is assigned at the ad group level, this field is only applicable for the following strategy types: * `YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_MANUAL_CPM` * `YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_MANUAL_CPV` * `YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_TARGET_CPA` * `YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_TARGET_CPM` * `YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_TARGET_ROAS` If not using an applicable strategy, the value of this field will be 0.

        :return: The value of this YoutubeAndPartnersBiddingStrategy.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this YoutubeAndPartnersBiddingStrategy.

        The value used by the bidding strategy. When the bidding strategy is assigned at the line item level, this field is only applicable for the following strategy types: * `YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_TARGET_CPA` * `YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_TARGET_ROAS` When the bidding strategy is assigned at the ad group level, this field is only applicable for the following strategy types: * `YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_MANUAL_CPM` * `YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_MANUAL_CPV` * `YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_TARGET_CPA` * `YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_TARGET_CPM` * `YOUTUBE_AND_PARTNERS_BIDDING_STRATEGY_TYPE_TARGET_ROAS` If not using an applicable strategy, the value of this field will be 0.

        :param value: The value of this YoutubeAndPartnersBiddingStrategy.
        :type value: str
        """

        self._value = value
