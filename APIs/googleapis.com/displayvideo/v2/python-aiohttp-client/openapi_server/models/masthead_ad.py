# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.youtube_video_details import YoutubeVideoDetails
from openapi_server import util


class MastheadAd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autoplay_video_duration: str=None, autoplay_video_start_millisecond: str=None, call_to_action_button_label: str=None, call_to_action_final_url: str=None, call_to_action_tracking_url: str=None, companion_youtube_videos: List[YoutubeVideoDetails]=None, description: str=None, headline: str=None, show_channel_art: bool=None, video: YoutubeVideoDetails=None, video_aspect_ratio: str=None):
        """MastheadAd - a model defined in OpenAPI

        :param autoplay_video_duration: The autoplay_video_duration of this MastheadAd.
        :param autoplay_video_start_millisecond: The autoplay_video_start_millisecond of this MastheadAd.
        :param call_to_action_button_label: The call_to_action_button_label of this MastheadAd.
        :param call_to_action_final_url: The call_to_action_final_url of this MastheadAd.
        :param call_to_action_tracking_url: The call_to_action_tracking_url of this MastheadAd.
        :param companion_youtube_videos: The companion_youtube_videos of this MastheadAd.
        :param description: The description of this MastheadAd.
        :param headline: The headline of this MastheadAd.
        :param show_channel_art: The show_channel_art of this MastheadAd.
        :param video: The video of this MastheadAd.
        :param video_aspect_ratio: The video_aspect_ratio of this MastheadAd.
        """
        self.openapi_types = {
            'autoplay_video_duration': str,
            'autoplay_video_start_millisecond': str,
            'call_to_action_button_label': str,
            'call_to_action_final_url': str,
            'call_to_action_tracking_url': str,
            'companion_youtube_videos': List[YoutubeVideoDetails],
            'description': str,
            'headline': str,
            'show_channel_art': bool,
            'video': YoutubeVideoDetails,
            'video_aspect_ratio': str
        }

        self.attribute_map = {
            'autoplay_video_duration': 'autoplayVideoDuration',
            'autoplay_video_start_millisecond': 'autoplayVideoStartMillisecond',
            'call_to_action_button_label': 'callToActionButtonLabel',
            'call_to_action_final_url': 'callToActionFinalUrl',
            'call_to_action_tracking_url': 'callToActionTrackingUrl',
            'companion_youtube_videos': 'companionYoutubeVideos',
            'description': 'description',
            'headline': 'headline',
            'show_channel_art': 'showChannelArt',
            'video': 'video',
            'video_aspect_ratio': 'videoAspectRatio'
        }

        self._autoplay_video_duration = autoplay_video_duration
        self._autoplay_video_start_millisecond = autoplay_video_start_millisecond
        self._call_to_action_button_label = call_to_action_button_label
        self._call_to_action_final_url = call_to_action_final_url
        self._call_to_action_tracking_url = call_to_action_tracking_url
        self._companion_youtube_videos = companion_youtube_videos
        self._description = description
        self._headline = headline
        self._show_channel_art = show_channel_art
        self._video = video
        self._video_aspect_ratio = video_aspect_ratio

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MastheadAd':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MastheadAd of this MastheadAd.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autoplay_video_duration(self):
        """Gets the autoplay_video_duration of this MastheadAd.

        The duration of time the video will autoplay.

        :return: The autoplay_video_duration of this MastheadAd.
        :rtype: str
        """
        return self._autoplay_video_duration

    @autoplay_video_duration.setter
    def autoplay_video_duration(self, autoplay_video_duration):
        """Sets the autoplay_video_duration of this MastheadAd.

        The duration of time the video will autoplay.

        :param autoplay_video_duration: The autoplay_video_duration of this MastheadAd.
        :type autoplay_video_duration: str
        """

        self._autoplay_video_duration = autoplay_video_duration

    @property
    def autoplay_video_start_millisecond(self):
        """Gets the autoplay_video_start_millisecond of this MastheadAd.

        The amount of time in milliseconds after which the video will start to play.

        :return: The autoplay_video_start_millisecond of this MastheadAd.
        :rtype: str
        """
        return self._autoplay_video_start_millisecond

    @autoplay_video_start_millisecond.setter
    def autoplay_video_start_millisecond(self, autoplay_video_start_millisecond):
        """Sets the autoplay_video_start_millisecond of this MastheadAd.

        The amount of time in milliseconds after which the video will start to play.

        :param autoplay_video_start_millisecond: The autoplay_video_start_millisecond of this MastheadAd.
        :type autoplay_video_start_millisecond: str
        """

        self._autoplay_video_start_millisecond = autoplay_video_start_millisecond

    @property
    def call_to_action_button_label(self):
        """Gets the call_to_action_button_label of this MastheadAd.

        The text on the call-to-action button.

        :return: The call_to_action_button_label of this MastheadAd.
        :rtype: str
        """
        return self._call_to_action_button_label

    @call_to_action_button_label.setter
    def call_to_action_button_label(self, call_to_action_button_label):
        """Sets the call_to_action_button_label of this MastheadAd.

        The text on the call-to-action button.

        :param call_to_action_button_label: The call_to_action_button_label of this MastheadAd.
        :type call_to_action_button_label: str
        """

        self._call_to_action_button_label = call_to_action_button_label

    @property
    def call_to_action_final_url(self):
        """Gets the call_to_action_final_url of this MastheadAd.

        The destination URL for the call-to-action button.

        :return: The call_to_action_final_url of this MastheadAd.
        :rtype: str
        """
        return self._call_to_action_final_url

    @call_to_action_final_url.setter
    def call_to_action_final_url(self, call_to_action_final_url):
        """Sets the call_to_action_final_url of this MastheadAd.

        The destination URL for the call-to-action button.

        :param call_to_action_final_url: The call_to_action_final_url of this MastheadAd.
        :type call_to_action_final_url: str
        """

        self._call_to_action_final_url = call_to_action_final_url

    @property
    def call_to_action_tracking_url(self):
        """Gets the call_to_action_tracking_url of this MastheadAd.

        The tracking URL for the call-to-action button.

        :return: The call_to_action_tracking_url of this MastheadAd.
        :rtype: str
        """
        return self._call_to_action_tracking_url

    @call_to_action_tracking_url.setter
    def call_to_action_tracking_url(self, call_to_action_tracking_url):
        """Sets the call_to_action_tracking_url of this MastheadAd.

        The tracking URL for the call-to-action button.

        :param call_to_action_tracking_url: The call_to_action_tracking_url of this MastheadAd.
        :type call_to_action_tracking_url: str
        """

        self._call_to_action_tracking_url = call_to_action_tracking_url

    @property
    def companion_youtube_videos(self):
        """Gets the companion_youtube_videos of this MastheadAd.

        The videos that appear next to the Masthead Ad on desktop. Can be no more than two.

        :return: The companion_youtube_videos of this MastheadAd.
        :rtype: List[YoutubeVideoDetails]
        """
        return self._companion_youtube_videos

    @companion_youtube_videos.setter
    def companion_youtube_videos(self, companion_youtube_videos):
        """Sets the companion_youtube_videos of this MastheadAd.

        The videos that appear next to the Masthead Ad on desktop. Can be no more than two.

        :param companion_youtube_videos: The companion_youtube_videos of this MastheadAd.
        :type companion_youtube_videos: List[YoutubeVideoDetails]
        """

        self._companion_youtube_videos = companion_youtube_videos

    @property
    def description(self):
        """Gets the description of this MastheadAd.

        The description of the ad.

        :return: The description of this MastheadAd.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MastheadAd.

        The description of the ad.

        :param description: The description of this MastheadAd.
        :type description: str
        """

        self._description = description

    @property
    def headline(self):
        """Gets the headline of this MastheadAd.

        The headline of the ad.

        :return: The headline of this MastheadAd.
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this MastheadAd.

        The headline of the ad.

        :param headline: The headline of this MastheadAd.
        :type headline: str
        """

        self._headline = headline

    @property
    def show_channel_art(self):
        """Gets the show_channel_art of this MastheadAd.

        Whether to show a background or banner that appears at the top of a YouTube page.

        :return: The show_channel_art of this MastheadAd.
        :rtype: bool
        """
        return self._show_channel_art

    @show_channel_art.setter
    def show_channel_art(self, show_channel_art):
        """Sets the show_channel_art of this MastheadAd.

        Whether to show a background or banner that appears at the top of a YouTube page.

        :param show_channel_art: The show_channel_art of this MastheadAd.
        :type show_channel_art: bool
        """

        self._show_channel_art = show_channel_art

    @property
    def video(self):
        """Gets the video of this MastheadAd.


        :return: The video of this MastheadAd.
        :rtype: YoutubeVideoDetails
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this MastheadAd.


        :param video: The video of this MastheadAd.
        :type video: YoutubeVideoDetails
        """

        self._video = video

    @property
    def video_aspect_ratio(self):
        """Gets the video_aspect_ratio of this MastheadAd.

        The aspect ratio of the autoplaying YouTube video on the Masthead.

        :return: The video_aspect_ratio of this MastheadAd.
        :rtype: str
        """
        return self._video_aspect_ratio

    @video_aspect_ratio.setter
    def video_aspect_ratio(self, video_aspect_ratio):
        """Sets the video_aspect_ratio of this MastheadAd.

        The aspect ratio of the autoplaying YouTube video on the Masthead.

        :param video_aspect_ratio: The video_aspect_ratio of this MastheadAd.
        :type video_aspect_ratio: str
        """
        allowed_values = ["VIDEO_ASPECT_RATIO_UNSPECIFIED", "VIDEO_ASPECT_RATIO_WIDESCREEN", "VIDEO_ASPECT_RATIO_FIXED_16_9"]  # noqa: E501
        if video_aspect_ratio not in allowed_values:
            raise ValueError(
                "Invalid value for `video_aspect_ratio` ({0}), must be one of {1}"
                .format(video_aspect_ratio, allowed_values)
            )

        self._video_aspect_ratio = video_aspect_ratio
