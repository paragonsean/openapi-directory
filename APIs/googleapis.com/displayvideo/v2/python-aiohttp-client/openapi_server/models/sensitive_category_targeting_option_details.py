# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SensitiveCategoryTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sensitive_category: str=None):
        """SensitiveCategoryTargetingOptionDetails - a model defined in OpenAPI

        :param sensitive_category: The sensitive_category of this SensitiveCategoryTargetingOptionDetails.
        """
        self.openapi_types = {
            'sensitive_category': str
        }

        self.attribute_map = {
            'sensitive_category': 'sensitiveCategory'
        }

        self._sensitive_category = sensitive_category

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SensitiveCategoryTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SensitiveCategoryTargetingOptionDetails of this SensitiveCategoryTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sensitive_category(self):
        """Gets the sensitive_category of this SensitiveCategoryTargetingOptionDetails.

        Output only. An enum for the DV360 Sensitive category content classifier.

        :return: The sensitive_category of this SensitiveCategoryTargetingOptionDetails.
        :rtype: str
        """
        return self._sensitive_category

    @sensitive_category.setter
    def sensitive_category(self, sensitive_category):
        """Sets the sensitive_category of this SensitiveCategoryTargetingOptionDetails.

        Output only. An enum for the DV360 Sensitive category content classifier.

        :param sensitive_category: The sensitive_category of this SensitiveCategoryTargetingOptionDetails.
        :type sensitive_category: str
        """
        allowed_values = ["SENSITIVE_CATEGORY_UNSPECIFIED", "SENSITIVE_CATEGORY_ADULT", "SENSITIVE_CATEGORY_DEROGATORY", "SENSITIVE_CATEGORY_DOWNLOADS_SHARING", "SENSITIVE_CATEGORY_WEAPONS", "SENSITIVE_CATEGORY_GAMBLING", "SENSITIVE_CATEGORY_VIOLENCE", "SENSITIVE_CATEGORY_SUGGESTIVE", "SENSITIVE_CATEGORY_PROFANITY", "SENSITIVE_CATEGORY_ALCOHOL", "SENSITIVE_CATEGORY_DRUGS", "SENSITIVE_CATEGORY_TOBACCO", "SENSITIVE_CATEGORY_POLITICS", "SENSITIVE_CATEGORY_RELIGION", "SENSITIVE_CATEGORY_TRAGEDY", "SENSITIVE_CATEGORY_TRANSPORTATION_ACCIDENTS", "SENSITIVE_CATEGORY_SENSITIVE_SOCIAL_ISSUES", "SENSITIVE_CATEGORY_SHOCKING", "SENSITIVE_CATEGORY_EMBEDDED_VIDEO", "SENSITIVE_CATEGORY_LIVE_STREAMING_VIDEO"]  # noqa: E501
        if sensitive_category not in allowed_values:
            raise ValueError(
                "Invalid value for `sensitive_category` ({0}), must be one of {1}"
                .format(sensitive_category, allowed_values)
            )

        self._sensitive_category = sensitive_category
