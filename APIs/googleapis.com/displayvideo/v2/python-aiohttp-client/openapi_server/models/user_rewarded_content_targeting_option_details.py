# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserRewardedContentTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_rewarded_content: str=None):
        """UserRewardedContentTargetingOptionDetails - a model defined in OpenAPI

        :param user_rewarded_content: The user_rewarded_content of this UserRewardedContentTargetingOptionDetails.
        """
        self.openapi_types = {
            'user_rewarded_content': str
        }

        self.attribute_map = {
            'user_rewarded_content': 'userRewardedContent'
        }

        self._user_rewarded_content = user_rewarded_content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserRewardedContentTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserRewardedContentTargetingOptionDetails of this UserRewardedContentTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_rewarded_content(self):
        """Gets the user_rewarded_content of this UserRewardedContentTargetingOptionDetails.

        Output only. User rewarded content status for video ads.

        :return: The user_rewarded_content of this UserRewardedContentTargetingOptionDetails.
        :rtype: str
        """
        return self._user_rewarded_content

    @user_rewarded_content.setter
    def user_rewarded_content(self, user_rewarded_content):
        """Sets the user_rewarded_content of this UserRewardedContentTargetingOptionDetails.

        Output only. User rewarded content status for video ads.

        :param user_rewarded_content: The user_rewarded_content of this UserRewardedContentTargetingOptionDetails.
        :type user_rewarded_content: str
        """
        allowed_values = ["USER_REWARDED_CONTENT_UNSPECIFIED", "USER_REWARDED_CONTENT_USER_REWARDED", "USER_REWARDED_CONTENT_NOT_USER_REWARDED"]  # noqa: E501
        if user_rewarded_content not in allowed_values:
            raise ValueError(
                "Invalid value for `user_rewarded_content` ({0}), must be one of {1}"
                .format(user_rewarded_content, allowed_values)
            )

        self._user_rewarded_content = user_rewarded_content
