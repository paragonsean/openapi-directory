# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ManualTrigger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_duration_minutes: str=None, advertiser_id: str=None, display_name: str=None, latest_activation_time: str=None, name: str=None, state: str=None, trigger_id: str=None):
        """ManualTrigger - a model defined in OpenAPI

        :param activation_duration_minutes: The activation_duration_minutes of this ManualTrigger.
        :param advertiser_id: The advertiser_id of this ManualTrigger.
        :param display_name: The display_name of this ManualTrigger.
        :param latest_activation_time: The latest_activation_time of this ManualTrigger.
        :param name: The name of this ManualTrigger.
        :param state: The state of this ManualTrigger.
        :param trigger_id: The trigger_id of this ManualTrigger.
        """
        self.openapi_types = {
            'activation_duration_minutes': str,
            'advertiser_id': str,
            'display_name': str,
            'latest_activation_time': str,
            'name': str,
            'state': str,
            'trigger_id': str
        }

        self.attribute_map = {
            'activation_duration_minutes': 'activationDurationMinutes',
            'advertiser_id': 'advertiserId',
            'display_name': 'displayName',
            'latest_activation_time': 'latestActivationTime',
            'name': 'name',
            'state': 'state',
            'trigger_id': 'triggerId'
        }

        self._activation_duration_minutes = activation_duration_minutes
        self._advertiser_id = advertiser_id
        self._display_name = display_name
        self._latest_activation_time = latest_activation_time
        self._name = name
        self._state = state
        self._trigger_id = trigger_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManualTrigger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManualTrigger of this ManualTrigger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_duration_minutes(self):
        """Gets the activation_duration_minutes of this ManualTrigger.

        Required. The maximum duration of each activation in minutes. Must be between 1 and 360 inclusive. After this duration, the trigger will be automatically deactivated.

        :return: The activation_duration_minutes of this ManualTrigger.
        :rtype: str
        """
        return self._activation_duration_minutes

    @activation_duration_minutes.setter
    def activation_duration_minutes(self, activation_duration_minutes):
        """Sets the activation_duration_minutes of this ManualTrigger.

        Required. The maximum duration of each activation in minutes. Must be between 1 and 360 inclusive. After this duration, the trigger will be automatically deactivated.

        :param activation_duration_minutes: The activation_duration_minutes of this ManualTrigger.
        :type activation_duration_minutes: str
        """

        self._activation_duration_minutes = activation_duration_minutes

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this ManualTrigger.

        Required. Immutable. The unique ID of the advertiser that the manual trigger belongs to.

        :return: The advertiser_id of this ManualTrigger.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this ManualTrigger.

        Required. Immutable. The unique ID of the advertiser that the manual trigger belongs to.

        :param advertiser_id: The advertiser_id of this ManualTrigger.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def display_name(self):
        """Gets the display_name of this ManualTrigger.

        Required. The display name of the manual trigger. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :return: The display_name of this ManualTrigger.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ManualTrigger.

        Required. The display name of the manual trigger. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :param display_name: The display_name of this ManualTrigger.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def latest_activation_time(self):
        """Gets the latest_activation_time of this ManualTrigger.

        Output only. The timestamp of the trigger's latest activation.

        :return: The latest_activation_time of this ManualTrigger.
        :rtype: str
        """
        return self._latest_activation_time

    @latest_activation_time.setter
    def latest_activation_time(self, latest_activation_time):
        """Sets the latest_activation_time of this ManualTrigger.

        Output only. The timestamp of the trigger's latest activation.

        :param latest_activation_time: The latest_activation_time of this ManualTrigger.
        :type latest_activation_time: str
        """

        self._latest_activation_time = latest_activation_time

    @property
    def name(self):
        """Gets the name of this ManualTrigger.

        Output only. The resource name of the manual trigger.

        :return: The name of this ManualTrigger.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManualTrigger.

        Output only. The resource name of the manual trigger.

        :param name: The name of this ManualTrigger.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this ManualTrigger.

        Output only. The state of the manual trigger. Will be set to the `INACTIVE` state upon creation.

        :return: The state of this ManualTrigger.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ManualTrigger.

        Output only. The state of the manual trigger. Will be set to the `INACTIVE` state upon creation.

        :param state: The state of this ManualTrigger.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "INACTIVE", "ACTIVE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def trigger_id(self):
        """Gets the trigger_id of this ManualTrigger.

        Output only. The unique ID of the manual trigger.

        :return: The trigger_id of this ManualTrigger.
        :rtype: str
        """
        return self._trigger_id

    @trigger_id.setter
    def trigger_id(self, trigger_id):
        """Sets the trigger_id of this ManualTrigger.

        Output only. The unique ID of the manual trigger.

        :param trigger_id: The trigger_id of this ManualTrigger.
        :type trigger_id: str
        """

        self._trigger_id = trigger_id
