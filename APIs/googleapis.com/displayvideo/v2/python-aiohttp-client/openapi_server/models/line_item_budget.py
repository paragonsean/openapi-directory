# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LineItemBudget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, budget_allocation_type: str=None, budget_unit: str=None, max_amount: str=None):
        """LineItemBudget - a model defined in OpenAPI

        :param budget_allocation_type: The budget_allocation_type of this LineItemBudget.
        :param budget_unit: The budget_unit of this LineItemBudget.
        :param max_amount: The max_amount of this LineItemBudget.
        """
        self.openapi_types = {
            'budget_allocation_type': str,
            'budget_unit': str,
            'max_amount': str
        }

        self.attribute_map = {
            'budget_allocation_type': 'budgetAllocationType',
            'budget_unit': 'budgetUnit',
            'max_amount': 'maxAmount'
        }

        self._budget_allocation_type = budget_allocation_type
        self._budget_unit = budget_unit
        self._max_amount = max_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineItemBudget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineItemBudget of this LineItemBudget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def budget_allocation_type(self):
        """Gets the budget_allocation_type of this LineItemBudget.

        Required. The type of the budget allocation. `LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC` is only applicable when automatic budget allocation is enabled for the parent insertion order.

        :return: The budget_allocation_type of this LineItemBudget.
        :rtype: str
        """
        return self._budget_allocation_type

    @budget_allocation_type.setter
    def budget_allocation_type(self, budget_allocation_type):
        """Sets the budget_allocation_type of this LineItemBudget.

        Required. The type of the budget allocation. `LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC` is only applicable when automatic budget allocation is enabled for the parent insertion order.

        :param budget_allocation_type: The budget_allocation_type of this LineItemBudget.
        :type budget_allocation_type: str
        """
        allowed_values = ["LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNSPECIFIED", "LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC", "LINE_ITEM_BUDGET_ALLOCATION_TYPE_FIXED", "LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNLIMITED"]  # noqa: E501
        if budget_allocation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `budget_allocation_type` ({0}), must be one of {1}"
                .format(budget_allocation_type, allowed_values)
            )

        self._budget_allocation_type = budget_allocation_type

    @property
    def budget_unit(self):
        """Gets the budget_unit of this LineItemBudget.

        Output only. The budget unit specifies whether the budget is currency based or impression based. This value is inherited from the parent insertion order.

        :return: The budget_unit of this LineItemBudget.
        :rtype: str
        """
        return self._budget_unit

    @budget_unit.setter
    def budget_unit(self, budget_unit):
        """Sets the budget_unit of this LineItemBudget.

        Output only. The budget unit specifies whether the budget is currency based or impression based. This value is inherited from the parent insertion order.

        :param budget_unit: The budget_unit of this LineItemBudget.
        :type budget_unit: str
        """
        allowed_values = ["BUDGET_UNIT_UNSPECIFIED", "BUDGET_UNIT_CURRENCY", "BUDGET_UNIT_IMPRESSIONS"]  # noqa: E501
        if budget_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `budget_unit` ({0}), must be one of {1}"
                .format(budget_unit, allowed_values)
            )

        self._budget_unit = budget_unit

    @property
    def max_amount(self):
        """Gets the max_amount of this LineItemBudget.

        The maximum budget amount the line item will spend. Must be greater than 0. When budget_allocation_type is: * `LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC`, this field is immutable and is set by the system. * `LINE_ITEM_BUDGET_ALLOCATION_TYPE_FIXED`, if budget_unit is: - `BUDGET_UNIT_CURRENCY`, this field represents maximum budget amount to spend, in micros of the advertiser's currency. For example, 1500000 represents 1.5 standard units of the currency. - `BUDGET_UNIT_IMPRESSIONS`, this field represents the maximum number of impressions to serve. * `LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNLIMITED`, this field is not applicable and will be ignored by the system.

        :return: The max_amount of this LineItemBudget.
        :rtype: str
        """
        return self._max_amount

    @max_amount.setter
    def max_amount(self, max_amount):
        """Sets the max_amount of this LineItemBudget.

        The maximum budget amount the line item will spend. Must be greater than 0. When budget_allocation_type is: * `LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC`, this field is immutable and is set by the system. * `LINE_ITEM_BUDGET_ALLOCATION_TYPE_FIXED`, if budget_unit is: - `BUDGET_UNIT_CURRENCY`, this field represents maximum budget amount to spend, in micros of the advertiser's currency. For example, 1500000 represents 1.5 standard units of the currency. - `BUDGET_UNIT_IMPRESSIONS`, this field represents the maximum number of impressions to serve. * `LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNLIMITED`, this field is not applicable and will be ignored by the system.

        :param max_amount: The max_amount of this LineItemBudget.
        :type max_amount: str
        """

        self._max_amount = max_amount
