# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class YoutubeChannelAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, negative: bool=None):
        """YoutubeChannelAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param channel_id: The channel_id of this YoutubeChannelAssignedTargetingOptionDetails.
        :param negative: The negative of this YoutubeChannelAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'channel_id': str,
            'negative': bool
        }

        self.attribute_map = {
            'channel_id': 'channelId',
            'negative': 'negative'
        }

        self._channel_id = channel_id
        self._negative = negative

    @classmethod
    def from_dict(cls, dikt: dict) -> 'YoutubeChannelAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The YoutubeChannelAssignedTargetingOptionDetails of this YoutubeChannelAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this YoutubeChannelAssignedTargetingOptionDetails.

        The YouTube uploader channel id or the channel code of a YouTube channel.

        :return: The channel_id of this YoutubeChannelAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this YoutubeChannelAssignedTargetingOptionDetails.

        The YouTube uploader channel id or the channel code of a YouTube channel.

        :param channel_id: The channel_id of this YoutubeChannelAssignedTargetingOptionDetails.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def negative(self):
        """Gets the negative of this YoutubeChannelAssignedTargetingOptionDetails.

        Indicates if this option is being negatively targeted.

        :return: The negative of this YoutubeChannelAssignedTargetingOptionDetails.
        :rtype: bool
        """
        return self._negative

    @negative.setter
    def negative(self, negative):
        """Sets the negative of this YoutubeChannelAssignedTargetingOptionDetails.

        Indicates if this option is being negatively targeted.

        :param negative: The negative of this YoutubeChannelAssignedTargetingOptionDetails.
        :type negative: bool
        """

        self._negative = negative
