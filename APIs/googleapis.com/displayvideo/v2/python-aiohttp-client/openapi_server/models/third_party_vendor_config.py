# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThirdPartyVendorConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, placement_id: str=None, vendor: str=None):
        """ThirdPartyVendorConfig - a model defined in OpenAPI

        :param placement_id: The placement_id of this ThirdPartyVendorConfig.
        :param vendor: The vendor of this ThirdPartyVendorConfig.
        """
        self.openapi_types = {
            'placement_id': str,
            'vendor': str
        }

        self.attribute_map = {
            'placement_id': 'placementId',
            'vendor': 'vendor'
        }

        self._placement_id = placement_id
        self._vendor = vendor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThirdPartyVendorConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThirdPartyVendorConfig of this ThirdPartyVendorConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def placement_id(self):
        """Gets the placement_id of this ThirdPartyVendorConfig.

        The ID used by the platform of the third-party vendor to identify the line item.

        :return: The placement_id of this ThirdPartyVendorConfig.
        :rtype: str
        """
        return self._placement_id

    @placement_id.setter
    def placement_id(self, placement_id):
        """Sets the placement_id of this ThirdPartyVendorConfig.

        The ID used by the platform of the third-party vendor to identify the line item.

        :param placement_id: The placement_id of this ThirdPartyVendorConfig.
        :type placement_id: str
        """

        self._placement_id = placement_id

    @property
    def vendor(self):
        """Gets the vendor of this ThirdPartyVendorConfig.

        The third-party measurement vendor.

        :return: The vendor of this ThirdPartyVendorConfig.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this ThirdPartyVendorConfig.

        The third-party measurement vendor.

        :param vendor: The vendor of this ThirdPartyVendorConfig.
        :type vendor: str
        """
        allowed_values = ["THIRD_PARTY_VENDOR_UNSPECIFIED", "THIRD_PARTY_VENDOR_MOAT", "THIRD_PARTY_VENDOR_DOUBLE_VERIFY", "THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE", "THIRD_PARTY_VENDOR_COMSCORE", "THIRD_PARTY_VENDOR_TELEMETRY", "THIRD_PARTY_VENDOR_MEETRICS", "THIRD_PARTY_VENDOR_ZEFR", "THIRD_PARTY_VENDOR_NIELSEN", "THIRD_PARTY_VENDOR_KANTAR", "THIRD_PARTY_VENDOR_DYNATA"]  # noqa: E501
        if vendor not in allowed_values:
            raise ValueError(
                "Invalid value for `vendor` ({0}), must be one of {1}"
                .format(vendor, allowed_values)
            )

        self._vendor = vendor
