# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IntegralAdScience(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_segment_id: List[str]=None, display_viewability: str=None, exclude_unrateable: bool=None, excluded_ad_fraud_risk: str=None, excluded_adult_risk: str=None, excluded_alcohol_risk: str=None, excluded_drugs_risk: str=None, excluded_gambling_risk: str=None, excluded_hate_speech_risk: str=None, excluded_illegal_downloads_risk: str=None, excluded_offensive_language_risk: str=None, excluded_violence_risk: str=None, traq_score_option: str=None, video_viewability: str=None):
        """IntegralAdScience - a model defined in OpenAPI

        :param custom_segment_id: The custom_segment_id of this IntegralAdScience.
        :param display_viewability: The display_viewability of this IntegralAdScience.
        :param exclude_unrateable: The exclude_unrateable of this IntegralAdScience.
        :param excluded_ad_fraud_risk: The excluded_ad_fraud_risk of this IntegralAdScience.
        :param excluded_adult_risk: The excluded_adult_risk of this IntegralAdScience.
        :param excluded_alcohol_risk: The excluded_alcohol_risk of this IntegralAdScience.
        :param excluded_drugs_risk: The excluded_drugs_risk of this IntegralAdScience.
        :param excluded_gambling_risk: The excluded_gambling_risk of this IntegralAdScience.
        :param excluded_hate_speech_risk: The excluded_hate_speech_risk of this IntegralAdScience.
        :param excluded_illegal_downloads_risk: The excluded_illegal_downloads_risk of this IntegralAdScience.
        :param excluded_offensive_language_risk: The excluded_offensive_language_risk of this IntegralAdScience.
        :param excluded_violence_risk: The excluded_violence_risk of this IntegralAdScience.
        :param traq_score_option: The traq_score_option of this IntegralAdScience.
        :param video_viewability: The video_viewability of this IntegralAdScience.
        """
        self.openapi_types = {
            'custom_segment_id': List[str],
            'display_viewability': str,
            'exclude_unrateable': bool,
            'excluded_ad_fraud_risk': str,
            'excluded_adult_risk': str,
            'excluded_alcohol_risk': str,
            'excluded_drugs_risk': str,
            'excluded_gambling_risk': str,
            'excluded_hate_speech_risk': str,
            'excluded_illegal_downloads_risk': str,
            'excluded_offensive_language_risk': str,
            'excluded_violence_risk': str,
            'traq_score_option': str,
            'video_viewability': str
        }

        self.attribute_map = {
            'custom_segment_id': 'customSegmentId',
            'display_viewability': 'displayViewability',
            'exclude_unrateable': 'excludeUnrateable',
            'excluded_ad_fraud_risk': 'excludedAdFraudRisk',
            'excluded_adult_risk': 'excludedAdultRisk',
            'excluded_alcohol_risk': 'excludedAlcoholRisk',
            'excluded_drugs_risk': 'excludedDrugsRisk',
            'excluded_gambling_risk': 'excludedGamblingRisk',
            'excluded_hate_speech_risk': 'excludedHateSpeechRisk',
            'excluded_illegal_downloads_risk': 'excludedIllegalDownloadsRisk',
            'excluded_offensive_language_risk': 'excludedOffensiveLanguageRisk',
            'excluded_violence_risk': 'excludedViolenceRisk',
            'traq_score_option': 'traqScoreOption',
            'video_viewability': 'videoViewability'
        }

        self._custom_segment_id = custom_segment_id
        self._display_viewability = display_viewability
        self._exclude_unrateable = exclude_unrateable
        self._excluded_ad_fraud_risk = excluded_ad_fraud_risk
        self._excluded_adult_risk = excluded_adult_risk
        self._excluded_alcohol_risk = excluded_alcohol_risk
        self._excluded_drugs_risk = excluded_drugs_risk
        self._excluded_gambling_risk = excluded_gambling_risk
        self._excluded_hate_speech_risk = excluded_hate_speech_risk
        self._excluded_illegal_downloads_risk = excluded_illegal_downloads_risk
        self._excluded_offensive_language_risk = excluded_offensive_language_risk
        self._excluded_violence_risk = excluded_violence_risk
        self._traq_score_option = traq_score_option
        self._video_viewability = video_viewability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntegralAdScience':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntegralAdScience of this IntegralAdScience.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_segment_id(self):
        """Gets the custom_segment_id of this IntegralAdScience.

        The custom segment ID provided by Integral Ad Science. The ID must be between `1000001` and `1999999`, inclusive.

        :return: The custom_segment_id of this IntegralAdScience.
        :rtype: List[str]
        """
        return self._custom_segment_id

    @custom_segment_id.setter
    def custom_segment_id(self, custom_segment_id):
        """Sets the custom_segment_id of this IntegralAdScience.

        The custom segment ID provided by Integral Ad Science. The ID must be between `1000001` and `1999999`, inclusive.

        :param custom_segment_id: The custom_segment_id of this IntegralAdScience.
        :type custom_segment_id: List[str]
        """

        self._custom_segment_id = custom_segment_id

    @property
    def display_viewability(self):
        """Gets the display_viewability of this IntegralAdScience.

        Display Viewability section (applicable to display line items only).

        :return: The display_viewability of this IntegralAdScience.
        :rtype: str
        """
        return self._display_viewability

    @display_viewability.setter
    def display_viewability(self, display_viewability):
        """Sets the display_viewability of this IntegralAdScience.

        Display Viewability section (applicable to display line items only).

        :param display_viewability: The display_viewability of this IntegralAdScience.
        :type display_viewability: str
        """
        allowed_values = ["PERFORMANCE_VIEWABILITY_UNSPECIFIED", "PERFORMANCE_VIEWABILITY_40", "PERFORMANCE_VIEWABILITY_50", "PERFORMANCE_VIEWABILITY_60", "PERFORMANCE_VIEWABILITY_70"]  # noqa: E501
        if display_viewability not in allowed_values:
            raise ValueError(
                "Invalid value for `display_viewability` ({0}), must be one of {1}"
                .format(display_viewability, allowed_values)
            )

        self._display_viewability = display_viewability

    @property
    def exclude_unrateable(self):
        """Gets the exclude_unrateable of this IntegralAdScience.

        Brand Safety - **Unrateable**.

        :return: The exclude_unrateable of this IntegralAdScience.
        :rtype: bool
        """
        return self._exclude_unrateable

    @exclude_unrateable.setter
    def exclude_unrateable(self, exclude_unrateable):
        """Sets the exclude_unrateable of this IntegralAdScience.

        Brand Safety - **Unrateable**.

        :param exclude_unrateable: The exclude_unrateable of this IntegralAdScience.
        :type exclude_unrateable: bool
        """

        self._exclude_unrateable = exclude_unrateable

    @property
    def excluded_ad_fraud_risk(self):
        """Gets the excluded_ad_fraud_risk of this IntegralAdScience.

        Ad Fraud settings.

        :return: The excluded_ad_fraud_risk of this IntegralAdScience.
        :rtype: str
        """
        return self._excluded_ad_fraud_risk

    @excluded_ad_fraud_risk.setter
    def excluded_ad_fraud_risk(self, excluded_ad_fraud_risk):
        """Sets the excluded_ad_fraud_risk of this IntegralAdScience.

        Ad Fraud settings.

        :param excluded_ad_fraud_risk: The excluded_ad_fraud_risk of this IntegralAdScience.
        :type excluded_ad_fraud_risk: str
        """
        allowed_values = ["SUSPICIOUS_ACTIVITY_UNSPECIFIED", "SUSPICIOUS_ACTIVITY_HR", "SUSPICIOUS_ACTIVITY_HMR"]  # noqa: E501
        if excluded_ad_fraud_risk not in allowed_values:
            raise ValueError(
                "Invalid value for `excluded_ad_fraud_risk` ({0}), must be one of {1}"
                .format(excluded_ad_fraud_risk, allowed_values)
            )

        self._excluded_ad_fraud_risk = excluded_ad_fraud_risk

    @property
    def excluded_adult_risk(self):
        """Gets the excluded_adult_risk of this IntegralAdScience.

        Brand Safety - **Adult content**.

        :return: The excluded_adult_risk of this IntegralAdScience.
        :rtype: str
        """
        return self._excluded_adult_risk

    @excluded_adult_risk.setter
    def excluded_adult_risk(self, excluded_adult_risk):
        """Sets the excluded_adult_risk of this IntegralAdScience.

        Brand Safety - **Adult content**.

        :param excluded_adult_risk: The excluded_adult_risk of this IntegralAdScience.
        :type excluded_adult_risk: str
        """
        allowed_values = ["ADULT_UNSPECIFIED", "ADULT_HR", "ADULT_HMR"]  # noqa: E501
        if excluded_adult_risk not in allowed_values:
            raise ValueError(
                "Invalid value for `excluded_adult_risk` ({0}), must be one of {1}"
                .format(excluded_adult_risk, allowed_values)
            )

        self._excluded_adult_risk = excluded_adult_risk

    @property
    def excluded_alcohol_risk(self):
        """Gets the excluded_alcohol_risk of this IntegralAdScience.

        Brand Safety - **Alcohol**.

        :return: The excluded_alcohol_risk of this IntegralAdScience.
        :rtype: str
        """
        return self._excluded_alcohol_risk

    @excluded_alcohol_risk.setter
    def excluded_alcohol_risk(self, excluded_alcohol_risk):
        """Sets the excluded_alcohol_risk of this IntegralAdScience.

        Brand Safety - **Alcohol**.

        :param excluded_alcohol_risk: The excluded_alcohol_risk of this IntegralAdScience.
        :type excluded_alcohol_risk: str
        """
        allowed_values = ["ALCOHOL_UNSPECIFIED", "ALCOHOL_HR", "ALCOHOL_HMR"]  # noqa: E501
        if excluded_alcohol_risk not in allowed_values:
            raise ValueError(
                "Invalid value for `excluded_alcohol_risk` ({0}), must be one of {1}"
                .format(excluded_alcohol_risk, allowed_values)
            )

        self._excluded_alcohol_risk = excluded_alcohol_risk

    @property
    def excluded_drugs_risk(self):
        """Gets the excluded_drugs_risk of this IntegralAdScience.

        Brand Safety - **Drugs**.

        :return: The excluded_drugs_risk of this IntegralAdScience.
        :rtype: str
        """
        return self._excluded_drugs_risk

    @excluded_drugs_risk.setter
    def excluded_drugs_risk(self, excluded_drugs_risk):
        """Sets the excluded_drugs_risk of this IntegralAdScience.

        Brand Safety - **Drugs**.

        :param excluded_drugs_risk: The excluded_drugs_risk of this IntegralAdScience.
        :type excluded_drugs_risk: str
        """
        allowed_values = ["DRUGS_UNSPECIFIED", "DRUGS_HR", "DRUGS_HMR"]  # noqa: E501
        if excluded_drugs_risk not in allowed_values:
            raise ValueError(
                "Invalid value for `excluded_drugs_risk` ({0}), must be one of {1}"
                .format(excluded_drugs_risk, allowed_values)
            )

        self._excluded_drugs_risk = excluded_drugs_risk

    @property
    def excluded_gambling_risk(self):
        """Gets the excluded_gambling_risk of this IntegralAdScience.

        Brand Safety - **Gambling**.

        :return: The excluded_gambling_risk of this IntegralAdScience.
        :rtype: str
        """
        return self._excluded_gambling_risk

    @excluded_gambling_risk.setter
    def excluded_gambling_risk(self, excluded_gambling_risk):
        """Sets the excluded_gambling_risk of this IntegralAdScience.

        Brand Safety - **Gambling**.

        :param excluded_gambling_risk: The excluded_gambling_risk of this IntegralAdScience.
        :type excluded_gambling_risk: str
        """
        allowed_values = ["GAMBLING_UNSPECIFIED", "GAMBLING_HR", "GAMBLING_HMR"]  # noqa: E501
        if excluded_gambling_risk not in allowed_values:
            raise ValueError(
                "Invalid value for `excluded_gambling_risk` ({0}), must be one of {1}"
                .format(excluded_gambling_risk, allowed_values)
            )

        self._excluded_gambling_risk = excluded_gambling_risk

    @property
    def excluded_hate_speech_risk(self):
        """Gets the excluded_hate_speech_risk of this IntegralAdScience.

        Brand Safety - **Hate speech**.

        :return: The excluded_hate_speech_risk of this IntegralAdScience.
        :rtype: str
        """
        return self._excluded_hate_speech_risk

    @excluded_hate_speech_risk.setter
    def excluded_hate_speech_risk(self, excluded_hate_speech_risk):
        """Sets the excluded_hate_speech_risk of this IntegralAdScience.

        Brand Safety - **Hate speech**.

        :param excluded_hate_speech_risk: The excluded_hate_speech_risk of this IntegralAdScience.
        :type excluded_hate_speech_risk: str
        """
        allowed_values = ["HATE_SPEECH_UNSPECIFIED", "HATE_SPEECH_HR", "HATE_SPEECH_HMR"]  # noqa: E501
        if excluded_hate_speech_risk not in allowed_values:
            raise ValueError(
                "Invalid value for `excluded_hate_speech_risk` ({0}), must be one of {1}"
                .format(excluded_hate_speech_risk, allowed_values)
            )

        self._excluded_hate_speech_risk = excluded_hate_speech_risk

    @property
    def excluded_illegal_downloads_risk(self):
        """Gets the excluded_illegal_downloads_risk of this IntegralAdScience.

        Brand Safety - **Illegal downloads**.

        :return: The excluded_illegal_downloads_risk of this IntegralAdScience.
        :rtype: str
        """
        return self._excluded_illegal_downloads_risk

    @excluded_illegal_downloads_risk.setter
    def excluded_illegal_downloads_risk(self, excluded_illegal_downloads_risk):
        """Sets the excluded_illegal_downloads_risk of this IntegralAdScience.

        Brand Safety - **Illegal downloads**.

        :param excluded_illegal_downloads_risk: The excluded_illegal_downloads_risk of this IntegralAdScience.
        :type excluded_illegal_downloads_risk: str
        """
        allowed_values = ["ILLEGAL_DOWNLOADS_UNSPECIFIED", "ILLEGAL_DOWNLOADS_HR", "ILLEGAL_DOWNLOADS_HMR"]  # noqa: E501
        if excluded_illegal_downloads_risk not in allowed_values:
            raise ValueError(
                "Invalid value for `excluded_illegal_downloads_risk` ({0}), must be one of {1}"
                .format(excluded_illegal_downloads_risk, allowed_values)
            )

        self._excluded_illegal_downloads_risk = excluded_illegal_downloads_risk

    @property
    def excluded_offensive_language_risk(self):
        """Gets the excluded_offensive_language_risk of this IntegralAdScience.

        Brand Safety - **Offensive language**.

        :return: The excluded_offensive_language_risk of this IntegralAdScience.
        :rtype: str
        """
        return self._excluded_offensive_language_risk

    @excluded_offensive_language_risk.setter
    def excluded_offensive_language_risk(self, excluded_offensive_language_risk):
        """Sets the excluded_offensive_language_risk of this IntegralAdScience.

        Brand Safety - **Offensive language**.

        :param excluded_offensive_language_risk: The excluded_offensive_language_risk of this IntegralAdScience.
        :type excluded_offensive_language_risk: str
        """
        allowed_values = ["OFFENSIVE_LANGUAGE_UNSPECIFIED", "OFFENSIVE_LANGUAGE_HR", "OFFENSIVE_LANGUAGE_HMR"]  # noqa: E501
        if excluded_offensive_language_risk not in allowed_values:
            raise ValueError(
                "Invalid value for `excluded_offensive_language_risk` ({0}), must be one of {1}"
                .format(excluded_offensive_language_risk, allowed_values)
            )

        self._excluded_offensive_language_risk = excluded_offensive_language_risk

    @property
    def excluded_violence_risk(self):
        """Gets the excluded_violence_risk of this IntegralAdScience.

        Brand Safety - **Violence**.

        :return: The excluded_violence_risk of this IntegralAdScience.
        :rtype: str
        """
        return self._excluded_violence_risk

    @excluded_violence_risk.setter
    def excluded_violence_risk(self, excluded_violence_risk):
        """Sets the excluded_violence_risk of this IntegralAdScience.

        Brand Safety - **Violence**.

        :param excluded_violence_risk: The excluded_violence_risk of this IntegralAdScience.
        :type excluded_violence_risk: str
        """
        allowed_values = ["VIOLENCE_UNSPECIFIED", "VIOLENCE_HR", "VIOLENCE_HMR"]  # noqa: E501
        if excluded_violence_risk not in allowed_values:
            raise ValueError(
                "Invalid value for `excluded_violence_risk` ({0}), must be one of {1}"
                .format(excluded_violence_risk, allowed_values)
            )

        self._excluded_violence_risk = excluded_violence_risk

    @property
    def traq_score_option(self):
        """Gets the traq_score_option of this IntegralAdScience.

        True advertising quality (applicable to Display line items only).

        :return: The traq_score_option of this IntegralAdScience.
        :rtype: str
        """
        return self._traq_score_option

    @traq_score_option.setter
    def traq_score_option(self, traq_score_option):
        """Sets the traq_score_option of this IntegralAdScience.

        True advertising quality (applicable to Display line items only).

        :param traq_score_option: The traq_score_option of this IntegralAdScience.
        :type traq_score_option: str
        """
        allowed_values = ["TRAQ_UNSPECIFIED", "TRAQ_250", "TRAQ_500", "TRAQ_600", "TRAQ_700", "TRAQ_750", "TRAQ_875", "TRAQ_1000"]  # noqa: E501
        if traq_score_option not in allowed_values:
            raise ValueError(
                "Invalid value for `traq_score_option` ({0}), must be one of {1}"
                .format(traq_score_option, allowed_values)
            )

        self._traq_score_option = traq_score_option

    @property
    def video_viewability(self):
        """Gets the video_viewability of this IntegralAdScience.

        Video Viewability Section (applicable to video line items only).

        :return: The video_viewability of this IntegralAdScience.
        :rtype: str
        """
        return self._video_viewability

    @video_viewability.setter
    def video_viewability(self, video_viewability):
        """Sets the video_viewability of this IntegralAdScience.

        Video Viewability Section (applicable to video line items only).

        :param video_viewability: The video_viewability of this IntegralAdScience.
        :type video_viewability: str
        """
        allowed_values = ["VIDEO_VIEWABILITY_UNSPECIFIED", "VIDEO_VIEWABILITY_40", "VIDEO_VIEWABILITY_50", "VIDEO_VIEWABILITY_60", "VIDEO_VIEWABILITY_70"]  # noqa: E501
        if video_viewability not in allowed_values:
            raise ValueError(
                "Invalid value for `video_viewability` ({0}), must be one of {1}"
                .format(video_viewability, allowed_values)
            )

        self._video_viewability = video_viewability
