# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prisma_cpe_code import PrismaCpeCode
from openapi_server import util


class BudgetSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_budget_id: str=None, pre_tax_amount_micros: str=None, prisma_cpe_code: PrismaCpeCode=None, tax_amount_micros: str=None, total_amount_micros: str=None):
        """BudgetSummary - a model defined in OpenAPI

        :param external_budget_id: The external_budget_id of this BudgetSummary.
        :param pre_tax_amount_micros: The pre_tax_amount_micros of this BudgetSummary.
        :param prisma_cpe_code: The prisma_cpe_code of this BudgetSummary.
        :param tax_amount_micros: The tax_amount_micros of this BudgetSummary.
        :param total_amount_micros: The total_amount_micros of this BudgetSummary.
        """
        self.openapi_types = {
            'external_budget_id': str,
            'pre_tax_amount_micros': str,
            'prisma_cpe_code': PrismaCpeCode,
            'tax_amount_micros': str,
            'total_amount_micros': str
        }

        self.attribute_map = {
            'external_budget_id': 'externalBudgetId',
            'pre_tax_amount_micros': 'preTaxAmountMicros',
            'prisma_cpe_code': 'prismaCpeCode',
            'tax_amount_micros': 'taxAmountMicros',
            'total_amount_micros': 'totalAmountMicros'
        }

        self._external_budget_id = external_budget_id
        self._pre_tax_amount_micros = pre_tax_amount_micros
        self._prisma_cpe_code = prisma_cpe_code
        self._tax_amount_micros = tax_amount_micros
        self._total_amount_micros = total_amount_micros

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BudgetSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BudgetSummary of this BudgetSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_budget_id(self):
        """Gets the external_budget_id of this BudgetSummary.

        Corresponds to the external_budget_id of a campaign budget. If the value is not set in the campaign budget, this field will be empty.

        :return: The external_budget_id of this BudgetSummary.
        :rtype: str
        """
        return self._external_budget_id

    @external_budget_id.setter
    def external_budget_id(self, external_budget_id):
        """Sets the external_budget_id of this BudgetSummary.

        Corresponds to the external_budget_id of a campaign budget. If the value is not set in the campaign budget, this field will be empty.

        :param external_budget_id: The external_budget_id of this BudgetSummary.
        :type external_budget_id: str
        """

        self._external_budget_id = external_budget_id

    @property
    def pre_tax_amount_micros(self):
        """Gets the pre_tax_amount_micros of this BudgetSummary.

        The sum of charges made under this budget before taxes, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.

        :return: The pre_tax_amount_micros of this BudgetSummary.
        :rtype: str
        """
        return self._pre_tax_amount_micros

    @pre_tax_amount_micros.setter
    def pre_tax_amount_micros(self, pre_tax_amount_micros):
        """Sets the pre_tax_amount_micros of this BudgetSummary.

        The sum of charges made under this budget before taxes, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.

        :param pre_tax_amount_micros: The pre_tax_amount_micros of this BudgetSummary.
        :type pre_tax_amount_micros: str
        """

        self._pre_tax_amount_micros = pre_tax_amount_micros

    @property
    def prisma_cpe_code(self):
        """Gets the prisma_cpe_code of this BudgetSummary.


        :return: The prisma_cpe_code of this BudgetSummary.
        :rtype: PrismaCpeCode
        """
        return self._prisma_cpe_code

    @prisma_cpe_code.setter
    def prisma_cpe_code(self, prisma_cpe_code):
        """Sets the prisma_cpe_code of this BudgetSummary.


        :param prisma_cpe_code: The prisma_cpe_code of this BudgetSummary.
        :type prisma_cpe_code: PrismaCpeCode
        """

        self._prisma_cpe_code = prisma_cpe_code

    @property
    def tax_amount_micros(self):
        """Gets the tax_amount_micros of this BudgetSummary.

        The amount of tax applied to charges under this budget, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.

        :return: The tax_amount_micros of this BudgetSummary.
        :rtype: str
        """
        return self._tax_amount_micros

    @tax_amount_micros.setter
    def tax_amount_micros(self, tax_amount_micros):
        """Sets the tax_amount_micros of this BudgetSummary.

        The amount of tax applied to charges under this budget, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.

        :param tax_amount_micros: The tax_amount_micros of this BudgetSummary.
        :type tax_amount_micros: str
        """

        self._tax_amount_micros = tax_amount_micros

    @property
    def total_amount_micros(self):
        """Gets the total_amount_micros of this BudgetSummary.

        The total sum of charges made under this budget, including tax, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.

        :return: The total_amount_micros of this BudgetSummary.
        :rtype: str
        """
        return self._total_amount_micros

    @total_amount_micros.setter
    def total_amount_micros(self, total_amount_micros):
        """Sets the total_amount_micros of this BudgetSummary.

        The total sum of charges made under this budget, including tax, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.

        :param total_amount_micros: The total_amount_micros of this BudgetSummary.
        :type total_amount_micros: str
        """

        self._total_amount_micros = total_amount_micros
