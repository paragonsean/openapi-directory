# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MeasurementConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dv360_to_cm_cost_reporting_enabled: bool=None, dv360_to_cm_data_sharing_enabled: bool=None):
        """MeasurementConfig - a model defined in OpenAPI

        :param dv360_to_cm_cost_reporting_enabled: The dv360_to_cm_cost_reporting_enabled of this MeasurementConfig.
        :param dv360_to_cm_data_sharing_enabled: The dv360_to_cm_data_sharing_enabled of this MeasurementConfig.
        """
        self.openapi_types = {
            'dv360_to_cm_cost_reporting_enabled': bool,
            'dv360_to_cm_data_sharing_enabled': bool
        }

        self.attribute_map = {
            'dv360_to_cm_cost_reporting_enabled': 'dv360ToCmCostReportingEnabled',
            'dv360_to_cm_data_sharing_enabled': 'dv360ToCmDataSharingEnabled'
        }

        self._dv360_to_cm_cost_reporting_enabled = dv360_to_cm_cost_reporting_enabled
        self._dv360_to_cm_data_sharing_enabled = dv360_to_cm_data_sharing_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeasurementConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MeasurementConfig of this MeasurementConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dv360_to_cm_cost_reporting_enabled(self):
        """Gets the dv360_to_cm_cost_reporting_enabled of this MeasurementConfig.

        Whether or not to report DV360 cost to CM360.

        :return: The dv360_to_cm_cost_reporting_enabled of this MeasurementConfig.
        :rtype: bool
        """
        return self._dv360_to_cm_cost_reporting_enabled

    @dv360_to_cm_cost_reporting_enabled.setter
    def dv360_to_cm_cost_reporting_enabled(self, dv360_to_cm_cost_reporting_enabled):
        """Sets the dv360_to_cm_cost_reporting_enabled of this MeasurementConfig.

        Whether or not to report DV360 cost to CM360.

        :param dv360_to_cm_cost_reporting_enabled: The dv360_to_cm_cost_reporting_enabled of this MeasurementConfig.
        :type dv360_to_cm_cost_reporting_enabled: bool
        """

        self._dv360_to_cm_cost_reporting_enabled = dv360_to_cm_cost_reporting_enabled

    @property
    def dv360_to_cm_data_sharing_enabled(self):
        """Gets the dv360_to_cm_data_sharing_enabled of this MeasurementConfig.

        Whether or not to include DV360 data in CM360 data transfer reports.

        :return: The dv360_to_cm_data_sharing_enabled of this MeasurementConfig.
        :rtype: bool
        """
        return self._dv360_to_cm_data_sharing_enabled

    @dv360_to_cm_data_sharing_enabled.setter
    def dv360_to_cm_data_sharing_enabled(self, dv360_to_cm_data_sharing_enabled):
        """Sets the dv360_to_cm_data_sharing_enabled of this MeasurementConfig.

        Whether or not to include DV360 data in CM360 data transfer reports.

        :param dv360_to_cm_data_sharing_enabled: The dv360_to_cm_data_sharing_enabled of this MeasurementConfig.
        :type dv360_to_cm_data_sharing_enabled: bool
        """

        self._dv360_to_cm_data_sharing_enabled = dv360_to_cm_data_sharing_enabled
