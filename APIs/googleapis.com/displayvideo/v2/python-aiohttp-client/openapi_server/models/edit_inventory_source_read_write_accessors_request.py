# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.edit_inventory_source_read_write_accessors_request_advertisers_update import EditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate
from openapi_server import util


class EditInventorySourceReadWriteAccessorsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertisers_update: EditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate=None, assign_partner: bool=None, partner_id: str=None):
        """EditInventorySourceReadWriteAccessorsRequest - a model defined in OpenAPI

        :param advertisers_update: The advertisers_update of this EditInventorySourceReadWriteAccessorsRequest.
        :param assign_partner: The assign_partner of this EditInventorySourceReadWriteAccessorsRequest.
        :param partner_id: The partner_id of this EditInventorySourceReadWriteAccessorsRequest.
        """
        self.openapi_types = {
            'advertisers_update': EditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate,
            'assign_partner': bool,
            'partner_id': str
        }

        self.attribute_map = {
            'advertisers_update': 'advertisersUpdate',
            'assign_partner': 'assignPartner',
            'partner_id': 'partnerId'
        }

        self._advertisers_update = advertisers_update
        self._assign_partner = assign_partner
        self._partner_id = partner_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditInventorySourceReadWriteAccessorsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EditInventorySourceReadWriteAccessorsRequest of this EditInventorySourceReadWriteAccessorsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertisers_update(self):
        """Gets the advertisers_update of this EditInventorySourceReadWriteAccessorsRequest.


        :return: The advertisers_update of this EditInventorySourceReadWriteAccessorsRequest.
        :rtype: EditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate
        """
        return self._advertisers_update

    @advertisers_update.setter
    def advertisers_update(self, advertisers_update):
        """Sets the advertisers_update of this EditInventorySourceReadWriteAccessorsRequest.


        :param advertisers_update: The advertisers_update of this EditInventorySourceReadWriteAccessorsRequest.
        :type advertisers_update: EditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate
        """

        self._advertisers_update = advertisers_update

    @property
    def assign_partner(self):
        """Gets the assign_partner of this EditInventorySourceReadWriteAccessorsRequest.

        Set the partner context as read/write accessor of the inventory source. This will remove all other current read/write advertiser accessors.

        :return: The assign_partner of this EditInventorySourceReadWriteAccessorsRequest.
        :rtype: bool
        """
        return self._assign_partner

    @assign_partner.setter
    def assign_partner(self, assign_partner):
        """Sets the assign_partner of this EditInventorySourceReadWriteAccessorsRequest.

        Set the partner context as read/write accessor of the inventory source. This will remove all other current read/write advertiser accessors.

        :param assign_partner: The assign_partner of this EditInventorySourceReadWriteAccessorsRequest.
        :type assign_partner: bool
        """

        self._assign_partner = assign_partner

    @property
    def partner_id(self):
        """Gets the partner_id of this EditInventorySourceReadWriteAccessorsRequest.

        Required. The partner context by which the accessors change is being made.

        :return: The partner_id of this EditInventorySourceReadWriteAccessorsRequest.
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this EditInventorySourceReadWriteAccessorsRequest.

        Required. The partner context by which the accessors change is being made.

        :param partner_id: The partner_id of this EditInventorySourceReadWriteAccessorsRequest.
        :type partner_id: str
        """

        self._partner_id = partner_id
