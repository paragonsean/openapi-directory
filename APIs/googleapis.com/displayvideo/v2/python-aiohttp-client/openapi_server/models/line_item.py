# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bidding_strategy import BiddingStrategy
from openapi_server.models.conversion_counting_config import ConversionCountingConfig
from openapi_server.models.frequency_cap import FrequencyCap
from openapi_server.models.integration_details import IntegrationDetails
from openapi_server.models.line_item_budget import LineItemBudget
from openapi_server.models.line_item_flight import LineItemFlight
from openapi_server.models.mobile_app import MobileApp
from openapi_server.models.pacing import Pacing
from openapi_server.models.partner_cost import PartnerCost
from openapi_server.models.partner_revenue_model import PartnerRevenueModel
from openapi_server.models.targeting_expansion_config import TargetingExpansionConfig
from openapi_server.models.youtube_and_partners_settings import YoutubeAndPartnersSettings
from openapi_server import util


class LineItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertiser_id: str=None, bid_strategy: BiddingStrategy=None, budget: LineItemBudget=None, campaign_id: str=None, conversion_counting: ConversionCountingConfig=None, creative_ids: List[str]=None, display_name: str=None, entity_status: str=None, exclude_new_exchanges: bool=None, flight: LineItemFlight=None, frequency_cap: FrequencyCap=None, insertion_order_id: str=None, integration_details: IntegrationDetails=None, line_item_id: str=None, line_item_type: str=None, mobile_app: MobileApp=None, name: str=None, pacing: Pacing=None, partner_costs: List[PartnerCost]=None, partner_revenue_model: PartnerRevenueModel=None, reservation_type: str=None, targeting_expansion: TargetingExpansionConfig=None, update_time: str=None, warning_messages: List[str]=None, youtube_and_partners_settings: YoutubeAndPartnersSettings=None):
        """LineItem - a model defined in OpenAPI

        :param advertiser_id: The advertiser_id of this LineItem.
        :param bid_strategy: The bid_strategy of this LineItem.
        :param budget: The budget of this LineItem.
        :param campaign_id: The campaign_id of this LineItem.
        :param conversion_counting: The conversion_counting of this LineItem.
        :param creative_ids: The creative_ids of this LineItem.
        :param display_name: The display_name of this LineItem.
        :param entity_status: The entity_status of this LineItem.
        :param exclude_new_exchanges: The exclude_new_exchanges of this LineItem.
        :param flight: The flight of this LineItem.
        :param frequency_cap: The frequency_cap of this LineItem.
        :param insertion_order_id: The insertion_order_id of this LineItem.
        :param integration_details: The integration_details of this LineItem.
        :param line_item_id: The line_item_id of this LineItem.
        :param line_item_type: The line_item_type of this LineItem.
        :param mobile_app: The mobile_app of this LineItem.
        :param name: The name of this LineItem.
        :param pacing: The pacing of this LineItem.
        :param partner_costs: The partner_costs of this LineItem.
        :param partner_revenue_model: The partner_revenue_model of this LineItem.
        :param reservation_type: The reservation_type of this LineItem.
        :param targeting_expansion: The targeting_expansion of this LineItem.
        :param update_time: The update_time of this LineItem.
        :param warning_messages: The warning_messages of this LineItem.
        :param youtube_and_partners_settings: The youtube_and_partners_settings of this LineItem.
        """
        self.openapi_types = {
            'advertiser_id': str,
            'bid_strategy': BiddingStrategy,
            'budget': LineItemBudget,
            'campaign_id': str,
            'conversion_counting': ConversionCountingConfig,
            'creative_ids': List[str],
            'display_name': str,
            'entity_status': str,
            'exclude_new_exchanges': bool,
            'flight': LineItemFlight,
            'frequency_cap': FrequencyCap,
            'insertion_order_id': str,
            'integration_details': IntegrationDetails,
            'line_item_id': str,
            'line_item_type': str,
            'mobile_app': MobileApp,
            'name': str,
            'pacing': Pacing,
            'partner_costs': List[PartnerCost],
            'partner_revenue_model': PartnerRevenueModel,
            'reservation_type': str,
            'targeting_expansion': TargetingExpansionConfig,
            'update_time': str,
            'warning_messages': List[str],
            'youtube_and_partners_settings': YoutubeAndPartnersSettings
        }

        self.attribute_map = {
            'advertiser_id': 'advertiserId',
            'bid_strategy': 'bidStrategy',
            'budget': 'budget',
            'campaign_id': 'campaignId',
            'conversion_counting': 'conversionCounting',
            'creative_ids': 'creativeIds',
            'display_name': 'displayName',
            'entity_status': 'entityStatus',
            'exclude_new_exchanges': 'excludeNewExchanges',
            'flight': 'flight',
            'frequency_cap': 'frequencyCap',
            'insertion_order_id': 'insertionOrderId',
            'integration_details': 'integrationDetails',
            'line_item_id': 'lineItemId',
            'line_item_type': 'lineItemType',
            'mobile_app': 'mobileApp',
            'name': 'name',
            'pacing': 'pacing',
            'partner_costs': 'partnerCosts',
            'partner_revenue_model': 'partnerRevenueModel',
            'reservation_type': 'reservationType',
            'targeting_expansion': 'targetingExpansion',
            'update_time': 'updateTime',
            'warning_messages': 'warningMessages',
            'youtube_and_partners_settings': 'youtubeAndPartnersSettings'
        }

        self._advertiser_id = advertiser_id
        self._bid_strategy = bid_strategy
        self._budget = budget
        self._campaign_id = campaign_id
        self._conversion_counting = conversion_counting
        self._creative_ids = creative_ids
        self._display_name = display_name
        self._entity_status = entity_status
        self._exclude_new_exchanges = exclude_new_exchanges
        self._flight = flight
        self._frequency_cap = frequency_cap
        self._insertion_order_id = insertion_order_id
        self._integration_details = integration_details
        self._line_item_id = line_item_id
        self._line_item_type = line_item_type
        self._mobile_app = mobile_app
        self._name = name
        self._pacing = pacing
        self._partner_costs = partner_costs
        self._partner_revenue_model = partner_revenue_model
        self._reservation_type = reservation_type
        self._targeting_expansion = targeting_expansion
        self._update_time = update_time
        self._warning_messages = warning_messages
        self._youtube_and_partners_settings = youtube_and_partners_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineItem of this LineItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this LineItem.

        Output only. The unique ID of the advertiser the line item belongs to.

        :return: The advertiser_id of this LineItem.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this LineItem.

        Output only. The unique ID of the advertiser the line item belongs to.

        :param advertiser_id: The advertiser_id of this LineItem.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def bid_strategy(self):
        """Gets the bid_strategy of this LineItem.


        :return: The bid_strategy of this LineItem.
        :rtype: BiddingStrategy
        """
        return self._bid_strategy

    @bid_strategy.setter
    def bid_strategy(self, bid_strategy):
        """Sets the bid_strategy of this LineItem.


        :param bid_strategy: The bid_strategy of this LineItem.
        :type bid_strategy: BiddingStrategy
        """

        self._bid_strategy = bid_strategy

    @property
    def budget(self):
        """Gets the budget of this LineItem.


        :return: The budget of this LineItem.
        :rtype: LineItemBudget
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this LineItem.


        :param budget: The budget of this LineItem.
        :type budget: LineItemBudget
        """

        self._budget = budget

    @property
    def campaign_id(self):
        """Gets the campaign_id of this LineItem.

        Output only. The unique ID of the campaign that the line item belongs to.

        :return: The campaign_id of this LineItem.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this LineItem.

        Output only. The unique ID of the campaign that the line item belongs to.

        :param campaign_id: The campaign_id of this LineItem.
        :type campaign_id: str
        """

        self._campaign_id = campaign_id

    @property
    def conversion_counting(self):
        """Gets the conversion_counting of this LineItem.


        :return: The conversion_counting of this LineItem.
        :rtype: ConversionCountingConfig
        """
        return self._conversion_counting

    @conversion_counting.setter
    def conversion_counting(self, conversion_counting):
        """Sets the conversion_counting of this LineItem.


        :param conversion_counting: The conversion_counting of this LineItem.
        :type conversion_counting: ConversionCountingConfig
        """

        self._conversion_counting = conversion_counting

    @property
    def creative_ids(self):
        """Gets the creative_ids of this LineItem.

        The IDs of the creatives associated with the line item.

        :return: The creative_ids of this LineItem.
        :rtype: List[str]
        """
        return self._creative_ids

    @creative_ids.setter
    def creative_ids(self, creative_ids):
        """Sets the creative_ids of this LineItem.

        The IDs of the creatives associated with the line item.

        :param creative_ids: The creative_ids of this LineItem.
        :type creative_ids: List[str]
        """

        self._creative_ids = creative_ids

    @property
    def display_name(self):
        """Gets the display_name of this LineItem.

        Required. The display name of the line item. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :return: The display_name of this LineItem.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this LineItem.

        Required. The display name of the line item. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :param display_name: The display_name of this LineItem.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def entity_status(self):
        """Gets the entity_status of this LineItem.

        Required. Controls whether or not the line item can spend its budget and bid on inventory. * For CreateLineItem method, only `ENTITY_STATUS_DRAFT` is allowed. To activate a line item, use UpdateLineItem method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * A line item cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other status. * If the line item's parent insertion order is not active, the line item can't spend its budget even if its own status is `ENTITY_STATUS_ACTIVE`.

        :return: The entity_status of this LineItem.
        :rtype: str
        """
        return self._entity_status

    @entity_status.setter
    def entity_status(self, entity_status):
        """Sets the entity_status of this LineItem.

        Required. Controls whether or not the line item can spend its budget and bid on inventory. * For CreateLineItem method, only `ENTITY_STATUS_DRAFT` is allowed. To activate a line item, use UpdateLineItem method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * A line item cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other status. * If the line item's parent insertion order is not active, the line item can't spend its budget even if its own status is `ENTITY_STATUS_ACTIVE`.

        :param entity_status: The entity_status of this LineItem.
        :type entity_status: str
        """
        allowed_values = ["ENTITY_STATUS_UNSPECIFIED", "ENTITY_STATUS_ACTIVE", "ENTITY_STATUS_ARCHIVED", "ENTITY_STATUS_DRAFT", "ENTITY_STATUS_PAUSED", "ENTITY_STATUS_SCHEDULED_FOR_DELETION"]  # noqa: E501
        if entity_status not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_status` ({0}), must be one of {1}"
                .format(entity_status, allowed_values)
            )

        self._entity_status = entity_status

    @property
    def exclude_new_exchanges(self):
        """Gets the exclude_new_exchanges of this LineItem.

        Whether to exclude new exchanges from automatically being targeted by the line item. This field is false by default.

        :return: The exclude_new_exchanges of this LineItem.
        :rtype: bool
        """
        return self._exclude_new_exchanges

    @exclude_new_exchanges.setter
    def exclude_new_exchanges(self, exclude_new_exchanges):
        """Sets the exclude_new_exchanges of this LineItem.

        Whether to exclude new exchanges from automatically being targeted by the line item. This field is false by default.

        :param exclude_new_exchanges: The exclude_new_exchanges of this LineItem.
        :type exclude_new_exchanges: bool
        """

        self._exclude_new_exchanges = exclude_new_exchanges

    @property
    def flight(self):
        """Gets the flight of this LineItem.


        :return: The flight of this LineItem.
        :rtype: LineItemFlight
        """
        return self._flight

    @flight.setter
    def flight(self, flight):
        """Sets the flight of this LineItem.


        :param flight: The flight of this LineItem.
        :type flight: LineItemFlight
        """

        self._flight = flight

    @property
    def frequency_cap(self):
        """Gets the frequency_cap of this LineItem.


        :return: The frequency_cap of this LineItem.
        :rtype: FrequencyCap
        """
        return self._frequency_cap

    @frequency_cap.setter
    def frequency_cap(self, frequency_cap):
        """Sets the frequency_cap of this LineItem.


        :param frequency_cap: The frequency_cap of this LineItem.
        :type frequency_cap: FrequencyCap
        """

        self._frequency_cap = frequency_cap

    @property
    def insertion_order_id(self):
        """Gets the insertion_order_id of this LineItem.

        Required. Immutable. The unique ID of the insertion order that the line item belongs to.

        :return: The insertion_order_id of this LineItem.
        :rtype: str
        """
        return self._insertion_order_id

    @insertion_order_id.setter
    def insertion_order_id(self, insertion_order_id):
        """Sets the insertion_order_id of this LineItem.

        Required. Immutable. The unique ID of the insertion order that the line item belongs to.

        :param insertion_order_id: The insertion_order_id of this LineItem.
        :type insertion_order_id: str
        """

        self._insertion_order_id = insertion_order_id

    @property
    def integration_details(self):
        """Gets the integration_details of this LineItem.


        :return: The integration_details of this LineItem.
        :rtype: IntegrationDetails
        """
        return self._integration_details

    @integration_details.setter
    def integration_details(self, integration_details):
        """Sets the integration_details of this LineItem.


        :param integration_details: The integration_details of this LineItem.
        :type integration_details: IntegrationDetails
        """

        self._integration_details = integration_details

    @property
    def line_item_id(self):
        """Gets the line_item_id of this LineItem.

        Output only. The unique ID of the line item. Assigned by the system.

        :return: The line_item_id of this LineItem.
        :rtype: str
        """
        return self._line_item_id

    @line_item_id.setter
    def line_item_id(self, line_item_id):
        """Sets the line_item_id of this LineItem.

        Output only. The unique ID of the line item. Assigned by the system.

        :param line_item_id: The line_item_id of this LineItem.
        :type line_item_id: str
        """

        self._line_item_id = line_item_id

    @property
    def line_item_type(self):
        """Gets the line_item_type of this LineItem.

        Required. Immutable. The type of the line item.

        :return: The line_item_type of this LineItem.
        :rtype: str
        """
        return self._line_item_type

    @line_item_type.setter
    def line_item_type(self, line_item_type):
        """Sets the line_item_type of this LineItem.

        Required. Immutable. The type of the line item.

        :param line_item_type: The line_item_type of this LineItem.
        :type line_item_type: str
        """
        allowed_values = ["LINE_ITEM_TYPE_UNSPECIFIED", "LINE_ITEM_TYPE_DISPLAY_DEFAULT", "LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INSTALL", "LINE_ITEM_TYPE_VIDEO_DEFAULT", "LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INSTALL", "LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INVENTORY", "LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INVENTORY", "LINE_ITEM_TYPE_AUDIO_DEFAULT", "LINE_ITEM_TYPE_VIDEO_OVER_THE_TOP", "LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_ACTION", "LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_NON_SKIPPABLE", "LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIDEO_SEQUENCE", "LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_AUDIO", "LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_REACH", "LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_SIMPLE", "LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_NON_SKIPPABLE_OVER_THE_TOP", "LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_REACH_OVER_THE_TOP", "LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_SIMPLE_OVER_THE_TOP", "LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_TARGET_FREQUENCY", "LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIEW", "LINE_ITEM_TYPE_DISPLAY_OUT_OF_HOME", "LINE_ITEM_TYPE_VIDEO_OUT_OF_HOME"]  # noqa: E501
        if line_item_type not in allowed_values:
            raise ValueError(
                "Invalid value for `line_item_type` ({0}), must be one of {1}"
                .format(line_item_type, allowed_values)
            )

        self._line_item_type = line_item_type

    @property
    def mobile_app(self):
        """Gets the mobile_app of this LineItem.


        :return: The mobile_app of this LineItem.
        :rtype: MobileApp
        """
        return self._mobile_app

    @mobile_app.setter
    def mobile_app(self, mobile_app):
        """Sets the mobile_app of this LineItem.


        :param mobile_app: The mobile_app of this LineItem.
        :type mobile_app: MobileApp
        """

        self._mobile_app = mobile_app

    @property
    def name(self):
        """Gets the name of this LineItem.

        Output only. The resource name of the line item.

        :return: The name of this LineItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LineItem.

        Output only. The resource name of the line item.

        :param name: The name of this LineItem.
        :type name: str
        """

        self._name = name

    @property
    def pacing(self):
        """Gets the pacing of this LineItem.


        :return: The pacing of this LineItem.
        :rtype: Pacing
        """
        return self._pacing

    @pacing.setter
    def pacing(self, pacing):
        """Sets the pacing of this LineItem.


        :param pacing: The pacing of this LineItem.
        :type pacing: Pacing
        """

        self._pacing = pacing

    @property
    def partner_costs(self):
        """Gets the partner_costs of this LineItem.

        The partner costs associated with the line item. If absent or empty in CreateLineItem method, the newly created line item will inherit partner costs from its parent insertion order.

        :return: The partner_costs of this LineItem.
        :rtype: List[PartnerCost]
        """
        return self._partner_costs

    @partner_costs.setter
    def partner_costs(self, partner_costs):
        """Sets the partner_costs of this LineItem.

        The partner costs associated with the line item. If absent or empty in CreateLineItem method, the newly created line item will inherit partner costs from its parent insertion order.

        :param partner_costs: The partner_costs of this LineItem.
        :type partner_costs: List[PartnerCost]
        """

        self._partner_costs = partner_costs

    @property
    def partner_revenue_model(self):
        """Gets the partner_revenue_model of this LineItem.


        :return: The partner_revenue_model of this LineItem.
        :rtype: PartnerRevenueModel
        """
        return self._partner_revenue_model

    @partner_revenue_model.setter
    def partner_revenue_model(self, partner_revenue_model):
        """Sets the partner_revenue_model of this LineItem.


        :param partner_revenue_model: The partner_revenue_model of this LineItem.
        :type partner_revenue_model: PartnerRevenueModel
        """

        self._partner_revenue_model = partner_revenue_model

    @property
    def reservation_type(self):
        """Gets the reservation_type of this LineItem.

        Output only. The reservation type of the line item.

        :return: The reservation_type of this LineItem.
        :rtype: str
        """
        return self._reservation_type

    @reservation_type.setter
    def reservation_type(self, reservation_type):
        """Sets the reservation_type of this LineItem.

        Output only. The reservation type of the line item.

        :param reservation_type: The reservation_type of this LineItem.
        :type reservation_type: str
        """
        allowed_values = ["RESERVATION_TYPE_UNSPECIFIED", "RESERVATION_TYPE_NOT_GUARANTEED", "RESERVATION_TYPE_PROGRAMMATIC_GUARANTEED", "RESERVATION_TYPE_TAG_GUARANTEED", "RESERVATION_TYPE_PETRA_VIRAL", "RESERVATION_TYPE_INSTANT_RESERVE"]  # noqa: E501
        if reservation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `reservation_type` ({0}), must be one of {1}"
                .format(reservation_type, allowed_values)
            )

        self._reservation_type = reservation_type

    @property
    def targeting_expansion(self):
        """Gets the targeting_expansion of this LineItem.


        :return: The targeting_expansion of this LineItem.
        :rtype: TargetingExpansionConfig
        """
        return self._targeting_expansion

    @targeting_expansion.setter
    def targeting_expansion(self, targeting_expansion):
        """Sets the targeting_expansion of this LineItem.


        :param targeting_expansion: The targeting_expansion of this LineItem.
        :type targeting_expansion: TargetingExpansionConfig
        """

        self._targeting_expansion = targeting_expansion

    @property
    def update_time(self):
        """Gets the update_time of this LineItem.

        Output only. The timestamp when the line item was last updated. Assigned by the system.

        :return: The update_time of this LineItem.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this LineItem.

        Output only. The timestamp when the line item was last updated. Assigned by the system.

        :param update_time: The update_time of this LineItem.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def warning_messages(self):
        """Gets the warning_messages of this LineItem.

        Output only. The warning messages generated by the line item. These warnings do not block saving the line item, but some may block the line item from running.

        :return: The warning_messages of this LineItem.
        :rtype: List[str]
        """
        return self._warning_messages

    @warning_messages.setter
    def warning_messages(self, warning_messages):
        """Sets the warning_messages of this LineItem.

        Output only. The warning messages generated by the line item. These warnings do not block saving the line item, but some may block the line item from running.

        :param warning_messages: The warning_messages of this LineItem.
        :type warning_messages: List[str]
        """
        allowed_values = ["LINE_ITEM_WARNING_MESSAGE_UNSPECIFIED", "INVALID_FLIGHT_DATES", "EXPIRED", "PENDING_FLIGHT", "ALL_PARTNER_ENABLED_EXCHANGES_NEGATIVELY_TARGETED", "INVALID_INVENTORY_SOURCE", "APP_INVENTORY_INVALID_SITE_TARGETING", "APP_INVENTORY_INVALID_AUDIENCE_LISTS", "NO_VALID_CREATIVE", "PARENT_INSERTION_ORDER_PAUSED", "PARENT_INSERTION_ORDER_EXPIRED", "DEPRECATED_FIRST_PARTY_AUDIENCE_EXCLUSION"]  # noqa: E501
        if not set(warning_messages).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `warning_messages` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(warning_messages) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._warning_messages = warning_messages

    @property
    def youtube_and_partners_settings(self):
        """Gets the youtube_and_partners_settings of this LineItem.


        :return: The youtube_and_partners_settings of this LineItem.
        :rtype: YoutubeAndPartnersSettings
        """
        return self._youtube_and_partners_settings

    @youtube_and_partners_settings.setter
    def youtube_and_partners_settings(self, youtube_and_partners_settings):
        """Sets the youtube_and_partners_settings of this LineItem.


        :param youtube_and_partners_settings: The youtube_and_partners_settings of this LineItem.
        :type youtube_and_partners_settings: YoutubeAndPartnersSettings
        """

        self._youtube_and_partners_settings = youtube_and_partners_settings
