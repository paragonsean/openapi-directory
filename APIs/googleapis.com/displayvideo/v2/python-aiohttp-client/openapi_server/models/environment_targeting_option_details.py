# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnvironmentTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment: str=None):
        """EnvironmentTargetingOptionDetails - a model defined in OpenAPI

        :param environment: The environment of this EnvironmentTargetingOptionDetails.
        """
        self.openapi_types = {
            'environment': str
        }

        self.attribute_map = {
            'environment': 'environment'
        }

        self._environment = environment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvironmentTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnvironmentTargetingOptionDetails of this EnvironmentTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment(self):
        """Gets the environment of this EnvironmentTargetingOptionDetails.

        Output only. The serving environment.

        :return: The environment of this EnvironmentTargetingOptionDetails.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this EnvironmentTargetingOptionDetails.

        Output only. The serving environment.

        :param environment: The environment of this EnvironmentTargetingOptionDetails.
        :type environment: str
        """
        allowed_values = ["ENVIRONMENT_UNSPECIFIED", "ENVIRONMENT_WEB_OPTIMIZED", "ENVIRONMENT_WEB_NOT_OPTIMIZED", "ENVIRONMENT_APP"]  # noqa: E501
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"
                .format(environment, allowed_values)
            )

        self._environment = environment
