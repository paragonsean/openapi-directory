# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DoubleVerifyFraudInvalidTraffic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avoid_insufficient_option: bool=None, avoided_fraud_option: str=None):
        """DoubleVerifyFraudInvalidTraffic - a model defined in OpenAPI

        :param avoid_insufficient_option: The avoid_insufficient_option of this DoubleVerifyFraudInvalidTraffic.
        :param avoided_fraud_option: The avoided_fraud_option of this DoubleVerifyFraudInvalidTraffic.
        """
        self.openapi_types = {
            'avoid_insufficient_option': bool,
            'avoided_fraud_option': str
        }

        self.attribute_map = {
            'avoid_insufficient_option': 'avoidInsufficientOption',
            'avoided_fraud_option': 'avoidedFraudOption'
        }

        self._avoid_insufficient_option = avoid_insufficient_option
        self._avoided_fraud_option = avoided_fraud_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DoubleVerifyFraudInvalidTraffic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DoubleVerifyFraudInvalidTraffic of this DoubleVerifyFraudInvalidTraffic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avoid_insufficient_option(self):
        """Gets the avoid_insufficient_option of this DoubleVerifyFraudInvalidTraffic.

        Insufficient Historical Fraud & IVT Stats.

        :return: The avoid_insufficient_option of this DoubleVerifyFraudInvalidTraffic.
        :rtype: bool
        """
        return self._avoid_insufficient_option

    @avoid_insufficient_option.setter
    def avoid_insufficient_option(self, avoid_insufficient_option):
        """Sets the avoid_insufficient_option of this DoubleVerifyFraudInvalidTraffic.

        Insufficient Historical Fraud & IVT Stats.

        :param avoid_insufficient_option: The avoid_insufficient_option of this DoubleVerifyFraudInvalidTraffic.
        :type avoid_insufficient_option: bool
        """

        self._avoid_insufficient_option = avoid_insufficient_option

    @property
    def avoided_fraud_option(self):
        """Gets the avoided_fraud_option of this DoubleVerifyFraudInvalidTraffic.

        Avoid Sites and Apps with historical Fraud & IVT.

        :return: The avoided_fraud_option of this DoubleVerifyFraudInvalidTraffic.
        :rtype: str
        """
        return self._avoided_fraud_option

    @avoided_fraud_option.setter
    def avoided_fraud_option(self, avoided_fraud_option):
        """Sets the avoided_fraud_option of this DoubleVerifyFraudInvalidTraffic.

        Avoid Sites and Apps with historical Fraud & IVT.

        :param avoided_fraud_option: The avoided_fraud_option of this DoubleVerifyFraudInvalidTraffic.
        :type avoided_fraud_option: str
        """
        allowed_values = ["FRAUD_UNSPECIFIED", "AD_IMPRESSION_FRAUD_100", "AD_IMPRESSION_FRAUD_50", "AD_IMPRESSION_FRAUD_25", "AD_IMPRESSION_FRAUD_10", "AD_IMPRESSION_FRAUD_8", "AD_IMPRESSION_FRAUD_6", "AD_IMPRESSION_FRAUD_4", "AD_IMPRESSION_FRAUD_2"]  # noqa: E501
        if avoided_fraud_option not in allowed_values:
            raise ValueError(
                "Invalid value for `avoided_fraud_option` ({0}), must be one of {1}"
                .format(avoided_fraud_option, allowed_values)
            )

        self._avoided_fraud_option = avoided_fraud_option
