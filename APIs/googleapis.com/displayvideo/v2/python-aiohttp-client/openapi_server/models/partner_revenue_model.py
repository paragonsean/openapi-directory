# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PartnerRevenueModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, markup_amount: str=None, markup_type: str=None):
        """PartnerRevenueModel - a model defined in OpenAPI

        :param markup_amount: The markup_amount of this PartnerRevenueModel.
        :param markup_type: The markup_type of this PartnerRevenueModel.
        """
        self.openapi_types = {
            'markup_amount': str,
            'markup_type': str
        }

        self.attribute_map = {
            'markup_amount': 'markupAmount',
            'markup_type': 'markupType'
        }

        self._markup_amount = markup_amount
        self._markup_type = markup_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartnerRevenueModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartnerRevenueModel of this PartnerRevenueModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def markup_amount(self):
        """Gets the markup_amount of this PartnerRevenueModel.

        Required. The markup amount of the partner revenue model. Must be greater than or equal to 0. * When the markup_type is set to be `PARTNER_REVENUE_MODEL_MARKUP_TYPE_CPM`, this field represents the CPM markup in micros of advertiser's currency. For example, 1500000 represents 1.5 standard units of the currency. * When the markup_type is set to be `PARTNER_REVENUE_MODEL_MARKUP_TYPE_MEDIA_COST_MARKUP`, this field represents the media cost percent markup in millis. For example, 100 represents 0.1% (decimal 0.001). * When the markup_type is set to be `PARTNER_REVENUE_MODEL_MARKUP_TYPE_TOTAL_MEDIA_COST_MARKUP`, this field represents the total media cost percent markup in millis. For example, 100 represents 0.1% (decimal 0.001).

        :return: The markup_amount of this PartnerRevenueModel.
        :rtype: str
        """
        return self._markup_amount

    @markup_amount.setter
    def markup_amount(self, markup_amount):
        """Sets the markup_amount of this PartnerRevenueModel.

        Required. The markup amount of the partner revenue model. Must be greater than or equal to 0. * When the markup_type is set to be `PARTNER_REVENUE_MODEL_MARKUP_TYPE_CPM`, this field represents the CPM markup in micros of advertiser's currency. For example, 1500000 represents 1.5 standard units of the currency. * When the markup_type is set to be `PARTNER_REVENUE_MODEL_MARKUP_TYPE_MEDIA_COST_MARKUP`, this field represents the media cost percent markup in millis. For example, 100 represents 0.1% (decimal 0.001). * When the markup_type is set to be `PARTNER_REVENUE_MODEL_MARKUP_TYPE_TOTAL_MEDIA_COST_MARKUP`, this field represents the total media cost percent markup in millis. For example, 100 represents 0.1% (decimal 0.001).

        :param markup_amount: The markup_amount of this PartnerRevenueModel.
        :type markup_amount: str
        """

        self._markup_amount = markup_amount

    @property
    def markup_type(self):
        """Gets the markup_type of this PartnerRevenueModel.

        Required. The markup type of the partner revenue model.

        :return: The markup_type of this PartnerRevenueModel.
        :rtype: str
        """
        return self._markup_type

    @markup_type.setter
    def markup_type(self, markup_type):
        """Sets the markup_type of this PartnerRevenueModel.

        Required. The markup type of the partner revenue model.

        :param markup_type: The markup_type of this PartnerRevenueModel.
        :type markup_type: str
        """
        allowed_values = ["PARTNER_REVENUE_MODEL_MARKUP_TYPE_UNSPECIFIED", "PARTNER_REVENUE_MODEL_MARKUP_TYPE_CPM", "PARTNER_REVENUE_MODEL_MARKUP_TYPE_MEDIA_COST_MARKUP", "PARTNER_REVENUE_MODEL_MARKUP_TYPE_TOTAL_MEDIA_COST_MARKUP"]  # noqa: E501
        if markup_type not in allowed_values:
            raise ValueError(
                "Invalid value for `markup_type` ({0}), must be one of {1}"
                .format(markup_type, allowed_values)
            )

        self._markup_type = markup_type
