# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UrlAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, negative: bool=None, url: str=None):
        """UrlAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param negative: The negative of this UrlAssignedTargetingOptionDetails.
        :param url: The url of this UrlAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'negative': bool,
            'url': str
        }

        self.attribute_map = {
            'negative': 'negative',
            'url': 'url'
        }

        self._negative = negative
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UrlAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UrlAssignedTargetingOptionDetails of this UrlAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def negative(self):
        """Gets the negative of this UrlAssignedTargetingOptionDetails.

        Indicates if this option is being negatively targeted.

        :return: The negative of this UrlAssignedTargetingOptionDetails.
        :rtype: bool
        """
        return self._negative

    @negative.setter
    def negative(self, negative):
        """Sets the negative of this UrlAssignedTargetingOptionDetails.

        Indicates if this option is being negatively targeted.

        :param negative: The negative of this UrlAssignedTargetingOptionDetails.
        :type negative: bool
        """

        self._negative = negative

    @property
    def url(self):
        """Gets the url of this UrlAssignedTargetingOptionDetails.

        Required. The URL, for example `example.com`. DV360 supports two levels of subdirectory targeting, for example `www.example.com/one-subdirectory-level/second-level`, and five levels of subdomain targeting, for example `five.four.three.two.one.example.com`.

        :return: The url of this UrlAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UrlAssignedTargetingOptionDetails.

        Required. The URL, for example `example.com`. DV360 supports two levels of subdirectory targeting, for example `www.example.com/one-subdirectory-level/second-level`, and five levels of subdomain targeting, for example `five.four.three.two.one.example.com`.

        :param url: The url of this UrlAssignedTargetingOptionDetails.
        :type url: str
        """

        self._url = url
