# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_range import DateRange
from openapi_server import util


class CampaignFlight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, planned_dates: DateRange=None, planned_spend_amount_micros: str=None):
        """CampaignFlight - a model defined in OpenAPI

        :param planned_dates: The planned_dates of this CampaignFlight.
        :param planned_spend_amount_micros: The planned_spend_amount_micros of this CampaignFlight.
        """
        self.openapi_types = {
            'planned_dates': DateRange,
            'planned_spend_amount_micros': str
        }

        self.attribute_map = {
            'planned_dates': 'plannedDates',
            'planned_spend_amount_micros': 'plannedSpendAmountMicros'
        }

        self._planned_dates = planned_dates
        self._planned_spend_amount_micros = planned_spend_amount_micros

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CampaignFlight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CampaignFlight of this CampaignFlight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def planned_dates(self):
        """Gets the planned_dates of this CampaignFlight.


        :return: The planned_dates of this CampaignFlight.
        :rtype: DateRange
        """
        return self._planned_dates

    @planned_dates.setter
    def planned_dates(self, planned_dates):
        """Sets the planned_dates of this CampaignFlight.


        :param planned_dates: The planned_dates of this CampaignFlight.
        :type planned_dates: DateRange
        """

        self._planned_dates = planned_dates

    @property
    def planned_spend_amount_micros(self):
        """Gets the planned_spend_amount_micros of this CampaignFlight.

        The amount the campaign is expected to spend for its given planned_dates. This will not limit serving, but will be used for tracking spend in the DV360 UI. The amount is in micros. Must be greater than or equal to 0. For example, 500000000 represents 500 standard units of the currency.

        :return: The planned_spend_amount_micros of this CampaignFlight.
        :rtype: str
        """
        return self._planned_spend_amount_micros

    @planned_spend_amount_micros.setter
    def planned_spend_amount_micros(self, planned_spend_amount_micros):
        """Sets the planned_spend_amount_micros of this CampaignFlight.

        The amount the campaign is expected to spend for its given planned_dates. This will not limit serving, but will be used for tracking spend in the DV360 UI. The amount is in micros. Must be greater than or equal to 0. For example, 500000000 represents 500 standard units of the currency.

        :param planned_spend_amount_micros: The planned_spend_amount_micros of this CampaignFlight.
        :type planned_spend_amount_micros: str
        """

        self._planned_spend_amount_micros = planned_spend_amount_micros
