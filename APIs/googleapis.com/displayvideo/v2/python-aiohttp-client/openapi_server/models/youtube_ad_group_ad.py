# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ad_url import AdUrl
from openapi_server.models.audio_ad import AudioAd
from openapi_server.models.bumper_ad import BumperAd
from openapi_server.models.display_video_source_ad import DisplayVideoSourceAd
from openapi_server.models.in_stream_ad import InStreamAd
from openapi_server.models.masthead_ad import MastheadAd
from openapi_server.models.non_skippable_ad import NonSkippableAd
from openapi_server.models.video_discovery_ad import VideoDiscoveryAd
from openapi_server.models.video_performance_ad import VideoPerformanceAd
from openapi_server import util


class YoutubeAdGroupAd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_group_ad_id: str=None, ad_group_id: str=None, ad_urls: List[AdUrl]=None, advertiser_id: str=None, audio_ad: AudioAd=None, bumper_ad: BumperAd=None, display_name: str=None, display_video_source_ad: DisplayVideoSourceAd=None, entity_status: str=None, in_stream_ad: InStreamAd=None, masthead_ad: MastheadAd=None, name: str=None, non_skippable_ad: NonSkippableAd=None, video_discover_ad: VideoDiscoveryAd=None, video_performance_ad: VideoPerformanceAd=None):
        """YoutubeAdGroupAd - a model defined in OpenAPI

        :param ad_group_ad_id: The ad_group_ad_id of this YoutubeAdGroupAd.
        :param ad_group_id: The ad_group_id of this YoutubeAdGroupAd.
        :param ad_urls: The ad_urls of this YoutubeAdGroupAd.
        :param advertiser_id: The advertiser_id of this YoutubeAdGroupAd.
        :param audio_ad: The audio_ad of this YoutubeAdGroupAd.
        :param bumper_ad: The bumper_ad of this YoutubeAdGroupAd.
        :param display_name: The display_name of this YoutubeAdGroupAd.
        :param display_video_source_ad: The display_video_source_ad of this YoutubeAdGroupAd.
        :param entity_status: The entity_status of this YoutubeAdGroupAd.
        :param in_stream_ad: The in_stream_ad of this YoutubeAdGroupAd.
        :param masthead_ad: The masthead_ad of this YoutubeAdGroupAd.
        :param name: The name of this YoutubeAdGroupAd.
        :param non_skippable_ad: The non_skippable_ad of this YoutubeAdGroupAd.
        :param video_discover_ad: The video_discover_ad of this YoutubeAdGroupAd.
        :param video_performance_ad: The video_performance_ad of this YoutubeAdGroupAd.
        """
        self.openapi_types = {
            'ad_group_ad_id': str,
            'ad_group_id': str,
            'ad_urls': List[AdUrl],
            'advertiser_id': str,
            'audio_ad': AudioAd,
            'bumper_ad': BumperAd,
            'display_name': str,
            'display_video_source_ad': DisplayVideoSourceAd,
            'entity_status': str,
            'in_stream_ad': InStreamAd,
            'masthead_ad': MastheadAd,
            'name': str,
            'non_skippable_ad': NonSkippableAd,
            'video_discover_ad': VideoDiscoveryAd,
            'video_performance_ad': VideoPerformanceAd
        }

        self.attribute_map = {
            'ad_group_ad_id': 'adGroupAdId',
            'ad_group_id': 'adGroupId',
            'ad_urls': 'adUrls',
            'advertiser_id': 'advertiserId',
            'audio_ad': 'audioAd',
            'bumper_ad': 'bumperAd',
            'display_name': 'displayName',
            'display_video_source_ad': 'displayVideoSourceAd',
            'entity_status': 'entityStatus',
            'in_stream_ad': 'inStreamAd',
            'masthead_ad': 'mastheadAd',
            'name': 'name',
            'non_skippable_ad': 'nonSkippableAd',
            'video_discover_ad': 'videoDiscoverAd',
            'video_performance_ad': 'videoPerformanceAd'
        }

        self._ad_group_ad_id = ad_group_ad_id
        self._ad_group_id = ad_group_id
        self._ad_urls = ad_urls
        self._advertiser_id = advertiser_id
        self._audio_ad = audio_ad
        self._bumper_ad = bumper_ad
        self._display_name = display_name
        self._display_video_source_ad = display_video_source_ad
        self._entity_status = entity_status
        self._in_stream_ad = in_stream_ad
        self._masthead_ad = masthead_ad
        self._name = name
        self._non_skippable_ad = non_skippable_ad
        self._video_discover_ad = video_discover_ad
        self._video_performance_ad = video_performance_ad

    @classmethod
    def from_dict(cls, dikt: dict) -> 'YoutubeAdGroupAd':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The YoutubeAdGroupAd of this YoutubeAdGroupAd.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_group_ad_id(self):
        """Gets the ad_group_ad_id of this YoutubeAdGroupAd.

        The unique ID of the ad. Assigned by the system.

        :return: The ad_group_ad_id of this YoutubeAdGroupAd.
        :rtype: str
        """
        return self._ad_group_ad_id

    @ad_group_ad_id.setter
    def ad_group_ad_id(self, ad_group_ad_id):
        """Sets the ad_group_ad_id of this YoutubeAdGroupAd.

        The unique ID of the ad. Assigned by the system.

        :param ad_group_ad_id: The ad_group_ad_id of this YoutubeAdGroupAd.
        :type ad_group_ad_id: str
        """

        self._ad_group_ad_id = ad_group_ad_id

    @property
    def ad_group_id(self):
        """Gets the ad_group_id of this YoutubeAdGroupAd.

        The unique ID of the ad group that the ad belongs to.

        :return: The ad_group_id of this YoutubeAdGroupAd.
        :rtype: str
        """
        return self._ad_group_id

    @ad_group_id.setter
    def ad_group_id(self, ad_group_id):
        """Sets the ad_group_id of this YoutubeAdGroupAd.

        The unique ID of the ad group that the ad belongs to.

        :param ad_group_id: The ad_group_id of this YoutubeAdGroupAd.
        :type ad_group_id: str
        """

        self._ad_group_id = ad_group_id

    @property
    def ad_urls(self):
        """Gets the ad_urls of this YoutubeAdGroupAd.

        List of URLs used by the ad.

        :return: The ad_urls of this YoutubeAdGroupAd.
        :rtype: List[AdUrl]
        """
        return self._ad_urls

    @ad_urls.setter
    def ad_urls(self, ad_urls):
        """Sets the ad_urls of this YoutubeAdGroupAd.

        List of URLs used by the ad.

        :param ad_urls: The ad_urls of this YoutubeAdGroupAd.
        :type ad_urls: List[AdUrl]
        """

        self._ad_urls = ad_urls

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this YoutubeAdGroupAd.

        The unique ID of the advertiser the ad belongs to.

        :return: The advertiser_id of this YoutubeAdGroupAd.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this YoutubeAdGroupAd.

        The unique ID of the advertiser the ad belongs to.

        :param advertiser_id: The advertiser_id of this YoutubeAdGroupAd.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def audio_ad(self):
        """Gets the audio_ad of this YoutubeAdGroupAd.


        :return: The audio_ad of this YoutubeAdGroupAd.
        :rtype: AudioAd
        """
        return self._audio_ad

    @audio_ad.setter
    def audio_ad(self, audio_ad):
        """Sets the audio_ad of this YoutubeAdGroupAd.


        :param audio_ad: The audio_ad of this YoutubeAdGroupAd.
        :type audio_ad: AudioAd
        """

        self._audio_ad = audio_ad

    @property
    def bumper_ad(self):
        """Gets the bumper_ad of this YoutubeAdGroupAd.


        :return: The bumper_ad of this YoutubeAdGroupAd.
        :rtype: BumperAd
        """
        return self._bumper_ad

    @bumper_ad.setter
    def bumper_ad(self, bumper_ad):
        """Sets the bumper_ad of this YoutubeAdGroupAd.


        :param bumper_ad: The bumper_ad of this YoutubeAdGroupAd.
        :type bumper_ad: BumperAd
        """

        self._bumper_ad = bumper_ad

    @property
    def display_name(self):
        """Gets the display_name of this YoutubeAdGroupAd.

        The display name of the ad. Must be UTF-8 encoded with a maximum size of 255 bytes.

        :return: The display_name of this YoutubeAdGroupAd.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this YoutubeAdGroupAd.

        The display name of the ad. Must be UTF-8 encoded with a maximum size of 255 bytes.

        :param display_name: The display_name of this YoutubeAdGroupAd.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def display_video_source_ad(self):
        """Gets the display_video_source_ad of this YoutubeAdGroupAd.


        :return: The display_video_source_ad of this YoutubeAdGroupAd.
        :rtype: DisplayVideoSourceAd
        """
        return self._display_video_source_ad

    @display_video_source_ad.setter
    def display_video_source_ad(self, display_video_source_ad):
        """Sets the display_video_source_ad of this YoutubeAdGroupAd.


        :param display_video_source_ad: The display_video_source_ad of this YoutubeAdGroupAd.
        :type display_video_source_ad: DisplayVideoSourceAd
        """

        self._display_video_source_ad = display_video_source_ad

    @property
    def entity_status(self):
        """Gets the entity_status of this YoutubeAdGroupAd.

        The entity status of the ad.

        :return: The entity_status of this YoutubeAdGroupAd.
        :rtype: str
        """
        return self._entity_status

    @entity_status.setter
    def entity_status(self, entity_status):
        """Sets the entity_status of this YoutubeAdGroupAd.

        The entity status of the ad.

        :param entity_status: The entity_status of this YoutubeAdGroupAd.
        :type entity_status: str
        """
        allowed_values = ["ENTITY_STATUS_UNSPECIFIED", "ENTITY_STATUS_ACTIVE", "ENTITY_STATUS_ARCHIVED", "ENTITY_STATUS_DRAFT", "ENTITY_STATUS_PAUSED", "ENTITY_STATUS_SCHEDULED_FOR_DELETION"]  # noqa: E501
        if entity_status not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_status` ({0}), must be one of {1}"
                .format(entity_status, allowed_values)
            )

        self._entity_status = entity_status

    @property
    def in_stream_ad(self):
        """Gets the in_stream_ad of this YoutubeAdGroupAd.


        :return: The in_stream_ad of this YoutubeAdGroupAd.
        :rtype: InStreamAd
        """
        return self._in_stream_ad

    @in_stream_ad.setter
    def in_stream_ad(self, in_stream_ad):
        """Sets the in_stream_ad of this YoutubeAdGroupAd.


        :param in_stream_ad: The in_stream_ad of this YoutubeAdGroupAd.
        :type in_stream_ad: InStreamAd
        """

        self._in_stream_ad = in_stream_ad

    @property
    def masthead_ad(self):
        """Gets the masthead_ad of this YoutubeAdGroupAd.


        :return: The masthead_ad of this YoutubeAdGroupAd.
        :rtype: MastheadAd
        """
        return self._masthead_ad

    @masthead_ad.setter
    def masthead_ad(self, masthead_ad):
        """Sets the masthead_ad of this YoutubeAdGroupAd.


        :param masthead_ad: The masthead_ad of this YoutubeAdGroupAd.
        :type masthead_ad: MastheadAd
        """

        self._masthead_ad = masthead_ad

    @property
    def name(self):
        """Gets the name of this YoutubeAdGroupAd.

        The resource name of the ad.

        :return: The name of this YoutubeAdGroupAd.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this YoutubeAdGroupAd.

        The resource name of the ad.

        :param name: The name of this YoutubeAdGroupAd.
        :type name: str
        """

        self._name = name

    @property
    def non_skippable_ad(self):
        """Gets the non_skippable_ad of this YoutubeAdGroupAd.


        :return: The non_skippable_ad of this YoutubeAdGroupAd.
        :rtype: NonSkippableAd
        """
        return self._non_skippable_ad

    @non_skippable_ad.setter
    def non_skippable_ad(self, non_skippable_ad):
        """Sets the non_skippable_ad of this YoutubeAdGroupAd.


        :param non_skippable_ad: The non_skippable_ad of this YoutubeAdGroupAd.
        :type non_skippable_ad: NonSkippableAd
        """

        self._non_skippable_ad = non_skippable_ad

    @property
    def video_discover_ad(self):
        """Gets the video_discover_ad of this YoutubeAdGroupAd.


        :return: The video_discover_ad of this YoutubeAdGroupAd.
        :rtype: VideoDiscoveryAd
        """
        return self._video_discover_ad

    @video_discover_ad.setter
    def video_discover_ad(self, video_discover_ad):
        """Sets the video_discover_ad of this YoutubeAdGroupAd.


        :param video_discover_ad: The video_discover_ad of this YoutubeAdGroupAd.
        :type video_discover_ad: VideoDiscoveryAd
        """

        self._video_discover_ad = video_discover_ad

    @property
    def video_performance_ad(self):
        """Gets the video_performance_ad of this YoutubeAdGroupAd.


        :return: The video_performance_ad of this YoutubeAdGroupAd.
        :rtype: VideoPerformanceAd
        """
        return self._video_performance_ad

    @video_performance_ad.setter
    def video_performance_ad(self, video_performance_ad):
        """Sets the video_performance_ad of this YoutubeAdGroupAd.


        :param video_performance_ad: The video_performance_ad of this YoutubeAdGroupAd.
        :type video_performance_ad: VideoPerformanceAd
        """

        self._video_performance_ad = video_performance_ad
