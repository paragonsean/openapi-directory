/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a targetable content outstream position, which could be used by display and video ads. This will be populated in the content_outstream_position_details field when targeting_type is &#x60;TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentOutstreamPositionTargetingOptionDetails {
  /**
   * Output only. The content outstream position.
   */
  @JsonAdapter(ContentOutstreamPositionEnum.Adapter.class)
  public enum ContentOutstreamPositionEnum {
    UNSPECIFIED("CONTENT_OUTSTREAM_POSITION_UNSPECIFIED"),
    
    UNKNOWN("CONTENT_OUTSTREAM_POSITION_UNKNOWN"),
    
    IN_ARTICLE("CONTENT_OUTSTREAM_POSITION_IN_ARTICLE"),
    
    IN_BANNER("CONTENT_OUTSTREAM_POSITION_IN_BANNER"),
    
    IN_FEED("CONTENT_OUTSTREAM_POSITION_IN_FEED"),
    
    INTERSTITIAL("CONTENT_OUTSTREAM_POSITION_INTERSTITIAL");

    private String value;

    ContentOutstreamPositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentOutstreamPositionEnum fromValue(String value) {
      for (ContentOutstreamPositionEnum b : ContentOutstreamPositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentOutstreamPositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentOutstreamPositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentOutstreamPositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentOutstreamPositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentOutstreamPositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_OUTSTREAM_POSITION = "contentOutstreamPosition";
  @SerializedName(SERIALIZED_NAME_CONTENT_OUTSTREAM_POSITION)
  private ContentOutstreamPositionEnum contentOutstreamPosition;

  public ContentOutstreamPositionTargetingOptionDetails() {
  }

  public ContentOutstreamPositionTargetingOptionDetails(
     ContentOutstreamPositionEnum contentOutstreamPosition
  ) {
    this();
    this.contentOutstreamPosition = contentOutstreamPosition;
  }

  /**
   * Output only. The content outstream position.
   * @return contentOutstreamPosition
   */
  @javax.annotation.Nullable
  public ContentOutstreamPositionEnum getContentOutstreamPosition() {
    return contentOutstreamPosition;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentOutstreamPositionTargetingOptionDetails contentOutstreamPositionTargetingOptionDetails = (ContentOutstreamPositionTargetingOptionDetails) o;
    return Objects.equals(this.contentOutstreamPosition, contentOutstreamPositionTargetingOptionDetails.contentOutstreamPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentOutstreamPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentOutstreamPositionTargetingOptionDetails {\n");
    sb.append("    contentOutstreamPosition: ").append(toIndentedString(contentOutstreamPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentOutstreamPosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentOutstreamPositionTargetingOptionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentOutstreamPositionTargetingOptionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentOutstreamPositionTargetingOptionDetails is not found in the empty JSON string", ContentOutstreamPositionTargetingOptionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentOutstreamPositionTargetingOptionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentOutstreamPositionTargetingOptionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contentOutstreamPosition") != null && !jsonObj.get("contentOutstreamPosition").isJsonNull()) && !jsonObj.get("contentOutstreamPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentOutstreamPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentOutstreamPosition").toString()));
      }
      // validate the optional field `contentOutstreamPosition`
      if (jsonObj.get("contentOutstreamPosition") != null && !jsonObj.get("contentOutstreamPosition").isJsonNull()) {
        ContentOutstreamPositionEnum.validateJsonElement(jsonObj.get("contentOutstreamPosition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentOutstreamPositionTargetingOptionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentOutstreamPositionTargetingOptionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentOutstreamPositionTargetingOptionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentOutstreamPositionTargetingOptionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentOutstreamPositionTargetingOptionDetails>() {
           @Override
           public void write(JsonWriter out, ContentOutstreamPositionTargetingOptionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentOutstreamPositionTargetingOptionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentOutstreamPositionTargetingOptionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentOutstreamPositionTargetingOptionDetails
   * @throws IOException if the JSON string is invalid with respect to ContentOutstreamPositionTargetingOptionDetails
   */
  public static ContentOutstreamPositionTargetingOptionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentOutstreamPositionTargetingOptionDetails.class);
  }

  /**
   * Convert an instance of ContentOutstreamPositionTargetingOptionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

