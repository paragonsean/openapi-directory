/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details for assigned app targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is &#x60;TARGETING_TYPE_APP&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppAssignedTargetingOptionDetails {
  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  /**
   * Indicates the platform of the targeted app. If this field is not specified, the app platform will be assumed to be mobile (i.e., Android or iOS), and we will derive the appropriate mobile platform from the app ID.
   */
  @JsonAdapter(AppPlatformEnum.Adapter.class)
  public enum AppPlatformEnum {
    UNSPECIFIED("APP_PLATFORM_UNSPECIFIED"),
    
    IOS("APP_PLATFORM_IOS"),
    
    ANDROID("APP_PLATFORM_ANDROID"),
    
    ROKU("APP_PLATFORM_ROKU"),
    
    AMAZON_FIRETV("APP_PLATFORM_AMAZON_FIRETV"),
    
    PLAYSTATION("APP_PLATFORM_PLAYSTATION"),
    
    APPLE_TV("APP_PLATFORM_APPLE_TV"),
    
    XBOX("APP_PLATFORM_XBOX"),
    
    SAMSUNG_TV("APP_PLATFORM_SAMSUNG_TV"),
    
    ANDROID_TV("APP_PLATFORM_ANDROID_TV"),
    
    GENERIC_CTV("APP_PLATFORM_GENERIC_CTV");

    private String value;

    AppPlatformEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppPlatformEnum fromValue(String value) {
      for (AppPlatformEnum b : AppPlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppPlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppPlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppPlatformEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppPlatformEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppPlatformEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APP_PLATFORM = "appPlatform";
  @SerializedName(SERIALIZED_NAME_APP_PLATFORM)
  private AppPlatformEnum appPlatform;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NEGATIVE = "negative";
  @SerializedName(SERIALIZED_NAME_NEGATIVE)
  private Boolean negative;

  public AppAssignedTargetingOptionDetails() {
  }

  public AppAssignedTargetingOptionDetails(
     String displayName
  ) {
    this();
    this.displayName = displayName;
  }

  public AppAssignedTargetingOptionDetails appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * Required. The ID of the app. Android&#39;s Play store app uses bundle ID, for example &#x60;com.google.android.gm&#x60;. Apple&#39;s App store app ID uses 9 digit string, for example &#x60;422689480&#x60;.
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public AppAssignedTargetingOptionDetails appPlatform(AppPlatformEnum appPlatform) {
    this.appPlatform = appPlatform;
    return this;
  }

  /**
   * Indicates the platform of the targeted app. If this field is not specified, the app platform will be assumed to be mobile (i.e., Android or iOS), and we will derive the appropriate mobile platform from the app ID.
   * @return appPlatform
   */
  @javax.annotation.Nullable
  public AppPlatformEnum getAppPlatform() {
    return appPlatform;
  }

  public void setAppPlatform(AppPlatformEnum appPlatform) {
    this.appPlatform = appPlatform;
  }


  /**
   * Output only. The display name of the app.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  public AppAssignedTargetingOptionDetails negative(Boolean negative) {
    this.negative = negative;
    return this;
  }

  /**
   * Indicates if this option is being negatively targeted.
   * @return negative
   */
  @javax.annotation.Nullable
  public Boolean getNegative() {
    return negative;
  }

  public void setNegative(Boolean negative) {
    this.negative = negative;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppAssignedTargetingOptionDetails appAssignedTargetingOptionDetails = (AppAssignedTargetingOptionDetails) o;
    return Objects.equals(this.appId, appAssignedTargetingOptionDetails.appId) &&
        Objects.equals(this.appPlatform, appAssignedTargetingOptionDetails.appPlatform) &&
        Objects.equals(this.displayName, appAssignedTargetingOptionDetails.displayName) &&
        Objects.equals(this.negative, appAssignedTargetingOptionDetails.negative);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, appPlatform, displayName, negative);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppAssignedTargetingOptionDetails {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    appPlatform: ").append(toIndentedString(appPlatform)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    negative: ").append(toIndentedString(negative)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appId");
    openapiFields.add("appPlatform");
    openapiFields.add("displayName");
    openapiFields.add("negative");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppAssignedTargetingOptionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppAssignedTargetingOptionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppAssignedTargetingOptionDetails is not found in the empty JSON string", AppAssignedTargetingOptionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppAssignedTargetingOptionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppAssignedTargetingOptionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if ((jsonObj.get("appPlatform") != null && !jsonObj.get("appPlatform").isJsonNull()) && !jsonObj.get("appPlatform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appPlatform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appPlatform").toString()));
      }
      // validate the optional field `appPlatform`
      if (jsonObj.get("appPlatform") != null && !jsonObj.get("appPlatform").isJsonNull()) {
        AppPlatformEnum.validateJsonElement(jsonObj.get("appPlatform"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppAssignedTargetingOptionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppAssignedTargetingOptionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppAssignedTargetingOptionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppAssignedTargetingOptionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AppAssignedTargetingOptionDetails>() {
           @Override
           public void write(JsonWriter out, AppAssignedTargetingOptionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppAssignedTargetingOptionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppAssignedTargetingOptionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppAssignedTargetingOptionDetails
   * @throws IOException if the JSON string is invalid with respect to AppAssignedTargetingOptionDetails
   */
  public static AppAssignedTargetingOptionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppAssignedTargetingOptionDetails.class);
  }

  /**
   * Convert an instance of AppAssignedTargetingOptionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

