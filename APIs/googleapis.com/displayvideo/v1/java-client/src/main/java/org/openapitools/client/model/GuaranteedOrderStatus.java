/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The status settings of the guaranteed order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GuaranteedOrderStatus {
  /**
   * Output only. The configuration status of the guaranteed order. Acceptable values are &#x60;PENDING&#x60; and &#x60;COMPLETED&#x60;. A guaranteed order must be configured (fill in the required fields, choose creatives, and select a default campaign) before it can serve. Currently the configuration action can only be performed via UI.
   */
  @JsonAdapter(ConfigStatusEnum.Adapter.class)
  public enum ConfigStatusEnum {
    GUARANTEED_ORDER_CONFIG_STATUS_UNSPECIFIED("GUARANTEED_ORDER_CONFIG_STATUS_UNSPECIFIED"),
    
    PENDING("PENDING"),
    
    COMPLETED("COMPLETED");

    private String value;

    ConfigStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfigStatusEnum fromValue(String value) {
      for (ConfigStatusEnum b : ConfigStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfigStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfigStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfigStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfigStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConfigStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONFIG_STATUS = "configStatus";
  @SerializedName(SERIALIZED_NAME_CONFIG_STATUS)
  private ConfigStatusEnum configStatus;

  public static final String SERIALIZED_NAME_ENTITY_PAUSE_REASON = "entityPauseReason";
  @SerializedName(SERIALIZED_NAME_ENTITY_PAUSE_REASON)
  private String entityPauseReason;

  /**
   * Whether or not the guaranteed order is servable. Acceptable values are &#x60;ENTITY_STATUS_ACTIVE&#x60;, &#x60;ENTITY_STATUS_ARCHIVED&#x60;, and &#x60;ENTITY_STATUS_PAUSED&#x60;. Default value is &#x60;ENTITY_STATUS_ACTIVE&#x60;.
   */
  @JsonAdapter(EntityStatusEnum.Adapter.class)
  public enum EntityStatusEnum {
    UNSPECIFIED("ENTITY_STATUS_UNSPECIFIED"),
    
    ACTIVE("ENTITY_STATUS_ACTIVE"),
    
    ARCHIVED("ENTITY_STATUS_ARCHIVED"),
    
    DRAFT("ENTITY_STATUS_DRAFT"),
    
    PAUSED("ENTITY_STATUS_PAUSED"),
    
    SCHEDULED_FOR_DELETION("ENTITY_STATUS_SCHEDULED_FOR_DELETION");

    private String value;

    EntityStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityStatusEnum fromValue(String value) {
      for (EntityStatusEnum b : EntityStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_STATUS = "entityStatus";
  @SerializedName(SERIALIZED_NAME_ENTITY_STATUS)
  private EntityStatusEnum entityStatus;

  public GuaranteedOrderStatus() {
  }

  public GuaranteedOrderStatus(
     ConfigStatusEnum configStatus
  ) {
    this();
    this.configStatus = configStatus;
  }

  /**
   * Output only. The configuration status of the guaranteed order. Acceptable values are &#x60;PENDING&#x60; and &#x60;COMPLETED&#x60;. A guaranteed order must be configured (fill in the required fields, choose creatives, and select a default campaign) before it can serve. Currently the configuration action can only be performed via UI.
   * @return configStatus
   */
  @javax.annotation.Nullable
  public ConfigStatusEnum getConfigStatus() {
    return configStatus;
  }



  public GuaranteedOrderStatus entityPauseReason(String entityPauseReason) {
    this.entityPauseReason = entityPauseReason;
    return this;
  }

  /**
   * The user-provided reason for pausing this guaranteed order. Must be UTF-8 encoded with a maximum length of 100 bytes. Only applicable when entity_status is set to &#x60;ENTITY_STATUS_PAUSED&#x60;.
   * @return entityPauseReason
   */
  @javax.annotation.Nullable
  public String getEntityPauseReason() {
    return entityPauseReason;
  }

  public void setEntityPauseReason(String entityPauseReason) {
    this.entityPauseReason = entityPauseReason;
  }


  public GuaranteedOrderStatus entityStatus(EntityStatusEnum entityStatus) {
    this.entityStatus = entityStatus;
    return this;
  }

  /**
   * Whether or not the guaranteed order is servable. Acceptable values are &#x60;ENTITY_STATUS_ACTIVE&#x60;, &#x60;ENTITY_STATUS_ARCHIVED&#x60;, and &#x60;ENTITY_STATUS_PAUSED&#x60;. Default value is &#x60;ENTITY_STATUS_ACTIVE&#x60;.
   * @return entityStatus
   */
  @javax.annotation.Nullable
  public EntityStatusEnum getEntityStatus() {
    return entityStatus;
  }

  public void setEntityStatus(EntityStatusEnum entityStatus) {
    this.entityStatus = entityStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GuaranteedOrderStatus guaranteedOrderStatus = (GuaranteedOrderStatus) o;
    return Objects.equals(this.configStatus, guaranteedOrderStatus.configStatus) &&
        Objects.equals(this.entityPauseReason, guaranteedOrderStatus.entityPauseReason) &&
        Objects.equals(this.entityStatus, guaranteedOrderStatus.entityStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configStatus, entityPauseReason, entityStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GuaranteedOrderStatus {\n");
    sb.append("    configStatus: ").append(toIndentedString(configStatus)).append("\n");
    sb.append("    entityPauseReason: ").append(toIndentedString(entityPauseReason)).append("\n");
    sb.append("    entityStatus: ").append(toIndentedString(entityStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configStatus");
    openapiFields.add("entityPauseReason");
    openapiFields.add("entityStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GuaranteedOrderStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GuaranteedOrderStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GuaranteedOrderStatus is not found in the empty JSON string", GuaranteedOrderStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GuaranteedOrderStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GuaranteedOrderStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("configStatus") != null && !jsonObj.get("configStatus").isJsonNull()) && !jsonObj.get("configStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configStatus").toString()));
      }
      // validate the optional field `configStatus`
      if (jsonObj.get("configStatus") != null && !jsonObj.get("configStatus").isJsonNull()) {
        ConfigStatusEnum.validateJsonElement(jsonObj.get("configStatus"));
      }
      if ((jsonObj.get("entityPauseReason") != null && !jsonObj.get("entityPauseReason").isJsonNull()) && !jsonObj.get("entityPauseReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityPauseReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityPauseReason").toString()));
      }
      if ((jsonObj.get("entityStatus") != null && !jsonObj.get("entityStatus").isJsonNull()) && !jsonObj.get("entityStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityStatus").toString()));
      }
      // validate the optional field `entityStatus`
      if (jsonObj.get("entityStatus") != null && !jsonObj.get("entityStatus").isJsonNull()) {
        EntityStatusEnum.validateJsonElement(jsonObj.get("entityStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GuaranteedOrderStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GuaranteedOrderStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GuaranteedOrderStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GuaranteedOrderStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<GuaranteedOrderStatus>() {
           @Override
           public void write(JsonWriter out, GuaranteedOrderStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GuaranteedOrderStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GuaranteedOrderStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GuaranteedOrderStatus
   * @throws IOException if the JSON string is invalid with respect to GuaranteedOrderStatus
   */
  public static GuaranteedOrderStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GuaranteedOrderStatus.class);
  }

  /**
   * Convert an instance of GuaranteedOrderStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

