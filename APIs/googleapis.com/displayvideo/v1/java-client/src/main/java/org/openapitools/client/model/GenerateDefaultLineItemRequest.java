/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MobileApp;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for LineItemService.GenerateDefaultLineItem.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GenerateDefaultLineItemRequest {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_INSERTION_ORDER_ID = "insertionOrderId";
  @SerializedName(SERIALIZED_NAME_INSERTION_ORDER_ID)
  private String insertionOrderId;

  /**
   * Required. The type of the line item.
   */
  @JsonAdapter(LineItemTypeEnum.Adapter.class)
  public enum LineItemTypeEnum {
    UNSPECIFIED("LINE_ITEM_TYPE_UNSPECIFIED"),
    
    DISPLAY_DEFAULT("LINE_ITEM_TYPE_DISPLAY_DEFAULT"),
    
    DISPLAY_MOBILE_APP_INSTALL("LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INSTALL"),
    
    VIDEO_DEFAULT("LINE_ITEM_TYPE_VIDEO_DEFAULT"),
    
    VIDEO_MOBILE_APP_INSTALL("LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INSTALL"),
    
    DISPLAY_MOBILE_APP_INVENTORY("LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INVENTORY"),
    
    VIDEO_MOBILE_APP_INVENTORY("LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INVENTORY"),
    
    AUDIO_DEFAULT("LINE_ITEM_TYPE_AUDIO_DEFAULT"),
    
    VIDEO_OVER_THE_TOP("LINE_ITEM_TYPE_VIDEO_OVER_THE_TOP"),
    
    DISPLAY_OUT_OF_HOME("LINE_ITEM_TYPE_DISPLAY_OUT_OF_HOME"),
    
    VIDEO_OUT_OF_HOME("LINE_ITEM_TYPE_VIDEO_OUT_OF_HOME");

    private String value;

    LineItemTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LineItemTypeEnum fromValue(String value) {
      for (LineItemTypeEnum b : LineItemTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LineItemTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LineItemTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LineItemTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LineItemTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LineItemTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINE_ITEM_TYPE = "lineItemType";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_TYPE)
  private LineItemTypeEnum lineItemType;

  public static final String SERIALIZED_NAME_MOBILE_APP = "mobileApp";
  @SerializedName(SERIALIZED_NAME_MOBILE_APP)
  private MobileApp mobileApp;

  public GenerateDefaultLineItemRequest() {
  }

  public GenerateDefaultLineItemRequest displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The display name of the line item. Must be UTF-8 encoded with a maximum size of 240 bytes.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GenerateDefaultLineItemRequest insertionOrderId(String insertionOrderId) {
    this.insertionOrderId = insertionOrderId;
    return this;
  }

  /**
   * Required. The unique ID of the insertion order that the line item belongs to.
   * @return insertionOrderId
   */
  @javax.annotation.Nullable
  public String getInsertionOrderId() {
    return insertionOrderId;
  }

  public void setInsertionOrderId(String insertionOrderId) {
    this.insertionOrderId = insertionOrderId;
  }


  public GenerateDefaultLineItemRequest lineItemType(LineItemTypeEnum lineItemType) {
    this.lineItemType = lineItemType;
    return this;
  }

  /**
   * Required. The type of the line item.
   * @return lineItemType
   */
  @javax.annotation.Nullable
  public LineItemTypeEnum getLineItemType() {
    return lineItemType;
  }

  public void setLineItemType(LineItemTypeEnum lineItemType) {
    this.lineItemType = lineItemType;
  }


  public GenerateDefaultLineItemRequest mobileApp(MobileApp mobileApp) {
    this.mobileApp = mobileApp;
    return this;
  }

  /**
   * Get mobileApp
   * @return mobileApp
   */
  @javax.annotation.Nullable
  public MobileApp getMobileApp() {
    return mobileApp;
  }

  public void setMobileApp(MobileApp mobileApp) {
    this.mobileApp = mobileApp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateDefaultLineItemRequest generateDefaultLineItemRequest = (GenerateDefaultLineItemRequest) o;
    return Objects.equals(this.displayName, generateDefaultLineItemRequest.displayName) &&
        Objects.equals(this.insertionOrderId, generateDefaultLineItemRequest.insertionOrderId) &&
        Objects.equals(this.lineItemType, generateDefaultLineItemRequest.lineItemType) &&
        Objects.equals(this.mobileApp, generateDefaultLineItemRequest.mobileApp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, insertionOrderId, lineItemType, mobileApp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateDefaultLineItemRequest {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    insertionOrderId: ").append(toIndentedString(insertionOrderId)).append("\n");
    sb.append("    lineItemType: ").append(toIndentedString(lineItemType)).append("\n");
    sb.append("    mobileApp: ").append(toIndentedString(mobileApp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("insertionOrderId");
    openapiFields.add("lineItemType");
    openapiFields.add("mobileApp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenerateDefaultLineItemRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenerateDefaultLineItemRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateDefaultLineItemRequest is not found in the empty JSON string", GenerateDefaultLineItemRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenerateDefaultLineItemRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateDefaultLineItemRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("insertionOrderId") != null && !jsonObj.get("insertionOrderId").isJsonNull()) && !jsonObj.get("insertionOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insertionOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insertionOrderId").toString()));
      }
      if ((jsonObj.get("lineItemType") != null && !jsonObj.get("lineItemType").isJsonNull()) && !jsonObj.get("lineItemType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItemType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineItemType").toString()));
      }
      // validate the optional field `lineItemType`
      if (jsonObj.get("lineItemType") != null && !jsonObj.get("lineItemType").isJsonNull()) {
        LineItemTypeEnum.validateJsonElement(jsonObj.get("lineItemType"));
      }
      // validate the optional field `mobileApp`
      if (jsonObj.get("mobileApp") != null && !jsonObj.get("mobileApp").isJsonNull()) {
        MobileApp.validateJsonElement(jsonObj.get("mobileApp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateDefaultLineItemRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateDefaultLineItemRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateDefaultLineItemRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateDefaultLineItemRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateDefaultLineItemRequest>() {
           @Override
           public void write(JsonWriter out, GenerateDefaultLineItemRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateDefaultLineItemRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenerateDefaultLineItemRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenerateDefaultLineItemRequest
   * @throws IOException if the JSON string is invalid with respect to GenerateDefaultLineItemRequest
   */
  public static GenerateDefaultLineItemRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateDefaultLineItemRequest.class);
  }

  /**
   * Convert an instance of GenerateDefaultLineItemRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

