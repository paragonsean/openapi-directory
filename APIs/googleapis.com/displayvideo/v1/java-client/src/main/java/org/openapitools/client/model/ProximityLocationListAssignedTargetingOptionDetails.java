/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Targeting details for proximity location list. This will be populated in the details field of an AssignedTargetingOption when targeting_type is &#x60;TARGETING_TYPE_PROXIMITY_LOCATION_LIST&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProximityLocationListAssignedTargetingOptionDetails {
  public static final String SERIALIZED_NAME_PROXIMITY_LOCATION_LIST_ID = "proximityLocationListId";
  @SerializedName(SERIALIZED_NAME_PROXIMITY_LOCATION_LIST_ID)
  private String proximityLocationListId;

  /**
   * Required. Radius range for proximity location list. This represents the size of the area around a chosen location that will be targeted. &#x60;All&#x60; proximity location targeting under a single resource must have the same radius range value. Set this value to match any existing targeting. If updated, this field will change the radius range for all proximity targeting under the resource.
   */
  @JsonAdapter(ProximityRadiusRangeEnum.Adapter.class)
  public enum ProximityRadiusRangeEnum {
    UNSPECIFIED("PROXIMITY_RADIUS_RANGE_UNSPECIFIED"),
    
    SMALL("PROXIMITY_RADIUS_RANGE_SMALL"),
    
    MEDIUM("PROXIMITY_RADIUS_RANGE_MEDIUM"),
    
    LARGE("PROXIMITY_RADIUS_RANGE_LARGE");

    private String value;

    ProximityRadiusRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProximityRadiusRangeEnum fromValue(String value) {
      for (ProximityRadiusRangeEnum b : ProximityRadiusRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProximityRadiusRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProximityRadiusRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProximityRadiusRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProximityRadiusRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProximityRadiusRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROXIMITY_RADIUS_RANGE = "proximityRadiusRange";
  @SerializedName(SERIALIZED_NAME_PROXIMITY_RADIUS_RANGE)
  private ProximityRadiusRangeEnum proximityRadiusRange;

  public ProximityLocationListAssignedTargetingOptionDetails() {
  }

  public ProximityLocationListAssignedTargetingOptionDetails proximityLocationListId(String proximityLocationListId) {
    this.proximityLocationListId = proximityLocationListId;
    return this;
  }

  /**
   * Required. ID of the proximity location list. Should refer to the location_list_id field of a LocationList resource whose type is &#x60;TARGETING_LOCATION_TYPE_PROXIMITY&#x60;.
   * @return proximityLocationListId
   */
  @javax.annotation.Nullable
  public String getProximityLocationListId() {
    return proximityLocationListId;
  }

  public void setProximityLocationListId(String proximityLocationListId) {
    this.proximityLocationListId = proximityLocationListId;
  }


  public ProximityLocationListAssignedTargetingOptionDetails proximityRadiusRange(ProximityRadiusRangeEnum proximityRadiusRange) {
    this.proximityRadiusRange = proximityRadiusRange;
    return this;
  }

  /**
   * Required. Radius range for proximity location list. This represents the size of the area around a chosen location that will be targeted. &#x60;All&#x60; proximity location targeting under a single resource must have the same radius range value. Set this value to match any existing targeting. If updated, this field will change the radius range for all proximity targeting under the resource.
   * @return proximityRadiusRange
   */
  @javax.annotation.Nullable
  public ProximityRadiusRangeEnum getProximityRadiusRange() {
    return proximityRadiusRange;
  }

  public void setProximityRadiusRange(ProximityRadiusRangeEnum proximityRadiusRange) {
    this.proximityRadiusRange = proximityRadiusRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProximityLocationListAssignedTargetingOptionDetails proximityLocationListAssignedTargetingOptionDetails = (ProximityLocationListAssignedTargetingOptionDetails) o;
    return Objects.equals(this.proximityLocationListId, proximityLocationListAssignedTargetingOptionDetails.proximityLocationListId) &&
        Objects.equals(this.proximityRadiusRange, proximityLocationListAssignedTargetingOptionDetails.proximityRadiusRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(proximityLocationListId, proximityRadiusRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProximityLocationListAssignedTargetingOptionDetails {\n");
    sb.append("    proximityLocationListId: ").append(toIndentedString(proximityLocationListId)).append("\n");
    sb.append("    proximityRadiusRange: ").append(toIndentedString(proximityRadiusRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("proximityLocationListId");
    openapiFields.add("proximityRadiusRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProximityLocationListAssignedTargetingOptionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProximityLocationListAssignedTargetingOptionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProximityLocationListAssignedTargetingOptionDetails is not found in the empty JSON string", ProximityLocationListAssignedTargetingOptionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProximityLocationListAssignedTargetingOptionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProximityLocationListAssignedTargetingOptionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("proximityLocationListId") != null && !jsonObj.get("proximityLocationListId").isJsonNull()) && !jsonObj.get("proximityLocationListId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proximityLocationListId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proximityLocationListId").toString()));
      }
      if ((jsonObj.get("proximityRadiusRange") != null && !jsonObj.get("proximityRadiusRange").isJsonNull()) && !jsonObj.get("proximityRadiusRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proximityRadiusRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proximityRadiusRange").toString()));
      }
      // validate the optional field `proximityRadiusRange`
      if (jsonObj.get("proximityRadiusRange") != null && !jsonObj.get("proximityRadiusRange").isJsonNull()) {
        ProximityRadiusRangeEnum.validateJsonElement(jsonObj.get("proximityRadiusRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProximityLocationListAssignedTargetingOptionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProximityLocationListAssignedTargetingOptionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProximityLocationListAssignedTargetingOptionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProximityLocationListAssignedTargetingOptionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ProximityLocationListAssignedTargetingOptionDetails>() {
           @Override
           public void write(JsonWriter out, ProximityLocationListAssignedTargetingOptionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProximityLocationListAssignedTargetingOptionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProximityLocationListAssignedTargetingOptionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProximityLocationListAssignedTargetingOptionDetails
   * @throws IOException if the JSON string is invalid with respect to ProximityLocationListAssignedTargetingOptionDetails
   */
  public static ProximityLocationListAssignedTargetingOptionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProximityLocationListAssignedTargetingOptionDetails.class);
  }

  /**
   * Convert an instance of ProximityLocationListAssignedTargetingOptionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

