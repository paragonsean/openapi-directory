/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contact information defining a Customer Match audience member.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContactInfo {
  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_HASHED_EMAILS = "hashedEmails";
  @SerializedName(SERIALIZED_NAME_HASHED_EMAILS)
  private List<String> hashedEmails = new ArrayList<>();

  public static final String SERIALIZED_NAME_HASHED_FIRST_NAME = "hashedFirstName";
  @SerializedName(SERIALIZED_NAME_HASHED_FIRST_NAME)
  private String hashedFirstName;

  public static final String SERIALIZED_NAME_HASHED_LAST_NAME = "hashedLastName";
  @SerializedName(SERIALIZED_NAME_HASHED_LAST_NAME)
  private String hashedLastName;

  public static final String SERIALIZED_NAME_HASHED_PHONE_NUMBERS = "hashedPhoneNumbers";
  @SerializedName(SERIALIZED_NAME_HASHED_PHONE_NUMBERS)
  private List<String> hashedPhoneNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZIP_CODES = "zipCodes";
  @SerializedName(SERIALIZED_NAME_ZIP_CODES)
  private List<String> zipCodes = new ArrayList<>();

  public ContactInfo() {
  }

  public ContactInfo countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Country code of the member. Must also be set with the following fields: * hashed_first_name * hashed_last_name * zip_codes
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public ContactInfo hashedEmails(List<String> hashedEmails) {
    this.hashedEmails = hashedEmails;
    return this;
  }

  public ContactInfo addHashedEmailsItem(String hashedEmailsItem) {
    if (this.hashedEmails == null) {
      this.hashedEmails = new ArrayList<>();
    }
    this.hashedEmails.add(hashedEmailsItem);
    return this;
  }

  /**
   * A list of SHA256 hashed email of the member. Before hashing, remove all whitespace and make sure the string is all lowercase.
   * @return hashedEmails
   */
  @javax.annotation.Nullable
  public List<String> getHashedEmails() {
    return hashedEmails;
  }

  public void setHashedEmails(List<String> hashedEmails) {
    this.hashedEmails = hashedEmails;
  }


  public ContactInfo hashedFirstName(String hashedFirstName) {
    this.hashedFirstName = hashedFirstName;
    return this;
  }

  /**
   * SHA256 hashed first name of the member. Before hashing, remove all whitespace and make sure the string is all lowercase. Must also be set with the following fields: * country_code * hashed_last_name * zip_codes
   * @return hashedFirstName
   */
  @javax.annotation.Nullable
  public String getHashedFirstName() {
    return hashedFirstName;
  }

  public void setHashedFirstName(String hashedFirstName) {
    this.hashedFirstName = hashedFirstName;
  }


  public ContactInfo hashedLastName(String hashedLastName) {
    this.hashedLastName = hashedLastName;
    return this;
  }

  /**
   * SHA256 hashed last name of the member. Before hashing, remove all whitespace and make sure the string is all lowercase. Must also be set with the following fields: * country_code * hashed_first_name * zip_codes
   * @return hashedLastName
   */
  @javax.annotation.Nullable
  public String getHashedLastName() {
    return hashedLastName;
  }

  public void setHashedLastName(String hashedLastName) {
    this.hashedLastName = hashedLastName;
  }


  public ContactInfo hashedPhoneNumbers(List<String> hashedPhoneNumbers) {
    this.hashedPhoneNumbers = hashedPhoneNumbers;
    return this;
  }

  public ContactInfo addHashedPhoneNumbersItem(String hashedPhoneNumbersItem) {
    if (this.hashedPhoneNumbers == null) {
      this.hashedPhoneNumbers = new ArrayList<>();
    }
    this.hashedPhoneNumbers.add(hashedPhoneNumbersItem);
    return this;
  }

  /**
   * A list of SHA256 hashed phone numbers of the member. Before hashing, all phone numbers must be formatted using the [E.164 format](//en.wikipedia.org/wiki/E.164) and include the country calling code.
   * @return hashedPhoneNumbers
   */
  @javax.annotation.Nullable
  public List<String> getHashedPhoneNumbers() {
    return hashedPhoneNumbers;
  }

  public void setHashedPhoneNumbers(List<String> hashedPhoneNumbers) {
    this.hashedPhoneNumbers = hashedPhoneNumbers;
  }


  public ContactInfo zipCodes(List<String> zipCodes) {
    this.zipCodes = zipCodes;
    return this;
  }

  public ContactInfo addZipCodesItem(String zipCodesItem) {
    if (this.zipCodes == null) {
      this.zipCodes = new ArrayList<>();
    }
    this.zipCodes.add(zipCodesItem);
    return this;
  }

  /**
   * A list of zip codes of the member. Must also be set with the following fields: * country_code * hashed_first_name * hashed_last_name
   * @return zipCodes
   */
  @javax.annotation.Nullable
  public List<String> getZipCodes() {
    return zipCodes;
  }

  public void setZipCodes(List<String> zipCodes) {
    this.zipCodes = zipCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactInfo contactInfo = (ContactInfo) o;
    return Objects.equals(this.countryCode, contactInfo.countryCode) &&
        Objects.equals(this.hashedEmails, contactInfo.hashedEmails) &&
        Objects.equals(this.hashedFirstName, contactInfo.hashedFirstName) &&
        Objects.equals(this.hashedLastName, contactInfo.hashedLastName) &&
        Objects.equals(this.hashedPhoneNumbers, contactInfo.hashedPhoneNumbers) &&
        Objects.equals(this.zipCodes, contactInfo.zipCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCode, hashedEmails, hashedFirstName, hashedLastName, hashedPhoneNumbers, zipCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactInfo {\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    hashedEmails: ").append(toIndentedString(hashedEmails)).append("\n");
    sb.append("    hashedFirstName: ").append(toIndentedString(hashedFirstName)).append("\n");
    sb.append("    hashedLastName: ").append(toIndentedString(hashedLastName)).append("\n");
    sb.append("    hashedPhoneNumbers: ").append(toIndentedString(hashedPhoneNumbers)).append("\n");
    sb.append("    zipCodes: ").append(toIndentedString(zipCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countryCode");
    openapiFields.add("hashedEmails");
    openapiFields.add("hashedFirstName");
    openapiFields.add("hashedLastName");
    openapiFields.add("hashedPhoneNumbers");
    openapiFields.add("zipCodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContactInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContactInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactInfo is not found in the empty JSON string", ContactInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContactInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hashedEmails") != null && !jsonObj.get("hashedEmails").isJsonNull() && !jsonObj.get("hashedEmails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashedEmails` to be an array in the JSON string but got `%s`", jsonObj.get("hashedEmails").toString()));
      }
      if ((jsonObj.get("hashedFirstName") != null && !jsonObj.get("hashedFirstName").isJsonNull()) && !jsonObj.get("hashedFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashedFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashedFirstName").toString()));
      }
      if ((jsonObj.get("hashedLastName") != null && !jsonObj.get("hashedLastName").isJsonNull()) && !jsonObj.get("hashedLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashedLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashedLastName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hashedPhoneNumbers") != null && !jsonObj.get("hashedPhoneNumbers").isJsonNull() && !jsonObj.get("hashedPhoneNumbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashedPhoneNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("hashedPhoneNumbers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("zipCodes") != null && !jsonObj.get("zipCodes").isJsonNull() && !jsonObj.get("zipCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCodes` to be an array in the JSON string but got `%s`", jsonObj.get("zipCodes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactInfo>() {
           @Override
           public void write(JsonWriter out, ContactInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContactInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContactInfo
   * @throws IOException if the JSON string is invalid with respect to ContactInfo
   */
  public static ContactInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactInfo.class);
  }

  /**
   * Convert an instance of ContactInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

