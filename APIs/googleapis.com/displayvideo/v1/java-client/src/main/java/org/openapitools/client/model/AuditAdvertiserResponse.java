/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for AdvertiserService.AuditAdvertiser.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuditAdvertiserResponse {
  public static final String SERIALIZED_NAME_AD_GROUP_CRITERIA_COUNT = "adGroupCriteriaCount";
  @SerializedName(SERIALIZED_NAME_AD_GROUP_CRITERIA_COUNT)
  private String adGroupCriteriaCount;

  public static final String SERIALIZED_NAME_CAMPAIGN_CRITERIA_COUNT = "campaignCriteriaCount";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_CRITERIA_COUNT)
  private String campaignCriteriaCount;

  public static final String SERIALIZED_NAME_CHANNELS_COUNT = "channelsCount";
  @SerializedName(SERIALIZED_NAME_CHANNELS_COUNT)
  private String channelsCount;

  public static final String SERIALIZED_NAME_NEGATIVE_KEYWORD_LISTS_COUNT = "negativeKeywordListsCount";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_KEYWORD_LISTS_COUNT)
  private String negativeKeywordListsCount;

  public static final String SERIALIZED_NAME_NEGATIVELY_TARGETED_CHANNELS_COUNT = "negativelyTargetedChannelsCount";
  @SerializedName(SERIALIZED_NAME_NEGATIVELY_TARGETED_CHANNELS_COUNT)
  private String negativelyTargetedChannelsCount;

  public static final String SERIALIZED_NAME_USED_CAMPAIGNS_COUNT = "usedCampaignsCount";
  @SerializedName(SERIALIZED_NAME_USED_CAMPAIGNS_COUNT)
  private String usedCampaignsCount;

  public static final String SERIALIZED_NAME_USED_INSERTION_ORDERS_COUNT = "usedInsertionOrdersCount";
  @SerializedName(SERIALIZED_NAME_USED_INSERTION_ORDERS_COUNT)
  private String usedInsertionOrdersCount;

  public static final String SERIALIZED_NAME_USED_LINE_ITEMS_COUNT = "usedLineItemsCount";
  @SerializedName(SERIALIZED_NAME_USED_LINE_ITEMS_COUNT)
  private String usedLineItemsCount;

  public AuditAdvertiserResponse() {
  }

  public AuditAdvertiserResponse adGroupCriteriaCount(String adGroupCriteriaCount) {
    this.adGroupCriteriaCount = adGroupCriteriaCount;
    return this;
  }

  /**
   * The number of individual targeting options from the following targeting types that are assigned to a line item under this advertiser. These individual targeting options count towards the limit of 4500000 ad group targeting options per advertiser. Qualifying Targeting types: * Channels, URLs, apps, and collections * Demographic * Google Audiences, including Affinity, Custom Affinity, and In-market audiences * Inventory source * Keyword * Mobile app category * User lists * Video targeting * Viewability
   * @return adGroupCriteriaCount
   */
  @javax.annotation.Nullable
  public String getAdGroupCriteriaCount() {
    return adGroupCriteriaCount;
  }

  public void setAdGroupCriteriaCount(String adGroupCriteriaCount) {
    this.adGroupCriteriaCount = adGroupCriteriaCount;
  }


  public AuditAdvertiserResponse campaignCriteriaCount(String campaignCriteriaCount) {
    this.campaignCriteriaCount = campaignCriteriaCount;
    return this;
  }

  /**
   * The number of individual targeting options from the following targeting types that are assigned to a line item under this advertiser. These individual targeting options count towards the limit of 900000 campaign targeting options per advertiser. Qualifying Targeting types: * Position * Browser * Connection speed * Day and time * Device and operating system * Digital content label * Sensitive categories * Environment * Geography, including business chains and proximity * ISP * Language * Third-party verification
   * @return campaignCriteriaCount
   */
  @javax.annotation.Nullable
  public String getCampaignCriteriaCount() {
    return campaignCriteriaCount;
  }

  public void setCampaignCriteriaCount(String campaignCriteriaCount) {
    this.campaignCriteriaCount = campaignCriteriaCount;
  }


  public AuditAdvertiserResponse channelsCount(String channelsCount) {
    this.channelsCount = channelsCount;
    return this;
  }

  /**
   * The number of channels created under this advertiser. These channels count towards the limit of 1000 channels per advertiser.
   * @return channelsCount
   */
  @javax.annotation.Nullable
  public String getChannelsCount() {
    return channelsCount;
  }

  public void setChannelsCount(String channelsCount) {
    this.channelsCount = channelsCount;
  }


  public AuditAdvertiserResponse negativeKeywordListsCount(String negativeKeywordListsCount) {
    this.negativeKeywordListsCount = negativeKeywordListsCount;
    return this;
  }

  /**
   * The number of negative keyword lists created under this advertiser. These negative keyword lists count towards the limit of 20 negative keyword lists per advertiser.
   * @return negativeKeywordListsCount
   */
  @javax.annotation.Nullable
  public String getNegativeKeywordListsCount() {
    return negativeKeywordListsCount;
  }

  public void setNegativeKeywordListsCount(String negativeKeywordListsCount) {
    this.negativeKeywordListsCount = negativeKeywordListsCount;
  }


  public AuditAdvertiserResponse negativelyTargetedChannelsCount(String negativelyTargetedChannelsCount) {
    this.negativelyTargetedChannelsCount = negativelyTargetedChannelsCount;
    return this;
  }

  /**
   * The number of negatively targeted channels created under this advertiser. These negatively targeted channels count towards the limit of 5 negatively targeted channels per advertiser.
   * @return negativelyTargetedChannelsCount
   */
  @javax.annotation.Nullable
  public String getNegativelyTargetedChannelsCount() {
    return negativelyTargetedChannelsCount;
  }

  public void setNegativelyTargetedChannelsCount(String negativelyTargetedChannelsCount) {
    this.negativelyTargetedChannelsCount = negativelyTargetedChannelsCount;
  }


  public AuditAdvertiserResponse usedCampaignsCount(String usedCampaignsCount) {
    this.usedCampaignsCount = usedCampaignsCount;
    return this;
  }

  /**
   * The number of ACTIVE and PAUSED campaigns under this advertiser. These campaigns count towards the limit of 9999 campaigns per advertiser.
   * @return usedCampaignsCount
   */
  @javax.annotation.Nullable
  public String getUsedCampaignsCount() {
    return usedCampaignsCount;
  }

  public void setUsedCampaignsCount(String usedCampaignsCount) {
    this.usedCampaignsCount = usedCampaignsCount;
  }


  public AuditAdvertiserResponse usedInsertionOrdersCount(String usedInsertionOrdersCount) {
    this.usedInsertionOrdersCount = usedInsertionOrdersCount;
    return this;
  }

  /**
   * The number of ACTIVE, PAUSED and DRAFT insertion orders under this advertiser. These insertion orders count towards the limit of 9999 insertion orders per advertiser.
   * @return usedInsertionOrdersCount
   */
  @javax.annotation.Nullable
  public String getUsedInsertionOrdersCount() {
    return usedInsertionOrdersCount;
  }

  public void setUsedInsertionOrdersCount(String usedInsertionOrdersCount) {
    this.usedInsertionOrdersCount = usedInsertionOrdersCount;
  }


  public AuditAdvertiserResponse usedLineItemsCount(String usedLineItemsCount) {
    this.usedLineItemsCount = usedLineItemsCount;
    return this;
  }

  /**
   * The number of ACTIVE, PAUSED, and DRAFT line items under this advertiser. These line items count towards the limit of 9999 line items per advertiser.
   * @return usedLineItemsCount
   */
  @javax.annotation.Nullable
  public String getUsedLineItemsCount() {
    return usedLineItemsCount;
  }

  public void setUsedLineItemsCount(String usedLineItemsCount) {
    this.usedLineItemsCount = usedLineItemsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditAdvertiserResponse auditAdvertiserResponse = (AuditAdvertiserResponse) o;
    return Objects.equals(this.adGroupCriteriaCount, auditAdvertiserResponse.adGroupCriteriaCount) &&
        Objects.equals(this.campaignCriteriaCount, auditAdvertiserResponse.campaignCriteriaCount) &&
        Objects.equals(this.channelsCount, auditAdvertiserResponse.channelsCount) &&
        Objects.equals(this.negativeKeywordListsCount, auditAdvertiserResponse.negativeKeywordListsCount) &&
        Objects.equals(this.negativelyTargetedChannelsCount, auditAdvertiserResponse.negativelyTargetedChannelsCount) &&
        Objects.equals(this.usedCampaignsCount, auditAdvertiserResponse.usedCampaignsCount) &&
        Objects.equals(this.usedInsertionOrdersCount, auditAdvertiserResponse.usedInsertionOrdersCount) &&
        Objects.equals(this.usedLineItemsCount, auditAdvertiserResponse.usedLineItemsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adGroupCriteriaCount, campaignCriteriaCount, channelsCount, negativeKeywordListsCount, negativelyTargetedChannelsCount, usedCampaignsCount, usedInsertionOrdersCount, usedLineItemsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditAdvertiserResponse {\n");
    sb.append("    adGroupCriteriaCount: ").append(toIndentedString(adGroupCriteriaCount)).append("\n");
    sb.append("    campaignCriteriaCount: ").append(toIndentedString(campaignCriteriaCount)).append("\n");
    sb.append("    channelsCount: ").append(toIndentedString(channelsCount)).append("\n");
    sb.append("    negativeKeywordListsCount: ").append(toIndentedString(negativeKeywordListsCount)).append("\n");
    sb.append("    negativelyTargetedChannelsCount: ").append(toIndentedString(negativelyTargetedChannelsCount)).append("\n");
    sb.append("    usedCampaignsCount: ").append(toIndentedString(usedCampaignsCount)).append("\n");
    sb.append("    usedInsertionOrdersCount: ").append(toIndentedString(usedInsertionOrdersCount)).append("\n");
    sb.append("    usedLineItemsCount: ").append(toIndentedString(usedLineItemsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adGroupCriteriaCount");
    openapiFields.add("campaignCriteriaCount");
    openapiFields.add("channelsCount");
    openapiFields.add("negativeKeywordListsCount");
    openapiFields.add("negativelyTargetedChannelsCount");
    openapiFields.add("usedCampaignsCount");
    openapiFields.add("usedInsertionOrdersCount");
    openapiFields.add("usedLineItemsCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuditAdvertiserResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditAdvertiserResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditAdvertiserResponse is not found in the empty JSON string", AuditAdvertiserResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuditAdvertiserResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuditAdvertiserResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adGroupCriteriaCount") != null && !jsonObj.get("adGroupCriteriaCount").isJsonNull()) && !jsonObj.get("adGroupCriteriaCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adGroupCriteriaCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adGroupCriteriaCount").toString()));
      }
      if ((jsonObj.get("campaignCriteriaCount") != null && !jsonObj.get("campaignCriteriaCount").isJsonNull()) && !jsonObj.get("campaignCriteriaCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignCriteriaCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignCriteriaCount").toString()));
      }
      if ((jsonObj.get("channelsCount") != null && !jsonObj.get("channelsCount").isJsonNull()) && !jsonObj.get("channelsCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelsCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelsCount").toString()));
      }
      if ((jsonObj.get("negativeKeywordListsCount") != null && !jsonObj.get("negativeKeywordListsCount").isJsonNull()) && !jsonObj.get("negativeKeywordListsCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negativeKeywordListsCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negativeKeywordListsCount").toString()));
      }
      if ((jsonObj.get("negativelyTargetedChannelsCount") != null && !jsonObj.get("negativelyTargetedChannelsCount").isJsonNull()) && !jsonObj.get("negativelyTargetedChannelsCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negativelyTargetedChannelsCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negativelyTargetedChannelsCount").toString()));
      }
      if ((jsonObj.get("usedCampaignsCount") != null && !jsonObj.get("usedCampaignsCount").isJsonNull()) && !jsonObj.get("usedCampaignsCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usedCampaignsCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usedCampaignsCount").toString()));
      }
      if ((jsonObj.get("usedInsertionOrdersCount") != null && !jsonObj.get("usedInsertionOrdersCount").isJsonNull()) && !jsonObj.get("usedInsertionOrdersCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usedInsertionOrdersCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usedInsertionOrdersCount").toString()));
      }
      if ((jsonObj.get("usedLineItemsCount") != null && !jsonObj.get("usedLineItemsCount").isJsonNull()) && !jsonObj.get("usedLineItemsCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usedLineItemsCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usedLineItemsCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditAdvertiserResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditAdvertiserResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditAdvertiserResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditAdvertiserResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditAdvertiserResponse>() {
           @Override
           public void write(JsonWriter out, AuditAdvertiserResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditAdvertiserResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuditAdvertiserResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuditAdvertiserResponse
   * @throws IOException if the JSON string is invalid with respect to AuditAdvertiserResponse
   */
  public static AuditAdvertiserResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditAdvertiserResponse.class);
  }

  /**
   * Convert an instance of AuditAdvertiserResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

