/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Adloox;
import org.openapitools.client.model.DoubleVerify;
import org.openapitools.client.model.IntegralAdScience;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Assigned third party verifier targeting option details. This will be populated in the details field of an AssignedTargetingOption when targeting_type is &#x60;TARGETING_TYPE_THIRD_PARTY_VERIFIER&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ThirdPartyVerifierAssignedTargetingOptionDetails {
  public static final String SERIALIZED_NAME_ADLOOX = "adloox";
  @SerializedName(SERIALIZED_NAME_ADLOOX)
  private Adloox adloox;

  public static final String SERIALIZED_NAME_DOUBLE_VERIFY = "doubleVerify";
  @SerializedName(SERIALIZED_NAME_DOUBLE_VERIFY)
  private DoubleVerify doubleVerify;

  public static final String SERIALIZED_NAME_INTEGRAL_AD_SCIENCE = "integralAdScience";
  @SerializedName(SERIALIZED_NAME_INTEGRAL_AD_SCIENCE)
  private IntegralAdScience integralAdScience;

  public ThirdPartyVerifierAssignedTargetingOptionDetails() {
  }

  public ThirdPartyVerifierAssignedTargetingOptionDetails adloox(Adloox adloox) {
    this.adloox = adloox;
    return this;
  }

  /**
   * Get adloox
   * @return adloox
   */
  @javax.annotation.Nullable
  public Adloox getAdloox() {
    return adloox;
  }

  public void setAdloox(Adloox adloox) {
    this.adloox = adloox;
  }


  public ThirdPartyVerifierAssignedTargetingOptionDetails doubleVerify(DoubleVerify doubleVerify) {
    this.doubleVerify = doubleVerify;
    return this;
  }

  /**
   * Get doubleVerify
   * @return doubleVerify
   */
  @javax.annotation.Nullable
  public DoubleVerify getDoubleVerify() {
    return doubleVerify;
  }

  public void setDoubleVerify(DoubleVerify doubleVerify) {
    this.doubleVerify = doubleVerify;
  }


  public ThirdPartyVerifierAssignedTargetingOptionDetails integralAdScience(IntegralAdScience integralAdScience) {
    this.integralAdScience = integralAdScience;
    return this;
  }

  /**
   * Get integralAdScience
   * @return integralAdScience
   */
  @javax.annotation.Nullable
  public IntegralAdScience getIntegralAdScience() {
    return integralAdScience;
  }

  public void setIntegralAdScience(IntegralAdScience integralAdScience) {
    this.integralAdScience = integralAdScience;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThirdPartyVerifierAssignedTargetingOptionDetails thirdPartyVerifierAssignedTargetingOptionDetails = (ThirdPartyVerifierAssignedTargetingOptionDetails) o;
    return Objects.equals(this.adloox, thirdPartyVerifierAssignedTargetingOptionDetails.adloox) &&
        Objects.equals(this.doubleVerify, thirdPartyVerifierAssignedTargetingOptionDetails.doubleVerify) &&
        Objects.equals(this.integralAdScience, thirdPartyVerifierAssignedTargetingOptionDetails.integralAdScience);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adloox, doubleVerify, integralAdScience);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThirdPartyVerifierAssignedTargetingOptionDetails {\n");
    sb.append("    adloox: ").append(toIndentedString(adloox)).append("\n");
    sb.append("    doubleVerify: ").append(toIndentedString(doubleVerify)).append("\n");
    sb.append("    integralAdScience: ").append(toIndentedString(integralAdScience)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adloox");
    openapiFields.add("doubleVerify");
    openapiFields.add("integralAdScience");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ThirdPartyVerifierAssignedTargetingOptionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ThirdPartyVerifierAssignedTargetingOptionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThirdPartyVerifierAssignedTargetingOptionDetails is not found in the empty JSON string", ThirdPartyVerifierAssignedTargetingOptionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ThirdPartyVerifierAssignedTargetingOptionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ThirdPartyVerifierAssignedTargetingOptionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adloox`
      if (jsonObj.get("adloox") != null && !jsonObj.get("adloox").isJsonNull()) {
        Adloox.validateJsonElement(jsonObj.get("adloox"));
      }
      // validate the optional field `doubleVerify`
      if (jsonObj.get("doubleVerify") != null && !jsonObj.get("doubleVerify").isJsonNull()) {
        DoubleVerify.validateJsonElement(jsonObj.get("doubleVerify"));
      }
      // validate the optional field `integralAdScience`
      if (jsonObj.get("integralAdScience") != null && !jsonObj.get("integralAdScience").isJsonNull()) {
        IntegralAdScience.validateJsonElement(jsonObj.get("integralAdScience"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThirdPartyVerifierAssignedTargetingOptionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThirdPartyVerifierAssignedTargetingOptionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThirdPartyVerifierAssignedTargetingOptionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThirdPartyVerifierAssignedTargetingOptionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ThirdPartyVerifierAssignedTargetingOptionDetails>() {
           @Override
           public void write(JsonWriter out, ThirdPartyVerifierAssignedTargetingOptionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThirdPartyVerifierAssignedTargetingOptionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ThirdPartyVerifierAssignedTargetingOptionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ThirdPartyVerifierAssignedTargetingOptionDetails
   * @throws IOException if the JSON string is invalid with respect to ThirdPartyVerifierAssignedTargetingOptionDetails
   */
  public static ThirdPartyVerifierAssignedTargetingOptionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThirdPartyVerifierAssignedTargetingOptionDetails.class);
  }

  /**
   * Convert an instance of ThirdPartyVerifierAssignedTargetingOptionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

