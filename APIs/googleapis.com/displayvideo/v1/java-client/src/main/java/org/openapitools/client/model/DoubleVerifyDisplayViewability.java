/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of DoubleVerify display viewability settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DoubleVerifyDisplayViewability {
  /**
   * Target web and app inventory to maximize IAB viewable rate.
   */
  @JsonAdapter(IabEnum.Adapter.class)
  public enum IabEnum {
    UNSPECIFIED("IAB_VIEWED_RATE_UNSPECIFIED"),
    
    _80_PERCENT_HIGHER("IAB_VIEWED_RATE_80_PERCENT_HIGHER"),
    
    _75_PERCENT_HIGHER("IAB_VIEWED_RATE_75_PERCENT_HIGHER"),
    
    _70_PERCENT_HIGHER("IAB_VIEWED_RATE_70_PERCENT_HIGHER"),
    
    _65_PERCENT_HIGHER("IAB_VIEWED_RATE_65_PERCENT_HIGHER"),
    
    _60_PERCENT_HIGHER("IAB_VIEWED_RATE_60_PERCENT_HIGHER"),
    
    _55_PERCENT_HIGHER("IAB_VIEWED_RATE_55_PERCENT_HIGHER"),
    
    _50_PERCENT_HIGHER("IAB_VIEWED_RATE_50_PERCENT_HIGHER"),
    
    _40_PERCENT_HIGHER("IAB_VIEWED_RATE_40_PERCENT_HIGHER"),
    
    _30_PERCENT_HIGHER("IAB_VIEWED_RATE_30_PERCENT_HIGHER");

    private String value;

    IabEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IabEnum fromValue(String value) {
      for (IabEnum b : IabEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IabEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IabEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IabEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IabEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IabEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IAB = "iab";
  @SerializedName(SERIALIZED_NAME_IAB)
  private IabEnum iab;

  /**
   * Target web and app inventory to maximize 100% viewable duration.
   */
  @JsonAdapter(ViewableDuringEnum.Adapter.class)
  public enum ViewableDuringEnum {
    UNSPECIFIED("AVERAGE_VIEW_DURATION_UNSPECIFIED"),
    
    _5_SEC("AVERAGE_VIEW_DURATION_5_SEC"),
    
    _10_SEC("AVERAGE_VIEW_DURATION_10_SEC"),
    
    _15_SEC("AVERAGE_VIEW_DURATION_15_SEC");

    private String value;

    ViewableDuringEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewableDuringEnum fromValue(String value) {
      for (ViewableDuringEnum b : ViewableDuringEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewableDuringEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewableDuringEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewableDuringEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewableDuringEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViewableDuringEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIEWABLE_DURING = "viewableDuring";
  @SerializedName(SERIALIZED_NAME_VIEWABLE_DURING)
  private ViewableDuringEnum viewableDuring;

  public DoubleVerifyDisplayViewability() {
  }

  public DoubleVerifyDisplayViewability iab(IabEnum iab) {
    this.iab = iab;
    return this;
  }

  /**
   * Target web and app inventory to maximize IAB viewable rate.
   * @return iab
   */
  @javax.annotation.Nullable
  public IabEnum getIab() {
    return iab;
  }

  public void setIab(IabEnum iab) {
    this.iab = iab;
  }


  public DoubleVerifyDisplayViewability viewableDuring(ViewableDuringEnum viewableDuring) {
    this.viewableDuring = viewableDuring;
    return this;
  }

  /**
   * Target web and app inventory to maximize 100% viewable duration.
   * @return viewableDuring
   */
  @javax.annotation.Nullable
  public ViewableDuringEnum getViewableDuring() {
    return viewableDuring;
  }

  public void setViewableDuring(ViewableDuringEnum viewableDuring) {
    this.viewableDuring = viewableDuring;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DoubleVerifyDisplayViewability doubleVerifyDisplayViewability = (DoubleVerifyDisplayViewability) o;
    return Objects.equals(this.iab, doubleVerifyDisplayViewability.iab) &&
        Objects.equals(this.viewableDuring, doubleVerifyDisplayViewability.viewableDuring);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iab, viewableDuring);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DoubleVerifyDisplayViewability {\n");
    sb.append("    iab: ").append(toIndentedString(iab)).append("\n");
    sb.append("    viewableDuring: ").append(toIndentedString(viewableDuring)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iab");
    openapiFields.add("viewableDuring");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DoubleVerifyDisplayViewability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DoubleVerifyDisplayViewability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DoubleVerifyDisplayViewability is not found in the empty JSON string", DoubleVerifyDisplayViewability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DoubleVerifyDisplayViewability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DoubleVerifyDisplayViewability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("iab") != null && !jsonObj.get("iab").isJsonNull()) && !jsonObj.get("iab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iab").toString()));
      }
      // validate the optional field `iab`
      if (jsonObj.get("iab") != null && !jsonObj.get("iab").isJsonNull()) {
        IabEnum.validateJsonElement(jsonObj.get("iab"));
      }
      if ((jsonObj.get("viewableDuring") != null && !jsonObj.get("viewableDuring").isJsonNull()) && !jsonObj.get("viewableDuring").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewableDuring` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewableDuring").toString()));
      }
      // validate the optional field `viewableDuring`
      if (jsonObj.get("viewableDuring") != null && !jsonObj.get("viewableDuring").isJsonNull()) {
        ViewableDuringEnum.validateJsonElement(jsonObj.get("viewableDuring"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DoubleVerifyDisplayViewability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DoubleVerifyDisplayViewability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DoubleVerifyDisplayViewability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DoubleVerifyDisplayViewability.class));

       return (TypeAdapter<T>) new TypeAdapter<DoubleVerifyDisplayViewability>() {
           @Override
           public void write(JsonWriter out, DoubleVerifyDisplayViewability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DoubleVerifyDisplayViewability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DoubleVerifyDisplayViewability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DoubleVerifyDisplayViewability
   * @throws IOException if the JSON string is invalid with respect to DoubleVerifyDisplayViewability
   */
  public static DoubleVerifyDisplayViewability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DoubleVerifyDisplayViewability.class);
  }

  /**
   * Convert an instance of DoubleVerifyDisplayViewability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

