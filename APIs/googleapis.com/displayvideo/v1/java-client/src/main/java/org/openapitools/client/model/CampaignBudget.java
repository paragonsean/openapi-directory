/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DateRange;
import org.openapitools.client.model.PrismaConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings that control how the campaign budget is allocated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CampaignBudget {
  public static final String SERIALIZED_NAME_BUDGET_AMOUNT_MICROS = "budgetAmountMicros";
  @SerializedName(SERIALIZED_NAME_BUDGET_AMOUNT_MICROS)
  private String budgetAmountMicros;

  public static final String SERIALIZED_NAME_BUDGET_ID = "budgetId";
  @SerializedName(SERIALIZED_NAME_BUDGET_ID)
  private String budgetId;

  /**
   * Required. Immutable. Specifies whether the budget is measured in currency or impressions.
   */
  @JsonAdapter(BudgetUnitEnum.Adapter.class)
  public enum BudgetUnitEnum {
    UNSPECIFIED("BUDGET_UNIT_UNSPECIFIED"),
    
    CURRENCY("BUDGET_UNIT_CURRENCY"),
    
    IMPRESSIONS("BUDGET_UNIT_IMPRESSIONS");

    private String value;

    BudgetUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BudgetUnitEnum fromValue(String value) {
      for (BudgetUnitEnum b : BudgetUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BudgetUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BudgetUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BudgetUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BudgetUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BudgetUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUDGET_UNIT = "budgetUnit";
  @SerializedName(SERIALIZED_NAME_BUDGET_UNIT)
  private BudgetUnitEnum budgetUnit;

  public static final String SERIALIZED_NAME_DATE_RANGE = "dateRange";
  @SerializedName(SERIALIZED_NAME_DATE_RANGE)
  private DateRange dateRange;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXTERNAL_BUDGET_ID = "externalBudgetId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_BUDGET_ID)
  private String externalBudgetId;

  /**
   * Required. The external source of the budget.
   */
  @JsonAdapter(ExternalBudgetSourceEnum.Adapter.class)
  public enum ExternalBudgetSourceEnum {
    UNSPECIFIED("EXTERNAL_BUDGET_SOURCE_UNSPECIFIED"),
    
    NONE("EXTERNAL_BUDGET_SOURCE_NONE"),
    
    MEDIA_OCEAN("EXTERNAL_BUDGET_SOURCE_MEDIA_OCEAN");

    private String value;

    ExternalBudgetSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExternalBudgetSourceEnum fromValue(String value) {
      for (ExternalBudgetSourceEnum b : ExternalBudgetSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExternalBudgetSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExternalBudgetSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExternalBudgetSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExternalBudgetSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExternalBudgetSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXTERNAL_BUDGET_SOURCE = "externalBudgetSource";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_BUDGET_SOURCE)
  private ExternalBudgetSourceEnum externalBudgetSource;

  public static final String SERIALIZED_NAME_INVOICE_GROUPING_ID = "invoiceGroupingId";
  @SerializedName(SERIALIZED_NAME_INVOICE_GROUPING_ID)
  private String invoiceGroupingId;

  public static final String SERIALIZED_NAME_PRISMA_CONFIG = "prismaConfig";
  @SerializedName(SERIALIZED_NAME_PRISMA_CONFIG)
  private PrismaConfig prismaConfig;

  public CampaignBudget() {
  }

  public CampaignBudget budgetAmountMicros(String budgetAmountMicros) {
    this.budgetAmountMicros = budgetAmountMicros;
    return this;
  }

  /**
   * Required. The total amount the linked insertion order segments can budget. The amount is in micros. Must be greater than 0. For example, 500000000 represents 500 standard units of the currency.
   * @return budgetAmountMicros
   */
  @javax.annotation.Nullable
  public String getBudgetAmountMicros() {
    return budgetAmountMicros;
  }

  public void setBudgetAmountMicros(String budgetAmountMicros) {
    this.budgetAmountMicros = budgetAmountMicros;
  }


  public CampaignBudget budgetId(String budgetId) {
    this.budgetId = budgetId;
    return this;
  }

  /**
   * The unique ID of the campaign budget. Assigned by the system. Do not set for new budgets. Must be included when updating or adding budgets to campaign_budgets. Otherwise, a new ID will be generated and assigned.
   * @return budgetId
   */
  @javax.annotation.Nullable
  public String getBudgetId() {
    return budgetId;
  }

  public void setBudgetId(String budgetId) {
    this.budgetId = budgetId;
  }


  public CampaignBudget budgetUnit(BudgetUnitEnum budgetUnit) {
    this.budgetUnit = budgetUnit;
    return this;
  }

  /**
   * Required. Immutable. Specifies whether the budget is measured in currency or impressions.
   * @return budgetUnit
   */
  @javax.annotation.Nullable
  public BudgetUnitEnum getBudgetUnit() {
    return budgetUnit;
  }

  public void setBudgetUnit(BudgetUnitEnum budgetUnit) {
    this.budgetUnit = budgetUnit;
  }


  public CampaignBudget dateRange(DateRange dateRange) {
    this.dateRange = dateRange;
    return this;
  }

  /**
   * Get dateRange
   * @return dateRange
   */
  @javax.annotation.Nullable
  public DateRange getDateRange() {
    return dateRange;
  }

  public void setDateRange(DateRange dateRange) {
    this.dateRange = dateRange;
  }


  public CampaignBudget displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The display name of the budget. Must be UTF-8 encoded with a maximum size of 240 bytes.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CampaignBudget externalBudgetId(String externalBudgetId) {
    this.externalBudgetId = externalBudgetId;
    return this;
  }

  /**
   * Immutable. The ID identifying this budget to the external source. If this field is set and the invoice detail level of the corresponding billing profile is set to \&quot;Budget level PO\&quot;, all impressions served against this budget will include this ID on the invoice. Must be unique under the campaign.
   * @return externalBudgetId
   */
  @javax.annotation.Nullable
  public String getExternalBudgetId() {
    return externalBudgetId;
  }

  public void setExternalBudgetId(String externalBudgetId) {
    this.externalBudgetId = externalBudgetId;
  }


  public CampaignBudget externalBudgetSource(ExternalBudgetSourceEnum externalBudgetSource) {
    this.externalBudgetSource = externalBudgetSource;
    return this;
  }

  /**
   * Required. The external source of the budget.
   * @return externalBudgetSource
   */
  @javax.annotation.Nullable
  public ExternalBudgetSourceEnum getExternalBudgetSource() {
    return externalBudgetSource;
  }

  public void setExternalBudgetSource(ExternalBudgetSourceEnum externalBudgetSource) {
    this.externalBudgetSource = externalBudgetSource;
  }


  public CampaignBudget invoiceGroupingId(String invoiceGroupingId) {
    this.invoiceGroupingId = invoiceGroupingId;
    return this;
  }

  /**
   * Immutable. The ID used to group budgets to be included the same invoice. If this field is set and the invoice level of the corresponding billing profile is set to \&quot;Budget invoice grouping ID\&quot;, all external_budget_id sharing the same invoice_grouping_id will be grouped in the same invoice.
   * @return invoiceGroupingId
   */
  @javax.annotation.Nullable
  public String getInvoiceGroupingId() {
    return invoiceGroupingId;
  }

  public void setInvoiceGroupingId(String invoiceGroupingId) {
    this.invoiceGroupingId = invoiceGroupingId;
  }


  public CampaignBudget prismaConfig(PrismaConfig prismaConfig) {
    this.prismaConfig = prismaConfig;
    return this;
  }

  /**
   * Get prismaConfig
   * @return prismaConfig
   */
  @javax.annotation.Nullable
  public PrismaConfig getPrismaConfig() {
    return prismaConfig;
  }

  public void setPrismaConfig(PrismaConfig prismaConfig) {
    this.prismaConfig = prismaConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignBudget campaignBudget = (CampaignBudget) o;
    return Objects.equals(this.budgetAmountMicros, campaignBudget.budgetAmountMicros) &&
        Objects.equals(this.budgetId, campaignBudget.budgetId) &&
        Objects.equals(this.budgetUnit, campaignBudget.budgetUnit) &&
        Objects.equals(this.dateRange, campaignBudget.dateRange) &&
        Objects.equals(this.displayName, campaignBudget.displayName) &&
        Objects.equals(this.externalBudgetId, campaignBudget.externalBudgetId) &&
        Objects.equals(this.externalBudgetSource, campaignBudget.externalBudgetSource) &&
        Objects.equals(this.invoiceGroupingId, campaignBudget.invoiceGroupingId) &&
        Objects.equals(this.prismaConfig, campaignBudget.prismaConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(budgetAmountMicros, budgetId, budgetUnit, dateRange, displayName, externalBudgetId, externalBudgetSource, invoiceGroupingId, prismaConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignBudget {\n");
    sb.append("    budgetAmountMicros: ").append(toIndentedString(budgetAmountMicros)).append("\n");
    sb.append("    budgetId: ").append(toIndentedString(budgetId)).append("\n");
    sb.append("    budgetUnit: ").append(toIndentedString(budgetUnit)).append("\n");
    sb.append("    dateRange: ").append(toIndentedString(dateRange)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    externalBudgetId: ").append(toIndentedString(externalBudgetId)).append("\n");
    sb.append("    externalBudgetSource: ").append(toIndentedString(externalBudgetSource)).append("\n");
    sb.append("    invoiceGroupingId: ").append(toIndentedString(invoiceGroupingId)).append("\n");
    sb.append("    prismaConfig: ").append(toIndentedString(prismaConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("budgetAmountMicros");
    openapiFields.add("budgetId");
    openapiFields.add("budgetUnit");
    openapiFields.add("dateRange");
    openapiFields.add("displayName");
    openapiFields.add("externalBudgetId");
    openapiFields.add("externalBudgetSource");
    openapiFields.add("invoiceGroupingId");
    openapiFields.add("prismaConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CampaignBudget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CampaignBudget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignBudget is not found in the empty JSON string", CampaignBudget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CampaignBudget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignBudget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("budgetAmountMicros") != null && !jsonObj.get("budgetAmountMicros").isJsonNull()) && !jsonObj.get("budgetAmountMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budgetAmountMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budgetAmountMicros").toString()));
      }
      if ((jsonObj.get("budgetId") != null && !jsonObj.get("budgetId").isJsonNull()) && !jsonObj.get("budgetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budgetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budgetId").toString()));
      }
      if ((jsonObj.get("budgetUnit") != null && !jsonObj.get("budgetUnit").isJsonNull()) && !jsonObj.get("budgetUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budgetUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budgetUnit").toString()));
      }
      // validate the optional field `budgetUnit`
      if (jsonObj.get("budgetUnit") != null && !jsonObj.get("budgetUnit").isJsonNull()) {
        BudgetUnitEnum.validateJsonElement(jsonObj.get("budgetUnit"));
      }
      // validate the optional field `dateRange`
      if (jsonObj.get("dateRange") != null && !jsonObj.get("dateRange").isJsonNull()) {
        DateRange.validateJsonElement(jsonObj.get("dateRange"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("externalBudgetId") != null && !jsonObj.get("externalBudgetId").isJsonNull()) && !jsonObj.get("externalBudgetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalBudgetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalBudgetId").toString()));
      }
      if ((jsonObj.get("externalBudgetSource") != null && !jsonObj.get("externalBudgetSource").isJsonNull()) && !jsonObj.get("externalBudgetSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalBudgetSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalBudgetSource").toString()));
      }
      // validate the optional field `externalBudgetSource`
      if (jsonObj.get("externalBudgetSource") != null && !jsonObj.get("externalBudgetSource").isJsonNull()) {
        ExternalBudgetSourceEnum.validateJsonElement(jsonObj.get("externalBudgetSource"));
      }
      if ((jsonObj.get("invoiceGroupingId") != null && !jsonObj.get("invoiceGroupingId").isJsonNull()) && !jsonObj.get("invoiceGroupingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceGroupingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceGroupingId").toString()));
      }
      // validate the optional field `prismaConfig`
      if (jsonObj.get("prismaConfig") != null && !jsonObj.get("prismaConfig").isJsonNull()) {
        PrismaConfig.validateJsonElement(jsonObj.get("prismaConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignBudget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignBudget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignBudget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignBudget.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignBudget>() {
           @Override
           public void write(JsonWriter out, CampaignBudget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignBudget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CampaignBudget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CampaignBudget
   * @throws IOException if the JSON string is invalid with respect to CampaignBudget
   */
  public static CampaignBudget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignBudget.class);
  }

  /**
   * Convert an instance of CampaignBudget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

