/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings that control a partner cost. A partner cost is any type of expense involved in running a campaign, other than the costs of purchasing impressions (which is called the media cost) and using third-party audience segment data (data fee). Some examples of partner costs include the fees for using DV360, a third-party ad server, or a third-party ad serving verification service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartnerCost {
  /**
   * Required. The type of the partner cost.
   */
  @JsonAdapter(CostTypeEnum.Adapter.class)
  public enum CostTypeEnum {
    UNSPECIFIED("PARTNER_COST_TYPE_UNSPECIFIED"),
    
    ADLOOX("PARTNER_COST_TYPE_ADLOOX"),
    
    ADLOOX_PREBID("PARTNER_COST_TYPE_ADLOOX_PREBID"),
    
    ADSAFE("PARTNER_COST_TYPE_ADSAFE"),
    
    ADXPOSE("PARTNER_COST_TYPE_ADXPOSE"),
    
    AGGREGATE_KNOWLEDGE("PARTNER_COST_TYPE_AGGREGATE_KNOWLEDGE"),
    
    AGENCY_TRADING_DESK("PARTNER_COST_TYPE_AGENCY_TRADING_DESK"),
    
    DV360_FEE("PARTNER_COST_TYPE_DV360_FEE"),
    
    COMSCORE_VCE("PARTNER_COST_TYPE_COMSCORE_VCE"),
    
    DATA_MANAGEMENT_PLATFORM("PARTNER_COST_TYPE_DATA_MANAGEMENT_PLATFORM"),
    
    DEFAULT("PARTNER_COST_TYPE_DEFAULT"),
    
    DOUBLE_VERIFY("PARTNER_COST_TYPE_DOUBLE_VERIFY"),
    
    DOUBLE_VERIFY_PREBID("PARTNER_COST_TYPE_DOUBLE_VERIFY_PREBID"),
    
    EVIDON("PARTNER_COST_TYPE_EVIDON"),
    
    INTEGRAL_AD_SCIENCE_VIDEO("PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_VIDEO"),
    
    INTEGRAL_AD_SCIENCE_PREBID("PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_PREBID"),
    
    MEDIA_COST_DATA("PARTNER_COST_TYPE_MEDIA_COST_DATA"),
    
    MOAT_VIDEO("PARTNER_COST_TYPE_MOAT_VIDEO"),
    
    NIELSEN_DAR("PARTNER_COST_TYPE_NIELSEN_DAR"),
    
    SHOP_LOCAL("PARTNER_COST_TYPE_SHOP_LOCAL"),
    
    TERACENT("PARTNER_COST_TYPE_TERACENT"),
    
    THIRD_PARTY_AD_SERVER("PARTNER_COST_TYPE_THIRD_PARTY_AD_SERVER"),
    
    TRUST_METRICS("PARTNER_COST_TYPE_TRUST_METRICS"),
    
    VIZU("PARTNER_COST_TYPE_VIZU"),
    
    ADLINGO_FEE("PARTNER_COST_TYPE_ADLINGO_FEE"),
    
    CUSTOM_FEE_1("PARTNER_COST_TYPE_CUSTOM_FEE_1"),
    
    CUSTOM_FEE_2("PARTNER_COST_TYPE_CUSTOM_FEE_2"),
    
    CUSTOM_FEE_3("PARTNER_COST_TYPE_CUSTOM_FEE_3"),
    
    CUSTOM_FEE_4("PARTNER_COST_TYPE_CUSTOM_FEE_4"),
    
    CUSTOM_FEE_5("PARTNER_COST_TYPE_CUSTOM_FEE_5"),
    
    SCIBIDS_FEE("PARTNER_COST_TYPE_SCIBIDS_FEE");

    private String value;

    CostTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CostTypeEnum fromValue(String value) {
      for (CostTypeEnum b : CostTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CostTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CostTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CostTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CostTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CostTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COST_TYPE = "costType";
  @SerializedName(SERIALIZED_NAME_COST_TYPE)
  private CostTypeEnum costType;

  public static final String SERIALIZED_NAME_FEE_AMOUNT = "feeAmount";
  @SerializedName(SERIALIZED_NAME_FEE_AMOUNT)
  private String feeAmount;

  public static final String SERIALIZED_NAME_FEE_PERCENTAGE_MILLIS = "feePercentageMillis";
  @SerializedName(SERIALIZED_NAME_FEE_PERCENTAGE_MILLIS)
  private String feePercentageMillis;

  /**
   * Required. The fee type for this partner cost.
   */
  @JsonAdapter(FeeTypeEnum.Adapter.class)
  public enum FeeTypeEnum {
    UNSPECIFIED("PARTNER_COST_FEE_TYPE_UNSPECIFIED"),
    
    CPM_FEE("PARTNER_COST_FEE_TYPE_CPM_FEE"),
    
    MEDIA_FEE("PARTNER_COST_FEE_TYPE_MEDIA_FEE");

    private String value;

    FeeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeeTypeEnum fromValue(String value) {
      for (FeeTypeEnum b : FeeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEE_TYPE = "feeType";
  @SerializedName(SERIALIZED_NAME_FEE_TYPE)
  private FeeTypeEnum feeType;

  /**
   * The invoice type for this partner cost. * Required when cost_type is one of: - &#x60;PARTNER_COST_TYPE_ADLOOX&#x60; - &#x60;PARTNER_COST_TYPE_DOUBLE_VERIFY&#x60; - &#x60;PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE&#x60;. * Output only for other types.
   */
  @JsonAdapter(InvoiceTypeEnum.Adapter.class)
  public enum InvoiceTypeEnum {
    UNSPECIFIED("PARTNER_COST_INVOICE_TYPE_UNSPECIFIED"),
    
    DV360("PARTNER_COST_INVOICE_TYPE_DV360"),
    
    PARTNER("PARTNER_COST_INVOICE_TYPE_PARTNER");

    private String value;

    InvoiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvoiceTypeEnum fromValue(String value) {
      for (InvoiceTypeEnum b : InvoiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvoiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvoiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvoiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvoiceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InvoiceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVOICE_TYPE = "invoiceType";
  @SerializedName(SERIALIZED_NAME_INVOICE_TYPE)
  private InvoiceTypeEnum invoiceType;

  public PartnerCost() {
  }

  public PartnerCost costType(CostTypeEnum costType) {
    this.costType = costType;
    return this;
  }

  /**
   * Required. The type of the partner cost.
   * @return costType
   */
  @javax.annotation.Nullable
  public CostTypeEnum getCostType() {
    return costType;
  }

  public void setCostType(CostTypeEnum costType) {
    this.costType = costType;
  }


  public PartnerCost feeAmount(String feeAmount) {
    this.feeAmount = feeAmount;
    return this;
  }

  /**
   * The CPM fee amount in micros of advertiser&#39;s currency. Applicable when the fee_type is &#x60;PARTNER_FEE_TYPE_CPM_FEE&#x60;. Must be greater than or equal to 0. For example, for 1.5 standard unit of the advertiser&#39;s currency, set this field to 1500000.
   * @return feeAmount
   */
  @javax.annotation.Nullable
  public String getFeeAmount() {
    return feeAmount;
  }

  public void setFeeAmount(String feeAmount) {
    this.feeAmount = feeAmount;
  }


  public PartnerCost feePercentageMillis(String feePercentageMillis) {
    this.feePercentageMillis = feePercentageMillis;
    return this;
  }

  /**
   * The media fee percentage in millis (1/1000 of a percent). Applicable when the fee_type is &#x60;PARTNER_FEE_TYPE_MEDIA_FEE&#x60;. Must be greater than or equal to 0. For example: 100 represents 0.1%.
   * @return feePercentageMillis
   */
  @javax.annotation.Nullable
  public String getFeePercentageMillis() {
    return feePercentageMillis;
  }

  public void setFeePercentageMillis(String feePercentageMillis) {
    this.feePercentageMillis = feePercentageMillis;
  }


  public PartnerCost feeType(FeeTypeEnum feeType) {
    this.feeType = feeType;
    return this;
  }

  /**
   * Required. The fee type for this partner cost.
   * @return feeType
   */
  @javax.annotation.Nullable
  public FeeTypeEnum getFeeType() {
    return feeType;
  }

  public void setFeeType(FeeTypeEnum feeType) {
    this.feeType = feeType;
  }


  public PartnerCost invoiceType(InvoiceTypeEnum invoiceType) {
    this.invoiceType = invoiceType;
    return this;
  }

  /**
   * The invoice type for this partner cost. * Required when cost_type is one of: - &#x60;PARTNER_COST_TYPE_ADLOOX&#x60; - &#x60;PARTNER_COST_TYPE_DOUBLE_VERIFY&#x60; - &#x60;PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE&#x60;. * Output only for other types.
   * @return invoiceType
   */
  @javax.annotation.Nullable
  public InvoiceTypeEnum getInvoiceType() {
    return invoiceType;
  }

  public void setInvoiceType(InvoiceTypeEnum invoiceType) {
    this.invoiceType = invoiceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartnerCost partnerCost = (PartnerCost) o;
    return Objects.equals(this.costType, partnerCost.costType) &&
        Objects.equals(this.feeAmount, partnerCost.feeAmount) &&
        Objects.equals(this.feePercentageMillis, partnerCost.feePercentageMillis) &&
        Objects.equals(this.feeType, partnerCost.feeType) &&
        Objects.equals(this.invoiceType, partnerCost.invoiceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costType, feeAmount, feePercentageMillis, feeType, invoiceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartnerCost {\n");
    sb.append("    costType: ").append(toIndentedString(costType)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    feePercentageMillis: ").append(toIndentedString(feePercentageMillis)).append("\n");
    sb.append("    feeType: ").append(toIndentedString(feeType)).append("\n");
    sb.append("    invoiceType: ").append(toIndentedString(invoiceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("costType");
    openapiFields.add("feeAmount");
    openapiFields.add("feePercentageMillis");
    openapiFields.add("feeType");
    openapiFields.add("invoiceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartnerCost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartnerCost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartnerCost is not found in the empty JSON string", PartnerCost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartnerCost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartnerCost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("costType") != null && !jsonObj.get("costType").isJsonNull()) && !jsonObj.get("costType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costType").toString()));
      }
      // validate the optional field `costType`
      if (jsonObj.get("costType") != null && !jsonObj.get("costType").isJsonNull()) {
        CostTypeEnum.validateJsonElement(jsonObj.get("costType"));
      }
      if ((jsonObj.get("feeAmount") != null && !jsonObj.get("feeAmount").isJsonNull()) && !jsonObj.get("feeAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeAmount").toString()));
      }
      if ((jsonObj.get("feePercentageMillis") != null && !jsonObj.get("feePercentageMillis").isJsonNull()) && !jsonObj.get("feePercentageMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feePercentageMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feePercentageMillis").toString()));
      }
      if ((jsonObj.get("feeType") != null && !jsonObj.get("feeType").isJsonNull()) && !jsonObj.get("feeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeType").toString()));
      }
      // validate the optional field `feeType`
      if (jsonObj.get("feeType") != null && !jsonObj.get("feeType").isJsonNull()) {
        FeeTypeEnum.validateJsonElement(jsonObj.get("feeType"));
      }
      if ((jsonObj.get("invoiceType") != null && !jsonObj.get("invoiceType").isJsonNull()) && !jsonObj.get("invoiceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceType").toString()));
      }
      // validate the optional field `invoiceType`
      if (jsonObj.get("invoiceType") != null && !jsonObj.get("invoiceType").isJsonNull()) {
        InvoiceTypeEnum.validateJsonElement(jsonObj.get("invoiceType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartnerCost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartnerCost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartnerCost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartnerCost.class));

       return (TypeAdapter<T>) new TypeAdapter<PartnerCost>() {
           @Override
           public void write(JsonWriter out, PartnerCost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartnerCost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartnerCost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartnerCost
   * @throws IOException if the JSON string is invalid with respect to PartnerCost
   */
  public static PartnerCost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartnerCost.class);
  }

  /**
   * Convert an instance of PartnerCost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

