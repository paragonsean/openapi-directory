/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExchangeConfig;
import org.openapitools.client.model.PartnerAdServerConfig;
import org.openapitools.client.model.PartnerDataAccessConfig;
import org.openapitools.client.model.PartnerGeneralConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single partner in Display &amp; Video 360 (DV360).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Partner {
  public static final String SERIALIZED_NAME_AD_SERVER_CONFIG = "adServerConfig";
  @SerializedName(SERIALIZED_NAME_AD_SERVER_CONFIG)
  private PartnerAdServerConfig adServerConfig;

  public static final String SERIALIZED_NAME_DATA_ACCESS_CONFIG = "dataAccessConfig";
  @SerializedName(SERIALIZED_NAME_DATA_ACCESS_CONFIG)
  private PartnerDataAccessConfig dataAccessConfig;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Output only. The status of the partner.
   */
  @JsonAdapter(EntityStatusEnum.Adapter.class)
  public enum EntityStatusEnum {
    UNSPECIFIED("ENTITY_STATUS_UNSPECIFIED"),
    
    ACTIVE("ENTITY_STATUS_ACTIVE"),
    
    ARCHIVED("ENTITY_STATUS_ARCHIVED"),
    
    DRAFT("ENTITY_STATUS_DRAFT"),
    
    PAUSED("ENTITY_STATUS_PAUSED"),
    
    SCHEDULED_FOR_DELETION("ENTITY_STATUS_SCHEDULED_FOR_DELETION");

    private String value;

    EntityStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityStatusEnum fromValue(String value) {
      for (EntityStatusEnum b : EntityStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_STATUS = "entityStatus";
  @SerializedName(SERIALIZED_NAME_ENTITY_STATUS)
  private EntityStatusEnum entityStatus;

  public static final String SERIALIZED_NAME_EXCHANGE_CONFIG = "exchangeConfig";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_CONFIG)
  private ExchangeConfig exchangeConfig;

  public static final String SERIALIZED_NAME_GENERAL_CONFIG = "generalConfig";
  @SerializedName(SERIALIZED_NAME_GENERAL_CONFIG)
  private PartnerGeneralConfig generalConfig;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTNER_ID = "partnerId";
  @SerializedName(SERIALIZED_NAME_PARTNER_ID)
  private String partnerId;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Partner() {
  }

  public Partner(
     EntityStatusEnum entityStatus, 
     String name, 
     String partnerId, 
     String updateTime
  ) {
    this();
    this.entityStatus = entityStatus;
    this.name = name;
    this.partnerId = partnerId;
    this.updateTime = updateTime;
  }

  public Partner adServerConfig(PartnerAdServerConfig adServerConfig) {
    this.adServerConfig = adServerConfig;
    return this;
  }

  /**
   * Get adServerConfig
   * @return adServerConfig
   */
  @javax.annotation.Nullable
  public PartnerAdServerConfig getAdServerConfig() {
    return adServerConfig;
  }

  public void setAdServerConfig(PartnerAdServerConfig adServerConfig) {
    this.adServerConfig = adServerConfig;
  }


  public Partner dataAccessConfig(PartnerDataAccessConfig dataAccessConfig) {
    this.dataAccessConfig = dataAccessConfig;
    return this;
  }

  /**
   * Get dataAccessConfig
   * @return dataAccessConfig
   */
  @javax.annotation.Nullable
  public PartnerDataAccessConfig getDataAccessConfig() {
    return dataAccessConfig;
  }

  public void setDataAccessConfig(PartnerDataAccessConfig dataAccessConfig) {
    this.dataAccessConfig = dataAccessConfig;
  }


  public Partner displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the partner. Must be UTF-8 encoded with a maximum size of 240 bytes.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. The status of the partner.
   * @return entityStatus
   */
  @javax.annotation.Nullable
  public EntityStatusEnum getEntityStatus() {
    return entityStatus;
  }



  public Partner exchangeConfig(ExchangeConfig exchangeConfig) {
    this.exchangeConfig = exchangeConfig;
    return this;
  }

  /**
   * Get exchangeConfig
   * @return exchangeConfig
   */
  @javax.annotation.Nullable
  public ExchangeConfig getExchangeConfig() {
    return exchangeConfig;
  }

  public void setExchangeConfig(ExchangeConfig exchangeConfig) {
    this.exchangeConfig = exchangeConfig;
  }


  public Partner generalConfig(PartnerGeneralConfig generalConfig) {
    this.generalConfig = generalConfig;
    return this;
  }

  /**
   * Get generalConfig
   * @return generalConfig
   */
  @javax.annotation.Nullable
  public PartnerGeneralConfig getGeneralConfig() {
    return generalConfig;
  }

  public void setGeneralConfig(PartnerGeneralConfig generalConfig) {
    this.generalConfig = generalConfig;
  }


  /**
   * Output only. The resource name of the partner.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The unique ID of the partner. Assigned by the system.
   * @return partnerId
   */
  @javax.annotation.Nullable
  public String getPartnerId() {
    return partnerId;
  }



  /**
   * Output only. The timestamp when the partner was last updated. Assigned by the system.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Partner partner = (Partner) o;
    return Objects.equals(this.adServerConfig, partner.adServerConfig) &&
        Objects.equals(this.dataAccessConfig, partner.dataAccessConfig) &&
        Objects.equals(this.displayName, partner.displayName) &&
        Objects.equals(this.entityStatus, partner.entityStatus) &&
        Objects.equals(this.exchangeConfig, partner.exchangeConfig) &&
        Objects.equals(this.generalConfig, partner.generalConfig) &&
        Objects.equals(this.name, partner.name) &&
        Objects.equals(this.partnerId, partner.partnerId) &&
        Objects.equals(this.updateTime, partner.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adServerConfig, dataAccessConfig, displayName, entityStatus, exchangeConfig, generalConfig, name, partnerId, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Partner {\n");
    sb.append("    adServerConfig: ").append(toIndentedString(adServerConfig)).append("\n");
    sb.append("    dataAccessConfig: ").append(toIndentedString(dataAccessConfig)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    entityStatus: ").append(toIndentedString(entityStatus)).append("\n");
    sb.append("    exchangeConfig: ").append(toIndentedString(exchangeConfig)).append("\n");
    sb.append("    generalConfig: ").append(toIndentedString(generalConfig)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    partnerId: ").append(toIndentedString(partnerId)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adServerConfig");
    openapiFields.add("dataAccessConfig");
    openapiFields.add("displayName");
    openapiFields.add("entityStatus");
    openapiFields.add("exchangeConfig");
    openapiFields.add("generalConfig");
    openapiFields.add("name");
    openapiFields.add("partnerId");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Partner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Partner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Partner is not found in the empty JSON string", Partner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Partner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Partner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adServerConfig`
      if (jsonObj.get("adServerConfig") != null && !jsonObj.get("adServerConfig").isJsonNull()) {
        PartnerAdServerConfig.validateJsonElement(jsonObj.get("adServerConfig"));
      }
      // validate the optional field `dataAccessConfig`
      if (jsonObj.get("dataAccessConfig") != null && !jsonObj.get("dataAccessConfig").isJsonNull()) {
        PartnerDataAccessConfig.validateJsonElement(jsonObj.get("dataAccessConfig"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("entityStatus") != null && !jsonObj.get("entityStatus").isJsonNull()) && !jsonObj.get("entityStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityStatus").toString()));
      }
      // validate the optional field `entityStatus`
      if (jsonObj.get("entityStatus") != null && !jsonObj.get("entityStatus").isJsonNull()) {
        EntityStatusEnum.validateJsonElement(jsonObj.get("entityStatus"));
      }
      // validate the optional field `exchangeConfig`
      if (jsonObj.get("exchangeConfig") != null && !jsonObj.get("exchangeConfig").isJsonNull()) {
        ExchangeConfig.validateJsonElement(jsonObj.get("exchangeConfig"));
      }
      // validate the optional field `generalConfig`
      if (jsonObj.get("generalConfig") != null && !jsonObj.get("generalConfig").isJsonNull()) {
        PartnerGeneralConfig.validateJsonElement(jsonObj.get("generalConfig"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("partnerId") != null && !jsonObj.get("partnerId").isJsonNull()) && !jsonObj.get("partnerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerId").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Partner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Partner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Partner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Partner.class));

       return (TypeAdapter<T>) new TypeAdapter<Partner>() {
           @Override
           public void write(JsonWriter out, Partner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Partner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Partner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Partner
   * @throws IOException if the JSON string is invalid with respect to Partner
   */
  public static Partner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Partner.class);
  }

  /**
   * Convert an instance of Partner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

