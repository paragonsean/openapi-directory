/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NegativeKeyword;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for NegativeKeywordService.ListNegativeKeywords.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListNegativeKeywordsResponse {
  public static final String SERIALIZED_NAME_NEGATIVE_KEYWORDS = "negativeKeywords";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_KEYWORDS)
  private List<NegativeKeyword> negativeKeywords = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public ListNegativeKeywordsResponse() {
  }

  public ListNegativeKeywordsResponse negativeKeywords(List<NegativeKeyword> negativeKeywords) {
    this.negativeKeywords = negativeKeywords;
    return this;
  }

  public ListNegativeKeywordsResponse addNegativeKeywordsItem(NegativeKeyword negativeKeywordsItem) {
    if (this.negativeKeywords == null) {
      this.negativeKeywords = new ArrayList<>();
    }
    this.negativeKeywords.add(negativeKeywordsItem);
    return this;
  }

  /**
   * The list of negative keywords. This list will be absent if empty.
   * @return negativeKeywords
   */
  @javax.annotation.Nullable
  public List<NegativeKeyword> getNegativeKeywords() {
    return negativeKeywords;
  }

  public void setNegativeKeywords(List<NegativeKeyword> negativeKeywords) {
    this.negativeKeywords = negativeKeywords;
  }


  public ListNegativeKeywordsResponse nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to &#x60;ListNegativeKeywords&#x60; method to retrieve the next page of results.
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListNegativeKeywordsResponse listNegativeKeywordsResponse = (ListNegativeKeywordsResponse) o;
    return Objects.equals(this.negativeKeywords, listNegativeKeywordsResponse.negativeKeywords) &&
        Objects.equals(this.nextPageToken, listNegativeKeywordsResponse.nextPageToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(negativeKeywords, nextPageToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListNegativeKeywordsResponse {\n");
    sb.append("    negativeKeywords: ").append(toIndentedString(negativeKeywords)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("negativeKeywords");
    openapiFields.add("nextPageToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListNegativeKeywordsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListNegativeKeywordsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListNegativeKeywordsResponse is not found in the empty JSON string", ListNegativeKeywordsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListNegativeKeywordsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListNegativeKeywordsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("negativeKeywords") != null && !jsonObj.get("negativeKeywords").isJsonNull()) {
        JsonArray jsonArraynegativeKeywords = jsonObj.getAsJsonArray("negativeKeywords");
        if (jsonArraynegativeKeywords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("negativeKeywords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `negativeKeywords` to be an array in the JSON string but got `%s`", jsonObj.get("negativeKeywords").toString()));
          }

          // validate the optional field `negativeKeywords` (array)
          for (int i = 0; i < jsonArraynegativeKeywords.size(); i++) {
            NegativeKeyword.validateJsonElement(jsonArraynegativeKeywords.get(i));
          };
        }
      }
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListNegativeKeywordsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListNegativeKeywordsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListNegativeKeywordsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListNegativeKeywordsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListNegativeKeywordsResponse>() {
           @Override
           public void write(JsonWriter out, ListNegativeKeywordsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListNegativeKeywordsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListNegativeKeywordsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListNegativeKeywordsResponse
   * @throws IOException if the JSON string is invalid with respect to ListNegativeKeywordsResponse
   */
  public static ListNegativeKeywordsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListNegativeKeywordsResponse.class);
  }

  /**
   * Convert an instance of ListNegativeKeywordsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

