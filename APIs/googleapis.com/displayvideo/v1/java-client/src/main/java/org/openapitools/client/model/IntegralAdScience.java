/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of Integral Ad Science settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IntegralAdScience {
  public static final String SERIALIZED_NAME_CUSTOM_SEGMENT_ID = "customSegmentId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_SEGMENT_ID)
  private List<String> customSegmentId = new ArrayList<>();

  /**
   * Display Viewability section (applicable to display line items only).
   */
  @JsonAdapter(DisplayViewabilityEnum.Adapter.class)
  public enum DisplayViewabilityEnum {
    UNSPECIFIED("PERFORMANCE_VIEWABILITY_UNSPECIFIED"),
    
    _40("PERFORMANCE_VIEWABILITY_40"),
    
    _50("PERFORMANCE_VIEWABILITY_50"),
    
    _60("PERFORMANCE_VIEWABILITY_60"),
    
    _70("PERFORMANCE_VIEWABILITY_70");

    private String value;

    DisplayViewabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisplayViewabilityEnum fromValue(String value) {
      for (DisplayViewabilityEnum b : DisplayViewabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisplayViewabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisplayViewabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisplayViewabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisplayViewabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DisplayViewabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISPLAY_VIEWABILITY = "displayViewability";
  @SerializedName(SERIALIZED_NAME_DISPLAY_VIEWABILITY)
  private DisplayViewabilityEnum displayViewability;

  public static final String SERIALIZED_NAME_EXCLUDE_UNRATEABLE = "excludeUnrateable";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_UNRATEABLE)
  private Boolean excludeUnrateable;

  /**
   * Ad Fraud settings.
   */
  @JsonAdapter(ExcludedAdFraudRiskEnum.Adapter.class)
  public enum ExcludedAdFraudRiskEnum {
    UNSPECIFIED("SUSPICIOUS_ACTIVITY_UNSPECIFIED"),
    
    HR("SUSPICIOUS_ACTIVITY_HR"),
    
    HMR("SUSPICIOUS_ACTIVITY_HMR");

    private String value;

    ExcludedAdFraudRiskEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludedAdFraudRiskEnum fromValue(String value) {
      for (ExcludedAdFraudRiskEnum b : ExcludedAdFraudRiskEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExcludedAdFraudRiskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludedAdFraudRiskEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludedAdFraudRiskEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludedAdFraudRiskEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludedAdFraudRiskEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDED_AD_FRAUD_RISK = "excludedAdFraudRisk";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_AD_FRAUD_RISK)
  private ExcludedAdFraudRiskEnum excludedAdFraudRisk;

  /**
   * Brand Safety - **Adult content**.
   */
  @JsonAdapter(ExcludedAdultRiskEnum.Adapter.class)
  public enum ExcludedAdultRiskEnum {
    UNSPECIFIED("ADULT_UNSPECIFIED"),
    
    HR("ADULT_HR"),
    
    HMR("ADULT_HMR");

    private String value;

    ExcludedAdultRiskEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludedAdultRiskEnum fromValue(String value) {
      for (ExcludedAdultRiskEnum b : ExcludedAdultRiskEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExcludedAdultRiskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludedAdultRiskEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludedAdultRiskEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludedAdultRiskEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludedAdultRiskEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDED_ADULT_RISK = "excludedAdultRisk";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_ADULT_RISK)
  private ExcludedAdultRiskEnum excludedAdultRisk;

  /**
   * Brand Safety - **Alcohol**.
   */
  @JsonAdapter(ExcludedAlcoholRiskEnum.Adapter.class)
  public enum ExcludedAlcoholRiskEnum {
    UNSPECIFIED("ALCOHOL_UNSPECIFIED"),
    
    HR("ALCOHOL_HR"),
    
    HMR("ALCOHOL_HMR");

    private String value;

    ExcludedAlcoholRiskEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludedAlcoholRiskEnum fromValue(String value) {
      for (ExcludedAlcoholRiskEnum b : ExcludedAlcoholRiskEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExcludedAlcoholRiskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludedAlcoholRiskEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludedAlcoholRiskEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludedAlcoholRiskEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludedAlcoholRiskEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDED_ALCOHOL_RISK = "excludedAlcoholRisk";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_ALCOHOL_RISK)
  private ExcludedAlcoholRiskEnum excludedAlcoholRisk;

  /**
   * Brand Safety - **Drugs**.
   */
  @JsonAdapter(ExcludedDrugsRiskEnum.Adapter.class)
  public enum ExcludedDrugsRiskEnum {
    UNSPECIFIED("DRUGS_UNSPECIFIED"),
    
    HR("DRUGS_HR"),
    
    HMR("DRUGS_HMR");

    private String value;

    ExcludedDrugsRiskEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludedDrugsRiskEnum fromValue(String value) {
      for (ExcludedDrugsRiskEnum b : ExcludedDrugsRiskEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExcludedDrugsRiskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludedDrugsRiskEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludedDrugsRiskEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludedDrugsRiskEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludedDrugsRiskEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDED_DRUGS_RISK = "excludedDrugsRisk";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_DRUGS_RISK)
  private ExcludedDrugsRiskEnum excludedDrugsRisk;

  /**
   * Brand Safety - **Gambling**.
   */
  @JsonAdapter(ExcludedGamblingRiskEnum.Adapter.class)
  public enum ExcludedGamblingRiskEnum {
    UNSPECIFIED("GAMBLING_UNSPECIFIED"),
    
    HR("GAMBLING_HR"),
    
    HMR("GAMBLING_HMR");

    private String value;

    ExcludedGamblingRiskEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludedGamblingRiskEnum fromValue(String value) {
      for (ExcludedGamblingRiskEnum b : ExcludedGamblingRiskEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExcludedGamblingRiskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludedGamblingRiskEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludedGamblingRiskEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludedGamblingRiskEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludedGamblingRiskEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDED_GAMBLING_RISK = "excludedGamblingRisk";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_GAMBLING_RISK)
  private ExcludedGamblingRiskEnum excludedGamblingRisk;

  /**
   * Brand Safety - **Hate speech**.
   */
  @JsonAdapter(ExcludedHateSpeechRiskEnum.Adapter.class)
  public enum ExcludedHateSpeechRiskEnum {
    UNSPECIFIED("HATE_SPEECH_UNSPECIFIED"),
    
    HR("HATE_SPEECH_HR"),
    
    HMR("HATE_SPEECH_HMR");

    private String value;

    ExcludedHateSpeechRiskEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludedHateSpeechRiskEnum fromValue(String value) {
      for (ExcludedHateSpeechRiskEnum b : ExcludedHateSpeechRiskEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExcludedHateSpeechRiskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludedHateSpeechRiskEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludedHateSpeechRiskEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludedHateSpeechRiskEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludedHateSpeechRiskEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDED_HATE_SPEECH_RISK = "excludedHateSpeechRisk";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_HATE_SPEECH_RISK)
  private ExcludedHateSpeechRiskEnum excludedHateSpeechRisk;

  /**
   * Brand Safety - **Illegal downloads**.
   */
  @JsonAdapter(ExcludedIllegalDownloadsRiskEnum.Adapter.class)
  public enum ExcludedIllegalDownloadsRiskEnum {
    UNSPECIFIED("ILLEGAL_DOWNLOADS_UNSPECIFIED"),
    
    HR("ILLEGAL_DOWNLOADS_HR"),
    
    HMR("ILLEGAL_DOWNLOADS_HMR");

    private String value;

    ExcludedIllegalDownloadsRiskEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludedIllegalDownloadsRiskEnum fromValue(String value) {
      for (ExcludedIllegalDownloadsRiskEnum b : ExcludedIllegalDownloadsRiskEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExcludedIllegalDownloadsRiskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludedIllegalDownloadsRiskEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludedIllegalDownloadsRiskEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludedIllegalDownloadsRiskEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludedIllegalDownloadsRiskEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDED_ILLEGAL_DOWNLOADS_RISK = "excludedIllegalDownloadsRisk";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_ILLEGAL_DOWNLOADS_RISK)
  private ExcludedIllegalDownloadsRiskEnum excludedIllegalDownloadsRisk;

  /**
   * Brand Safety - **Offensive language**.
   */
  @JsonAdapter(ExcludedOffensiveLanguageRiskEnum.Adapter.class)
  public enum ExcludedOffensiveLanguageRiskEnum {
    UNSPECIFIED("OFFENSIVE_LANGUAGE_UNSPECIFIED"),
    
    HR("OFFENSIVE_LANGUAGE_HR"),
    
    HMR("OFFENSIVE_LANGUAGE_HMR");

    private String value;

    ExcludedOffensiveLanguageRiskEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludedOffensiveLanguageRiskEnum fromValue(String value) {
      for (ExcludedOffensiveLanguageRiskEnum b : ExcludedOffensiveLanguageRiskEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExcludedOffensiveLanguageRiskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludedOffensiveLanguageRiskEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludedOffensiveLanguageRiskEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludedOffensiveLanguageRiskEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludedOffensiveLanguageRiskEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDED_OFFENSIVE_LANGUAGE_RISK = "excludedOffensiveLanguageRisk";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_OFFENSIVE_LANGUAGE_RISK)
  private ExcludedOffensiveLanguageRiskEnum excludedOffensiveLanguageRisk;

  /**
   * Brand Safety - **Violence**.
   */
  @JsonAdapter(ExcludedViolenceRiskEnum.Adapter.class)
  public enum ExcludedViolenceRiskEnum {
    UNSPECIFIED("VIOLENCE_UNSPECIFIED"),
    
    HR("VIOLENCE_HR"),
    
    HMR("VIOLENCE_HMR");

    private String value;

    ExcludedViolenceRiskEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludedViolenceRiskEnum fromValue(String value) {
      for (ExcludedViolenceRiskEnum b : ExcludedViolenceRiskEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExcludedViolenceRiskEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludedViolenceRiskEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludedViolenceRiskEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludedViolenceRiskEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludedViolenceRiskEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDED_VIOLENCE_RISK = "excludedViolenceRisk";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_VIOLENCE_RISK)
  private ExcludedViolenceRiskEnum excludedViolenceRisk;

  /**
   * True advertising quality (applicable to Display line items only).
   */
  @JsonAdapter(TraqScoreOptionEnum.Adapter.class)
  public enum TraqScoreOptionEnum {
    UNSPECIFIED("TRAQ_UNSPECIFIED"),
    
    _250("TRAQ_250"),
    
    _500("TRAQ_500"),
    
    _600("TRAQ_600"),
    
    _700("TRAQ_700"),
    
    _750("TRAQ_750"),
    
    _875("TRAQ_875"),
    
    _1000("TRAQ_1000");

    private String value;

    TraqScoreOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TraqScoreOptionEnum fromValue(String value) {
      for (TraqScoreOptionEnum b : TraqScoreOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TraqScoreOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TraqScoreOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TraqScoreOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TraqScoreOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TraqScoreOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRAQ_SCORE_OPTION = "traqScoreOption";
  @SerializedName(SERIALIZED_NAME_TRAQ_SCORE_OPTION)
  private TraqScoreOptionEnum traqScoreOption;

  /**
   * Video Viewability Section (applicable to video line items only).
   */
  @JsonAdapter(VideoViewabilityEnum.Adapter.class)
  public enum VideoViewabilityEnum {
    UNSPECIFIED("VIDEO_VIEWABILITY_UNSPECIFIED"),
    
    _40("VIDEO_VIEWABILITY_40"),
    
    _50("VIDEO_VIEWABILITY_50"),
    
    _60("VIDEO_VIEWABILITY_60"),
    
    _70("VIDEO_VIEWABILITY_70");

    private String value;

    VideoViewabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VideoViewabilityEnum fromValue(String value) {
      for (VideoViewabilityEnum b : VideoViewabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VideoViewabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VideoViewabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VideoViewabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VideoViewabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VideoViewabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIDEO_VIEWABILITY = "videoViewability";
  @SerializedName(SERIALIZED_NAME_VIDEO_VIEWABILITY)
  private VideoViewabilityEnum videoViewability;

  public IntegralAdScience() {
  }

  public IntegralAdScience customSegmentId(List<String> customSegmentId) {
    this.customSegmentId = customSegmentId;
    return this;
  }

  public IntegralAdScience addCustomSegmentIdItem(String customSegmentIdItem) {
    if (this.customSegmentId == null) {
      this.customSegmentId = new ArrayList<>();
    }
    this.customSegmentId.add(customSegmentIdItem);
    return this;
  }

  /**
   * The custom segment ID provided by Integral Ad Science. The ID must be between &#x60;1000001&#x60; and &#x60;1999999&#x60;, inclusive.
   * @return customSegmentId
   */
  @javax.annotation.Nullable
  public List<String> getCustomSegmentId() {
    return customSegmentId;
  }

  public void setCustomSegmentId(List<String> customSegmentId) {
    this.customSegmentId = customSegmentId;
  }


  public IntegralAdScience displayViewability(DisplayViewabilityEnum displayViewability) {
    this.displayViewability = displayViewability;
    return this;
  }

  /**
   * Display Viewability section (applicable to display line items only).
   * @return displayViewability
   */
  @javax.annotation.Nullable
  public DisplayViewabilityEnum getDisplayViewability() {
    return displayViewability;
  }

  public void setDisplayViewability(DisplayViewabilityEnum displayViewability) {
    this.displayViewability = displayViewability;
  }


  public IntegralAdScience excludeUnrateable(Boolean excludeUnrateable) {
    this.excludeUnrateable = excludeUnrateable;
    return this;
  }

  /**
   * Brand Safety - **Unrateable**.
   * @return excludeUnrateable
   */
  @javax.annotation.Nullable
  public Boolean getExcludeUnrateable() {
    return excludeUnrateable;
  }

  public void setExcludeUnrateable(Boolean excludeUnrateable) {
    this.excludeUnrateable = excludeUnrateable;
  }


  public IntegralAdScience excludedAdFraudRisk(ExcludedAdFraudRiskEnum excludedAdFraudRisk) {
    this.excludedAdFraudRisk = excludedAdFraudRisk;
    return this;
  }

  /**
   * Ad Fraud settings.
   * @return excludedAdFraudRisk
   */
  @javax.annotation.Nullable
  public ExcludedAdFraudRiskEnum getExcludedAdFraudRisk() {
    return excludedAdFraudRisk;
  }

  public void setExcludedAdFraudRisk(ExcludedAdFraudRiskEnum excludedAdFraudRisk) {
    this.excludedAdFraudRisk = excludedAdFraudRisk;
  }


  public IntegralAdScience excludedAdultRisk(ExcludedAdultRiskEnum excludedAdultRisk) {
    this.excludedAdultRisk = excludedAdultRisk;
    return this;
  }

  /**
   * Brand Safety - **Adult content**.
   * @return excludedAdultRisk
   */
  @javax.annotation.Nullable
  public ExcludedAdultRiskEnum getExcludedAdultRisk() {
    return excludedAdultRisk;
  }

  public void setExcludedAdultRisk(ExcludedAdultRiskEnum excludedAdultRisk) {
    this.excludedAdultRisk = excludedAdultRisk;
  }


  public IntegralAdScience excludedAlcoholRisk(ExcludedAlcoholRiskEnum excludedAlcoholRisk) {
    this.excludedAlcoholRisk = excludedAlcoholRisk;
    return this;
  }

  /**
   * Brand Safety - **Alcohol**.
   * @return excludedAlcoholRisk
   */
  @javax.annotation.Nullable
  public ExcludedAlcoholRiskEnum getExcludedAlcoholRisk() {
    return excludedAlcoholRisk;
  }

  public void setExcludedAlcoholRisk(ExcludedAlcoholRiskEnum excludedAlcoholRisk) {
    this.excludedAlcoholRisk = excludedAlcoholRisk;
  }


  public IntegralAdScience excludedDrugsRisk(ExcludedDrugsRiskEnum excludedDrugsRisk) {
    this.excludedDrugsRisk = excludedDrugsRisk;
    return this;
  }

  /**
   * Brand Safety - **Drugs**.
   * @return excludedDrugsRisk
   */
  @javax.annotation.Nullable
  public ExcludedDrugsRiskEnum getExcludedDrugsRisk() {
    return excludedDrugsRisk;
  }

  public void setExcludedDrugsRisk(ExcludedDrugsRiskEnum excludedDrugsRisk) {
    this.excludedDrugsRisk = excludedDrugsRisk;
  }


  public IntegralAdScience excludedGamblingRisk(ExcludedGamblingRiskEnum excludedGamblingRisk) {
    this.excludedGamblingRisk = excludedGamblingRisk;
    return this;
  }

  /**
   * Brand Safety - **Gambling**.
   * @return excludedGamblingRisk
   */
  @javax.annotation.Nullable
  public ExcludedGamblingRiskEnum getExcludedGamblingRisk() {
    return excludedGamblingRisk;
  }

  public void setExcludedGamblingRisk(ExcludedGamblingRiskEnum excludedGamblingRisk) {
    this.excludedGamblingRisk = excludedGamblingRisk;
  }


  public IntegralAdScience excludedHateSpeechRisk(ExcludedHateSpeechRiskEnum excludedHateSpeechRisk) {
    this.excludedHateSpeechRisk = excludedHateSpeechRisk;
    return this;
  }

  /**
   * Brand Safety - **Hate speech**.
   * @return excludedHateSpeechRisk
   */
  @javax.annotation.Nullable
  public ExcludedHateSpeechRiskEnum getExcludedHateSpeechRisk() {
    return excludedHateSpeechRisk;
  }

  public void setExcludedHateSpeechRisk(ExcludedHateSpeechRiskEnum excludedHateSpeechRisk) {
    this.excludedHateSpeechRisk = excludedHateSpeechRisk;
  }


  public IntegralAdScience excludedIllegalDownloadsRisk(ExcludedIllegalDownloadsRiskEnum excludedIllegalDownloadsRisk) {
    this.excludedIllegalDownloadsRisk = excludedIllegalDownloadsRisk;
    return this;
  }

  /**
   * Brand Safety - **Illegal downloads**.
   * @return excludedIllegalDownloadsRisk
   */
  @javax.annotation.Nullable
  public ExcludedIllegalDownloadsRiskEnum getExcludedIllegalDownloadsRisk() {
    return excludedIllegalDownloadsRisk;
  }

  public void setExcludedIllegalDownloadsRisk(ExcludedIllegalDownloadsRiskEnum excludedIllegalDownloadsRisk) {
    this.excludedIllegalDownloadsRisk = excludedIllegalDownloadsRisk;
  }


  public IntegralAdScience excludedOffensiveLanguageRisk(ExcludedOffensiveLanguageRiskEnum excludedOffensiveLanguageRisk) {
    this.excludedOffensiveLanguageRisk = excludedOffensiveLanguageRisk;
    return this;
  }

  /**
   * Brand Safety - **Offensive language**.
   * @return excludedOffensiveLanguageRisk
   */
  @javax.annotation.Nullable
  public ExcludedOffensiveLanguageRiskEnum getExcludedOffensiveLanguageRisk() {
    return excludedOffensiveLanguageRisk;
  }

  public void setExcludedOffensiveLanguageRisk(ExcludedOffensiveLanguageRiskEnum excludedOffensiveLanguageRisk) {
    this.excludedOffensiveLanguageRisk = excludedOffensiveLanguageRisk;
  }


  public IntegralAdScience excludedViolenceRisk(ExcludedViolenceRiskEnum excludedViolenceRisk) {
    this.excludedViolenceRisk = excludedViolenceRisk;
    return this;
  }

  /**
   * Brand Safety - **Violence**.
   * @return excludedViolenceRisk
   */
  @javax.annotation.Nullable
  public ExcludedViolenceRiskEnum getExcludedViolenceRisk() {
    return excludedViolenceRisk;
  }

  public void setExcludedViolenceRisk(ExcludedViolenceRiskEnum excludedViolenceRisk) {
    this.excludedViolenceRisk = excludedViolenceRisk;
  }


  public IntegralAdScience traqScoreOption(TraqScoreOptionEnum traqScoreOption) {
    this.traqScoreOption = traqScoreOption;
    return this;
  }

  /**
   * True advertising quality (applicable to Display line items only).
   * @return traqScoreOption
   */
  @javax.annotation.Nullable
  public TraqScoreOptionEnum getTraqScoreOption() {
    return traqScoreOption;
  }

  public void setTraqScoreOption(TraqScoreOptionEnum traqScoreOption) {
    this.traqScoreOption = traqScoreOption;
  }


  public IntegralAdScience videoViewability(VideoViewabilityEnum videoViewability) {
    this.videoViewability = videoViewability;
    return this;
  }

  /**
   * Video Viewability Section (applicable to video line items only).
   * @return videoViewability
   */
  @javax.annotation.Nullable
  public VideoViewabilityEnum getVideoViewability() {
    return videoViewability;
  }

  public void setVideoViewability(VideoViewabilityEnum videoViewability) {
    this.videoViewability = videoViewability;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegralAdScience integralAdScience = (IntegralAdScience) o;
    return Objects.equals(this.customSegmentId, integralAdScience.customSegmentId) &&
        Objects.equals(this.displayViewability, integralAdScience.displayViewability) &&
        Objects.equals(this.excludeUnrateable, integralAdScience.excludeUnrateable) &&
        Objects.equals(this.excludedAdFraudRisk, integralAdScience.excludedAdFraudRisk) &&
        Objects.equals(this.excludedAdultRisk, integralAdScience.excludedAdultRisk) &&
        Objects.equals(this.excludedAlcoholRisk, integralAdScience.excludedAlcoholRisk) &&
        Objects.equals(this.excludedDrugsRisk, integralAdScience.excludedDrugsRisk) &&
        Objects.equals(this.excludedGamblingRisk, integralAdScience.excludedGamblingRisk) &&
        Objects.equals(this.excludedHateSpeechRisk, integralAdScience.excludedHateSpeechRisk) &&
        Objects.equals(this.excludedIllegalDownloadsRisk, integralAdScience.excludedIllegalDownloadsRisk) &&
        Objects.equals(this.excludedOffensiveLanguageRisk, integralAdScience.excludedOffensiveLanguageRisk) &&
        Objects.equals(this.excludedViolenceRisk, integralAdScience.excludedViolenceRisk) &&
        Objects.equals(this.traqScoreOption, integralAdScience.traqScoreOption) &&
        Objects.equals(this.videoViewability, integralAdScience.videoViewability);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customSegmentId, displayViewability, excludeUnrateable, excludedAdFraudRisk, excludedAdultRisk, excludedAlcoholRisk, excludedDrugsRisk, excludedGamblingRisk, excludedHateSpeechRisk, excludedIllegalDownloadsRisk, excludedOffensiveLanguageRisk, excludedViolenceRisk, traqScoreOption, videoViewability);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegralAdScience {\n");
    sb.append("    customSegmentId: ").append(toIndentedString(customSegmentId)).append("\n");
    sb.append("    displayViewability: ").append(toIndentedString(displayViewability)).append("\n");
    sb.append("    excludeUnrateable: ").append(toIndentedString(excludeUnrateable)).append("\n");
    sb.append("    excludedAdFraudRisk: ").append(toIndentedString(excludedAdFraudRisk)).append("\n");
    sb.append("    excludedAdultRisk: ").append(toIndentedString(excludedAdultRisk)).append("\n");
    sb.append("    excludedAlcoholRisk: ").append(toIndentedString(excludedAlcoholRisk)).append("\n");
    sb.append("    excludedDrugsRisk: ").append(toIndentedString(excludedDrugsRisk)).append("\n");
    sb.append("    excludedGamblingRisk: ").append(toIndentedString(excludedGamblingRisk)).append("\n");
    sb.append("    excludedHateSpeechRisk: ").append(toIndentedString(excludedHateSpeechRisk)).append("\n");
    sb.append("    excludedIllegalDownloadsRisk: ").append(toIndentedString(excludedIllegalDownloadsRisk)).append("\n");
    sb.append("    excludedOffensiveLanguageRisk: ").append(toIndentedString(excludedOffensiveLanguageRisk)).append("\n");
    sb.append("    excludedViolenceRisk: ").append(toIndentedString(excludedViolenceRisk)).append("\n");
    sb.append("    traqScoreOption: ").append(toIndentedString(traqScoreOption)).append("\n");
    sb.append("    videoViewability: ").append(toIndentedString(videoViewability)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customSegmentId");
    openapiFields.add("displayViewability");
    openapiFields.add("excludeUnrateable");
    openapiFields.add("excludedAdFraudRisk");
    openapiFields.add("excludedAdultRisk");
    openapiFields.add("excludedAlcoholRisk");
    openapiFields.add("excludedDrugsRisk");
    openapiFields.add("excludedGamblingRisk");
    openapiFields.add("excludedHateSpeechRisk");
    openapiFields.add("excludedIllegalDownloadsRisk");
    openapiFields.add("excludedOffensiveLanguageRisk");
    openapiFields.add("excludedViolenceRisk");
    openapiFields.add("traqScoreOption");
    openapiFields.add("videoViewability");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntegralAdScience
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntegralAdScience.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegralAdScience is not found in the empty JSON string", IntegralAdScience.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntegralAdScience.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntegralAdScience` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("customSegmentId") != null && !jsonObj.get("customSegmentId").isJsonNull() && !jsonObj.get("customSegmentId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customSegmentId` to be an array in the JSON string but got `%s`", jsonObj.get("customSegmentId").toString()));
      }
      if ((jsonObj.get("displayViewability") != null && !jsonObj.get("displayViewability").isJsonNull()) && !jsonObj.get("displayViewability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayViewability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayViewability").toString()));
      }
      // validate the optional field `displayViewability`
      if (jsonObj.get("displayViewability") != null && !jsonObj.get("displayViewability").isJsonNull()) {
        DisplayViewabilityEnum.validateJsonElement(jsonObj.get("displayViewability"));
      }
      if ((jsonObj.get("excludedAdFraudRisk") != null && !jsonObj.get("excludedAdFraudRisk").isJsonNull()) && !jsonObj.get("excludedAdFraudRisk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedAdFraudRisk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excludedAdFraudRisk").toString()));
      }
      // validate the optional field `excludedAdFraudRisk`
      if (jsonObj.get("excludedAdFraudRisk") != null && !jsonObj.get("excludedAdFraudRisk").isJsonNull()) {
        ExcludedAdFraudRiskEnum.validateJsonElement(jsonObj.get("excludedAdFraudRisk"));
      }
      if ((jsonObj.get("excludedAdultRisk") != null && !jsonObj.get("excludedAdultRisk").isJsonNull()) && !jsonObj.get("excludedAdultRisk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedAdultRisk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excludedAdultRisk").toString()));
      }
      // validate the optional field `excludedAdultRisk`
      if (jsonObj.get("excludedAdultRisk") != null && !jsonObj.get("excludedAdultRisk").isJsonNull()) {
        ExcludedAdultRiskEnum.validateJsonElement(jsonObj.get("excludedAdultRisk"));
      }
      if ((jsonObj.get("excludedAlcoholRisk") != null && !jsonObj.get("excludedAlcoholRisk").isJsonNull()) && !jsonObj.get("excludedAlcoholRisk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedAlcoholRisk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excludedAlcoholRisk").toString()));
      }
      // validate the optional field `excludedAlcoholRisk`
      if (jsonObj.get("excludedAlcoholRisk") != null && !jsonObj.get("excludedAlcoholRisk").isJsonNull()) {
        ExcludedAlcoholRiskEnum.validateJsonElement(jsonObj.get("excludedAlcoholRisk"));
      }
      if ((jsonObj.get("excludedDrugsRisk") != null && !jsonObj.get("excludedDrugsRisk").isJsonNull()) && !jsonObj.get("excludedDrugsRisk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedDrugsRisk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excludedDrugsRisk").toString()));
      }
      // validate the optional field `excludedDrugsRisk`
      if (jsonObj.get("excludedDrugsRisk") != null && !jsonObj.get("excludedDrugsRisk").isJsonNull()) {
        ExcludedDrugsRiskEnum.validateJsonElement(jsonObj.get("excludedDrugsRisk"));
      }
      if ((jsonObj.get("excludedGamblingRisk") != null && !jsonObj.get("excludedGamblingRisk").isJsonNull()) && !jsonObj.get("excludedGamblingRisk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedGamblingRisk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excludedGamblingRisk").toString()));
      }
      // validate the optional field `excludedGamblingRisk`
      if (jsonObj.get("excludedGamblingRisk") != null && !jsonObj.get("excludedGamblingRisk").isJsonNull()) {
        ExcludedGamblingRiskEnum.validateJsonElement(jsonObj.get("excludedGamblingRisk"));
      }
      if ((jsonObj.get("excludedHateSpeechRisk") != null && !jsonObj.get("excludedHateSpeechRisk").isJsonNull()) && !jsonObj.get("excludedHateSpeechRisk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedHateSpeechRisk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excludedHateSpeechRisk").toString()));
      }
      // validate the optional field `excludedHateSpeechRisk`
      if (jsonObj.get("excludedHateSpeechRisk") != null && !jsonObj.get("excludedHateSpeechRisk").isJsonNull()) {
        ExcludedHateSpeechRiskEnum.validateJsonElement(jsonObj.get("excludedHateSpeechRisk"));
      }
      if ((jsonObj.get("excludedIllegalDownloadsRisk") != null && !jsonObj.get("excludedIllegalDownloadsRisk").isJsonNull()) && !jsonObj.get("excludedIllegalDownloadsRisk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedIllegalDownloadsRisk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excludedIllegalDownloadsRisk").toString()));
      }
      // validate the optional field `excludedIllegalDownloadsRisk`
      if (jsonObj.get("excludedIllegalDownloadsRisk") != null && !jsonObj.get("excludedIllegalDownloadsRisk").isJsonNull()) {
        ExcludedIllegalDownloadsRiskEnum.validateJsonElement(jsonObj.get("excludedIllegalDownloadsRisk"));
      }
      if ((jsonObj.get("excludedOffensiveLanguageRisk") != null && !jsonObj.get("excludedOffensiveLanguageRisk").isJsonNull()) && !jsonObj.get("excludedOffensiveLanguageRisk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedOffensiveLanguageRisk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excludedOffensiveLanguageRisk").toString()));
      }
      // validate the optional field `excludedOffensiveLanguageRisk`
      if (jsonObj.get("excludedOffensiveLanguageRisk") != null && !jsonObj.get("excludedOffensiveLanguageRisk").isJsonNull()) {
        ExcludedOffensiveLanguageRiskEnum.validateJsonElement(jsonObj.get("excludedOffensiveLanguageRisk"));
      }
      if ((jsonObj.get("excludedViolenceRisk") != null && !jsonObj.get("excludedViolenceRisk").isJsonNull()) && !jsonObj.get("excludedViolenceRisk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedViolenceRisk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excludedViolenceRisk").toString()));
      }
      // validate the optional field `excludedViolenceRisk`
      if (jsonObj.get("excludedViolenceRisk") != null && !jsonObj.get("excludedViolenceRisk").isJsonNull()) {
        ExcludedViolenceRiskEnum.validateJsonElement(jsonObj.get("excludedViolenceRisk"));
      }
      if ((jsonObj.get("traqScoreOption") != null && !jsonObj.get("traqScoreOption").isJsonNull()) && !jsonObj.get("traqScoreOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traqScoreOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traqScoreOption").toString()));
      }
      // validate the optional field `traqScoreOption`
      if (jsonObj.get("traqScoreOption") != null && !jsonObj.get("traqScoreOption").isJsonNull()) {
        TraqScoreOptionEnum.validateJsonElement(jsonObj.get("traqScoreOption"));
      }
      if ((jsonObj.get("videoViewability") != null && !jsonObj.get("videoViewability").isJsonNull()) && !jsonObj.get("videoViewability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoViewability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoViewability").toString()));
      }
      // validate the optional field `videoViewability`
      if (jsonObj.get("videoViewability") != null && !jsonObj.get("videoViewability").isJsonNull()) {
        VideoViewabilityEnum.validateJsonElement(jsonObj.get("videoViewability"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegralAdScience.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegralAdScience' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegralAdScience> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegralAdScience.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegralAdScience>() {
           @Override
           public void write(JsonWriter out, IntegralAdScience value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegralAdScience read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntegralAdScience given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntegralAdScience
   * @throws IOException if the JSON string is invalid with respect to IntegralAdScience
   */
  public static IntegralAdScience fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegralAdScience.class);
  }

  /**
   * Convert an instance of IntegralAdScience to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

