/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings that control the performance goal of a campaign.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PerformanceGoal {
  public static final String SERIALIZED_NAME_PERFORMANCE_GOAL_AMOUNT_MICROS = "performanceGoalAmountMicros";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_GOAL_AMOUNT_MICROS)
  private String performanceGoalAmountMicros;

  public static final String SERIALIZED_NAME_PERFORMANCE_GOAL_PERCENTAGE_MICROS = "performanceGoalPercentageMicros";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_GOAL_PERCENTAGE_MICROS)
  private String performanceGoalPercentageMicros;

  public static final String SERIALIZED_NAME_PERFORMANCE_GOAL_STRING = "performanceGoalString";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_GOAL_STRING)
  private String performanceGoalString;

  /**
   * Required. The type of the performance goal.
   */
  @JsonAdapter(PerformanceGoalTypeEnum.Adapter.class)
  public enum PerformanceGoalTypeEnum {
    UNSPECIFIED("PERFORMANCE_GOAL_TYPE_UNSPECIFIED"),
    
    CPM("PERFORMANCE_GOAL_TYPE_CPM"),
    
    CPC("PERFORMANCE_GOAL_TYPE_CPC"),
    
    CPA("PERFORMANCE_GOAL_TYPE_CPA"),
    
    CTR("PERFORMANCE_GOAL_TYPE_CTR"),
    
    VIEWABILITY("PERFORMANCE_GOAL_TYPE_VIEWABILITY"),
    
    CPIAVC("PERFORMANCE_GOAL_TYPE_CPIAVC"),
    
    CPE("PERFORMANCE_GOAL_TYPE_CPE"),
    
    CLICK_CVR("PERFORMANCE_GOAL_TYPE_CLICK_CVR"),
    
    IMPRESSION_CVR("PERFORMANCE_GOAL_TYPE_IMPRESSION_CVR"),
    
    VCPM("PERFORMANCE_GOAL_TYPE_VCPM"),
    
    VTR("PERFORMANCE_GOAL_TYPE_VTR"),
    
    AUDIO_COMPLETION_RATE("PERFORMANCE_GOAL_TYPE_AUDIO_COMPLETION_RATE"),
    
    VIDEO_COMPLETION_RATE("PERFORMANCE_GOAL_TYPE_VIDEO_COMPLETION_RATE"),
    
    OTHER("PERFORMANCE_GOAL_TYPE_OTHER");

    private String value;

    PerformanceGoalTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PerformanceGoalTypeEnum fromValue(String value) {
      for (PerformanceGoalTypeEnum b : PerformanceGoalTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PerformanceGoalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PerformanceGoalTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PerformanceGoalTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PerformanceGoalTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PerformanceGoalTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERFORMANCE_GOAL_TYPE = "performanceGoalType";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_GOAL_TYPE)
  private PerformanceGoalTypeEnum performanceGoalType;

  public PerformanceGoal() {
  }

  public PerformanceGoal performanceGoalAmountMicros(String performanceGoalAmountMicros) {
    this.performanceGoalAmountMicros = performanceGoalAmountMicros;
    return this;
  }

  /**
   * The goal amount, in micros of the advertiser&#39;s currency. Applicable when performance_goal_type is one of: * &#x60;PERFORMANCE_GOAL_TYPE_CPM&#x60; * &#x60;PERFORMANCE_GOAL_TYPE_CPC&#x60; * &#x60;PERFORMANCE_GOAL_TYPE_CPA&#x60; * &#x60;PERFORMANCE_GOAL_TYPE_CPIAVC&#x60; * &#x60;PERFORMANCE_GOAL_TYPE_VCPM&#x60; For example 1500000 represents 1.5 standard units of the currency.
   * @return performanceGoalAmountMicros
   */
  @javax.annotation.Nullable
  public String getPerformanceGoalAmountMicros() {
    return performanceGoalAmountMicros;
  }

  public void setPerformanceGoalAmountMicros(String performanceGoalAmountMicros) {
    this.performanceGoalAmountMicros = performanceGoalAmountMicros;
  }


  public PerformanceGoal performanceGoalPercentageMicros(String performanceGoalPercentageMicros) {
    this.performanceGoalPercentageMicros = performanceGoalPercentageMicros;
    return this;
  }

  /**
   * The decimal representation of the goal percentage in micros. Applicable when performance_goal_type is one of: * &#x60;PERFORMANCE_GOAL_TYPE_CTR&#x60; * &#x60;PERFORMANCE_GOAL_TYPE_VIEWABILITY&#x60; * &#x60;PERFORMANCE_GOAL_TYPE_CLICK_CVR&#x60; * &#x60;PERFORMANCE_GOAL_TYPE_IMPRESSION_CVR&#x60; * &#x60;PERFORMANCE_GOAL_TYPE_VTR&#x60; * &#x60;PERFORMANCE_GOAL_TYPE_AUDIO_COMPLETION_RATE&#x60; * &#x60;PERFORMANCE_GOAL_TYPE_VIDEO_COMPLETION_RATE&#x60; For example, 70000 represents 7% (decimal 0.07).
   * @return performanceGoalPercentageMicros
   */
  @javax.annotation.Nullable
  public String getPerformanceGoalPercentageMicros() {
    return performanceGoalPercentageMicros;
  }

  public void setPerformanceGoalPercentageMicros(String performanceGoalPercentageMicros) {
    this.performanceGoalPercentageMicros = performanceGoalPercentageMicros;
  }


  public PerformanceGoal performanceGoalString(String performanceGoalString) {
    this.performanceGoalString = performanceGoalString;
    return this;
  }

  /**
   * A key performance indicator (KPI) string, which can be empty. Must be UTF-8 encoded with a length of no more than 100 characters. Applicable when performance_goal_type is set to &#x60;PERFORMANCE_GOAL_TYPE_OTHER&#x60;.
   * @return performanceGoalString
   */
  @javax.annotation.Nullable
  public String getPerformanceGoalString() {
    return performanceGoalString;
  }

  public void setPerformanceGoalString(String performanceGoalString) {
    this.performanceGoalString = performanceGoalString;
  }


  public PerformanceGoal performanceGoalType(PerformanceGoalTypeEnum performanceGoalType) {
    this.performanceGoalType = performanceGoalType;
    return this;
  }

  /**
   * Required. The type of the performance goal.
   * @return performanceGoalType
   */
  @javax.annotation.Nullable
  public PerformanceGoalTypeEnum getPerformanceGoalType() {
    return performanceGoalType;
  }

  public void setPerformanceGoalType(PerformanceGoalTypeEnum performanceGoalType) {
    this.performanceGoalType = performanceGoalType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerformanceGoal performanceGoal = (PerformanceGoal) o;
    return Objects.equals(this.performanceGoalAmountMicros, performanceGoal.performanceGoalAmountMicros) &&
        Objects.equals(this.performanceGoalPercentageMicros, performanceGoal.performanceGoalPercentageMicros) &&
        Objects.equals(this.performanceGoalString, performanceGoal.performanceGoalString) &&
        Objects.equals(this.performanceGoalType, performanceGoal.performanceGoalType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(performanceGoalAmountMicros, performanceGoalPercentageMicros, performanceGoalString, performanceGoalType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerformanceGoal {\n");
    sb.append("    performanceGoalAmountMicros: ").append(toIndentedString(performanceGoalAmountMicros)).append("\n");
    sb.append("    performanceGoalPercentageMicros: ").append(toIndentedString(performanceGoalPercentageMicros)).append("\n");
    sb.append("    performanceGoalString: ").append(toIndentedString(performanceGoalString)).append("\n");
    sb.append("    performanceGoalType: ").append(toIndentedString(performanceGoalType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("performanceGoalAmountMicros");
    openapiFields.add("performanceGoalPercentageMicros");
    openapiFields.add("performanceGoalString");
    openapiFields.add("performanceGoalType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PerformanceGoal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PerformanceGoal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PerformanceGoal is not found in the empty JSON string", PerformanceGoal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PerformanceGoal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PerformanceGoal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("performanceGoalAmountMicros") != null && !jsonObj.get("performanceGoalAmountMicros").isJsonNull()) && !jsonObj.get("performanceGoalAmountMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `performanceGoalAmountMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("performanceGoalAmountMicros").toString()));
      }
      if ((jsonObj.get("performanceGoalPercentageMicros") != null && !jsonObj.get("performanceGoalPercentageMicros").isJsonNull()) && !jsonObj.get("performanceGoalPercentageMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `performanceGoalPercentageMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("performanceGoalPercentageMicros").toString()));
      }
      if ((jsonObj.get("performanceGoalString") != null && !jsonObj.get("performanceGoalString").isJsonNull()) && !jsonObj.get("performanceGoalString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `performanceGoalString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("performanceGoalString").toString()));
      }
      if ((jsonObj.get("performanceGoalType") != null && !jsonObj.get("performanceGoalType").isJsonNull()) && !jsonObj.get("performanceGoalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `performanceGoalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("performanceGoalType").toString()));
      }
      // validate the optional field `performanceGoalType`
      if (jsonObj.get("performanceGoalType") != null && !jsonObj.get("performanceGoalType").isJsonNull()) {
        PerformanceGoalTypeEnum.validateJsonElement(jsonObj.get("performanceGoalType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PerformanceGoal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PerformanceGoal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PerformanceGoal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PerformanceGoal.class));

       return (TypeAdapter<T>) new TypeAdapter<PerformanceGoal>() {
           @Override
           public void write(JsonWriter out, PerformanceGoal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PerformanceGoal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PerformanceGoal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PerformanceGoal
   * @throws IOException if the JSON string is invalid with respect to PerformanceGoal
   */
  public static PerformanceGoal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PerformanceGoal.class);
  }

  /**
   * Convert an instance of PerformanceGoal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

