/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TrackingFloodlightActivityConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings that control how conversions are counted. All post-click conversions will be counted. A percentage value can be set for post-view conversions counting.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConversionCountingConfig {
  public static final String SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_CONFIGS = "floodlightActivityConfigs";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_CONFIGS)
  private List<TrackingFloodlightActivityConfig> floodlightActivityConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_POST_VIEW_COUNT_PERCENTAGE_MILLIS = "postViewCountPercentageMillis";
  @SerializedName(SERIALIZED_NAME_POST_VIEW_COUNT_PERCENTAGE_MILLIS)
  private String postViewCountPercentageMillis;

  public ConversionCountingConfig() {
  }

  public ConversionCountingConfig floodlightActivityConfigs(List<TrackingFloodlightActivityConfig> floodlightActivityConfigs) {
    this.floodlightActivityConfigs = floodlightActivityConfigs;
    return this;
  }

  public ConversionCountingConfig addFloodlightActivityConfigsItem(TrackingFloodlightActivityConfig floodlightActivityConfigsItem) {
    if (this.floodlightActivityConfigs == null) {
      this.floodlightActivityConfigs = new ArrayList<>();
    }
    this.floodlightActivityConfigs.add(floodlightActivityConfigsItem);
    return this;
  }

  /**
   * The Floodlight activity configs used to track conversions. The number of conversions counted is the sum of all of the conversions counted by all of the Floodlight activity IDs specified in this field.
   * @return floodlightActivityConfigs
   */
  @javax.annotation.Nullable
  public List<TrackingFloodlightActivityConfig> getFloodlightActivityConfigs() {
    return floodlightActivityConfigs;
  }

  public void setFloodlightActivityConfigs(List<TrackingFloodlightActivityConfig> floodlightActivityConfigs) {
    this.floodlightActivityConfigs = floodlightActivityConfigs;
  }


  public ConversionCountingConfig postViewCountPercentageMillis(String postViewCountPercentageMillis) {
    this.postViewCountPercentageMillis = postViewCountPercentageMillis;
    return this;
  }

  /**
   * The percentage of post-view conversions to count, in millis (1/1000 of a percent). Must be between 0 and 100000 inclusive. For example, to track 50% of the post-click conversions, set a value of 50000.
   * @return postViewCountPercentageMillis
   */
  @javax.annotation.Nullable
  public String getPostViewCountPercentageMillis() {
    return postViewCountPercentageMillis;
  }

  public void setPostViewCountPercentageMillis(String postViewCountPercentageMillis) {
    this.postViewCountPercentageMillis = postViewCountPercentageMillis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversionCountingConfig conversionCountingConfig = (ConversionCountingConfig) o;
    return Objects.equals(this.floodlightActivityConfigs, conversionCountingConfig.floodlightActivityConfigs) &&
        Objects.equals(this.postViewCountPercentageMillis, conversionCountingConfig.postViewCountPercentageMillis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(floodlightActivityConfigs, postViewCountPercentageMillis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversionCountingConfig {\n");
    sb.append("    floodlightActivityConfigs: ").append(toIndentedString(floodlightActivityConfigs)).append("\n");
    sb.append("    postViewCountPercentageMillis: ").append(toIndentedString(postViewCountPercentageMillis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("floodlightActivityConfigs");
    openapiFields.add("postViewCountPercentageMillis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversionCountingConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversionCountingConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversionCountingConfig is not found in the empty JSON string", ConversionCountingConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversionCountingConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversionCountingConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("floodlightActivityConfigs") != null && !jsonObj.get("floodlightActivityConfigs").isJsonNull()) {
        JsonArray jsonArrayfloodlightActivityConfigs = jsonObj.getAsJsonArray("floodlightActivityConfigs");
        if (jsonArrayfloodlightActivityConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("floodlightActivityConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `floodlightActivityConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("floodlightActivityConfigs").toString()));
          }

          // validate the optional field `floodlightActivityConfigs` (array)
          for (int i = 0; i < jsonArrayfloodlightActivityConfigs.size(); i++) {
            TrackingFloodlightActivityConfig.validateJsonElement(jsonArrayfloodlightActivityConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("postViewCountPercentageMillis") != null && !jsonObj.get("postViewCountPercentageMillis").isJsonNull()) && !jsonObj.get("postViewCountPercentageMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postViewCountPercentageMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postViewCountPercentageMillis").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversionCountingConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversionCountingConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversionCountingConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversionCountingConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversionCountingConfig>() {
           @Override
           public void write(JsonWriter out, ConversionCountingConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversionCountingConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversionCountingConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversionCountingConfig
   * @throws IOException if the JSON string is invalid with respect to ConversionCountingConfig
   */
  public static ConversionCountingConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversionCountingConfig.class);
  }

  /**
   * Convert an instance of ConversionCountingConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

