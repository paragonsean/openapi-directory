/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Targeting details for digital content label. This will be populated in the details field of an AssignedTargetingOption when targeting_type is &#x60;TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DigitalContentLabelAssignedTargetingOptionDetails {
  /**
   * Output only. The display name of the digital content label rating tier.
   */
  @JsonAdapter(ContentRatingTierEnum.Adapter.class)
  public enum ContentRatingTierEnum {
    UNSPECIFIED("CONTENT_RATING_TIER_UNSPECIFIED"),
    
    UNRATED("CONTENT_RATING_TIER_UNRATED"),
    
    GENERAL("CONTENT_RATING_TIER_GENERAL"),
    
    PARENTAL_GUIDANCE("CONTENT_RATING_TIER_PARENTAL_GUIDANCE"),
    
    TEENS("CONTENT_RATING_TIER_TEENS"),
    
    MATURE("CONTENT_RATING_TIER_MATURE");

    private String value;

    ContentRatingTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentRatingTierEnum fromValue(String value) {
      for (ContentRatingTierEnum b : ContentRatingTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentRatingTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentRatingTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentRatingTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentRatingTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentRatingTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_RATING_TIER = "contentRatingTier";
  @SerializedName(SERIALIZED_NAME_CONTENT_RATING_TIER)
  private ContentRatingTierEnum contentRatingTier;

  public static final String SERIALIZED_NAME_EXCLUDED_TARGETING_OPTION_ID = "excludedTargetingOptionId";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_TARGETING_OPTION_ID)
  private String excludedTargetingOptionId;

  public DigitalContentLabelAssignedTargetingOptionDetails() {
  }

  public DigitalContentLabelAssignedTargetingOptionDetails(
     ContentRatingTierEnum contentRatingTier
  ) {
    this();
    this.contentRatingTier = contentRatingTier;
  }

  /**
   * Output only. The display name of the digital content label rating tier.
   * @return contentRatingTier
   */
  @javax.annotation.Nullable
  public ContentRatingTierEnum getContentRatingTier() {
    return contentRatingTier;
  }



  public DigitalContentLabelAssignedTargetingOptionDetails excludedTargetingOptionId(String excludedTargetingOptionId) {
    this.excludedTargetingOptionId = excludedTargetingOptionId;
    return this;
  }

  /**
   * Required. ID of the digital content label to be EXCLUDED.
   * @return excludedTargetingOptionId
   */
  @javax.annotation.Nullable
  public String getExcludedTargetingOptionId() {
    return excludedTargetingOptionId;
  }

  public void setExcludedTargetingOptionId(String excludedTargetingOptionId) {
    this.excludedTargetingOptionId = excludedTargetingOptionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalContentLabelAssignedTargetingOptionDetails digitalContentLabelAssignedTargetingOptionDetails = (DigitalContentLabelAssignedTargetingOptionDetails) o;
    return Objects.equals(this.contentRatingTier, digitalContentLabelAssignedTargetingOptionDetails.contentRatingTier) &&
        Objects.equals(this.excludedTargetingOptionId, digitalContentLabelAssignedTargetingOptionDetails.excludedTargetingOptionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentRatingTier, excludedTargetingOptionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalContentLabelAssignedTargetingOptionDetails {\n");
    sb.append("    contentRatingTier: ").append(toIndentedString(contentRatingTier)).append("\n");
    sb.append("    excludedTargetingOptionId: ").append(toIndentedString(excludedTargetingOptionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentRatingTier");
    openapiFields.add("excludedTargetingOptionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DigitalContentLabelAssignedTargetingOptionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DigitalContentLabelAssignedTargetingOptionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DigitalContentLabelAssignedTargetingOptionDetails is not found in the empty JSON string", DigitalContentLabelAssignedTargetingOptionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DigitalContentLabelAssignedTargetingOptionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DigitalContentLabelAssignedTargetingOptionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contentRatingTier") != null && !jsonObj.get("contentRatingTier").isJsonNull()) && !jsonObj.get("contentRatingTier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentRatingTier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentRatingTier").toString()));
      }
      // validate the optional field `contentRatingTier`
      if (jsonObj.get("contentRatingTier") != null && !jsonObj.get("contentRatingTier").isJsonNull()) {
        ContentRatingTierEnum.validateJsonElement(jsonObj.get("contentRatingTier"));
      }
      if ((jsonObj.get("excludedTargetingOptionId") != null && !jsonObj.get("excludedTargetingOptionId").isJsonNull()) && !jsonObj.get("excludedTargetingOptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedTargetingOptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excludedTargetingOptionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DigitalContentLabelAssignedTargetingOptionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DigitalContentLabelAssignedTargetingOptionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DigitalContentLabelAssignedTargetingOptionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DigitalContentLabelAssignedTargetingOptionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<DigitalContentLabelAssignedTargetingOptionDetails>() {
           @Override
           public void write(JsonWriter out, DigitalContentLabelAssignedTargetingOptionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DigitalContentLabelAssignedTargetingOptionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DigitalContentLabelAssignedTargetingOptionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DigitalContentLabelAssignedTargetingOptionDetails
   * @throws IOException if the JSON string is invalid with respect to DigitalContentLabelAssignedTargetingOptionDetails
   */
  public static DigitalContentLabelAssignedTargetingOptionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DigitalContentLabelAssignedTargetingOptionDetails.class);
  }

  /**
   * Convert an instance of DigitalContentLabelAssignedTargetingOptionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

