/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreativeConfig;
import org.openapitools.client.model.InventorySourceAccessors;
import org.openapitools.client.model.InventorySourceStatus;
import org.openapitools.client.model.RateDetails;
import org.openapitools.client.model.TimeRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An inventory source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InventorySource {
  /**
   * Whether the inventory source has a guaranteed or non-guaranteed delivery.
   */
  @JsonAdapter(CommitmentEnum.Adapter.class)
  public enum CommitmentEnum {
    UNSPECIFIED("INVENTORY_SOURCE_COMMITMENT_UNSPECIFIED"),
    
    GUARANTEED("INVENTORY_SOURCE_COMMITMENT_GUARANTEED"),
    
    NON_GUARANTEED("INVENTORY_SOURCE_COMMITMENT_NON_GUARANTEED");

    private String value;

    CommitmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommitmentEnum fromValue(String value) {
      for (CommitmentEnum b : CommitmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommitmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommitmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommitmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommitmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CommitmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMMITMENT = "commitment";
  @SerializedName(SERIALIZED_NAME_COMMITMENT)
  private CommitmentEnum commitment;

  public static final String SERIALIZED_NAME_CREATIVE_CONFIGS = "creativeConfigs";
  @SerializedName(SERIALIZED_NAME_CREATIVE_CONFIGS)
  private List<CreativeConfig> creativeConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEAL_ID = "dealId";
  @SerializedName(SERIALIZED_NAME_DEAL_ID)
  private String dealId;

  /**
   * The delivery method of the inventory source. * For non-guaranteed inventory sources, the only acceptable value is &#x60;INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC&#x60;. * For guaranteed inventory sources, acceptable values are &#x60;INVENTORY_SOURCE_DELIVERY_METHOD_TAG&#x60; and &#x60;INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC&#x60;.
   */
  @JsonAdapter(DeliveryMethodEnum.Adapter.class)
  public enum DeliveryMethodEnum {
    UNSPECIFIED("INVENTORY_SOURCE_DELIVERY_METHOD_UNSPECIFIED"),
    
    PROGRAMMATIC("INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC"),
    
    TAG("INVENTORY_SOURCE_DELIVERY_METHOD_TAG");

    private String value;

    DeliveryMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryMethodEnum fromValue(String value) {
      for (DeliveryMethodEnum b : DeliveryMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeliveryMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_METHOD = "deliveryMethod";
  @SerializedName(SERIALIZED_NAME_DELIVERY_METHOD)
  private DeliveryMethodEnum deliveryMethod;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * The exchange to which the inventory source belongs.
   */
  @JsonAdapter(ExchangeEnum.Adapter.class)
  public enum ExchangeEnum {
    UNSPECIFIED("EXCHANGE_UNSPECIFIED"),
    
    GOOGLE_AD_MANAGER("EXCHANGE_GOOGLE_AD_MANAGER"),
    
    APPNEXUS("EXCHANGE_APPNEXUS"),
    
    BRIGHTROLL("EXCHANGE_BRIGHTROLL"),
    
    ADFORM("EXCHANGE_ADFORM"),
    
    ADMETA("EXCHANGE_ADMETA"),
    
    ADMIXER("EXCHANGE_ADMIXER"),
    
    ADSMOGO("EXCHANGE_ADSMOGO"),
    
    ADSWIZZ("EXCHANGE_ADSWIZZ"),
    
    BIDSWITCH("EXCHANGE_BIDSWITCH"),
    
    BRIGHTROLL_DISPLAY("EXCHANGE_BRIGHTROLL_DISPLAY"),
    
    CADREON("EXCHANGE_CADREON"),
    
    DAILYMOTION("EXCHANGE_DAILYMOTION"),
    
    FIVE("EXCHANGE_FIVE"),
    
    FLUCT("EXCHANGE_FLUCT"),
    
    FREEWHEEL("EXCHANGE_FREEWHEEL"),
    
    GENIEE("EXCHANGE_GENIEE"),
    
    GUMGUM("EXCHANGE_GUMGUM"),
    
    IMOBILE("EXCHANGE_IMOBILE"),
    
    IBILLBOARD("EXCHANGE_IBILLBOARD"),
    
    IMPROVE_DIGITAL("EXCHANGE_IMPROVE_DIGITAL"),
    
    INDEX("EXCHANGE_INDEX"),
    
    KARGO("EXCHANGE_KARGO"),
    
    MICROAD("EXCHANGE_MICROAD"),
    
    MOPUB("EXCHANGE_MOPUB"),
    
    NEND("EXCHANGE_NEND"),
    
    ONE_BY_AOL_DISPLAY("EXCHANGE_ONE_BY_AOL_DISPLAY"),
    
    ONE_BY_AOL_MOBILE("EXCHANGE_ONE_BY_AOL_MOBILE"),
    
    ONE_BY_AOL_VIDEO("EXCHANGE_ONE_BY_AOL_VIDEO"),
    
    OOYALA("EXCHANGE_OOYALA"),
    
    OPENX("EXCHANGE_OPENX"),
    
    PERMODO("EXCHANGE_PERMODO"),
    
    PLATFORMONE("EXCHANGE_PLATFORMONE"),
    
    PLATFORMID("EXCHANGE_PLATFORMID"),
    
    PUBMATIC("EXCHANGE_PUBMATIC"),
    
    PULSEPOINT("EXCHANGE_PULSEPOINT"),
    
    REVENUEMAX("EXCHANGE_REVENUEMAX"),
    
    RUBICON("EXCHANGE_RUBICON"),
    
    SMARTCLIP("EXCHANGE_SMARTCLIP"),
    
    SMARTRTB("EXCHANGE_SMARTRTB"),
    
    SMARTSTREAMTV("EXCHANGE_SMARTSTREAMTV"),
    
    SOVRN("EXCHANGE_SOVRN"),
    
    SPOTXCHANGE("EXCHANGE_SPOTXCHANGE"),
    
    STROER("EXCHANGE_STROER"),
    
    TEADSTV("EXCHANGE_TEADSTV"),
    
    TELARIA("EXCHANGE_TELARIA"),
    
    TVN("EXCHANGE_TVN"),
    
    UNITED("EXCHANGE_UNITED"),
    
    YIELDLAB("EXCHANGE_YIELDLAB"),
    
    YIELDMO("EXCHANGE_YIELDMO"),
    
    UNRULYX("EXCHANGE_UNRULYX"),
    
    OPEN8("EXCHANGE_OPEN8"),
    
    TRITON("EXCHANGE_TRITON"),
    
    TRIPLELIFT("EXCHANGE_TRIPLELIFT"),
    
    TABOOLA("EXCHANGE_TABOOLA"),
    
    INMOBI("EXCHANGE_INMOBI"),
    
    SMAATO("EXCHANGE_SMAATO"),
    
    AJA("EXCHANGE_AJA"),
    
    SUPERSHIP("EXCHANGE_SUPERSHIP"),
    
    NEXSTAR_DIGITAL("EXCHANGE_NEXSTAR_DIGITAL"),
    
    WAZE("EXCHANGE_WAZE"),
    
    SOUNDCAST("EXCHANGE_SOUNDCAST"),
    
    SHARETHROUGH("EXCHANGE_SHARETHROUGH"),
    
    FYBER("EXCHANGE_FYBER"),
    
    RED_FOR_PUBLISHERS("EXCHANGE_RED_FOR_PUBLISHERS"),
    
    MEDIANET("EXCHANGE_MEDIANET"),
    
    TAPJOY("EXCHANGE_TAPJOY"),
    
    VISTAR("EXCHANGE_VISTAR"),
    
    DAX("EXCHANGE_DAX"),
    
    JCD("EXCHANGE_JCD"),
    
    PLACE_EXCHANGE("EXCHANGE_PLACE_EXCHANGE"),
    
    APPLOVIN("EXCHANGE_APPLOVIN"),
    
    CONNATIX("EXCHANGE_CONNATIX"),
    
    RESET_DIGITAL("EXCHANGE_RESET_DIGITAL"),
    
    HIVESTACK("EXCHANGE_HIVESTACK"),
    
    APPLOVIN_GBID("EXCHANGE_APPLOVIN_GBID"),
    
    FYBER_GBID("EXCHANGE_FYBER_GBID"),
    
    UNITY_GBID("EXCHANGE_UNITY_GBID"),
    
    CHARTBOOST_GBID("EXCHANGE_CHARTBOOST_GBID"),
    
    ADMOST_GBID("EXCHANGE_ADMOST_GBID"),
    
    TOPON_GBID("EXCHANGE_TOPON_GBID");

    private String value;

    ExchangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExchangeEnum fromValue(String value) {
      for (ExchangeEnum b : ExchangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExchangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExchangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExchangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExchangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExchangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCHANGE = "exchange";
  @SerializedName(SERIALIZED_NAME_EXCHANGE)
  private ExchangeEnum exchange;

  public static final String SERIALIZED_NAME_GUARANTEED_ORDER_ID = "guaranteedOrderId";
  @SerializedName(SERIALIZED_NAME_GUARANTEED_ORDER_ID)
  private String guaranteedOrderId;

  public static final String SERIALIZED_NAME_INVENTORY_SOURCE_ID = "inventorySourceId";
  @SerializedName(SERIALIZED_NAME_INVENTORY_SOURCE_ID)
  private String inventorySourceId;

  /**
   * Output only. The product type of the inventory source, denoting the way through which it sells inventory.
   */
  @JsonAdapter(InventorySourceProductTypeEnum.Adapter.class)
  public enum InventorySourceProductTypeEnum {
    INVENTORY_SOURCE_PRODUCT_TYPE_UNSPECIFIED("INVENTORY_SOURCE_PRODUCT_TYPE_UNSPECIFIED"),
    
    PREFERRED_DEAL("PREFERRED_DEAL"),
    
    PRIVATE_AUCTION("PRIVATE_AUCTION"),
    
    PROGRAMMATIC_GUARANTEED("PROGRAMMATIC_GUARANTEED"),
    
    TAG_GUARANTEED("TAG_GUARANTEED"),
    
    YOUTUBE_RESERVE("YOUTUBE_RESERVE"),
    
    INSTANT_RESERVE("INSTANT_RESERVE"),
    
    GUARANTEED_PACKAGE("GUARANTEED_PACKAGE"),
    
    PROGRAMMATIC_TV("PROGRAMMATIC_TV"),
    
    AUCTION_PACKAGE("AUCTION_PACKAGE");

    private String value;

    InventorySourceProductTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InventorySourceProductTypeEnum fromValue(String value) {
      for (InventorySourceProductTypeEnum b : InventorySourceProductTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InventorySourceProductTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InventorySourceProductTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InventorySourceProductTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InventorySourceProductTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InventorySourceProductTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVENTORY_SOURCE_PRODUCT_TYPE = "inventorySourceProductType";
  @SerializedName(SERIALIZED_NAME_INVENTORY_SOURCE_PRODUCT_TYPE)
  private InventorySourceProductTypeEnum inventorySourceProductType;

  /**
   * Denotes the type of the inventory source.
   */
  @JsonAdapter(InventorySourceTypeEnum.Adapter.class)
  public enum InventorySourceTypeEnum {
    UNSPECIFIED("INVENTORY_SOURCE_TYPE_UNSPECIFIED"),
    
    PRIVATE("INVENTORY_SOURCE_TYPE_PRIVATE"),
    
    AUCTION_PACKAGE("INVENTORY_SOURCE_TYPE_AUCTION_PACKAGE");

    private String value;

    InventorySourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InventorySourceTypeEnum fromValue(String value) {
      for (InventorySourceTypeEnum b : InventorySourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InventorySourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InventorySourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InventorySourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InventorySourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InventorySourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVENTORY_SOURCE_TYPE = "inventorySourceType";
  @SerializedName(SERIALIZED_NAME_INVENTORY_SOURCE_TYPE)
  private InventorySourceTypeEnum inventorySourceType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PUBLISHER_NAME = "publisherName";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_NAME)
  private String publisherName;

  public static final String SERIALIZED_NAME_RATE_DETAILS = "rateDetails";
  @SerializedName(SERIALIZED_NAME_RATE_DETAILS)
  private RateDetails rateDetails;

  public static final String SERIALIZED_NAME_READ_ADVERTISER_IDS = "readAdvertiserIds";
  @SerializedName(SERIALIZED_NAME_READ_ADVERTISER_IDS)
  private List<String> readAdvertiserIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_READ_PARTNER_IDS = "readPartnerIds";
  @SerializedName(SERIALIZED_NAME_READ_PARTNER_IDS)
  private List<String> readPartnerIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_READ_WRITE_ACCESSORS = "readWriteAccessors";
  @SerializedName(SERIALIZED_NAME_READ_WRITE_ACCESSORS)
  private InventorySourceAccessors readWriteAccessors;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private InventorySourceStatus status;

  public static final String SERIALIZED_NAME_TIME_RANGE = "timeRange";
  @SerializedName(SERIALIZED_NAME_TIME_RANGE)
  private TimeRange timeRange;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public InventorySource() {
  }

  public InventorySource(
     String inventorySourceId, 
     InventorySourceProductTypeEnum inventorySourceProductType, 
     String name, 
     List<String> readAdvertiserIds, 
     List<String> readPartnerIds, 
     String updateTime
  ) {
    this();
    this.inventorySourceId = inventorySourceId;
    this.inventorySourceProductType = inventorySourceProductType;
    this.name = name;
    this.readAdvertiserIds = readAdvertiserIds;
    this.readPartnerIds = readPartnerIds;
    this.updateTime = updateTime;
  }

  public InventorySource commitment(CommitmentEnum commitment) {
    this.commitment = commitment;
    return this;
  }

  /**
   * Whether the inventory source has a guaranteed or non-guaranteed delivery.
   * @return commitment
   */
  @javax.annotation.Nullable
  public CommitmentEnum getCommitment() {
    return commitment;
  }

  public void setCommitment(CommitmentEnum commitment) {
    this.commitment = commitment;
  }


  public InventorySource creativeConfigs(List<CreativeConfig> creativeConfigs) {
    this.creativeConfigs = creativeConfigs;
    return this;
  }

  public InventorySource addCreativeConfigsItem(CreativeConfig creativeConfigsItem) {
    if (this.creativeConfigs == null) {
      this.creativeConfigs = new ArrayList<>();
    }
    this.creativeConfigs.add(creativeConfigsItem);
    return this;
  }

  /**
   * The creative requirements of the inventory source. Not applicable for auction packages.
   * @return creativeConfigs
   */
  @javax.annotation.Nullable
  public List<CreativeConfig> getCreativeConfigs() {
    return creativeConfigs;
  }

  public void setCreativeConfigs(List<CreativeConfig> creativeConfigs) {
    this.creativeConfigs = creativeConfigs;
  }


  public InventorySource dealId(String dealId) {
    this.dealId = dealId;
    return this;
  }

  /**
   * The ID in the exchange space that uniquely identifies the inventory source. Must be unique across buyers within each exchange but not necessarily unique across exchanges.
   * @return dealId
   */
  @javax.annotation.Nullable
  public String getDealId() {
    return dealId;
  }

  public void setDealId(String dealId) {
    this.dealId = dealId;
  }


  public InventorySource deliveryMethod(DeliveryMethodEnum deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
    return this;
  }

  /**
   * The delivery method of the inventory source. * For non-guaranteed inventory sources, the only acceptable value is &#x60;INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC&#x60;. * For guaranteed inventory sources, acceptable values are &#x60;INVENTORY_SOURCE_DELIVERY_METHOD_TAG&#x60; and &#x60;INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC&#x60;.
   * @return deliveryMethod
   */
  @javax.annotation.Nullable
  public DeliveryMethodEnum getDeliveryMethod() {
    return deliveryMethod;
  }

  public void setDeliveryMethod(DeliveryMethodEnum deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
  }


  public InventorySource displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the inventory source. Must be UTF-8 encoded with a maximum size of 240 bytes.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public InventorySource exchange(ExchangeEnum exchange) {
    this.exchange = exchange;
    return this;
  }

  /**
   * The exchange to which the inventory source belongs.
   * @return exchange
   */
  @javax.annotation.Nullable
  public ExchangeEnum getExchange() {
    return exchange;
  }

  public void setExchange(ExchangeEnum exchange) {
    this.exchange = exchange;
  }


  public InventorySource guaranteedOrderId(String guaranteedOrderId) {
    this.guaranteedOrderId = guaranteedOrderId;
    return this;
  }

  /**
   * Immutable. The ID of the guaranteed order that this inventory source belongs to. Only applicable when commitment is &#x60;INVENTORY_SOURCE_COMMITMENT_GUARANTEED&#x60;.
   * @return guaranteedOrderId
   */
  @javax.annotation.Nullable
  public String getGuaranteedOrderId() {
    return guaranteedOrderId;
  }

  public void setGuaranteedOrderId(String guaranteedOrderId) {
    this.guaranteedOrderId = guaranteedOrderId;
  }


  /**
   * Output only. The unique ID of the inventory source. Assigned by the system.
   * @return inventorySourceId
   */
  @javax.annotation.Nullable
  public String getInventorySourceId() {
    return inventorySourceId;
  }



  /**
   * Output only. The product type of the inventory source, denoting the way through which it sells inventory.
   * @return inventorySourceProductType
   */
  @javax.annotation.Nullable
  public InventorySourceProductTypeEnum getInventorySourceProductType() {
    return inventorySourceProductType;
  }



  public InventorySource inventorySourceType(InventorySourceTypeEnum inventorySourceType) {
    this.inventorySourceType = inventorySourceType;
    return this;
  }

  /**
   * Denotes the type of the inventory source.
   * @return inventorySourceType
   */
  @javax.annotation.Nullable
  public InventorySourceTypeEnum getInventorySourceType() {
    return inventorySourceType;
  }

  public void setInventorySourceType(InventorySourceTypeEnum inventorySourceType) {
    this.inventorySourceType = inventorySourceType;
  }


  /**
   * Output only. The resource name of the inventory source.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public InventorySource publisherName(String publisherName) {
    this.publisherName = publisherName;
    return this;
  }

  /**
   * The publisher/seller name of the inventory source.
   * @return publisherName
   */
  @javax.annotation.Nullable
  public String getPublisherName() {
    return publisherName;
  }

  public void setPublisherName(String publisherName) {
    this.publisherName = publisherName;
  }


  public InventorySource rateDetails(RateDetails rateDetails) {
    this.rateDetails = rateDetails;
    return this;
  }

  /**
   * Get rateDetails
   * @return rateDetails
   */
  @javax.annotation.Nullable
  public RateDetails getRateDetails() {
    return rateDetails;
  }

  public void setRateDetails(RateDetails rateDetails) {
    this.rateDetails = rateDetails;
  }


  /**
   * Output only. The IDs of advertisers with read-only access to the inventory source.
   * @return readAdvertiserIds
   */
  @javax.annotation.Nullable
  public List<String> getReadAdvertiserIds() {
    return readAdvertiserIds;
  }



  /**
   * Output only. The IDs of partners with read-only access to the inventory source. All advertisers of partners in this field inherit read-only access to the inventory source.
   * @return readPartnerIds
   */
  @javax.annotation.Nullable
  public List<String> getReadPartnerIds() {
    return readPartnerIds;
  }



  public InventorySource readWriteAccessors(InventorySourceAccessors readWriteAccessors) {
    this.readWriteAccessors = readWriteAccessors;
    return this;
  }

  /**
   * Get readWriteAccessors
   * @return readWriteAccessors
   */
  @javax.annotation.Nullable
  public InventorySourceAccessors getReadWriteAccessors() {
    return readWriteAccessors;
  }

  public void setReadWriteAccessors(InventorySourceAccessors readWriteAccessors) {
    this.readWriteAccessors = readWriteAccessors;
  }


  public InventorySource status(InventorySourceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public InventorySourceStatus getStatus() {
    return status;
  }

  public void setStatus(InventorySourceStatus status) {
    this.status = status;
  }


  public InventorySource timeRange(TimeRange timeRange) {
    this.timeRange = timeRange;
    return this;
  }

  /**
   * Get timeRange
   * @return timeRange
   */
  @javax.annotation.Nullable
  public TimeRange getTimeRange() {
    return timeRange;
  }

  public void setTimeRange(TimeRange timeRange) {
    this.timeRange = timeRange;
  }


  /**
   * Output only. The timestamp when the inventory source was last updated. Assigned by the system.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventorySource inventorySource = (InventorySource) o;
    return Objects.equals(this.commitment, inventorySource.commitment) &&
        Objects.equals(this.creativeConfigs, inventorySource.creativeConfigs) &&
        Objects.equals(this.dealId, inventorySource.dealId) &&
        Objects.equals(this.deliveryMethod, inventorySource.deliveryMethod) &&
        Objects.equals(this.displayName, inventorySource.displayName) &&
        Objects.equals(this.exchange, inventorySource.exchange) &&
        Objects.equals(this.guaranteedOrderId, inventorySource.guaranteedOrderId) &&
        Objects.equals(this.inventorySourceId, inventorySource.inventorySourceId) &&
        Objects.equals(this.inventorySourceProductType, inventorySource.inventorySourceProductType) &&
        Objects.equals(this.inventorySourceType, inventorySource.inventorySourceType) &&
        Objects.equals(this.name, inventorySource.name) &&
        Objects.equals(this.publisherName, inventorySource.publisherName) &&
        Objects.equals(this.rateDetails, inventorySource.rateDetails) &&
        Objects.equals(this.readAdvertiserIds, inventorySource.readAdvertiserIds) &&
        Objects.equals(this.readPartnerIds, inventorySource.readPartnerIds) &&
        Objects.equals(this.readWriteAccessors, inventorySource.readWriteAccessors) &&
        Objects.equals(this.status, inventorySource.status) &&
        Objects.equals(this.timeRange, inventorySource.timeRange) &&
        Objects.equals(this.updateTime, inventorySource.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitment, creativeConfigs, dealId, deliveryMethod, displayName, exchange, guaranteedOrderId, inventorySourceId, inventorySourceProductType, inventorySourceType, name, publisherName, rateDetails, readAdvertiserIds, readPartnerIds, readWriteAccessors, status, timeRange, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventorySource {\n");
    sb.append("    commitment: ").append(toIndentedString(commitment)).append("\n");
    sb.append("    creativeConfigs: ").append(toIndentedString(creativeConfigs)).append("\n");
    sb.append("    dealId: ").append(toIndentedString(dealId)).append("\n");
    sb.append("    deliveryMethod: ").append(toIndentedString(deliveryMethod)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    guaranteedOrderId: ").append(toIndentedString(guaranteedOrderId)).append("\n");
    sb.append("    inventorySourceId: ").append(toIndentedString(inventorySourceId)).append("\n");
    sb.append("    inventorySourceProductType: ").append(toIndentedString(inventorySourceProductType)).append("\n");
    sb.append("    inventorySourceType: ").append(toIndentedString(inventorySourceType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    publisherName: ").append(toIndentedString(publisherName)).append("\n");
    sb.append("    rateDetails: ").append(toIndentedString(rateDetails)).append("\n");
    sb.append("    readAdvertiserIds: ").append(toIndentedString(readAdvertiserIds)).append("\n");
    sb.append("    readPartnerIds: ").append(toIndentedString(readPartnerIds)).append("\n");
    sb.append("    readWriteAccessors: ").append(toIndentedString(readWriteAccessors)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeRange: ").append(toIndentedString(timeRange)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commitment");
    openapiFields.add("creativeConfigs");
    openapiFields.add("dealId");
    openapiFields.add("deliveryMethod");
    openapiFields.add("displayName");
    openapiFields.add("exchange");
    openapiFields.add("guaranteedOrderId");
    openapiFields.add("inventorySourceId");
    openapiFields.add("inventorySourceProductType");
    openapiFields.add("inventorySourceType");
    openapiFields.add("name");
    openapiFields.add("publisherName");
    openapiFields.add("rateDetails");
    openapiFields.add("readAdvertiserIds");
    openapiFields.add("readPartnerIds");
    openapiFields.add("readWriteAccessors");
    openapiFields.add("status");
    openapiFields.add("timeRange");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InventorySource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InventorySource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InventorySource is not found in the empty JSON string", InventorySource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InventorySource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InventorySource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commitment") != null && !jsonObj.get("commitment").isJsonNull()) && !jsonObj.get("commitment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitment").toString()));
      }
      // validate the optional field `commitment`
      if (jsonObj.get("commitment") != null && !jsonObj.get("commitment").isJsonNull()) {
        CommitmentEnum.validateJsonElement(jsonObj.get("commitment"));
      }
      if (jsonObj.get("creativeConfigs") != null && !jsonObj.get("creativeConfigs").isJsonNull()) {
        JsonArray jsonArraycreativeConfigs = jsonObj.getAsJsonArray("creativeConfigs");
        if (jsonArraycreativeConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("creativeConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `creativeConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("creativeConfigs").toString()));
          }

          // validate the optional field `creativeConfigs` (array)
          for (int i = 0; i < jsonArraycreativeConfigs.size(); i++) {
            CreativeConfig.validateJsonElement(jsonArraycreativeConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("dealId") != null && !jsonObj.get("dealId").isJsonNull()) && !jsonObj.get("dealId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dealId").toString()));
      }
      if ((jsonObj.get("deliveryMethod") != null && !jsonObj.get("deliveryMethod").isJsonNull()) && !jsonObj.get("deliveryMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryMethod").toString()));
      }
      // validate the optional field `deliveryMethod`
      if (jsonObj.get("deliveryMethod") != null && !jsonObj.get("deliveryMethod").isJsonNull()) {
        DeliveryMethodEnum.validateJsonElement(jsonObj.get("deliveryMethod"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("exchange") != null && !jsonObj.get("exchange").isJsonNull()) && !jsonObj.get("exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchange").toString()));
      }
      // validate the optional field `exchange`
      if (jsonObj.get("exchange") != null && !jsonObj.get("exchange").isJsonNull()) {
        ExchangeEnum.validateJsonElement(jsonObj.get("exchange"));
      }
      if ((jsonObj.get("guaranteedOrderId") != null && !jsonObj.get("guaranteedOrderId").isJsonNull()) && !jsonObj.get("guaranteedOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guaranteedOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guaranteedOrderId").toString()));
      }
      if ((jsonObj.get("inventorySourceId") != null && !jsonObj.get("inventorySourceId").isJsonNull()) && !jsonObj.get("inventorySourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventorySourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventorySourceId").toString()));
      }
      if ((jsonObj.get("inventorySourceProductType") != null && !jsonObj.get("inventorySourceProductType").isJsonNull()) && !jsonObj.get("inventorySourceProductType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventorySourceProductType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventorySourceProductType").toString()));
      }
      // validate the optional field `inventorySourceProductType`
      if (jsonObj.get("inventorySourceProductType") != null && !jsonObj.get("inventorySourceProductType").isJsonNull()) {
        InventorySourceProductTypeEnum.validateJsonElement(jsonObj.get("inventorySourceProductType"));
      }
      if ((jsonObj.get("inventorySourceType") != null && !jsonObj.get("inventorySourceType").isJsonNull()) && !jsonObj.get("inventorySourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventorySourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventorySourceType").toString()));
      }
      // validate the optional field `inventorySourceType`
      if (jsonObj.get("inventorySourceType") != null && !jsonObj.get("inventorySourceType").isJsonNull()) {
        InventorySourceTypeEnum.validateJsonElement(jsonObj.get("inventorySourceType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("publisherName") != null && !jsonObj.get("publisherName").isJsonNull()) && !jsonObj.get("publisherName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherName").toString()));
      }
      // validate the optional field `rateDetails`
      if (jsonObj.get("rateDetails") != null && !jsonObj.get("rateDetails").isJsonNull()) {
        RateDetails.validateJsonElement(jsonObj.get("rateDetails"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("readAdvertiserIds") != null && !jsonObj.get("readAdvertiserIds").isJsonNull() && !jsonObj.get("readAdvertiserIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `readAdvertiserIds` to be an array in the JSON string but got `%s`", jsonObj.get("readAdvertiserIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("readPartnerIds") != null && !jsonObj.get("readPartnerIds").isJsonNull() && !jsonObj.get("readPartnerIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `readPartnerIds` to be an array in the JSON string but got `%s`", jsonObj.get("readPartnerIds").toString()));
      }
      // validate the optional field `readWriteAccessors`
      if (jsonObj.get("readWriteAccessors") != null && !jsonObj.get("readWriteAccessors").isJsonNull()) {
        InventorySourceAccessors.validateJsonElement(jsonObj.get("readWriteAccessors"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        InventorySourceStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `timeRange`
      if (jsonObj.get("timeRange") != null && !jsonObj.get("timeRange").isJsonNull()) {
        TimeRange.validateJsonElement(jsonObj.get("timeRange"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InventorySource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InventorySource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InventorySource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InventorySource.class));

       return (TypeAdapter<T>) new TypeAdapter<InventorySource>() {
           @Override
           public void write(JsonWriter out, InventorySource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InventorySource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InventorySource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InventorySource
   * @throws IOException if the JSON string is invalid with respect to InventorySource
   */
  public static InventorySource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InventorySource.class);
  }

  /**
   * Convert an instance of InventorySource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

