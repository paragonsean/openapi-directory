/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DateRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings that track the planned spend and duration of a campaign.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CampaignFlight {
  public static final String SERIALIZED_NAME_PLANNED_DATES = "plannedDates";
  @SerializedName(SERIALIZED_NAME_PLANNED_DATES)
  private DateRange plannedDates;

  public static final String SERIALIZED_NAME_PLANNED_SPEND_AMOUNT_MICROS = "plannedSpendAmountMicros";
  @SerializedName(SERIALIZED_NAME_PLANNED_SPEND_AMOUNT_MICROS)
  private String plannedSpendAmountMicros;

  public CampaignFlight() {
  }

  public CampaignFlight plannedDates(DateRange plannedDates) {
    this.plannedDates = plannedDates;
    return this;
  }

  /**
   * Get plannedDates
   * @return plannedDates
   */
  @javax.annotation.Nullable
  public DateRange getPlannedDates() {
    return plannedDates;
  }

  public void setPlannedDates(DateRange plannedDates) {
    this.plannedDates = plannedDates;
  }


  public CampaignFlight plannedSpendAmountMicros(String plannedSpendAmountMicros) {
    this.plannedSpendAmountMicros = plannedSpendAmountMicros;
    return this;
  }

  /**
   * The amount the campaign is expected to spend for its given planned_dates. This will not limit serving, but will be used for tracking spend in the DV360 UI. The amount is in micros. Must be greater than or equal to 0. For example, 500000000 represents 500 standard units of the currency.
   * @return plannedSpendAmountMicros
   */
  @javax.annotation.Nullable
  public String getPlannedSpendAmountMicros() {
    return plannedSpendAmountMicros;
  }

  public void setPlannedSpendAmountMicros(String plannedSpendAmountMicros) {
    this.plannedSpendAmountMicros = plannedSpendAmountMicros;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignFlight campaignFlight = (CampaignFlight) o;
    return Objects.equals(this.plannedDates, campaignFlight.plannedDates) &&
        Objects.equals(this.plannedSpendAmountMicros, campaignFlight.plannedSpendAmountMicros);
  }

  @Override
  public int hashCode() {
    return Objects.hash(plannedDates, plannedSpendAmountMicros);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignFlight {\n");
    sb.append("    plannedDates: ").append(toIndentedString(plannedDates)).append("\n");
    sb.append("    plannedSpendAmountMicros: ").append(toIndentedString(plannedSpendAmountMicros)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("plannedDates");
    openapiFields.add("plannedSpendAmountMicros");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CampaignFlight
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CampaignFlight.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignFlight is not found in the empty JSON string", CampaignFlight.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CampaignFlight.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignFlight` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `plannedDates`
      if (jsonObj.get("plannedDates") != null && !jsonObj.get("plannedDates").isJsonNull()) {
        DateRange.validateJsonElement(jsonObj.get("plannedDates"));
      }
      if ((jsonObj.get("plannedSpendAmountMicros") != null && !jsonObj.get("plannedSpendAmountMicros").isJsonNull()) && !jsonObj.get("plannedSpendAmountMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plannedSpendAmountMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plannedSpendAmountMicros").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignFlight.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignFlight' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignFlight> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignFlight.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignFlight>() {
           @Override
           public void write(JsonWriter out, CampaignFlight value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignFlight read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CampaignFlight given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CampaignFlight
   * @throws IOException if the JSON string is invalid with respect to CampaignFlight
   */
  public static CampaignFlight fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignFlight.class);
  }

  /**
   * Convert an instance of CampaignFlight to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

