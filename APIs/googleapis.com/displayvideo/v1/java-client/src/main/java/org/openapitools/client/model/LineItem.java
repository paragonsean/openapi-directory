/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BiddingStrategy;
import org.openapitools.client.model.ConversionCountingConfig;
import org.openapitools.client.model.FrequencyCap;
import org.openapitools.client.model.IntegrationDetails;
import org.openapitools.client.model.LineItemBudget;
import org.openapitools.client.model.LineItemFlight;
import org.openapitools.client.model.MobileApp;
import org.openapitools.client.model.Pacing;
import org.openapitools.client.model.PartnerCost;
import org.openapitools.client.model.PartnerRevenueModel;
import org.openapitools.client.model.TargetingExpansionConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single line item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LineItem {
  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_BID_STRATEGY = "bidStrategy";
  @SerializedName(SERIALIZED_NAME_BID_STRATEGY)
  private BiddingStrategy bidStrategy;

  public static final String SERIALIZED_NAME_BUDGET = "budget";
  @SerializedName(SERIALIZED_NAME_BUDGET)
  private LineItemBudget budget;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  public static final String SERIALIZED_NAME_CONVERSION_COUNTING = "conversionCounting";
  @SerializedName(SERIALIZED_NAME_CONVERSION_COUNTING)
  private ConversionCountingConfig conversionCounting;

  public static final String SERIALIZED_NAME_CREATIVE_IDS = "creativeIds";
  @SerializedName(SERIALIZED_NAME_CREATIVE_IDS)
  private List<String> creativeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Required. Controls whether or not the line item can spend its budget and bid on inventory. * For CreateLineItem method, only &#x60;ENTITY_STATUS_DRAFT&#x60; is allowed. To activate a line item, use UpdateLineItem method and update the status to &#x60;ENTITY_STATUS_ACTIVE&#x60; after creation. * A line item cannot be changed back to &#x60;ENTITY_STATUS_DRAFT&#x60; status from any other status. * If the line item&#39;s parent insertion order is not active, the line item can&#39;t spend its budget even if its own status is &#x60;ENTITY_STATUS_ACTIVE&#x60;.
   */
  @JsonAdapter(EntityStatusEnum.Adapter.class)
  public enum EntityStatusEnum {
    UNSPECIFIED("ENTITY_STATUS_UNSPECIFIED"),
    
    ACTIVE("ENTITY_STATUS_ACTIVE"),
    
    ARCHIVED("ENTITY_STATUS_ARCHIVED"),
    
    DRAFT("ENTITY_STATUS_DRAFT"),
    
    PAUSED("ENTITY_STATUS_PAUSED"),
    
    SCHEDULED_FOR_DELETION("ENTITY_STATUS_SCHEDULED_FOR_DELETION");

    private String value;

    EntityStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityStatusEnum fromValue(String value) {
      for (EntityStatusEnum b : EntityStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_STATUS = "entityStatus";
  @SerializedName(SERIALIZED_NAME_ENTITY_STATUS)
  private EntityStatusEnum entityStatus;

  public static final String SERIALIZED_NAME_EXCLUDE_NEW_EXCHANGES = "excludeNewExchanges";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_NEW_EXCHANGES)
  private Boolean excludeNewExchanges;

  public static final String SERIALIZED_NAME_FLIGHT = "flight";
  @SerializedName(SERIALIZED_NAME_FLIGHT)
  private LineItemFlight flight;

  public static final String SERIALIZED_NAME_FREQUENCY_CAP = "frequencyCap";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_CAP)
  private FrequencyCap frequencyCap;

  public static final String SERIALIZED_NAME_INSERTION_ORDER_ID = "insertionOrderId";
  @SerializedName(SERIALIZED_NAME_INSERTION_ORDER_ID)
  private String insertionOrderId;

  public static final String SERIALIZED_NAME_INTEGRATION_DETAILS = "integrationDetails";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_DETAILS)
  private IntegrationDetails integrationDetails;

  public static final String SERIALIZED_NAME_INVENTORY_SOURCE_IDS = "inventorySourceIds";
  @SerializedName(SERIALIZED_NAME_INVENTORY_SOURCE_IDS)
  private List<String> inventorySourceIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINE_ITEM_ID = "lineItemId";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_ID)
  private String lineItemId;

  /**
   * Required. Immutable. The type of the line item.
   */
  @JsonAdapter(LineItemTypeEnum.Adapter.class)
  public enum LineItemTypeEnum {
    UNSPECIFIED("LINE_ITEM_TYPE_UNSPECIFIED"),
    
    DISPLAY_DEFAULT("LINE_ITEM_TYPE_DISPLAY_DEFAULT"),
    
    DISPLAY_MOBILE_APP_INSTALL("LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INSTALL"),
    
    VIDEO_DEFAULT("LINE_ITEM_TYPE_VIDEO_DEFAULT"),
    
    VIDEO_MOBILE_APP_INSTALL("LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INSTALL"),
    
    DISPLAY_MOBILE_APP_INVENTORY("LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INVENTORY"),
    
    VIDEO_MOBILE_APP_INVENTORY("LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INVENTORY"),
    
    AUDIO_DEFAULT("LINE_ITEM_TYPE_AUDIO_DEFAULT"),
    
    VIDEO_OVER_THE_TOP("LINE_ITEM_TYPE_VIDEO_OVER_THE_TOP"),
    
    DISPLAY_OUT_OF_HOME("LINE_ITEM_TYPE_DISPLAY_OUT_OF_HOME"),
    
    VIDEO_OUT_OF_HOME("LINE_ITEM_TYPE_VIDEO_OUT_OF_HOME");

    private String value;

    LineItemTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LineItemTypeEnum fromValue(String value) {
      for (LineItemTypeEnum b : LineItemTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LineItemTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LineItemTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LineItemTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LineItemTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LineItemTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINE_ITEM_TYPE = "lineItemType";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_TYPE)
  private LineItemTypeEnum lineItemType;

  public static final String SERIALIZED_NAME_MOBILE_APP = "mobileApp";
  @SerializedName(SERIALIZED_NAME_MOBILE_APP)
  private MobileApp mobileApp;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PACING = "pacing";
  @SerializedName(SERIALIZED_NAME_PACING)
  private Pacing pacing;

  public static final String SERIALIZED_NAME_PARTNER_COSTS = "partnerCosts";
  @SerializedName(SERIALIZED_NAME_PARTNER_COSTS)
  private List<PartnerCost> partnerCosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARTNER_REVENUE_MODEL = "partnerRevenueModel";
  @SerializedName(SERIALIZED_NAME_PARTNER_REVENUE_MODEL)
  private PartnerRevenueModel partnerRevenueModel;

  /**
   * Output only. The reservation type of the line item.
   */
  @JsonAdapter(ReservationTypeEnum.Adapter.class)
  public enum ReservationTypeEnum {
    UNSPECIFIED("RESERVATION_TYPE_UNSPECIFIED"),
    
    NOT_GUARANTEED("RESERVATION_TYPE_NOT_GUARANTEED"),
    
    PROGRAMMATIC_GUARANTEED("RESERVATION_TYPE_PROGRAMMATIC_GUARANTEED"),
    
    TAG_GUARANTEED("RESERVATION_TYPE_TAG_GUARANTEED");

    private String value;

    ReservationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReservationTypeEnum fromValue(String value) {
      for (ReservationTypeEnum b : ReservationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReservationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReservationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReservationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReservationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReservationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESERVATION_TYPE = "reservationType";
  @SerializedName(SERIALIZED_NAME_RESERVATION_TYPE)
  private ReservationTypeEnum reservationType;

  public static final String SERIALIZED_NAME_TARGETING_EXPANSION = "targetingExpansion";
  @SerializedName(SERIALIZED_NAME_TARGETING_EXPANSION)
  private TargetingExpansionConfig targetingExpansion;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  /**
   * Gets or Sets warningMessages
   */
  @JsonAdapter(WarningMessagesEnum.Adapter.class)
  public enum WarningMessagesEnum {
    LINE_ITEM_WARNING_MESSAGE_UNSPECIFIED("LINE_ITEM_WARNING_MESSAGE_UNSPECIFIED"),
    
    INVALID_FLIGHT_DATES("INVALID_FLIGHT_DATES"),
    
    EXPIRED("EXPIRED"),
    
    PENDING_FLIGHT("PENDING_FLIGHT"),
    
    ALL_PARTNER_ENABLED_EXCHANGES_NEGATIVELY_TARGETED("ALL_PARTNER_ENABLED_EXCHANGES_NEGATIVELY_TARGETED"),
    
    INVALID_INVENTORY_SOURCE("INVALID_INVENTORY_SOURCE"),
    
    APP_INVENTORY_INVALID_SITE_TARGETING("APP_INVENTORY_INVALID_SITE_TARGETING"),
    
    APP_INVENTORY_INVALID_AUDIENCE_LISTS("APP_INVENTORY_INVALID_AUDIENCE_LISTS"),
    
    NO_VALID_CREATIVE("NO_VALID_CREATIVE"),
    
    PARENT_INSERTION_ORDER_PAUSED("PARENT_INSERTION_ORDER_PAUSED"),
    
    PARENT_INSERTION_ORDER_EXPIRED("PARENT_INSERTION_ORDER_EXPIRED"),
    
    NO_POSITIVE_AUDIENCE_LIST_TARGETED("NO_POSITIVE_AUDIENCE_LIST_TARGETED"),
    
    APP_INSTALL_NO_CONVERSION_PIXEL("APP_INSTALL_NO_CONVERSION_PIXEL"),
    
    TARGETING_REVOKED_OR_CLOSED_USER_LIST("TARGETING_REVOKED_OR_CLOSED_USER_LIST"),
    
    APP_INSTALL_NO_OPTIMAL_BIDDING_STRATEGY("APP_INSTALL_NO_OPTIMAL_BIDDING_STRATEGY"),
    
    CREATIVE_SIZE_NOT_IN_USE_FOR_TARGETED_DEALS("CREATIVE_SIZE_NOT_IN_USE_FOR_TARGETED_DEALS"),
    
    NO_CREATIVE_FOR_TARGETED_DEALS("NO_CREATIVE_FOR_TARGETED_DEALS"),
    
    TARGETING_DEPRECATED_GEO_TARGET("TARGETING_DEPRECATED_GEO_TARGET"),
    
    DEPRECATED_FIRST_PARTY_AUDIENCE_EXCLUSION("DEPRECATED_FIRST_PARTY_AUDIENCE_EXCLUSION");

    private String value;

    WarningMessagesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WarningMessagesEnum fromValue(String value) {
      for (WarningMessagesEnum b : WarningMessagesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WarningMessagesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WarningMessagesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WarningMessagesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WarningMessagesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WarningMessagesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WARNING_MESSAGES = "warningMessages";
  @SerializedName(SERIALIZED_NAME_WARNING_MESSAGES)
  private List<WarningMessagesEnum> warningMessages = new ArrayList<>();

  public LineItem() {
  }

  public LineItem(
     String advertiserId, 
     String campaignId, 
     String lineItemId, 
     String name, 
     ReservationTypeEnum reservationType, 
     String updateTime, 
     List<WarningMessagesEnum> warningMessages
  ) {
    this();
    this.advertiserId = advertiserId;
    this.campaignId = campaignId;
    this.lineItemId = lineItemId;
    this.name = name;
    this.reservationType = reservationType;
    this.updateTime = updateTime;
    this.warningMessages = warningMessages;
  }

  /**
   * Output only. The unique ID of the advertiser the line item belongs to.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public String getAdvertiserId() {
    return advertiserId;
  }



  public LineItem bidStrategy(BiddingStrategy bidStrategy) {
    this.bidStrategy = bidStrategy;
    return this;
  }

  /**
   * Get bidStrategy
   * @return bidStrategy
   */
  @javax.annotation.Nullable
  public BiddingStrategy getBidStrategy() {
    return bidStrategy;
  }

  public void setBidStrategy(BiddingStrategy bidStrategy) {
    this.bidStrategy = bidStrategy;
  }


  public LineItem budget(LineItemBudget budget) {
    this.budget = budget;
    return this;
  }

  /**
   * Get budget
   * @return budget
   */
  @javax.annotation.Nullable
  public LineItemBudget getBudget() {
    return budget;
  }

  public void setBudget(LineItemBudget budget) {
    this.budget = budget;
  }


  /**
   * Output only. The unique ID of the campaign that the line item belongs to.
   * @return campaignId
   */
  @javax.annotation.Nullable
  public String getCampaignId() {
    return campaignId;
  }



  public LineItem conversionCounting(ConversionCountingConfig conversionCounting) {
    this.conversionCounting = conversionCounting;
    return this;
  }

  /**
   * Get conversionCounting
   * @return conversionCounting
   */
  @javax.annotation.Nullable
  public ConversionCountingConfig getConversionCounting() {
    return conversionCounting;
  }

  public void setConversionCounting(ConversionCountingConfig conversionCounting) {
    this.conversionCounting = conversionCounting;
  }


  public LineItem creativeIds(List<String> creativeIds) {
    this.creativeIds = creativeIds;
    return this;
  }

  public LineItem addCreativeIdsItem(String creativeIdsItem) {
    if (this.creativeIds == null) {
      this.creativeIds = new ArrayList<>();
    }
    this.creativeIds.add(creativeIdsItem);
    return this;
  }

  /**
   * The IDs of the creatives associated with the line item.
   * @return creativeIds
   */
  @javax.annotation.Nullable
  public List<String> getCreativeIds() {
    return creativeIds;
  }

  public void setCreativeIds(List<String> creativeIds) {
    this.creativeIds = creativeIds;
  }


  public LineItem displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The display name of the line item. Must be UTF-8 encoded with a maximum size of 240 bytes.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public LineItem entityStatus(EntityStatusEnum entityStatus) {
    this.entityStatus = entityStatus;
    return this;
  }

  /**
   * Required. Controls whether or not the line item can spend its budget and bid on inventory. * For CreateLineItem method, only &#x60;ENTITY_STATUS_DRAFT&#x60; is allowed. To activate a line item, use UpdateLineItem method and update the status to &#x60;ENTITY_STATUS_ACTIVE&#x60; after creation. * A line item cannot be changed back to &#x60;ENTITY_STATUS_DRAFT&#x60; status from any other status. * If the line item&#39;s parent insertion order is not active, the line item can&#39;t spend its budget even if its own status is &#x60;ENTITY_STATUS_ACTIVE&#x60;.
   * @return entityStatus
   */
  @javax.annotation.Nullable
  public EntityStatusEnum getEntityStatus() {
    return entityStatus;
  }

  public void setEntityStatus(EntityStatusEnum entityStatus) {
    this.entityStatus = entityStatus;
  }


  public LineItem excludeNewExchanges(Boolean excludeNewExchanges) {
    this.excludeNewExchanges = excludeNewExchanges;
    return this;
  }

  /**
   * Whether to exclude new exchanges from automatically being targeted by the line item. This field is false by default.
   * @return excludeNewExchanges
   */
  @javax.annotation.Nullable
  public Boolean getExcludeNewExchanges() {
    return excludeNewExchanges;
  }

  public void setExcludeNewExchanges(Boolean excludeNewExchanges) {
    this.excludeNewExchanges = excludeNewExchanges;
  }


  public LineItem flight(LineItemFlight flight) {
    this.flight = flight;
    return this;
  }

  /**
   * Get flight
   * @return flight
   */
  @javax.annotation.Nullable
  public LineItemFlight getFlight() {
    return flight;
  }

  public void setFlight(LineItemFlight flight) {
    this.flight = flight;
  }


  public LineItem frequencyCap(FrequencyCap frequencyCap) {
    this.frequencyCap = frequencyCap;
    return this;
  }

  /**
   * Get frequencyCap
   * @return frequencyCap
   */
  @javax.annotation.Nullable
  public FrequencyCap getFrequencyCap() {
    return frequencyCap;
  }

  public void setFrequencyCap(FrequencyCap frequencyCap) {
    this.frequencyCap = frequencyCap;
  }


  public LineItem insertionOrderId(String insertionOrderId) {
    this.insertionOrderId = insertionOrderId;
    return this;
  }

  /**
   * Required. Immutable. The unique ID of the insertion order that the line item belongs to.
   * @return insertionOrderId
   */
  @javax.annotation.Nullable
  public String getInsertionOrderId() {
    return insertionOrderId;
  }

  public void setInsertionOrderId(String insertionOrderId) {
    this.insertionOrderId = insertionOrderId;
  }


  public LineItem integrationDetails(IntegrationDetails integrationDetails) {
    this.integrationDetails = integrationDetails;
    return this;
  }

  /**
   * Get integrationDetails
   * @return integrationDetails
   */
  @javax.annotation.Nullable
  public IntegrationDetails getIntegrationDetails() {
    return integrationDetails;
  }

  public void setIntegrationDetails(IntegrationDetails integrationDetails) {
    this.integrationDetails = integrationDetails;
  }


  public LineItem inventorySourceIds(List<String> inventorySourceIds) {
    this.inventorySourceIds = inventorySourceIds;
    return this;
  }

  public LineItem addInventorySourceIdsItem(String inventorySourceIdsItem) {
    if (this.inventorySourceIds == null) {
      this.inventorySourceIds = new ArrayList<>();
    }
    this.inventorySourceIds.add(inventorySourceIdsItem);
    return this;
  }

  /**
   * The IDs of the private inventory sources assigned to the line item.
   * @return inventorySourceIds
   */
  @javax.annotation.Nullable
  public List<String> getInventorySourceIds() {
    return inventorySourceIds;
  }

  public void setInventorySourceIds(List<String> inventorySourceIds) {
    this.inventorySourceIds = inventorySourceIds;
  }


  /**
   * Output only. The unique ID of the line item. Assigned by the system.
   * @return lineItemId
   */
  @javax.annotation.Nullable
  public String getLineItemId() {
    return lineItemId;
  }



  public LineItem lineItemType(LineItemTypeEnum lineItemType) {
    this.lineItemType = lineItemType;
    return this;
  }

  /**
   * Required. Immutable. The type of the line item.
   * @return lineItemType
   */
  @javax.annotation.Nullable
  public LineItemTypeEnum getLineItemType() {
    return lineItemType;
  }

  public void setLineItemType(LineItemTypeEnum lineItemType) {
    this.lineItemType = lineItemType;
  }


  public LineItem mobileApp(MobileApp mobileApp) {
    this.mobileApp = mobileApp;
    return this;
  }

  /**
   * Get mobileApp
   * @return mobileApp
   */
  @javax.annotation.Nullable
  public MobileApp getMobileApp() {
    return mobileApp;
  }

  public void setMobileApp(MobileApp mobileApp) {
    this.mobileApp = mobileApp;
  }


  /**
   * Output only. The resource name of the line item.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public LineItem pacing(Pacing pacing) {
    this.pacing = pacing;
    return this;
  }

  /**
   * Get pacing
   * @return pacing
   */
  @javax.annotation.Nullable
  public Pacing getPacing() {
    return pacing;
  }

  public void setPacing(Pacing pacing) {
    this.pacing = pacing;
  }


  public LineItem partnerCosts(List<PartnerCost> partnerCosts) {
    this.partnerCosts = partnerCosts;
    return this;
  }

  public LineItem addPartnerCostsItem(PartnerCost partnerCostsItem) {
    if (this.partnerCosts == null) {
      this.partnerCosts = new ArrayList<>();
    }
    this.partnerCosts.add(partnerCostsItem);
    return this;
  }

  /**
   * The partner costs associated with the line item. If absent or empty in CreateLineItem method, the newly created line item will inherit partner costs from its parent insertion order.
   * @return partnerCosts
   */
  @javax.annotation.Nullable
  public List<PartnerCost> getPartnerCosts() {
    return partnerCosts;
  }

  public void setPartnerCosts(List<PartnerCost> partnerCosts) {
    this.partnerCosts = partnerCosts;
  }


  public LineItem partnerRevenueModel(PartnerRevenueModel partnerRevenueModel) {
    this.partnerRevenueModel = partnerRevenueModel;
    return this;
  }

  /**
   * Get partnerRevenueModel
   * @return partnerRevenueModel
   */
  @javax.annotation.Nullable
  public PartnerRevenueModel getPartnerRevenueModel() {
    return partnerRevenueModel;
  }

  public void setPartnerRevenueModel(PartnerRevenueModel partnerRevenueModel) {
    this.partnerRevenueModel = partnerRevenueModel;
  }


  /**
   * Output only. The reservation type of the line item.
   * @return reservationType
   */
  @javax.annotation.Nullable
  public ReservationTypeEnum getReservationType() {
    return reservationType;
  }



  public LineItem targetingExpansion(TargetingExpansionConfig targetingExpansion) {
    this.targetingExpansion = targetingExpansion;
    return this;
  }

  /**
   * Get targetingExpansion
   * @return targetingExpansion
   */
  @javax.annotation.Nullable
  public TargetingExpansionConfig getTargetingExpansion() {
    return targetingExpansion;
  }

  public void setTargetingExpansion(TargetingExpansionConfig targetingExpansion) {
    this.targetingExpansion = targetingExpansion;
  }


  /**
   * Output only. The timestamp when the line item was last updated. Assigned by the system.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  /**
   * Output only. The warning messages generated by the line item. These warnings do not block saving the line item, but some may block the line item from running.
   * @return warningMessages
   */
  @javax.annotation.Nullable
  public List<WarningMessagesEnum> getWarningMessages() {
    return warningMessages;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineItem lineItem = (LineItem) o;
    return Objects.equals(this.advertiserId, lineItem.advertiserId) &&
        Objects.equals(this.bidStrategy, lineItem.bidStrategy) &&
        Objects.equals(this.budget, lineItem.budget) &&
        Objects.equals(this.campaignId, lineItem.campaignId) &&
        Objects.equals(this.conversionCounting, lineItem.conversionCounting) &&
        Objects.equals(this.creativeIds, lineItem.creativeIds) &&
        Objects.equals(this.displayName, lineItem.displayName) &&
        Objects.equals(this.entityStatus, lineItem.entityStatus) &&
        Objects.equals(this.excludeNewExchanges, lineItem.excludeNewExchanges) &&
        Objects.equals(this.flight, lineItem.flight) &&
        Objects.equals(this.frequencyCap, lineItem.frequencyCap) &&
        Objects.equals(this.insertionOrderId, lineItem.insertionOrderId) &&
        Objects.equals(this.integrationDetails, lineItem.integrationDetails) &&
        Objects.equals(this.inventorySourceIds, lineItem.inventorySourceIds) &&
        Objects.equals(this.lineItemId, lineItem.lineItemId) &&
        Objects.equals(this.lineItemType, lineItem.lineItemType) &&
        Objects.equals(this.mobileApp, lineItem.mobileApp) &&
        Objects.equals(this.name, lineItem.name) &&
        Objects.equals(this.pacing, lineItem.pacing) &&
        Objects.equals(this.partnerCosts, lineItem.partnerCosts) &&
        Objects.equals(this.partnerRevenueModel, lineItem.partnerRevenueModel) &&
        Objects.equals(this.reservationType, lineItem.reservationType) &&
        Objects.equals(this.targetingExpansion, lineItem.targetingExpansion) &&
        Objects.equals(this.updateTime, lineItem.updateTime) &&
        Objects.equals(this.warningMessages, lineItem.warningMessages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertiserId, bidStrategy, budget, campaignId, conversionCounting, creativeIds, displayName, entityStatus, excludeNewExchanges, flight, frequencyCap, insertionOrderId, integrationDetails, inventorySourceIds, lineItemId, lineItemType, mobileApp, name, pacing, partnerCosts, partnerRevenueModel, reservationType, targetingExpansion, updateTime, warningMessages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineItem {\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    bidStrategy: ").append(toIndentedString(bidStrategy)).append("\n");
    sb.append("    budget: ").append(toIndentedString(budget)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    conversionCounting: ").append(toIndentedString(conversionCounting)).append("\n");
    sb.append("    creativeIds: ").append(toIndentedString(creativeIds)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    entityStatus: ").append(toIndentedString(entityStatus)).append("\n");
    sb.append("    excludeNewExchanges: ").append(toIndentedString(excludeNewExchanges)).append("\n");
    sb.append("    flight: ").append(toIndentedString(flight)).append("\n");
    sb.append("    frequencyCap: ").append(toIndentedString(frequencyCap)).append("\n");
    sb.append("    insertionOrderId: ").append(toIndentedString(insertionOrderId)).append("\n");
    sb.append("    integrationDetails: ").append(toIndentedString(integrationDetails)).append("\n");
    sb.append("    inventorySourceIds: ").append(toIndentedString(inventorySourceIds)).append("\n");
    sb.append("    lineItemId: ").append(toIndentedString(lineItemId)).append("\n");
    sb.append("    lineItemType: ").append(toIndentedString(lineItemType)).append("\n");
    sb.append("    mobileApp: ").append(toIndentedString(mobileApp)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pacing: ").append(toIndentedString(pacing)).append("\n");
    sb.append("    partnerCosts: ").append(toIndentedString(partnerCosts)).append("\n");
    sb.append("    partnerRevenueModel: ").append(toIndentedString(partnerRevenueModel)).append("\n");
    sb.append("    reservationType: ").append(toIndentedString(reservationType)).append("\n");
    sb.append("    targetingExpansion: ").append(toIndentedString(targetingExpansion)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    warningMessages: ").append(toIndentedString(warningMessages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertiserId");
    openapiFields.add("bidStrategy");
    openapiFields.add("budget");
    openapiFields.add("campaignId");
    openapiFields.add("conversionCounting");
    openapiFields.add("creativeIds");
    openapiFields.add("displayName");
    openapiFields.add("entityStatus");
    openapiFields.add("excludeNewExchanges");
    openapiFields.add("flight");
    openapiFields.add("frequencyCap");
    openapiFields.add("insertionOrderId");
    openapiFields.add("integrationDetails");
    openapiFields.add("inventorySourceIds");
    openapiFields.add("lineItemId");
    openapiFields.add("lineItemType");
    openapiFields.add("mobileApp");
    openapiFields.add("name");
    openapiFields.add("pacing");
    openapiFields.add("partnerCosts");
    openapiFields.add("partnerRevenueModel");
    openapiFields.add("reservationType");
    openapiFields.add("targetingExpansion");
    openapiFields.add("updateTime");
    openapiFields.add("warningMessages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LineItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LineItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineItem is not found in the empty JSON string", LineItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LineItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull()) && !jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      // validate the optional field `bidStrategy`
      if (jsonObj.get("bidStrategy") != null && !jsonObj.get("bidStrategy").isJsonNull()) {
        BiddingStrategy.validateJsonElement(jsonObj.get("bidStrategy"));
      }
      // validate the optional field `budget`
      if (jsonObj.get("budget") != null && !jsonObj.get("budget").isJsonNull()) {
        LineItemBudget.validateJsonElement(jsonObj.get("budget"));
      }
      if ((jsonObj.get("campaignId") != null && !jsonObj.get("campaignId").isJsonNull()) && !jsonObj.get("campaignId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignId").toString()));
      }
      // validate the optional field `conversionCounting`
      if (jsonObj.get("conversionCounting") != null && !jsonObj.get("conversionCounting").isJsonNull()) {
        ConversionCountingConfig.validateJsonElement(jsonObj.get("conversionCounting"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("creativeIds") != null && !jsonObj.get("creativeIds").isJsonNull() && !jsonObj.get("creativeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeIds` to be an array in the JSON string but got `%s`", jsonObj.get("creativeIds").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("entityStatus") != null && !jsonObj.get("entityStatus").isJsonNull()) && !jsonObj.get("entityStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityStatus").toString()));
      }
      // validate the optional field `entityStatus`
      if (jsonObj.get("entityStatus") != null && !jsonObj.get("entityStatus").isJsonNull()) {
        EntityStatusEnum.validateJsonElement(jsonObj.get("entityStatus"));
      }
      // validate the optional field `flight`
      if (jsonObj.get("flight") != null && !jsonObj.get("flight").isJsonNull()) {
        LineItemFlight.validateJsonElement(jsonObj.get("flight"));
      }
      // validate the optional field `frequencyCap`
      if (jsonObj.get("frequencyCap") != null && !jsonObj.get("frequencyCap").isJsonNull()) {
        FrequencyCap.validateJsonElement(jsonObj.get("frequencyCap"));
      }
      if ((jsonObj.get("insertionOrderId") != null && !jsonObj.get("insertionOrderId").isJsonNull()) && !jsonObj.get("insertionOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insertionOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insertionOrderId").toString()));
      }
      // validate the optional field `integrationDetails`
      if (jsonObj.get("integrationDetails") != null && !jsonObj.get("integrationDetails").isJsonNull()) {
        IntegrationDetails.validateJsonElement(jsonObj.get("integrationDetails"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("inventorySourceIds") != null && !jsonObj.get("inventorySourceIds").isJsonNull() && !jsonObj.get("inventorySourceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventorySourceIds` to be an array in the JSON string but got `%s`", jsonObj.get("inventorySourceIds").toString()));
      }
      if ((jsonObj.get("lineItemId") != null && !jsonObj.get("lineItemId").isJsonNull()) && !jsonObj.get("lineItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineItemId").toString()));
      }
      if ((jsonObj.get("lineItemType") != null && !jsonObj.get("lineItemType").isJsonNull()) && !jsonObj.get("lineItemType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItemType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineItemType").toString()));
      }
      // validate the optional field `lineItemType`
      if (jsonObj.get("lineItemType") != null && !jsonObj.get("lineItemType").isJsonNull()) {
        LineItemTypeEnum.validateJsonElement(jsonObj.get("lineItemType"));
      }
      // validate the optional field `mobileApp`
      if (jsonObj.get("mobileApp") != null && !jsonObj.get("mobileApp").isJsonNull()) {
        MobileApp.validateJsonElement(jsonObj.get("mobileApp"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `pacing`
      if (jsonObj.get("pacing") != null && !jsonObj.get("pacing").isJsonNull()) {
        Pacing.validateJsonElement(jsonObj.get("pacing"));
      }
      if (jsonObj.get("partnerCosts") != null && !jsonObj.get("partnerCosts").isJsonNull()) {
        JsonArray jsonArraypartnerCosts = jsonObj.getAsJsonArray("partnerCosts");
        if (jsonArraypartnerCosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("partnerCosts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `partnerCosts` to be an array in the JSON string but got `%s`", jsonObj.get("partnerCosts").toString()));
          }

          // validate the optional field `partnerCosts` (array)
          for (int i = 0; i < jsonArraypartnerCosts.size(); i++) {
            PartnerCost.validateJsonElement(jsonArraypartnerCosts.get(i));
          };
        }
      }
      // validate the optional field `partnerRevenueModel`
      if (jsonObj.get("partnerRevenueModel") != null && !jsonObj.get("partnerRevenueModel").isJsonNull()) {
        PartnerRevenueModel.validateJsonElement(jsonObj.get("partnerRevenueModel"));
      }
      if ((jsonObj.get("reservationType") != null && !jsonObj.get("reservationType").isJsonNull()) && !jsonObj.get("reservationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationType").toString()));
      }
      // validate the optional field `reservationType`
      if (jsonObj.get("reservationType") != null && !jsonObj.get("reservationType").isJsonNull()) {
        ReservationTypeEnum.validateJsonElement(jsonObj.get("reservationType"));
      }
      // validate the optional field `targetingExpansion`
      if (jsonObj.get("targetingExpansion") != null && !jsonObj.get("targetingExpansion").isJsonNull()) {
        TargetingExpansionConfig.validateJsonElement(jsonObj.get("targetingExpansion"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("warningMessages") != null && !jsonObj.get("warningMessages").isJsonNull() && !jsonObj.get("warningMessages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warningMessages` to be an array in the JSON string but got `%s`", jsonObj.get("warningMessages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineItem.class));

       return (TypeAdapter<T>) new TypeAdapter<LineItem>() {
           @Override
           public void write(JsonWriter out, LineItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LineItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LineItem
   * @throws IOException if the JSON string is invalid with respect to LineItem
   */
  public static LineItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineItem.class);
  }

  /**
   * Convert an instance of LineItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

