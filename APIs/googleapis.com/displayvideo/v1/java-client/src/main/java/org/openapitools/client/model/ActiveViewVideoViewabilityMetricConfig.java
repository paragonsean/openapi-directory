/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for custom Active View video viewability metrics.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActiveViewVideoViewabilityMetricConfig {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * The minimum visible video duration required (in seconds) in order for an impression to be recorded. You must specify minimum_duration, minimum_quartile or both. If both are specified, an impression meets the metric criteria if either requirement is met (whichever happens first).
   */
  @JsonAdapter(MinimumDurationEnum.Adapter.class)
  public enum MinimumDurationEnum {
    UNSPECIFIED("VIDEO_DURATION_UNSPECIFIED"),
    
    SECONDS_NONE("VIDEO_DURATION_SECONDS_NONE"),
    
    SECONDS_0("VIDEO_DURATION_SECONDS_0"),
    
    SECONDS_1("VIDEO_DURATION_SECONDS_1"),
    
    SECONDS_2("VIDEO_DURATION_SECONDS_2"),
    
    SECONDS_3("VIDEO_DURATION_SECONDS_3"),
    
    SECONDS_4("VIDEO_DURATION_SECONDS_4"),
    
    SECONDS_5("VIDEO_DURATION_SECONDS_5"),
    
    SECONDS_6("VIDEO_DURATION_SECONDS_6"),
    
    SECONDS_7("VIDEO_DURATION_SECONDS_7"),
    
    SECONDS_8("VIDEO_DURATION_SECONDS_8"),
    
    SECONDS_9("VIDEO_DURATION_SECONDS_9"),
    
    SECONDS_10("VIDEO_DURATION_SECONDS_10"),
    
    SECONDS_11("VIDEO_DURATION_SECONDS_11"),
    
    SECONDS_12("VIDEO_DURATION_SECONDS_12"),
    
    SECONDS_13("VIDEO_DURATION_SECONDS_13"),
    
    SECONDS_14("VIDEO_DURATION_SECONDS_14"),
    
    SECONDS_15("VIDEO_DURATION_SECONDS_15"),
    
    SECONDS_30("VIDEO_DURATION_SECONDS_30"),
    
    SECONDS_45("VIDEO_DURATION_SECONDS_45"),
    
    SECONDS_60("VIDEO_DURATION_SECONDS_60");

    private String value;

    MinimumDurationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinimumDurationEnum fromValue(String value) {
      for (MinimumDurationEnum b : MinimumDurationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinimumDurationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinimumDurationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinimumDurationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinimumDurationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MinimumDurationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MINIMUM_DURATION = "minimumDuration";
  @SerializedName(SERIALIZED_NAME_MINIMUM_DURATION)
  private MinimumDurationEnum minimumDuration;

  /**
   * The minimum visible video duration required, based on the video quartiles, in order for an impression to be recorded. You must specify minimum_duration, minimum_quartile or both. If both are specified, an impression meets the metric criteria if either requirement is met (whichever happens first).
   */
  @JsonAdapter(MinimumQuartileEnum.Adapter.class)
  public enum MinimumQuartileEnum {
    UNSPECIFIED("VIDEO_DURATION_QUARTILE_UNSPECIFIED"),
    
    NONE("VIDEO_DURATION_QUARTILE_NONE"),
    
    FIRST("VIDEO_DURATION_QUARTILE_FIRST"),
    
    SECOND("VIDEO_DURATION_QUARTILE_SECOND"),
    
    THIRD("VIDEO_DURATION_QUARTILE_THIRD"),
    
    FOURTH("VIDEO_DURATION_QUARTILE_FOURTH");

    private String value;

    MinimumQuartileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinimumQuartileEnum fromValue(String value) {
      for (MinimumQuartileEnum b : MinimumQuartileEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinimumQuartileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinimumQuartileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinimumQuartileEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinimumQuartileEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MinimumQuartileEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MINIMUM_QUARTILE = "minimumQuartile";
  @SerializedName(SERIALIZED_NAME_MINIMUM_QUARTILE)
  private MinimumQuartileEnum minimumQuartile;

  /**
   * Required. The minimum percentage of the video ad&#39;s pixels visible on the screen in order for an impression to be recorded.
   */
  @JsonAdapter(MinimumViewabilityEnum.Adapter.class)
  public enum MinimumViewabilityEnum {
    UNSPECIFIED("VIEWABILITY_PERCENT_UNSPECIFIED"),
    
    _0("VIEWABILITY_PERCENT_0"),
    
    _25("VIEWABILITY_PERCENT_25"),
    
    _50("VIEWABILITY_PERCENT_50"),
    
    _75("VIEWABILITY_PERCENT_75"),
    
    _100("VIEWABILITY_PERCENT_100");

    private String value;

    MinimumViewabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinimumViewabilityEnum fromValue(String value) {
      for (MinimumViewabilityEnum b : MinimumViewabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinimumViewabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinimumViewabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinimumViewabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinimumViewabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MinimumViewabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MINIMUM_VIEWABILITY = "minimumViewability";
  @SerializedName(SERIALIZED_NAME_MINIMUM_VIEWABILITY)
  private MinimumViewabilityEnum minimumViewability;

  /**
   * Required. The minimum percentage of the video ad&#39;s volume required in order for an impression to be recorded.
   */
  @JsonAdapter(MinimumVolumeEnum.Adapter.class)
  public enum MinimumVolumeEnum {
    UNSPECIFIED("VIDEO_VOLUME_PERCENT_UNSPECIFIED"),
    
    _0("VIDEO_VOLUME_PERCENT_0"),
    
    _10("VIDEO_VOLUME_PERCENT_10");

    private String value;

    MinimumVolumeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinimumVolumeEnum fromValue(String value) {
      for (MinimumVolumeEnum b : MinimumVolumeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinimumVolumeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinimumVolumeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinimumVolumeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinimumVolumeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MinimumVolumeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MINIMUM_VOLUME = "minimumVolume";
  @SerializedName(SERIALIZED_NAME_MINIMUM_VOLUME)
  private MinimumVolumeEnum minimumVolume;

  public ActiveViewVideoViewabilityMetricConfig() {
  }

  public ActiveViewVideoViewabilityMetricConfig displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The display name of the custom metric.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ActiveViewVideoViewabilityMetricConfig minimumDuration(MinimumDurationEnum minimumDuration) {
    this.minimumDuration = minimumDuration;
    return this;
  }

  /**
   * The minimum visible video duration required (in seconds) in order for an impression to be recorded. You must specify minimum_duration, minimum_quartile or both. If both are specified, an impression meets the metric criteria if either requirement is met (whichever happens first).
   * @return minimumDuration
   */
  @javax.annotation.Nullable
  public MinimumDurationEnum getMinimumDuration() {
    return minimumDuration;
  }

  public void setMinimumDuration(MinimumDurationEnum minimumDuration) {
    this.minimumDuration = minimumDuration;
  }


  public ActiveViewVideoViewabilityMetricConfig minimumQuartile(MinimumQuartileEnum minimumQuartile) {
    this.minimumQuartile = minimumQuartile;
    return this;
  }

  /**
   * The minimum visible video duration required, based on the video quartiles, in order for an impression to be recorded. You must specify minimum_duration, minimum_quartile or both. If both are specified, an impression meets the metric criteria if either requirement is met (whichever happens first).
   * @return minimumQuartile
   */
  @javax.annotation.Nullable
  public MinimumQuartileEnum getMinimumQuartile() {
    return minimumQuartile;
  }

  public void setMinimumQuartile(MinimumQuartileEnum minimumQuartile) {
    this.minimumQuartile = minimumQuartile;
  }


  public ActiveViewVideoViewabilityMetricConfig minimumViewability(MinimumViewabilityEnum minimumViewability) {
    this.minimumViewability = minimumViewability;
    return this;
  }

  /**
   * Required. The minimum percentage of the video ad&#39;s pixels visible on the screen in order for an impression to be recorded.
   * @return minimumViewability
   */
  @javax.annotation.Nullable
  public MinimumViewabilityEnum getMinimumViewability() {
    return minimumViewability;
  }

  public void setMinimumViewability(MinimumViewabilityEnum minimumViewability) {
    this.minimumViewability = minimumViewability;
  }


  public ActiveViewVideoViewabilityMetricConfig minimumVolume(MinimumVolumeEnum minimumVolume) {
    this.minimumVolume = minimumVolume;
    return this;
  }

  /**
   * Required. The minimum percentage of the video ad&#39;s volume required in order for an impression to be recorded.
   * @return minimumVolume
   */
  @javax.annotation.Nullable
  public MinimumVolumeEnum getMinimumVolume() {
    return minimumVolume;
  }

  public void setMinimumVolume(MinimumVolumeEnum minimumVolume) {
    this.minimumVolume = minimumVolume;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActiveViewVideoViewabilityMetricConfig activeViewVideoViewabilityMetricConfig = (ActiveViewVideoViewabilityMetricConfig) o;
    return Objects.equals(this.displayName, activeViewVideoViewabilityMetricConfig.displayName) &&
        Objects.equals(this.minimumDuration, activeViewVideoViewabilityMetricConfig.minimumDuration) &&
        Objects.equals(this.minimumQuartile, activeViewVideoViewabilityMetricConfig.minimumQuartile) &&
        Objects.equals(this.minimumViewability, activeViewVideoViewabilityMetricConfig.minimumViewability) &&
        Objects.equals(this.minimumVolume, activeViewVideoViewabilityMetricConfig.minimumVolume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, minimumDuration, minimumQuartile, minimumViewability, minimumVolume);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActiveViewVideoViewabilityMetricConfig {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    minimumDuration: ").append(toIndentedString(minimumDuration)).append("\n");
    sb.append("    minimumQuartile: ").append(toIndentedString(minimumQuartile)).append("\n");
    sb.append("    minimumViewability: ").append(toIndentedString(minimumViewability)).append("\n");
    sb.append("    minimumVolume: ").append(toIndentedString(minimumVolume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("minimumDuration");
    openapiFields.add("minimumQuartile");
    openapiFields.add("minimumViewability");
    openapiFields.add("minimumVolume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActiveViewVideoViewabilityMetricConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActiveViewVideoViewabilityMetricConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActiveViewVideoViewabilityMetricConfig is not found in the empty JSON string", ActiveViewVideoViewabilityMetricConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActiveViewVideoViewabilityMetricConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActiveViewVideoViewabilityMetricConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("minimumDuration") != null && !jsonObj.get("minimumDuration").isJsonNull()) && !jsonObj.get("minimumDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumDuration").toString()));
      }
      // validate the optional field `minimumDuration`
      if (jsonObj.get("minimumDuration") != null && !jsonObj.get("minimumDuration").isJsonNull()) {
        MinimumDurationEnum.validateJsonElement(jsonObj.get("minimumDuration"));
      }
      if ((jsonObj.get("minimumQuartile") != null && !jsonObj.get("minimumQuartile").isJsonNull()) && !jsonObj.get("minimumQuartile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumQuartile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumQuartile").toString()));
      }
      // validate the optional field `minimumQuartile`
      if (jsonObj.get("minimumQuartile") != null && !jsonObj.get("minimumQuartile").isJsonNull()) {
        MinimumQuartileEnum.validateJsonElement(jsonObj.get("minimumQuartile"));
      }
      if ((jsonObj.get("minimumViewability") != null && !jsonObj.get("minimumViewability").isJsonNull()) && !jsonObj.get("minimumViewability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumViewability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumViewability").toString()));
      }
      // validate the optional field `minimumViewability`
      if (jsonObj.get("minimumViewability") != null && !jsonObj.get("minimumViewability").isJsonNull()) {
        MinimumViewabilityEnum.validateJsonElement(jsonObj.get("minimumViewability"));
      }
      if ((jsonObj.get("minimumVolume") != null && !jsonObj.get("minimumVolume").isJsonNull()) && !jsonObj.get("minimumVolume").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumVolume` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumVolume").toString()));
      }
      // validate the optional field `minimumVolume`
      if (jsonObj.get("minimumVolume") != null && !jsonObj.get("minimumVolume").isJsonNull()) {
        MinimumVolumeEnum.validateJsonElement(jsonObj.get("minimumVolume"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActiveViewVideoViewabilityMetricConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActiveViewVideoViewabilityMetricConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActiveViewVideoViewabilityMetricConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActiveViewVideoViewabilityMetricConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ActiveViewVideoViewabilityMetricConfig>() {
           @Override
           public void write(JsonWriter out, ActiveViewVideoViewabilityMetricConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActiveViewVideoViewabilityMetricConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActiveViewVideoViewabilityMetricConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActiveViewVideoViewabilityMetricConfig
   * @throws IOException if the JSON string is invalid with respect to ActiveViewVideoViewabilityMetricConfig
   */
  public static ActiveViewVideoViewabilityMetricConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActiveViewVideoViewabilityMetricConfig.class);
  }

  /**
   * Convert an instance of ActiveViewVideoViewabilityMetricConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

