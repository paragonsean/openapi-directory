/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssignedTargetingOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request listing which assigned targeting options of a given targeting type should be created and added.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAssignedTargetingOptionsRequest {
  public static final String SERIALIZED_NAME_ASSIGNED_TARGETING_OPTIONS = "assignedTargetingOptions";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TARGETING_OPTIONS)
  private List<AssignedTargetingOption> assignedTargetingOptions = new ArrayList<>();

  /**
   * Required. Identifies the type of this assigned targeting option.
   */
  @JsonAdapter(TargetingTypeEnum.Adapter.class)
  public enum TargetingTypeEnum {
    UNSPECIFIED("TARGETING_TYPE_UNSPECIFIED"),
    
    CHANNEL("TARGETING_TYPE_CHANNEL"),
    
    APP_CATEGORY("TARGETING_TYPE_APP_CATEGORY"),
    
    APP("TARGETING_TYPE_APP"),
    
    URL("TARGETING_TYPE_URL"),
    
    DAY_AND_TIME("TARGETING_TYPE_DAY_AND_TIME"),
    
    AGE_RANGE("TARGETING_TYPE_AGE_RANGE"),
    
    REGIONAL_LOCATION_LIST("TARGETING_TYPE_REGIONAL_LOCATION_LIST"),
    
    PROXIMITY_LOCATION_LIST("TARGETING_TYPE_PROXIMITY_LOCATION_LIST"),
    
    GENDER("TARGETING_TYPE_GENDER"),
    
    VIDEO_PLAYER_SIZE("TARGETING_TYPE_VIDEO_PLAYER_SIZE"),
    
    USER_REWARDED_CONTENT("TARGETING_TYPE_USER_REWARDED_CONTENT"),
    
    PARENTAL_STATUS("TARGETING_TYPE_PARENTAL_STATUS"),
    
    CONTENT_INSTREAM_POSITION("TARGETING_TYPE_CONTENT_INSTREAM_POSITION"),
    
    CONTENT_OUTSTREAM_POSITION("TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION"),
    
    DEVICE_TYPE("TARGETING_TYPE_DEVICE_TYPE"),
    
    AUDIENCE_GROUP("TARGETING_TYPE_AUDIENCE_GROUP"),
    
    BROWSER("TARGETING_TYPE_BROWSER"),
    
    HOUSEHOLD_INCOME("TARGETING_TYPE_HOUSEHOLD_INCOME"),
    
    ON_SCREEN_POSITION("TARGETING_TYPE_ON_SCREEN_POSITION"),
    
    THIRD_PARTY_VERIFIER("TARGETING_TYPE_THIRD_PARTY_VERIFIER"),
    
    DIGITAL_CONTENT_LABEL_EXCLUSION("TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION"),
    
    SENSITIVE_CATEGORY_EXCLUSION("TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION"),
    
    ENVIRONMENT("TARGETING_TYPE_ENVIRONMENT"),
    
    CARRIER_AND_ISP("TARGETING_TYPE_CARRIER_AND_ISP"),
    
    OPERATING_SYSTEM("TARGETING_TYPE_OPERATING_SYSTEM"),
    
    DEVICE_MAKE_MODEL("TARGETING_TYPE_DEVICE_MAKE_MODEL"),
    
    KEYWORD("TARGETING_TYPE_KEYWORD"),
    
    NEGATIVE_KEYWORD_LIST("TARGETING_TYPE_NEGATIVE_KEYWORD_LIST"),
    
    VIEWABILITY("TARGETING_TYPE_VIEWABILITY"),
    
    CATEGORY("TARGETING_TYPE_CATEGORY"),
    
    INVENTORY_SOURCE("TARGETING_TYPE_INVENTORY_SOURCE"),
    
    LANGUAGE("TARGETING_TYPE_LANGUAGE"),
    
    AUTHORIZED_SELLER_STATUS("TARGETING_TYPE_AUTHORIZED_SELLER_STATUS"),
    
    GEO_REGION("TARGETING_TYPE_GEO_REGION"),
    
    INVENTORY_SOURCE_GROUP("TARGETING_TYPE_INVENTORY_SOURCE_GROUP"),
    
    EXCHANGE("TARGETING_TYPE_EXCHANGE"),
    
    SUB_EXCHANGE("TARGETING_TYPE_SUB_EXCHANGE"),
    
    POI("TARGETING_TYPE_POI"),
    
    BUSINESS_CHAIN("TARGETING_TYPE_BUSINESS_CHAIN"),
    
    CONTENT_DURATION("TARGETING_TYPE_CONTENT_DURATION"),
    
    CONTENT_STREAM_TYPE("TARGETING_TYPE_CONTENT_STREAM_TYPE"),
    
    NATIVE_CONTENT_POSITION("TARGETING_TYPE_NATIVE_CONTENT_POSITION"),
    
    OMID("TARGETING_TYPE_OMID"),
    
    AUDIO_CONTENT_TYPE("TARGETING_TYPE_AUDIO_CONTENT_TYPE"),
    
    CONTENT_GENRE("TARGETING_TYPE_CONTENT_GENRE");

    private String value;

    TargetingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetingTypeEnum fromValue(String value) {
      for (TargetingTypeEnum b : TargetingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGETING_TYPE = "targetingType";
  @SerializedName(SERIALIZED_NAME_TARGETING_TYPE)
  private TargetingTypeEnum targetingType;

  public CreateAssignedTargetingOptionsRequest() {
  }

  public CreateAssignedTargetingOptionsRequest assignedTargetingOptions(List<AssignedTargetingOption> assignedTargetingOptions) {
    this.assignedTargetingOptions = assignedTargetingOptions;
    return this;
  }

  public CreateAssignedTargetingOptionsRequest addAssignedTargetingOptionsItem(AssignedTargetingOption assignedTargetingOptionsItem) {
    if (this.assignedTargetingOptions == null) {
      this.assignedTargetingOptions = new ArrayList<>();
    }
    this.assignedTargetingOptions.add(assignedTargetingOptionsItem);
    return this;
  }

  /**
   * Required. The assigned targeting options to create and add.
   * @return assignedTargetingOptions
   */
  @javax.annotation.Nullable
  public List<AssignedTargetingOption> getAssignedTargetingOptions() {
    return assignedTargetingOptions;
  }

  public void setAssignedTargetingOptions(List<AssignedTargetingOption> assignedTargetingOptions) {
    this.assignedTargetingOptions = assignedTargetingOptions;
  }


  public CreateAssignedTargetingOptionsRequest targetingType(TargetingTypeEnum targetingType) {
    this.targetingType = targetingType;
    return this;
  }

  /**
   * Required. Identifies the type of this assigned targeting option.
   * @return targetingType
   */
  @javax.annotation.Nullable
  public TargetingTypeEnum getTargetingType() {
    return targetingType;
  }

  public void setTargetingType(TargetingTypeEnum targetingType) {
    this.targetingType = targetingType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAssignedTargetingOptionsRequest createAssignedTargetingOptionsRequest = (CreateAssignedTargetingOptionsRequest) o;
    return Objects.equals(this.assignedTargetingOptions, createAssignedTargetingOptionsRequest.assignedTargetingOptions) &&
        Objects.equals(this.targetingType, createAssignedTargetingOptionsRequest.targetingType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignedTargetingOptions, targetingType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAssignedTargetingOptionsRequest {\n");
    sb.append("    assignedTargetingOptions: ").append(toIndentedString(assignedTargetingOptions)).append("\n");
    sb.append("    targetingType: ").append(toIndentedString(targetingType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignedTargetingOptions");
    openapiFields.add("targetingType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAssignedTargetingOptionsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAssignedTargetingOptionsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAssignedTargetingOptionsRequest is not found in the empty JSON string", CreateAssignedTargetingOptionsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAssignedTargetingOptionsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAssignedTargetingOptionsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("assignedTargetingOptions") != null && !jsonObj.get("assignedTargetingOptions").isJsonNull()) {
        JsonArray jsonArrayassignedTargetingOptions = jsonObj.getAsJsonArray("assignedTargetingOptions");
        if (jsonArrayassignedTargetingOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assignedTargetingOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assignedTargetingOptions` to be an array in the JSON string but got `%s`", jsonObj.get("assignedTargetingOptions").toString()));
          }

          // validate the optional field `assignedTargetingOptions` (array)
          for (int i = 0; i < jsonArrayassignedTargetingOptions.size(); i++) {
            AssignedTargetingOption.validateJsonElement(jsonArrayassignedTargetingOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("targetingType") != null && !jsonObj.get("targetingType").isJsonNull()) && !jsonObj.get("targetingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetingType").toString()));
      }
      // validate the optional field `targetingType`
      if (jsonObj.get("targetingType") != null && !jsonObj.get("targetingType").isJsonNull()) {
        TargetingTypeEnum.validateJsonElement(jsonObj.get("targetingType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAssignedTargetingOptionsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAssignedTargetingOptionsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAssignedTargetingOptionsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAssignedTargetingOptionsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAssignedTargetingOptionsRequest>() {
           @Override
           public void write(JsonWriter out, CreateAssignedTargetingOptionsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAssignedTargetingOptionsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAssignedTargetingOptionsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAssignedTargetingOptionsRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAssignedTargetingOptionsRequest
   */
  public static CreateAssignedTargetingOptionsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAssignedTargetingOptionsRequest.class);
  }

  /**
   * Convert an instance of CreateAssignedTargetingOptionsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

