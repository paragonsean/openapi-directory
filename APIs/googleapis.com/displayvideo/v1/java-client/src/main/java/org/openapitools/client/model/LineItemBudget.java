/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings that control how budget is allocated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:03.254016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LineItemBudget {
  /**
   * Required. The type of the budget allocation. &#x60;LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC&#x60; is only applicable when automatic budget allocation is enabled for the parent insertion order.
   */
  @JsonAdapter(BudgetAllocationTypeEnum.Adapter.class)
  public enum BudgetAllocationTypeEnum {
    UNSPECIFIED("LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNSPECIFIED"),
    
    AUTOMATIC("LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC"),
    
    FIXED("LINE_ITEM_BUDGET_ALLOCATION_TYPE_FIXED"),
    
    UNLIMITED("LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNLIMITED");

    private String value;

    BudgetAllocationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BudgetAllocationTypeEnum fromValue(String value) {
      for (BudgetAllocationTypeEnum b : BudgetAllocationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BudgetAllocationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BudgetAllocationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BudgetAllocationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BudgetAllocationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BudgetAllocationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUDGET_ALLOCATION_TYPE = "budgetAllocationType";
  @SerializedName(SERIALIZED_NAME_BUDGET_ALLOCATION_TYPE)
  private BudgetAllocationTypeEnum budgetAllocationType;

  /**
   * Output only. The budget unit specifies whether the budget is currency based or impression based. This value is inherited from the parent insertion order.
   */
  @JsonAdapter(BudgetUnitEnum.Adapter.class)
  public enum BudgetUnitEnum {
    UNSPECIFIED("BUDGET_UNIT_UNSPECIFIED"),
    
    CURRENCY("BUDGET_UNIT_CURRENCY"),
    
    IMPRESSIONS("BUDGET_UNIT_IMPRESSIONS");

    private String value;

    BudgetUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BudgetUnitEnum fromValue(String value) {
      for (BudgetUnitEnum b : BudgetUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BudgetUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BudgetUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BudgetUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BudgetUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BudgetUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUDGET_UNIT = "budgetUnit";
  @SerializedName(SERIALIZED_NAME_BUDGET_UNIT)
  private BudgetUnitEnum budgetUnit;

  public static final String SERIALIZED_NAME_MAX_AMOUNT = "maxAmount";
  @SerializedName(SERIALIZED_NAME_MAX_AMOUNT)
  private String maxAmount;

  public LineItemBudget() {
  }

  public LineItemBudget(
     BudgetUnitEnum budgetUnit
  ) {
    this();
    this.budgetUnit = budgetUnit;
  }

  public LineItemBudget budgetAllocationType(BudgetAllocationTypeEnum budgetAllocationType) {
    this.budgetAllocationType = budgetAllocationType;
    return this;
  }

  /**
   * Required. The type of the budget allocation. &#x60;LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC&#x60; is only applicable when automatic budget allocation is enabled for the parent insertion order.
   * @return budgetAllocationType
   */
  @javax.annotation.Nullable
  public BudgetAllocationTypeEnum getBudgetAllocationType() {
    return budgetAllocationType;
  }

  public void setBudgetAllocationType(BudgetAllocationTypeEnum budgetAllocationType) {
    this.budgetAllocationType = budgetAllocationType;
  }


  /**
   * Output only. The budget unit specifies whether the budget is currency based or impression based. This value is inherited from the parent insertion order.
   * @return budgetUnit
   */
  @javax.annotation.Nullable
  public BudgetUnitEnum getBudgetUnit() {
    return budgetUnit;
  }



  public LineItemBudget maxAmount(String maxAmount) {
    this.maxAmount = maxAmount;
    return this;
  }

  /**
   * The maximum budget amount the line item will spend. Must be greater than 0. When budget_allocation_type is: * &#x60;LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC&#x60;, this field is immutable and is set by the system. * &#x60;LINE_ITEM_BUDGET_ALLOCATION_TYPE_FIXED&#x60;, if budget_unit is: - &#x60;BUDGET_UNIT_CURRENCY&#x60;, this field represents maximum budget amount to spend, in micros of the advertiser&#39;s currency. For example, 1500000 represents 1.5 standard units of the currency. - &#x60;BUDGET_UNIT_IMPRESSIONS&#x60;, this field represents the maximum number of impressions to serve. * &#x60;LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNLIMITED&#x60;, this field is not applicable and will be ignored by the system.
   * @return maxAmount
   */
  @javax.annotation.Nullable
  public String getMaxAmount() {
    return maxAmount;
  }

  public void setMaxAmount(String maxAmount) {
    this.maxAmount = maxAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineItemBudget lineItemBudget = (LineItemBudget) o;
    return Objects.equals(this.budgetAllocationType, lineItemBudget.budgetAllocationType) &&
        Objects.equals(this.budgetUnit, lineItemBudget.budgetUnit) &&
        Objects.equals(this.maxAmount, lineItemBudget.maxAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(budgetAllocationType, budgetUnit, maxAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineItemBudget {\n");
    sb.append("    budgetAllocationType: ").append(toIndentedString(budgetAllocationType)).append("\n");
    sb.append("    budgetUnit: ").append(toIndentedString(budgetUnit)).append("\n");
    sb.append("    maxAmount: ").append(toIndentedString(maxAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("budgetAllocationType");
    openapiFields.add("budgetUnit");
    openapiFields.add("maxAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LineItemBudget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LineItemBudget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineItemBudget is not found in the empty JSON string", LineItemBudget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LineItemBudget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineItemBudget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("budgetAllocationType") != null && !jsonObj.get("budgetAllocationType").isJsonNull()) && !jsonObj.get("budgetAllocationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budgetAllocationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budgetAllocationType").toString()));
      }
      // validate the optional field `budgetAllocationType`
      if (jsonObj.get("budgetAllocationType") != null && !jsonObj.get("budgetAllocationType").isJsonNull()) {
        BudgetAllocationTypeEnum.validateJsonElement(jsonObj.get("budgetAllocationType"));
      }
      if ((jsonObj.get("budgetUnit") != null && !jsonObj.get("budgetUnit").isJsonNull()) && !jsonObj.get("budgetUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budgetUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budgetUnit").toString()));
      }
      // validate the optional field `budgetUnit`
      if (jsonObj.get("budgetUnit") != null && !jsonObj.get("budgetUnit").isJsonNull()) {
        BudgetUnitEnum.validateJsonElement(jsonObj.get("budgetUnit"));
      }
      if ((jsonObj.get("maxAmount") != null && !jsonObj.get("maxAmount").isJsonNull()) && !jsonObj.get("maxAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxAmount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineItemBudget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineItemBudget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineItemBudget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineItemBudget.class));

       return (TypeAdapter<T>) new TypeAdapter<LineItemBudget>() {
           @Override
           public void write(JsonWriter out, LineItemBudget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineItemBudget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LineItemBudget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LineItemBudget
   * @throws IOException if the JSON string is invalid with respect to LineItemBudget
   */
  public static LineItemBudget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineItemBudget.class);
  }

  /**
   * Convert an instance of LineItemBudget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

