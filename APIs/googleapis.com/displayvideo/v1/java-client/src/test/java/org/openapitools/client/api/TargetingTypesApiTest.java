/*
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ListTargetingOptionsResponse;
import org.openapitools.client.model.SearchTargetingOptionsRequest;
import org.openapitools.client.model.SearchTargetingOptionsResponse;
import org.openapitools.client.model.TargetingOption;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TargetingTypesApi
 */
@Disabled
public class TargetingTypesApiTest {

    private final TargetingTypesApi api = new TargetingTypesApi();

    /**
     * Gets a single targeting option.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoTargetingTypesTargetingOptionsGetTest() throws ApiException {
        String targetingType = null;
        String targetingOptionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        TargetingOption response = api.displayvideoTargetingTypesTargetingOptionsGet(targetingType, targetingOptionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId);
        // TODO: test validations
    }

    /**
     * Lists targeting options of a given type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoTargetingTypesTargetingOptionsListTest() throws ApiException {
        String targetingType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListTargetingOptionsResponse response = api.displayvideoTargetingTypesTargetingOptionsList(targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Searches for targeting options of a given type based on the given search terms.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayvideoTargetingTypesTargetingOptionsSearchTest() throws ApiException {
        String targetingType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SearchTargetingOptionsRequest searchTargetingOptionsRequest = null;
        SearchTargetingOptionsResponse response = api.displayvideoTargetingTypesTargetingOptionsSearch(targetingType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, searchTargetingOptionsRequest);
        // TODO: test validations
    }

}
