# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenderTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gender: str=None):
        """GenderTargetingOptionDetails - a model defined in OpenAPI

        :param gender: The gender of this GenderTargetingOptionDetails.
        """
        self.openapi_types = {
            'gender': str
        }

        self.attribute_map = {
            'gender': 'gender'
        }

        self._gender = gender

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenderTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenderTargetingOptionDetails of this GenderTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gender(self):
        """Gets the gender of this GenderTargetingOptionDetails.

        Output only. The gender of an audience.

        :return: The gender of this GenderTargetingOptionDetails.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this GenderTargetingOptionDetails.

        Output only. The gender of an audience.

        :param gender: The gender of this GenderTargetingOptionDetails.
        :type gender: str
        """
        allowed_values = ["GENDER_UNSPECIFIED", "GENDER_MALE", "GENDER_FEMALE", "GENDER_UNKNOWN"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender
