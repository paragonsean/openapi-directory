# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioContentTypeAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_content_type: str=None, targeting_option_id: str=None):
        """AudioContentTypeAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param audio_content_type: The audio_content_type of this AudioContentTypeAssignedTargetingOptionDetails.
        :param targeting_option_id: The targeting_option_id of this AudioContentTypeAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'audio_content_type': str,
            'targeting_option_id': str
        }

        self.attribute_map = {
            'audio_content_type': 'audioContentType',
            'targeting_option_id': 'targetingOptionId'
        }

        self._audio_content_type = audio_content_type
        self._targeting_option_id = targeting_option_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioContentTypeAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioContentTypeAssignedTargetingOptionDetails of this AudioContentTypeAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_content_type(self):
        """Gets the audio_content_type of this AudioContentTypeAssignedTargetingOptionDetails.

        Required. The audio content type.

        :return: The audio_content_type of this AudioContentTypeAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._audio_content_type

    @audio_content_type.setter
    def audio_content_type(self, audio_content_type):
        """Sets the audio_content_type of this AudioContentTypeAssignedTargetingOptionDetails.

        Required. The audio content type.

        :param audio_content_type: The audio_content_type of this AudioContentTypeAssignedTargetingOptionDetails.
        :type audio_content_type: str
        """
        allowed_values = ["AUDIO_CONTENT_TYPE_UNSPECIFIED", "AUDIO_CONTENT_TYPE_UNKNOWN", "AUDIO_CONTENT_TYPE_MUSIC", "AUDIO_CONTENT_TYPE_BROADCAST", "AUDIO_CONTENT_TYPE_PODCAST"]  # noqa: E501
        if audio_content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `audio_content_type` ({0}), must be one of {1}"
                .format(audio_content_type, allowed_values)
            )

        self._audio_content_type = audio_content_type

    @property
    def targeting_option_id(self):
        """Gets the targeting_option_id of this AudioContentTypeAssignedTargetingOptionDetails.

        Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_AUDIO_CONTENT_TYPE`.

        :return: The targeting_option_id of this AudioContentTypeAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._targeting_option_id

    @targeting_option_id.setter
    def targeting_option_id(self, targeting_option_id):
        """Sets the targeting_option_id of this AudioContentTypeAssignedTargetingOptionDetails.

        Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_AUDIO_CONTENT_TYPE`.

        :param targeting_option_id: The targeting_option_id of this AudioContentTypeAssignedTargetingOptionDetails.
        :type targeting_option_id: str
        """

        self._targeting_option_id = targeting_option_id
