# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FrequencyCap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_impressions: int=None, time_unit: str=None, time_unit_count: int=None, unlimited: bool=None):
        """FrequencyCap - a model defined in OpenAPI

        :param max_impressions: The max_impressions of this FrequencyCap.
        :param time_unit: The time_unit of this FrequencyCap.
        :param time_unit_count: The time_unit_count of this FrequencyCap.
        :param unlimited: The unlimited of this FrequencyCap.
        """
        self.openapi_types = {
            'max_impressions': int,
            'time_unit': str,
            'time_unit_count': int,
            'unlimited': bool
        }

        self.attribute_map = {
            'max_impressions': 'maxImpressions',
            'time_unit': 'timeUnit',
            'time_unit_count': 'timeUnitCount',
            'unlimited': 'unlimited'
        }

        self._max_impressions = max_impressions
        self._time_unit = time_unit
        self._time_unit_count = time_unit_count
        self._unlimited = unlimited

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrequencyCap':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FrequencyCap of this FrequencyCap.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_impressions(self):
        """Gets the max_impressions of this FrequencyCap.

        The maximum number of times a user may be shown the same ad during this period. Must be greater than 0. Required when unlimited is `false` and max_views is not set.

        :return: The max_impressions of this FrequencyCap.
        :rtype: int
        """
        return self._max_impressions

    @max_impressions.setter
    def max_impressions(self, max_impressions):
        """Sets the max_impressions of this FrequencyCap.

        The maximum number of times a user may be shown the same ad during this period. Must be greater than 0. Required when unlimited is `false` and max_views is not set.

        :param max_impressions: The max_impressions of this FrequencyCap.
        :type max_impressions: int
        """

        self._max_impressions = max_impressions

    @property
    def time_unit(self):
        """Gets the time_unit of this FrequencyCap.

        The time unit in which the frequency cap will be applied. Required when unlimited is `false`.

        :return: The time_unit of this FrequencyCap.
        :rtype: str
        """
        return self._time_unit

    @time_unit.setter
    def time_unit(self, time_unit):
        """Sets the time_unit of this FrequencyCap.

        The time unit in which the frequency cap will be applied. Required when unlimited is `false`.

        :param time_unit: The time_unit of this FrequencyCap.
        :type time_unit: str
        """
        allowed_values = ["TIME_UNIT_UNSPECIFIED", "TIME_UNIT_LIFETIME", "TIME_UNIT_MONTHS", "TIME_UNIT_WEEKS", "TIME_UNIT_DAYS", "TIME_UNIT_HOURS", "TIME_UNIT_MINUTES"]  # noqa: E501
        if time_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `time_unit` ({0}), must be one of {1}"
                .format(time_unit, allowed_values)
            )

        self._time_unit = time_unit

    @property
    def time_unit_count(self):
        """Gets the time_unit_count of this FrequencyCap.

        The number of time_unit the frequency cap will last. Required when unlimited is `false`. The following restrictions apply based on the value of time_unit: * `TIME_UNIT_LIFETIME` - this field is output only and will default to 1 * `TIME_UNIT_MONTHS` - must be between 1 and 2 * `TIME_UNIT_WEEKS` - must be between 1 and 4 * `TIME_UNIT_DAYS` - must be between 1 and 6 * `TIME_UNIT_HOURS` - must be between 1 and 23 * `TIME_UNIT_MINUTES` - must be between 1 and 59

        :return: The time_unit_count of this FrequencyCap.
        :rtype: int
        """
        return self._time_unit_count

    @time_unit_count.setter
    def time_unit_count(self, time_unit_count):
        """Sets the time_unit_count of this FrequencyCap.

        The number of time_unit the frequency cap will last. Required when unlimited is `false`. The following restrictions apply based on the value of time_unit: * `TIME_UNIT_LIFETIME` - this field is output only and will default to 1 * `TIME_UNIT_MONTHS` - must be between 1 and 2 * `TIME_UNIT_WEEKS` - must be between 1 and 4 * `TIME_UNIT_DAYS` - must be between 1 and 6 * `TIME_UNIT_HOURS` - must be between 1 and 23 * `TIME_UNIT_MINUTES` - must be between 1 and 59

        :param time_unit_count: The time_unit_count of this FrequencyCap.
        :type time_unit_count: int
        """

        self._time_unit_count = time_unit_count

    @property
    def unlimited(self):
        """Gets the unlimited of this FrequencyCap.

        Whether unlimited frequency capping is applied. When this field is set to `true`, the remaining frequency cap fields are not applicable.

        :return: The unlimited of this FrequencyCap.
        :rtype: bool
        """
        return self._unlimited

    @unlimited.setter
    def unlimited(self, unlimited):
        """Sets the unlimited of this FrequencyCap.

        Whether unlimited frequency capping is applied. When this field is set to `true`, the remaining frequency cap fields are not applicable.

        :param unlimited: The unlimited of this FrequencyCap.
        :type unlimited: bool
        """

        self._unlimited = unlimited
