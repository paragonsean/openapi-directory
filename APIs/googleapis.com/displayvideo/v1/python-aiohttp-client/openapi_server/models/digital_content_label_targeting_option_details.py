# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DigitalContentLabelTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_rating_tier: str=None):
        """DigitalContentLabelTargetingOptionDetails - a model defined in OpenAPI

        :param content_rating_tier: The content_rating_tier of this DigitalContentLabelTargetingOptionDetails.
        """
        self.openapi_types = {
            'content_rating_tier': str
        }

        self.attribute_map = {
            'content_rating_tier': 'contentRatingTier'
        }

        self._content_rating_tier = content_rating_tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DigitalContentLabelTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DigitalContentLabelTargetingOptionDetails of this DigitalContentLabelTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_rating_tier(self):
        """Gets the content_rating_tier of this DigitalContentLabelTargetingOptionDetails.

        Output only. An enum for the content label brand safety tiers.

        :return: The content_rating_tier of this DigitalContentLabelTargetingOptionDetails.
        :rtype: str
        """
        return self._content_rating_tier

    @content_rating_tier.setter
    def content_rating_tier(self, content_rating_tier):
        """Sets the content_rating_tier of this DigitalContentLabelTargetingOptionDetails.

        Output only. An enum for the content label brand safety tiers.

        :param content_rating_tier: The content_rating_tier of this DigitalContentLabelTargetingOptionDetails.
        :type content_rating_tier: str
        """
        allowed_values = ["CONTENT_RATING_TIER_UNSPECIFIED", "CONTENT_RATING_TIER_UNRATED", "CONTENT_RATING_TIER_GENERAL", "CONTENT_RATING_TIER_PARENTAL_GUIDANCE", "CONTENT_RATING_TIER_TEENS", "CONTENT_RATING_TIER_MATURE"]  # noqa: E501
        if content_rating_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `content_rating_tier` ({0}), must be one of {1}"
                .format(content_rating_tier, allowed_values)
            )

        self._content_rating_tier = content_rating_tier
