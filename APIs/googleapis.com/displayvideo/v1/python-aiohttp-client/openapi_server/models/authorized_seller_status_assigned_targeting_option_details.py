# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthorizedSellerStatusAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorized_seller_status: str=None, targeting_option_id: str=None):
        """AuthorizedSellerStatusAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param authorized_seller_status: The authorized_seller_status of this AuthorizedSellerStatusAssignedTargetingOptionDetails.
        :param targeting_option_id: The targeting_option_id of this AuthorizedSellerStatusAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'authorized_seller_status': str,
            'targeting_option_id': str
        }

        self.attribute_map = {
            'authorized_seller_status': 'authorizedSellerStatus',
            'targeting_option_id': 'targetingOptionId'
        }

        self._authorized_seller_status = authorized_seller_status
        self._targeting_option_id = targeting_option_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizedSellerStatusAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorizedSellerStatusAssignedTargetingOptionDetails of this AuthorizedSellerStatusAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorized_seller_status(self):
        """Gets the authorized_seller_status of this AuthorizedSellerStatusAssignedTargetingOptionDetails.

        Output only. The authorized seller status to target.

        :return: The authorized_seller_status of this AuthorizedSellerStatusAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._authorized_seller_status

    @authorized_seller_status.setter
    def authorized_seller_status(self, authorized_seller_status):
        """Sets the authorized_seller_status of this AuthorizedSellerStatusAssignedTargetingOptionDetails.

        Output only. The authorized seller status to target.

        :param authorized_seller_status: The authorized_seller_status of this AuthorizedSellerStatusAssignedTargetingOptionDetails.
        :type authorized_seller_status: str
        """
        allowed_values = ["AUTHORIZED_SELLER_STATUS_UNSPECIFIED", "AUTHORIZED_SELLER_STATUS_AUTHORIZED_DIRECT_SELLERS_ONLY", "AUTHORIZED_SELLER_STATUS_AUTHORIZED_AND_NON_PARTICIPATING_PUBLISHERS"]  # noqa: E501
        if authorized_seller_status not in allowed_values:
            raise ValueError(
                "Invalid value for `authorized_seller_status` ({0}), must be one of {1}"
                .format(authorized_seller_status, allowed_values)
            )

        self._authorized_seller_status = authorized_seller_status

    @property
    def targeting_option_id(self):
        """Gets the targeting_option_id of this AuthorizedSellerStatusAssignedTargetingOptionDetails.

        Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS`.

        :return: The targeting_option_id of this AuthorizedSellerStatusAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._targeting_option_id

    @targeting_option_id.setter
    def targeting_option_id(self, targeting_option_id):
        """Sets the targeting_option_id of this AuthorizedSellerStatusAssignedTargetingOptionDetails.

        Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS`.

        :param targeting_option_id: The targeting_option_id of this AuthorizedSellerStatusAssignedTargetingOptionDetails.
        :type targeting_option_id: str
        """

        self._targeting_option_id = targeting_option_id
