# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CategoryAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, negative: bool=None, targeting_option_id: str=None):
        """CategoryAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param display_name: The display_name of this CategoryAssignedTargetingOptionDetails.
        :param negative: The negative of this CategoryAssignedTargetingOptionDetails.
        :param targeting_option_id: The targeting_option_id of this CategoryAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'display_name': str,
            'negative': bool,
            'targeting_option_id': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'negative': 'negative',
            'targeting_option_id': 'targetingOptionId'
        }

        self._display_name = display_name
        self._negative = negative
        self._targeting_option_id = targeting_option_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CategoryAssignedTargetingOptionDetails of this CategoryAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this CategoryAssignedTargetingOptionDetails.

        Output only. The display name of the category.

        :return: The display_name of this CategoryAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CategoryAssignedTargetingOptionDetails.

        Output only. The display name of the category.

        :param display_name: The display_name of this CategoryAssignedTargetingOptionDetails.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def negative(self):
        """Gets the negative of this CategoryAssignedTargetingOptionDetails.

        Indicates if this option is being negatively targeted.

        :return: The negative of this CategoryAssignedTargetingOptionDetails.
        :rtype: bool
        """
        return self._negative

    @negative.setter
    def negative(self, negative):
        """Sets the negative of this CategoryAssignedTargetingOptionDetails.

        Indicates if this option is being negatively targeted.

        :param negative: The negative of this CategoryAssignedTargetingOptionDetails.
        :type negative: bool
        """

        self._negative = negative

    @property
    def targeting_option_id(self):
        """Gets the targeting_option_id of this CategoryAssignedTargetingOptionDetails.

        Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CATEGORY`.

        :return: The targeting_option_id of this CategoryAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._targeting_option_id

    @targeting_option_id.setter
    def targeting_option_id(self, targeting_option_id):
        """Sets the targeting_option_id of this CategoryAssignedTargetingOptionDetails.

        Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CATEGORY`.

        :param targeting_option_id: The targeting_option_id of this CategoryAssignedTargetingOptionDetails.
        :type targeting_option_id: str
        """

        self._targeting_option_id = targeting_option_id
