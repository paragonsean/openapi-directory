# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.insertion_order_budget_segment import InsertionOrderBudgetSegment
from openapi_server import util


class InsertionOrderBudget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automation_type: str=None, budget_segments: List[InsertionOrderBudgetSegment]=None, budget_unit: str=None):
        """InsertionOrderBudget - a model defined in OpenAPI

        :param automation_type: The automation_type of this InsertionOrderBudget.
        :param budget_segments: The budget_segments of this InsertionOrderBudget.
        :param budget_unit: The budget_unit of this InsertionOrderBudget.
        """
        self.openapi_types = {
            'automation_type': str,
            'budget_segments': List[InsertionOrderBudgetSegment],
            'budget_unit': str
        }

        self.attribute_map = {
            'automation_type': 'automationType',
            'budget_segments': 'budgetSegments',
            'budget_unit': 'budgetUnit'
        }

        self._automation_type = automation_type
        self._budget_segments = budget_segments
        self._budget_unit = budget_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsertionOrderBudget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InsertionOrderBudget of this InsertionOrderBudget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automation_type(self):
        """Gets the automation_type of this InsertionOrderBudget.

        The type of automation used to manage bid and budget for the insertion order. If this field is unspecified in creation, the value defaults to `INSERTION_ORDER_AUTOMATION_TYPE_NONE`.

        :return: The automation_type of this InsertionOrderBudget.
        :rtype: str
        """
        return self._automation_type

    @automation_type.setter
    def automation_type(self, automation_type):
        """Sets the automation_type of this InsertionOrderBudget.

        The type of automation used to manage bid and budget for the insertion order. If this field is unspecified in creation, the value defaults to `INSERTION_ORDER_AUTOMATION_TYPE_NONE`.

        :param automation_type: The automation_type of this InsertionOrderBudget.
        :type automation_type: str
        """
        allowed_values = ["INSERTION_ORDER_AUTOMATION_TYPE_UNSPECIFIED", "INSERTION_ORDER_AUTOMATION_TYPE_BUDGET", "INSERTION_ORDER_AUTOMATION_TYPE_NONE", "INSERTION_ORDER_AUTOMATION_TYPE_BID_BUDGET"]  # noqa: E501
        if automation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `automation_type` ({0}), must be one of {1}"
                .format(automation_type, allowed_values)
            )

        self._automation_type = automation_type

    @property
    def budget_segments(self):
        """Gets the budget_segments of this InsertionOrderBudget.

        Required. The list of budget segments. Use a budget segment to specify a specific budget for a given period of time an insertion order is running.

        :return: The budget_segments of this InsertionOrderBudget.
        :rtype: List[InsertionOrderBudgetSegment]
        """
        return self._budget_segments

    @budget_segments.setter
    def budget_segments(self, budget_segments):
        """Sets the budget_segments of this InsertionOrderBudget.

        Required. The list of budget segments. Use a budget segment to specify a specific budget for a given period of time an insertion order is running.

        :param budget_segments: The budget_segments of this InsertionOrderBudget.
        :type budget_segments: List[InsertionOrderBudgetSegment]
        """

        self._budget_segments = budget_segments

    @property
    def budget_unit(self):
        """Gets the budget_unit of this InsertionOrderBudget.

        Required. Immutable. The budget unit specifies whether the budget is currency based or impression based.

        :return: The budget_unit of this InsertionOrderBudget.
        :rtype: str
        """
        return self._budget_unit

    @budget_unit.setter
    def budget_unit(self, budget_unit):
        """Sets the budget_unit of this InsertionOrderBudget.

        Required. Immutable. The budget unit specifies whether the budget is currency based or impression based.

        :param budget_unit: The budget_unit of this InsertionOrderBudget.
        :type budget_unit: str
        """
        allowed_values = ["BUDGET_UNIT_UNSPECIFIED", "BUDGET_UNIT_CURRENCY", "BUDGET_UNIT_IMPRESSIONS"]  # noqa: E501
        if budget_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `budget_unit` ({0}), must be one of {1}"
                .format(budget_unit, allowed_values)
            )

        self._budget_unit = budget_unit
