# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScriptError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column: str=None, error_code: str=None, error_message: str=None, line: str=None):
        """ScriptError - a model defined in OpenAPI

        :param column: The column of this ScriptError.
        :param error_code: The error_code of this ScriptError.
        :param error_message: The error_message of this ScriptError.
        :param line: The line of this ScriptError.
        """
        self.openapi_types = {
            'column': str,
            'error_code': str,
            'error_message': str,
            'line': str
        }

        self.attribute_map = {
            'column': 'column',
            'error_code': 'errorCode',
            'error_message': 'errorMessage',
            'line': 'line'
        }

        self._column = column
        self._error_code = error_code
        self._error_message = error_message
        self._line = line

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScriptError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScriptError of this ScriptError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column(self):
        """Gets the column of this ScriptError.

        The column number in the script where the error was thrown.

        :return: The column of this ScriptError.
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this ScriptError.

        The column number in the script where the error was thrown.

        :param column: The column of this ScriptError.
        :type column: str
        """

        self._column = column

    @property
    def error_code(self):
        """Gets the error_code of this ScriptError.

        The type of error.

        :return: The error_code of this ScriptError.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ScriptError.

        The type of error.

        :param error_code: The error_code of this ScriptError.
        :type error_code: str
        """
        allowed_values = ["ERROR_CODE_UNSPECIFIED", "SYNTAX_ERROR", "DEPRECATED_SYNTAX", "INTERNAL_ERROR"]  # noqa: E501
        if error_code not in allowed_values:
            raise ValueError(
                "Invalid value for `error_code` ({0}), must be one of {1}"
                .format(error_code, allowed_values)
            )

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this ScriptError.

        The detailed error message.

        :return: The error_message of this ScriptError.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ScriptError.

        The detailed error message.

        :param error_message: The error_message of this ScriptError.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def line(self):
        """Gets the line of this ScriptError.

        The line number in the script where the error was thrown.

        :return: The line of this ScriptError.
        :rtype: str
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this ScriptError.

        The line number in the script where the error was thrown.

        :param line: The line of this ScriptError.
        :type line: str
        """

        self._line = line
