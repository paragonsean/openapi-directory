# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Consent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_personalization: str=None, ad_user_data: str=None):
        """Consent - a model defined in OpenAPI

        :param ad_personalization: The ad_personalization of this Consent.
        :param ad_user_data: The ad_user_data of this Consent.
        """
        self.openapi_types = {
            'ad_personalization': str,
            'ad_user_data': str
        }

        self.attribute_map = {
            'ad_personalization': 'adPersonalization',
            'ad_user_data': 'adUserData'
        }

        self._ad_personalization = ad_personalization
        self._ad_user_data = ad_user_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Consent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Consent of this Consent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_personalization(self):
        """Gets the ad_personalization of this Consent.

        Represents consent for ad personalization.

        :return: The ad_personalization of this Consent.
        :rtype: str
        """
        return self._ad_personalization

    @ad_personalization.setter
    def ad_personalization(self, ad_personalization):
        """Sets the ad_personalization of this Consent.

        Represents consent for ad personalization.

        :param ad_personalization: The ad_personalization of this Consent.
        :type ad_personalization: str
        """
        allowed_values = ["CONSENT_STATUS_UNSPECIFIED", "CONSENT_STATUS_GRANTED", "CONSENT_STATUS_DENIED"]  # noqa: E501
        if ad_personalization not in allowed_values:
            raise ValueError(
                "Invalid value for `ad_personalization` ({0}), must be one of {1}"
                .format(ad_personalization, allowed_values)
            )

        self._ad_personalization = ad_personalization

    @property
    def ad_user_data(self):
        """Gets the ad_user_data of this Consent.

        Represents consent for ad user data.

        :return: The ad_user_data of this Consent.
        :rtype: str
        """
        return self._ad_user_data

    @ad_user_data.setter
    def ad_user_data(self, ad_user_data):
        """Sets the ad_user_data of this Consent.

        Represents consent for ad user data.

        :param ad_user_data: The ad_user_data of this Consent.
        :type ad_user_data: str
        """
        allowed_values = ["CONSENT_STATUS_UNSPECIFIED", "CONSENT_STATUS_GRANTED", "CONSENT_STATUS_DENIED"]  # noqa: E501
        if ad_user_data not in allowed_values:
            raise ValueError(
                "Invalid value for `ad_user_data` ({0}), must be one of {1}"
                .format(ad_user_data, allowed_values)
            )

        self._ad_user_data = ad_user_data
