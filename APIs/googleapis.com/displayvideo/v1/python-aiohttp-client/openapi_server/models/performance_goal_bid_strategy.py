# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PerformanceGoalBidStrategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_bidding_algorithm_id: str=None, max_average_cpm_bid_amount_micros: str=None, performance_goal_amount_micros: str=None, performance_goal_type: str=None):
        """PerformanceGoalBidStrategy - a model defined in OpenAPI

        :param custom_bidding_algorithm_id: The custom_bidding_algorithm_id of this PerformanceGoalBidStrategy.
        :param max_average_cpm_bid_amount_micros: The max_average_cpm_bid_amount_micros of this PerformanceGoalBidStrategy.
        :param performance_goal_amount_micros: The performance_goal_amount_micros of this PerformanceGoalBidStrategy.
        :param performance_goal_type: The performance_goal_type of this PerformanceGoalBidStrategy.
        """
        self.openapi_types = {
            'custom_bidding_algorithm_id': str,
            'max_average_cpm_bid_amount_micros': str,
            'performance_goal_amount_micros': str,
            'performance_goal_type': str
        }

        self.attribute_map = {
            'custom_bidding_algorithm_id': 'customBiddingAlgorithmId',
            'max_average_cpm_bid_amount_micros': 'maxAverageCpmBidAmountMicros',
            'performance_goal_amount_micros': 'performanceGoalAmountMicros',
            'performance_goal_type': 'performanceGoalType'
        }

        self._custom_bidding_algorithm_id = custom_bidding_algorithm_id
        self._max_average_cpm_bid_amount_micros = max_average_cpm_bid_amount_micros
        self._performance_goal_amount_micros = performance_goal_amount_micros
        self._performance_goal_type = performance_goal_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerformanceGoalBidStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerformanceGoalBidStrategy of this PerformanceGoalBidStrategy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_bidding_algorithm_id(self):
        """Gets the custom_bidding_algorithm_id of this PerformanceGoalBidStrategy.

        The ID of the Custom Bidding Algorithm used by this strategy. Only applicable when performance_goal_type is set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`.

        :return: The custom_bidding_algorithm_id of this PerformanceGoalBidStrategy.
        :rtype: str
        """
        return self._custom_bidding_algorithm_id

    @custom_bidding_algorithm_id.setter
    def custom_bidding_algorithm_id(self, custom_bidding_algorithm_id):
        """Sets the custom_bidding_algorithm_id of this PerformanceGoalBidStrategy.

        The ID of the Custom Bidding Algorithm used by this strategy. Only applicable when performance_goal_type is set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`.

        :param custom_bidding_algorithm_id: The custom_bidding_algorithm_id of this PerformanceGoalBidStrategy.
        :type custom_bidding_algorithm_id: str
        """

        self._custom_bidding_algorithm_id = custom_bidding_algorithm_id

    @property
    def max_average_cpm_bid_amount_micros(self):
        """Gets the max_average_cpm_bid_amount_micros of this PerformanceGoalBidStrategy.

        The maximum average CPM that may be bid, in micros of the advertiser's currency. Must be greater than or equal to a billable unit of the given currency. Not applicable when performance_goal_type is set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`. For example, 1500000 represents 1.5 standard units of the currency.

        :return: The max_average_cpm_bid_amount_micros of this PerformanceGoalBidStrategy.
        :rtype: str
        """
        return self._max_average_cpm_bid_amount_micros

    @max_average_cpm_bid_amount_micros.setter
    def max_average_cpm_bid_amount_micros(self, max_average_cpm_bid_amount_micros):
        """Sets the max_average_cpm_bid_amount_micros of this PerformanceGoalBidStrategy.

        The maximum average CPM that may be bid, in micros of the advertiser's currency. Must be greater than or equal to a billable unit of the given currency. Not applicable when performance_goal_type is set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`. For example, 1500000 represents 1.5 standard units of the currency.

        :param max_average_cpm_bid_amount_micros: The max_average_cpm_bid_amount_micros of this PerformanceGoalBidStrategy.
        :type max_average_cpm_bid_amount_micros: str
        """

        self._max_average_cpm_bid_amount_micros = max_average_cpm_bid_amount_micros

    @property
    def performance_goal_amount_micros(self):
        """Gets the performance_goal_amount_micros of this PerformanceGoalBidStrategy.

        Required. The performance goal the bidding strategy will attempt to meet or beat, in micros of the advertiser's currency or in micro of the ROAS (Return On Advertising Spend) value which is also based on advertiser's currency. Must be greater than or equal to a billable unit of the given currency and smaller or equal to upper bounds. Each performance_goal_type has its upper bound: * when performance_goal_type is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA`, upper bound is 10000.00 USD. * when performance_goal_type is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC`, upper bound is 1000.00 USD. * when performance_goal_type is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`, upper bound is 1000.00 USD. * when performance_goal_type is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`, upper bound is 1000.00 and lower bound is 0.01. Example: If set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`, the bid price will be based on the probability that each available impression will be viewable. For example, if viewable CPM target is $2 and an impression is 40% likely to be viewable, the bid price will be $0.80 CPM (40% of $2). For example, 1500000 represents 1.5 standard units of the currency or ROAS value.

        :return: The performance_goal_amount_micros of this PerformanceGoalBidStrategy.
        :rtype: str
        """
        return self._performance_goal_amount_micros

    @performance_goal_amount_micros.setter
    def performance_goal_amount_micros(self, performance_goal_amount_micros):
        """Sets the performance_goal_amount_micros of this PerformanceGoalBidStrategy.

        Required. The performance goal the bidding strategy will attempt to meet or beat, in micros of the advertiser's currency or in micro of the ROAS (Return On Advertising Spend) value which is also based on advertiser's currency. Must be greater than or equal to a billable unit of the given currency and smaller or equal to upper bounds. Each performance_goal_type has its upper bound: * when performance_goal_type is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA`, upper bound is 10000.00 USD. * when performance_goal_type is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC`, upper bound is 1000.00 USD. * when performance_goal_type is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`, upper bound is 1000.00 USD. * when performance_goal_type is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`, upper bound is 1000.00 and lower bound is 0.01. Example: If set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`, the bid price will be based on the probability that each available impression will be viewable. For example, if viewable CPM target is $2 and an impression is 40% likely to be viewable, the bid price will be $0.80 CPM (40% of $2). For example, 1500000 represents 1.5 standard units of the currency or ROAS value.

        :param performance_goal_amount_micros: The performance_goal_amount_micros of this PerformanceGoalBidStrategy.
        :type performance_goal_amount_micros: str
        """

        self._performance_goal_amount_micros = performance_goal_amount_micros

    @property
    def performance_goal_type(self):
        """Gets the performance_goal_type of this PerformanceGoalBidStrategy.

        Required. The type of the performance goal that the bidding strategy will try to meet or beat. For line item level usage, the value must be one of: * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA` * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC` * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM` * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`.

        :return: The performance_goal_type of this PerformanceGoalBidStrategy.
        :rtype: str
        """
        return self._performance_goal_type

    @performance_goal_type.setter
    def performance_goal_type(self, performance_goal_type):
        """Sets the performance_goal_type of this PerformanceGoalBidStrategy.

        Required. The type of the performance goal that the bidding strategy will try to meet or beat. For line item level usage, the value must be one of: * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA` * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC` * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM` * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`.

        :param performance_goal_type: The performance_goal_type of this PerformanceGoalBidStrategy.
        :type performance_goal_type: str
        """
        allowed_values = ["BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED", "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA", "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC", "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM", "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO", "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CIVA", "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_IVO_TEN", "BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_AV_VIEWED"]  # noqa: E501
        if performance_goal_type not in allowed_values:
            raise ValueError(
                "Invalid value for `performance_goal_type` ({0}), must be one of {1}"
                .format(performance_goal_type, allowed_values)
            )

        self._performance_goal_type = performance_goal_type
