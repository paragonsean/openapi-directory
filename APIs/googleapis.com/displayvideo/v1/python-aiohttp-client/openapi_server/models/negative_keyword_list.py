# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NegativeKeywordList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertiser_id: str=None, display_name: str=None, name: str=None, negative_keyword_list_id: str=None, targeted_line_item_count: str=None):
        """NegativeKeywordList - a model defined in OpenAPI

        :param advertiser_id: The advertiser_id of this NegativeKeywordList.
        :param display_name: The display_name of this NegativeKeywordList.
        :param name: The name of this NegativeKeywordList.
        :param negative_keyword_list_id: The negative_keyword_list_id of this NegativeKeywordList.
        :param targeted_line_item_count: The targeted_line_item_count of this NegativeKeywordList.
        """
        self.openapi_types = {
            'advertiser_id': str,
            'display_name': str,
            'name': str,
            'negative_keyword_list_id': str,
            'targeted_line_item_count': str
        }

        self.attribute_map = {
            'advertiser_id': 'advertiserId',
            'display_name': 'displayName',
            'name': 'name',
            'negative_keyword_list_id': 'negativeKeywordListId',
            'targeted_line_item_count': 'targetedLineItemCount'
        }

        self._advertiser_id = advertiser_id
        self._display_name = display_name
        self._name = name
        self._negative_keyword_list_id = negative_keyword_list_id
        self._targeted_line_item_count = targeted_line_item_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NegativeKeywordList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NegativeKeywordList of this NegativeKeywordList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this NegativeKeywordList.

        Output only. The unique ID of the advertiser the negative keyword list belongs to.

        :return: The advertiser_id of this NegativeKeywordList.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this NegativeKeywordList.

        Output only. The unique ID of the advertiser the negative keyword list belongs to.

        :param advertiser_id: The advertiser_id of this NegativeKeywordList.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def display_name(self):
        """Gets the display_name of this NegativeKeywordList.

        Required. The display name of the negative keyword list. Must be UTF-8 encoded with a maximum size of 255 bytes.

        :return: The display_name of this NegativeKeywordList.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this NegativeKeywordList.

        Required. The display name of the negative keyword list. Must be UTF-8 encoded with a maximum size of 255 bytes.

        :param display_name: The display_name of this NegativeKeywordList.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this NegativeKeywordList.

        Output only. The resource name of the negative keyword list.

        :return: The name of this NegativeKeywordList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NegativeKeywordList.

        Output only. The resource name of the negative keyword list.

        :param name: The name of this NegativeKeywordList.
        :type name: str
        """

        self._name = name

    @property
    def negative_keyword_list_id(self):
        """Gets the negative_keyword_list_id of this NegativeKeywordList.

        Output only. The unique ID of the negative keyword list. Assigned by the system.

        :return: The negative_keyword_list_id of this NegativeKeywordList.
        :rtype: str
        """
        return self._negative_keyword_list_id

    @negative_keyword_list_id.setter
    def negative_keyword_list_id(self, negative_keyword_list_id):
        """Sets the negative_keyword_list_id of this NegativeKeywordList.

        Output only. The unique ID of the negative keyword list. Assigned by the system.

        :param negative_keyword_list_id: The negative_keyword_list_id of this NegativeKeywordList.
        :type negative_keyword_list_id: str
        """

        self._negative_keyword_list_id = negative_keyword_list_id

    @property
    def targeted_line_item_count(self):
        """Gets the targeted_line_item_count of this NegativeKeywordList.

        Output only. Number of line items that are directly targeting this negative keyword list.

        :return: The targeted_line_item_count of this NegativeKeywordList.
        :rtype: str
        """
        return self._targeted_line_item_count

    @targeted_line_item_count.setter
    def targeted_line_item_count(self, targeted_line_item_count):
        """Sets the targeted_line_item_count of this NegativeKeywordList.

        Output only. Number of line items that are directly targeting this negative keyword list.

        :param targeted_line_item_count: The targeted_line_item_count of this NegativeKeywordList.
        :type targeted_line_item_count: str
        """

        self._targeted_line_item_count = targeted_line_item_count
