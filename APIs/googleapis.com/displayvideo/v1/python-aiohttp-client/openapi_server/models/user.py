# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assigned_user_role import AssignedUserRole
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assigned_user_roles: List[AssignedUserRole]=None, display_name: str=None, email: str=None, last_login_time: str=None, name: str=None, user_id: str=None):
        """User - a model defined in OpenAPI

        :param assigned_user_roles: The assigned_user_roles of this User.
        :param display_name: The display_name of this User.
        :param email: The email of this User.
        :param last_login_time: The last_login_time of this User.
        :param name: The name of this User.
        :param user_id: The user_id of this User.
        """
        self.openapi_types = {
            'assigned_user_roles': List[AssignedUserRole],
            'display_name': str,
            'email': str,
            'last_login_time': str,
            'name': str,
            'user_id': str
        }

        self.attribute_map = {
            'assigned_user_roles': 'assignedUserRoles',
            'display_name': 'displayName',
            'email': 'email',
            'last_login_time': 'lastLoginTime',
            'name': 'name',
            'user_id': 'userId'
        }

        self._assigned_user_roles = assigned_user_roles
        self._display_name = display_name
        self._email = email
        self._last_login_time = last_login_time
        self._name = name
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assigned_user_roles(self):
        """Gets the assigned_user_roles of this User.

        The assigned user roles. Required in CreateUser. Output only in UpdateUser. Can only be updated through BulkEditAssignedUserRoles.

        :return: The assigned_user_roles of this User.
        :rtype: List[AssignedUserRole]
        """
        return self._assigned_user_roles

    @assigned_user_roles.setter
    def assigned_user_roles(self, assigned_user_roles):
        """Sets the assigned_user_roles of this User.

        The assigned user roles. Required in CreateUser. Output only in UpdateUser. Can only be updated through BulkEditAssignedUserRoles.

        :param assigned_user_roles: The assigned_user_roles of this User.
        :type assigned_user_roles: List[AssignedUserRole]
        """

        self._assigned_user_roles = assigned_user_roles

    @property
    def display_name(self):
        """Gets the display_name of this User.

        Required. The display name of the user. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.

        Required. The display name of the user. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :param display_name: The display_name of this User.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this User.

        Required. Immutable. The email address used to identify the user.

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        Required. Immutable. The email address used to identify the user.

        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def last_login_time(self):
        """Gets the last_login_time of this User.

        Output only. The timestamp when the user last logged in DV360 UI.

        :return: The last_login_time of this User.
        :rtype: str
        """
        return self._last_login_time

    @last_login_time.setter
    def last_login_time(self, last_login_time):
        """Sets the last_login_time of this User.

        Output only. The timestamp when the user last logged in DV360 UI.

        :param last_login_time: The last_login_time of this User.
        :type last_login_time: str
        """

        self._last_login_time = last_login_time

    @property
    def name(self):
        """Gets the name of this User.

        Output only. The resource name of the user.

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        Output only. The resource name of the user.

        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def user_id(self):
        """Gets the user_id of this User.

        Output only. The unique ID of the user. Assigned by the system.

        :return: The user_id of this User.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.

        Output only. The unique ID of the user. Assigned by the system.

        :param user_id: The user_id of this User.
        :type user_id: str
        """

        self._user_id = user_id
