# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssignedUserRole(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertiser_id: str=None, assigned_user_role_id: str=None, partner_id: str=None, user_role: str=None):
        """AssignedUserRole - a model defined in OpenAPI

        :param advertiser_id: The advertiser_id of this AssignedUserRole.
        :param assigned_user_role_id: The assigned_user_role_id of this AssignedUserRole.
        :param partner_id: The partner_id of this AssignedUserRole.
        :param user_role: The user_role of this AssignedUserRole.
        """
        self.openapi_types = {
            'advertiser_id': str,
            'assigned_user_role_id': str,
            'partner_id': str,
            'user_role': str
        }

        self.attribute_map = {
            'advertiser_id': 'advertiserId',
            'assigned_user_role_id': 'assignedUserRoleId',
            'partner_id': 'partnerId',
            'user_role': 'userRole'
        }

        self._advertiser_id = advertiser_id
        self._assigned_user_role_id = assigned_user_role_id
        self._partner_id = partner_id
        self._user_role = user_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssignedUserRole':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssignedUserRole of this AssignedUserRole.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this AssignedUserRole.

        The ID of the advertiser that the assigend user role applies to.

        :return: The advertiser_id of this AssignedUserRole.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this AssignedUserRole.

        The ID of the advertiser that the assigend user role applies to.

        :param advertiser_id: The advertiser_id of this AssignedUserRole.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def assigned_user_role_id(self):
        """Gets the assigned_user_role_id of this AssignedUserRole.

        Output only. The ID of the assigned user role.

        :return: The assigned_user_role_id of this AssignedUserRole.
        :rtype: str
        """
        return self._assigned_user_role_id

    @assigned_user_role_id.setter
    def assigned_user_role_id(self, assigned_user_role_id):
        """Sets the assigned_user_role_id of this AssignedUserRole.

        Output only. The ID of the assigned user role.

        :param assigned_user_role_id: The assigned_user_role_id of this AssignedUserRole.
        :type assigned_user_role_id: str
        """

        self._assigned_user_role_id = assigned_user_role_id

    @property
    def partner_id(self):
        """Gets the partner_id of this AssignedUserRole.

        The ID of the partner that the assigned user role applies to.

        :return: The partner_id of this AssignedUserRole.
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this AssignedUserRole.

        The ID of the partner that the assigned user role applies to.

        :param partner_id: The partner_id of this AssignedUserRole.
        :type partner_id: str
        """

        self._partner_id = partner_id

    @property
    def user_role(self):
        """Gets the user_role of this AssignedUserRole.

        Required. The user role to assign to a user for the entity.

        :return: The user_role of this AssignedUserRole.
        :rtype: str
        """
        return self._user_role

    @user_role.setter
    def user_role(self, user_role):
        """Sets the user_role of this AssignedUserRole.

        Required. The user role to assign to a user for the entity.

        :param user_role: The user_role of this AssignedUserRole.
        :type user_role: str
        """
        allowed_values = ["USER_ROLE_UNSPECIFIED", "ADMIN", "ADMIN_PARTNER_CLIENT", "STANDARD", "STANDARD_PLANNER", "STANDARD_PLANNER_LIMITED", "STANDARD_PARTNER_CLIENT", "READ_ONLY", "REPORTING_ONLY", "LIMITED_REPORTING_ONLY", "CREATIVE", "CREATIVE_ADMIN"]  # noqa: E501
        if user_role not in allowed_values:
            raise ValueError(
                "Invalid value for `user_role` ({0}), must be one of {1}"
                .format(user_role, allowed_values)
            )

        self._user_role = user_role
