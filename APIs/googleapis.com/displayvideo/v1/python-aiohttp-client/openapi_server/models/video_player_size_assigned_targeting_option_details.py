# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoPlayerSizeAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, targeting_option_id: str=None, video_player_size: str=None):
        """VideoPlayerSizeAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param targeting_option_id: The targeting_option_id of this VideoPlayerSizeAssignedTargetingOptionDetails.
        :param video_player_size: The video_player_size of this VideoPlayerSizeAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'targeting_option_id': str,
            'video_player_size': str
        }

        self.attribute_map = {
            'targeting_option_id': 'targetingOptionId',
            'video_player_size': 'videoPlayerSize'
        }

        self._targeting_option_id = targeting_option_id
        self._video_player_size = video_player_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoPlayerSizeAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoPlayerSizeAssignedTargetingOptionDetails of this VideoPlayerSizeAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def targeting_option_id(self):
        """Gets the targeting_option_id of this VideoPlayerSizeAssignedTargetingOptionDetails.

        Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_VIDEO_PLAYER_SIZE`.

        :return: The targeting_option_id of this VideoPlayerSizeAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._targeting_option_id

    @targeting_option_id.setter
    def targeting_option_id(self, targeting_option_id):
        """Sets the targeting_option_id of this VideoPlayerSizeAssignedTargetingOptionDetails.

        Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_VIDEO_PLAYER_SIZE`.

        :param targeting_option_id: The targeting_option_id of this VideoPlayerSizeAssignedTargetingOptionDetails.
        :type targeting_option_id: str
        """

        self._targeting_option_id = targeting_option_id

    @property
    def video_player_size(self):
        """Gets the video_player_size of this VideoPlayerSizeAssignedTargetingOptionDetails.

        Required. The video player size.

        :return: The video_player_size of this VideoPlayerSizeAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._video_player_size

    @video_player_size.setter
    def video_player_size(self, video_player_size):
        """Sets the video_player_size of this VideoPlayerSizeAssignedTargetingOptionDetails.

        Required. The video player size.

        :param video_player_size: The video_player_size of this VideoPlayerSizeAssignedTargetingOptionDetails.
        :type video_player_size: str
        """
        allowed_values = ["VIDEO_PLAYER_SIZE_UNSPECIFIED", "VIDEO_PLAYER_SIZE_SMALL", "VIDEO_PLAYER_SIZE_LARGE", "VIDEO_PLAYER_SIZE_HD", "VIDEO_PLAYER_SIZE_UNKNOWN"]  # noqa: E501
        if video_player_size not in allowed_values:
            raise ValueError(
                "Invalid value for `video_player_size` ({0}), must be one of {1}"
                .format(video_player_size, allowed_values)
            )

        self._video_player_size = video_player_size
