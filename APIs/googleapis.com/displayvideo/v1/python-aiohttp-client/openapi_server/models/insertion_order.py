# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bidding_strategy import BiddingStrategy
from openapi_server.models.frequency_cap import FrequencyCap
from openapi_server.models.insertion_order_budget import InsertionOrderBudget
from openapi_server.models.integration_details import IntegrationDetails
from openapi_server.models.pacing import Pacing
from openapi_server.models.partner_cost import PartnerCost
from openapi_server.models.performance_goal import PerformanceGoal
from openapi_server import util


class InsertionOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertiser_id: str=None, bid_strategy: BiddingStrategy=None, billable_outcome: str=None, budget: InsertionOrderBudget=None, campaign_id: str=None, display_name: str=None, entity_status: str=None, frequency_cap: FrequencyCap=None, insertion_order_id: str=None, insertion_order_type: str=None, integration_details: IntegrationDetails=None, name: str=None, pacing: Pacing=None, partner_costs: List[PartnerCost]=None, performance_goal: PerformanceGoal=None, reservation_type: str=None, update_time: str=None):
        """InsertionOrder - a model defined in OpenAPI

        :param advertiser_id: The advertiser_id of this InsertionOrder.
        :param bid_strategy: The bid_strategy of this InsertionOrder.
        :param billable_outcome: The billable_outcome of this InsertionOrder.
        :param budget: The budget of this InsertionOrder.
        :param campaign_id: The campaign_id of this InsertionOrder.
        :param display_name: The display_name of this InsertionOrder.
        :param entity_status: The entity_status of this InsertionOrder.
        :param frequency_cap: The frequency_cap of this InsertionOrder.
        :param insertion_order_id: The insertion_order_id of this InsertionOrder.
        :param insertion_order_type: The insertion_order_type of this InsertionOrder.
        :param integration_details: The integration_details of this InsertionOrder.
        :param name: The name of this InsertionOrder.
        :param pacing: The pacing of this InsertionOrder.
        :param partner_costs: The partner_costs of this InsertionOrder.
        :param performance_goal: The performance_goal of this InsertionOrder.
        :param reservation_type: The reservation_type of this InsertionOrder.
        :param update_time: The update_time of this InsertionOrder.
        """
        self.openapi_types = {
            'advertiser_id': str,
            'bid_strategy': BiddingStrategy,
            'billable_outcome': str,
            'budget': InsertionOrderBudget,
            'campaign_id': str,
            'display_name': str,
            'entity_status': str,
            'frequency_cap': FrequencyCap,
            'insertion_order_id': str,
            'insertion_order_type': str,
            'integration_details': IntegrationDetails,
            'name': str,
            'pacing': Pacing,
            'partner_costs': List[PartnerCost],
            'performance_goal': PerformanceGoal,
            'reservation_type': str,
            'update_time': str
        }

        self.attribute_map = {
            'advertiser_id': 'advertiserId',
            'bid_strategy': 'bidStrategy',
            'billable_outcome': 'billableOutcome',
            'budget': 'budget',
            'campaign_id': 'campaignId',
            'display_name': 'displayName',
            'entity_status': 'entityStatus',
            'frequency_cap': 'frequencyCap',
            'insertion_order_id': 'insertionOrderId',
            'insertion_order_type': 'insertionOrderType',
            'integration_details': 'integrationDetails',
            'name': 'name',
            'pacing': 'pacing',
            'partner_costs': 'partnerCosts',
            'performance_goal': 'performanceGoal',
            'reservation_type': 'reservationType',
            'update_time': 'updateTime'
        }

        self._advertiser_id = advertiser_id
        self._bid_strategy = bid_strategy
        self._billable_outcome = billable_outcome
        self._budget = budget
        self._campaign_id = campaign_id
        self._display_name = display_name
        self._entity_status = entity_status
        self._frequency_cap = frequency_cap
        self._insertion_order_id = insertion_order_id
        self._insertion_order_type = insertion_order_type
        self._integration_details = integration_details
        self._name = name
        self._pacing = pacing
        self._partner_costs = partner_costs
        self._performance_goal = performance_goal
        self._reservation_type = reservation_type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsertionOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InsertionOrder of this InsertionOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this InsertionOrder.

        Output only. The unique ID of the advertiser the insertion order belongs to.

        :return: The advertiser_id of this InsertionOrder.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this InsertionOrder.

        Output only. The unique ID of the advertiser the insertion order belongs to.

        :param advertiser_id: The advertiser_id of this InsertionOrder.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def bid_strategy(self):
        """Gets the bid_strategy of this InsertionOrder.


        :return: The bid_strategy of this InsertionOrder.
        :rtype: BiddingStrategy
        """
        return self._bid_strategy

    @bid_strategy.setter
    def bid_strategy(self, bid_strategy):
        """Sets the bid_strategy of this InsertionOrder.


        :param bid_strategy: The bid_strategy of this InsertionOrder.
        :type bid_strategy: BiddingStrategy
        """

        self._bid_strategy = bid_strategy

    @property
    def billable_outcome(self):
        """Gets the billable_outcome of this InsertionOrder.

        Immutable. The billable outcome of the insertion order. Outcome based buying is deprecated. `BILLABLE_OUTCOME_PAY_PER_IMPRESSION` is the only valid value.

        :return: The billable_outcome of this InsertionOrder.
        :rtype: str
        """
        return self._billable_outcome

    @billable_outcome.setter
    def billable_outcome(self, billable_outcome):
        """Sets the billable_outcome of this InsertionOrder.

        Immutable. The billable outcome of the insertion order. Outcome based buying is deprecated. `BILLABLE_OUTCOME_PAY_PER_IMPRESSION` is the only valid value.

        :param billable_outcome: The billable_outcome of this InsertionOrder.
        :type billable_outcome: str
        """
        allowed_values = ["BILLABLE_OUTCOME_UNSPECIFIED", "BILLABLE_OUTCOME_PAY_PER_IMPRESSION", "BILLABLE_OUTCOME_PAY_PER_CLICK", "BILLABLE_OUTCOME_PAY_PER_VIEWABLE_IMPRESSION"]  # noqa: E501
        if billable_outcome not in allowed_values:
            raise ValueError(
                "Invalid value for `billable_outcome` ({0}), must be one of {1}"
                .format(billable_outcome, allowed_values)
            )

        self._billable_outcome = billable_outcome

    @property
    def budget(self):
        """Gets the budget of this InsertionOrder.


        :return: The budget of this InsertionOrder.
        :rtype: InsertionOrderBudget
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this InsertionOrder.


        :param budget: The budget of this InsertionOrder.
        :type budget: InsertionOrderBudget
        """

        self._budget = budget

    @property
    def campaign_id(self):
        """Gets the campaign_id of this InsertionOrder.

        Required. Immutable. The unique ID of the campaign that the insertion order belongs to.

        :return: The campaign_id of this InsertionOrder.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this InsertionOrder.

        Required. Immutable. The unique ID of the campaign that the insertion order belongs to.

        :param campaign_id: The campaign_id of this InsertionOrder.
        :type campaign_id: str
        """

        self._campaign_id = campaign_id

    @property
    def display_name(self):
        """Gets the display_name of this InsertionOrder.

        Required. The display name of the insertion order. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :return: The display_name of this InsertionOrder.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InsertionOrder.

        Required. The display name of the insertion order. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :param display_name: The display_name of this InsertionOrder.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def entity_status(self):
        """Gets the entity_status of this InsertionOrder.

        Required. Controls whether or not the insertion order can spend its budget and bid on inventory. * For CreateInsertionOrder method, only `ENTITY_STATUS_DRAFT` is allowed. To activate an insertion order, use UpdateInsertionOrder method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * An insertion order cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other status. * An insertion order cannot be set to `ENTITY_STATUS_ACTIVE` if its parent campaign is not active.

        :return: The entity_status of this InsertionOrder.
        :rtype: str
        """
        return self._entity_status

    @entity_status.setter
    def entity_status(self, entity_status):
        """Sets the entity_status of this InsertionOrder.

        Required. Controls whether or not the insertion order can spend its budget and bid on inventory. * For CreateInsertionOrder method, only `ENTITY_STATUS_DRAFT` is allowed. To activate an insertion order, use UpdateInsertionOrder method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * An insertion order cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other status. * An insertion order cannot be set to `ENTITY_STATUS_ACTIVE` if its parent campaign is not active.

        :param entity_status: The entity_status of this InsertionOrder.
        :type entity_status: str
        """
        allowed_values = ["ENTITY_STATUS_UNSPECIFIED", "ENTITY_STATUS_ACTIVE", "ENTITY_STATUS_ARCHIVED", "ENTITY_STATUS_DRAFT", "ENTITY_STATUS_PAUSED", "ENTITY_STATUS_SCHEDULED_FOR_DELETION"]  # noqa: E501
        if entity_status not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_status` ({0}), must be one of {1}"
                .format(entity_status, allowed_values)
            )

        self._entity_status = entity_status

    @property
    def frequency_cap(self):
        """Gets the frequency_cap of this InsertionOrder.


        :return: The frequency_cap of this InsertionOrder.
        :rtype: FrequencyCap
        """
        return self._frequency_cap

    @frequency_cap.setter
    def frequency_cap(self, frequency_cap):
        """Sets the frequency_cap of this InsertionOrder.


        :param frequency_cap: The frequency_cap of this InsertionOrder.
        :type frequency_cap: FrequencyCap
        """

        self._frequency_cap = frequency_cap

    @property
    def insertion_order_id(self):
        """Gets the insertion_order_id of this InsertionOrder.

        Output only. The unique ID of the insertion order. Assigned by the system.

        :return: The insertion_order_id of this InsertionOrder.
        :rtype: str
        """
        return self._insertion_order_id

    @insertion_order_id.setter
    def insertion_order_id(self, insertion_order_id):
        """Sets the insertion_order_id of this InsertionOrder.

        Output only. The unique ID of the insertion order. Assigned by the system.

        :param insertion_order_id: The insertion_order_id of this InsertionOrder.
        :type insertion_order_id: str
        """

        self._insertion_order_id = insertion_order_id

    @property
    def insertion_order_type(self):
        """Gets the insertion_order_type of this InsertionOrder.

        The type of insertion order. If this field is unspecified in creation, the value defaults to `RTB`.

        :return: The insertion_order_type of this InsertionOrder.
        :rtype: str
        """
        return self._insertion_order_type

    @insertion_order_type.setter
    def insertion_order_type(self, insertion_order_type):
        """Sets the insertion_order_type of this InsertionOrder.

        The type of insertion order. If this field is unspecified in creation, the value defaults to `RTB`.

        :param insertion_order_type: The insertion_order_type of this InsertionOrder.
        :type insertion_order_type: str
        """
        allowed_values = ["INSERTION_ORDER_TYPE_UNSPECIFIED", "RTB", "OVER_THE_TOP"]  # noqa: E501
        if insertion_order_type not in allowed_values:
            raise ValueError(
                "Invalid value for `insertion_order_type` ({0}), must be one of {1}"
                .format(insertion_order_type, allowed_values)
            )

        self._insertion_order_type = insertion_order_type

    @property
    def integration_details(self):
        """Gets the integration_details of this InsertionOrder.


        :return: The integration_details of this InsertionOrder.
        :rtype: IntegrationDetails
        """
        return self._integration_details

    @integration_details.setter
    def integration_details(self, integration_details):
        """Sets the integration_details of this InsertionOrder.


        :param integration_details: The integration_details of this InsertionOrder.
        :type integration_details: IntegrationDetails
        """

        self._integration_details = integration_details

    @property
    def name(self):
        """Gets the name of this InsertionOrder.

        Output only. The resource name of the insertion order.

        :return: The name of this InsertionOrder.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InsertionOrder.

        Output only. The resource name of the insertion order.

        :param name: The name of this InsertionOrder.
        :type name: str
        """

        self._name = name

    @property
    def pacing(self):
        """Gets the pacing of this InsertionOrder.


        :return: The pacing of this InsertionOrder.
        :rtype: Pacing
        """
        return self._pacing

    @pacing.setter
    def pacing(self, pacing):
        """Sets the pacing of this InsertionOrder.


        :param pacing: The pacing of this InsertionOrder.
        :type pacing: Pacing
        """

        self._pacing = pacing

    @property
    def partner_costs(self):
        """Gets the partner_costs of this InsertionOrder.

        The partner costs associated with the insertion order. If absent or empty in CreateInsertionOrder method, the newly created insertion order will inherit partner costs from the partner settings.

        :return: The partner_costs of this InsertionOrder.
        :rtype: List[PartnerCost]
        """
        return self._partner_costs

    @partner_costs.setter
    def partner_costs(self, partner_costs):
        """Sets the partner_costs of this InsertionOrder.

        The partner costs associated with the insertion order. If absent or empty in CreateInsertionOrder method, the newly created insertion order will inherit partner costs from the partner settings.

        :param partner_costs: The partner_costs of this InsertionOrder.
        :type partner_costs: List[PartnerCost]
        """

        self._partner_costs = partner_costs

    @property
    def performance_goal(self):
        """Gets the performance_goal of this InsertionOrder.


        :return: The performance_goal of this InsertionOrder.
        :rtype: PerformanceGoal
        """
        return self._performance_goal

    @performance_goal.setter
    def performance_goal(self, performance_goal):
        """Sets the performance_goal of this InsertionOrder.


        :param performance_goal: The performance_goal of this InsertionOrder.
        :type performance_goal: PerformanceGoal
        """

        self._performance_goal = performance_goal

    @property
    def reservation_type(self):
        """Gets the reservation_type of this InsertionOrder.

        Output only. The reservation type of the insertion order.

        :return: The reservation_type of this InsertionOrder.
        :rtype: str
        """
        return self._reservation_type

    @reservation_type.setter
    def reservation_type(self, reservation_type):
        """Sets the reservation_type of this InsertionOrder.

        Output only. The reservation type of the insertion order.

        :param reservation_type: The reservation_type of this InsertionOrder.
        :type reservation_type: str
        """
        allowed_values = ["RESERVATION_TYPE_UNSPECIFIED", "RESERVATION_TYPE_NOT_GUARANTEED", "RESERVATION_TYPE_PROGRAMMATIC_GUARANTEED", "RESERVATION_TYPE_TAG_GUARANTEED"]  # noqa: E501
        if reservation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `reservation_type` ({0}), must be one of {1}"
                .format(reservation_type, allowed_values)
            )

        self._reservation_type = reservation_type

    @property
    def update_time(self):
        """Gets the update_time of this InsertionOrder.

        Output only. The timestamp when the insertion order was last updated. Assigned by the system.

        :return: The update_time of this InsertionOrder.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this InsertionOrder.

        Output only. The timestamp when the insertion order was last updated. Assigned by the system.

        :param update_time: The update_time of this InsertionOrder.
        :type update_time: str
        """

        self._update_time = update_time
