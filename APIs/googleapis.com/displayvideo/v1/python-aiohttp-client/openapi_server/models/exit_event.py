# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExitEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, reporting_name: str=None, type: str=None, url: str=None):
        """ExitEvent - a model defined in OpenAPI

        :param name: The name of this ExitEvent.
        :param reporting_name: The reporting_name of this ExitEvent.
        :param type: The type of this ExitEvent.
        :param url: The url of this ExitEvent.
        """
        self.openapi_types = {
            'name': str,
            'reporting_name': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'name': 'name',
            'reporting_name': 'reportingName',
            'type': 'type',
            'url': 'url'
        }

        self._name = name
        self._reporting_name = reporting_name
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExitEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExitEvent of this ExitEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ExitEvent.

        The name of the click tag of the exit event. The name must be unique within one creative. Leave it empty or unset for creatives containing image assets only.

        :return: The name of this ExitEvent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExitEvent.

        The name of the click tag of the exit event. The name must be unique within one creative. Leave it empty or unset for creatives containing image assets only.

        :param name: The name of this ExitEvent.
        :type name: str
        """

        self._name = name

    @property
    def reporting_name(self):
        """Gets the reporting_name of this ExitEvent.

        The name used to identify this event in reports. Leave it empty or unset for creatives containing image assets only.

        :return: The reporting_name of this ExitEvent.
        :rtype: str
        """
        return self._reporting_name

    @reporting_name.setter
    def reporting_name(self, reporting_name):
        """Sets the reporting_name of this ExitEvent.

        The name used to identify this event in reports. Leave it empty or unset for creatives containing image assets only.

        :param reporting_name: The reporting_name of this ExitEvent.
        :type reporting_name: str
        """

        self._reporting_name = reporting_name

    @property
    def type(self):
        """Gets the type of this ExitEvent.

        Required. The type of the exit event.

        :return: The type of this ExitEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExitEvent.

        Required. The type of the exit event.

        :param type: The type of this ExitEvent.
        :type type: str
        """
        allowed_values = ["EXIT_EVENT_TYPE_UNSPECIFIED", "EXIT_EVENT_TYPE_DEFAULT", "EXIT_EVENT_TYPE_BACKUP"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this ExitEvent.

        Required. The click through URL of the exit event. This is required when type is: * `EXIT_EVENT_TYPE_DEFAULT` * `EXIT_EVENT_TYPE_BACKUP`

        :return: The url of this ExitEvent.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ExitEvent.

        Required. The click through URL of the exit event. This is required when type is: * `EXIT_EVENT_TYPE_DEFAULT` * `EXIT_EVENT_TYPE_BACKUP`

        :param url: The url of this ExitEvent.
        :type url: str
        """

        self._url = url
