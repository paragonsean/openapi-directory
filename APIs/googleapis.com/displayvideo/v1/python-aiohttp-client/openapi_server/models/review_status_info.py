# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exchange_review_status import ExchangeReviewStatus
from openapi_server.models.publisher_review_status import PublisherReviewStatus
from openapi_server import util


class ReviewStatusInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approval_status: str=None, content_and_policy_review_status: str=None, creative_and_landing_page_review_status: str=None, exchange_review_statuses: List[ExchangeReviewStatus]=None, publisher_review_statuses: List[PublisherReviewStatus]=None):
        """ReviewStatusInfo - a model defined in OpenAPI

        :param approval_status: The approval_status of this ReviewStatusInfo.
        :param content_and_policy_review_status: The content_and_policy_review_status of this ReviewStatusInfo.
        :param creative_and_landing_page_review_status: The creative_and_landing_page_review_status of this ReviewStatusInfo.
        :param exchange_review_statuses: The exchange_review_statuses of this ReviewStatusInfo.
        :param publisher_review_statuses: The publisher_review_statuses of this ReviewStatusInfo.
        """
        self.openapi_types = {
            'approval_status': str,
            'content_and_policy_review_status': str,
            'creative_and_landing_page_review_status': str,
            'exchange_review_statuses': List[ExchangeReviewStatus],
            'publisher_review_statuses': List[PublisherReviewStatus]
        }

        self.attribute_map = {
            'approval_status': 'approvalStatus',
            'content_and_policy_review_status': 'contentAndPolicyReviewStatus',
            'creative_and_landing_page_review_status': 'creativeAndLandingPageReviewStatus',
            'exchange_review_statuses': 'exchangeReviewStatuses',
            'publisher_review_statuses': 'publisherReviewStatuses'
        }

        self._approval_status = approval_status
        self._content_and_policy_review_status = content_and_policy_review_status
        self._creative_and_landing_page_review_status = creative_and_landing_page_review_status
        self._exchange_review_statuses = exchange_review_statuses
        self._publisher_review_statuses = publisher_review_statuses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReviewStatusInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReviewStatusInfo of this ReviewStatusInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approval_status(self):
        """Gets the approval_status of this ReviewStatusInfo.

        Represents the basic approval needed for a creative to begin serving. Summary of creative_and_landing_page_review_status and content_and_policy_review_status.

        :return: The approval_status of this ReviewStatusInfo.
        :rtype: str
        """
        return self._approval_status

    @approval_status.setter
    def approval_status(self, approval_status):
        """Sets the approval_status of this ReviewStatusInfo.

        Represents the basic approval needed for a creative to begin serving. Summary of creative_and_landing_page_review_status and content_and_policy_review_status.

        :param approval_status: The approval_status of this ReviewStatusInfo.
        :type approval_status: str
        """
        allowed_values = ["APPROVAL_STATUS_UNSPECIFIED", "APPROVAL_STATUS_PENDING_NOT_SERVABLE", "APPROVAL_STATUS_PENDING_SERVABLE", "APPROVAL_STATUS_APPROVED_SERVABLE", "APPROVAL_STATUS_REJECTED_NOT_SERVABLE"]  # noqa: E501
        if approval_status not in allowed_values:
            raise ValueError(
                "Invalid value for `approval_status` ({0}), must be one of {1}"
                .format(approval_status, allowed_values)
            )

        self._approval_status = approval_status

    @property
    def content_and_policy_review_status(self):
        """Gets the content_and_policy_review_status of this ReviewStatusInfo.

        Content and policy review status for the creative.

        :return: The content_and_policy_review_status of this ReviewStatusInfo.
        :rtype: str
        """
        return self._content_and_policy_review_status

    @content_and_policy_review_status.setter
    def content_and_policy_review_status(self, content_and_policy_review_status):
        """Sets the content_and_policy_review_status of this ReviewStatusInfo.

        Content and policy review status for the creative.

        :param content_and_policy_review_status: The content_and_policy_review_status of this ReviewStatusInfo.
        :type content_and_policy_review_status: str
        """
        allowed_values = ["REVIEW_STATUS_UNSPECIFIED", "REVIEW_STATUS_APPROVED", "REVIEW_STATUS_REJECTED", "REVIEW_STATUS_PENDING"]  # noqa: E501
        if content_and_policy_review_status not in allowed_values:
            raise ValueError(
                "Invalid value for `content_and_policy_review_status` ({0}), must be one of {1}"
                .format(content_and_policy_review_status, allowed_values)
            )

        self._content_and_policy_review_status = content_and_policy_review_status

    @property
    def creative_and_landing_page_review_status(self):
        """Gets the creative_and_landing_page_review_status of this ReviewStatusInfo.

        Creative and landing page review status for the creative.

        :return: The creative_and_landing_page_review_status of this ReviewStatusInfo.
        :rtype: str
        """
        return self._creative_and_landing_page_review_status

    @creative_and_landing_page_review_status.setter
    def creative_and_landing_page_review_status(self, creative_and_landing_page_review_status):
        """Sets the creative_and_landing_page_review_status of this ReviewStatusInfo.

        Creative and landing page review status for the creative.

        :param creative_and_landing_page_review_status: The creative_and_landing_page_review_status of this ReviewStatusInfo.
        :type creative_and_landing_page_review_status: str
        """
        allowed_values = ["REVIEW_STATUS_UNSPECIFIED", "REVIEW_STATUS_APPROVED", "REVIEW_STATUS_REJECTED", "REVIEW_STATUS_PENDING"]  # noqa: E501
        if creative_and_landing_page_review_status not in allowed_values:
            raise ValueError(
                "Invalid value for `creative_and_landing_page_review_status` ({0}), must be one of {1}"
                .format(creative_and_landing_page_review_status, allowed_values)
            )

        self._creative_and_landing_page_review_status = creative_and_landing_page_review_status

    @property
    def exchange_review_statuses(self):
        """Gets the exchange_review_statuses of this ReviewStatusInfo.

        Exchange review statuses for the creative.

        :return: The exchange_review_statuses of this ReviewStatusInfo.
        :rtype: List[ExchangeReviewStatus]
        """
        return self._exchange_review_statuses

    @exchange_review_statuses.setter
    def exchange_review_statuses(self, exchange_review_statuses):
        """Sets the exchange_review_statuses of this ReviewStatusInfo.

        Exchange review statuses for the creative.

        :param exchange_review_statuses: The exchange_review_statuses of this ReviewStatusInfo.
        :type exchange_review_statuses: List[ExchangeReviewStatus]
        """

        self._exchange_review_statuses = exchange_review_statuses

    @property
    def publisher_review_statuses(self):
        """Gets the publisher_review_statuses of this ReviewStatusInfo.

        Publisher review statuses for the creative.

        :return: The publisher_review_statuses of this ReviewStatusInfo.
        :rtype: List[PublisherReviewStatus]
        """
        return self._publisher_review_statuses

    @publisher_review_statuses.setter
    def publisher_review_statuses(self, publisher_review_statuses):
        """Sets the publisher_review_statuses of this ReviewStatusInfo.

        Publisher review statuses for the creative.

        :param publisher_review_statuses: The publisher_review_statuses of this ReviewStatusInfo.
        :type publisher_review_statuses: List[PublisherReviewStatus]
        """

        self._publisher_review_statuses = publisher_review_statuses
