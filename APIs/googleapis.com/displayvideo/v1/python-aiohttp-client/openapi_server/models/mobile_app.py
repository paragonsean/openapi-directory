# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MobileApp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, display_name: str=None, platform: str=None, publisher: str=None):
        """MobileApp - a model defined in OpenAPI

        :param app_id: The app_id of this MobileApp.
        :param display_name: The display_name of this MobileApp.
        :param platform: The platform of this MobileApp.
        :param publisher: The publisher of this MobileApp.
        """
        self.openapi_types = {
            'app_id': str,
            'display_name': str,
            'platform': str,
            'publisher': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'display_name': 'displayName',
            'platform': 'platform',
            'publisher': 'publisher'
        }

        self._app_id = app_id
        self._display_name = display_name
        self._platform = platform
        self._publisher = publisher

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MobileApp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MobileApp of this MobileApp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this MobileApp.

        Required. The ID of the app provided by the platform store. Android apps are identified by the bundle ID used by Android's Play store, such as `com.google.android.gm`. iOS apps are identified by a nine-digit app ID used by Apple's App store, such as `422689480`.

        :return: The app_id of this MobileApp.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this MobileApp.

        Required. The ID of the app provided by the platform store. Android apps are identified by the bundle ID used by Android's Play store, such as `com.google.android.gm`. iOS apps are identified by a nine-digit app ID used by Apple's App store, such as `422689480`.

        :param app_id: The app_id of this MobileApp.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def display_name(self):
        """Gets the display_name of this MobileApp.

        Output only. The app name.

        :return: The display_name of this MobileApp.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MobileApp.

        Output only. The app name.

        :param display_name: The display_name of this MobileApp.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def platform(self):
        """Gets the platform of this MobileApp.

        Output only. The app platform.

        :return: The platform of this MobileApp.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this MobileApp.

        Output only. The app platform.

        :param platform: The platform of this MobileApp.
        :type platform: str
        """
        allowed_values = ["PLATFORM_UNSPECIFIED", "IOS", "ANDROID"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def publisher(self):
        """Gets the publisher of this MobileApp.

        Output only. The app publisher.

        :return: The publisher of this MobileApp.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this MobileApp.

        Output only. The app publisher.

        :param publisher: The publisher of this MobileApp.
        :type publisher: str
        """

        self._publisher = publisher
