# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ViewabilityAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, targeting_option_id: str=None, viewability: str=None):
        """ViewabilityAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param targeting_option_id: The targeting_option_id of this ViewabilityAssignedTargetingOptionDetails.
        :param viewability: The viewability of this ViewabilityAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'targeting_option_id': str,
            'viewability': str
        }

        self.attribute_map = {
            'targeting_option_id': 'targetingOptionId',
            'viewability': 'viewability'
        }

        self._targeting_option_id = targeting_option_id
        self._viewability = viewability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ViewabilityAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ViewabilityAssignedTargetingOptionDetails of this ViewabilityAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def targeting_option_id(self):
        """Gets the targeting_option_id of this ViewabilityAssignedTargetingOptionDetails.

        Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_VIEWABILITY` (e.g., \"509010\" for targeting the `VIEWABILITY_10_PERCENT_OR_MORE` option).

        :return: The targeting_option_id of this ViewabilityAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._targeting_option_id

    @targeting_option_id.setter
    def targeting_option_id(self, targeting_option_id):
        """Sets the targeting_option_id of this ViewabilityAssignedTargetingOptionDetails.

        Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_VIEWABILITY` (e.g., \"509010\" for targeting the `VIEWABILITY_10_PERCENT_OR_MORE` option).

        :param targeting_option_id: The targeting_option_id of this ViewabilityAssignedTargetingOptionDetails.
        :type targeting_option_id: str
        """

        self._targeting_option_id = targeting_option_id

    @property
    def viewability(self):
        """Gets the viewability of this ViewabilityAssignedTargetingOptionDetails.

        Required. The predicted viewability percentage.

        :return: The viewability of this ViewabilityAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._viewability

    @viewability.setter
    def viewability(self, viewability):
        """Sets the viewability of this ViewabilityAssignedTargetingOptionDetails.

        Required. The predicted viewability percentage.

        :param viewability: The viewability of this ViewabilityAssignedTargetingOptionDetails.
        :type viewability: str
        """
        allowed_values = ["VIEWABILITY_UNSPECIFIED", "VIEWABILITY_10_PERCENT_OR_MORE", "VIEWABILITY_20_PERCENT_OR_MORE", "VIEWABILITY_30_PERCENT_OR_MORE", "VIEWABILITY_40_PERCENT_OR_MORE", "VIEWABILITY_50_PERCENT_OR_MORE", "VIEWABILITY_60_PERCENT_OR_MORE", "VIEWABILITY_70_PERCENT_OR_MORE", "VIEWABILITY_80_PERCENT_OR_MORE", "VIEWABILITY_90_PERCENT_OR_MORE"]  # noqa: E501
        if viewability not in allowed_values:
            raise ValueError(
                "Invalid value for `viewability` ({0}), must be one of {1}"
                .format(viewability, allowed_values)
            )

        self._viewability = viewability
