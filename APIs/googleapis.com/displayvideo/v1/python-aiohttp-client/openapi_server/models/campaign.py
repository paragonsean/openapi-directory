# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.campaign_budget import CampaignBudget
from openapi_server.models.campaign_flight import CampaignFlight
from openapi_server.models.campaign_goal import CampaignGoal
from openapi_server.models.frequency_cap import FrequencyCap
from openapi_server import util


class Campaign(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertiser_id: str=None, campaign_budgets: List[CampaignBudget]=None, campaign_flight: CampaignFlight=None, campaign_goal: CampaignGoal=None, campaign_id: str=None, display_name: str=None, entity_status: str=None, frequency_cap: FrequencyCap=None, name: str=None, update_time: str=None):
        """Campaign - a model defined in OpenAPI

        :param advertiser_id: The advertiser_id of this Campaign.
        :param campaign_budgets: The campaign_budgets of this Campaign.
        :param campaign_flight: The campaign_flight of this Campaign.
        :param campaign_goal: The campaign_goal of this Campaign.
        :param campaign_id: The campaign_id of this Campaign.
        :param display_name: The display_name of this Campaign.
        :param entity_status: The entity_status of this Campaign.
        :param frequency_cap: The frequency_cap of this Campaign.
        :param name: The name of this Campaign.
        :param update_time: The update_time of this Campaign.
        """
        self.openapi_types = {
            'advertiser_id': str,
            'campaign_budgets': List[CampaignBudget],
            'campaign_flight': CampaignFlight,
            'campaign_goal': CampaignGoal,
            'campaign_id': str,
            'display_name': str,
            'entity_status': str,
            'frequency_cap': FrequencyCap,
            'name': str,
            'update_time': str
        }

        self.attribute_map = {
            'advertiser_id': 'advertiserId',
            'campaign_budgets': 'campaignBudgets',
            'campaign_flight': 'campaignFlight',
            'campaign_goal': 'campaignGoal',
            'campaign_id': 'campaignId',
            'display_name': 'displayName',
            'entity_status': 'entityStatus',
            'frequency_cap': 'frequencyCap',
            'name': 'name',
            'update_time': 'updateTime'
        }

        self._advertiser_id = advertiser_id
        self._campaign_budgets = campaign_budgets
        self._campaign_flight = campaign_flight
        self._campaign_goal = campaign_goal
        self._campaign_id = campaign_id
        self._display_name = display_name
        self._entity_status = entity_status
        self._frequency_cap = frequency_cap
        self._name = name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Campaign':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Campaign of this Campaign.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this Campaign.

        Output only. The unique ID of the advertiser the campaign belongs to.

        :return: The advertiser_id of this Campaign.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this Campaign.

        Output only. The unique ID of the advertiser the campaign belongs to.

        :param advertiser_id: The advertiser_id of this Campaign.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def campaign_budgets(self):
        """Gets the campaign_budgets of this Campaign.

        The list of budgets available to this campaign. If this field is not set, the campaign uses an unlimited budget.

        :return: The campaign_budgets of this Campaign.
        :rtype: List[CampaignBudget]
        """
        return self._campaign_budgets

    @campaign_budgets.setter
    def campaign_budgets(self, campaign_budgets):
        """Sets the campaign_budgets of this Campaign.

        The list of budgets available to this campaign. If this field is not set, the campaign uses an unlimited budget.

        :param campaign_budgets: The campaign_budgets of this Campaign.
        :type campaign_budgets: List[CampaignBudget]
        """

        self._campaign_budgets = campaign_budgets

    @property
    def campaign_flight(self):
        """Gets the campaign_flight of this Campaign.


        :return: The campaign_flight of this Campaign.
        :rtype: CampaignFlight
        """
        return self._campaign_flight

    @campaign_flight.setter
    def campaign_flight(self, campaign_flight):
        """Sets the campaign_flight of this Campaign.


        :param campaign_flight: The campaign_flight of this Campaign.
        :type campaign_flight: CampaignFlight
        """

        self._campaign_flight = campaign_flight

    @property
    def campaign_goal(self):
        """Gets the campaign_goal of this Campaign.


        :return: The campaign_goal of this Campaign.
        :rtype: CampaignGoal
        """
        return self._campaign_goal

    @campaign_goal.setter
    def campaign_goal(self, campaign_goal):
        """Sets the campaign_goal of this Campaign.


        :param campaign_goal: The campaign_goal of this Campaign.
        :type campaign_goal: CampaignGoal
        """

        self._campaign_goal = campaign_goal

    @property
    def campaign_id(self):
        """Gets the campaign_id of this Campaign.

        Output only. The unique ID of the campaign. Assigned by the system.

        :return: The campaign_id of this Campaign.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this Campaign.

        Output only. The unique ID of the campaign. Assigned by the system.

        :param campaign_id: The campaign_id of this Campaign.
        :type campaign_id: str
        """

        self._campaign_id = campaign_id

    @property
    def display_name(self):
        """Gets the display_name of this Campaign.

        Required. The display name of the campaign. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :return: The display_name of this Campaign.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Campaign.

        Required. The display name of the campaign. Must be UTF-8 encoded with a maximum size of 240 bytes.

        :param display_name: The display_name of this Campaign.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def entity_status(self):
        """Gets the entity_status of this Campaign.

        Required. Controls whether or not the insertion orders under this campaign can spend their budgets and bid on inventory. * Accepted values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. * For CreateCampaign method, `ENTITY_STATUS_ARCHIVED` is not allowed.

        :return: The entity_status of this Campaign.
        :rtype: str
        """
        return self._entity_status

    @entity_status.setter
    def entity_status(self, entity_status):
        """Sets the entity_status of this Campaign.

        Required. Controls whether or not the insertion orders under this campaign can spend their budgets and bid on inventory. * Accepted values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. * For CreateCampaign method, `ENTITY_STATUS_ARCHIVED` is not allowed.

        :param entity_status: The entity_status of this Campaign.
        :type entity_status: str
        """
        allowed_values = ["ENTITY_STATUS_UNSPECIFIED", "ENTITY_STATUS_ACTIVE", "ENTITY_STATUS_ARCHIVED", "ENTITY_STATUS_DRAFT", "ENTITY_STATUS_PAUSED", "ENTITY_STATUS_SCHEDULED_FOR_DELETION"]  # noqa: E501
        if entity_status not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_status` ({0}), must be one of {1}"
                .format(entity_status, allowed_values)
            )

        self._entity_status = entity_status

    @property
    def frequency_cap(self):
        """Gets the frequency_cap of this Campaign.


        :return: The frequency_cap of this Campaign.
        :rtype: FrequencyCap
        """
        return self._frequency_cap

    @frequency_cap.setter
    def frequency_cap(self, frequency_cap):
        """Sets the frequency_cap of this Campaign.


        :param frequency_cap: The frequency_cap of this Campaign.
        :type frequency_cap: FrequencyCap
        """

        self._frequency_cap = frequency_cap

    @property
    def name(self):
        """Gets the name of this Campaign.

        Output only. The resource name of the campaign.

        :return: The name of this Campaign.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Campaign.

        Output only. The resource name of the campaign.

        :param name: The name of this Campaign.
        :type name: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this Campaign.

        Output only. The timestamp when the campaign was last updated. Assigned by the system.

        :return: The update_time of this Campaign.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Campaign.

        Output only. The timestamp when the campaign was last updated. Assigned by the system.

        :param update_time: The update_time of this Campaign.
        :type update_time: str
        """

        self._update_time = update_time
