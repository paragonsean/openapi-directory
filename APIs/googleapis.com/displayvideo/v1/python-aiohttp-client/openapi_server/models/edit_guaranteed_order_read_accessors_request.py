# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EditGuaranteedOrderReadAccessorsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added_advertisers: List[str]=None, partner_id: str=None, read_access_inherited: bool=None, removed_advertisers: List[str]=None):
        """EditGuaranteedOrderReadAccessorsRequest - a model defined in OpenAPI

        :param added_advertisers: The added_advertisers of this EditGuaranteedOrderReadAccessorsRequest.
        :param partner_id: The partner_id of this EditGuaranteedOrderReadAccessorsRequest.
        :param read_access_inherited: The read_access_inherited of this EditGuaranteedOrderReadAccessorsRequest.
        :param removed_advertisers: The removed_advertisers of this EditGuaranteedOrderReadAccessorsRequest.
        """
        self.openapi_types = {
            'added_advertisers': List[str],
            'partner_id': str,
            'read_access_inherited': bool,
            'removed_advertisers': List[str]
        }

        self.attribute_map = {
            'added_advertisers': 'addedAdvertisers',
            'partner_id': 'partnerId',
            'read_access_inherited': 'readAccessInherited',
            'removed_advertisers': 'removedAdvertisers'
        }

        self._added_advertisers = added_advertisers
        self._partner_id = partner_id
        self._read_access_inherited = read_access_inherited
        self._removed_advertisers = removed_advertisers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditGuaranteedOrderReadAccessorsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EditGuaranteedOrderReadAccessorsRequest of this EditGuaranteedOrderReadAccessorsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added_advertisers(self):
        """Gets the added_advertisers of this EditGuaranteedOrderReadAccessorsRequest.

        The advertisers to add as read accessors to the guaranteed order.

        :return: The added_advertisers of this EditGuaranteedOrderReadAccessorsRequest.
        :rtype: List[str]
        """
        return self._added_advertisers

    @added_advertisers.setter
    def added_advertisers(self, added_advertisers):
        """Sets the added_advertisers of this EditGuaranteedOrderReadAccessorsRequest.

        The advertisers to add as read accessors to the guaranteed order.

        :param added_advertisers: The added_advertisers of this EditGuaranteedOrderReadAccessorsRequest.
        :type added_advertisers: List[str]
        """

        self._added_advertisers = added_advertisers

    @property
    def partner_id(self):
        """Gets the partner_id of this EditGuaranteedOrderReadAccessorsRequest.

        Required. The partner context in which the change is being made.

        :return: The partner_id of this EditGuaranteedOrderReadAccessorsRequest.
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this EditGuaranteedOrderReadAccessorsRequest.

        Required. The partner context in which the change is being made.

        :param partner_id: The partner_id of this EditGuaranteedOrderReadAccessorsRequest.
        :type partner_id: str
        """

        self._partner_id = partner_id

    @property
    def read_access_inherited(self):
        """Gets the read_access_inherited of this EditGuaranteedOrderReadAccessorsRequest.

        Whether to give all advertisers of the read/write accessor partner read access to the guaranteed order. Only applicable if read_write_partner_id is set in the guaranteed order.

        :return: The read_access_inherited of this EditGuaranteedOrderReadAccessorsRequest.
        :rtype: bool
        """
        return self._read_access_inherited

    @read_access_inherited.setter
    def read_access_inherited(self, read_access_inherited):
        """Sets the read_access_inherited of this EditGuaranteedOrderReadAccessorsRequest.

        Whether to give all advertisers of the read/write accessor partner read access to the guaranteed order. Only applicable if read_write_partner_id is set in the guaranteed order.

        :param read_access_inherited: The read_access_inherited of this EditGuaranteedOrderReadAccessorsRequest.
        :type read_access_inherited: bool
        """

        self._read_access_inherited = read_access_inherited

    @property
    def removed_advertisers(self):
        """Gets the removed_advertisers of this EditGuaranteedOrderReadAccessorsRequest.

        The advertisers to remove as read accessors to the guaranteed order.

        :return: The removed_advertisers of this EditGuaranteedOrderReadAccessorsRequest.
        :rtype: List[str]
        """
        return self._removed_advertisers

    @removed_advertisers.setter
    def removed_advertisers(self, removed_advertisers):
        """Sets the removed_advertisers of this EditGuaranteedOrderReadAccessorsRequest.

        The advertisers to remove as read accessors to the guaranteed order.

        :param removed_advertisers: The removed_advertisers of this EditGuaranteedOrderReadAccessorsRequest.
        :type removed_advertisers: List[str]
        """

        self._removed_advertisers = removed_advertisers
