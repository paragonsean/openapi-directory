# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceTypeAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_type: str=None, targeting_option_id: str=None):
        """DeviceTypeAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param device_type: The device_type of this DeviceTypeAssignedTargetingOptionDetails.
        :param targeting_option_id: The targeting_option_id of this DeviceTypeAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'device_type': str,
            'targeting_option_id': str
        }

        self.attribute_map = {
            'device_type': 'deviceType',
            'targeting_option_id': 'targetingOptionId'
        }

        self._device_type = device_type
        self._targeting_option_id = targeting_option_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceTypeAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceTypeAssignedTargetingOptionDetails of this DeviceTypeAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_type(self):
        """Gets the device_type of this DeviceTypeAssignedTargetingOptionDetails.

        Required. The display name of the device type.

        :return: The device_type of this DeviceTypeAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceTypeAssignedTargetingOptionDetails.

        Required. The display name of the device type.

        :param device_type: The device_type of this DeviceTypeAssignedTargetingOptionDetails.
        :type device_type: str
        """
        allowed_values = ["DEVICE_TYPE_UNSPECIFIED", "DEVICE_TYPE_COMPUTER", "DEVICE_TYPE_CONNECTED_TV", "DEVICE_TYPE_SMART_PHONE", "DEVICE_TYPE_TABLET"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def targeting_option_id(self):
        """Gets the targeting_option_id of this DeviceTypeAssignedTargetingOptionDetails.

        Required. ID of the device type.

        :return: The targeting_option_id of this DeviceTypeAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._targeting_option_id

    @targeting_option_id.setter
    def targeting_option_id(self, targeting_option_id):
        """Sets the targeting_option_id of this DeviceTypeAssignedTargetingOptionDetails.

        Required. ID of the device type.

        :param targeting_option_id: The targeting_option_id of this DeviceTypeAssignedTargetingOptionDetails.
        :type targeting_option_id: str
        """

        self._targeting_option_id = targeting_option_id
