# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InventorySourceStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_status: str=None, entity_pause_reason: str=None, entity_status: str=None, seller_pause_reason: str=None, seller_status: str=None):
        """InventorySourceStatus - a model defined in OpenAPI

        :param config_status: The config_status of this InventorySourceStatus.
        :param entity_pause_reason: The entity_pause_reason of this InventorySourceStatus.
        :param entity_status: The entity_status of this InventorySourceStatus.
        :param seller_pause_reason: The seller_pause_reason of this InventorySourceStatus.
        :param seller_status: The seller_status of this InventorySourceStatus.
        """
        self.openapi_types = {
            'config_status': str,
            'entity_pause_reason': str,
            'entity_status': str,
            'seller_pause_reason': str,
            'seller_status': str
        }

        self.attribute_map = {
            'config_status': 'configStatus',
            'entity_pause_reason': 'entityPauseReason',
            'entity_status': 'entityStatus',
            'seller_pause_reason': 'sellerPauseReason',
            'seller_status': 'sellerStatus'
        }

        self._config_status = config_status
        self._entity_pause_reason = entity_pause_reason
        self._entity_status = entity_status
        self._seller_pause_reason = seller_pause_reason
        self._seller_status = seller_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InventorySourceStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InventorySourceStatus of this InventorySourceStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_status(self):
        """Gets the config_status of this InventorySourceStatus.

        Output only. The configuration status of the inventory source. Only applicable for guaranteed inventory sources. Acceptable values are `INVENTORY_SOURCE_CONFIG_STATUS_PENDING` and `INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED`. An inventory source must be configured (fill in the required fields, choose creatives, and select a default campaign) before it can serve.

        :return: The config_status of this InventorySourceStatus.
        :rtype: str
        """
        return self._config_status

    @config_status.setter
    def config_status(self, config_status):
        """Sets the config_status of this InventorySourceStatus.

        Output only. The configuration status of the inventory source. Only applicable for guaranteed inventory sources. Acceptable values are `INVENTORY_SOURCE_CONFIG_STATUS_PENDING` and `INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED`. An inventory source must be configured (fill in the required fields, choose creatives, and select a default campaign) before it can serve.

        :param config_status: The config_status of this InventorySourceStatus.
        :type config_status: str
        """
        allowed_values = ["INVENTORY_SOURCE_CONFIG_STATUS_UNSPECIFIED", "INVENTORY_SOURCE_CONFIG_STATUS_PENDING", "INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED"]  # noqa: E501
        if config_status not in allowed_values:
            raise ValueError(
                "Invalid value for `config_status` ({0}), must be one of {1}"
                .format(config_status, allowed_values)
            )

        self._config_status = config_status

    @property
    def entity_pause_reason(self):
        """Gets the entity_pause_reason of this InventorySourceStatus.

        The user-provided reason for pausing this inventory source. Must not exceed 100 characters. Only applicable when entity_status is set to `ENTITY_STATUS_PAUSED`.

        :return: The entity_pause_reason of this InventorySourceStatus.
        :rtype: str
        """
        return self._entity_pause_reason

    @entity_pause_reason.setter
    def entity_pause_reason(self, entity_pause_reason):
        """Sets the entity_pause_reason of this InventorySourceStatus.

        The user-provided reason for pausing this inventory source. Must not exceed 100 characters. Only applicable when entity_status is set to `ENTITY_STATUS_PAUSED`.

        :param entity_pause_reason: The entity_pause_reason of this InventorySourceStatus.
        :type entity_pause_reason: str
        """

        self._entity_pause_reason = entity_pause_reason

    @property
    def entity_status(self):
        """Gets the entity_status of this InventorySourceStatus.

        Whether or not the inventory source is servable. Acceptable values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. Default value is `ENTITY_STATUS_ACTIVE`.

        :return: The entity_status of this InventorySourceStatus.
        :rtype: str
        """
        return self._entity_status

    @entity_status.setter
    def entity_status(self, entity_status):
        """Sets the entity_status of this InventorySourceStatus.

        Whether or not the inventory source is servable. Acceptable values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. Default value is `ENTITY_STATUS_ACTIVE`.

        :param entity_status: The entity_status of this InventorySourceStatus.
        :type entity_status: str
        """
        allowed_values = ["ENTITY_STATUS_UNSPECIFIED", "ENTITY_STATUS_ACTIVE", "ENTITY_STATUS_ARCHIVED", "ENTITY_STATUS_DRAFT", "ENTITY_STATUS_PAUSED", "ENTITY_STATUS_SCHEDULED_FOR_DELETION"]  # noqa: E501
        if entity_status not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_status` ({0}), must be one of {1}"
                .format(entity_status, allowed_values)
            )

        self._entity_status = entity_status

    @property
    def seller_pause_reason(self):
        """Gets the seller_pause_reason of this InventorySourceStatus.

        Output only. The seller-provided reason for pausing this inventory source. Only applicable for inventory sources synced directly from the publishers and when seller_status is set to `ENTITY_STATUS_PAUSED`.

        :return: The seller_pause_reason of this InventorySourceStatus.
        :rtype: str
        """
        return self._seller_pause_reason

    @seller_pause_reason.setter
    def seller_pause_reason(self, seller_pause_reason):
        """Sets the seller_pause_reason of this InventorySourceStatus.

        Output only. The seller-provided reason for pausing this inventory source. Only applicable for inventory sources synced directly from the publishers and when seller_status is set to `ENTITY_STATUS_PAUSED`.

        :param seller_pause_reason: The seller_pause_reason of this InventorySourceStatus.
        :type seller_pause_reason: str
        """

        self._seller_pause_reason = seller_pause_reason

    @property
    def seller_status(self):
        """Gets the seller_status of this InventorySourceStatus.

        Output only. The status set by the seller for the inventory source. Only applicable for inventory sources synced directly from the publishers. Acceptable values are `ENTITY_STATUS_ACTIVE` and `ENTITY_STATUS_PAUSED`.

        :return: The seller_status of this InventorySourceStatus.
        :rtype: str
        """
        return self._seller_status

    @seller_status.setter
    def seller_status(self, seller_status):
        """Sets the seller_status of this InventorySourceStatus.

        Output only. The status set by the seller for the inventory source. Only applicable for inventory sources synced directly from the publishers. Acceptable values are `ENTITY_STATUS_ACTIVE` and `ENTITY_STATUS_PAUSED`.

        :param seller_status: The seller_status of this InventorySourceStatus.
        :type seller_status: str
        """
        allowed_values = ["ENTITY_STATUS_UNSPECIFIED", "ENTITY_STATUS_ACTIVE", "ENTITY_STATUS_ARCHIVED", "ENTITY_STATUS_DRAFT", "ENTITY_STATUS_PAUSED", "ENTITY_STATUS_SCHEDULED_FOR_DELETION"]  # noqa: E501
        if seller_status not in allowed_values:
            raise ValueError(
                "Invalid value for `seller_status` ({0}), must be one of {1}"
                .format(seller_status, allowed_values)
            )

        self._seller_status = seller_status
