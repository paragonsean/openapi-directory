# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContentInstreamPositionAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_type: str=None, content_instream_position: str=None, targeting_option_id: str=None):
        """ContentInstreamPositionAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param ad_type: The ad_type of this ContentInstreamPositionAssignedTargetingOptionDetails.
        :param content_instream_position: The content_instream_position of this ContentInstreamPositionAssignedTargetingOptionDetails.
        :param targeting_option_id: The targeting_option_id of this ContentInstreamPositionAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'ad_type': str,
            'content_instream_position': str,
            'targeting_option_id': str
        }

        self.attribute_map = {
            'ad_type': 'adType',
            'content_instream_position': 'contentInstreamPosition',
            'targeting_option_id': 'targetingOptionId'
        }

        self._ad_type = ad_type
        self._content_instream_position = content_instream_position
        self._targeting_option_id = targeting_option_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentInstreamPositionAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentInstreamPositionAssignedTargetingOptionDetails of this ContentInstreamPositionAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_type(self):
        """Gets the ad_type of this ContentInstreamPositionAssignedTargetingOptionDetails.

        Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default. Possible values are: * `AD_TYPE_VIDEO`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_VIDEO_DEFAULT`. * `AD_TYPE_AUDIO`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_AUDIO_DEFAULT`.

        :return: The ad_type of this ContentInstreamPositionAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._ad_type

    @ad_type.setter
    def ad_type(self, ad_type):
        """Sets the ad_type of this ContentInstreamPositionAssignedTargetingOptionDetails.

        Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default. Possible values are: * `AD_TYPE_VIDEO`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_VIDEO_DEFAULT`. * `AD_TYPE_AUDIO`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_AUDIO_DEFAULT`.

        :param ad_type: The ad_type of this ContentInstreamPositionAssignedTargetingOptionDetails.
        :type ad_type: str
        """
        allowed_values = ["AD_TYPE_UNSPECIFIED", "AD_TYPE_DISPLAY", "AD_TYPE_VIDEO", "AD_TYPE_AUDIO"]  # noqa: E501
        if ad_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ad_type` ({0}), must be one of {1}"
                .format(ad_type, allowed_values)
            )

        self._ad_type = ad_type

    @property
    def content_instream_position(self):
        """Gets the content_instream_position of this ContentInstreamPositionAssignedTargetingOptionDetails.

        Required. The content instream position for video or audio ads.

        :return: The content_instream_position of this ContentInstreamPositionAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._content_instream_position

    @content_instream_position.setter
    def content_instream_position(self, content_instream_position):
        """Sets the content_instream_position of this ContentInstreamPositionAssignedTargetingOptionDetails.

        Required. The content instream position for video or audio ads.

        :param content_instream_position: The content_instream_position of this ContentInstreamPositionAssignedTargetingOptionDetails.
        :type content_instream_position: str
        """
        allowed_values = ["CONTENT_INSTREAM_POSITION_UNSPECIFIED", "CONTENT_INSTREAM_POSITION_PRE_ROLL", "CONTENT_INSTREAM_POSITION_MID_ROLL", "CONTENT_INSTREAM_POSITION_POST_ROLL", "CONTENT_INSTREAM_POSITION_UNKNOWN"]  # noqa: E501
        if content_instream_position not in allowed_values:
            raise ValueError(
                "Invalid value for `content_instream_position` ({0}), must be one of {1}"
                .format(content_instream_position, allowed_values)
            )

        self._content_instream_position = content_instream_position

    @property
    def targeting_option_id(self):
        """Gets the targeting_option_id of this ContentInstreamPositionAssignedTargetingOptionDetails.

        Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CONTENT_INSTREAM_POSITION`.

        :return: The targeting_option_id of this ContentInstreamPositionAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._targeting_option_id

    @targeting_option_id.setter
    def targeting_option_id(self, targeting_option_id):
        """Sets the targeting_option_id of this ContentInstreamPositionAssignedTargetingOptionDetails.

        Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CONTENT_INSTREAM_POSITION`.

        :param targeting_option_id: The targeting_option_id of this ContentInstreamPositionAssignedTargetingOptionDetails.
        :type targeting_option_id: str
        """

        self._targeting_option_id = targeting_option_id
