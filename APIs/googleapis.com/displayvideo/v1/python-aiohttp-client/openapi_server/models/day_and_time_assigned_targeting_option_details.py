# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DayAndTimeAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_week: str=None, end_hour: int=None, start_hour: int=None, time_zone_resolution: str=None):
        """DayAndTimeAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param day_of_week: The day_of_week of this DayAndTimeAssignedTargetingOptionDetails.
        :param end_hour: The end_hour of this DayAndTimeAssignedTargetingOptionDetails.
        :param start_hour: The start_hour of this DayAndTimeAssignedTargetingOptionDetails.
        :param time_zone_resolution: The time_zone_resolution of this DayAndTimeAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'day_of_week': str,
            'end_hour': int,
            'start_hour': int,
            'time_zone_resolution': str
        }

        self.attribute_map = {
            'day_of_week': 'dayOfWeek',
            'end_hour': 'endHour',
            'start_hour': 'startHour',
            'time_zone_resolution': 'timeZoneResolution'
        }

        self._day_of_week = day_of_week
        self._end_hour = end_hour
        self._start_hour = start_hour
        self._time_zone_resolution = time_zone_resolution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DayAndTimeAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DayAndTimeAssignedTargetingOptionDetails of this DayAndTimeAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_week(self):
        """Gets the day_of_week of this DayAndTimeAssignedTargetingOptionDetails.

        Required. The day of the week for this day and time targeting setting.

        :return: The day_of_week of this DayAndTimeAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this DayAndTimeAssignedTargetingOptionDetails.

        Required. The day of the week for this day and time targeting setting.

        :param day_of_week: The day_of_week of this DayAndTimeAssignedTargetingOptionDetails.
        :type day_of_week: str
        """
        allowed_values = ["DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]  # noqa: E501
        if day_of_week not in allowed_values:
            raise ValueError(
                "Invalid value for `day_of_week` ({0}), must be one of {1}"
                .format(day_of_week, allowed_values)
            )

        self._day_of_week = day_of_week

    @property
    def end_hour(self):
        """Gets the end_hour of this DayAndTimeAssignedTargetingOptionDetails.

        Required. The end hour for day and time targeting. Must be between 1 (1 hour after start of day) and 24 (end of day).

        :return: The end_hour of this DayAndTimeAssignedTargetingOptionDetails.
        :rtype: int
        """
        return self._end_hour

    @end_hour.setter
    def end_hour(self, end_hour):
        """Sets the end_hour of this DayAndTimeAssignedTargetingOptionDetails.

        Required. The end hour for day and time targeting. Must be between 1 (1 hour after start of day) and 24 (end of day).

        :param end_hour: The end_hour of this DayAndTimeAssignedTargetingOptionDetails.
        :type end_hour: int
        """

        self._end_hour = end_hour

    @property
    def start_hour(self):
        """Gets the start_hour of this DayAndTimeAssignedTargetingOptionDetails.

        Required. The start hour for day and time targeting. Must be between 0 (start of day) and 23 (1 hour before end of day).

        :return: The start_hour of this DayAndTimeAssignedTargetingOptionDetails.
        :rtype: int
        """
        return self._start_hour

    @start_hour.setter
    def start_hour(self, start_hour):
        """Sets the start_hour of this DayAndTimeAssignedTargetingOptionDetails.

        Required. The start hour for day and time targeting. Must be between 0 (start of day) and 23 (1 hour before end of day).

        :param start_hour: The start_hour of this DayAndTimeAssignedTargetingOptionDetails.
        :type start_hour: int
        """

        self._start_hour = start_hour

    @property
    def time_zone_resolution(self):
        """Gets the time_zone_resolution of this DayAndTimeAssignedTargetingOptionDetails.

        Required. The mechanism used to determine which timezone to use for this day and time targeting setting.

        :return: The time_zone_resolution of this DayAndTimeAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._time_zone_resolution

    @time_zone_resolution.setter
    def time_zone_resolution(self, time_zone_resolution):
        """Sets the time_zone_resolution of this DayAndTimeAssignedTargetingOptionDetails.

        Required. The mechanism used to determine which timezone to use for this day and time targeting setting.

        :param time_zone_resolution: The time_zone_resolution of this DayAndTimeAssignedTargetingOptionDetails.
        :type time_zone_resolution: str
        """
        allowed_values = ["TIME_ZONE_RESOLUTION_UNSPECIFIED", "TIME_ZONE_RESOLUTION_END_USER", "TIME_ZONE_RESOLUTION_ADVERTISER"]  # noqa: E501
        if time_zone_resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `time_zone_resolution` ({0}), must be one of {1}"
                .format(time_zone_resolution, allowed_values)
            )

        self._time_zone_resolution = time_zone_resolution
