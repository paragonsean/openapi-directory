# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActiveViewVideoViewabilityMetricConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, minimum_duration: str=None, minimum_quartile: str=None, minimum_viewability: str=None, minimum_volume: str=None):
        """ActiveViewVideoViewabilityMetricConfig - a model defined in OpenAPI

        :param display_name: The display_name of this ActiveViewVideoViewabilityMetricConfig.
        :param minimum_duration: The minimum_duration of this ActiveViewVideoViewabilityMetricConfig.
        :param minimum_quartile: The minimum_quartile of this ActiveViewVideoViewabilityMetricConfig.
        :param minimum_viewability: The minimum_viewability of this ActiveViewVideoViewabilityMetricConfig.
        :param minimum_volume: The minimum_volume of this ActiveViewVideoViewabilityMetricConfig.
        """
        self.openapi_types = {
            'display_name': str,
            'minimum_duration': str,
            'minimum_quartile': str,
            'minimum_viewability': str,
            'minimum_volume': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'minimum_duration': 'minimumDuration',
            'minimum_quartile': 'minimumQuartile',
            'minimum_viewability': 'minimumViewability',
            'minimum_volume': 'minimumVolume'
        }

        self._display_name = display_name
        self._minimum_duration = minimum_duration
        self._minimum_quartile = minimum_quartile
        self._minimum_viewability = minimum_viewability
        self._minimum_volume = minimum_volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActiveViewVideoViewabilityMetricConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActiveViewVideoViewabilityMetricConfig of this ActiveViewVideoViewabilityMetricConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this ActiveViewVideoViewabilityMetricConfig.

        Required. The display name of the custom metric.

        :return: The display_name of this ActiveViewVideoViewabilityMetricConfig.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ActiveViewVideoViewabilityMetricConfig.

        Required. The display name of the custom metric.

        :param display_name: The display_name of this ActiveViewVideoViewabilityMetricConfig.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def minimum_duration(self):
        """Gets the minimum_duration of this ActiveViewVideoViewabilityMetricConfig.

        The minimum visible video duration required (in seconds) in order for an impression to be recorded. You must specify minimum_duration, minimum_quartile or both. If both are specified, an impression meets the metric criteria if either requirement is met (whichever happens first).

        :return: The minimum_duration of this ActiveViewVideoViewabilityMetricConfig.
        :rtype: str
        """
        return self._minimum_duration

    @minimum_duration.setter
    def minimum_duration(self, minimum_duration):
        """Sets the minimum_duration of this ActiveViewVideoViewabilityMetricConfig.

        The minimum visible video duration required (in seconds) in order for an impression to be recorded. You must specify minimum_duration, minimum_quartile or both. If both are specified, an impression meets the metric criteria if either requirement is met (whichever happens first).

        :param minimum_duration: The minimum_duration of this ActiveViewVideoViewabilityMetricConfig.
        :type minimum_duration: str
        """
        allowed_values = ["VIDEO_DURATION_UNSPECIFIED", "VIDEO_DURATION_SECONDS_NONE", "VIDEO_DURATION_SECONDS_0", "VIDEO_DURATION_SECONDS_1", "VIDEO_DURATION_SECONDS_2", "VIDEO_DURATION_SECONDS_3", "VIDEO_DURATION_SECONDS_4", "VIDEO_DURATION_SECONDS_5", "VIDEO_DURATION_SECONDS_6", "VIDEO_DURATION_SECONDS_7", "VIDEO_DURATION_SECONDS_8", "VIDEO_DURATION_SECONDS_9", "VIDEO_DURATION_SECONDS_10", "VIDEO_DURATION_SECONDS_11", "VIDEO_DURATION_SECONDS_12", "VIDEO_DURATION_SECONDS_13", "VIDEO_DURATION_SECONDS_14", "VIDEO_DURATION_SECONDS_15", "VIDEO_DURATION_SECONDS_30", "VIDEO_DURATION_SECONDS_45", "VIDEO_DURATION_SECONDS_60"]  # noqa: E501
        if minimum_duration not in allowed_values:
            raise ValueError(
                "Invalid value for `minimum_duration` ({0}), must be one of {1}"
                .format(minimum_duration, allowed_values)
            )

        self._minimum_duration = minimum_duration

    @property
    def minimum_quartile(self):
        """Gets the minimum_quartile of this ActiveViewVideoViewabilityMetricConfig.

        The minimum visible video duration required, based on the video quartiles, in order for an impression to be recorded. You must specify minimum_duration, minimum_quartile or both. If both are specified, an impression meets the metric criteria if either requirement is met (whichever happens first).

        :return: The minimum_quartile of this ActiveViewVideoViewabilityMetricConfig.
        :rtype: str
        """
        return self._minimum_quartile

    @minimum_quartile.setter
    def minimum_quartile(self, minimum_quartile):
        """Sets the minimum_quartile of this ActiveViewVideoViewabilityMetricConfig.

        The minimum visible video duration required, based on the video quartiles, in order for an impression to be recorded. You must specify minimum_duration, minimum_quartile or both. If both are specified, an impression meets the metric criteria if either requirement is met (whichever happens first).

        :param minimum_quartile: The minimum_quartile of this ActiveViewVideoViewabilityMetricConfig.
        :type minimum_quartile: str
        """
        allowed_values = ["VIDEO_DURATION_QUARTILE_UNSPECIFIED", "VIDEO_DURATION_QUARTILE_NONE", "VIDEO_DURATION_QUARTILE_FIRST", "VIDEO_DURATION_QUARTILE_SECOND", "VIDEO_DURATION_QUARTILE_THIRD", "VIDEO_DURATION_QUARTILE_FOURTH"]  # noqa: E501
        if minimum_quartile not in allowed_values:
            raise ValueError(
                "Invalid value for `minimum_quartile` ({0}), must be one of {1}"
                .format(minimum_quartile, allowed_values)
            )

        self._minimum_quartile = minimum_quartile

    @property
    def minimum_viewability(self):
        """Gets the minimum_viewability of this ActiveViewVideoViewabilityMetricConfig.

        Required. The minimum percentage of the video ad's pixels visible on the screen in order for an impression to be recorded.

        :return: The minimum_viewability of this ActiveViewVideoViewabilityMetricConfig.
        :rtype: str
        """
        return self._minimum_viewability

    @minimum_viewability.setter
    def minimum_viewability(self, minimum_viewability):
        """Sets the minimum_viewability of this ActiveViewVideoViewabilityMetricConfig.

        Required. The minimum percentage of the video ad's pixels visible on the screen in order for an impression to be recorded.

        :param minimum_viewability: The minimum_viewability of this ActiveViewVideoViewabilityMetricConfig.
        :type minimum_viewability: str
        """
        allowed_values = ["VIEWABILITY_PERCENT_UNSPECIFIED", "VIEWABILITY_PERCENT_0", "VIEWABILITY_PERCENT_25", "VIEWABILITY_PERCENT_50", "VIEWABILITY_PERCENT_75", "VIEWABILITY_PERCENT_100"]  # noqa: E501
        if minimum_viewability not in allowed_values:
            raise ValueError(
                "Invalid value for `minimum_viewability` ({0}), must be one of {1}"
                .format(minimum_viewability, allowed_values)
            )

        self._minimum_viewability = minimum_viewability

    @property
    def minimum_volume(self):
        """Gets the minimum_volume of this ActiveViewVideoViewabilityMetricConfig.

        Required. The minimum percentage of the video ad's volume required in order for an impression to be recorded.

        :return: The minimum_volume of this ActiveViewVideoViewabilityMetricConfig.
        :rtype: str
        """
        return self._minimum_volume

    @minimum_volume.setter
    def minimum_volume(self, minimum_volume):
        """Sets the minimum_volume of this ActiveViewVideoViewabilityMetricConfig.

        Required. The minimum percentage of the video ad's volume required in order for an impression to be recorded.

        :param minimum_volume: The minimum_volume of this ActiveViewVideoViewabilityMetricConfig.
        :type minimum_volume: str
        """
        allowed_values = ["VIDEO_VOLUME_PERCENT_UNSPECIFIED", "VIDEO_VOLUME_PERCENT_0", "VIDEO_VOLUME_PERCENT_10"]  # noqa: E501
        if minimum_volume not in allowed_values:
            raise ValueError(
                "Invalid value for `minimum_volume` ({0}), must be one of {1}"
                .format(minimum_volume, allowed_values)
            )

        self._minimum_volume = minimum_volume
