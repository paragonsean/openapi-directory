# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenderAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gender: str=None, targeting_option_id: str=None):
        """GenderAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param gender: The gender of this GenderAssignedTargetingOptionDetails.
        :param targeting_option_id: The targeting_option_id of this GenderAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'gender': str,
            'targeting_option_id': str
        }

        self.attribute_map = {
            'gender': 'gender',
            'targeting_option_id': 'targetingOptionId'
        }

        self._gender = gender
        self._targeting_option_id = targeting_option_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenderAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenderAssignedTargetingOptionDetails of this GenderAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gender(self):
        """Gets the gender of this GenderAssignedTargetingOptionDetails.

        Required. The gender of the audience.

        :return: The gender of this GenderAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this GenderAssignedTargetingOptionDetails.

        Required. The gender of the audience.

        :param gender: The gender of this GenderAssignedTargetingOptionDetails.
        :type gender: str
        """
        allowed_values = ["GENDER_UNSPECIFIED", "GENDER_MALE", "GENDER_FEMALE", "GENDER_UNKNOWN"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def targeting_option_id(self):
        """Gets the targeting_option_id of this GenderAssignedTargetingOptionDetails.

        Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_GENDER`.

        :return: The targeting_option_id of this GenderAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._targeting_option_id

    @targeting_option_id.setter
    def targeting_option_id(self, targeting_option_id):
        """Sets the targeting_option_id of this GenderAssignedTargetingOptionDetails.

        Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_GENDER`.

        :param targeting_option_id: The targeting_option_id of this GenderAssignedTargetingOptionDetails.
        :type targeting_option_id: str
        """

        self._targeting_option_id = targeting_option_id
