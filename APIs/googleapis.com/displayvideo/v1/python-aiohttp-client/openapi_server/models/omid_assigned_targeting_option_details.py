# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OmidAssignedTargetingOptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, omid: str=None, targeting_option_id: str=None):
        """OmidAssignedTargetingOptionDetails - a model defined in OpenAPI

        :param omid: The omid of this OmidAssignedTargetingOptionDetails.
        :param targeting_option_id: The targeting_option_id of this OmidAssignedTargetingOptionDetails.
        """
        self.openapi_types = {
            'omid': str,
            'targeting_option_id': str
        }

        self.attribute_map = {
            'omid': 'omid',
            'targeting_option_id': 'targetingOptionId'
        }

        self._omid = omid
        self._targeting_option_id = targeting_option_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OmidAssignedTargetingOptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OmidAssignedTargetingOptionDetails of this OmidAssignedTargetingOptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def omid(self):
        """Gets the omid of this OmidAssignedTargetingOptionDetails.

        Required. The type of Open Measurement enabled inventory.

        :return: The omid of this OmidAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._omid

    @omid.setter
    def omid(self, omid):
        """Sets the omid of this OmidAssignedTargetingOptionDetails.

        Required. The type of Open Measurement enabled inventory.

        :param omid: The omid of this OmidAssignedTargetingOptionDetails.
        :type omid: str
        """
        allowed_values = ["OMID_UNSPECIFIED", "OMID_FOR_MOBILE_DISPLAY_ADS"]  # noqa: E501
        if omid not in allowed_values:
            raise ValueError(
                "Invalid value for `omid` ({0}), must be one of {1}"
                .format(omid, allowed_values)
            )

        self._omid = omid

    @property
    def targeting_option_id(self):
        """Gets the targeting_option_id of this OmidAssignedTargetingOptionDetails.

        Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_OMID`.

        :return: The targeting_option_id of this OmidAssignedTargetingOptionDetails.
        :rtype: str
        """
        return self._targeting_option_id

    @targeting_option_id.setter
    def targeting_option_id(self, targeting_option_id):
        """Sets the targeting_option_id of this OmidAssignedTargetingOptionDetails.

        Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_OMID`.

        :param targeting_option_id: The targeting_option_id of this OmidAssignedTargetingOptionDetails.
        :type targeting_option_id: str
        """

        self._targeting_option_id = targeting_option_id
