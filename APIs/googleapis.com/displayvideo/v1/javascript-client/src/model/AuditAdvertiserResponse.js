/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuditAdvertiserResponse model module.
 * @module model/AuditAdvertiserResponse
 * @version v1
 */
class AuditAdvertiserResponse {
    /**
     * Constructs a new <code>AuditAdvertiserResponse</code>.
     * Response message for AdvertiserService.AuditAdvertiser.
     * @alias module:model/AuditAdvertiserResponse
     */
    constructor() { 
        
        AuditAdvertiserResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuditAdvertiserResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuditAdvertiserResponse} obj Optional instance to populate.
     * @return {module:model/AuditAdvertiserResponse} The populated <code>AuditAdvertiserResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuditAdvertiserResponse();

            if (data.hasOwnProperty('adGroupCriteriaCount')) {
                obj['adGroupCriteriaCount'] = ApiClient.convertToType(data['adGroupCriteriaCount'], 'String');
            }
            if (data.hasOwnProperty('campaignCriteriaCount')) {
                obj['campaignCriteriaCount'] = ApiClient.convertToType(data['campaignCriteriaCount'], 'String');
            }
            if (data.hasOwnProperty('channelsCount')) {
                obj['channelsCount'] = ApiClient.convertToType(data['channelsCount'], 'String');
            }
            if (data.hasOwnProperty('negativeKeywordListsCount')) {
                obj['negativeKeywordListsCount'] = ApiClient.convertToType(data['negativeKeywordListsCount'], 'String');
            }
            if (data.hasOwnProperty('negativelyTargetedChannelsCount')) {
                obj['negativelyTargetedChannelsCount'] = ApiClient.convertToType(data['negativelyTargetedChannelsCount'], 'String');
            }
            if (data.hasOwnProperty('usedCampaignsCount')) {
                obj['usedCampaignsCount'] = ApiClient.convertToType(data['usedCampaignsCount'], 'String');
            }
            if (data.hasOwnProperty('usedInsertionOrdersCount')) {
                obj['usedInsertionOrdersCount'] = ApiClient.convertToType(data['usedInsertionOrdersCount'], 'String');
            }
            if (data.hasOwnProperty('usedLineItemsCount')) {
                obj['usedLineItemsCount'] = ApiClient.convertToType(data['usedLineItemsCount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuditAdvertiserResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuditAdvertiserResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adGroupCriteriaCount'] && !(typeof data['adGroupCriteriaCount'] === 'string' || data['adGroupCriteriaCount'] instanceof String)) {
            throw new Error("Expected the field `adGroupCriteriaCount` to be a primitive type in the JSON string but got " + data['adGroupCriteriaCount']);
        }
        // ensure the json data is a string
        if (data['campaignCriteriaCount'] && !(typeof data['campaignCriteriaCount'] === 'string' || data['campaignCriteriaCount'] instanceof String)) {
            throw new Error("Expected the field `campaignCriteriaCount` to be a primitive type in the JSON string but got " + data['campaignCriteriaCount']);
        }
        // ensure the json data is a string
        if (data['channelsCount'] && !(typeof data['channelsCount'] === 'string' || data['channelsCount'] instanceof String)) {
            throw new Error("Expected the field `channelsCount` to be a primitive type in the JSON string but got " + data['channelsCount']);
        }
        // ensure the json data is a string
        if (data['negativeKeywordListsCount'] && !(typeof data['negativeKeywordListsCount'] === 'string' || data['negativeKeywordListsCount'] instanceof String)) {
            throw new Error("Expected the field `negativeKeywordListsCount` to be a primitive type in the JSON string but got " + data['negativeKeywordListsCount']);
        }
        // ensure the json data is a string
        if (data['negativelyTargetedChannelsCount'] && !(typeof data['negativelyTargetedChannelsCount'] === 'string' || data['negativelyTargetedChannelsCount'] instanceof String)) {
            throw new Error("Expected the field `negativelyTargetedChannelsCount` to be a primitive type in the JSON string but got " + data['negativelyTargetedChannelsCount']);
        }
        // ensure the json data is a string
        if (data['usedCampaignsCount'] && !(typeof data['usedCampaignsCount'] === 'string' || data['usedCampaignsCount'] instanceof String)) {
            throw new Error("Expected the field `usedCampaignsCount` to be a primitive type in the JSON string but got " + data['usedCampaignsCount']);
        }
        // ensure the json data is a string
        if (data['usedInsertionOrdersCount'] && !(typeof data['usedInsertionOrdersCount'] === 'string' || data['usedInsertionOrdersCount'] instanceof String)) {
            throw new Error("Expected the field `usedInsertionOrdersCount` to be a primitive type in the JSON string but got " + data['usedInsertionOrdersCount']);
        }
        // ensure the json data is a string
        if (data['usedLineItemsCount'] && !(typeof data['usedLineItemsCount'] === 'string' || data['usedLineItemsCount'] instanceof String)) {
            throw new Error("Expected the field `usedLineItemsCount` to be a primitive type in the JSON string but got " + data['usedLineItemsCount']);
        }

        return true;
    }


}



/**
 * The number of individual targeting options from the following targeting types that are assigned to a line item under this advertiser. These individual targeting options count towards the limit of 4500000 ad group targeting options per advertiser. Qualifying Targeting types: * Channels, URLs, apps, and collections * Demographic * Google Audiences, including Affinity, Custom Affinity, and In-market audiences * Inventory source * Keyword * Mobile app category * User lists * Video targeting * Viewability
 * @member {String} adGroupCriteriaCount
 */
AuditAdvertiserResponse.prototype['adGroupCriteriaCount'] = undefined;

/**
 * The number of individual targeting options from the following targeting types that are assigned to a line item under this advertiser. These individual targeting options count towards the limit of 900000 campaign targeting options per advertiser. Qualifying Targeting types: * Position * Browser * Connection speed * Day and time * Device and operating system * Digital content label * Sensitive categories * Environment * Geography, including business chains and proximity * ISP * Language * Third-party verification
 * @member {String} campaignCriteriaCount
 */
AuditAdvertiserResponse.prototype['campaignCriteriaCount'] = undefined;

/**
 * The number of channels created under this advertiser. These channels count towards the limit of 1000 channels per advertiser.
 * @member {String} channelsCount
 */
AuditAdvertiserResponse.prototype['channelsCount'] = undefined;

/**
 * The number of negative keyword lists created under this advertiser. These negative keyword lists count towards the limit of 20 negative keyword lists per advertiser.
 * @member {String} negativeKeywordListsCount
 */
AuditAdvertiserResponse.prototype['negativeKeywordListsCount'] = undefined;

/**
 * The number of negatively targeted channels created under this advertiser. These negatively targeted channels count towards the limit of 5 negatively targeted channels per advertiser.
 * @member {String} negativelyTargetedChannelsCount
 */
AuditAdvertiserResponse.prototype['negativelyTargetedChannelsCount'] = undefined;

/**
 * The number of ACTIVE and PAUSED campaigns under this advertiser. These campaigns count towards the limit of 9999 campaigns per advertiser.
 * @member {String} usedCampaignsCount
 */
AuditAdvertiserResponse.prototype['usedCampaignsCount'] = undefined;

/**
 * The number of ACTIVE, PAUSED and DRAFT insertion orders under this advertiser. These insertion orders count towards the limit of 9999 insertion orders per advertiser.
 * @member {String} usedInsertionOrdersCount
 */
AuditAdvertiserResponse.prototype['usedInsertionOrdersCount'] = undefined;

/**
 * The number of ACTIVE, PAUSED, and DRAFT line items under this advertiser. These line items count towards the limit of 9999 line items per advertiser.
 * @member {String} usedLineItemsCount
 */
AuditAdvertiserResponse.prototype['usedLineItemsCount'] = undefined;






export default AuditAdvertiserResponse;

