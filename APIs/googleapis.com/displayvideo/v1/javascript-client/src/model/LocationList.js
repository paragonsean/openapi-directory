/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LocationList model module.
 * @module model/LocationList
 * @version v1
 */
class LocationList {
    /**
     * Constructs a new <code>LocationList</code>.
     * A list of locations used for targeting.
     * @alias module:model/LocationList
     */
    constructor() { 
        
        LocationList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocationList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationList} obj Optional instance to populate.
     * @return {module:model/LocationList} The populated <code>LocationList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationList();

            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('locationListId')) {
                obj['locationListId'] = ApiClient.convertToType(data['locationListId'], 'String');
            }
            if (data.hasOwnProperty('locationType')) {
                obj['locationType'] = ApiClient.convertToType(data['locationType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocationList</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['advertiserId'] && !(typeof data['advertiserId'] === 'string' || data['advertiserId'] instanceof String)) {
            throw new Error("Expected the field `advertiserId` to be a primitive type in the JSON string but got " + data['advertiserId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['locationListId'] && !(typeof data['locationListId'] === 'string' || data['locationListId'] instanceof String)) {
            throw new Error("Expected the field `locationListId` to be a primitive type in the JSON string but got " + data['locationListId']);
        }
        // ensure the json data is a string
        if (data['locationType'] && !(typeof data['locationType'] === 'string' || data['locationType'] instanceof String)) {
            throw new Error("Expected the field `locationType` to be a primitive type in the JSON string but got " + data['locationType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Required. Immutable. The unique ID of the advertiser the location list belongs to.
 * @member {String} advertiserId
 */
LocationList.prototype['advertiserId'] = undefined;

/**
 * Required. The display name of the location list. Must be UTF-8 encoded with a maximum size of 240 bytes.
 * @member {String} displayName
 */
LocationList.prototype['displayName'] = undefined;

/**
 * Output only. The unique ID of the location list. Assigned by the system.
 * @member {String} locationListId
 */
LocationList.prototype['locationListId'] = undefined;

/**
 * Required. Immutable. The type of location. All locations in the list will share this type.
 * @member {module:model/LocationList.LocationTypeEnum} locationType
 */
LocationList.prototype['locationType'] = undefined;

/**
 * Output only. The resource name of the location list.
 * @member {String} name
 */
LocationList.prototype['name'] = undefined;





/**
 * Allowed values for the <code>locationType</code> property.
 * @enum {String}
 * @readonly
 */
LocationList['LocationTypeEnum'] = {

    /**
     * value: "TARGETING_LOCATION_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "TARGETING_LOCATION_TYPE_UNSPECIFIED",

    /**
     * value: "TARGETING_LOCATION_TYPE_PROXIMITY"
     * @const
     */
    "PROXIMITY": "TARGETING_LOCATION_TYPE_PROXIMITY",

    /**
     * value: "TARGETING_LOCATION_TYPE_REGIONAL"
     * @const
     */
    "REGIONAL": "TARGETING_LOCATION_TYPE_REGIONAL"
};



export default LocationList;

