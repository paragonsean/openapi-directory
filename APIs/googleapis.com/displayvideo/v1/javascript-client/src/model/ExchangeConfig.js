/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExchangeConfigEnabledExchange from './ExchangeConfigEnabledExchange';

/**
 * The ExchangeConfig model module.
 * @module model/ExchangeConfig
 * @version v1
 */
class ExchangeConfig {
    /**
     * Constructs a new <code>ExchangeConfig</code>.
     * Settings that control which exchanges are enabled for a partner.
     * @alias module:model/ExchangeConfig
     */
    constructor() { 
        
        ExchangeConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExchangeConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExchangeConfig} obj Optional instance to populate.
     * @return {module:model/ExchangeConfig} The populated <code>ExchangeConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExchangeConfig();

            if (data.hasOwnProperty('enabledExchanges')) {
                obj['enabledExchanges'] = ApiClient.convertToType(data['enabledExchanges'], [ExchangeConfigEnabledExchange]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExchangeConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExchangeConfig</code>.
     */
    static validateJSON(data) {
        if (data['enabledExchanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['enabledExchanges'])) {
                throw new Error("Expected the field `enabledExchanges` to be an array in the JSON data but got " + data['enabledExchanges']);
            }
            // validate the optional field `enabledExchanges` (array)
            for (const item of data['enabledExchanges']) {
                ExchangeConfigEnabledExchange.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * All enabled exchanges in the partner. Duplicate enabled exchanges will be ignored.
 * @member {Array.<module:model/ExchangeConfigEnabledExchange>} enabledExchanges
 */
ExchangeConfig.prototype['enabledExchanges'] = undefined;






export default ExchangeConfig;

