/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateRange from './DateRange';

/**
 * The CampaignFlight model module.
 * @module model/CampaignFlight
 * @version v1
 */
class CampaignFlight {
    /**
     * Constructs a new <code>CampaignFlight</code>.
     * Settings that track the planned spend and duration of a campaign.
     * @alias module:model/CampaignFlight
     */
    constructor() { 
        
        CampaignFlight.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CampaignFlight</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CampaignFlight} obj Optional instance to populate.
     * @return {module:model/CampaignFlight} The populated <code>CampaignFlight</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CampaignFlight();

            if (data.hasOwnProperty('plannedDates')) {
                obj['plannedDates'] = DateRange.constructFromObject(data['plannedDates']);
            }
            if (data.hasOwnProperty('plannedSpendAmountMicros')) {
                obj['plannedSpendAmountMicros'] = ApiClient.convertToType(data['plannedSpendAmountMicros'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CampaignFlight</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CampaignFlight</code>.
     */
    static validateJSON(data) {
        // validate the optional field `plannedDates`
        if (data['plannedDates']) { // data not null
          DateRange.validateJSON(data['plannedDates']);
        }
        // ensure the json data is a string
        if (data['plannedSpendAmountMicros'] && !(typeof data['plannedSpendAmountMicros'] === 'string' || data['plannedSpendAmountMicros'] instanceof String)) {
            throw new Error("Expected the field `plannedSpendAmountMicros` to be a primitive type in the JSON string but got " + data['plannedSpendAmountMicros']);
        }

        return true;
    }


}



/**
 * @member {module:model/DateRange} plannedDates
 */
CampaignFlight.prototype['plannedDates'] = undefined;

/**
 * The amount the campaign is expected to spend for its given planned_dates. This will not limit serving, but will be used for tracking spend in the DV360 UI. The amount is in micros. Must be greater than or equal to 0. For example, 500000000 represents 500 standard units of the currency.
 * @member {String} plannedSpendAmountMicros
 */
CampaignFlight.prototype['plannedSpendAmountMicros'] = undefined;






export default CampaignFlight;

