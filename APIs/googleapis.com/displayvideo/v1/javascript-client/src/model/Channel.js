/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Channel model module.
 * @module model/Channel
 * @version v1
 */
class Channel {
    /**
     * Constructs a new <code>Channel</code>.
     * A single channel. Channels are custom groups of related websites and apps.
     * @alias module:model/Channel
     */
    constructor() { 
        
        Channel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Channel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Channel} obj Optional instance to populate.
     * @return {module:model/Channel} The populated <code>Channel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Channel();

            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], 'String');
            }
            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('negativelyTargetedLineItemCount')) {
                obj['negativelyTargetedLineItemCount'] = ApiClient.convertToType(data['negativelyTargetedLineItemCount'], 'String');
            }
            if (data.hasOwnProperty('partnerId')) {
                obj['partnerId'] = ApiClient.convertToType(data['partnerId'], 'String');
            }
            if (data.hasOwnProperty('positivelyTargetedLineItemCount')) {
                obj['positivelyTargetedLineItemCount'] = ApiClient.convertToType(data['positivelyTargetedLineItemCount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Channel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Channel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['advertiserId'] && !(typeof data['advertiserId'] === 'string' || data['advertiserId'] instanceof String)) {
            throw new Error("Expected the field `advertiserId` to be a primitive type in the JSON string but got " + data['advertiserId']);
        }
        // ensure the json data is a string
        if (data['channelId'] && !(typeof data['channelId'] === 'string' || data['channelId'] instanceof String)) {
            throw new Error("Expected the field `channelId` to be a primitive type in the JSON string but got " + data['channelId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['negativelyTargetedLineItemCount'] && !(typeof data['negativelyTargetedLineItemCount'] === 'string' || data['negativelyTargetedLineItemCount'] instanceof String)) {
            throw new Error("Expected the field `negativelyTargetedLineItemCount` to be a primitive type in the JSON string but got " + data['negativelyTargetedLineItemCount']);
        }
        // ensure the json data is a string
        if (data['partnerId'] && !(typeof data['partnerId'] === 'string' || data['partnerId'] instanceof String)) {
            throw new Error("Expected the field `partnerId` to be a primitive type in the JSON string but got " + data['partnerId']);
        }
        // ensure the json data is a string
        if (data['positivelyTargetedLineItemCount'] && !(typeof data['positivelyTargetedLineItemCount'] === 'string' || data['positivelyTargetedLineItemCount'] instanceof String)) {
            throw new Error("Expected the field `positivelyTargetedLineItemCount` to be a primitive type in the JSON string but got " + data['positivelyTargetedLineItemCount']);
        }

        return true;
    }


}



/**
 * The ID of the advertiser that owns the channel.
 * @member {String} advertiserId
 */
Channel.prototype['advertiserId'] = undefined;

/**
 * Output only. The unique ID of the channel. Assigned by the system.
 * @member {String} channelId
 */
Channel.prototype['channelId'] = undefined;

/**
 * Required. The display name of the channel. Must be UTF-8 encoded with a maximum length of 240 bytes.
 * @member {String} displayName
 */
Channel.prototype['displayName'] = undefined;

/**
 * Output only. The resource name of the channel.
 * @member {String} name
 */
Channel.prototype['name'] = undefined;

/**
 * Output only. Number of line items that are directly targeting this channel negatively.
 * @member {String} negativelyTargetedLineItemCount
 */
Channel.prototype['negativelyTargetedLineItemCount'] = undefined;

/**
 * The ID of the partner that owns the channel.
 * @member {String} partnerId
 */
Channel.prototype['partnerId'] = undefined;

/**
 * Output only. Number of line items that are directly targeting this channel positively.
 * @member {String} positivelyTargetedLineItemCount
 */
Channel.prototype['positivelyTargetedLineItemCount'] = undefined;






export default Channel;

