/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ParentEntityFilter model module.
 * @module model/ParentEntityFilter
 * @version v1
 */
class ParentEntityFilter {
    /**
     * Constructs a new <code>ParentEntityFilter</code>.
     * A filtering option that filters on selected file types belonging to a chosen set of filter entities.
     * @alias module:model/ParentEntityFilter
     */
    constructor() { 
        
        ParentEntityFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ParentEntityFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParentEntityFilter} obj Optional instance to populate.
     * @return {module:model/ParentEntityFilter} The populated <code>ParentEntityFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParentEntityFilter();

            if (data.hasOwnProperty('fileType')) {
                obj['fileType'] = ApiClient.convertToType(data['fileType'], ['String']);
            }
            if (data.hasOwnProperty('filterIds')) {
                obj['filterIds'] = ApiClient.convertToType(data['filterIds'], ['String']);
            }
            if (data.hasOwnProperty('filterType')) {
                obj['filterType'] = ApiClient.convertToType(data['filterType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParentEntityFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParentEntityFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['fileType'])) {
            throw new Error("Expected the field `fileType` to be an array in the JSON data but got " + data['fileType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['filterIds'])) {
            throw new Error("Expected the field `filterIds` to be an array in the JSON data but got " + data['filterIds']);
        }
        // ensure the json data is a string
        if (data['filterType'] && !(typeof data['filterType'] === 'string' || data['filterType'] instanceof String)) {
            throw new Error("Expected the field `filterType` to be a primitive type in the JSON string but got " + data['filterType']);
        }

        return true;
    }


}



/**
 * Required. File types that will be returned.
 * @member {Array.<module:model/ParentEntityFilter.FileTypeEnum>} fileType
 */
ParentEntityFilter.prototype['fileType'] = undefined;

/**
 * The IDs of the specified filter type. This is used to filter entities to fetch. If filter type is not `FILTER_TYPE_NONE`, at least one ID must be specified.
 * @member {Array.<String>} filterIds
 */
ParentEntityFilter.prototype['filterIds'] = undefined;

/**
 * Required. Filter type used to filter fetched entities.
 * @member {module:model/ParentEntityFilter.FilterTypeEnum} filterType
 */
ParentEntityFilter.prototype['filterType'] = undefined;





/**
 * Allowed values for the <code>fileType</code> property.
 * @enum {String}
 * @readonly
 */
ParentEntityFilter['FileTypeEnum'] = {

    /**
     * value: "FILE_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "FILE_TYPE_UNSPECIFIED",

    /**
     * value: "FILE_TYPE_CAMPAIGN"
     * @const
     */
    "CAMPAIGN": "FILE_TYPE_CAMPAIGN",

    /**
     * value: "FILE_TYPE_MEDIA_PRODUCT"
     * @const
     */
    "MEDIA_PRODUCT": "FILE_TYPE_MEDIA_PRODUCT",

    /**
     * value: "FILE_TYPE_INSERTION_ORDER"
     * @const
     */
    "INSERTION_ORDER": "FILE_TYPE_INSERTION_ORDER",

    /**
     * value: "FILE_TYPE_LINE_ITEM"
     * @const
     */
    "LINE_ITEM": "FILE_TYPE_LINE_ITEM",

    /**
     * value: "FILE_TYPE_AD_GROUP"
     * @const
     */
    "AD_GROUP": "FILE_TYPE_AD_GROUP",

    /**
     * value: "FILE_TYPE_AD"
     * @const
     */
    "AD": "FILE_TYPE_AD"
};


/**
 * Allowed values for the <code>filterType</code> property.
 * @enum {String}
 * @readonly
 */
ParentEntityFilter['FilterTypeEnum'] = {

    /**
     * value: "FILTER_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "FILTER_TYPE_UNSPECIFIED",

    /**
     * value: "FILTER_TYPE_NONE"
     * @const
     */
    "NONE": "FILTER_TYPE_NONE",

    /**
     * value: "FILTER_TYPE_ADVERTISER_ID"
     * @const
     */
    "ADVERTISER_ID": "FILTER_TYPE_ADVERTISER_ID",

    /**
     * value: "FILTER_TYPE_CAMPAIGN_ID"
     * @const
     */
    "CAMPAIGN_ID": "FILTER_TYPE_CAMPAIGN_ID",

    /**
     * value: "FILTER_TYPE_MEDIA_PRODUCT_ID"
     * @const
     */
    "MEDIA_PRODUCT_ID": "FILTER_TYPE_MEDIA_PRODUCT_ID",

    /**
     * value: "FILTER_TYPE_INSERTION_ORDER_ID"
     * @const
     */
    "INSERTION_ORDER_ID": "FILTER_TYPE_INSERTION_ORDER_ID",

    /**
     * value: "FILTER_TYPE_LINE_ITEM_ID"
     * @const
     */
    "LINE_ITEM_ID": "FILTER_TYPE_LINE_ITEM_ID"
};



export default ParentEntityFilter;

