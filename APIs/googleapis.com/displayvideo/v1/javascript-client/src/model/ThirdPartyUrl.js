/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ThirdPartyUrl model module.
 * @module model/ThirdPartyUrl
 * @version v1
 */
class ThirdPartyUrl {
    /**
     * Constructs a new <code>ThirdPartyUrl</code>.
     * Tracking URLs from third parties to track interactions with an audio or a video creative.
     * @alias module:model/ThirdPartyUrl
     */
    constructor() { 
        
        ThirdPartyUrl.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ThirdPartyUrl</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ThirdPartyUrl} obj Optional instance to populate.
     * @return {module:model/ThirdPartyUrl} The populated <code>ThirdPartyUrl</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ThirdPartyUrl();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ThirdPartyUrl</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ThirdPartyUrl</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The type of interaction needs to be tracked by the tracking URL
 * @member {module:model/ThirdPartyUrl.TypeEnum} type
 */
ThirdPartyUrl.prototype['type'] = undefined;

/**
 * Tracking URL used to track the interaction. Provide a URL with optional path or query string, beginning with `https:`. For example, https://www.example.com/path
 * @member {String} url
 */
ThirdPartyUrl.prototype['url'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ThirdPartyUrl['TypeEnum'] = {

    /**
     * value: "THIRD_PARTY_URL_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "THIRD_PARTY_URL_TYPE_UNSPECIFIED",

    /**
     * value: "THIRD_PARTY_URL_TYPE_IMPRESSION"
     * @const
     */
    "IMPRESSION": "THIRD_PARTY_URL_TYPE_IMPRESSION",

    /**
     * value: "THIRD_PARTY_URL_TYPE_CLICK_TRACKING"
     * @const
     */
    "CLICK_TRACKING": "THIRD_PARTY_URL_TYPE_CLICK_TRACKING",

    /**
     * value: "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_START"
     * @const
     */
    "AUDIO_VIDEO_START": "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_START",

    /**
     * value: "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_FIRST_QUARTILE"
     * @const
     */
    "AUDIO_VIDEO_FIRST_QUARTILE": "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_FIRST_QUARTILE",

    /**
     * value: "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_MIDPOINT"
     * @const
     */
    "AUDIO_VIDEO_MIDPOINT": "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_MIDPOINT",

    /**
     * value: "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_THIRD_QUARTILE"
     * @const
     */
    "AUDIO_VIDEO_THIRD_QUARTILE": "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_THIRD_QUARTILE",

    /**
     * value: "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_COMPLETE"
     * @const
     */
    "AUDIO_VIDEO_COMPLETE": "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_COMPLETE",

    /**
     * value: "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_MUTE"
     * @const
     */
    "AUDIO_VIDEO_MUTE": "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_MUTE",

    /**
     * value: "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_PAUSE"
     * @const
     */
    "AUDIO_VIDEO_PAUSE": "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_PAUSE",

    /**
     * value: "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_REWIND"
     * @const
     */
    "AUDIO_VIDEO_REWIND": "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_REWIND",

    /**
     * value: "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_FULLSCREEN"
     * @const
     */
    "AUDIO_VIDEO_FULLSCREEN": "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_FULLSCREEN",

    /**
     * value: "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_STOP"
     * @const
     */
    "AUDIO_VIDEO_STOP": "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_STOP",

    /**
     * value: "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_CUSTOM"
     * @const
     */
    "AUDIO_VIDEO_CUSTOM": "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_CUSTOM",

    /**
     * value: "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_SKIP"
     * @const
     */
    "AUDIO_VIDEO_SKIP": "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_SKIP",

    /**
     * value: "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_PROGRESS"
     * @const
     */
    "AUDIO_VIDEO_PROGRESS": "THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_PROGRESS"
};



export default ThirdPartyUrl;

