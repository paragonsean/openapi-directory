/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GeoRegionAssignedTargetingOptionDetails model module.
 * @module model/GeoRegionAssignedTargetingOptionDetails
 * @version v1
 */
class GeoRegionAssignedTargetingOptionDetails {
    /**
     * Constructs a new <code>GeoRegionAssignedTargetingOptionDetails</code>.
     * Details for assigned geographic region targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is &#x60;TARGETING_TYPE_GEO_REGION&#x60;.
     * @alias module:model/GeoRegionAssignedTargetingOptionDetails
     */
    constructor() { 
        
        GeoRegionAssignedTargetingOptionDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GeoRegionAssignedTargetingOptionDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoRegionAssignedTargetingOptionDetails} obj Optional instance to populate.
     * @return {module:model/GeoRegionAssignedTargetingOptionDetails} The populated <code>GeoRegionAssignedTargetingOptionDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoRegionAssignedTargetingOptionDetails();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('geoRegionType')) {
                obj['geoRegionType'] = ApiClient.convertToType(data['geoRegionType'], 'String');
            }
            if (data.hasOwnProperty('negative')) {
                obj['negative'] = ApiClient.convertToType(data['negative'], 'Boolean');
            }
            if (data.hasOwnProperty('targetingOptionId')) {
                obj['targetingOptionId'] = ApiClient.convertToType(data['targetingOptionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeoRegionAssignedTargetingOptionDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeoRegionAssignedTargetingOptionDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['geoRegionType'] && !(typeof data['geoRegionType'] === 'string' || data['geoRegionType'] instanceof String)) {
            throw new Error("Expected the field `geoRegionType` to be a primitive type in the JSON string but got " + data['geoRegionType']);
        }
        // ensure the json data is a string
        if (data['targetingOptionId'] && !(typeof data['targetingOptionId'] === 'string' || data['targetingOptionId'] instanceof String)) {
            throw new Error("Expected the field `targetingOptionId` to be a primitive type in the JSON string but got " + data['targetingOptionId']);
        }

        return true;
    }


}



/**
 * Output only. The display name of the geographic region (e.g., \"Ontario, Canada\").
 * @member {String} displayName
 */
GeoRegionAssignedTargetingOptionDetails.prototype['displayName'] = undefined;

/**
 * Output only. The type of geographic region targeting.
 * @member {module:model/GeoRegionAssignedTargetingOptionDetails.GeoRegionTypeEnum} geoRegionType
 */
GeoRegionAssignedTargetingOptionDetails.prototype['geoRegionType'] = undefined;

/**
 * Indicates if this option is being negatively targeted.
 * @member {Boolean} negative
 */
GeoRegionAssignedTargetingOptionDetails.prototype['negative'] = undefined;

/**
 * Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_GEO_REGION`.
 * @member {String} targetingOptionId
 */
GeoRegionAssignedTargetingOptionDetails.prototype['targetingOptionId'] = undefined;





/**
 * Allowed values for the <code>geoRegionType</code> property.
 * @enum {String}
 * @readonly
 */
GeoRegionAssignedTargetingOptionDetails['GeoRegionTypeEnum'] = {

    /**
     * value: "GEO_REGION_TYPE_UNKNOWN"
     * @const
     */
    "UNKNOWN": "GEO_REGION_TYPE_UNKNOWN",

    /**
     * value: "GEO_REGION_TYPE_OTHER"
     * @const
     */
    "OTHER": "GEO_REGION_TYPE_OTHER",

    /**
     * value: "GEO_REGION_TYPE_COUNTRY"
     * @const
     */
    "COUNTRY": "GEO_REGION_TYPE_COUNTRY",

    /**
     * value: "GEO_REGION_TYPE_REGION"
     * @const
     */
    "REGION": "GEO_REGION_TYPE_REGION",

    /**
     * value: "GEO_REGION_TYPE_TERRITORY"
     * @const
     */
    "TERRITORY": "GEO_REGION_TYPE_TERRITORY",

    /**
     * value: "GEO_REGION_TYPE_PROVINCE"
     * @const
     */
    "PROVINCE": "GEO_REGION_TYPE_PROVINCE",

    /**
     * value: "GEO_REGION_TYPE_STATE"
     * @const
     */
    "STATE": "GEO_REGION_TYPE_STATE",

    /**
     * value: "GEO_REGION_TYPE_PREFECTURE"
     * @const
     */
    "PREFECTURE": "GEO_REGION_TYPE_PREFECTURE",

    /**
     * value: "GEO_REGION_TYPE_GOVERNORATE"
     * @const
     */
    "GOVERNORATE": "GEO_REGION_TYPE_GOVERNORATE",

    /**
     * value: "GEO_REGION_TYPE_CANTON"
     * @const
     */
    "CANTON": "GEO_REGION_TYPE_CANTON",

    /**
     * value: "GEO_REGION_TYPE_UNION_TERRITORY"
     * @const
     */
    "UNION_TERRITORY": "GEO_REGION_TYPE_UNION_TERRITORY",

    /**
     * value: "GEO_REGION_TYPE_AUTONOMOUS_COMMUNITY"
     * @const
     */
    "AUTONOMOUS_COMMUNITY": "GEO_REGION_TYPE_AUTONOMOUS_COMMUNITY",

    /**
     * value: "GEO_REGION_TYPE_DMA_REGION"
     * @const
     */
    "DMA_REGION": "GEO_REGION_TYPE_DMA_REGION",

    /**
     * value: "GEO_REGION_TYPE_METRO"
     * @const
     */
    "METRO": "GEO_REGION_TYPE_METRO",

    /**
     * value: "GEO_REGION_TYPE_CONGRESSIONAL_DISTRICT"
     * @const
     */
    "CONGRESSIONAL_DISTRICT": "GEO_REGION_TYPE_CONGRESSIONAL_DISTRICT",

    /**
     * value: "GEO_REGION_TYPE_COUNTY"
     * @const
     */
    "COUNTY": "GEO_REGION_TYPE_COUNTY",

    /**
     * value: "GEO_REGION_TYPE_MUNICIPALITY"
     * @const
     */
    "MUNICIPALITY": "GEO_REGION_TYPE_MUNICIPALITY",

    /**
     * value: "GEO_REGION_TYPE_CITY"
     * @const
     */
    "CITY": "GEO_REGION_TYPE_CITY",

    /**
     * value: "GEO_REGION_TYPE_POSTAL_CODE"
     * @const
     */
    "POSTAL_CODE": "GEO_REGION_TYPE_POSTAL_CODE",

    /**
     * value: "GEO_REGION_TYPE_DEPARTMENT"
     * @const
     */
    "DEPARTMENT": "GEO_REGION_TYPE_DEPARTMENT",

    /**
     * value: "GEO_REGION_TYPE_AIRPORT"
     * @const
     */
    "AIRPORT": "GEO_REGION_TYPE_AIRPORT",

    /**
     * value: "GEO_REGION_TYPE_TV_REGION"
     * @const
     */
    "TV_REGION": "GEO_REGION_TYPE_TV_REGION",

    /**
     * value: "GEO_REGION_TYPE_OKRUG"
     * @const
     */
    "OKRUG": "GEO_REGION_TYPE_OKRUG",

    /**
     * value: "GEO_REGION_TYPE_BOROUGH"
     * @const
     */
    "BOROUGH": "GEO_REGION_TYPE_BOROUGH",

    /**
     * value: "GEO_REGION_TYPE_CITY_REGION"
     * @const
     */
    "CITY_REGION": "GEO_REGION_TYPE_CITY_REGION",

    /**
     * value: "GEO_REGION_TYPE_ARRONDISSEMENT"
     * @const
     */
    "ARRONDISSEMENT": "GEO_REGION_TYPE_ARRONDISSEMENT",

    /**
     * value: "GEO_REGION_TYPE_NEIGHBORHOOD"
     * @const
     */
    "NEIGHBORHOOD": "GEO_REGION_TYPE_NEIGHBORHOOD",

    /**
     * value: "GEO_REGION_TYPE_UNIVERSITY"
     * @const
     */
    "UNIVERSITY": "GEO_REGION_TYPE_UNIVERSITY",

    /**
     * value: "GEO_REGION_TYPE_DISTRICT"
     * @const
     */
    "DISTRICT": "GEO_REGION_TYPE_DISTRICT"
};



export default GeoRegionAssignedTargetingOptionDetails;

