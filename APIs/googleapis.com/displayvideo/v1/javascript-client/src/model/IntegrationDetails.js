/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IntegrationDetails model module.
 * @module model/IntegrationDetails
 * @version v1
 */
class IntegrationDetails {
    /**
     * Constructs a new <code>IntegrationDetails</code>.
     * Integration details of an entry.
     * @alias module:model/IntegrationDetails
     */
    constructor() { 
        
        IntegrationDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IntegrationDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntegrationDetails} obj Optional instance to populate.
     * @return {module:model/IntegrationDetails} The populated <code>IntegrationDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntegrationDetails();

            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
            if (data.hasOwnProperty('integrationCode')) {
                obj['integrationCode'] = ApiClient.convertToType(data['integrationCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntegrationDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntegrationDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['details'] && !(typeof data['details'] === 'string' || data['details'] instanceof String)) {
            throw new Error("Expected the field `details` to be a primitive type in the JSON string but got " + data['details']);
        }
        // ensure the json data is a string
        if (data['integrationCode'] && !(typeof data['integrationCode'] === 'string' || data['integrationCode'] instanceof String)) {
            throw new Error("Expected the field `integrationCode` to be a primitive type in the JSON string but got " + data['integrationCode']);
        }

        return true;
    }


}



/**
 * Additional details of the entry in string format. Must be UTF-8 encoded with a length of no more than 1000 characters.
 * @member {String} details
 */
IntegrationDetails.prototype['details'] = undefined;

/**
 * An external identifier to be associated with the entry. The integration code will show up together with the entry in many places in the system, for example, reporting. Must be UTF-8 encoded with a length of no more than 500 characters.
 * @member {String} integrationCode
 */
IntegrationDetails.prototype['integrationCode'] = undefined;






export default IntegrationDetails;

