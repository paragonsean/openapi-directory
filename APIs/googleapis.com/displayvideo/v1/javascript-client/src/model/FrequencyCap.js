/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FrequencyCap model module.
 * @module model/FrequencyCap
 * @version v1
 */
class FrequencyCap {
    /**
     * Constructs a new <code>FrequencyCap</code>.
     * Settings that control the number of times a user may be shown with the same ad during a given time period.
     * @alias module:model/FrequencyCap
     */
    constructor() { 
        
        FrequencyCap.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FrequencyCap</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FrequencyCap} obj Optional instance to populate.
     * @return {module:model/FrequencyCap} The populated <code>FrequencyCap</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FrequencyCap();

            if (data.hasOwnProperty('maxImpressions')) {
                obj['maxImpressions'] = ApiClient.convertToType(data['maxImpressions'], 'Number');
            }
            if (data.hasOwnProperty('timeUnit')) {
                obj['timeUnit'] = ApiClient.convertToType(data['timeUnit'], 'String');
            }
            if (data.hasOwnProperty('timeUnitCount')) {
                obj['timeUnitCount'] = ApiClient.convertToType(data['timeUnitCount'], 'Number');
            }
            if (data.hasOwnProperty('unlimited')) {
                obj['unlimited'] = ApiClient.convertToType(data['unlimited'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FrequencyCap</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FrequencyCap</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['timeUnit'] && !(typeof data['timeUnit'] === 'string' || data['timeUnit'] instanceof String)) {
            throw new Error("Expected the field `timeUnit` to be a primitive type in the JSON string but got " + data['timeUnit']);
        }

        return true;
    }


}



/**
 * The maximum number of times a user may be shown the same ad during this period. Must be greater than 0. Required when unlimited is `false` and max_views is not set.
 * @member {Number} maxImpressions
 */
FrequencyCap.prototype['maxImpressions'] = undefined;

/**
 * The time unit in which the frequency cap will be applied. Required when unlimited is `false`.
 * @member {module:model/FrequencyCap.TimeUnitEnum} timeUnit
 */
FrequencyCap.prototype['timeUnit'] = undefined;

/**
 * The number of time_unit the frequency cap will last. Required when unlimited is `false`. The following restrictions apply based on the value of time_unit: * `TIME_UNIT_LIFETIME` - this field is output only and will default to 1 * `TIME_UNIT_MONTHS` - must be between 1 and 2 * `TIME_UNIT_WEEKS` - must be between 1 and 4 * `TIME_UNIT_DAYS` - must be between 1 and 6 * `TIME_UNIT_HOURS` - must be between 1 and 23 * `TIME_UNIT_MINUTES` - must be between 1 and 59
 * @member {Number} timeUnitCount
 */
FrequencyCap.prototype['timeUnitCount'] = undefined;

/**
 * Whether unlimited frequency capping is applied. When this field is set to `true`, the remaining frequency cap fields are not applicable.
 * @member {Boolean} unlimited
 */
FrequencyCap.prototype['unlimited'] = undefined;





/**
 * Allowed values for the <code>timeUnit</code> property.
 * @enum {String}
 * @readonly
 */
FrequencyCap['TimeUnitEnum'] = {

    /**
     * value: "TIME_UNIT_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "TIME_UNIT_UNSPECIFIED",

    /**
     * value: "TIME_UNIT_LIFETIME"
     * @const
     */
    "LIFETIME": "TIME_UNIT_LIFETIME",

    /**
     * value: "TIME_UNIT_MONTHS"
     * @const
     */
    "MONTHS": "TIME_UNIT_MONTHS",

    /**
     * value: "TIME_UNIT_WEEKS"
     * @const
     */
    "WEEKS": "TIME_UNIT_WEEKS",

    /**
     * value: "TIME_UNIT_DAYS"
     * @const
     */
    "DAYS": "TIME_UNIT_DAYS",

    /**
     * value: "TIME_UNIT_HOURS"
     * @const
     */
    "HOURS": "TIME_UNIT_HOURS",

    /**
     * value: "TIME_UNIT_MINUTES"
     * @const
     */
    "MINUTES": "TIME_UNIT_MINUTES"
};



export default FrequencyCap;

