/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_assigned_user_roles_isSet = false;
    m_assigned_user_roles_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_last_login_time_isSet = false;
    m_last_login_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_assigned_user_roles_isValid = ::OpenAPI::fromJsonValue(m_assigned_user_roles, json[QString("assignedUserRoles")]);
    m_assigned_user_roles_isSet = !json[QString("assignedUserRoles")].isNull() && m_assigned_user_roles_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_last_login_time_isValid = ::OpenAPI::fromJsonValue(m_last_login_time, json[QString("lastLoginTime")]);
    m_last_login_time_isSet = !json[QString("lastLoginTime")].isNull() && m_last_login_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_assigned_user_roles.size() > 0) {
        obj.insert(QString("assignedUserRoles"), ::OpenAPI::toJsonValue(m_assigned_user_roles));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_last_login_time_isSet) {
        obj.insert(QString("lastLoginTime"), ::OpenAPI::toJsonValue(m_last_login_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QList<OAIAssignedUserRole> OAIUser::getAssignedUserRoles() const {
    return m_assigned_user_roles;
}
void OAIUser::setAssignedUserRoles(const QList<OAIAssignedUserRole> &assigned_user_roles) {
    m_assigned_user_roles = assigned_user_roles;
    m_assigned_user_roles_isSet = true;
}

bool OAIUser::is_assigned_user_roles_Set() const{
    return m_assigned_user_roles_isSet;
}

bool OAIUser::is_assigned_user_roles_Valid() const{
    return m_assigned_user_roles_isValid;
}

QString OAIUser::getDisplayName() const {
    return m_display_name;
}
void OAIUser::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUser::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUser::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUser::getLastLoginTime() const {
    return m_last_login_time;
}
void OAIUser::setLastLoginTime(const QString &last_login_time) {
    m_last_login_time = last_login_time;
    m_last_login_time_isSet = true;
}

bool OAIUser::is_last_login_time_Set() const{
    return m_last_login_time_isSet;
}

bool OAIUser::is_last_login_time_Valid() const{
    return m_last_login_time_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser::getUserId() const {
    return m_user_id;
}
void OAIUser::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUser::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUser::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assigned_user_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
