/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBudgetSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBudgetSummary::OAIBudgetSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBudgetSummary::OAIBudgetSummary() {
    this->initializeModel();
}

OAIBudgetSummary::~OAIBudgetSummary() {}

void OAIBudgetSummary::initializeModel() {

    m_external_budget_id_isSet = false;
    m_external_budget_id_isValid = false;

    m_pre_tax_amount_micros_isSet = false;
    m_pre_tax_amount_micros_isValid = false;

    m_prisma_cpe_code_isSet = false;
    m_prisma_cpe_code_isValid = false;

    m_tax_amount_micros_isSet = false;
    m_tax_amount_micros_isValid = false;

    m_total_amount_micros_isSet = false;
    m_total_amount_micros_isValid = false;
}

void OAIBudgetSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBudgetSummary::fromJsonObject(QJsonObject json) {

    m_external_budget_id_isValid = ::OpenAPI::fromJsonValue(m_external_budget_id, json[QString("externalBudgetId")]);
    m_external_budget_id_isSet = !json[QString("externalBudgetId")].isNull() && m_external_budget_id_isValid;

    m_pre_tax_amount_micros_isValid = ::OpenAPI::fromJsonValue(m_pre_tax_amount_micros, json[QString("preTaxAmountMicros")]);
    m_pre_tax_amount_micros_isSet = !json[QString("preTaxAmountMicros")].isNull() && m_pre_tax_amount_micros_isValid;

    m_prisma_cpe_code_isValid = ::OpenAPI::fromJsonValue(m_prisma_cpe_code, json[QString("prismaCpeCode")]);
    m_prisma_cpe_code_isSet = !json[QString("prismaCpeCode")].isNull() && m_prisma_cpe_code_isValid;

    m_tax_amount_micros_isValid = ::OpenAPI::fromJsonValue(m_tax_amount_micros, json[QString("taxAmountMicros")]);
    m_tax_amount_micros_isSet = !json[QString("taxAmountMicros")].isNull() && m_tax_amount_micros_isValid;

    m_total_amount_micros_isValid = ::OpenAPI::fromJsonValue(m_total_amount_micros, json[QString("totalAmountMicros")]);
    m_total_amount_micros_isSet = !json[QString("totalAmountMicros")].isNull() && m_total_amount_micros_isValid;
}

QString OAIBudgetSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBudgetSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_external_budget_id_isSet) {
        obj.insert(QString("externalBudgetId"), ::OpenAPI::toJsonValue(m_external_budget_id));
    }
    if (m_pre_tax_amount_micros_isSet) {
        obj.insert(QString("preTaxAmountMicros"), ::OpenAPI::toJsonValue(m_pre_tax_amount_micros));
    }
    if (m_prisma_cpe_code.isSet()) {
        obj.insert(QString("prismaCpeCode"), ::OpenAPI::toJsonValue(m_prisma_cpe_code));
    }
    if (m_tax_amount_micros_isSet) {
        obj.insert(QString("taxAmountMicros"), ::OpenAPI::toJsonValue(m_tax_amount_micros));
    }
    if (m_total_amount_micros_isSet) {
        obj.insert(QString("totalAmountMicros"), ::OpenAPI::toJsonValue(m_total_amount_micros));
    }
    return obj;
}

QString OAIBudgetSummary::getExternalBudgetId() const {
    return m_external_budget_id;
}
void OAIBudgetSummary::setExternalBudgetId(const QString &external_budget_id) {
    m_external_budget_id = external_budget_id;
    m_external_budget_id_isSet = true;
}

bool OAIBudgetSummary::is_external_budget_id_Set() const{
    return m_external_budget_id_isSet;
}

bool OAIBudgetSummary::is_external_budget_id_Valid() const{
    return m_external_budget_id_isValid;
}

QString OAIBudgetSummary::getPreTaxAmountMicros() const {
    return m_pre_tax_amount_micros;
}
void OAIBudgetSummary::setPreTaxAmountMicros(const QString &pre_tax_amount_micros) {
    m_pre_tax_amount_micros = pre_tax_amount_micros;
    m_pre_tax_amount_micros_isSet = true;
}

bool OAIBudgetSummary::is_pre_tax_amount_micros_Set() const{
    return m_pre_tax_amount_micros_isSet;
}

bool OAIBudgetSummary::is_pre_tax_amount_micros_Valid() const{
    return m_pre_tax_amount_micros_isValid;
}

OAIPrismaCpeCode OAIBudgetSummary::getPrismaCpeCode() const {
    return m_prisma_cpe_code;
}
void OAIBudgetSummary::setPrismaCpeCode(const OAIPrismaCpeCode &prisma_cpe_code) {
    m_prisma_cpe_code = prisma_cpe_code;
    m_prisma_cpe_code_isSet = true;
}

bool OAIBudgetSummary::is_prisma_cpe_code_Set() const{
    return m_prisma_cpe_code_isSet;
}

bool OAIBudgetSummary::is_prisma_cpe_code_Valid() const{
    return m_prisma_cpe_code_isValid;
}

QString OAIBudgetSummary::getTaxAmountMicros() const {
    return m_tax_amount_micros;
}
void OAIBudgetSummary::setTaxAmountMicros(const QString &tax_amount_micros) {
    m_tax_amount_micros = tax_amount_micros;
    m_tax_amount_micros_isSet = true;
}

bool OAIBudgetSummary::is_tax_amount_micros_Set() const{
    return m_tax_amount_micros_isSet;
}

bool OAIBudgetSummary::is_tax_amount_micros_Valid() const{
    return m_tax_amount_micros_isValid;
}

QString OAIBudgetSummary::getTotalAmountMicros() const {
    return m_total_amount_micros;
}
void OAIBudgetSummary::setTotalAmountMicros(const QString &total_amount_micros) {
    m_total_amount_micros = total_amount_micros;
    m_total_amount_micros_isSet = true;
}

bool OAIBudgetSummary::is_total_amount_micros_Set() const{
    return m_total_amount_micros_isSet;
}

bool OAIBudgetSummary::is_total_amount_micros_Valid() const{
    return m_total_amount_micros_isValid;
}

bool OAIBudgetSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_budget_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_tax_amount_micros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prisma_cpe_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_micros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_micros_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBudgetSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
