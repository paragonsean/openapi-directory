/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegralAdScience.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegralAdScience::OAIIntegralAdScience(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegralAdScience::OAIIntegralAdScience() {
    this->initializeModel();
}

OAIIntegralAdScience::~OAIIntegralAdScience() {}

void OAIIntegralAdScience::initializeModel() {

    m_custom_segment_id_isSet = false;
    m_custom_segment_id_isValid = false;

    m_display_viewability_isSet = false;
    m_display_viewability_isValid = false;

    m_exclude_unrateable_isSet = false;
    m_exclude_unrateable_isValid = false;

    m_excluded_ad_fraud_risk_isSet = false;
    m_excluded_ad_fraud_risk_isValid = false;

    m_excluded_adult_risk_isSet = false;
    m_excluded_adult_risk_isValid = false;

    m_excluded_alcohol_risk_isSet = false;
    m_excluded_alcohol_risk_isValid = false;

    m_excluded_drugs_risk_isSet = false;
    m_excluded_drugs_risk_isValid = false;

    m_excluded_gambling_risk_isSet = false;
    m_excluded_gambling_risk_isValid = false;

    m_excluded_hate_speech_risk_isSet = false;
    m_excluded_hate_speech_risk_isValid = false;

    m_excluded_illegal_downloads_risk_isSet = false;
    m_excluded_illegal_downloads_risk_isValid = false;

    m_excluded_offensive_language_risk_isSet = false;
    m_excluded_offensive_language_risk_isValid = false;

    m_excluded_violence_risk_isSet = false;
    m_excluded_violence_risk_isValid = false;

    m_traq_score_option_isSet = false;
    m_traq_score_option_isValid = false;

    m_video_viewability_isSet = false;
    m_video_viewability_isValid = false;
}

void OAIIntegralAdScience::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegralAdScience::fromJsonObject(QJsonObject json) {

    m_custom_segment_id_isValid = ::OpenAPI::fromJsonValue(m_custom_segment_id, json[QString("customSegmentId")]);
    m_custom_segment_id_isSet = !json[QString("customSegmentId")].isNull() && m_custom_segment_id_isValid;

    m_display_viewability_isValid = ::OpenAPI::fromJsonValue(m_display_viewability, json[QString("displayViewability")]);
    m_display_viewability_isSet = !json[QString("displayViewability")].isNull() && m_display_viewability_isValid;

    m_exclude_unrateable_isValid = ::OpenAPI::fromJsonValue(m_exclude_unrateable, json[QString("excludeUnrateable")]);
    m_exclude_unrateable_isSet = !json[QString("excludeUnrateable")].isNull() && m_exclude_unrateable_isValid;

    m_excluded_ad_fraud_risk_isValid = ::OpenAPI::fromJsonValue(m_excluded_ad_fraud_risk, json[QString("excludedAdFraudRisk")]);
    m_excluded_ad_fraud_risk_isSet = !json[QString("excludedAdFraudRisk")].isNull() && m_excluded_ad_fraud_risk_isValid;

    m_excluded_adult_risk_isValid = ::OpenAPI::fromJsonValue(m_excluded_adult_risk, json[QString("excludedAdultRisk")]);
    m_excluded_adult_risk_isSet = !json[QString("excludedAdultRisk")].isNull() && m_excluded_adult_risk_isValid;

    m_excluded_alcohol_risk_isValid = ::OpenAPI::fromJsonValue(m_excluded_alcohol_risk, json[QString("excludedAlcoholRisk")]);
    m_excluded_alcohol_risk_isSet = !json[QString("excludedAlcoholRisk")].isNull() && m_excluded_alcohol_risk_isValid;

    m_excluded_drugs_risk_isValid = ::OpenAPI::fromJsonValue(m_excluded_drugs_risk, json[QString("excludedDrugsRisk")]);
    m_excluded_drugs_risk_isSet = !json[QString("excludedDrugsRisk")].isNull() && m_excluded_drugs_risk_isValid;

    m_excluded_gambling_risk_isValid = ::OpenAPI::fromJsonValue(m_excluded_gambling_risk, json[QString("excludedGamblingRisk")]);
    m_excluded_gambling_risk_isSet = !json[QString("excludedGamblingRisk")].isNull() && m_excluded_gambling_risk_isValid;

    m_excluded_hate_speech_risk_isValid = ::OpenAPI::fromJsonValue(m_excluded_hate_speech_risk, json[QString("excludedHateSpeechRisk")]);
    m_excluded_hate_speech_risk_isSet = !json[QString("excludedHateSpeechRisk")].isNull() && m_excluded_hate_speech_risk_isValid;

    m_excluded_illegal_downloads_risk_isValid = ::OpenAPI::fromJsonValue(m_excluded_illegal_downloads_risk, json[QString("excludedIllegalDownloadsRisk")]);
    m_excluded_illegal_downloads_risk_isSet = !json[QString("excludedIllegalDownloadsRisk")].isNull() && m_excluded_illegal_downloads_risk_isValid;

    m_excluded_offensive_language_risk_isValid = ::OpenAPI::fromJsonValue(m_excluded_offensive_language_risk, json[QString("excludedOffensiveLanguageRisk")]);
    m_excluded_offensive_language_risk_isSet = !json[QString("excludedOffensiveLanguageRisk")].isNull() && m_excluded_offensive_language_risk_isValid;

    m_excluded_violence_risk_isValid = ::OpenAPI::fromJsonValue(m_excluded_violence_risk, json[QString("excludedViolenceRisk")]);
    m_excluded_violence_risk_isSet = !json[QString("excludedViolenceRisk")].isNull() && m_excluded_violence_risk_isValid;

    m_traq_score_option_isValid = ::OpenAPI::fromJsonValue(m_traq_score_option, json[QString("traqScoreOption")]);
    m_traq_score_option_isSet = !json[QString("traqScoreOption")].isNull() && m_traq_score_option_isValid;

    m_video_viewability_isValid = ::OpenAPI::fromJsonValue(m_video_viewability, json[QString("videoViewability")]);
    m_video_viewability_isSet = !json[QString("videoViewability")].isNull() && m_video_viewability_isValid;
}

QString OAIIntegralAdScience::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegralAdScience::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_segment_id.size() > 0) {
        obj.insert(QString("customSegmentId"), ::OpenAPI::toJsonValue(m_custom_segment_id));
    }
    if (m_display_viewability_isSet) {
        obj.insert(QString("displayViewability"), ::OpenAPI::toJsonValue(m_display_viewability));
    }
    if (m_exclude_unrateable_isSet) {
        obj.insert(QString("excludeUnrateable"), ::OpenAPI::toJsonValue(m_exclude_unrateable));
    }
    if (m_excluded_ad_fraud_risk_isSet) {
        obj.insert(QString("excludedAdFraudRisk"), ::OpenAPI::toJsonValue(m_excluded_ad_fraud_risk));
    }
    if (m_excluded_adult_risk_isSet) {
        obj.insert(QString("excludedAdultRisk"), ::OpenAPI::toJsonValue(m_excluded_adult_risk));
    }
    if (m_excluded_alcohol_risk_isSet) {
        obj.insert(QString("excludedAlcoholRisk"), ::OpenAPI::toJsonValue(m_excluded_alcohol_risk));
    }
    if (m_excluded_drugs_risk_isSet) {
        obj.insert(QString("excludedDrugsRisk"), ::OpenAPI::toJsonValue(m_excluded_drugs_risk));
    }
    if (m_excluded_gambling_risk_isSet) {
        obj.insert(QString("excludedGamblingRisk"), ::OpenAPI::toJsonValue(m_excluded_gambling_risk));
    }
    if (m_excluded_hate_speech_risk_isSet) {
        obj.insert(QString("excludedHateSpeechRisk"), ::OpenAPI::toJsonValue(m_excluded_hate_speech_risk));
    }
    if (m_excluded_illegal_downloads_risk_isSet) {
        obj.insert(QString("excludedIllegalDownloadsRisk"), ::OpenAPI::toJsonValue(m_excluded_illegal_downloads_risk));
    }
    if (m_excluded_offensive_language_risk_isSet) {
        obj.insert(QString("excludedOffensiveLanguageRisk"), ::OpenAPI::toJsonValue(m_excluded_offensive_language_risk));
    }
    if (m_excluded_violence_risk_isSet) {
        obj.insert(QString("excludedViolenceRisk"), ::OpenAPI::toJsonValue(m_excluded_violence_risk));
    }
    if (m_traq_score_option_isSet) {
        obj.insert(QString("traqScoreOption"), ::OpenAPI::toJsonValue(m_traq_score_option));
    }
    if (m_video_viewability_isSet) {
        obj.insert(QString("videoViewability"), ::OpenAPI::toJsonValue(m_video_viewability));
    }
    return obj;
}

QList<QString> OAIIntegralAdScience::getCustomSegmentId() const {
    return m_custom_segment_id;
}
void OAIIntegralAdScience::setCustomSegmentId(const QList<QString> &custom_segment_id) {
    m_custom_segment_id = custom_segment_id;
    m_custom_segment_id_isSet = true;
}

bool OAIIntegralAdScience::is_custom_segment_id_Set() const{
    return m_custom_segment_id_isSet;
}

bool OAIIntegralAdScience::is_custom_segment_id_Valid() const{
    return m_custom_segment_id_isValid;
}

QString OAIIntegralAdScience::getDisplayViewability() const {
    return m_display_viewability;
}
void OAIIntegralAdScience::setDisplayViewability(const QString &display_viewability) {
    m_display_viewability = display_viewability;
    m_display_viewability_isSet = true;
}

bool OAIIntegralAdScience::is_display_viewability_Set() const{
    return m_display_viewability_isSet;
}

bool OAIIntegralAdScience::is_display_viewability_Valid() const{
    return m_display_viewability_isValid;
}

bool OAIIntegralAdScience::isExcludeUnrateable() const {
    return m_exclude_unrateable;
}
void OAIIntegralAdScience::setExcludeUnrateable(const bool &exclude_unrateable) {
    m_exclude_unrateable = exclude_unrateable;
    m_exclude_unrateable_isSet = true;
}

bool OAIIntegralAdScience::is_exclude_unrateable_Set() const{
    return m_exclude_unrateable_isSet;
}

bool OAIIntegralAdScience::is_exclude_unrateable_Valid() const{
    return m_exclude_unrateable_isValid;
}

QString OAIIntegralAdScience::getExcludedAdFraudRisk() const {
    return m_excluded_ad_fraud_risk;
}
void OAIIntegralAdScience::setExcludedAdFraudRisk(const QString &excluded_ad_fraud_risk) {
    m_excluded_ad_fraud_risk = excluded_ad_fraud_risk;
    m_excluded_ad_fraud_risk_isSet = true;
}

bool OAIIntegralAdScience::is_excluded_ad_fraud_risk_Set() const{
    return m_excluded_ad_fraud_risk_isSet;
}

bool OAIIntegralAdScience::is_excluded_ad_fraud_risk_Valid() const{
    return m_excluded_ad_fraud_risk_isValid;
}

QString OAIIntegralAdScience::getExcludedAdultRisk() const {
    return m_excluded_adult_risk;
}
void OAIIntegralAdScience::setExcludedAdultRisk(const QString &excluded_adult_risk) {
    m_excluded_adult_risk = excluded_adult_risk;
    m_excluded_adult_risk_isSet = true;
}

bool OAIIntegralAdScience::is_excluded_adult_risk_Set() const{
    return m_excluded_adult_risk_isSet;
}

bool OAIIntegralAdScience::is_excluded_adult_risk_Valid() const{
    return m_excluded_adult_risk_isValid;
}

QString OAIIntegralAdScience::getExcludedAlcoholRisk() const {
    return m_excluded_alcohol_risk;
}
void OAIIntegralAdScience::setExcludedAlcoholRisk(const QString &excluded_alcohol_risk) {
    m_excluded_alcohol_risk = excluded_alcohol_risk;
    m_excluded_alcohol_risk_isSet = true;
}

bool OAIIntegralAdScience::is_excluded_alcohol_risk_Set() const{
    return m_excluded_alcohol_risk_isSet;
}

bool OAIIntegralAdScience::is_excluded_alcohol_risk_Valid() const{
    return m_excluded_alcohol_risk_isValid;
}

QString OAIIntegralAdScience::getExcludedDrugsRisk() const {
    return m_excluded_drugs_risk;
}
void OAIIntegralAdScience::setExcludedDrugsRisk(const QString &excluded_drugs_risk) {
    m_excluded_drugs_risk = excluded_drugs_risk;
    m_excluded_drugs_risk_isSet = true;
}

bool OAIIntegralAdScience::is_excluded_drugs_risk_Set() const{
    return m_excluded_drugs_risk_isSet;
}

bool OAIIntegralAdScience::is_excluded_drugs_risk_Valid() const{
    return m_excluded_drugs_risk_isValid;
}

QString OAIIntegralAdScience::getExcludedGamblingRisk() const {
    return m_excluded_gambling_risk;
}
void OAIIntegralAdScience::setExcludedGamblingRisk(const QString &excluded_gambling_risk) {
    m_excluded_gambling_risk = excluded_gambling_risk;
    m_excluded_gambling_risk_isSet = true;
}

bool OAIIntegralAdScience::is_excluded_gambling_risk_Set() const{
    return m_excluded_gambling_risk_isSet;
}

bool OAIIntegralAdScience::is_excluded_gambling_risk_Valid() const{
    return m_excluded_gambling_risk_isValid;
}

QString OAIIntegralAdScience::getExcludedHateSpeechRisk() const {
    return m_excluded_hate_speech_risk;
}
void OAIIntegralAdScience::setExcludedHateSpeechRisk(const QString &excluded_hate_speech_risk) {
    m_excluded_hate_speech_risk = excluded_hate_speech_risk;
    m_excluded_hate_speech_risk_isSet = true;
}

bool OAIIntegralAdScience::is_excluded_hate_speech_risk_Set() const{
    return m_excluded_hate_speech_risk_isSet;
}

bool OAIIntegralAdScience::is_excluded_hate_speech_risk_Valid() const{
    return m_excluded_hate_speech_risk_isValid;
}

QString OAIIntegralAdScience::getExcludedIllegalDownloadsRisk() const {
    return m_excluded_illegal_downloads_risk;
}
void OAIIntegralAdScience::setExcludedIllegalDownloadsRisk(const QString &excluded_illegal_downloads_risk) {
    m_excluded_illegal_downloads_risk = excluded_illegal_downloads_risk;
    m_excluded_illegal_downloads_risk_isSet = true;
}

bool OAIIntegralAdScience::is_excluded_illegal_downloads_risk_Set() const{
    return m_excluded_illegal_downloads_risk_isSet;
}

bool OAIIntegralAdScience::is_excluded_illegal_downloads_risk_Valid() const{
    return m_excluded_illegal_downloads_risk_isValid;
}

QString OAIIntegralAdScience::getExcludedOffensiveLanguageRisk() const {
    return m_excluded_offensive_language_risk;
}
void OAIIntegralAdScience::setExcludedOffensiveLanguageRisk(const QString &excluded_offensive_language_risk) {
    m_excluded_offensive_language_risk = excluded_offensive_language_risk;
    m_excluded_offensive_language_risk_isSet = true;
}

bool OAIIntegralAdScience::is_excluded_offensive_language_risk_Set() const{
    return m_excluded_offensive_language_risk_isSet;
}

bool OAIIntegralAdScience::is_excluded_offensive_language_risk_Valid() const{
    return m_excluded_offensive_language_risk_isValid;
}

QString OAIIntegralAdScience::getExcludedViolenceRisk() const {
    return m_excluded_violence_risk;
}
void OAIIntegralAdScience::setExcludedViolenceRisk(const QString &excluded_violence_risk) {
    m_excluded_violence_risk = excluded_violence_risk;
    m_excluded_violence_risk_isSet = true;
}

bool OAIIntegralAdScience::is_excluded_violence_risk_Set() const{
    return m_excluded_violence_risk_isSet;
}

bool OAIIntegralAdScience::is_excluded_violence_risk_Valid() const{
    return m_excluded_violence_risk_isValid;
}

QString OAIIntegralAdScience::getTraqScoreOption() const {
    return m_traq_score_option;
}
void OAIIntegralAdScience::setTraqScoreOption(const QString &traq_score_option) {
    m_traq_score_option = traq_score_option;
    m_traq_score_option_isSet = true;
}

bool OAIIntegralAdScience::is_traq_score_option_Set() const{
    return m_traq_score_option_isSet;
}

bool OAIIntegralAdScience::is_traq_score_option_Valid() const{
    return m_traq_score_option_isValid;
}

QString OAIIntegralAdScience::getVideoViewability() const {
    return m_video_viewability;
}
void OAIIntegralAdScience::setVideoViewability(const QString &video_viewability) {
    m_video_viewability = video_viewability;
    m_video_viewability_isSet = true;
}

bool OAIIntegralAdScience::is_video_viewability_Set() const{
    return m_video_viewability_isSet;
}

bool OAIIntegralAdScience::is_video_viewability_Valid() const{
    return m_video_viewability_isValid;
}

bool OAIIntegralAdScience::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_segment_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_viewability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_unrateable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_ad_fraud_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_adult_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_alcohol_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_drugs_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_gambling_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_hate_speech_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_illegal_downloads_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_offensive_language_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_violence_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traq_score_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_viewability_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegralAdScience::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
