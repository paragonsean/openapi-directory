/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObaIcon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObaIcon::OAIObaIcon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObaIcon::OAIObaIcon() {
    this->initializeModel();
}

OAIObaIcon::~OAIObaIcon() {}

void OAIObaIcon::initializeModel() {

    m_click_tracking_url_isSet = false;
    m_click_tracking_url_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_landing_page_url_isSet = false;
    m_landing_page_url_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_program_isSet = false;
    m_program_isValid = false;

    m_resource_mime_type_isSet = false;
    m_resource_mime_type_isValid = false;

    m_resource_url_isSet = false;
    m_resource_url_isValid = false;

    m_view_tracking_url_isSet = false;
    m_view_tracking_url_isValid = false;
}

void OAIObaIcon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObaIcon::fromJsonObject(QJsonObject json) {

    m_click_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_click_tracking_url, json[QString("clickTrackingUrl")]);
    m_click_tracking_url_isSet = !json[QString("clickTrackingUrl")].isNull() && m_click_tracking_url_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_landing_page_url_isValid = ::OpenAPI::fromJsonValue(m_landing_page_url, json[QString("landingPageUrl")]);
    m_landing_page_url_isSet = !json[QString("landingPageUrl")].isNull() && m_landing_page_url_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_program_isValid = ::OpenAPI::fromJsonValue(m_program, json[QString("program")]);
    m_program_isSet = !json[QString("program")].isNull() && m_program_isValid;

    m_resource_mime_type_isValid = ::OpenAPI::fromJsonValue(m_resource_mime_type, json[QString("resourceMimeType")]);
    m_resource_mime_type_isSet = !json[QString("resourceMimeType")].isNull() && m_resource_mime_type_isValid;

    m_resource_url_isValid = ::OpenAPI::fromJsonValue(m_resource_url, json[QString("resourceUrl")]);
    m_resource_url_isSet = !json[QString("resourceUrl")].isNull() && m_resource_url_isValid;

    m_view_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_view_tracking_url, json[QString("viewTrackingUrl")]);
    m_view_tracking_url_isSet = !json[QString("viewTrackingUrl")].isNull() && m_view_tracking_url_isValid;
}

QString OAIObaIcon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObaIcon::asJsonObject() const {
    QJsonObject obj;
    if (m_click_tracking_url_isSet) {
        obj.insert(QString("clickTrackingUrl"), ::OpenAPI::toJsonValue(m_click_tracking_url));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_landing_page_url_isSet) {
        obj.insert(QString("landingPageUrl"), ::OpenAPI::toJsonValue(m_landing_page_url));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_program_isSet) {
        obj.insert(QString("program"), ::OpenAPI::toJsonValue(m_program));
    }
    if (m_resource_mime_type_isSet) {
        obj.insert(QString("resourceMimeType"), ::OpenAPI::toJsonValue(m_resource_mime_type));
    }
    if (m_resource_url_isSet) {
        obj.insert(QString("resourceUrl"), ::OpenAPI::toJsonValue(m_resource_url));
    }
    if (m_view_tracking_url_isSet) {
        obj.insert(QString("viewTrackingUrl"), ::OpenAPI::toJsonValue(m_view_tracking_url));
    }
    return obj;
}

QString OAIObaIcon::getClickTrackingUrl() const {
    return m_click_tracking_url;
}
void OAIObaIcon::setClickTrackingUrl(const QString &click_tracking_url) {
    m_click_tracking_url = click_tracking_url;
    m_click_tracking_url_isSet = true;
}

bool OAIObaIcon::is_click_tracking_url_Set() const{
    return m_click_tracking_url_isSet;
}

bool OAIObaIcon::is_click_tracking_url_Valid() const{
    return m_click_tracking_url_isValid;
}

OAIDimensions OAIObaIcon::getDimensions() const {
    return m_dimensions;
}
void OAIObaIcon::setDimensions(const OAIDimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIObaIcon::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIObaIcon::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIObaIcon::getLandingPageUrl() const {
    return m_landing_page_url;
}
void OAIObaIcon::setLandingPageUrl(const QString &landing_page_url) {
    m_landing_page_url = landing_page_url;
    m_landing_page_url_isSet = true;
}

bool OAIObaIcon::is_landing_page_url_Set() const{
    return m_landing_page_url_isSet;
}

bool OAIObaIcon::is_landing_page_url_Valid() const{
    return m_landing_page_url_isValid;
}

QString OAIObaIcon::getPosition() const {
    return m_position;
}
void OAIObaIcon::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIObaIcon::is_position_Set() const{
    return m_position_isSet;
}

bool OAIObaIcon::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIObaIcon::getProgram() const {
    return m_program;
}
void OAIObaIcon::setProgram(const QString &program) {
    m_program = program;
    m_program_isSet = true;
}

bool OAIObaIcon::is_program_Set() const{
    return m_program_isSet;
}

bool OAIObaIcon::is_program_Valid() const{
    return m_program_isValid;
}

QString OAIObaIcon::getResourceMimeType() const {
    return m_resource_mime_type;
}
void OAIObaIcon::setResourceMimeType(const QString &resource_mime_type) {
    m_resource_mime_type = resource_mime_type;
    m_resource_mime_type_isSet = true;
}

bool OAIObaIcon::is_resource_mime_type_Set() const{
    return m_resource_mime_type_isSet;
}

bool OAIObaIcon::is_resource_mime_type_Valid() const{
    return m_resource_mime_type_isValid;
}

QString OAIObaIcon::getResourceUrl() const {
    return m_resource_url;
}
void OAIObaIcon::setResourceUrl(const QString &resource_url) {
    m_resource_url = resource_url;
    m_resource_url_isSet = true;
}

bool OAIObaIcon::is_resource_url_Set() const{
    return m_resource_url_isSet;
}

bool OAIObaIcon::is_resource_url_Valid() const{
    return m_resource_url_isValid;
}

QString OAIObaIcon::getViewTrackingUrl() const {
    return m_view_tracking_url;
}
void OAIObaIcon::setViewTrackingUrl(const QString &view_tracking_url) {
    m_view_tracking_url = view_tracking_url;
    m_view_tracking_url_isSet = true;
}

bool OAIObaIcon::is_view_tracking_url_Set() const{
    return m_view_tracking_url_isSet;
}

bool OAIObaIcon::is_view_tracking_url_Valid() const{
    return m_view_tracking_url_isValid;
}

bool OAIObaIcon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_click_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_landing_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObaIcon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
