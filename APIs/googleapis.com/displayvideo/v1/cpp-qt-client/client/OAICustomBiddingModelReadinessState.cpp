/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomBiddingModelReadinessState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomBiddingModelReadinessState::OAICustomBiddingModelReadinessState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomBiddingModelReadinessState::OAICustomBiddingModelReadinessState() {
    this->initializeModel();
}

OAICustomBiddingModelReadinessState::~OAICustomBiddingModelReadinessState() {}

void OAICustomBiddingModelReadinessState::initializeModel() {

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_readiness_state_isSet = false;
    m_readiness_state_isValid = false;
}

void OAICustomBiddingModelReadinessState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomBiddingModelReadinessState::fromJsonObject(QJsonObject json) {

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_readiness_state_isValid = ::OpenAPI::fromJsonValue(m_readiness_state, json[QString("readinessState")]);
    m_readiness_state_isSet = !json[QString("readinessState")].isNull() && m_readiness_state_isValid;
}

QString OAICustomBiddingModelReadinessState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomBiddingModelReadinessState::asJsonObject() const {
    QJsonObject obj;
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_readiness_state_isSet) {
        obj.insert(QString("readinessState"), ::OpenAPI::toJsonValue(m_readiness_state));
    }
    return obj;
}

QString OAICustomBiddingModelReadinessState::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAICustomBiddingModelReadinessState::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAICustomBiddingModelReadinessState::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAICustomBiddingModelReadinessState::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

QString OAICustomBiddingModelReadinessState::getReadinessState() const {
    return m_readiness_state;
}
void OAICustomBiddingModelReadinessState::setReadinessState(const QString &readiness_state) {
    m_readiness_state = readiness_state;
    m_readiness_state_isSet = true;
}

bool OAICustomBiddingModelReadinessState::is_readiness_state_Set() const{
    return m_readiness_state_isSet;
}

bool OAICustomBiddingModelReadinessState::is_readiness_state_Valid() const{
    return m_readiness_state_isValid;
}

bool OAICustomBiddingModelReadinessState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readiness_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomBiddingModelReadinessState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
