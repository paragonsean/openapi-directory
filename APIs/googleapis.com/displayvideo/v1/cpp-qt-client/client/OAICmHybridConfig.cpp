/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICmHybridConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICmHybridConfig::OAICmHybridConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICmHybridConfig::OAICmHybridConfig() {
    this->initializeModel();
}

OAICmHybridConfig::~OAICmHybridConfig() {}

void OAICmHybridConfig::initializeModel() {

    m_cm_account_id_isSet = false;
    m_cm_account_id_isValid = false;

    m_cm_advertiser_ids_isSet = false;
    m_cm_advertiser_ids_isValid = false;

    m_cm_floodlight_config_id_isSet = false;
    m_cm_floodlight_config_id_isValid = false;

    m_cm_floodlight_linking_authorized_isSet = false;
    m_cm_floodlight_linking_authorized_isValid = false;

    m_cm_syncable_site_ids_isSet = false;
    m_cm_syncable_site_ids_isValid = false;

    m_dv360_to_cm_cost_reporting_enabled_isSet = false;
    m_dv360_to_cm_cost_reporting_enabled_isValid = false;

    m_dv360_to_cm_data_sharing_enabled_isSet = false;
    m_dv360_to_cm_data_sharing_enabled_isValid = false;
}

void OAICmHybridConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICmHybridConfig::fromJsonObject(QJsonObject json) {

    m_cm_account_id_isValid = ::OpenAPI::fromJsonValue(m_cm_account_id, json[QString("cmAccountId")]);
    m_cm_account_id_isSet = !json[QString("cmAccountId")].isNull() && m_cm_account_id_isValid;

    m_cm_advertiser_ids_isValid = ::OpenAPI::fromJsonValue(m_cm_advertiser_ids, json[QString("cmAdvertiserIds")]);
    m_cm_advertiser_ids_isSet = !json[QString("cmAdvertiserIds")].isNull() && m_cm_advertiser_ids_isValid;

    m_cm_floodlight_config_id_isValid = ::OpenAPI::fromJsonValue(m_cm_floodlight_config_id, json[QString("cmFloodlightConfigId")]);
    m_cm_floodlight_config_id_isSet = !json[QString("cmFloodlightConfigId")].isNull() && m_cm_floodlight_config_id_isValid;

    m_cm_floodlight_linking_authorized_isValid = ::OpenAPI::fromJsonValue(m_cm_floodlight_linking_authorized, json[QString("cmFloodlightLinkingAuthorized")]);
    m_cm_floodlight_linking_authorized_isSet = !json[QString("cmFloodlightLinkingAuthorized")].isNull() && m_cm_floodlight_linking_authorized_isValid;

    m_cm_syncable_site_ids_isValid = ::OpenAPI::fromJsonValue(m_cm_syncable_site_ids, json[QString("cmSyncableSiteIds")]);
    m_cm_syncable_site_ids_isSet = !json[QString("cmSyncableSiteIds")].isNull() && m_cm_syncable_site_ids_isValid;

    m_dv360_to_cm_cost_reporting_enabled_isValid = ::OpenAPI::fromJsonValue(m_dv360_to_cm_cost_reporting_enabled, json[QString("dv360ToCmCostReportingEnabled")]);
    m_dv360_to_cm_cost_reporting_enabled_isSet = !json[QString("dv360ToCmCostReportingEnabled")].isNull() && m_dv360_to_cm_cost_reporting_enabled_isValid;

    m_dv360_to_cm_data_sharing_enabled_isValid = ::OpenAPI::fromJsonValue(m_dv360_to_cm_data_sharing_enabled, json[QString("dv360ToCmDataSharingEnabled")]);
    m_dv360_to_cm_data_sharing_enabled_isSet = !json[QString("dv360ToCmDataSharingEnabled")].isNull() && m_dv360_to_cm_data_sharing_enabled_isValid;
}

QString OAICmHybridConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICmHybridConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cm_account_id_isSet) {
        obj.insert(QString("cmAccountId"), ::OpenAPI::toJsonValue(m_cm_account_id));
    }
    if (m_cm_advertiser_ids.size() > 0) {
        obj.insert(QString("cmAdvertiserIds"), ::OpenAPI::toJsonValue(m_cm_advertiser_ids));
    }
    if (m_cm_floodlight_config_id_isSet) {
        obj.insert(QString("cmFloodlightConfigId"), ::OpenAPI::toJsonValue(m_cm_floodlight_config_id));
    }
    if (m_cm_floodlight_linking_authorized_isSet) {
        obj.insert(QString("cmFloodlightLinkingAuthorized"), ::OpenAPI::toJsonValue(m_cm_floodlight_linking_authorized));
    }
    if (m_cm_syncable_site_ids.size() > 0) {
        obj.insert(QString("cmSyncableSiteIds"), ::OpenAPI::toJsonValue(m_cm_syncable_site_ids));
    }
    if (m_dv360_to_cm_cost_reporting_enabled_isSet) {
        obj.insert(QString("dv360ToCmCostReportingEnabled"), ::OpenAPI::toJsonValue(m_dv360_to_cm_cost_reporting_enabled));
    }
    if (m_dv360_to_cm_data_sharing_enabled_isSet) {
        obj.insert(QString("dv360ToCmDataSharingEnabled"), ::OpenAPI::toJsonValue(m_dv360_to_cm_data_sharing_enabled));
    }
    return obj;
}

QString OAICmHybridConfig::getCmAccountId() const {
    return m_cm_account_id;
}
void OAICmHybridConfig::setCmAccountId(const QString &cm_account_id) {
    m_cm_account_id = cm_account_id;
    m_cm_account_id_isSet = true;
}

bool OAICmHybridConfig::is_cm_account_id_Set() const{
    return m_cm_account_id_isSet;
}

bool OAICmHybridConfig::is_cm_account_id_Valid() const{
    return m_cm_account_id_isValid;
}

QList<QString> OAICmHybridConfig::getCmAdvertiserIds() const {
    return m_cm_advertiser_ids;
}
void OAICmHybridConfig::setCmAdvertiserIds(const QList<QString> &cm_advertiser_ids) {
    m_cm_advertiser_ids = cm_advertiser_ids;
    m_cm_advertiser_ids_isSet = true;
}

bool OAICmHybridConfig::is_cm_advertiser_ids_Set() const{
    return m_cm_advertiser_ids_isSet;
}

bool OAICmHybridConfig::is_cm_advertiser_ids_Valid() const{
    return m_cm_advertiser_ids_isValid;
}

QString OAICmHybridConfig::getCmFloodlightConfigId() const {
    return m_cm_floodlight_config_id;
}
void OAICmHybridConfig::setCmFloodlightConfigId(const QString &cm_floodlight_config_id) {
    m_cm_floodlight_config_id = cm_floodlight_config_id;
    m_cm_floodlight_config_id_isSet = true;
}

bool OAICmHybridConfig::is_cm_floodlight_config_id_Set() const{
    return m_cm_floodlight_config_id_isSet;
}

bool OAICmHybridConfig::is_cm_floodlight_config_id_Valid() const{
    return m_cm_floodlight_config_id_isValid;
}

bool OAICmHybridConfig::isCmFloodlightLinkingAuthorized() const {
    return m_cm_floodlight_linking_authorized;
}
void OAICmHybridConfig::setCmFloodlightLinkingAuthorized(const bool &cm_floodlight_linking_authorized) {
    m_cm_floodlight_linking_authorized = cm_floodlight_linking_authorized;
    m_cm_floodlight_linking_authorized_isSet = true;
}

bool OAICmHybridConfig::is_cm_floodlight_linking_authorized_Set() const{
    return m_cm_floodlight_linking_authorized_isSet;
}

bool OAICmHybridConfig::is_cm_floodlight_linking_authorized_Valid() const{
    return m_cm_floodlight_linking_authorized_isValid;
}

QList<QString> OAICmHybridConfig::getCmSyncableSiteIds() const {
    return m_cm_syncable_site_ids;
}
void OAICmHybridConfig::setCmSyncableSiteIds(const QList<QString> &cm_syncable_site_ids) {
    m_cm_syncable_site_ids = cm_syncable_site_ids;
    m_cm_syncable_site_ids_isSet = true;
}

bool OAICmHybridConfig::is_cm_syncable_site_ids_Set() const{
    return m_cm_syncable_site_ids_isSet;
}

bool OAICmHybridConfig::is_cm_syncable_site_ids_Valid() const{
    return m_cm_syncable_site_ids_isValid;
}

bool OAICmHybridConfig::isDv360ToCmCostReportingEnabled() const {
    return m_dv360_to_cm_cost_reporting_enabled;
}
void OAICmHybridConfig::setDv360ToCmCostReportingEnabled(const bool &dv360_to_cm_cost_reporting_enabled) {
    m_dv360_to_cm_cost_reporting_enabled = dv360_to_cm_cost_reporting_enabled;
    m_dv360_to_cm_cost_reporting_enabled_isSet = true;
}

bool OAICmHybridConfig::is_dv360_to_cm_cost_reporting_enabled_Set() const{
    return m_dv360_to_cm_cost_reporting_enabled_isSet;
}

bool OAICmHybridConfig::is_dv360_to_cm_cost_reporting_enabled_Valid() const{
    return m_dv360_to_cm_cost_reporting_enabled_isValid;
}

bool OAICmHybridConfig::isDv360ToCmDataSharingEnabled() const {
    return m_dv360_to_cm_data_sharing_enabled;
}
void OAICmHybridConfig::setDv360ToCmDataSharingEnabled(const bool &dv360_to_cm_data_sharing_enabled) {
    m_dv360_to_cm_data_sharing_enabled = dv360_to_cm_data_sharing_enabled;
    m_dv360_to_cm_data_sharing_enabled_isSet = true;
}

bool OAICmHybridConfig::is_dv360_to_cm_data_sharing_enabled_Set() const{
    return m_dv360_to_cm_data_sharing_enabled_isSet;
}

bool OAICmHybridConfig::is_dv360_to_cm_data_sharing_enabled_Valid() const{
    return m_dv360_to_cm_data_sharing_enabled_isValid;
}

bool OAICmHybridConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cm_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cm_advertiser_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cm_floodlight_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cm_floodlight_linking_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cm_syncable_site_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dv360_to_cm_cost_reporting_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dv360_to_cm_data_sharing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICmHybridConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
