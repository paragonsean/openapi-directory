/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioContentTypeTargetingOptionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioContentTypeTargetingOptionDetails::OAIAudioContentTypeTargetingOptionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioContentTypeTargetingOptionDetails::OAIAudioContentTypeTargetingOptionDetails() {
    this->initializeModel();
}

OAIAudioContentTypeTargetingOptionDetails::~OAIAudioContentTypeTargetingOptionDetails() {}

void OAIAudioContentTypeTargetingOptionDetails::initializeModel() {

    m_audio_content_type_isSet = false;
    m_audio_content_type_isValid = false;
}

void OAIAudioContentTypeTargetingOptionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioContentTypeTargetingOptionDetails::fromJsonObject(QJsonObject json) {

    m_audio_content_type_isValid = ::OpenAPI::fromJsonValue(m_audio_content_type, json[QString("audioContentType")]);
    m_audio_content_type_isSet = !json[QString("audioContentType")].isNull() && m_audio_content_type_isValid;
}

QString OAIAudioContentTypeTargetingOptionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioContentTypeTargetingOptionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_content_type_isSet) {
        obj.insert(QString("audioContentType"), ::OpenAPI::toJsonValue(m_audio_content_type));
    }
    return obj;
}

QString OAIAudioContentTypeTargetingOptionDetails::getAudioContentType() const {
    return m_audio_content_type;
}
void OAIAudioContentTypeTargetingOptionDetails::setAudioContentType(const QString &audio_content_type) {
    m_audio_content_type = audio_content_type;
    m_audio_content_type_isSet = true;
}

bool OAIAudioContentTypeTargetingOptionDetails::is_audio_content_type_Set() const{
    return m_audio_content_type_isSet;
}

bool OAIAudioContentTypeTargetingOptionDetails::is_audio_content_type_Valid() const{
    return m_audio_content_type_isValid;
}

bool OAIAudioContentTypeTargetingOptionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioContentTypeTargetingOptionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
