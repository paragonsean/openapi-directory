/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExchangeConfigEnabledExchange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExchangeConfigEnabledExchange::OAIExchangeConfigEnabledExchange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExchangeConfigEnabledExchange::OAIExchangeConfigEnabledExchange() {
    this->initializeModel();
}

OAIExchangeConfigEnabledExchange::~OAIExchangeConfigEnabledExchange() {}

void OAIExchangeConfigEnabledExchange::initializeModel() {

    m_exchange_isSet = false;
    m_exchange_isValid = false;

    m_google_ad_manager_agency_id_isSet = false;
    m_google_ad_manager_agency_id_isValid = false;

    m_google_ad_manager_buyer_network_id_isSet = false;
    m_google_ad_manager_buyer_network_id_isValid = false;

    m_seat_id_isSet = false;
    m_seat_id_isValid = false;
}

void OAIExchangeConfigEnabledExchange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExchangeConfigEnabledExchange::fromJsonObject(QJsonObject json) {

    m_exchange_isValid = ::OpenAPI::fromJsonValue(m_exchange, json[QString("exchange")]);
    m_exchange_isSet = !json[QString("exchange")].isNull() && m_exchange_isValid;

    m_google_ad_manager_agency_id_isValid = ::OpenAPI::fromJsonValue(m_google_ad_manager_agency_id, json[QString("googleAdManagerAgencyId")]);
    m_google_ad_manager_agency_id_isSet = !json[QString("googleAdManagerAgencyId")].isNull() && m_google_ad_manager_agency_id_isValid;

    m_google_ad_manager_buyer_network_id_isValid = ::OpenAPI::fromJsonValue(m_google_ad_manager_buyer_network_id, json[QString("googleAdManagerBuyerNetworkId")]);
    m_google_ad_manager_buyer_network_id_isSet = !json[QString("googleAdManagerBuyerNetworkId")].isNull() && m_google_ad_manager_buyer_network_id_isValid;

    m_seat_id_isValid = ::OpenAPI::fromJsonValue(m_seat_id, json[QString("seatId")]);
    m_seat_id_isSet = !json[QString("seatId")].isNull() && m_seat_id_isValid;
}

QString OAIExchangeConfigEnabledExchange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExchangeConfigEnabledExchange::asJsonObject() const {
    QJsonObject obj;
    if (m_exchange_isSet) {
        obj.insert(QString("exchange"), ::OpenAPI::toJsonValue(m_exchange));
    }
    if (m_google_ad_manager_agency_id_isSet) {
        obj.insert(QString("googleAdManagerAgencyId"), ::OpenAPI::toJsonValue(m_google_ad_manager_agency_id));
    }
    if (m_google_ad_manager_buyer_network_id_isSet) {
        obj.insert(QString("googleAdManagerBuyerNetworkId"), ::OpenAPI::toJsonValue(m_google_ad_manager_buyer_network_id));
    }
    if (m_seat_id_isSet) {
        obj.insert(QString("seatId"), ::OpenAPI::toJsonValue(m_seat_id));
    }
    return obj;
}

QString OAIExchangeConfigEnabledExchange::getExchange() const {
    return m_exchange;
}
void OAIExchangeConfigEnabledExchange::setExchange(const QString &exchange) {
    m_exchange = exchange;
    m_exchange_isSet = true;
}

bool OAIExchangeConfigEnabledExchange::is_exchange_Set() const{
    return m_exchange_isSet;
}

bool OAIExchangeConfigEnabledExchange::is_exchange_Valid() const{
    return m_exchange_isValid;
}

QString OAIExchangeConfigEnabledExchange::getGoogleAdManagerAgencyId() const {
    return m_google_ad_manager_agency_id;
}
void OAIExchangeConfigEnabledExchange::setGoogleAdManagerAgencyId(const QString &google_ad_manager_agency_id) {
    m_google_ad_manager_agency_id = google_ad_manager_agency_id;
    m_google_ad_manager_agency_id_isSet = true;
}

bool OAIExchangeConfigEnabledExchange::is_google_ad_manager_agency_id_Set() const{
    return m_google_ad_manager_agency_id_isSet;
}

bool OAIExchangeConfigEnabledExchange::is_google_ad_manager_agency_id_Valid() const{
    return m_google_ad_manager_agency_id_isValid;
}

QString OAIExchangeConfigEnabledExchange::getGoogleAdManagerBuyerNetworkId() const {
    return m_google_ad_manager_buyer_network_id;
}
void OAIExchangeConfigEnabledExchange::setGoogleAdManagerBuyerNetworkId(const QString &google_ad_manager_buyer_network_id) {
    m_google_ad_manager_buyer_network_id = google_ad_manager_buyer_network_id;
    m_google_ad_manager_buyer_network_id_isSet = true;
}

bool OAIExchangeConfigEnabledExchange::is_google_ad_manager_buyer_network_id_Set() const{
    return m_google_ad_manager_buyer_network_id_isSet;
}

bool OAIExchangeConfigEnabledExchange::is_google_ad_manager_buyer_network_id_Valid() const{
    return m_google_ad_manager_buyer_network_id_isValid;
}

QString OAIExchangeConfigEnabledExchange::getSeatId() const {
    return m_seat_id;
}
void OAIExchangeConfigEnabledExchange::setSeatId(const QString &seat_id) {
    m_seat_id = seat_id;
    m_seat_id_isSet = true;
}

bool OAIExchangeConfigEnabledExchange::is_seat_id_Set() const{
    return m_seat_id_isSet;
}

bool OAIExchangeConfigEnabledExchange::is_seat_id_Valid() const{
    return m_seat_id_isValid;
}

bool OAIExchangeConfigEnabledExchange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_ad_manager_agency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_ad_manager_buyer_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seat_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExchangeConfigEnabledExchange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
