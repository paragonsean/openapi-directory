/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversionCountingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversionCountingConfig::OAIConversionCountingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversionCountingConfig::OAIConversionCountingConfig() {
    this->initializeModel();
}

OAIConversionCountingConfig::~OAIConversionCountingConfig() {}

void OAIConversionCountingConfig::initializeModel() {

    m_floodlight_activity_configs_isSet = false;
    m_floodlight_activity_configs_isValid = false;

    m_post_view_count_percentage_millis_isSet = false;
    m_post_view_count_percentage_millis_isValid = false;
}

void OAIConversionCountingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversionCountingConfig::fromJsonObject(QJsonObject json) {

    m_floodlight_activity_configs_isValid = ::OpenAPI::fromJsonValue(m_floodlight_activity_configs, json[QString("floodlightActivityConfigs")]);
    m_floodlight_activity_configs_isSet = !json[QString("floodlightActivityConfigs")].isNull() && m_floodlight_activity_configs_isValid;

    m_post_view_count_percentage_millis_isValid = ::OpenAPI::fromJsonValue(m_post_view_count_percentage_millis, json[QString("postViewCountPercentageMillis")]);
    m_post_view_count_percentage_millis_isSet = !json[QString("postViewCountPercentageMillis")].isNull() && m_post_view_count_percentage_millis_isValid;
}

QString OAIConversionCountingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversionCountingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_floodlight_activity_configs.size() > 0) {
        obj.insert(QString("floodlightActivityConfigs"), ::OpenAPI::toJsonValue(m_floodlight_activity_configs));
    }
    if (m_post_view_count_percentage_millis_isSet) {
        obj.insert(QString("postViewCountPercentageMillis"), ::OpenAPI::toJsonValue(m_post_view_count_percentage_millis));
    }
    return obj;
}

QList<OAITrackingFloodlightActivityConfig> OAIConversionCountingConfig::getFloodlightActivityConfigs() const {
    return m_floodlight_activity_configs;
}
void OAIConversionCountingConfig::setFloodlightActivityConfigs(const QList<OAITrackingFloodlightActivityConfig> &floodlight_activity_configs) {
    m_floodlight_activity_configs = floodlight_activity_configs;
    m_floodlight_activity_configs_isSet = true;
}

bool OAIConversionCountingConfig::is_floodlight_activity_configs_Set() const{
    return m_floodlight_activity_configs_isSet;
}

bool OAIConversionCountingConfig::is_floodlight_activity_configs_Valid() const{
    return m_floodlight_activity_configs_isValid;
}

QString OAIConversionCountingConfig::getPostViewCountPercentageMillis() const {
    return m_post_view_count_percentage_millis;
}
void OAIConversionCountingConfig::setPostViewCountPercentageMillis(const QString &post_view_count_percentage_millis) {
    m_post_view_count_percentage_millis = post_view_count_percentage_millis;
    m_post_view_count_percentage_millis_isSet = true;
}

bool OAIConversionCountingConfig::is_post_view_count_percentage_millis_Set() const{
    return m_post_view_count_percentage_millis_isSet;
}

bool OAIConversionCountingConfig::is_post_view_count_percentage_millis_Valid() const{
    return m_post_view_count_percentage_millis_isValid;
}

bool OAIConversionCountingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_floodlight_activity_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_view_count_percentage_millis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversionCountingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
