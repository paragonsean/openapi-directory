/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILookbackWindow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILookbackWindow::OAILookbackWindow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILookbackWindow::OAILookbackWindow() {
    this->initializeModel();
}

OAILookbackWindow::~OAILookbackWindow() {}

void OAILookbackWindow::initializeModel() {

    m_click_days_isSet = false;
    m_click_days_isValid = false;

    m_impression_days_isSet = false;
    m_impression_days_isValid = false;
}

void OAILookbackWindow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILookbackWindow::fromJsonObject(QJsonObject json) {

    m_click_days_isValid = ::OpenAPI::fromJsonValue(m_click_days, json[QString("clickDays")]);
    m_click_days_isSet = !json[QString("clickDays")].isNull() && m_click_days_isValid;

    m_impression_days_isValid = ::OpenAPI::fromJsonValue(m_impression_days, json[QString("impressionDays")]);
    m_impression_days_isSet = !json[QString("impressionDays")].isNull() && m_impression_days_isValid;
}

QString OAILookbackWindow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILookbackWindow::asJsonObject() const {
    QJsonObject obj;
    if (m_click_days_isSet) {
        obj.insert(QString("clickDays"), ::OpenAPI::toJsonValue(m_click_days));
    }
    if (m_impression_days_isSet) {
        obj.insert(QString("impressionDays"), ::OpenAPI::toJsonValue(m_impression_days));
    }
    return obj;
}

qint32 OAILookbackWindow::getClickDays() const {
    return m_click_days;
}
void OAILookbackWindow::setClickDays(const qint32 &click_days) {
    m_click_days = click_days;
    m_click_days_isSet = true;
}

bool OAILookbackWindow::is_click_days_Set() const{
    return m_click_days_isSet;
}

bool OAILookbackWindow::is_click_days_Valid() const{
    return m_click_days_isValid;
}

qint32 OAILookbackWindow::getImpressionDays() const {
    return m_impression_days;
}
void OAILookbackWindow::setImpressionDays(const qint32 &impression_days) {
    m_impression_days = impression_days;
    m_impression_days_isSet = true;
}

bool OAILookbackWindow::is_impression_days_Set() const{
    return m_impression_days_isSet;
}

bool OAILookbackWindow::is_impression_days_Valid() const{
    return m_impression_days_isValid;
}

bool OAILookbackWindow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_click_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impression_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILookbackWindow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
