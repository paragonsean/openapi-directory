/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventorySource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventorySource::OAIInventorySource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventorySource::OAIInventorySource() {
    this->initializeModel();
}

OAIInventorySource::~OAIInventorySource() {}

void OAIInventorySource::initializeModel() {

    m_commitment_isSet = false;
    m_commitment_isValid = false;

    m_creative_configs_isSet = false;
    m_creative_configs_isValid = false;

    m_deal_id_isSet = false;
    m_deal_id_isValid = false;

    m_delivery_method_isSet = false;
    m_delivery_method_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_exchange_isSet = false;
    m_exchange_isValid = false;

    m_guaranteed_order_id_isSet = false;
    m_guaranteed_order_id_isValid = false;

    m_inventory_source_id_isSet = false;
    m_inventory_source_id_isValid = false;

    m_inventory_source_product_type_isSet = false;
    m_inventory_source_product_type_isValid = false;

    m_inventory_source_type_isSet = false;
    m_inventory_source_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_publisher_name_isSet = false;
    m_publisher_name_isValid = false;

    m_rate_details_isSet = false;
    m_rate_details_isValid = false;

    m_read_advertiser_ids_isSet = false;
    m_read_advertiser_ids_isValid = false;

    m_read_partner_ids_isSet = false;
    m_read_partner_ids_isValid = false;

    m_read_write_accessors_isSet = false;
    m_read_write_accessors_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_range_isSet = false;
    m_time_range_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIInventorySource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventorySource::fromJsonObject(QJsonObject json) {

    m_commitment_isValid = ::OpenAPI::fromJsonValue(m_commitment, json[QString("commitment")]);
    m_commitment_isSet = !json[QString("commitment")].isNull() && m_commitment_isValid;

    m_creative_configs_isValid = ::OpenAPI::fromJsonValue(m_creative_configs, json[QString("creativeConfigs")]);
    m_creative_configs_isSet = !json[QString("creativeConfigs")].isNull() && m_creative_configs_isValid;

    m_deal_id_isValid = ::OpenAPI::fromJsonValue(m_deal_id, json[QString("dealId")]);
    m_deal_id_isSet = !json[QString("dealId")].isNull() && m_deal_id_isValid;

    m_delivery_method_isValid = ::OpenAPI::fromJsonValue(m_delivery_method, json[QString("deliveryMethod")]);
    m_delivery_method_isSet = !json[QString("deliveryMethod")].isNull() && m_delivery_method_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_exchange_isValid = ::OpenAPI::fromJsonValue(m_exchange, json[QString("exchange")]);
    m_exchange_isSet = !json[QString("exchange")].isNull() && m_exchange_isValid;

    m_guaranteed_order_id_isValid = ::OpenAPI::fromJsonValue(m_guaranteed_order_id, json[QString("guaranteedOrderId")]);
    m_guaranteed_order_id_isSet = !json[QString("guaranteedOrderId")].isNull() && m_guaranteed_order_id_isValid;

    m_inventory_source_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_source_id, json[QString("inventorySourceId")]);
    m_inventory_source_id_isSet = !json[QString("inventorySourceId")].isNull() && m_inventory_source_id_isValid;

    m_inventory_source_product_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_source_product_type, json[QString("inventorySourceProductType")]);
    m_inventory_source_product_type_isSet = !json[QString("inventorySourceProductType")].isNull() && m_inventory_source_product_type_isValid;

    m_inventory_source_type_isValid = ::OpenAPI::fromJsonValue(m_inventory_source_type, json[QString("inventorySourceType")]);
    m_inventory_source_type_isSet = !json[QString("inventorySourceType")].isNull() && m_inventory_source_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_publisher_name_isValid = ::OpenAPI::fromJsonValue(m_publisher_name, json[QString("publisherName")]);
    m_publisher_name_isSet = !json[QString("publisherName")].isNull() && m_publisher_name_isValid;

    m_rate_details_isValid = ::OpenAPI::fromJsonValue(m_rate_details, json[QString("rateDetails")]);
    m_rate_details_isSet = !json[QString("rateDetails")].isNull() && m_rate_details_isValid;

    m_read_advertiser_ids_isValid = ::OpenAPI::fromJsonValue(m_read_advertiser_ids, json[QString("readAdvertiserIds")]);
    m_read_advertiser_ids_isSet = !json[QString("readAdvertiserIds")].isNull() && m_read_advertiser_ids_isValid;

    m_read_partner_ids_isValid = ::OpenAPI::fromJsonValue(m_read_partner_ids, json[QString("readPartnerIds")]);
    m_read_partner_ids_isSet = !json[QString("readPartnerIds")].isNull() && m_read_partner_ids_isValid;

    m_read_write_accessors_isValid = ::OpenAPI::fromJsonValue(m_read_write_accessors, json[QString("readWriteAccessors")]);
    m_read_write_accessors_isSet = !json[QString("readWriteAccessors")].isNull() && m_read_write_accessors_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_range_isValid = ::OpenAPI::fromJsonValue(m_time_range, json[QString("timeRange")]);
    m_time_range_isSet = !json[QString("timeRange")].isNull() && m_time_range_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIInventorySource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventorySource::asJsonObject() const {
    QJsonObject obj;
    if (m_commitment_isSet) {
        obj.insert(QString("commitment"), ::OpenAPI::toJsonValue(m_commitment));
    }
    if (m_creative_configs.size() > 0) {
        obj.insert(QString("creativeConfigs"), ::OpenAPI::toJsonValue(m_creative_configs));
    }
    if (m_deal_id_isSet) {
        obj.insert(QString("dealId"), ::OpenAPI::toJsonValue(m_deal_id));
    }
    if (m_delivery_method_isSet) {
        obj.insert(QString("deliveryMethod"), ::OpenAPI::toJsonValue(m_delivery_method));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_exchange_isSet) {
        obj.insert(QString("exchange"), ::OpenAPI::toJsonValue(m_exchange));
    }
    if (m_guaranteed_order_id_isSet) {
        obj.insert(QString("guaranteedOrderId"), ::OpenAPI::toJsonValue(m_guaranteed_order_id));
    }
    if (m_inventory_source_id_isSet) {
        obj.insert(QString("inventorySourceId"), ::OpenAPI::toJsonValue(m_inventory_source_id));
    }
    if (m_inventory_source_product_type_isSet) {
        obj.insert(QString("inventorySourceProductType"), ::OpenAPI::toJsonValue(m_inventory_source_product_type));
    }
    if (m_inventory_source_type_isSet) {
        obj.insert(QString("inventorySourceType"), ::OpenAPI::toJsonValue(m_inventory_source_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_publisher_name_isSet) {
        obj.insert(QString("publisherName"), ::OpenAPI::toJsonValue(m_publisher_name));
    }
    if (m_rate_details.isSet()) {
        obj.insert(QString("rateDetails"), ::OpenAPI::toJsonValue(m_rate_details));
    }
    if (m_read_advertiser_ids.size() > 0) {
        obj.insert(QString("readAdvertiserIds"), ::OpenAPI::toJsonValue(m_read_advertiser_ids));
    }
    if (m_read_partner_ids.size() > 0) {
        obj.insert(QString("readPartnerIds"), ::OpenAPI::toJsonValue(m_read_partner_ids));
    }
    if (m_read_write_accessors.isSet()) {
        obj.insert(QString("readWriteAccessors"), ::OpenAPI::toJsonValue(m_read_write_accessors));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_range.isSet()) {
        obj.insert(QString("timeRange"), ::OpenAPI::toJsonValue(m_time_range));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIInventorySource::getCommitment() const {
    return m_commitment;
}
void OAIInventorySource::setCommitment(const QString &commitment) {
    m_commitment = commitment;
    m_commitment_isSet = true;
}

bool OAIInventorySource::is_commitment_Set() const{
    return m_commitment_isSet;
}

bool OAIInventorySource::is_commitment_Valid() const{
    return m_commitment_isValid;
}

QList<OAICreativeConfig> OAIInventorySource::getCreativeConfigs() const {
    return m_creative_configs;
}
void OAIInventorySource::setCreativeConfigs(const QList<OAICreativeConfig> &creative_configs) {
    m_creative_configs = creative_configs;
    m_creative_configs_isSet = true;
}

bool OAIInventorySource::is_creative_configs_Set() const{
    return m_creative_configs_isSet;
}

bool OAIInventorySource::is_creative_configs_Valid() const{
    return m_creative_configs_isValid;
}

QString OAIInventorySource::getDealId() const {
    return m_deal_id;
}
void OAIInventorySource::setDealId(const QString &deal_id) {
    m_deal_id = deal_id;
    m_deal_id_isSet = true;
}

bool OAIInventorySource::is_deal_id_Set() const{
    return m_deal_id_isSet;
}

bool OAIInventorySource::is_deal_id_Valid() const{
    return m_deal_id_isValid;
}

QString OAIInventorySource::getDeliveryMethod() const {
    return m_delivery_method;
}
void OAIInventorySource::setDeliveryMethod(const QString &delivery_method) {
    m_delivery_method = delivery_method;
    m_delivery_method_isSet = true;
}

bool OAIInventorySource::is_delivery_method_Set() const{
    return m_delivery_method_isSet;
}

bool OAIInventorySource::is_delivery_method_Valid() const{
    return m_delivery_method_isValid;
}

QString OAIInventorySource::getDisplayName() const {
    return m_display_name;
}
void OAIInventorySource::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIInventorySource::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIInventorySource::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIInventorySource::getExchange() const {
    return m_exchange;
}
void OAIInventorySource::setExchange(const QString &exchange) {
    m_exchange = exchange;
    m_exchange_isSet = true;
}

bool OAIInventorySource::is_exchange_Set() const{
    return m_exchange_isSet;
}

bool OAIInventorySource::is_exchange_Valid() const{
    return m_exchange_isValid;
}

QString OAIInventorySource::getGuaranteedOrderId() const {
    return m_guaranteed_order_id;
}
void OAIInventorySource::setGuaranteedOrderId(const QString &guaranteed_order_id) {
    m_guaranteed_order_id = guaranteed_order_id;
    m_guaranteed_order_id_isSet = true;
}

bool OAIInventorySource::is_guaranteed_order_id_Set() const{
    return m_guaranteed_order_id_isSet;
}

bool OAIInventorySource::is_guaranteed_order_id_Valid() const{
    return m_guaranteed_order_id_isValid;
}

QString OAIInventorySource::getInventorySourceId() const {
    return m_inventory_source_id;
}
void OAIInventorySource::setInventorySourceId(const QString &inventory_source_id) {
    m_inventory_source_id = inventory_source_id;
    m_inventory_source_id_isSet = true;
}

bool OAIInventorySource::is_inventory_source_id_Set() const{
    return m_inventory_source_id_isSet;
}

bool OAIInventorySource::is_inventory_source_id_Valid() const{
    return m_inventory_source_id_isValid;
}

QString OAIInventorySource::getInventorySourceProductType() const {
    return m_inventory_source_product_type;
}
void OAIInventorySource::setInventorySourceProductType(const QString &inventory_source_product_type) {
    m_inventory_source_product_type = inventory_source_product_type;
    m_inventory_source_product_type_isSet = true;
}

bool OAIInventorySource::is_inventory_source_product_type_Set() const{
    return m_inventory_source_product_type_isSet;
}

bool OAIInventorySource::is_inventory_source_product_type_Valid() const{
    return m_inventory_source_product_type_isValid;
}

QString OAIInventorySource::getInventorySourceType() const {
    return m_inventory_source_type;
}
void OAIInventorySource::setInventorySourceType(const QString &inventory_source_type) {
    m_inventory_source_type = inventory_source_type;
    m_inventory_source_type_isSet = true;
}

bool OAIInventorySource::is_inventory_source_type_Set() const{
    return m_inventory_source_type_isSet;
}

bool OAIInventorySource::is_inventory_source_type_Valid() const{
    return m_inventory_source_type_isValid;
}

QString OAIInventorySource::getName() const {
    return m_name;
}
void OAIInventorySource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInventorySource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInventorySource::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInventorySource::getPublisherName() const {
    return m_publisher_name;
}
void OAIInventorySource::setPublisherName(const QString &publisher_name) {
    m_publisher_name = publisher_name;
    m_publisher_name_isSet = true;
}

bool OAIInventorySource::is_publisher_name_Set() const{
    return m_publisher_name_isSet;
}

bool OAIInventorySource::is_publisher_name_Valid() const{
    return m_publisher_name_isValid;
}

OAIRateDetails OAIInventorySource::getRateDetails() const {
    return m_rate_details;
}
void OAIInventorySource::setRateDetails(const OAIRateDetails &rate_details) {
    m_rate_details = rate_details;
    m_rate_details_isSet = true;
}

bool OAIInventorySource::is_rate_details_Set() const{
    return m_rate_details_isSet;
}

bool OAIInventorySource::is_rate_details_Valid() const{
    return m_rate_details_isValid;
}

QList<QString> OAIInventorySource::getReadAdvertiserIds() const {
    return m_read_advertiser_ids;
}
void OAIInventorySource::setReadAdvertiserIds(const QList<QString> &read_advertiser_ids) {
    m_read_advertiser_ids = read_advertiser_ids;
    m_read_advertiser_ids_isSet = true;
}

bool OAIInventorySource::is_read_advertiser_ids_Set() const{
    return m_read_advertiser_ids_isSet;
}

bool OAIInventorySource::is_read_advertiser_ids_Valid() const{
    return m_read_advertiser_ids_isValid;
}

QList<QString> OAIInventorySource::getReadPartnerIds() const {
    return m_read_partner_ids;
}
void OAIInventorySource::setReadPartnerIds(const QList<QString> &read_partner_ids) {
    m_read_partner_ids = read_partner_ids;
    m_read_partner_ids_isSet = true;
}

bool OAIInventorySource::is_read_partner_ids_Set() const{
    return m_read_partner_ids_isSet;
}

bool OAIInventorySource::is_read_partner_ids_Valid() const{
    return m_read_partner_ids_isValid;
}

OAIInventorySourceAccessors OAIInventorySource::getReadWriteAccessors() const {
    return m_read_write_accessors;
}
void OAIInventorySource::setReadWriteAccessors(const OAIInventorySourceAccessors &read_write_accessors) {
    m_read_write_accessors = read_write_accessors;
    m_read_write_accessors_isSet = true;
}

bool OAIInventorySource::is_read_write_accessors_Set() const{
    return m_read_write_accessors_isSet;
}

bool OAIInventorySource::is_read_write_accessors_Valid() const{
    return m_read_write_accessors_isValid;
}

OAIInventorySourceStatus OAIInventorySource::getStatus() const {
    return m_status;
}
void OAIInventorySource::setStatus(const OAIInventorySourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInventorySource::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInventorySource::is_status_Valid() const{
    return m_status_isValid;
}

OAITimeRange OAIInventorySource::getTimeRange() const {
    return m_time_range;
}
void OAIInventorySource::setTimeRange(const OAITimeRange &time_range) {
    m_time_range = time_range;
    m_time_range_isSet = true;
}

bool OAIInventorySource::is_time_range_Set() const{
    return m_time_range_isSet;
}

bool OAIInventorySource::is_time_range_Valid() const{
    return m_time_range_isValid;
}

QString OAIInventorySource::getUpdateTime() const {
    return m_update_time;
}
void OAIInventorySource::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIInventorySource::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIInventorySource::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIInventorySource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commitment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guaranteed_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_source_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_advertiser_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_partner_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_write_accessors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventorySource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
