/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSdfDownloadTaskRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSdfDownloadTaskRequest::OAICreateSdfDownloadTaskRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSdfDownloadTaskRequest::OAICreateSdfDownloadTaskRequest() {
    this->initializeModel();
}

OAICreateSdfDownloadTaskRequest::~OAICreateSdfDownloadTaskRequest() {}

void OAICreateSdfDownloadTaskRequest::initializeModel() {

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_id_filter_isSet = false;
    m_id_filter_isValid = false;

    m_inventory_source_filter_isSet = false;
    m_inventory_source_filter_isValid = false;

    m_parent_entity_filter_isSet = false;
    m_parent_entity_filter_isValid = false;

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAICreateSdfDownloadTaskRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSdfDownloadTaskRequest::fromJsonObject(QJsonObject json) {

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_id_filter_isValid = ::OpenAPI::fromJsonValue(m_id_filter, json[QString("idFilter")]);
    m_id_filter_isSet = !json[QString("idFilter")].isNull() && m_id_filter_isValid;

    m_inventory_source_filter_isValid = ::OpenAPI::fromJsonValue(m_inventory_source_filter, json[QString("inventorySourceFilter")]);
    m_inventory_source_filter_isSet = !json[QString("inventorySourceFilter")].isNull() && m_inventory_source_filter_isValid;

    m_parent_entity_filter_isValid = ::OpenAPI::fromJsonValue(m_parent_entity_filter, json[QString("parentEntityFilter")]);
    m_parent_entity_filter_isSet = !json[QString("parentEntityFilter")].isNull() && m_parent_entity_filter_isValid;

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partnerId")]);
    m_partner_id_isSet = !json[QString("partnerId")].isNull() && m_partner_id_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAICreateSdfDownloadTaskRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSdfDownloadTaskRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_id_filter.isSet()) {
        obj.insert(QString("idFilter"), ::OpenAPI::toJsonValue(m_id_filter));
    }
    if (m_inventory_source_filter.isSet()) {
        obj.insert(QString("inventorySourceFilter"), ::OpenAPI::toJsonValue(m_inventory_source_filter));
    }
    if (m_parent_entity_filter.isSet()) {
        obj.insert(QString("parentEntityFilter"), ::OpenAPI::toJsonValue(m_parent_entity_filter));
    }
    if (m_partner_id_isSet) {
        obj.insert(QString("partnerId"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAICreateSdfDownloadTaskRequest::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAICreateSdfDownloadTaskRequest::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAICreateSdfDownloadTaskRequest::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAICreateSdfDownloadTaskRequest::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

OAIIdFilter OAICreateSdfDownloadTaskRequest::getIdFilter() const {
    return m_id_filter;
}
void OAICreateSdfDownloadTaskRequest::setIdFilter(const OAIIdFilter &id_filter) {
    m_id_filter = id_filter;
    m_id_filter_isSet = true;
}

bool OAICreateSdfDownloadTaskRequest::is_id_filter_Set() const{
    return m_id_filter_isSet;
}

bool OAICreateSdfDownloadTaskRequest::is_id_filter_Valid() const{
    return m_id_filter_isValid;
}

OAIInventorySourceFilter OAICreateSdfDownloadTaskRequest::getInventorySourceFilter() const {
    return m_inventory_source_filter;
}
void OAICreateSdfDownloadTaskRequest::setInventorySourceFilter(const OAIInventorySourceFilter &inventory_source_filter) {
    m_inventory_source_filter = inventory_source_filter;
    m_inventory_source_filter_isSet = true;
}

bool OAICreateSdfDownloadTaskRequest::is_inventory_source_filter_Set() const{
    return m_inventory_source_filter_isSet;
}

bool OAICreateSdfDownloadTaskRequest::is_inventory_source_filter_Valid() const{
    return m_inventory_source_filter_isValid;
}

OAIParentEntityFilter OAICreateSdfDownloadTaskRequest::getParentEntityFilter() const {
    return m_parent_entity_filter;
}
void OAICreateSdfDownloadTaskRequest::setParentEntityFilter(const OAIParentEntityFilter &parent_entity_filter) {
    m_parent_entity_filter = parent_entity_filter;
    m_parent_entity_filter_isSet = true;
}

bool OAICreateSdfDownloadTaskRequest::is_parent_entity_filter_Set() const{
    return m_parent_entity_filter_isSet;
}

bool OAICreateSdfDownloadTaskRequest::is_parent_entity_filter_Valid() const{
    return m_parent_entity_filter_isValid;
}

QString OAICreateSdfDownloadTaskRequest::getPartnerId() const {
    return m_partner_id;
}
void OAICreateSdfDownloadTaskRequest::setPartnerId(const QString &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAICreateSdfDownloadTaskRequest::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAICreateSdfDownloadTaskRequest::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

QString OAICreateSdfDownloadTaskRequest::getVersion() const {
    return m_version;
}
void OAICreateSdfDownloadTaskRequest::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICreateSdfDownloadTaskRequest::is_version_Set() const{
    return m_version_isSet;
}

bool OAICreateSdfDownloadTaskRequest::is_version_Valid() const{
    return m_version_isValid;
}

bool OAICreateSdfDownloadTaskRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_source_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_entity_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSdfDownloadTaskRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
