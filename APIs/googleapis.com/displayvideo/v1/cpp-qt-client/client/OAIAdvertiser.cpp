/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvertiser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvertiser::OAIAdvertiser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvertiser::OAIAdvertiser() {
    this->initializeModel();
}

OAIAdvertiser::~OAIAdvertiser() {}

void OAIAdvertiser::initializeModel() {

    m_ad_server_config_isSet = false;
    m_ad_server_config_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_creative_config_isSet = false;
    m_creative_config_isValid = false;

    m_data_access_config_isSet = false;
    m_data_access_config_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_entity_status_isSet = false;
    m_entity_status_isValid = false;

    m_general_config_isSet = false;
    m_general_config_isValid = false;

    m_integration_details_isSet = false;
    m_integration_details_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;

    m_prisma_enabled_isSet = false;
    m_prisma_enabled_isValid = false;

    m_serving_config_isSet = false;
    m_serving_config_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIAdvertiser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvertiser::fromJsonObject(QJsonObject json) {

    m_ad_server_config_isValid = ::OpenAPI::fromJsonValue(m_ad_server_config, json[QString("adServerConfig")]);
    m_ad_server_config_isSet = !json[QString("adServerConfig")].isNull() && m_ad_server_config_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_creative_config_isValid = ::OpenAPI::fromJsonValue(m_creative_config, json[QString("creativeConfig")]);
    m_creative_config_isSet = !json[QString("creativeConfig")].isNull() && m_creative_config_isValid;

    m_data_access_config_isValid = ::OpenAPI::fromJsonValue(m_data_access_config, json[QString("dataAccessConfig")]);
    m_data_access_config_isSet = !json[QString("dataAccessConfig")].isNull() && m_data_access_config_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_entity_status_isValid = ::OpenAPI::fromJsonValue(m_entity_status, json[QString("entityStatus")]);
    m_entity_status_isSet = !json[QString("entityStatus")].isNull() && m_entity_status_isValid;

    m_general_config_isValid = ::OpenAPI::fromJsonValue(m_general_config, json[QString("generalConfig")]);
    m_general_config_isSet = !json[QString("generalConfig")].isNull() && m_general_config_isValid;

    m_integration_details_isValid = ::OpenAPI::fromJsonValue(m_integration_details, json[QString("integrationDetails")]);
    m_integration_details_isSet = !json[QString("integrationDetails")].isNull() && m_integration_details_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partnerId")]);
    m_partner_id_isSet = !json[QString("partnerId")].isNull() && m_partner_id_isValid;

    m_prisma_enabled_isValid = ::OpenAPI::fromJsonValue(m_prisma_enabled, json[QString("prismaEnabled")]);
    m_prisma_enabled_isSet = !json[QString("prismaEnabled")].isNull() && m_prisma_enabled_isValid;

    m_serving_config_isValid = ::OpenAPI::fromJsonValue(m_serving_config, json[QString("servingConfig")]);
    m_serving_config_isSet = !json[QString("servingConfig")].isNull() && m_serving_config_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIAdvertiser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvertiser::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_server_config.isSet()) {
        obj.insert(QString("adServerConfig"), ::OpenAPI::toJsonValue(m_ad_server_config));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_creative_config.isSet()) {
        obj.insert(QString("creativeConfig"), ::OpenAPI::toJsonValue(m_creative_config));
    }
    if (m_data_access_config.isSet()) {
        obj.insert(QString("dataAccessConfig"), ::OpenAPI::toJsonValue(m_data_access_config));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_entity_status_isSet) {
        obj.insert(QString("entityStatus"), ::OpenAPI::toJsonValue(m_entity_status));
    }
    if (m_general_config.isSet()) {
        obj.insert(QString("generalConfig"), ::OpenAPI::toJsonValue(m_general_config));
    }
    if (m_integration_details.isSet()) {
        obj.insert(QString("integrationDetails"), ::OpenAPI::toJsonValue(m_integration_details));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_partner_id_isSet) {
        obj.insert(QString("partnerId"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    if (m_prisma_enabled_isSet) {
        obj.insert(QString("prismaEnabled"), ::OpenAPI::toJsonValue(m_prisma_enabled));
    }
    if (m_serving_config.isSet()) {
        obj.insert(QString("servingConfig"), ::OpenAPI::toJsonValue(m_serving_config));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIAdvertiserAdServerConfig OAIAdvertiser::getAdServerConfig() const {
    return m_ad_server_config;
}
void OAIAdvertiser::setAdServerConfig(const OAIAdvertiserAdServerConfig &ad_server_config) {
    m_ad_server_config = ad_server_config;
    m_ad_server_config_isSet = true;
}

bool OAIAdvertiser::is_ad_server_config_Set() const{
    return m_ad_server_config_isSet;
}

bool OAIAdvertiser::is_ad_server_config_Valid() const{
    return m_ad_server_config_isValid;
}

QString OAIAdvertiser::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIAdvertiser::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIAdvertiser::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIAdvertiser::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

OAIAdvertiserCreativeConfig OAIAdvertiser::getCreativeConfig() const {
    return m_creative_config;
}
void OAIAdvertiser::setCreativeConfig(const OAIAdvertiserCreativeConfig &creative_config) {
    m_creative_config = creative_config;
    m_creative_config_isSet = true;
}

bool OAIAdvertiser::is_creative_config_Set() const{
    return m_creative_config_isSet;
}

bool OAIAdvertiser::is_creative_config_Valid() const{
    return m_creative_config_isValid;
}

OAIAdvertiserDataAccessConfig OAIAdvertiser::getDataAccessConfig() const {
    return m_data_access_config;
}
void OAIAdvertiser::setDataAccessConfig(const OAIAdvertiserDataAccessConfig &data_access_config) {
    m_data_access_config = data_access_config;
    m_data_access_config_isSet = true;
}

bool OAIAdvertiser::is_data_access_config_Set() const{
    return m_data_access_config_isSet;
}

bool OAIAdvertiser::is_data_access_config_Valid() const{
    return m_data_access_config_isValid;
}

QString OAIAdvertiser::getDisplayName() const {
    return m_display_name;
}
void OAIAdvertiser::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAdvertiser::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAdvertiser::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAdvertiser::getEntityStatus() const {
    return m_entity_status;
}
void OAIAdvertiser::setEntityStatus(const QString &entity_status) {
    m_entity_status = entity_status;
    m_entity_status_isSet = true;
}

bool OAIAdvertiser::is_entity_status_Set() const{
    return m_entity_status_isSet;
}

bool OAIAdvertiser::is_entity_status_Valid() const{
    return m_entity_status_isValid;
}

OAIAdvertiserGeneralConfig OAIAdvertiser::getGeneralConfig() const {
    return m_general_config;
}
void OAIAdvertiser::setGeneralConfig(const OAIAdvertiserGeneralConfig &general_config) {
    m_general_config = general_config;
    m_general_config_isSet = true;
}

bool OAIAdvertiser::is_general_config_Set() const{
    return m_general_config_isSet;
}

bool OAIAdvertiser::is_general_config_Valid() const{
    return m_general_config_isValid;
}

OAIIntegrationDetails OAIAdvertiser::getIntegrationDetails() const {
    return m_integration_details;
}
void OAIAdvertiser::setIntegrationDetails(const OAIIntegrationDetails &integration_details) {
    m_integration_details = integration_details;
    m_integration_details_isSet = true;
}

bool OAIAdvertiser::is_integration_details_Set() const{
    return m_integration_details_isSet;
}

bool OAIAdvertiser::is_integration_details_Valid() const{
    return m_integration_details_isValid;
}

QString OAIAdvertiser::getName() const {
    return m_name;
}
void OAIAdvertiser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdvertiser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdvertiser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAdvertiser::getPartnerId() const {
    return m_partner_id;
}
void OAIAdvertiser::setPartnerId(const QString &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAIAdvertiser::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAIAdvertiser::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

bool OAIAdvertiser::isPrismaEnabled() const {
    return m_prisma_enabled;
}
void OAIAdvertiser::setPrismaEnabled(const bool &prisma_enabled) {
    m_prisma_enabled = prisma_enabled;
    m_prisma_enabled_isSet = true;
}

bool OAIAdvertiser::is_prisma_enabled_Set() const{
    return m_prisma_enabled_isSet;
}

bool OAIAdvertiser::is_prisma_enabled_Valid() const{
    return m_prisma_enabled_isValid;
}

OAIAdvertiserTargetingConfig OAIAdvertiser::getServingConfig() const {
    return m_serving_config;
}
void OAIAdvertiser::setServingConfig(const OAIAdvertiserTargetingConfig &serving_config) {
    m_serving_config = serving_config;
    m_serving_config_isSet = true;
}

bool OAIAdvertiser::is_serving_config_Set() const{
    return m_serving_config_isSet;
}

bool OAIAdvertiser::is_serving_config_Valid() const{
    return m_serving_config_isValid;
}

QString OAIAdvertiser::getUpdateTime() const {
    return m_update_time;
}
void OAIAdvertiser::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIAdvertiser::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIAdvertiser::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIAdvertiser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_server_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_access_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prisma_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serving_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvertiser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
