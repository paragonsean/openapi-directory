/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFloodlightGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFloodlightGroup::OAIFloodlightGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFloodlightGroup::OAIFloodlightGroup() {
    this->initializeModel();
}

OAIFloodlightGroup::~OAIFloodlightGroup() {}

void OAIFloodlightGroup::initializeModel() {

    m_active_view_config_isSet = false;
    m_active_view_config_isValid = false;

    m_custom_variables_isSet = false;
    m_custom_variables_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_floodlight_group_id_isSet = false;
    m_floodlight_group_id_isValid = false;

    m_lookback_window_isSet = false;
    m_lookback_window_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_web_tag_type_isSet = false;
    m_web_tag_type_isValid = false;
}

void OAIFloodlightGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFloodlightGroup::fromJsonObject(QJsonObject json) {

    m_active_view_config_isValid = ::OpenAPI::fromJsonValue(m_active_view_config, json[QString("activeViewConfig")]);
    m_active_view_config_isSet = !json[QString("activeViewConfig")].isNull() && m_active_view_config_isValid;

    m_custom_variables_isValid = ::OpenAPI::fromJsonValue(m_custom_variables, json[QString("customVariables")]);
    m_custom_variables_isSet = !json[QString("customVariables")].isNull() && m_custom_variables_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_floodlight_group_id_isValid = ::OpenAPI::fromJsonValue(m_floodlight_group_id, json[QString("floodlightGroupId")]);
    m_floodlight_group_id_isSet = !json[QString("floodlightGroupId")].isNull() && m_floodlight_group_id_isValid;

    m_lookback_window_isValid = ::OpenAPI::fromJsonValue(m_lookback_window, json[QString("lookbackWindow")]);
    m_lookback_window_isSet = !json[QString("lookbackWindow")].isNull() && m_lookback_window_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_web_tag_type_isValid = ::OpenAPI::fromJsonValue(m_web_tag_type, json[QString("webTagType")]);
    m_web_tag_type_isSet = !json[QString("webTagType")].isNull() && m_web_tag_type_isValid;
}

QString OAIFloodlightGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFloodlightGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_active_view_config.isSet()) {
        obj.insert(QString("activeViewConfig"), ::OpenAPI::toJsonValue(m_active_view_config));
    }
    if (m_custom_variables.size() > 0) {
        obj.insert(QString("customVariables"), ::OpenAPI::toJsonValue(m_custom_variables));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_floodlight_group_id_isSet) {
        obj.insert(QString("floodlightGroupId"), ::OpenAPI::toJsonValue(m_floodlight_group_id));
    }
    if (m_lookback_window.isSet()) {
        obj.insert(QString("lookbackWindow"), ::OpenAPI::toJsonValue(m_lookback_window));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_web_tag_type_isSet) {
        obj.insert(QString("webTagType"), ::OpenAPI::toJsonValue(m_web_tag_type));
    }
    return obj;
}

OAIActiveViewVideoViewabilityMetricConfig OAIFloodlightGroup::getActiveViewConfig() const {
    return m_active_view_config;
}
void OAIFloodlightGroup::setActiveViewConfig(const OAIActiveViewVideoViewabilityMetricConfig &active_view_config) {
    m_active_view_config = active_view_config;
    m_active_view_config_isSet = true;
}

bool OAIFloodlightGroup::is_active_view_config_Set() const{
    return m_active_view_config_isSet;
}

bool OAIFloodlightGroup::is_active_view_config_Valid() const{
    return m_active_view_config_isValid;
}

QMap<QString, QJsonValue> OAIFloodlightGroup::getCustomVariables() const {
    return m_custom_variables;
}
void OAIFloodlightGroup::setCustomVariables(const QMap<QString, QJsonValue> &custom_variables) {
    m_custom_variables = custom_variables;
    m_custom_variables_isSet = true;
}

bool OAIFloodlightGroup::is_custom_variables_Set() const{
    return m_custom_variables_isSet;
}

bool OAIFloodlightGroup::is_custom_variables_Valid() const{
    return m_custom_variables_isValid;
}

QString OAIFloodlightGroup::getDisplayName() const {
    return m_display_name;
}
void OAIFloodlightGroup::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIFloodlightGroup::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIFloodlightGroup::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIFloodlightGroup::getFloodlightGroupId() const {
    return m_floodlight_group_id;
}
void OAIFloodlightGroup::setFloodlightGroupId(const QString &floodlight_group_id) {
    m_floodlight_group_id = floodlight_group_id;
    m_floodlight_group_id_isSet = true;
}

bool OAIFloodlightGroup::is_floodlight_group_id_Set() const{
    return m_floodlight_group_id_isSet;
}

bool OAIFloodlightGroup::is_floodlight_group_id_Valid() const{
    return m_floodlight_group_id_isValid;
}

OAILookbackWindow OAIFloodlightGroup::getLookbackWindow() const {
    return m_lookback_window;
}
void OAIFloodlightGroup::setLookbackWindow(const OAILookbackWindow &lookback_window) {
    m_lookback_window = lookback_window;
    m_lookback_window_isSet = true;
}

bool OAIFloodlightGroup::is_lookback_window_Set() const{
    return m_lookback_window_isSet;
}

bool OAIFloodlightGroup::is_lookback_window_Valid() const{
    return m_lookback_window_isValid;
}

QString OAIFloodlightGroup::getName() const {
    return m_name;
}
void OAIFloodlightGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFloodlightGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFloodlightGroup::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFloodlightGroup::getWebTagType() const {
    return m_web_tag_type;
}
void OAIFloodlightGroup::setWebTagType(const QString &web_tag_type) {
    m_web_tag_type = web_tag_type;
    m_web_tag_type_isSet = true;
}

bool OAIFloodlightGroup::is_web_tag_type_Set() const{
    return m_web_tag_type_isSet;
}

bool OAIFloodlightGroup::is_web_tag_type_Valid() const{
    return m_web_tag_type_isValid;
}

bool OAIFloodlightGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_view_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookback_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_tag_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFloodlightGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
