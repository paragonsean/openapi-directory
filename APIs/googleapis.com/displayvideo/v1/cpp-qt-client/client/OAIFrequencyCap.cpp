/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrequencyCap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrequencyCap::OAIFrequencyCap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrequencyCap::OAIFrequencyCap() {
    this->initializeModel();
}

OAIFrequencyCap::~OAIFrequencyCap() {}

void OAIFrequencyCap::initializeModel() {

    m_max_impressions_isSet = false;
    m_max_impressions_isValid = false;

    m_time_unit_isSet = false;
    m_time_unit_isValid = false;

    m_time_unit_count_isSet = false;
    m_time_unit_count_isValid = false;

    m_unlimited_isSet = false;
    m_unlimited_isValid = false;
}

void OAIFrequencyCap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFrequencyCap::fromJsonObject(QJsonObject json) {

    m_max_impressions_isValid = ::OpenAPI::fromJsonValue(m_max_impressions, json[QString("maxImpressions")]);
    m_max_impressions_isSet = !json[QString("maxImpressions")].isNull() && m_max_impressions_isValid;

    m_time_unit_isValid = ::OpenAPI::fromJsonValue(m_time_unit, json[QString("timeUnit")]);
    m_time_unit_isSet = !json[QString("timeUnit")].isNull() && m_time_unit_isValid;

    m_time_unit_count_isValid = ::OpenAPI::fromJsonValue(m_time_unit_count, json[QString("timeUnitCount")]);
    m_time_unit_count_isSet = !json[QString("timeUnitCount")].isNull() && m_time_unit_count_isValid;

    m_unlimited_isValid = ::OpenAPI::fromJsonValue(m_unlimited, json[QString("unlimited")]);
    m_unlimited_isSet = !json[QString("unlimited")].isNull() && m_unlimited_isValid;
}

QString OAIFrequencyCap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFrequencyCap::asJsonObject() const {
    QJsonObject obj;
    if (m_max_impressions_isSet) {
        obj.insert(QString("maxImpressions"), ::OpenAPI::toJsonValue(m_max_impressions));
    }
    if (m_time_unit_isSet) {
        obj.insert(QString("timeUnit"), ::OpenAPI::toJsonValue(m_time_unit));
    }
    if (m_time_unit_count_isSet) {
        obj.insert(QString("timeUnitCount"), ::OpenAPI::toJsonValue(m_time_unit_count));
    }
    if (m_unlimited_isSet) {
        obj.insert(QString("unlimited"), ::OpenAPI::toJsonValue(m_unlimited));
    }
    return obj;
}

qint32 OAIFrequencyCap::getMaxImpressions() const {
    return m_max_impressions;
}
void OAIFrequencyCap::setMaxImpressions(const qint32 &max_impressions) {
    m_max_impressions = max_impressions;
    m_max_impressions_isSet = true;
}

bool OAIFrequencyCap::is_max_impressions_Set() const{
    return m_max_impressions_isSet;
}

bool OAIFrequencyCap::is_max_impressions_Valid() const{
    return m_max_impressions_isValid;
}

QString OAIFrequencyCap::getTimeUnit() const {
    return m_time_unit;
}
void OAIFrequencyCap::setTimeUnit(const QString &time_unit) {
    m_time_unit = time_unit;
    m_time_unit_isSet = true;
}

bool OAIFrequencyCap::is_time_unit_Set() const{
    return m_time_unit_isSet;
}

bool OAIFrequencyCap::is_time_unit_Valid() const{
    return m_time_unit_isValid;
}

qint32 OAIFrequencyCap::getTimeUnitCount() const {
    return m_time_unit_count;
}
void OAIFrequencyCap::setTimeUnitCount(const qint32 &time_unit_count) {
    m_time_unit_count = time_unit_count;
    m_time_unit_count_isSet = true;
}

bool OAIFrequencyCap::is_time_unit_count_Set() const{
    return m_time_unit_count_isSet;
}

bool OAIFrequencyCap::is_time_unit_count_Valid() const{
    return m_time_unit_count_isValid;
}

bool OAIFrequencyCap::isUnlimited() const {
    return m_unlimited;
}
void OAIFrequencyCap::setUnlimited(const bool &unlimited) {
    m_unlimited = unlimited;
    m_unlimited_isSet = true;
}

bool OAIFrequencyCap::is_unlimited_Set() const{
    return m_unlimited_isSet;
}

bool OAIFrequencyCap::is_unlimited_Valid() const{
    return m_unlimited_isValid;
}

bool OAIFrequencyCap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_impressions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_unit_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlimited_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFrequencyCap::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
