/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINegativeKeywordList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINegativeKeywordList::OAINegativeKeywordList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINegativeKeywordList::OAINegativeKeywordList() {
    this->initializeModel();
}

OAINegativeKeywordList::~OAINegativeKeywordList() {}

void OAINegativeKeywordList::initializeModel() {

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_negative_keyword_list_id_isSet = false;
    m_negative_keyword_list_id_isValid = false;

    m_targeted_line_item_count_isSet = false;
    m_targeted_line_item_count_isValid = false;
}

void OAINegativeKeywordList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINegativeKeywordList::fromJsonObject(QJsonObject json) {

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_negative_keyword_list_id_isValid = ::OpenAPI::fromJsonValue(m_negative_keyword_list_id, json[QString("negativeKeywordListId")]);
    m_negative_keyword_list_id_isSet = !json[QString("negativeKeywordListId")].isNull() && m_negative_keyword_list_id_isValid;

    m_targeted_line_item_count_isValid = ::OpenAPI::fromJsonValue(m_targeted_line_item_count, json[QString("targetedLineItemCount")]);
    m_targeted_line_item_count_isSet = !json[QString("targetedLineItemCount")].isNull() && m_targeted_line_item_count_isValid;
}

QString OAINegativeKeywordList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINegativeKeywordList::asJsonObject() const {
    QJsonObject obj;
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_negative_keyword_list_id_isSet) {
        obj.insert(QString("negativeKeywordListId"), ::OpenAPI::toJsonValue(m_negative_keyword_list_id));
    }
    if (m_targeted_line_item_count_isSet) {
        obj.insert(QString("targetedLineItemCount"), ::OpenAPI::toJsonValue(m_targeted_line_item_count));
    }
    return obj;
}

QString OAINegativeKeywordList::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAINegativeKeywordList::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAINegativeKeywordList::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAINegativeKeywordList::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

QString OAINegativeKeywordList::getDisplayName() const {
    return m_display_name;
}
void OAINegativeKeywordList::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAINegativeKeywordList::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAINegativeKeywordList::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAINegativeKeywordList::getName() const {
    return m_name;
}
void OAINegativeKeywordList::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINegativeKeywordList::is_name_Set() const{
    return m_name_isSet;
}

bool OAINegativeKeywordList::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINegativeKeywordList::getNegativeKeywordListId() const {
    return m_negative_keyword_list_id;
}
void OAINegativeKeywordList::setNegativeKeywordListId(const QString &negative_keyword_list_id) {
    m_negative_keyword_list_id = negative_keyword_list_id;
    m_negative_keyword_list_id_isSet = true;
}

bool OAINegativeKeywordList::is_negative_keyword_list_id_Set() const{
    return m_negative_keyword_list_id_isSet;
}

bool OAINegativeKeywordList::is_negative_keyword_list_id_Valid() const{
    return m_negative_keyword_list_id_isValid;
}

QString OAINegativeKeywordList::getTargetedLineItemCount() const {
    return m_targeted_line_item_count;
}
void OAINegativeKeywordList::setTargetedLineItemCount(const QString &targeted_line_item_count) {
    m_targeted_line_item_count = targeted_line_item_count;
    m_targeted_line_item_count_isSet = true;
}

bool OAINegativeKeywordList::is_targeted_line_item_count_Set() const{
    return m_targeted_line_item_count_isSet;
}

bool OAINegativeKeywordList::is_targeted_line_item_count_Valid() const{
    return m_targeted_line_item_count_isValid;
}

bool OAINegativeKeywordList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negative_keyword_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeted_line_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINegativeKeywordList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
