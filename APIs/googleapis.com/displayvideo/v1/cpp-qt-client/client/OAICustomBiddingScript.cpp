/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomBiddingScript.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomBiddingScript::OAICustomBiddingScript(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomBiddingScript::OAICustomBiddingScript() {
    this->initializeModel();
}

OAICustomBiddingScript::~OAICustomBiddingScript() {}

void OAICustomBiddingScript::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_custom_bidding_algorithm_id_isSet = false;
    m_custom_bidding_algorithm_id_isValid = false;

    m_custom_bidding_script_id_isSet = false;
    m_custom_bidding_script_id_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICustomBiddingScript::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomBiddingScript::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_custom_bidding_algorithm_id_isValid = ::OpenAPI::fromJsonValue(m_custom_bidding_algorithm_id, json[QString("customBiddingAlgorithmId")]);
    m_custom_bidding_algorithm_id_isSet = !json[QString("customBiddingAlgorithmId")].isNull() && m_custom_bidding_algorithm_id_isValid;

    m_custom_bidding_script_id_isValid = ::OpenAPI::fromJsonValue(m_custom_bidding_script_id, json[QString("customBiddingScriptId")]);
    m_custom_bidding_script_id_isSet = !json[QString("customBiddingScriptId")].isNull() && m_custom_bidding_script_id_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAICustomBiddingScript::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomBiddingScript::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_custom_bidding_algorithm_id_isSet) {
        obj.insert(QString("customBiddingAlgorithmId"), ::OpenAPI::toJsonValue(m_custom_bidding_algorithm_id));
    }
    if (m_custom_bidding_script_id_isSet) {
        obj.insert(QString("customBiddingScriptId"), ::OpenAPI::toJsonValue(m_custom_bidding_script_id));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_script.isSet()) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

bool OAICustomBiddingScript::isActive() const {
    return m_active;
}
void OAICustomBiddingScript::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICustomBiddingScript::is_active_Set() const{
    return m_active_isSet;
}

bool OAICustomBiddingScript::is_active_Valid() const{
    return m_active_isValid;
}

QString OAICustomBiddingScript::getCreateTime() const {
    return m_create_time;
}
void OAICustomBiddingScript::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICustomBiddingScript::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICustomBiddingScript::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAICustomBiddingScript::getCustomBiddingAlgorithmId() const {
    return m_custom_bidding_algorithm_id;
}
void OAICustomBiddingScript::setCustomBiddingAlgorithmId(const QString &custom_bidding_algorithm_id) {
    m_custom_bidding_algorithm_id = custom_bidding_algorithm_id;
    m_custom_bidding_algorithm_id_isSet = true;
}

bool OAICustomBiddingScript::is_custom_bidding_algorithm_id_Set() const{
    return m_custom_bidding_algorithm_id_isSet;
}

bool OAICustomBiddingScript::is_custom_bidding_algorithm_id_Valid() const{
    return m_custom_bidding_algorithm_id_isValid;
}

QString OAICustomBiddingScript::getCustomBiddingScriptId() const {
    return m_custom_bidding_script_id;
}
void OAICustomBiddingScript::setCustomBiddingScriptId(const QString &custom_bidding_script_id) {
    m_custom_bidding_script_id = custom_bidding_script_id;
    m_custom_bidding_script_id_isSet = true;
}

bool OAICustomBiddingScript::is_custom_bidding_script_id_Set() const{
    return m_custom_bidding_script_id_isSet;
}

bool OAICustomBiddingScript::is_custom_bidding_script_id_Valid() const{
    return m_custom_bidding_script_id_isValid;
}

QList<OAIScriptError> OAICustomBiddingScript::getErrors() const {
    return m_errors;
}
void OAICustomBiddingScript::setErrors(const QList<OAIScriptError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAICustomBiddingScript::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAICustomBiddingScript::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAICustomBiddingScript::getName() const {
    return m_name;
}
void OAICustomBiddingScript::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomBiddingScript::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomBiddingScript::is_name_Valid() const{
    return m_name_isValid;
}

OAICustomBiddingScriptRef OAICustomBiddingScript::getScript() const {
    return m_script;
}
void OAICustomBiddingScript::setScript(const OAICustomBiddingScriptRef &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAICustomBiddingScript::is_script_Set() const{
    return m_script_isSet;
}

bool OAICustomBiddingScript::is_script_Valid() const{
    return m_script_isValid;
}

QString OAICustomBiddingScript::getState() const {
    return m_state;
}
void OAICustomBiddingScript::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICustomBiddingScript::is_state_Set() const{
    return m_state_isSet;
}

bool OAICustomBiddingScript::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICustomBiddingScript::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_bidding_algorithm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_bidding_script_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomBiddingScript::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
