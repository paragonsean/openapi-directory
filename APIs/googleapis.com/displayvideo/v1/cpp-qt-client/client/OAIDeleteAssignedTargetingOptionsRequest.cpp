/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteAssignedTargetingOptionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteAssignedTargetingOptionsRequest::OAIDeleteAssignedTargetingOptionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteAssignedTargetingOptionsRequest::OAIDeleteAssignedTargetingOptionsRequest() {
    this->initializeModel();
}

OAIDeleteAssignedTargetingOptionsRequest::~OAIDeleteAssignedTargetingOptionsRequest() {}

void OAIDeleteAssignedTargetingOptionsRequest::initializeModel() {

    m_assigned_targeting_option_ids_isSet = false;
    m_assigned_targeting_option_ids_isValid = false;

    m_targeting_type_isSet = false;
    m_targeting_type_isValid = false;
}

void OAIDeleteAssignedTargetingOptionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteAssignedTargetingOptionsRequest::fromJsonObject(QJsonObject json) {

    m_assigned_targeting_option_ids_isValid = ::OpenAPI::fromJsonValue(m_assigned_targeting_option_ids, json[QString("assignedTargetingOptionIds")]);
    m_assigned_targeting_option_ids_isSet = !json[QString("assignedTargetingOptionIds")].isNull() && m_assigned_targeting_option_ids_isValid;

    m_targeting_type_isValid = ::OpenAPI::fromJsonValue(m_targeting_type, json[QString("targetingType")]);
    m_targeting_type_isSet = !json[QString("targetingType")].isNull() && m_targeting_type_isValid;
}

QString OAIDeleteAssignedTargetingOptionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteAssignedTargetingOptionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_assigned_targeting_option_ids.size() > 0) {
        obj.insert(QString("assignedTargetingOptionIds"), ::OpenAPI::toJsonValue(m_assigned_targeting_option_ids));
    }
    if (m_targeting_type_isSet) {
        obj.insert(QString("targetingType"), ::OpenAPI::toJsonValue(m_targeting_type));
    }
    return obj;
}

QList<QString> OAIDeleteAssignedTargetingOptionsRequest::getAssignedTargetingOptionIds() const {
    return m_assigned_targeting_option_ids;
}
void OAIDeleteAssignedTargetingOptionsRequest::setAssignedTargetingOptionIds(const QList<QString> &assigned_targeting_option_ids) {
    m_assigned_targeting_option_ids = assigned_targeting_option_ids;
    m_assigned_targeting_option_ids_isSet = true;
}

bool OAIDeleteAssignedTargetingOptionsRequest::is_assigned_targeting_option_ids_Set() const{
    return m_assigned_targeting_option_ids_isSet;
}

bool OAIDeleteAssignedTargetingOptionsRequest::is_assigned_targeting_option_ids_Valid() const{
    return m_assigned_targeting_option_ids_isValid;
}

QString OAIDeleteAssignedTargetingOptionsRequest::getTargetingType() const {
    return m_targeting_type;
}
void OAIDeleteAssignedTargetingOptionsRequest::setTargetingType(const QString &targeting_type) {
    m_targeting_type = targeting_type;
    m_targeting_type_isSet = true;
}

bool OAIDeleteAssignedTargetingOptionsRequest::is_targeting_type_Set() const{
    return m_targeting_type_isSet;
}

bool OAIDeleteAssignedTargetingOptionsRequest::is_targeting_type_Valid() const{
    return m_targeting_type_isValid;
}

bool OAIDeleteAssignedTargetingOptionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assigned_targeting_option_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteAssignedTargetingOptionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
