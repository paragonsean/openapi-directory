/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceGoalBidStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceGoalBidStrategy::OAIPerformanceGoalBidStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceGoalBidStrategy::OAIPerformanceGoalBidStrategy() {
    this->initializeModel();
}

OAIPerformanceGoalBidStrategy::~OAIPerformanceGoalBidStrategy() {}

void OAIPerformanceGoalBidStrategy::initializeModel() {

    m_custom_bidding_algorithm_id_isSet = false;
    m_custom_bidding_algorithm_id_isValid = false;

    m_max_average_cpm_bid_amount_micros_isSet = false;
    m_max_average_cpm_bid_amount_micros_isValid = false;

    m_performance_goal_amount_micros_isSet = false;
    m_performance_goal_amount_micros_isValid = false;

    m_performance_goal_type_isSet = false;
    m_performance_goal_type_isValid = false;
}

void OAIPerformanceGoalBidStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceGoalBidStrategy::fromJsonObject(QJsonObject json) {

    m_custom_bidding_algorithm_id_isValid = ::OpenAPI::fromJsonValue(m_custom_bidding_algorithm_id, json[QString("customBiddingAlgorithmId")]);
    m_custom_bidding_algorithm_id_isSet = !json[QString("customBiddingAlgorithmId")].isNull() && m_custom_bidding_algorithm_id_isValid;

    m_max_average_cpm_bid_amount_micros_isValid = ::OpenAPI::fromJsonValue(m_max_average_cpm_bid_amount_micros, json[QString("maxAverageCpmBidAmountMicros")]);
    m_max_average_cpm_bid_amount_micros_isSet = !json[QString("maxAverageCpmBidAmountMicros")].isNull() && m_max_average_cpm_bid_amount_micros_isValid;

    m_performance_goal_amount_micros_isValid = ::OpenAPI::fromJsonValue(m_performance_goal_amount_micros, json[QString("performanceGoalAmountMicros")]);
    m_performance_goal_amount_micros_isSet = !json[QString("performanceGoalAmountMicros")].isNull() && m_performance_goal_amount_micros_isValid;

    m_performance_goal_type_isValid = ::OpenAPI::fromJsonValue(m_performance_goal_type, json[QString("performanceGoalType")]);
    m_performance_goal_type_isSet = !json[QString("performanceGoalType")].isNull() && m_performance_goal_type_isValid;
}

QString OAIPerformanceGoalBidStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceGoalBidStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_bidding_algorithm_id_isSet) {
        obj.insert(QString("customBiddingAlgorithmId"), ::OpenAPI::toJsonValue(m_custom_bidding_algorithm_id));
    }
    if (m_max_average_cpm_bid_amount_micros_isSet) {
        obj.insert(QString("maxAverageCpmBidAmountMicros"), ::OpenAPI::toJsonValue(m_max_average_cpm_bid_amount_micros));
    }
    if (m_performance_goal_amount_micros_isSet) {
        obj.insert(QString("performanceGoalAmountMicros"), ::OpenAPI::toJsonValue(m_performance_goal_amount_micros));
    }
    if (m_performance_goal_type_isSet) {
        obj.insert(QString("performanceGoalType"), ::OpenAPI::toJsonValue(m_performance_goal_type));
    }
    return obj;
}

QString OAIPerformanceGoalBidStrategy::getCustomBiddingAlgorithmId() const {
    return m_custom_bidding_algorithm_id;
}
void OAIPerformanceGoalBidStrategy::setCustomBiddingAlgorithmId(const QString &custom_bidding_algorithm_id) {
    m_custom_bidding_algorithm_id = custom_bidding_algorithm_id;
    m_custom_bidding_algorithm_id_isSet = true;
}

bool OAIPerformanceGoalBidStrategy::is_custom_bidding_algorithm_id_Set() const{
    return m_custom_bidding_algorithm_id_isSet;
}

bool OAIPerformanceGoalBidStrategy::is_custom_bidding_algorithm_id_Valid() const{
    return m_custom_bidding_algorithm_id_isValid;
}

QString OAIPerformanceGoalBidStrategy::getMaxAverageCpmBidAmountMicros() const {
    return m_max_average_cpm_bid_amount_micros;
}
void OAIPerformanceGoalBidStrategy::setMaxAverageCpmBidAmountMicros(const QString &max_average_cpm_bid_amount_micros) {
    m_max_average_cpm_bid_amount_micros = max_average_cpm_bid_amount_micros;
    m_max_average_cpm_bid_amount_micros_isSet = true;
}

bool OAIPerformanceGoalBidStrategy::is_max_average_cpm_bid_amount_micros_Set() const{
    return m_max_average_cpm_bid_amount_micros_isSet;
}

bool OAIPerformanceGoalBidStrategy::is_max_average_cpm_bid_amount_micros_Valid() const{
    return m_max_average_cpm_bid_amount_micros_isValid;
}

QString OAIPerformanceGoalBidStrategy::getPerformanceGoalAmountMicros() const {
    return m_performance_goal_amount_micros;
}
void OAIPerformanceGoalBidStrategy::setPerformanceGoalAmountMicros(const QString &performance_goal_amount_micros) {
    m_performance_goal_amount_micros = performance_goal_amount_micros;
    m_performance_goal_amount_micros_isSet = true;
}

bool OAIPerformanceGoalBidStrategy::is_performance_goal_amount_micros_Set() const{
    return m_performance_goal_amount_micros_isSet;
}

bool OAIPerformanceGoalBidStrategy::is_performance_goal_amount_micros_Valid() const{
    return m_performance_goal_amount_micros_isValid;
}

QString OAIPerformanceGoalBidStrategy::getPerformanceGoalType() const {
    return m_performance_goal_type;
}
void OAIPerformanceGoalBidStrategy::setPerformanceGoalType(const QString &performance_goal_type) {
    m_performance_goal_type = performance_goal_type;
    m_performance_goal_type_isSet = true;
}

bool OAIPerformanceGoalBidStrategy::is_performance_goal_type_Set() const{
    return m_performance_goal_type_isSet;
}

bool OAIPerformanceGoalBidStrategy::is_performance_goal_type_Valid() const{
    return m_performance_goal_type_isValid;
}

bool OAIPerformanceGoalBidStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_bidding_algorithm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_average_cpm_bid_amount_micros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_goal_amount_micros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_goal_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceGoalBidStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
