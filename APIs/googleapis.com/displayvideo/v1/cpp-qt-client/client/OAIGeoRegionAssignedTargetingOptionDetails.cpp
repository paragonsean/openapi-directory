/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoRegionAssignedTargetingOptionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoRegionAssignedTargetingOptionDetails::OAIGeoRegionAssignedTargetingOptionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoRegionAssignedTargetingOptionDetails::OAIGeoRegionAssignedTargetingOptionDetails() {
    this->initializeModel();
}

OAIGeoRegionAssignedTargetingOptionDetails::~OAIGeoRegionAssignedTargetingOptionDetails() {}

void OAIGeoRegionAssignedTargetingOptionDetails::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_geo_region_type_isSet = false;
    m_geo_region_type_isValid = false;

    m_negative_isSet = false;
    m_negative_isValid = false;

    m_targeting_option_id_isSet = false;
    m_targeting_option_id_isValid = false;
}

void OAIGeoRegionAssignedTargetingOptionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoRegionAssignedTargetingOptionDetails::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_geo_region_type_isValid = ::OpenAPI::fromJsonValue(m_geo_region_type, json[QString("geoRegionType")]);
    m_geo_region_type_isSet = !json[QString("geoRegionType")].isNull() && m_geo_region_type_isValid;

    m_negative_isValid = ::OpenAPI::fromJsonValue(m_negative, json[QString("negative")]);
    m_negative_isSet = !json[QString("negative")].isNull() && m_negative_isValid;

    m_targeting_option_id_isValid = ::OpenAPI::fromJsonValue(m_targeting_option_id, json[QString("targetingOptionId")]);
    m_targeting_option_id_isSet = !json[QString("targetingOptionId")].isNull() && m_targeting_option_id_isValid;
}

QString OAIGeoRegionAssignedTargetingOptionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoRegionAssignedTargetingOptionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_geo_region_type_isSet) {
        obj.insert(QString("geoRegionType"), ::OpenAPI::toJsonValue(m_geo_region_type));
    }
    if (m_negative_isSet) {
        obj.insert(QString("negative"), ::OpenAPI::toJsonValue(m_negative));
    }
    if (m_targeting_option_id_isSet) {
        obj.insert(QString("targetingOptionId"), ::OpenAPI::toJsonValue(m_targeting_option_id));
    }
    return obj;
}

QString OAIGeoRegionAssignedTargetingOptionDetails::getDisplayName() const {
    return m_display_name;
}
void OAIGeoRegionAssignedTargetingOptionDetails::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGeoRegionAssignedTargetingOptionDetails::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGeoRegionAssignedTargetingOptionDetails::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGeoRegionAssignedTargetingOptionDetails::getGeoRegionType() const {
    return m_geo_region_type;
}
void OAIGeoRegionAssignedTargetingOptionDetails::setGeoRegionType(const QString &geo_region_type) {
    m_geo_region_type = geo_region_type;
    m_geo_region_type_isSet = true;
}

bool OAIGeoRegionAssignedTargetingOptionDetails::is_geo_region_type_Set() const{
    return m_geo_region_type_isSet;
}

bool OAIGeoRegionAssignedTargetingOptionDetails::is_geo_region_type_Valid() const{
    return m_geo_region_type_isValid;
}

bool OAIGeoRegionAssignedTargetingOptionDetails::isNegative() const {
    return m_negative;
}
void OAIGeoRegionAssignedTargetingOptionDetails::setNegative(const bool &negative) {
    m_negative = negative;
    m_negative_isSet = true;
}

bool OAIGeoRegionAssignedTargetingOptionDetails::is_negative_Set() const{
    return m_negative_isSet;
}

bool OAIGeoRegionAssignedTargetingOptionDetails::is_negative_Valid() const{
    return m_negative_isValid;
}

QString OAIGeoRegionAssignedTargetingOptionDetails::getTargetingOptionId() const {
    return m_targeting_option_id;
}
void OAIGeoRegionAssignedTargetingOptionDetails::setTargetingOptionId(const QString &targeting_option_id) {
    m_targeting_option_id = targeting_option_id;
    m_targeting_option_id_isSet = true;
}

bool OAIGeoRegionAssignedTargetingOptionDetails::is_targeting_option_id_Set() const{
    return m_targeting_option_id_isSet;
}

bool OAIGeoRegionAssignedTargetingOptionDetails::is_targeting_option_id_Valid() const{
    return m_targeting_option_id_isValid;
}

bool OAIGeoRegionAssignedTargetingOptionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_region_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting_option_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoRegionAssignedTargetingOptionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
