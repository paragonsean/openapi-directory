/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditInventorySourceReadWriteAccessorsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditInventorySourceReadWriteAccessorsRequest::OAIEditInventorySourceReadWriteAccessorsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditInventorySourceReadWriteAccessorsRequest::OAIEditInventorySourceReadWriteAccessorsRequest() {
    this->initializeModel();
}

OAIEditInventorySourceReadWriteAccessorsRequest::~OAIEditInventorySourceReadWriteAccessorsRequest() {}

void OAIEditInventorySourceReadWriteAccessorsRequest::initializeModel() {

    m_advertisers_update_isSet = false;
    m_advertisers_update_isValid = false;

    m_assign_partner_isSet = false;
    m_assign_partner_isValid = false;

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;
}

void OAIEditInventorySourceReadWriteAccessorsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEditInventorySourceReadWriteAccessorsRequest::fromJsonObject(QJsonObject json) {

    m_advertisers_update_isValid = ::OpenAPI::fromJsonValue(m_advertisers_update, json[QString("advertisersUpdate")]);
    m_advertisers_update_isSet = !json[QString("advertisersUpdate")].isNull() && m_advertisers_update_isValid;

    m_assign_partner_isValid = ::OpenAPI::fromJsonValue(m_assign_partner, json[QString("assignPartner")]);
    m_assign_partner_isSet = !json[QString("assignPartner")].isNull() && m_assign_partner_isValid;

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partnerId")]);
    m_partner_id_isSet = !json[QString("partnerId")].isNull() && m_partner_id_isValid;
}

QString OAIEditInventorySourceReadWriteAccessorsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEditInventorySourceReadWriteAccessorsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_advertisers_update.isSet()) {
        obj.insert(QString("advertisersUpdate"), ::OpenAPI::toJsonValue(m_advertisers_update));
    }
    if (m_assign_partner_isSet) {
        obj.insert(QString("assignPartner"), ::OpenAPI::toJsonValue(m_assign_partner));
    }
    if (m_partner_id_isSet) {
        obj.insert(QString("partnerId"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    return obj;
}

OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate OAIEditInventorySourceReadWriteAccessorsRequest::getAdvertisersUpdate() const {
    return m_advertisers_update;
}
void OAIEditInventorySourceReadWriteAccessorsRequest::setAdvertisersUpdate(const OAIEditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate &advertisers_update) {
    m_advertisers_update = advertisers_update;
    m_advertisers_update_isSet = true;
}

bool OAIEditInventorySourceReadWriteAccessorsRequest::is_advertisers_update_Set() const{
    return m_advertisers_update_isSet;
}

bool OAIEditInventorySourceReadWriteAccessorsRequest::is_advertisers_update_Valid() const{
    return m_advertisers_update_isValid;
}

bool OAIEditInventorySourceReadWriteAccessorsRequest::isAssignPartner() const {
    return m_assign_partner;
}
void OAIEditInventorySourceReadWriteAccessorsRequest::setAssignPartner(const bool &assign_partner) {
    m_assign_partner = assign_partner;
    m_assign_partner_isSet = true;
}

bool OAIEditInventorySourceReadWriteAccessorsRequest::is_assign_partner_Set() const{
    return m_assign_partner_isSet;
}

bool OAIEditInventorySourceReadWriteAccessorsRequest::is_assign_partner_Valid() const{
    return m_assign_partner_isValid;
}

QString OAIEditInventorySourceReadWriteAccessorsRequest::getPartnerId() const {
    return m_partner_id;
}
void OAIEditInventorySourceReadWriteAccessorsRequest::setPartnerId(const QString &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAIEditInventorySourceReadWriteAccessorsRequest::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAIEditInventorySourceReadWriteAccessorsRequest::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

bool OAIEditInventorySourceReadWriteAccessorsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertisers_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assign_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEditInventorySourceReadWriteAccessorsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
