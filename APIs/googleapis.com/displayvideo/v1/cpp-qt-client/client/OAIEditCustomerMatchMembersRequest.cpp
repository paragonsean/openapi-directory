/**
 * Display & Video 360 API
 * Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditCustomerMatchMembersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditCustomerMatchMembersRequest::OAIEditCustomerMatchMembersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditCustomerMatchMembersRequest::OAIEditCustomerMatchMembersRequest() {
    this->initializeModel();
}

OAIEditCustomerMatchMembersRequest::~OAIEditCustomerMatchMembersRequest() {}

void OAIEditCustomerMatchMembersRequest::initializeModel() {

    m_added_contact_info_list_isSet = false;
    m_added_contact_info_list_isValid = false;

    m_added_mobile_device_id_list_isSet = false;
    m_added_mobile_device_id_list_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_removed_contact_info_list_isSet = false;
    m_removed_contact_info_list_isValid = false;

    m_removed_mobile_device_id_list_isSet = false;
    m_removed_mobile_device_id_list_isValid = false;
}

void OAIEditCustomerMatchMembersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEditCustomerMatchMembersRequest::fromJsonObject(QJsonObject json) {

    m_added_contact_info_list_isValid = ::OpenAPI::fromJsonValue(m_added_contact_info_list, json[QString("addedContactInfoList")]);
    m_added_contact_info_list_isSet = !json[QString("addedContactInfoList")].isNull() && m_added_contact_info_list_isValid;

    m_added_mobile_device_id_list_isValid = ::OpenAPI::fromJsonValue(m_added_mobile_device_id_list, json[QString("addedMobileDeviceIdList")]);
    m_added_mobile_device_id_list_isSet = !json[QString("addedMobileDeviceIdList")].isNull() && m_added_mobile_device_id_list_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_removed_contact_info_list_isValid = ::OpenAPI::fromJsonValue(m_removed_contact_info_list, json[QString("removedContactInfoList")]);
    m_removed_contact_info_list_isSet = !json[QString("removedContactInfoList")].isNull() && m_removed_contact_info_list_isValid;

    m_removed_mobile_device_id_list_isValid = ::OpenAPI::fromJsonValue(m_removed_mobile_device_id_list, json[QString("removedMobileDeviceIdList")]);
    m_removed_mobile_device_id_list_isSet = !json[QString("removedMobileDeviceIdList")].isNull() && m_removed_mobile_device_id_list_isValid;
}

QString OAIEditCustomerMatchMembersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEditCustomerMatchMembersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_added_contact_info_list.isSet()) {
        obj.insert(QString("addedContactInfoList"), ::OpenAPI::toJsonValue(m_added_contact_info_list));
    }
    if (m_added_mobile_device_id_list.isSet()) {
        obj.insert(QString("addedMobileDeviceIdList"), ::OpenAPI::toJsonValue(m_added_mobile_device_id_list));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_removed_contact_info_list.isSet()) {
        obj.insert(QString("removedContactInfoList"), ::OpenAPI::toJsonValue(m_removed_contact_info_list));
    }
    if (m_removed_mobile_device_id_list.isSet()) {
        obj.insert(QString("removedMobileDeviceIdList"), ::OpenAPI::toJsonValue(m_removed_mobile_device_id_list));
    }
    return obj;
}

OAIContactInfoList OAIEditCustomerMatchMembersRequest::getAddedContactInfoList() const {
    return m_added_contact_info_list;
}
void OAIEditCustomerMatchMembersRequest::setAddedContactInfoList(const OAIContactInfoList &added_contact_info_list) {
    m_added_contact_info_list = added_contact_info_list;
    m_added_contact_info_list_isSet = true;
}

bool OAIEditCustomerMatchMembersRequest::is_added_contact_info_list_Set() const{
    return m_added_contact_info_list_isSet;
}

bool OAIEditCustomerMatchMembersRequest::is_added_contact_info_list_Valid() const{
    return m_added_contact_info_list_isValid;
}

OAIMobileDeviceIdList OAIEditCustomerMatchMembersRequest::getAddedMobileDeviceIdList() const {
    return m_added_mobile_device_id_list;
}
void OAIEditCustomerMatchMembersRequest::setAddedMobileDeviceIdList(const OAIMobileDeviceIdList &added_mobile_device_id_list) {
    m_added_mobile_device_id_list = added_mobile_device_id_list;
    m_added_mobile_device_id_list_isSet = true;
}

bool OAIEditCustomerMatchMembersRequest::is_added_mobile_device_id_list_Set() const{
    return m_added_mobile_device_id_list_isSet;
}

bool OAIEditCustomerMatchMembersRequest::is_added_mobile_device_id_list_Valid() const{
    return m_added_mobile_device_id_list_isValid;
}

QString OAIEditCustomerMatchMembersRequest::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIEditCustomerMatchMembersRequest::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIEditCustomerMatchMembersRequest::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIEditCustomerMatchMembersRequest::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

OAIContactInfoList OAIEditCustomerMatchMembersRequest::getRemovedContactInfoList() const {
    return m_removed_contact_info_list;
}
void OAIEditCustomerMatchMembersRequest::setRemovedContactInfoList(const OAIContactInfoList &removed_contact_info_list) {
    m_removed_contact_info_list = removed_contact_info_list;
    m_removed_contact_info_list_isSet = true;
}

bool OAIEditCustomerMatchMembersRequest::is_removed_contact_info_list_Set() const{
    return m_removed_contact_info_list_isSet;
}

bool OAIEditCustomerMatchMembersRequest::is_removed_contact_info_list_Valid() const{
    return m_removed_contact_info_list_isValid;
}

OAIMobileDeviceIdList OAIEditCustomerMatchMembersRequest::getRemovedMobileDeviceIdList() const {
    return m_removed_mobile_device_id_list;
}
void OAIEditCustomerMatchMembersRequest::setRemovedMobileDeviceIdList(const OAIMobileDeviceIdList &removed_mobile_device_id_list) {
    m_removed_mobile_device_id_list = removed_mobile_device_id_list;
    m_removed_mobile_device_id_list_isSet = true;
}

bool OAIEditCustomerMatchMembersRequest::is_removed_mobile_device_id_list_Set() const{
    return m_removed_mobile_device_id_list_isSet;
}

bool OAIEditCustomerMatchMembersRequest::is_removed_mobile_device_id_list_Valid() const{
    return m_removed_mobile_device_id_list_isValid;
}

bool OAIEditCustomerMatchMembersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_contact_info_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_mobile_device_id_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_removed_contact_info_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_removed_mobile_device_id_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEditCustomerMatchMembersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
