/**
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReauthSettings model module.
 * @module model/ReauthSettings
 * @version v1
 */
class ReauthSettings {
    /**
     * Constructs a new <code>ReauthSettings</code>.
     * Configuration for IAP reauthentication policies.
     * @alias module:model/ReauthSettings
     */
    constructor() { 
        
        ReauthSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReauthSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReauthSettings} obj Optional instance to populate.
     * @return {module:model/ReauthSettings} The populated <code>ReauthSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReauthSettings();

            if (data.hasOwnProperty('maxAge')) {
                obj['maxAge'] = ApiClient.convertToType(data['maxAge'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('policyType')) {
                obj['policyType'] = ApiClient.convertToType(data['policyType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReauthSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReauthSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['maxAge'] && !(typeof data['maxAge'] === 'string' || data['maxAge'] instanceof String)) {
            throw new Error("Expected the field `maxAge` to be a primitive type in the JSON string but got " + data['maxAge']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['policyType'] && !(typeof data['policyType'] === 'string' || data['policyType'] instanceof String)) {
            throw new Error("Expected the field `policyType` to be a primitive type in the JSON string but got " + data['policyType']);
        }

        return true;
    }


}



/**
 * Reauth session lifetime, how long before a user has to reauthenticate again.
 * @member {String} maxAge
 */
ReauthSettings.prototype['maxAge'] = undefined;

/**
 * Reauth method requested.
 * @member {module:model/ReauthSettings.MethodEnum} method
 */
ReauthSettings.prototype['method'] = undefined;

/**
 * How IAP determines the effective policy in cases of hierarchical policies. Policies are merged from higher in the hierarchy to lower in the hierarchy.
 * @member {module:model/ReauthSettings.PolicyTypeEnum} policyType
 */
ReauthSettings.prototype['policyType'] = undefined;





/**
 * Allowed values for the <code>method</code> property.
 * @enum {String}
 * @readonly
 */
ReauthSettings['MethodEnum'] = {

    /**
     * value: "METHOD_UNSPECIFIED"
     * @const
     */
    "METHOD_UNSPECIFIED": "METHOD_UNSPECIFIED",

    /**
     * value: "LOGIN"
     * @const
     */
    "LOGIN": "LOGIN",

    /**
     * value: "PASSWORD"
     * @const
     */
    "PASSWORD": "PASSWORD",

    /**
     * value: "SECURE_KEY"
     * @const
     */
    "SECURE_KEY": "SECURE_KEY",

    /**
     * value: "ENROLLED_SECOND_FACTORS"
     * @const
     */
    "ENROLLED_SECOND_FACTORS": "ENROLLED_SECOND_FACTORS"
};


/**
 * Allowed values for the <code>policyType</code> property.
 * @enum {String}
 * @readonly
 */
ReauthSettings['PolicyTypeEnum'] = {

    /**
     * value: "POLICY_TYPE_UNSPECIFIED"
     * @const
     */
    "POLICY_TYPE_UNSPECIFIED": "POLICY_TYPE_UNSPECIFIED",

    /**
     * value: "MINIMUM"
     * @const
     */
    "MINIMUM": "MINIMUM",

    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT"
};



export default ReauthSettings;

