/**
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Brand model module.
 * @module model/Brand
 * @version v1
 */
class Brand {
    /**
     * Constructs a new <code>Brand</code>.
     * OAuth brand data. NOTE: Only contains a portion of the data that describes a brand.
     * @alias module:model/Brand
     */
    constructor() { 
        
        Brand.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Brand</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Brand} obj Optional instance to populate.
     * @return {module:model/Brand} The populated <code>Brand</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Brand();

            if (data.hasOwnProperty('applicationTitle')) {
                obj['applicationTitle'] = ApiClient.convertToType(data['applicationTitle'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orgInternalOnly')) {
                obj['orgInternalOnly'] = ApiClient.convertToType(data['orgInternalOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('supportEmail')) {
                obj['supportEmail'] = ApiClient.convertToType(data['supportEmail'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Brand</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Brand</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['applicationTitle'] && !(typeof data['applicationTitle'] === 'string' || data['applicationTitle'] instanceof String)) {
            throw new Error("Expected the field `applicationTitle` to be a primitive type in the JSON string but got " + data['applicationTitle']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['supportEmail'] && !(typeof data['supportEmail'] === 'string' || data['supportEmail'] instanceof String)) {
            throw new Error("Expected the field `supportEmail` to be a primitive type in the JSON string but got " + data['supportEmail']);
        }

        return true;
    }


}



/**
 * Application name displayed on OAuth consent screen.
 * @member {String} applicationTitle
 */
Brand.prototype['applicationTitle'] = undefined;

/**
 * Output only. Identifier of the brand. NOTE: GCP project number achieves the same brand identification purpose as only one brand per project can be created.
 * @member {String} name
 */
Brand.prototype['name'] = undefined;

/**
 * Output only. Whether the brand is only intended for usage inside the G Suite organization only.
 * @member {Boolean} orgInternalOnly
 */
Brand.prototype['orgInternalOnly'] = undefined;

/**
 * Support email displayed on the OAuth consent screen.
 * @member {String} supportEmail
 */
Brand.prototype['supportEmail'] = undefined;






export default Brand;

