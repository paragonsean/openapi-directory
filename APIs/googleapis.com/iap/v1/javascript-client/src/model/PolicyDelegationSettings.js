/**
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PolicyName from './PolicyName';
import Resource from './Resource';

/**
 * The PolicyDelegationSettings model module.
 * @module model/PolicyDelegationSettings
 * @version v1
 */
class PolicyDelegationSettings {
    /**
     * Constructs a new <code>PolicyDelegationSettings</code>.
     * PolicyDelegationConfig allows google-internal teams to use IAP for apps hosted in a tenant project. Using these settings, the app can delegate permission check to happen against the linked customer project. This is only ever supposed to be used by google internal teams, hence the restriction on the proto.
     * @alias module:model/PolicyDelegationSettings
     */
    constructor() { 
        
        PolicyDelegationSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicyDelegationSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyDelegationSettings} obj Optional instance to populate.
     * @return {module:model/PolicyDelegationSettings} The populated <code>PolicyDelegationSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyDelegationSettings();

            if (data.hasOwnProperty('iamPermission')) {
                obj['iamPermission'] = ApiClient.convertToType(data['iamPermission'], 'String');
            }
            if (data.hasOwnProperty('iamServiceName')) {
                obj['iamServiceName'] = ApiClient.convertToType(data['iamServiceName'], 'String');
            }
            if (data.hasOwnProperty('policyName')) {
                obj['policyName'] = PolicyName.constructFromObject(data['policyName']);
            }
            if (data.hasOwnProperty('resource')) {
                obj['resource'] = Resource.constructFromObject(data['resource']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyDelegationSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyDelegationSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['iamPermission'] && !(typeof data['iamPermission'] === 'string' || data['iamPermission'] instanceof String)) {
            throw new Error("Expected the field `iamPermission` to be a primitive type in the JSON string but got " + data['iamPermission']);
        }
        // ensure the json data is a string
        if (data['iamServiceName'] && !(typeof data['iamServiceName'] === 'string' || data['iamServiceName'] instanceof String)) {
            throw new Error("Expected the field `iamServiceName` to be a primitive type in the JSON string but got " + data['iamServiceName']);
        }
        // validate the optional field `policyName`
        if (data['policyName']) { // data not null
          PolicyName.validateJSON(data['policyName']);
        }
        // validate the optional field `resource`
        if (data['resource']) { // data not null
          Resource.validateJSON(data['resource']);
        }

        return true;
    }


}



/**
 * Permission to check in IAM.
 * @member {String} iamPermission
 */
PolicyDelegationSettings.prototype['iamPermission'] = undefined;

/**
 * The DNS name of the service (e.g. \"resourcemanager.googleapis.com\"). This should be the domain name part of the full resource names (see https://aip.dev/122#full-resource-names), which is usually the same as IamServiceSpec.service of the service where the resource type is defined.
 * @member {String} iamServiceName
 */
PolicyDelegationSettings.prototype['iamServiceName'] = undefined;

/**
 * @member {module:model/PolicyName} policyName
 */
PolicyDelegationSettings.prototype['policyName'] = undefined;

/**
 * @member {module:model/Resource} resource
 */
PolicyDelegationSettings.prototype['resource'] = undefined;






export default PolicyDelegationSettings;

