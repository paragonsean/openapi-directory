# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessDeniedPageSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_denied_page_uri: str=None, generate_troubleshooting_uri: bool=None, remediation_token_generation_enabled: bool=None):
        """AccessDeniedPageSettings - a model defined in OpenAPI

        :param access_denied_page_uri: The access_denied_page_uri of this AccessDeniedPageSettings.
        :param generate_troubleshooting_uri: The generate_troubleshooting_uri of this AccessDeniedPageSettings.
        :param remediation_token_generation_enabled: The remediation_token_generation_enabled of this AccessDeniedPageSettings.
        """
        self.openapi_types = {
            'access_denied_page_uri': str,
            'generate_troubleshooting_uri': bool,
            'remediation_token_generation_enabled': bool
        }

        self.attribute_map = {
            'access_denied_page_uri': 'accessDeniedPageUri',
            'generate_troubleshooting_uri': 'generateTroubleshootingUri',
            'remediation_token_generation_enabled': 'remediationTokenGenerationEnabled'
        }

        self._access_denied_page_uri = access_denied_page_uri
        self._generate_troubleshooting_uri = generate_troubleshooting_uri
        self._remediation_token_generation_enabled = remediation_token_generation_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessDeniedPageSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessDeniedPageSettings of this AccessDeniedPageSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_denied_page_uri(self):
        """Gets the access_denied_page_uri of this AccessDeniedPageSettings.

        The URI to be redirected to when access is denied.

        :return: The access_denied_page_uri of this AccessDeniedPageSettings.
        :rtype: str
        """
        return self._access_denied_page_uri

    @access_denied_page_uri.setter
    def access_denied_page_uri(self, access_denied_page_uri):
        """Sets the access_denied_page_uri of this AccessDeniedPageSettings.

        The URI to be redirected to when access is denied.

        :param access_denied_page_uri: The access_denied_page_uri of this AccessDeniedPageSettings.
        :type access_denied_page_uri: str
        """

        self._access_denied_page_uri = access_denied_page_uri

    @property
    def generate_troubleshooting_uri(self):
        """Gets the generate_troubleshooting_uri of this AccessDeniedPageSettings.

        Whether to generate a troubleshooting URL on access denied events to this application.

        :return: The generate_troubleshooting_uri of this AccessDeniedPageSettings.
        :rtype: bool
        """
        return self._generate_troubleshooting_uri

    @generate_troubleshooting_uri.setter
    def generate_troubleshooting_uri(self, generate_troubleshooting_uri):
        """Sets the generate_troubleshooting_uri of this AccessDeniedPageSettings.

        Whether to generate a troubleshooting URL on access denied events to this application.

        :param generate_troubleshooting_uri: The generate_troubleshooting_uri of this AccessDeniedPageSettings.
        :type generate_troubleshooting_uri: bool
        """

        self._generate_troubleshooting_uri = generate_troubleshooting_uri

    @property
    def remediation_token_generation_enabled(self):
        """Gets the remediation_token_generation_enabled of this AccessDeniedPageSettings.

        Whether to generate remediation token on access denied events to this application.

        :return: The remediation_token_generation_enabled of this AccessDeniedPageSettings.
        :rtype: bool
        """
        return self._remediation_token_generation_enabled

    @remediation_token_generation_enabled.setter
    def remediation_token_generation_enabled(self, remediation_token_generation_enabled):
        """Sets the remediation_token_generation_enabled of this AccessDeniedPageSettings.

        Whether to generate remediation token on access denied events to this application.

        :param remediation_token_generation_enabled: The remediation_token_generation_enabled of this AccessDeniedPageSettings.
        :type remediation_token_generation_enabled: bool
        """

        self._remediation_token_generation_enabled = remediation_token_generation_enabled
