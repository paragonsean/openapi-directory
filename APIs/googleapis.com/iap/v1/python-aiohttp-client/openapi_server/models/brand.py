# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Brand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_title: str=None, name: str=None, org_internal_only: bool=None, support_email: str=None):
        """Brand - a model defined in OpenAPI

        :param application_title: The application_title of this Brand.
        :param name: The name of this Brand.
        :param org_internal_only: The org_internal_only of this Brand.
        :param support_email: The support_email of this Brand.
        """
        self.openapi_types = {
            'application_title': str,
            'name': str,
            'org_internal_only': bool,
            'support_email': str
        }

        self.attribute_map = {
            'application_title': 'applicationTitle',
            'name': 'name',
            'org_internal_only': 'orgInternalOnly',
            'support_email': 'supportEmail'
        }

        self._application_title = application_title
        self._name = name
        self._org_internal_only = org_internal_only
        self._support_email = support_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Brand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Brand of this Brand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_title(self):
        """Gets the application_title of this Brand.

        Application name displayed on OAuth consent screen.

        :return: The application_title of this Brand.
        :rtype: str
        """
        return self._application_title

    @application_title.setter
    def application_title(self, application_title):
        """Sets the application_title of this Brand.

        Application name displayed on OAuth consent screen.

        :param application_title: The application_title of this Brand.
        :type application_title: str
        """

        self._application_title = application_title

    @property
    def name(self):
        """Gets the name of this Brand.

        Output only. Identifier of the brand. NOTE: GCP project number achieves the same brand identification purpose as only one brand per project can be created.

        :return: The name of this Brand.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Brand.

        Output only. Identifier of the brand. NOTE: GCP project number achieves the same brand identification purpose as only one brand per project can be created.

        :param name: The name of this Brand.
        :type name: str
        """

        self._name = name

    @property
    def org_internal_only(self):
        """Gets the org_internal_only of this Brand.

        Output only. Whether the brand is only intended for usage inside the G Suite organization only.

        :return: The org_internal_only of this Brand.
        :rtype: bool
        """
        return self._org_internal_only

    @org_internal_only.setter
    def org_internal_only(self, org_internal_only):
        """Sets the org_internal_only of this Brand.

        Output only. Whether the brand is only intended for usage inside the G Suite organization only.

        :param org_internal_only: The org_internal_only of this Brand.
        :type org_internal_only: bool
        """

        self._org_internal_only = org_internal_only

    @property
    def support_email(self):
        """Gets the support_email of this Brand.

        Support email displayed on the OAuth consent screen.

        :return: The support_email of this Brand.
        :rtype: str
        """
        return self._support_email

    @support_email.setter
    def support_email(self, support_email):
        """Sets the support_email of this Brand.

        Support email displayed on the OAuth consent screen.

        :param support_email: The support_email of this Brand.
        :type support_email: str
        """

        self._support_email = support_email
