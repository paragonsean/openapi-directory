# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReauthSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_age: str=None, method: str=None, policy_type: str=None):
        """ReauthSettings - a model defined in OpenAPI

        :param max_age: The max_age of this ReauthSettings.
        :param method: The method of this ReauthSettings.
        :param policy_type: The policy_type of this ReauthSettings.
        """
        self.openapi_types = {
            'max_age': str,
            'method': str,
            'policy_type': str
        }

        self.attribute_map = {
            'max_age': 'maxAge',
            'method': 'method',
            'policy_type': 'policyType'
        }

        self._max_age = max_age
        self._method = method
        self._policy_type = policy_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReauthSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReauthSettings of this ReauthSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_age(self):
        """Gets the max_age of this ReauthSettings.

        Reauth session lifetime, how long before a user has to reauthenticate again.

        :return: The max_age of this ReauthSettings.
        :rtype: str
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this ReauthSettings.

        Reauth session lifetime, how long before a user has to reauthenticate again.

        :param max_age: The max_age of this ReauthSettings.
        :type max_age: str
        """

        self._max_age = max_age

    @property
    def method(self):
        """Gets the method of this ReauthSettings.

        Reauth method requested.

        :return: The method of this ReauthSettings.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ReauthSettings.

        Reauth method requested.

        :param method: The method of this ReauthSettings.
        :type method: str
        """
        allowed_values = ["METHOD_UNSPECIFIED", "LOGIN", "PASSWORD", "SECURE_KEY", "ENROLLED_SECOND_FACTORS"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def policy_type(self):
        """Gets the policy_type of this ReauthSettings.

        How IAP determines the effective policy in cases of hierarchical policies. Policies are merged from higher in the hierarchy to lower in the hierarchy.

        :return: The policy_type of this ReauthSettings.
        :rtype: str
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this ReauthSettings.

        How IAP determines the effective policy in cases of hierarchical policies. Policies are merged from higher in the hierarchy to lower in the hierarchy.

        :param policy_type: The policy_type of this ReauthSettings.
        :type policy_type: str
        """
        allowed_values = ["POLICY_TYPE_UNSPECIFIED", "MINIMUM", "DEFAULT"]  # noqa: E501
        if policy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_type` ({0}), must be one of {1}"
                .format(policy_type, allowed_values)
            )

        self._policy_type = policy_type
