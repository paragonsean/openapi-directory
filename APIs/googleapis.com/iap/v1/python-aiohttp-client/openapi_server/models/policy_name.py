# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicyName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, region: str=None, type: str=None):
        """PolicyName - a model defined in OpenAPI

        :param id: The id of this PolicyName.
        :param region: The region of this PolicyName.
        :param type: The type of this PolicyName.
        """
        self.openapi_types = {
            'id': str,
            'region': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'region': 'region',
            'type': 'type'
        }

        self._id = id
        self._region = region
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyName of this PolicyName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PolicyName.

        Identifies an instance of the type. ID format varies by type. The ID format is defined in the IAM .service file that defines the type, either in path_mapping or in a comment.

        :return: The id of this PolicyName.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PolicyName.

        Identifies an instance of the type. ID format varies by type. The ID format is defined in the IAM .service file that defines the type, either in path_mapping or in a comment.

        :param id: The id of this PolicyName.
        :type id: str
        """

        self._id = id

    @property
    def region(self):
        """Gets the region of this PolicyName.

        For Cloud IAM: The location of the Policy. Must be empty or \"global\" for Policies owned by global IAM. Must name a region from prodspec/cloud-iam-cloudspec for Regional IAM Policies, see go/iam-faq#where-is-iam-currently-deployed. For Local IAM: This field should be set to \"local\".

        :return: The region of this PolicyName.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this PolicyName.

        For Cloud IAM: The location of the Policy. Must be empty or \"global\" for Policies owned by global IAM. Must name a region from prodspec/cloud-iam-cloudspec for Regional IAM Policies, see go/iam-faq#where-is-iam-currently-deployed. For Local IAM: This field should be set to \"local\".

        :param region: The region of this PolicyName.
        :type region: str
        """

        self._region = region

    @property
    def type(self):
        """Gets the type of this PolicyName.

        Resource type. Types are defined in IAM's .service files. Valid values for type might be 'gce', 'gcs', 'project', 'account' etc.

        :return: The type of this PolicyName.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PolicyName.

        Resource type. Types are defined in IAM's .service files. Valid values for type might be 'gce', 'gcs', 'project', 'account' etc.

        :param type: The type of this PolicyName.
        :type type: str
        """

        self._type = type
