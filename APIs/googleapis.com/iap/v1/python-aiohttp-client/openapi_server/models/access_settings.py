# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allowed_domains_settings import AllowedDomainsSettings
from openapi_server.models.cors_settings import CorsSettings
from openapi_server.models.gcip_settings import GcipSettings
from openapi_server.models.o_auth_settings import OAuthSettings
from openapi_server.models.policy_delegation_settings import PolicyDelegationSettings
from openapi_server.models.reauth_settings import ReauthSettings
from openapi_server import util


class AccessSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_domains_settings: AllowedDomainsSettings=None, cors_settings: CorsSettings=None, gcip_settings: GcipSettings=None, oauth_settings: OAuthSettings=None, policy_delegation_settings: PolicyDelegationSettings=None, reauth_settings: ReauthSettings=None):
        """AccessSettings - a model defined in OpenAPI

        :param allowed_domains_settings: The allowed_domains_settings of this AccessSettings.
        :param cors_settings: The cors_settings of this AccessSettings.
        :param gcip_settings: The gcip_settings of this AccessSettings.
        :param oauth_settings: The oauth_settings of this AccessSettings.
        :param policy_delegation_settings: The policy_delegation_settings of this AccessSettings.
        :param reauth_settings: The reauth_settings of this AccessSettings.
        """
        self.openapi_types = {
            'allowed_domains_settings': AllowedDomainsSettings,
            'cors_settings': CorsSettings,
            'gcip_settings': GcipSettings,
            'oauth_settings': OAuthSettings,
            'policy_delegation_settings': PolicyDelegationSettings,
            'reauth_settings': ReauthSettings
        }

        self.attribute_map = {
            'allowed_domains_settings': 'allowedDomainsSettings',
            'cors_settings': 'corsSettings',
            'gcip_settings': 'gcipSettings',
            'oauth_settings': 'oauthSettings',
            'policy_delegation_settings': 'policyDelegationSettings',
            'reauth_settings': 'reauthSettings'
        }

        self._allowed_domains_settings = allowed_domains_settings
        self._cors_settings = cors_settings
        self._gcip_settings = gcip_settings
        self._oauth_settings = oauth_settings
        self._policy_delegation_settings = policy_delegation_settings
        self._reauth_settings = reauth_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessSettings of this AccessSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_domains_settings(self):
        """Gets the allowed_domains_settings of this AccessSettings.


        :return: The allowed_domains_settings of this AccessSettings.
        :rtype: AllowedDomainsSettings
        """
        return self._allowed_domains_settings

    @allowed_domains_settings.setter
    def allowed_domains_settings(self, allowed_domains_settings):
        """Sets the allowed_domains_settings of this AccessSettings.


        :param allowed_domains_settings: The allowed_domains_settings of this AccessSettings.
        :type allowed_domains_settings: AllowedDomainsSettings
        """

        self._allowed_domains_settings = allowed_domains_settings

    @property
    def cors_settings(self):
        """Gets the cors_settings of this AccessSettings.


        :return: The cors_settings of this AccessSettings.
        :rtype: CorsSettings
        """
        return self._cors_settings

    @cors_settings.setter
    def cors_settings(self, cors_settings):
        """Sets the cors_settings of this AccessSettings.


        :param cors_settings: The cors_settings of this AccessSettings.
        :type cors_settings: CorsSettings
        """

        self._cors_settings = cors_settings

    @property
    def gcip_settings(self):
        """Gets the gcip_settings of this AccessSettings.


        :return: The gcip_settings of this AccessSettings.
        :rtype: GcipSettings
        """
        return self._gcip_settings

    @gcip_settings.setter
    def gcip_settings(self, gcip_settings):
        """Sets the gcip_settings of this AccessSettings.


        :param gcip_settings: The gcip_settings of this AccessSettings.
        :type gcip_settings: GcipSettings
        """

        self._gcip_settings = gcip_settings

    @property
    def oauth_settings(self):
        """Gets the oauth_settings of this AccessSettings.


        :return: The oauth_settings of this AccessSettings.
        :rtype: OAuthSettings
        """
        return self._oauth_settings

    @oauth_settings.setter
    def oauth_settings(self, oauth_settings):
        """Sets the oauth_settings of this AccessSettings.


        :param oauth_settings: The oauth_settings of this AccessSettings.
        :type oauth_settings: OAuthSettings
        """

        self._oauth_settings = oauth_settings

    @property
    def policy_delegation_settings(self):
        """Gets the policy_delegation_settings of this AccessSettings.


        :return: The policy_delegation_settings of this AccessSettings.
        :rtype: PolicyDelegationSettings
        """
        return self._policy_delegation_settings

    @policy_delegation_settings.setter
    def policy_delegation_settings(self, policy_delegation_settings):
        """Sets the policy_delegation_settings of this AccessSettings.


        :param policy_delegation_settings: The policy_delegation_settings of this AccessSettings.
        :type policy_delegation_settings: PolicyDelegationSettings
        """

        self._policy_delegation_settings = policy_delegation_settings

    @property
    def reauth_settings(self):
        """Gets the reauth_settings of this AccessSettings.


        :return: The reauth_settings of this AccessSettings.
        :rtype: ReauthSettings
        """
        return self._reauth_settings

    @reauth_settings.setter
    def reauth_settings(self, reauth_settings):
        """Sets the reauth_settings of this AccessSettings.


        :param reauth_settings: The reauth_settings of this AccessSettings.
        :type reauth_settings: ReauthSettings
        """

        self._reauth_settings = reauth_settings
