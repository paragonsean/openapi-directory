# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CorsSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_http_options: bool=None):
        """CorsSettings - a model defined in OpenAPI

        :param allow_http_options: The allow_http_options of this CorsSettings.
        """
        self.openapi_types = {
            'allow_http_options': bool
        }

        self.attribute_map = {
            'allow_http_options': 'allowHttpOptions'
        }

        self._allow_http_options = allow_http_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CorsSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CorsSettings of this CorsSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_http_options(self):
        """Gets the allow_http_options of this CorsSettings.

        Configuration to allow HTTP OPTIONS calls to skip authorization. If undefined, IAP will not apply any special logic to OPTIONS requests.

        :return: The allow_http_options of this CorsSettings.
        :rtype: bool
        """
        return self._allow_http_options

    @allow_http_options.setter
    def allow_http_options(self, allow_http_options):
        """Sets the allow_http_options of this CorsSettings.

        Configuration to allow HTTP OPTIONS calls to skip authorization. If undefined, IAP will not apply any special logic to OPTIONS requests.

        :param allow_http_options: The allow_http_options of this CorsSettings.
        :type allow_http_options: bool
        """

        self._allow_http_options = allow_http_options
