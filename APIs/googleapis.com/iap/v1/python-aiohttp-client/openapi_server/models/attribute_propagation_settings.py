# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttributePropagationSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable: bool=None, expression: str=None, output_credentials: List[str]=None):
        """AttributePropagationSettings - a model defined in OpenAPI

        :param enable: The enable of this AttributePropagationSettings.
        :param expression: The expression of this AttributePropagationSettings.
        :param output_credentials: The output_credentials of this AttributePropagationSettings.
        """
        self.openapi_types = {
            'enable': bool,
            'expression': str,
            'output_credentials': List[str]
        }

        self.attribute_map = {
            'enable': 'enable',
            'expression': 'expression',
            'output_credentials': 'outputCredentials'
        }

        self._enable = enable
        self._expression = expression
        self._output_credentials = output_credentials

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributePropagationSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributePropagationSettings of this AttributePropagationSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable(self):
        """Gets the enable of this AttributePropagationSettings.

        Whether the provided attribute propagation settings should be evaluated on user requests. If set to true, attributes returned from the expression will be propagated in the set output credentials.

        :return: The enable of this AttributePropagationSettings.
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this AttributePropagationSettings.

        Whether the provided attribute propagation settings should be evaluated on user requests. If set to true, attributes returned from the expression will be propagated in the set output credentials.

        :param enable: The enable of this AttributePropagationSettings.
        :type enable: bool
        """

        self._enable = enable

    @property
    def expression(self):
        """Gets the expression of this AttributePropagationSettings.

        Raw string CEL expression. Must return a list of attributes. A maximum of 45 attributes can be selected. Expressions can select different attribute types from `attributes`: `attributes.saml_attributes`, `attributes.iap_attributes`. The following functions are supported: - filter `.filter(, )`: Returns a subset of `` where `` is true for every item. - in ` in `: Returns true if `` contains ``. - selectByName `.selectByName()`: Returns the attribute in `` with the given `` name, otherwise returns empty. - emitAs `.emitAs()`: Sets the `` name field to the given `` for propagation in selected output credentials. - strict `.strict()`: Ignores the `x-goog-iap-attr-` prefix for the provided `` when propagating with the `HEADER` output credential, such as request headers. - append `.append()` OR `.append()`: Appends the provided `` or `` to the end of ``. Example expression: `attributes.saml_attributes.filter(x, x.name in ['test']).append(attributes.iap_attributes.selectByName('exact').emitAs('custom').strict())`

        :return: The expression of this AttributePropagationSettings.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this AttributePropagationSettings.

        Raw string CEL expression. Must return a list of attributes. A maximum of 45 attributes can be selected. Expressions can select different attribute types from `attributes`: `attributes.saml_attributes`, `attributes.iap_attributes`. The following functions are supported: - filter `.filter(, )`: Returns a subset of `` where `` is true for every item. - in ` in `: Returns true if `` contains ``. - selectByName `.selectByName()`: Returns the attribute in `` with the given `` name, otherwise returns empty. - emitAs `.emitAs()`: Sets the `` name field to the given `` for propagation in selected output credentials. - strict `.strict()`: Ignores the `x-goog-iap-attr-` prefix for the provided `` when propagating with the `HEADER` output credential, such as request headers. - append `.append()` OR `.append()`: Appends the provided `` or `` to the end of ``. Example expression: `attributes.saml_attributes.filter(x, x.name in ['test']).append(attributes.iap_attributes.selectByName('exact').emitAs('custom').strict())`

        :param expression: The expression of this AttributePropagationSettings.
        :type expression: str
        """

        self._expression = expression

    @property
    def output_credentials(self):
        """Gets the output_credentials of this AttributePropagationSettings.

        Which output credentials attributes selected by the CEL expression should be propagated in. All attributes will be fully duplicated in each selected output credential.

        :return: The output_credentials of this AttributePropagationSettings.
        :rtype: List[str]
        """
        return self._output_credentials

    @output_credentials.setter
    def output_credentials(self, output_credentials):
        """Sets the output_credentials of this AttributePropagationSettings.

        Which output credentials attributes selected by the CEL expression should be propagated in. All attributes will be fully duplicated in each selected output credential.

        :param output_credentials: The output_credentials of this AttributePropagationSettings.
        :type output_credentials: List[str]
        """
        allowed_values = ["OUTPUT_CREDENTIALS_UNSPECIFIED", "HEADER", "JWT", "RCTOKEN"]  # noqa: E501
        if not set(output_credentials).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `output_credentials` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(output_credentials) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._output_credentials = output_credentials
