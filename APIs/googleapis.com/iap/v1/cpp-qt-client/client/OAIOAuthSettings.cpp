/**
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOAuthSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOAuthSettings::OAIOAuthSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOAuthSettings::OAIOAuthSettings() {
    this->initializeModel();
}

OAIOAuthSettings::~OAIOAuthSettings() {}

void OAIOAuthSettings::initializeModel() {

    m_login_hint_isSet = false;
    m_login_hint_isValid = false;

    m_programmatic_clients_isSet = false;
    m_programmatic_clients_isValid = false;
}

void OAIOAuthSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOAuthSettings::fromJsonObject(QJsonObject json) {

    m_login_hint_isValid = ::OpenAPI::fromJsonValue(m_login_hint, json[QString("loginHint")]);
    m_login_hint_isSet = !json[QString("loginHint")].isNull() && m_login_hint_isValid;

    m_programmatic_clients_isValid = ::OpenAPI::fromJsonValue(m_programmatic_clients, json[QString("programmaticClients")]);
    m_programmatic_clients_isSet = !json[QString("programmaticClients")].isNull() && m_programmatic_clients_isValid;
}

QString OAIOAuthSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOAuthSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_login_hint_isSet) {
        obj.insert(QString("loginHint"), ::OpenAPI::toJsonValue(m_login_hint));
    }
    if (m_programmatic_clients.size() > 0) {
        obj.insert(QString("programmaticClients"), ::OpenAPI::toJsonValue(m_programmatic_clients));
    }
    return obj;
}

QString OAIOAuthSettings::getLoginHint() const {
    return m_login_hint;
}
void OAIOAuthSettings::setLoginHint(const QString &login_hint) {
    m_login_hint = login_hint;
    m_login_hint_isSet = true;
}

bool OAIOAuthSettings::is_login_hint_Set() const{
    return m_login_hint_isSet;
}

bool OAIOAuthSettings::is_login_hint_Valid() const{
    return m_login_hint_isValid;
}

QList<QString> OAIOAuthSettings::getProgrammaticClients() const {
    return m_programmatic_clients;
}
void OAIOAuthSettings::setProgrammaticClients(const QList<QString> &programmatic_clients) {
    m_programmatic_clients = programmatic_clients;
    m_programmatic_clients_isSet = true;
}

bool OAIOAuthSettings::is_programmatic_clients_Set() const{
    return m_programmatic_clients_isSet;
}

bool OAIOAuthSettings::is_programmatic_clients_Valid() const{
    return m_programmatic_clients_isValid;
}

bool OAIOAuthSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_login_hint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_programmatic_clients.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOAuthSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
