/**
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessSettings::OAIAccessSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessSettings::OAIAccessSettings() {
    this->initializeModel();
}

OAIAccessSettings::~OAIAccessSettings() {}

void OAIAccessSettings::initializeModel() {

    m_allowed_domains_settings_isSet = false;
    m_allowed_domains_settings_isValid = false;

    m_cors_settings_isSet = false;
    m_cors_settings_isValid = false;

    m_gcip_settings_isSet = false;
    m_gcip_settings_isValid = false;

    m_oauth_settings_isSet = false;
    m_oauth_settings_isValid = false;

    m_policy_delegation_settings_isSet = false;
    m_policy_delegation_settings_isValid = false;

    m_reauth_settings_isSet = false;
    m_reauth_settings_isValid = false;
}

void OAIAccessSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessSettings::fromJsonObject(QJsonObject json) {

    m_allowed_domains_settings_isValid = ::OpenAPI::fromJsonValue(m_allowed_domains_settings, json[QString("allowedDomainsSettings")]);
    m_allowed_domains_settings_isSet = !json[QString("allowedDomainsSettings")].isNull() && m_allowed_domains_settings_isValid;

    m_cors_settings_isValid = ::OpenAPI::fromJsonValue(m_cors_settings, json[QString("corsSettings")]);
    m_cors_settings_isSet = !json[QString("corsSettings")].isNull() && m_cors_settings_isValid;

    m_gcip_settings_isValid = ::OpenAPI::fromJsonValue(m_gcip_settings, json[QString("gcipSettings")]);
    m_gcip_settings_isSet = !json[QString("gcipSettings")].isNull() && m_gcip_settings_isValid;

    m_oauth_settings_isValid = ::OpenAPI::fromJsonValue(m_oauth_settings, json[QString("oauthSettings")]);
    m_oauth_settings_isSet = !json[QString("oauthSettings")].isNull() && m_oauth_settings_isValid;

    m_policy_delegation_settings_isValid = ::OpenAPI::fromJsonValue(m_policy_delegation_settings, json[QString("policyDelegationSettings")]);
    m_policy_delegation_settings_isSet = !json[QString("policyDelegationSettings")].isNull() && m_policy_delegation_settings_isValid;

    m_reauth_settings_isValid = ::OpenAPI::fromJsonValue(m_reauth_settings, json[QString("reauthSettings")]);
    m_reauth_settings_isSet = !json[QString("reauthSettings")].isNull() && m_reauth_settings_isValid;
}

QString OAIAccessSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_domains_settings.isSet()) {
        obj.insert(QString("allowedDomainsSettings"), ::OpenAPI::toJsonValue(m_allowed_domains_settings));
    }
    if (m_cors_settings.isSet()) {
        obj.insert(QString("corsSettings"), ::OpenAPI::toJsonValue(m_cors_settings));
    }
    if (m_gcip_settings.isSet()) {
        obj.insert(QString("gcipSettings"), ::OpenAPI::toJsonValue(m_gcip_settings));
    }
    if (m_oauth_settings.isSet()) {
        obj.insert(QString("oauthSettings"), ::OpenAPI::toJsonValue(m_oauth_settings));
    }
    if (m_policy_delegation_settings.isSet()) {
        obj.insert(QString("policyDelegationSettings"), ::OpenAPI::toJsonValue(m_policy_delegation_settings));
    }
    if (m_reauth_settings.isSet()) {
        obj.insert(QString("reauthSettings"), ::OpenAPI::toJsonValue(m_reauth_settings));
    }
    return obj;
}

OAIAllowedDomainsSettings OAIAccessSettings::getAllowedDomainsSettings() const {
    return m_allowed_domains_settings;
}
void OAIAccessSettings::setAllowedDomainsSettings(const OAIAllowedDomainsSettings &allowed_domains_settings) {
    m_allowed_domains_settings = allowed_domains_settings;
    m_allowed_domains_settings_isSet = true;
}

bool OAIAccessSettings::is_allowed_domains_settings_Set() const{
    return m_allowed_domains_settings_isSet;
}

bool OAIAccessSettings::is_allowed_domains_settings_Valid() const{
    return m_allowed_domains_settings_isValid;
}

OAICorsSettings OAIAccessSettings::getCorsSettings() const {
    return m_cors_settings;
}
void OAIAccessSettings::setCorsSettings(const OAICorsSettings &cors_settings) {
    m_cors_settings = cors_settings;
    m_cors_settings_isSet = true;
}

bool OAIAccessSettings::is_cors_settings_Set() const{
    return m_cors_settings_isSet;
}

bool OAIAccessSettings::is_cors_settings_Valid() const{
    return m_cors_settings_isValid;
}

OAIGcipSettings OAIAccessSettings::getGcipSettings() const {
    return m_gcip_settings;
}
void OAIAccessSettings::setGcipSettings(const OAIGcipSettings &gcip_settings) {
    m_gcip_settings = gcip_settings;
    m_gcip_settings_isSet = true;
}

bool OAIAccessSettings::is_gcip_settings_Set() const{
    return m_gcip_settings_isSet;
}

bool OAIAccessSettings::is_gcip_settings_Valid() const{
    return m_gcip_settings_isValid;
}

OAIOAuthSettings OAIAccessSettings::getOauthSettings() const {
    return m_oauth_settings;
}
void OAIAccessSettings::setOauthSettings(const OAIOAuthSettings &oauth_settings) {
    m_oauth_settings = oauth_settings;
    m_oauth_settings_isSet = true;
}

bool OAIAccessSettings::is_oauth_settings_Set() const{
    return m_oauth_settings_isSet;
}

bool OAIAccessSettings::is_oauth_settings_Valid() const{
    return m_oauth_settings_isValid;
}

OAIPolicyDelegationSettings OAIAccessSettings::getPolicyDelegationSettings() const {
    return m_policy_delegation_settings;
}
void OAIAccessSettings::setPolicyDelegationSettings(const OAIPolicyDelegationSettings &policy_delegation_settings) {
    m_policy_delegation_settings = policy_delegation_settings;
    m_policy_delegation_settings_isSet = true;
}

bool OAIAccessSettings::is_policy_delegation_settings_Set() const{
    return m_policy_delegation_settings_isSet;
}

bool OAIAccessSettings::is_policy_delegation_settings_Valid() const{
    return m_policy_delegation_settings_isValid;
}

OAIReauthSettings OAIAccessSettings::getReauthSettings() const {
    return m_reauth_settings;
}
void OAIAccessSettings::setReauthSettings(const OAIReauthSettings &reauth_settings) {
    m_reauth_settings = reauth_settings;
    m_reauth_settings_isSet = true;
}

bool OAIAccessSettings::is_reauth_settings_Set() const{
    return m_reauth_settings_isSet;
}

bool OAIAccessSettings::is_reauth_settings_Valid() const{
    return m_reauth_settings_isValid;
}

bool OAIAccessSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_domains_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cors_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcip_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_delegation_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reauth_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
