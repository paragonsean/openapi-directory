/**
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReauthSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReauthSettings::OAIReauthSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReauthSettings::OAIReauthSettings() {
    this->initializeModel();
}

OAIReauthSettings::~OAIReauthSettings() {}

void OAIReauthSettings::initializeModel() {

    m_max_age_isSet = false;
    m_max_age_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_policy_type_isSet = false;
    m_policy_type_isValid = false;
}

void OAIReauthSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReauthSettings::fromJsonObject(QJsonObject json) {

    m_max_age_isValid = ::OpenAPI::fromJsonValue(m_max_age, json[QString("maxAge")]);
    m_max_age_isSet = !json[QString("maxAge")].isNull() && m_max_age_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_policy_type_isValid = ::OpenAPI::fromJsonValue(m_policy_type, json[QString("policyType")]);
    m_policy_type_isSet = !json[QString("policyType")].isNull() && m_policy_type_isValid;
}

QString OAIReauthSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReauthSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_max_age_isSet) {
        obj.insert(QString("maxAge"), ::OpenAPI::toJsonValue(m_max_age));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_policy_type_isSet) {
        obj.insert(QString("policyType"), ::OpenAPI::toJsonValue(m_policy_type));
    }
    return obj;
}

QString OAIReauthSettings::getMaxAge() const {
    return m_max_age;
}
void OAIReauthSettings::setMaxAge(const QString &max_age) {
    m_max_age = max_age;
    m_max_age_isSet = true;
}

bool OAIReauthSettings::is_max_age_Set() const{
    return m_max_age_isSet;
}

bool OAIReauthSettings::is_max_age_Valid() const{
    return m_max_age_isValid;
}

QString OAIReauthSettings::getMethod() const {
    return m_method;
}
void OAIReauthSettings::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIReauthSettings::is_method_Set() const{
    return m_method_isSet;
}

bool OAIReauthSettings::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIReauthSettings::getPolicyType() const {
    return m_policy_type;
}
void OAIReauthSettings::setPolicyType(const QString &policy_type) {
    m_policy_type = policy_type;
    m_policy_type_isSet = true;
}

bool OAIReauthSettings::is_policy_type_Set() const{
    return m_policy_type_isSet;
}

bool OAIReauthSettings::is_policy_type_Valid() const{
    return m_policy_type_isValid;
}

bool OAIReauthSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReauthSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
