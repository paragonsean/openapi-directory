/**
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyDelegationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyDelegationSettings::OAIPolicyDelegationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyDelegationSettings::OAIPolicyDelegationSettings() {
    this->initializeModel();
}

OAIPolicyDelegationSettings::~OAIPolicyDelegationSettings() {}

void OAIPolicyDelegationSettings::initializeModel() {

    m_iam_permission_isSet = false;
    m_iam_permission_isValid = false;

    m_iam_service_name_isSet = false;
    m_iam_service_name_isValid = false;

    m_policy_name_isSet = false;
    m_policy_name_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;
}

void OAIPolicyDelegationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyDelegationSettings::fromJsonObject(QJsonObject json) {

    m_iam_permission_isValid = ::OpenAPI::fromJsonValue(m_iam_permission, json[QString("iamPermission")]);
    m_iam_permission_isSet = !json[QString("iamPermission")].isNull() && m_iam_permission_isValid;

    m_iam_service_name_isValid = ::OpenAPI::fromJsonValue(m_iam_service_name, json[QString("iamServiceName")]);
    m_iam_service_name_isSet = !json[QString("iamServiceName")].isNull() && m_iam_service_name_isValid;

    m_policy_name_isValid = ::OpenAPI::fromJsonValue(m_policy_name, json[QString("policyName")]);
    m_policy_name_isSet = !json[QString("policyName")].isNull() && m_policy_name_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;
}

QString OAIPolicyDelegationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyDelegationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_iam_permission_isSet) {
        obj.insert(QString("iamPermission"), ::OpenAPI::toJsonValue(m_iam_permission));
    }
    if (m_iam_service_name_isSet) {
        obj.insert(QString("iamServiceName"), ::OpenAPI::toJsonValue(m_iam_service_name));
    }
    if (m_policy_name.isSet()) {
        obj.insert(QString("policyName"), ::OpenAPI::toJsonValue(m_policy_name));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    return obj;
}

QString OAIPolicyDelegationSettings::getIamPermission() const {
    return m_iam_permission;
}
void OAIPolicyDelegationSettings::setIamPermission(const QString &iam_permission) {
    m_iam_permission = iam_permission;
    m_iam_permission_isSet = true;
}

bool OAIPolicyDelegationSettings::is_iam_permission_Set() const{
    return m_iam_permission_isSet;
}

bool OAIPolicyDelegationSettings::is_iam_permission_Valid() const{
    return m_iam_permission_isValid;
}

QString OAIPolicyDelegationSettings::getIamServiceName() const {
    return m_iam_service_name;
}
void OAIPolicyDelegationSettings::setIamServiceName(const QString &iam_service_name) {
    m_iam_service_name = iam_service_name;
    m_iam_service_name_isSet = true;
}

bool OAIPolicyDelegationSettings::is_iam_service_name_Set() const{
    return m_iam_service_name_isSet;
}

bool OAIPolicyDelegationSettings::is_iam_service_name_Valid() const{
    return m_iam_service_name_isValid;
}

OAIPolicyName OAIPolicyDelegationSettings::getPolicyName() const {
    return m_policy_name;
}
void OAIPolicyDelegationSettings::setPolicyName(const OAIPolicyName &policy_name) {
    m_policy_name = policy_name;
    m_policy_name_isSet = true;
}

bool OAIPolicyDelegationSettings::is_policy_name_Set() const{
    return m_policy_name_isSet;
}

bool OAIPolicyDelegationSettings::is_policy_name_Valid() const{
    return m_policy_name_isValid;
}

OAIResource OAIPolicyDelegationSettings::getResource() const {
    return m_resource;
}
void OAIPolicyDelegationSettings::setResource(const OAIResource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIPolicyDelegationSettings::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIPolicyDelegationSettings::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAIPolicyDelegationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iam_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyDelegationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
