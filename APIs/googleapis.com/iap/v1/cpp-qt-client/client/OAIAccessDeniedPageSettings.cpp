/**
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessDeniedPageSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessDeniedPageSettings::OAIAccessDeniedPageSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessDeniedPageSettings::OAIAccessDeniedPageSettings() {
    this->initializeModel();
}

OAIAccessDeniedPageSettings::~OAIAccessDeniedPageSettings() {}

void OAIAccessDeniedPageSettings::initializeModel() {

    m_access_denied_page_uri_isSet = false;
    m_access_denied_page_uri_isValid = false;

    m_generate_troubleshooting_uri_isSet = false;
    m_generate_troubleshooting_uri_isValid = false;

    m_remediation_token_generation_enabled_isSet = false;
    m_remediation_token_generation_enabled_isValid = false;
}

void OAIAccessDeniedPageSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessDeniedPageSettings::fromJsonObject(QJsonObject json) {

    m_access_denied_page_uri_isValid = ::OpenAPI::fromJsonValue(m_access_denied_page_uri, json[QString("accessDeniedPageUri")]);
    m_access_denied_page_uri_isSet = !json[QString("accessDeniedPageUri")].isNull() && m_access_denied_page_uri_isValid;

    m_generate_troubleshooting_uri_isValid = ::OpenAPI::fromJsonValue(m_generate_troubleshooting_uri, json[QString("generateTroubleshootingUri")]);
    m_generate_troubleshooting_uri_isSet = !json[QString("generateTroubleshootingUri")].isNull() && m_generate_troubleshooting_uri_isValid;

    m_remediation_token_generation_enabled_isValid = ::OpenAPI::fromJsonValue(m_remediation_token_generation_enabled, json[QString("remediationTokenGenerationEnabled")]);
    m_remediation_token_generation_enabled_isSet = !json[QString("remediationTokenGenerationEnabled")].isNull() && m_remediation_token_generation_enabled_isValid;
}

QString OAIAccessDeniedPageSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessDeniedPageSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_access_denied_page_uri_isSet) {
        obj.insert(QString("accessDeniedPageUri"), ::OpenAPI::toJsonValue(m_access_denied_page_uri));
    }
    if (m_generate_troubleshooting_uri_isSet) {
        obj.insert(QString("generateTroubleshootingUri"), ::OpenAPI::toJsonValue(m_generate_troubleshooting_uri));
    }
    if (m_remediation_token_generation_enabled_isSet) {
        obj.insert(QString("remediationTokenGenerationEnabled"), ::OpenAPI::toJsonValue(m_remediation_token_generation_enabled));
    }
    return obj;
}

QString OAIAccessDeniedPageSettings::getAccessDeniedPageUri() const {
    return m_access_denied_page_uri;
}
void OAIAccessDeniedPageSettings::setAccessDeniedPageUri(const QString &access_denied_page_uri) {
    m_access_denied_page_uri = access_denied_page_uri;
    m_access_denied_page_uri_isSet = true;
}

bool OAIAccessDeniedPageSettings::is_access_denied_page_uri_Set() const{
    return m_access_denied_page_uri_isSet;
}

bool OAIAccessDeniedPageSettings::is_access_denied_page_uri_Valid() const{
    return m_access_denied_page_uri_isValid;
}

bool OAIAccessDeniedPageSettings::isGenerateTroubleshootingUri() const {
    return m_generate_troubleshooting_uri;
}
void OAIAccessDeniedPageSettings::setGenerateTroubleshootingUri(const bool &generate_troubleshooting_uri) {
    m_generate_troubleshooting_uri = generate_troubleshooting_uri;
    m_generate_troubleshooting_uri_isSet = true;
}

bool OAIAccessDeniedPageSettings::is_generate_troubleshooting_uri_Set() const{
    return m_generate_troubleshooting_uri_isSet;
}

bool OAIAccessDeniedPageSettings::is_generate_troubleshooting_uri_Valid() const{
    return m_generate_troubleshooting_uri_isValid;
}

bool OAIAccessDeniedPageSettings::isRemediationTokenGenerationEnabled() const {
    return m_remediation_token_generation_enabled;
}
void OAIAccessDeniedPageSettings::setRemediationTokenGenerationEnabled(const bool &remediation_token_generation_enabled) {
    m_remediation_token_generation_enabled = remediation_token_generation_enabled;
    m_remediation_token_generation_enabled_isSet = true;
}

bool OAIAccessDeniedPageSettings::is_remediation_token_generation_enabled_Set() const{
    return m_remediation_token_generation_enabled_isSet;
}

bool OAIAccessDeniedPageSettings::is_remediation_token_generation_enabled_Valid() const{
    return m_remediation_token_generation_enabled_isValid;
}

bool OAIAccessDeniedPageSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_denied_page_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_troubleshooting_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediation_token_generation_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessDeniedPageSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
