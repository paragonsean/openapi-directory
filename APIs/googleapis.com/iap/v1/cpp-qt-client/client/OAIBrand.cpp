/**
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrand::OAIBrand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrand::OAIBrand() {
    this->initializeModel();
}

OAIBrand::~OAIBrand() {}

void OAIBrand::initializeModel() {

    m_application_title_isSet = false;
    m_application_title_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_org_internal_only_isSet = false;
    m_org_internal_only_isValid = false;

    m_support_email_isSet = false;
    m_support_email_isValid = false;
}

void OAIBrand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrand::fromJsonObject(QJsonObject json) {

    m_application_title_isValid = ::OpenAPI::fromJsonValue(m_application_title, json[QString("applicationTitle")]);
    m_application_title_isSet = !json[QString("applicationTitle")].isNull() && m_application_title_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_org_internal_only_isValid = ::OpenAPI::fromJsonValue(m_org_internal_only, json[QString("orgInternalOnly")]);
    m_org_internal_only_isSet = !json[QString("orgInternalOnly")].isNull() && m_org_internal_only_isValid;

    m_support_email_isValid = ::OpenAPI::fromJsonValue(m_support_email, json[QString("supportEmail")]);
    m_support_email_isSet = !json[QString("supportEmail")].isNull() && m_support_email_isValid;
}

QString OAIBrand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrand::asJsonObject() const {
    QJsonObject obj;
    if (m_application_title_isSet) {
        obj.insert(QString("applicationTitle"), ::OpenAPI::toJsonValue(m_application_title));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_org_internal_only_isSet) {
        obj.insert(QString("orgInternalOnly"), ::OpenAPI::toJsonValue(m_org_internal_only));
    }
    if (m_support_email_isSet) {
        obj.insert(QString("supportEmail"), ::OpenAPI::toJsonValue(m_support_email));
    }
    return obj;
}

QString OAIBrand::getApplicationTitle() const {
    return m_application_title;
}
void OAIBrand::setApplicationTitle(const QString &application_title) {
    m_application_title = application_title;
    m_application_title_isSet = true;
}

bool OAIBrand::is_application_title_Set() const{
    return m_application_title_isSet;
}

bool OAIBrand::is_application_title_Valid() const{
    return m_application_title_isValid;
}

QString OAIBrand::getName() const {
    return m_name;
}
void OAIBrand::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBrand::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBrand::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIBrand::isOrgInternalOnly() const {
    return m_org_internal_only;
}
void OAIBrand::setOrgInternalOnly(const bool &org_internal_only) {
    m_org_internal_only = org_internal_only;
    m_org_internal_only_isSet = true;
}

bool OAIBrand::is_org_internal_only_Set() const{
    return m_org_internal_only_isSet;
}

bool OAIBrand::is_org_internal_only_Valid() const{
    return m_org_internal_only_isValid;
}

QString OAIBrand::getSupportEmail() const {
    return m_support_email;
}
void OAIBrand::setSupportEmail(const QString &support_email) {
    m_support_email = support_email;
    m_support_email_isSet = true;
}

bool OAIBrand::is_support_email_Set() const{
    return m_support_email_isSet;
}

bool OAIBrand::is_support_email_Valid() const{
    return m_support_email_isValid;
}

bool OAIBrand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_internal_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrand::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
