/**
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsmSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsmSettings::OAICsmSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsmSettings::OAICsmSettings() {
    this->initializeModel();
}

OAICsmSettings::~OAICsmSettings() {}

void OAICsmSettings::initializeModel() {

    m_rctoken_aud_isSet = false;
    m_rctoken_aud_isValid = false;
}

void OAICsmSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsmSettings::fromJsonObject(QJsonObject json) {

    m_rctoken_aud_isValid = ::OpenAPI::fromJsonValue(m_rctoken_aud, json[QString("rctokenAud")]);
    m_rctoken_aud_isSet = !json[QString("rctokenAud")].isNull() && m_rctoken_aud_isValid;
}

QString OAICsmSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsmSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_rctoken_aud_isSet) {
        obj.insert(QString("rctokenAud"), ::OpenAPI::toJsonValue(m_rctoken_aud));
    }
    return obj;
}

QString OAICsmSettings::getRctokenAud() const {
    return m_rctoken_aud;
}
void OAICsmSettings::setRctokenAud(const QString &rctoken_aud) {
    m_rctoken_aud = rctoken_aud;
    m_rctoken_aud_isSet = true;
}

bool OAICsmSettings::is_rctoken_aud_Set() const{
    return m_rctoken_aud_isSet;
}

bool OAICsmSettings::is_rctoken_aud_Valid() const{
    return m_rctoken_aud_isValid;
}

bool OAICsmSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rctoken_aud_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsmSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
