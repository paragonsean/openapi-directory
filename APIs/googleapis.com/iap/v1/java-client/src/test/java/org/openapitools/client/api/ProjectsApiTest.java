/*
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Brand;
import org.openapitools.client.model.IdentityAwareProxyClient;
import org.openapitools.client.model.ListBrandsResponse;
import org.openapitools.client.model.ListIdentityAwareProxyClientsResponse;
import org.openapitools.client.model.ListTunnelDestGroupsResponse;
import org.openapitools.client.model.TunnelDestGroup;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Constructs a new OAuth brand for the project if one does not exist. The created brand is \&quot;internal only\&quot;, meaning that OAuth clients created under it only accept requests from users who belong to the same Google Workspace organization as the project. The brand is created in an un-reviewed status. NOTE: The \&quot;internal only\&quot; status can be manually changed in the Google Cloud Console. Requires that a brand does not already exist for the project, and that the specified support email is owned by the caller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iapProjectsBrandsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Brand brand = null;
        Brand response = api.iapProjectsBrandsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, brand);
        // TODO: test validations
    }

    /**
     * Creates an Identity Aware Proxy (IAP) OAuth client. The client is owned by IAP. Requires that the brand for the project exists and that it is set for internal-only use.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iapProjectsBrandsIdentityAwareProxyClientsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        IdentityAwareProxyClient identityAwareProxyClient = null;
        IdentityAwareProxyClient response = api.iapProjectsBrandsIdentityAwareProxyClientsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, identityAwareProxyClient);
        // TODO: test validations
    }

    /**
     * Lists the existing clients for the brand.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iapProjectsBrandsIdentityAwareProxyClientsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListIdentityAwareProxyClientsResponse response = api.iapProjectsBrandsIdentityAwareProxyClientsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Resets an Identity Aware Proxy (IAP) OAuth client secret. Useful if the secret was compromised. Requires that the client is owned by IAP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iapProjectsBrandsIdentityAwareProxyClientsResetSecretTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        IdentityAwareProxyClient response = api.iapProjectsBrandsIdentityAwareProxyClientsResetSecret(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists the existing brands for the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iapProjectsBrandsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListBrandsResponse response = api.iapProjectsBrandsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a new TunnelDestGroup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iapProjectsIapTunnelLocationsDestGroupsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String tunnelDestGroupId = null;
        TunnelDestGroup tunnelDestGroup = null;
        TunnelDestGroup response = api.iapProjectsIapTunnelLocationsDestGroupsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, tunnelDestGroupId, tunnelDestGroup);
        // TODO: test validations
    }

    /**
     * Deletes a TunnelDestGroup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iapProjectsIapTunnelLocationsDestGroupsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.iapProjectsIapTunnelLocationsDestGroupsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves an existing TunnelDestGroup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iapProjectsIapTunnelLocationsDestGroupsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TunnelDestGroup response = api.iapProjectsIapTunnelLocationsDestGroupsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the existing TunnelDestGroups. To group across all locations, use a &#x60;-&#x60; as the location ID. For example: &#x60;/v1/projects/123/iap_tunnel/locations/-/destGroups&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iapProjectsIapTunnelLocationsDestGroupsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListTunnelDestGroupsResponse response = api.iapProjectsIapTunnelLocationsDestGroupsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a TunnelDestGroup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iapProjectsIapTunnelLocationsDestGroupsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        TunnelDestGroup tunnelDestGroup = null;
        TunnelDestGroup response = api.iapProjectsIapTunnelLocationsDestGroupsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, tunnelDestGroup);
        // TODO: test validations
    }

}
