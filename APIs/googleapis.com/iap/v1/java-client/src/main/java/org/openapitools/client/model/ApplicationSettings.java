/*
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccessDeniedPageSettings;
import org.openapitools.client.model.AttributePropagationSettings;
import org.openapitools.client.model.CsmSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Wrapper over application specific settings for IAP.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:37.767325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationSettings {
  public static final String SERIALIZED_NAME_ACCESS_DENIED_PAGE_SETTINGS = "accessDeniedPageSettings";
  @SerializedName(SERIALIZED_NAME_ACCESS_DENIED_PAGE_SETTINGS)
  private AccessDeniedPageSettings accessDeniedPageSettings;

  public static final String SERIALIZED_NAME_ATTRIBUTE_PROPAGATION_SETTINGS = "attributePropagationSettings";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_PROPAGATION_SETTINGS)
  private AttributePropagationSettings attributePropagationSettings;

  public static final String SERIALIZED_NAME_COOKIE_DOMAIN = "cookieDomain";
  @SerializedName(SERIALIZED_NAME_COOKIE_DOMAIN)
  private String cookieDomain;

  public static final String SERIALIZED_NAME_CSM_SETTINGS = "csmSettings";
  @SerializedName(SERIALIZED_NAME_CSM_SETTINGS)
  private CsmSettings csmSettings;

  public ApplicationSettings() {
  }

  public ApplicationSettings accessDeniedPageSettings(AccessDeniedPageSettings accessDeniedPageSettings) {
    this.accessDeniedPageSettings = accessDeniedPageSettings;
    return this;
  }

  /**
   * Get accessDeniedPageSettings
   * @return accessDeniedPageSettings
   */
  @javax.annotation.Nullable
  public AccessDeniedPageSettings getAccessDeniedPageSettings() {
    return accessDeniedPageSettings;
  }

  public void setAccessDeniedPageSettings(AccessDeniedPageSettings accessDeniedPageSettings) {
    this.accessDeniedPageSettings = accessDeniedPageSettings;
  }


  public ApplicationSettings attributePropagationSettings(AttributePropagationSettings attributePropagationSettings) {
    this.attributePropagationSettings = attributePropagationSettings;
    return this;
  }

  /**
   * Get attributePropagationSettings
   * @return attributePropagationSettings
   */
  @javax.annotation.Nullable
  public AttributePropagationSettings getAttributePropagationSettings() {
    return attributePropagationSettings;
  }

  public void setAttributePropagationSettings(AttributePropagationSettings attributePropagationSettings) {
    this.attributePropagationSettings = attributePropagationSettings;
  }


  public ApplicationSettings cookieDomain(String cookieDomain) {
    this.cookieDomain = cookieDomain;
    return this;
  }

  /**
   * The Domain value to set for cookies generated by IAP. This value is not validated by the API, but will be ignored at runtime if invalid.
   * @return cookieDomain
   */
  @javax.annotation.Nullable
  public String getCookieDomain() {
    return cookieDomain;
  }

  public void setCookieDomain(String cookieDomain) {
    this.cookieDomain = cookieDomain;
  }


  public ApplicationSettings csmSettings(CsmSettings csmSettings) {
    this.csmSettings = csmSettings;
    return this;
  }

  /**
   * Get csmSettings
   * @return csmSettings
   */
  @javax.annotation.Nullable
  public CsmSettings getCsmSettings() {
    return csmSettings;
  }

  public void setCsmSettings(CsmSettings csmSettings) {
    this.csmSettings = csmSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationSettings applicationSettings = (ApplicationSettings) o;
    return Objects.equals(this.accessDeniedPageSettings, applicationSettings.accessDeniedPageSettings) &&
        Objects.equals(this.attributePropagationSettings, applicationSettings.attributePropagationSettings) &&
        Objects.equals(this.cookieDomain, applicationSettings.cookieDomain) &&
        Objects.equals(this.csmSettings, applicationSettings.csmSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessDeniedPageSettings, attributePropagationSettings, cookieDomain, csmSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationSettings {\n");
    sb.append("    accessDeniedPageSettings: ").append(toIndentedString(accessDeniedPageSettings)).append("\n");
    sb.append("    attributePropagationSettings: ").append(toIndentedString(attributePropagationSettings)).append("\n");
    sb.append("    cookieDomain: ").append(toIndentedString(cookieDomain)).append("\n");
    sb.append("    csmSettings: ").append(toIndentedString(csmSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessDeniedPageSettings");
    openapiFields.add("attributePropagationSettings");
    openapiFields.add("cookieDomain");
    openapiFields.add("csmSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationSettings is not found in the empty JSON string", ApplicationSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessDeniedPageSettings`
      if (jsonObj.get("accessDeniedPageSettings") != null && !jsonObj.get("accessDeniedPageSettings").isJsonNull()) {
        AccessDeniedPageSettings.validateJsonElement(jsonObj.get("accessDeniedPageSettings"));
      }
      // validate the optional field `attributePropagationSettings`
      if (jsonObj.get("attributePropagationSettings") != null && !jsonObj.get("attributePropagationSettings").isJsonNull()) {
        AttributePropagationSettings.validateJsonElement(jsonObj.get("attributePropagationSettings"));
      }
      if ((jsonObj.get("cookieDomain") != null && !jsonObj.get("cookieDomain").isJsonNull()) && !jsonObj.get("cookieDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookieDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookieDomain").toString()));
      }
      // validate the optional field `csmSettings`
      if (jsonObj.get("csmSettings") != null && !jsonObj.get("csmSettings").isJsonNull()) {
        CsmSettings.validateJsonElement(jsonObj.get("csmSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationSettings>() {
           @Override
           public void write(JsonWriter out, ApplicationSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationSettings
   * @throws IOException if the JSON string is invalid with respect to ApplicationSettings
   */
  public static ApplicationSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationSettings.class);
  }

  /**
   * Convert an instance of ApplicationSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

