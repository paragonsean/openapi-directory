/*
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PolicyName;
import org.openapitools.client.model.Resource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PolicyDelegationConfig allows google-internal teams to use IAP for apps hosted in a tenant project. Using these settings, the app can delegate permission check to happen against the linked customer project. This is only ever supposed to be used by google internal teams, hence the restriction on the proto.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:37.767325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyDelegationSettings {
  public static final String SERIALIZED_NAME_IAM_PERMISSION = "iamPermission";
  @SerializedName(SERIALIZED_NAME_IAM_PERMISSION)
  private String iamPermission;

  public static final String SERIALIZED_NAME_IAM_SERVICE_NAME = "iamServiceName";
  @SerializedName(SERIALIZED_NAME_IAM_SERVICE_NAME)
  private String iamServiceName;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private PolicyName policyName;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private Resource resource;

  public PolicyDelegationSettings() {
  }

  public PolicyDelegationSettings iamPermission(String iamPermission) {
    this.iamPermission = iamPermission;
    return this;
  }

  /**
   * Permission to check in IAM.
   * @return iamPermission
   */
  @javax.annotation.Nullable
  public String getIamPermission() {
    return iamPermission;
  }

  public void setIamPermission(String iamPermission) {
    this.iamPermission = iamPermission;
  }


  public PolicyDelegationSettings iamServiceName(String iamServiceName) {
    this.iamServiceName = iamServiceName;
    return this;
  }

  /**
   * The DNS name of the service (e.g. \&quot;resourcemanager.googleapis.com\&quot;). This should be the domain name part of the full resource names (see https://aip.dev/122#full-resource-names), which is usually the same as IamServiceSpec.service of the service where the resource type is defined.
   * @return iamServiceName
   */
  @javax.annotation.Nullable
  public String getIamServiceName() {
    return iamServiceName;
  }

  public void setIamServiceName(String iamServiceName) {
    this.iamServiceName = iamServiceName;
  }


  public PolicyDelegationSettings policyName(PolicyName policyName) {
    this.policyName = policyName;
    return this;
  }

  /**
   * Get policyName
   * @return policyName
   */
  @javax.annotation.Nullable
  public PolicyName getPolicyName() {
    return policyName;
  }

  public void setPolicyName(PolicyName policyName) {
    this.policyName = policyName;
  }


  public PolicyDelegationSettings resource(Resource resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Get resource
   * @return resource
   */
  @javax.annotation.Nullable
  public Resource getResource() {
    return resource;
  }

  public void setResource(Resource resource) {
    this.resource = resource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyDelegationSettings policyDelegationSettings = (PolicyDelegationSettings) o;
    return Objects.equals(this.iamPermission, policyDelegationSettings.iamPermission) &&
        Objects.equals(this.iamServiceName, policyDelegationSettings.iamServiceName) &&
        Objects.equals(this.policyName, policyDelegationSettings.policyName) &&
        Objects.equals(this.resource, policyDelegationSettings.resource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iamPermission, iamServiceName, policyName, resource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyDelegationSettings {\n");
    sb.append("    iamPermission: ").append(toIndentedString(iamPermission)).append("\n");
    sb.append("    iamServiceName: ").append(toIndentedString(iamServiceName)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iamPermission");
    openapiFields.add("iamServiceName");
    openapiFields.add("policyName");
    openapiFields.add("resource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyDelegationSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyDelegationSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyDelegationSettings is not found in the empty JSON string", PolicyDelegationSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyDelegationSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyDelegationSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("iamPermission") != null && !jsonObj.get("iamPermission").isJsonNull()) && !jsonObj.get("iamPermission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iamPermission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iamPermission").toString()));
      }
      if ((jsonObj.get("iamServiceName") != null && !jsonObj.get("iamServiceName").isJsonNull()) && !jsonObj.get("iamServiceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iamServiceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iamServiceName").toString()));
      }
      // validate the optional field `policyName`
      if (jsonObj.get("policyName") != null && !jsonObj.get("policyName").isJsonNull()) {
        PolicyName.validateJsonElement(jsonObj.get("policyName"));
      }
      // validate the optional field `resource`
      if (jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) {
        Resource.validateJsonElement(jsonObj.get("resource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyDelegationSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyDelegationSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyDelegationSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyDelegationSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyDelegationSettings>() {
           @Override
           public void write(JsonWriter out, PolicyDelegationSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyDelegationSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyDelegationSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyDelegationSettings
   * @throws IOException if the JSON string is invalid with respect to PolicyDelegationSettings
   */
  public static PolicyDelegationSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyDelegationSettings.class);
  }

  /**
   * Convert an instance of PolicyDelegationSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

