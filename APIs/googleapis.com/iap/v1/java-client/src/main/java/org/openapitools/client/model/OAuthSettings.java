/*
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for OAuth login&amp;consent flow behavior as well as for OAuth Credentials.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:37.767325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OAuthSettings {
  public static final String SERIALIZED_NAME_LOGIN_HINT = "loginHint";
  @SerializedName(SERIALIZED_NAME_LOGIN_HINT)
  private String loginHint;

  public static final String SERIALIZED_NAME_PROGRAMMATIC_CLIENTS = "programmaticClients";
  @SerializedName(SERIALIZED_NAME_PROGRAMMATIC_CLIENTS)
  private List<String> programmaticClients = new ArrayList<>();

  public OAuthSettings() {
  }

  public OAuthSettings loginHint(String loginHint) {
    this.loginHint = loginHint;
    return this;
  }

  /**
   * Domain hint to send as hd&#x3D;? parameter in OAuth request flow. Enables redirect to primary IDP by skipping Google&#39;s login screen. https://developers.google.com/identity/protocols/OpenIDConnect#hd-param Note: IAP does not verify that the id token&#39;s hd claim matches this value since access behavior is managed by IAM policies.
   * @return loginHint
   */
  @javax.annotation.Nullable
  public String getLoginHint() {
    return loginHint;
  }

  public void setLoginHint(String loginHint) {
    this.loginHint = loginHint;
  }


  public OAuthSettings programmaticClients(List<String> programmaticClients) {
    this.programmaticClients = programmaticClients;
    return this;
  }

  public OAuthSettings addProgrammaticClientsItem(String programmaticClientsItem) {
    if (this.programmaticClients == null) {
      this.programmaticClients = new ArrayList<>();
    }
    this.programmaticClients.add(programmaticClientsItem);
    return this;
  }

  /**
   * List of client ids allowed to use IAP programmatically.
   * @return programmaticClients
   */
  @javax.annotation.Nullable
  public List<String> getProgrammaticClients() {
    return programmaticClients;
  }

  public void setProgrammaticClients(List<String> programmaticClients) {
    this.programmaticClients = programmaticClients;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuthSettings oauthSettings = (OAuthSettings) o;
    return Objects.equals(this.loginHint, oauthSettings.loginHint) &&
        Objects.equals(this.programmaticClients, oauthSettings.programmaticClients);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loginHint, programmaticClients);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuthSettings {\n");
    sb.append("    loginHint: ").append(toIndentedString(loginHint)).append("\n");
    sb.append("    programmaticClients: ").append(toIndentedString(programmaticClients)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("loginHint");
    openapiFields.add("programmaticClients");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OAuthSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OAuthSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OAuthSettings is not found in the empty JSON string", OAuthSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OAuthSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OAuthSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("loginHint") != null && !jsonObj.get("loginHint").isJsonNull()) && !jsonObj.get("loginHint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginHint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginHint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("programmaticClients") != null && !jsonObj.get("programmaticClients").isJsonNull() && !jsonObj.get("programmaticClients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `programmaticClients` to be an array in the JSON string but got `%s`", jsonObj.get("programmaticClients").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OAuthSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OAuthSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OAuthSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OAuthSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<OAuthSettings>() {
           @Override
           public void write(JsonWriter out, OAuthSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OAuthSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OAuthSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OAuthSettings
   * @throws IOException if the JSON string is invalid with respect to OAuthSettings
   */
  public static OAuthSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OAuthSettings.class);
  }

  /**
   * Convert an instance of OAuthSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

