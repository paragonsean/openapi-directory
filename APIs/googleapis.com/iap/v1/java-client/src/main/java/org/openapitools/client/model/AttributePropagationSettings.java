/*
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for propagating attributes to applications protected by IAP.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:37.767325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttributePropagationSettings {
  public static final String SERIALIZED_NAME_ENABLE = "enable";
  @SerializedName(SERIALIZED_NAME_ENABLE)
  private Boolean enable;

  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  /**
   * Gets or Sets outputCredentials
   */
  @JsonAdapter(OutputCredentialsEnum.Adapter.class)
  public enum OutputCredentialsEnum {
    OUTPUT_CREDENTIALS_UNSPECIFIED("OUTPUT_CREDENTIALS_UNSPECIFIED"),
    
    HEADER("HEADER"),
    
    JWT("JWT"),
    
    RCTOKEN("RCTOKEN");

    private String value;

    OutputCredentialsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutputCredentialsEnum fromValue(String value) {
      for (OutputCredentialsEnum b : OutputCredentialsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutputCredentialsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutputCredentialsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutputCredentialsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutputCredentialsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OutputCredentialsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OUTPUT_CREDENTIALS = "outputCredentials";
  @SerializedName(SERIALIZED_NAME_OUTPUT_CREDENTIALS)
  private List<OutputCredentialsEnum> outputCredentials = new ArrayList<>();

  public AttributePropagationSettings() {
  }

  public AttributePropagationSettings enable(Boolean enable) {
    this.enable = enable;
    return this;
  }

  /**
   * Whether the provided attribute propagation settings should be evaluated on user requests. If set to true, attributes returned from the expression will be propagated in the set output credentials.
   * @return enable
   */
  @javax.annotation.Nullable
  public Boolean getEnable() {
    return enable;
  }

  public void setEnable(Boolean enable) {
    this.enable = enable;
  }


  public AttributePropagationSettings expression(String expression) {
    this.expression = expression;
    return this;
  }

  /**
   * Raw string CEL expression. Must return a list of attributes. A maximum of 45 attributes can be selected. Expressions can select different attribute types from &#x60;attributes&#x60;: &#x60;attributes.saml_attributes&#x60;, &#x60;attributes.iap_attributes&#x60;. The following functions are supported: - filter &#x60;.filter(, )&#x60;: Returns a subset of &#x60;&#x60; where &#x60;&#x60; is true for every item. - in &#x60; in &#x60;: Returns true if &#x60;&#x60; contains &#x60;&#x60;. - selectByName &#x60;.selectByName()&#x60;: Returns the attribute in &#x60;&#x60; with the given &#x60;&#x60; name, otherwise returns empty. - emitAs &#x60;.emitAs()&#x60;: Sets the &#x60;&#x60; name field to the given &#x60;&#x60; for propagation in selected output credentials. - strict &#x60;.strict()&#x60;: Ignores the &#x60;x-goog-iap-attr-&#x60; prefix for the provided &#x60;&#x60; when propagating with the &#x60;HEADER&#x60; output credential, such as request headers. - append &#x60;.append()&#x60; OR &#x60;.append()&#x60;: Appends the provided &#x60;&#x60; or &#x60;&#x60; to the end of &#x60;&#x60;. Example expression: &#x60;attributes.saml_attributes.filter(x, x.name in [&#39;test&#39;]).append(attributes.iap_attributes.selectByName(&#39;exact&#39;).emitAs(&#39;custom&#39;).strict())&#x60;
   * @return expression
   */
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }


  public AttributePropagationSettings outputCredentials(List<OutputCredentialsEnum> outputCredentials) {
    this.outputCredentials = outputCredentials;
    return this;
  }

  public AttributePropagationSettings addOutputCredentialsItem(OutputCredentialsEnum outputCredentialsItem) {
    if (this.outputCredentials == null) {
      this.outputCredentials = new ArrayList<>();
    }
    this.outputCredentials.add(outputCredentialsItem);
    return this;
  }

  /**
   * Which output credentials attributes selected by the CEL expression should be propagated in. All attributes will be fully duplicated in each selected output credential.
   * @return outputCredentials
   */
  @javax.annotation.Nullable
  public List<OutputCredentialsEnum> getOutputCredentials() {
    return outputCredentials;
  }

  public void setOutputCredentials(List<OutputCredentialsEnum> outputCredentials) {
    this.outputCredentials = outputCredentials;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributePropagationSettings attributePropagationSettings = (AttributePropagationSettings) o;
    return Objects.equals(this.enable, attributePropagationSettings.enable) &&
        Objects.equals(this.expression, attributePropagationSettings.expression) &&
        Objects.equals(this.outputCredentials, attributePropagationSettings.outputCredentials);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enable, expression, outputCredentials);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributePropagationSettings {\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    outputCredentials: ").append(toIndentedString(outputCredentials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enable");
    openapiFields.add("expression");
    openapiFields.add("outputCredentials");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttributePropagationSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttributePropagationSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttributePropagationSettings is not found in the empty JSON string", AttributePropagationSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttributePropagationSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttributePropagationSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expression") != null && !jsonObj.get("expression").isJsonNull()) && !jsonObj.get("expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expression").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("outputCredentials") != null && !jsonObj.get("outputCredentials").isJsonNull() && !jsonObj.get("outputCredentials").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputCredentials` to be an array in the JSON string but got `%s`", jsonObj.get("outputCredentials").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttributePropagationSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttributePropagationSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttributePropagationSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttributePropagationSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AttributePropagationSettings>() {
           @Override
           public void write(JsonWriter out, AttributePropagationSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttributePropagationSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttributePropagationSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttributePropagationSettings
   * @throws IOException if the JSON string is invalid with respect to AttributePropagationSettings
   */
  public static AttributePropagationSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttributePropagationSettings.class);
  }

  /**
   * Convert an instance of AttributePropagationSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

