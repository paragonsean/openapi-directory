/*
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AllowedDomainsSettings;
import org.openapitools.client.model.CorsSettings;
import org.openapitools.client.model.GcipSettings;
import org.openapitools.client.model.OAuthSettings;
import org.openapitools.client.model.PolicyDelegationSettings;
import org.openapitools.client.model.ReauthSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Access related settings for IAP protected apps.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:37.767325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccessSettings {
  public static final String SERIALIZED_NAME_ALLOWED_DOMAINS_SETTINGS = "allowedDomainsSettings";
  @SerializedName(SERIALIZED_NAME_ALLOWED_DOMAINS_SETTINGS)
  private AllowedDomainsSettings allowedDomainsSettings;

  public static final String SERIALIZED_NAME_CORS_SETTINGS = "corsSettings";
  @SerializedName(SERIALIZED_NAME_CORS_SETTINGS)
  private CorsSettings corsSettings;

  public static final String SERIALIZED_NAME_GCIP_SETTINGS = "gcipSettings";
  @SerializedName(SERIALIZED_NAME_GCIP_SETTINGS)
  private GcipSettings gcipSettings;

  public static final String SERIALIZED_NAME_OAUTH_SETTINGS = "oauthSettings";
  @SerializedName(SERIALIZED_NAME_OAUTH_SETTINGS)
  private OAuthSettings oauthSettings;

  public static final String SERIALIZED_NAME_POLICY_DELEGATION_SETTINGS = "policyDelegationSettings";
  @SerializedName(SERIALIZED_NAME_POLICY_DELEGATION_SETTINGS)
  private PolicyDelegationSettings policyDelegationSettings;

  public static final String SERIALIZED_NAME_REAUTH_SETTINGS = "reauthSettings";
  @SerializedName(SERIALIZED_NAME_REAUTH_SETTINGS)
  private ReauthSettings reauthSettings;

  public AccessSettings() {
  }

  public AccessSettings allowedDomainsSettings(AllowedDomainsSettings allowedDomainsSettings) {
    this.allowedDomainsSettings = allowedDomainsSettings;
    return this;
  }

  /**
   * Get allowedDomainsSettings
   * @return allowedDomainsSettings
   */
  @javax.annotation.Nullable
  public AllowedDomainsSettings getAllowedDomainsSettings() {
    return allowedDomainsSettings;
  }

  public void setAllowedDomainsSettings(AllowedDomainsSettings allowedDomainsSettings) {
    this.allowedDomainsSettings = allowedDomainsSettings;
  }


  public AccessSettings corsSettings(CorsSettings corsSettings) {
    this.corsSettings = corsSettings;
    return this;
  }

  /**
   * Get corsSettings
   * @return corsSettings
   */
  @javax.annotation.Nullable
  public CorsSettings getCorsSettings() {
    return corsSettings;
  }

  public void setCorsSettings(CorsSettings corsSettings) {
    this.corsSettings = corsSettings;
  }


  public AccessSettings gcipSettings(GcipSettings gcipSettings) {
    this.gcipSettings = gcipSettings;
    return this;
  }

  /**
   * Get gcipSettings
   * @return gcipSettings
   */
  @javax.annotation.Nullable
  public GcipSettings getGcipSettings() {
    return gcipSettings;
  }

  public void setGcipSettings(GcipSettings gcipSettings) {
    this.gcipSettings = gcipSettings;
  }


  public AccessSettings oauthSettings(OAuthSettings oauthSettings) {
    this.oauthSettings = oauthSettings;
    return this;
  }

  /**
   * Get oauthSettings
   * @return oauthSettings
   */
  @javax.annotation.Nullable
  public OAuthSettings getOauthSettings() {
    return oauthSettings;
  }

  public void setOauthSettings(OAuthSettings oauthSettings) {
    this.oauthSettings = oauthSettings;
  }


  public AccessSettings policyDelegationSettings(PolicyDelegationSettings policyDelegationSettings) {
    this.policyDelegationSettings = policyDelegationSettings;
    return this;
  }

  /**
   * Get policyDelegationSettings
   * @return policyDelegationSettings
   */
  @javax.annotation.Nullable
  public PolicyDelegationSettings getPolicyDelegationSettings() {
    return policyDelegationSettings;
  }

  public void setPolicyDelegationSettings(PolicyDelegationSettings policyDelegationSettings) {
    this.policyDelegationSettings = policyDelegationSettings;
  }


  public AccessSettings reauthSettings(ReauthSettings reauthSettings) {
    this.reauthSettings = reauthSettings;
    return this;
  }

  /**
   * Get reauthSettings
   * @return reauthSettings
   */
  @javax.annotation.Nullable
  public ReauthSettings getReauthSettings() {
    return reauthSettings;
  }

  public void setReauthSettings(ReauthSettings reauthSettings) {
    this.reauthSettings = reauthSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessSettings accessSettings = (AccessSettings) o;
    return Objects.equals(this.allowedDomainsSettings, accessSettings.allowedDomainsSettings) &&
        Objects.equals(this.corsSettings, accessSettings.corsSettings) &&
        Objects.equals(this.gcipSettings, accessSettings.gcipSettings) &&
        Objects.equals(this.oauthSettings, accessSettings.oauthSettings) &&
        Objects.equals(this.policyDelegationSettings, accessSettings.policyDelegationSettings) &&
        Objects.equals(this.reauthSettings, accessSettings.reauthSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedDomainsSettings, corsSettings, gcipSettings, oauthSettings, policyDelegationSettings, reauthSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessSettings {\n");
    sb.append("    allowedDomainsSettings: ").append(toIndentedString(allowedDomainsSettings)).append("\n");
    sb.append("    corsSettings: ").append(toIndentedString(corsSettings)).append("\n");
    sb.append("    gcipSettings: ").append(toIndentedString(gcipSettings)).append("\n");
    sb.append("    oauthSettings: ").append(toIndentedString(oauthSettings)).append("\n");
    sb.append("    policyDelegationSettings: ").append(toIndentedString(policyDelegationSettings)).append("\n");
    sb.append("    reauthSettings: ").append(toIndentedString(reauthSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedDomainsSettings");
    openapiFields.add("corsSettings");
    openapiFields.add("gcipSettings");
    openapiFields.add("oauthSettings");
    openapiFields.add("policyDelegationSettings");
    openapiFields.add("reauthSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccessSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessSettings is not found in the empty JSON string", AccessSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `allowedDomainsSettings`
      if (jsonObj.get("allowedDomainsSettings") != null && !jsonObj.get("allowedDomainsSettings").isJsonNull()) {
        AllowedDomainsSettings.validateJsonElement(jsonObj.get("allowedDomainsSettings"));
      }
      // validate the optional field `corsSettings`
      if (jsonObj.get("corsSettings") != null && !jsonObj.get("corsSettings").isJsonNull()) {
        CorsSettings.validateJsonElement(jsonObj.get("corsSettings"));
      }
      // validate the optional field `gcipSettings`
      if (jsonObj.get("gcipSettings") != null && !jsonObj.get("gcipSettings").isJsonNull()) {
        GcipSettings.validateJsonElement(jsonObj.get("gcipSettings"));
      }
      // validate the optional field `oauthSettings`
      if (jsonObj.get("oauthSettings") != null && !jsonObj.get("oauthSettings").isJsonNull()) {
        OAuthSettings.validateJsonElement(jsonObj.get("oauthSettings"));
      }
      // validate the optional field `policyDelegationSettings`
      if (jsonObj.get("policyDelegationSettings") != null && !jsonObj.get("policyDelegationSettings").isJsonNull()) {
        PolicyDelegationSettings.validateJsonElement(jsonObj.get("policyDelegationSettings"));
      }
      // validate the optional field `reauthSettings`
      if (jsonObj.get("reauthSettings") != null && !jsonObj.get("reauthSettings").isJsonNull()) {
        ReauthSettings.validateJsonElement(jsonObj.get("reauthSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessSettings>() {
           @Override
           public void write(JsonWriter out, AccessSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccessSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccessSettings
   * @throws IOException if the JSON string is invalid with respect to AccessSettings
   */
  public static AccessSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessSettings.class);
  }

  /**
   * Convert an instance of AccessSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

