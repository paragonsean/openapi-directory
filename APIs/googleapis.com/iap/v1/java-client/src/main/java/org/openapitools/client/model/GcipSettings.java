/*
 * Cloud Identity-Aware Proxy API
 * Controls access to cloud applications running on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Allows customers to configure tenant_id for GCIP instance per-app.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:37.767325-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GcipSettings {
  public static final String SERIALIZED_NAME_LOGIN_PAGE_URI = "loginPageUri";
  @SerializedName(SERIALIZED_NAME_LOGIN_PAGE_URI)
  private String loginPageUri;

  public static final String SERIALIZED_NAME_TENANT_IDS = "tenantIds";
  @SerializedName(SERIALIZED_NAME_TENANT_IDS)
  private List<String> tenantIds = new ArrayList<>();

  public GcipSettings() {
  }

  public GcipSettings loginPageUri(String loginPageUri) {
    this.loginPageUri = loginPageUri;
    return this;
  }

  /**
   * Login page URI associated with the GCIP tenants. Typically, all resources within the same project share the same login page, though it could be overridden at the sub resource level.
   * @return loginPageUri
   */
  @javax.annotation.Nullable
  public String getLoginPageUri() {
    return loginPageUri;
  }

  public void setLoginPageUri(String loginPageUri) {
    this.loginPageUri = loginPageUri;
  }


  public GcipSettings tenantIds(List<String> tenantIds) {
    this.tenantIds = tenantIds;
    return this;
  }

  public GcipSettings addTenantIdsItem(String tenantIdsItem) {
    if (this.tenantIds == null) {
      this.tenantIds = new ArrayList<>();
    }
    this.tenantIds.add(tenantIdsItem);
    return this;
  }

  /**
   * GCIP tenant ids that are linked to the IAP resource. tenant_ids could be a string beginning with a number character to indicate authenticating with GCIP tenant flow, or in the format of _ to indicate authenticating with GCIP agent flow. If agent flow is used, tenant_ids should only contain one single element, while for tenant flow, tenant_ids can contain multiple elements.
   * @return tenantIds
   */
  @javax.annotation.Nullable
  public List<String> getTenantIds() {
    return tenantIds;
  }

  public void setTenantIds(List<String> tenantIds) {
    this.tenantIds = tenantIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GcipSettings gcipSettings = (GcipSettings) o;
    return Objects.equals(this.loginPageUri, gcipSettings.loginPageUri) &&
        Objects.equals(this.tenantIds, gcipSettings.tenantIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loginPageUri, tenantIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GcipSettings {\n");
    sb.append("    loginPageUri: ").append(toIndentedString(loginPageUri)).append("\n");
    sb.append("    tenantIds: ").append(toIndentedString(tenantIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("loginPageUri");
    openapiFields.add("tenantIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GcipSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GcipSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GcipSettings is not found in the empty JSON string", GcipSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GcipSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GcipSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("loginPageUri") != null && !jsonObj.get("loginPageUri").isJsonNull()) && !jsonObj.get("loginPageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginPageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginPageUri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tenantIds") != null && !jsonObj.get("tenantIds").isJsonNull() && !jsonObj.get("tenantIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantIds` to be an array in the JSON string but got `%s`", jsonObj.get("tenantIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GcipSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GcipSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GcipSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GcipSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GcipSettings>() {
           @Override
           public void write(JsonWriter out, GcipSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GcipSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GcipSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GcipSettings
   * @throws IOException if the JSON string is invalid with respect to GcipSettings
   */
  public static GcipSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GcipSettings.class);
  }

  /**
   * Convert an instance of GcipSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

