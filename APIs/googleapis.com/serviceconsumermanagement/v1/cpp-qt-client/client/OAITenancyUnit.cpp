/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITenancyUnit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITenancyUnit::OAITenancyUnit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITenancyUnit::OAITenancyUnit() {
    this->initializeModel();
}

OAITenancyUnit::~OAITenancyUnit() {}

void OAITenancyUnit::initializeModel() {

    m_consumer_isSet = false;
    m_consumer_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_tenant_resources_isSet = false;
    m_tenant_resources_isValid = false;
}

void OAITenancyUnit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITenancyUnit::fromJsonObject(QJsonObject json) {

    m_consumer_isValid = ::OpenAPI::fromJsonValue(m_consumer, json[QString("consumer")]);
    m_consumer_isSet = !json[QString("consumer")].isNull() && m_consumer_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_tenant_resources_isValid = ::OpenAPI::fromJsonValue(m_tenant_resources, json[QString("tenantResources")]);
    m_tenant_resources_isSet = !json[QString("tenantResources")].isNull() && m_tenant_resources_isValid;
}

QString OAITenancyUnit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITenancyUnit::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_isSet) {
        obj.insert(QString("consumer"), ::OpenAPI::toJsonValue(m_consumer));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_tenant_resources.size() > 0) {
        obj.insert(QString("tenantResources"), ::OpenAPI::toJsonValue(m_tenant_resources));
    }
    return obj;
}

QString OAITenancyUnit::getConsumer() const {
    return m_consumer;
}
void OAITenancyUnit::setConsumer(const QString &consumer) {
    m_consumer = consumer;
    m_consumer_isSet = true;
}

bool OAITenancyUnit::is_consumer_Set() const{
    return m_consumer_isSet;
}

bool OAITenancyUnit::is_consumer_Valid() const{
    return m_consumer_isValid;
}

QString OAITenancyUnit::getCreateTime() const {
    return m_create_time;
}
void OAITenancyUnit::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAITenancyUnit::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAITenancyUnit::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAITenancyUnit::getName() const {
    return m_name;
}
void OAITenancyUnit::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITenancyUnit::is_name_Set() const{
    return m_name_isSet;
}

bool OAITenancyUnit::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITenancyUnit::getService() const {
    return m_service;
}
void OAITenancyUnit::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAITenancyUnit::is_service_Set() const{
    return m_service_isSet;
}

bool OAITenancyUnit::is_service_Valid() const{
    return m_service_isValid;
}

QList<OAITenantResource> OAITenancyUnit::getTenantResources() const {
    return m_tenant_resources;
}
void OAITenancyUnit::setTenantResources(const QList<OAITenantResource> &tenant_resources) {
    m_tenant_resources = tenant_resources;
    m_tenant_resources_isSet = true;
}

bool OAITenancyUnit::is_tenant_resources_Set() const{
    return m_tenant_resources_isSet;
}

bool OAITenancyUnit::is_tenant_resources_Valid() const{
    return m_tenant_resources_isValid;
}

bool OAITenancyUnit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITenancyUnit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
