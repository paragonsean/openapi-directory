/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitoringDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitoringDestination::OAIMonitoringDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitoringDestination::OAIMonitoringDestination() {
    this->initializeModel();
}

OAIMonitoringDestination::~OAIMonitoringDestination() {}

void OAIMonitoringDestination::initializeModel() {

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_monitored_resource_isSet = false;
    m_monitored_resource_isValid = false;
}

void OAIMonitoringDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitoringDestination::fromJsonObject(QJsonObject json) {

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_monitored_resource_isValid = ::OpenAPI::fromJsonValue(m_monitored_resource, json[QString("monitoredResource")]);
    m_monitored_resource_isSet = !json[QString("monitoredResource")].isNull() && m_monitored_resource_isValid;
}

QString OAIMonitoringDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitoringDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_monitored_resource_isSet) {
        obj.insert(QString("monitoredResource"), ::OpenAPI::toJsonValue(m_monitored_resource));
    }
    return obj;
}

QList<QString> OAIMonitoringDestination::getMetrics() const {
    return m_metrics;
}
void OAIMonitoringDestination::setMetrics(const QList<QString> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIMonitoringDestination::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIMonitoringDestination::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAIMonitoringDestination::getMonitoredResource() const {
    return m_monitored_resource;
}
void OAIMonitoringDestination::setMonitoredResource(const QString &monitored_resource) {
    m_monitored_resource = monitored_resource;
    m_monitored_resource_isSet = true;
}

bool OAIMonitoringDestination::is_monitored_resource_Set() const{
    return m_monitored_resource_isSet;
}

bool OAIMonitoringDestination::is_monitored_resource_Valid() const{
    return m_monitored_resource_isValid;
}

bool OAIMonitoringDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitored_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitoringDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
