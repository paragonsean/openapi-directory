/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIService.h
 *
 * &#x60;Service&#x60; is the root object of Google API service configuration (service config). It describes the basic information about a logical service, such as the service name and the user-facing title, and delegates other aspects to sub-sections. Each sub-section is either a proto message or a repeated proto message that configures a specific aspect, such as auth. For more information, see each proto message definition. Example: type: google.api.Service name: calendar.googleapis.com title: Google Calendar API apis: - name: google.calendar.v3.Calendar visibility: rules: - selector: \&quot;google.calendar.v3.*\&quot; restriction: PREVIEW backend: rules: - selector: \&quot;google.calendar.v3.*\&quot; address: calendar.example.com authentication: providers: - id: google_calendar_auth jwks_uri: https://www.googleapis.com/oauth2/v1/certs issuer: https://securetoken.google.com rules: - selector: \&quot;*\&quot; requirements: provider_id: google_calendar_auth
 */

#ifndef OAIService_H
#define OAIService_H

#include <QJsonObject>

#include "OAIApi.h"
#include "OAIAuthentication.h"
#include "OAIBackend.h"
#include "OAIBilling.h"
#include "OAIContext.h"
#include "OAIControl.h"
#include "OAICustomError.h"
#include "OAIDocumentation.h"
#include "OAIEndpoint.h"
#include "OAIEnum.h"
#include "OAIHttp.h"
#include "OAILogDescriptor.h"
#include "OAILogging.h"
#include "OAIMetricDescriptor.h"
#include "OAIMonitoredResourceDescriptor.h"
#include "OAIMonitoring.h"
#include "OAIPublishing.h"
#include "OAIQuota.h"
#include "OAISourceInfo.h"
#include "OAISystemParameters.h"
#include "OAIType.h"
#include "OAIUsage.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIApi;
class OAIAuthentication;
class OAIBackend;
class OAIBilling;
class OAIContext;
class OAIControl;
class OAICustomError;
class OAIDocumentation;
class OAIEndpoint;
class OAIEnum;
class OAIHttp;
class OAILogging;
class OAILogDescriptor;
class OAIMetricDescriptor;
class OAIMonitoredResourceDescriptor;
class OAIMonitoring;
class OAIPublishing;
class OAIQuota;
class OAISourceInfo;
class OAISystemParameters;
class OAIType;
class OAIUsage;

class OAIService : public OAIObject {
public:
    OAIService();
    OAIService(QString json);
    ~OAIService() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIApi> getApis() const;
    void setApis(const QList<OAIApi> &apis);
    bool is_apis_Set() const;
    bool is_apis_Valid() const;

    OAIAuthentication getAuthentication() const;
    void setAuthentication(const OAIAuthentication &authentication);
    bool is_authentication_Set() const;
    bool is_authentication_Valid() const;

    OAIBackend getBackend() const;
    void setBackend(const OAIBackend &backend);
    bool is_backend_Set() const;
    bool is_backend_Valid() const;

    OAIBilling getBilling() const;
    void setBilling(const OAIBilling &billing);
    bool is_billing_Set() const;
    bool is_billing_Valid() const;

    qint32 getConfigVersion() const;
    void setConfigVersion(const qint32 &config_version);
    bool is_config_version_Set() const;
    bool is_config_version_Valid() const;

    OAIContext getContext() const;
    void setContext(const OAIContext &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    OAIControl getControl() const;
    void setControl(const OAIControl &control);
    bool is_control_Set() const;
    bool is_control_Valid() const;

    OAICustomError getCustomError() const;
    void setCustomError(const OAICustomError &custom_error);
    bool is_custom_error_Set() const;
    bool is_custom_error_Valid() const;

    OAIDocumentation getDocumentation() const;
    void setDocumentation(const OAIDocumentation &documentation);
    bool is_documentation_Set() const;
    bool is_documentation_Valid() const;

    QList<OAIEndpoint> getEndpoints() const;
    void setEndpoints(const QList<OAIEndpoint> &endpoints);
    bool is_endpoints_Set() const;
    bool is_endpoints_Valid() const;

    QList<OAIEnum> getEnums() const;
    void setEnums(const QList<OAIEnum> &enums);
    bool is_enums_Set() const;
    bool is_enums_Valid() const;

    OAIHttp getHttp() const;
    void setHttp(const OAIHttp &http);
    bool is_http_Set() const;
    bool is_http_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAILogging getLogging() const;
    void setLogging(const OAILogging &logging);
    bool is_logging_Set() const;
    bool is_logging_Valid() const;

    QList<OAILogDescriptor> getLogs() const;
    void setLogs(const QList<OAILogDescriptor> &logs);
    bool is_logs_Set() const;
    bool is_logs_Valid() const;

    QList<OAIMetricDescriptor> getMetrics() const;
    void setMetrics(const QList<OAIMetricDescriptor> &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    QList<OAIMonitoredResourceDescriptor> getMonitoredResources() const;
    void setMonitoredResources(const QList<OAIMonitoredResourceDescriptor> &monitored_resources);
    bool is_monitored_resources_Set() const;
    bool is_monitored_resources_Valid() const;

    OAIMonitoring getMonitoring() const;
    void setMonitoring(const OAIMonitoring &monitoring);
    bool is_monitoring_Set() const;
    bool is_monitoring_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getProducerProjectId() const;
    void setProducerProjectId(const QString &producer_project_id);
    bool is_producer_project_id_Set() const;
    bool is_producer_project_id_Valid() const;

    OAIPublishing getPublishing() const;
    void setPublishing(const OAIPublishing &publishing);
    bool is_publishing_Set() const;
    bool is_publishing_Valid() const;

    OAIQuota getQuota() const;
    void setQuota(const OAIQuota &quota);
    bool is_quota_Set() const;
    bool is_quota_Valid() const;

    OAISourceInfo getSourceInfo() const;
    void setSourceInfo(const OAISourceInfo &source_info);
    bool is_source_info_Set() const;
    bool is_source_info_Valid() const;

    OAISystemParameters getSystemParameters() const;
    void setSystemParameters(const OAISystemParameters &system_parameters);
    bool is_system_parameters_Set() const;
    bool is_system_parameters_Valid() const;

    QList<OAIType> getSystemTypes() const;
    void setSystemTypes(const QList<OAIType> &system_types);
    bool is_system_types_Set() const;
    bool is_system_types_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QList<OAIType> getTypes() const;
    void setTypes(const QList<OAIType> &types);
    bool is_types_Set() const;
    bool is_types_Valid() const;

    OAIUsage getUsage() const;
    void setUsage(const OAIUsage &usage);
    bool is_usage_Set() const;
    bool is_usage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIApi> m_apis;
    bool m_apis_isSet;
    bool m_apis_isValid;

    OAIAuthentication m_authentication;
    bool m_authentication_isSet;
    bool m_authentication_isValid;

    OAIBackend m_backend;
    bool m_backend_isSet;
    bool m_backend_isValid;

    OAIBilling m_billing;
    bool m_billing_isSet;
    bool m_billing_isValid;

    qint32 m_config_version;
    bool m_config_version_isSet;
    bool m_config_version_isValid;

    OAIContext m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    OAIControl m_control;
    bool m_control_isSet;
    bool m_control_isValid;

    OAICustomError m_custom_error;
    bool m_custom_error_isSet;
    bool m_custom_error_isValid;

    OAIDocumentation m_documentation;
    bool m_documentation_isSet;
    bool m_documentation_isValid;

    QList<OAIEndpoint> m_endpoints;
    bool m_endpoints_isSet;
    bool m_endpoints_isValid;

    QList<OAIEnum> m_enums;
    bool m_enums_isSet;
    bool m_enums_isValid;

    OAIHttp m_http;
    bool m_http_isSet;
    bool m_http_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAILogging m_logging;
    bool m_logging_isSet;
    bool m_logging_isValid;

    QList<OAILogDescriptor> m_logs;
    bool m_logs_isSet;
    bool m_logs_isValid;

    QList<OAIMetricDescriptor> m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;

    QList<OAIMonitoredResourceDescriptor> m_monitored_resources;
    bool m_monitored_resources_isSet;
    bool m_monitored_resources_isValid;

    OAIMonitoring m_monitoring;
    bool m_monitoring_isSet;
    bool m_monitoring_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_producer_project_id;
    bool m_producer_project_id_isSet;
    bool m_producer_project_id_isValid;

    OAIPublishing m_publishing;
    bool m_publishing_isSet;
    bool m_publishing_isValid;

    OAIQuota m_quota;
    bool m_quota_isSet;
    bool m_quota_isValid;

    OAISourceInfo m_source_info;
    bool m_source_info_isSet;
    bool m_source_info_isValid;

    OAISystemParameters m_system_parameters;
    bool m_system_parameters_isSet;
    bool m_system_parameters_isValid;

    QList<OAIType> m_system_types;
    bool m_system_types_isSet;
    bool m_system_types_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QList<OAIType> m_types;
    bool m_types_isSet;
    bool m_types_isValid;

    OAIUsage m_usage;
    bool m_usage_isSet;
    bool m_usage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIService)

#endif // OAIService_H
