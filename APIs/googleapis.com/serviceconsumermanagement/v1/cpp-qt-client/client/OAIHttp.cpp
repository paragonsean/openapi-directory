/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttp::OAIHttp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttp::OAIHttp() {
    this->initializeModel();
}

OAIHttp::~OAIHttp() {}

void OAIHttp::initializeModel() {

    m_fully_decode_reserved_expansion_isSet = false;
    m_fully_decode_reserved_expansion_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;
}

void OAIHttp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttp::fromJsonObject(QJsonObject json) {

    m_fully_decode_reserved_expansion_isValid = ::OpenAPI::fromJsonValue(m_fully_decode_reserved_expansion, json[QString("fullyDecodeReservedExpansion")]);
    m_fully_decode_reserved_expansion_isSet = !json[QString("fullyDecodeReservedExpansion")].isNull() && m_fully_decode_reserved_expansion_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;
}

QString OAIHttp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttp::asJsonObject() const {
    QJsonObject obj;
    if (m_fully_decode_reserved_expansion_isSet) {
        obj.insert(QString("fullyDecodeReservedExpansion"), ::OpenAPI::toJsonValue(m_fully_decode_reserved_expansion));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    return obj;
}

bool OAIHttp::isFullyDecodeReservedExpansion() const {
    return m_fully_decode_reserved_expansion;
}
void OAIHttp::setFullyDecodeReservedExpansion(const bool &fully_decode_reserved_expansion) {
    m_fully_decode_reserved_expansion = fully_decode_reserved_expansion;
    m_fully_decode_reserved_expansion_isSet = true;
}

bool OAIHttp::is_fully_decode_reserved_expansion_Set() const{
    return m_fully_decode_reserved_expansion_isSet;
}

bool OAIHttp::is_fully_decode_reserved_expansion_Valid() const{
    return m_fully_decode_reserved_expansion_isValid;
}

QList<OAIHttpRule> OAIHttp::getRules() const {
    return m_rules;
}
void OAIHttp::setRules(const QList<OAIHttpRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIHttp::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIHttp::is_rules_Valid() const{
    return m_rules_isValid;
}

bool OAIHttp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fully_decode_reserved_expansion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
