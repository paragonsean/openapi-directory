/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITenantResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITenantResource::OAITenantResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITenantResource::OAITenantResource() {
    this->initializeModel();
}

OAITenantResource::~OAITenantResource() {}

void OAITenantResource::initializeModel() {

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAITenantResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITenantResource::fromJsonObject(QJsonObject json) {

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAITenantResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITenantResource::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

QString OAITenantResource::getResource() const {
    return m_resource;
}
void OAITenantResource::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAITenantResource::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAITenantResource::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAITenantResource::getStatus() const {
    return m_status;
}
void OAITenantResource::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITenantResource::is_status_Set() const{
    return m_status_isSet;
}

bool OAITenantResource::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITenantResource::getTag() const {
    return m_tag;
}
void OAITenantResource::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAITenantResource::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAITenantResource::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAITenantResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITenantResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
