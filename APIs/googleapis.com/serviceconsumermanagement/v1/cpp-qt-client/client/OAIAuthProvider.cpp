/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthProvider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthProvider::OAIAuthProvider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthProvider::OAIAuthProvider() {
    this->initializeModel();
}

OAIAuthProvider::~OAIAuthProvider() {}

void OAIAuthProvider::initializeModel() {

    m_audiences_isSet = false;
    m_audiences_isValid = false;

    m_authorization_url_isSet = false;
    m_authorization_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_jwks_uri_isSet = false;
    m_jwks_uri_isValid = false;

    m_jwt_locations_isSet = false;
    m_jwt_locations_isValid = false;
}

void OAIAuthProvider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthProvider::fromJsonObject(QJsonObject json) {

    m_audiences_isValid = ::OpenAPI::fromJsonValue(m_audiences, json[QString("audiences")]);
    m_audiences_isSet = !json[QString("audiences")].isNull() && m_audiences_isValid;

    m_authorization_url_isValid = ::OpenAPI::fromJsonValue(m_authorization_url, json[QString("authorizationUrl")]);
    m_authorization_url_isSet = !json[QString("authorizationUrl")].isNull() && m_authorization_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_jwks_uri_isValid = ::OpenAPI::fromJsonValue(m_jwks_uri, json[QString("jwksUri")]);
    m_jwks_uri_isSet = !json[QString("jwksUri")].isNull() && m_jwks_uri_isValid;

    m_jwt_locations_isValid = ::OpenAPI::fromJsonValue(m_jwt_locations, json[QString("jwtLocations")]);
    m_jwt_locations_isSet = !json[QString("jwtLocations")].isNull() && m_jwt_locations_isValid;
}

QString OAIAuthProvider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthProvider::asJsonObject() const {
    QJsonObject obj;
    if (m_audiences_isSet) {
        obj.insert(QString("audiences"), ::OpenAPI::toJsonValue(m_audiences));
    }
    if (m_authorization_url_isSet) {
        obj.insert(QString("authorizationUrl"), ::OpenAPI::toJsonValue(m_authorization_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_jwks_uri_isSet) {
        obj.insert(QString("jwksUri"), ::OpenAPI::toJsonValue(m_jwks_uri));
    }
    if (m_jwt_locations.size() > 0) {
        obj.insert(QString("jwtLocations"), ::OpenAPI::toJsonValue(m_jwt_locations));
    }
    return obj;
}

QString OAIAuthProvider::getAudiences() const {
    return m_audiences;
}
void OAIAuthProvider::setAudiences(const QString &audiences) {
    m_audiences = audiences;
    m_audiences_isSet = true;
}

bool OAIAuthProvider::is_audiences_Set() const{
    return m_audiences_isSet;
}

bool OAIAuthProvider::is_audiences_Valid() const{
    return m_audiences_isValid;
}

QString OAIAuthProvider::getAuthorizationUrl() const {
    return m_authorization_url;
}
void OAIAuthProvider::setAuthorizationUrl(const QString &authorization_url) {
    m_authorization_url = authorization_url;
    m_authorization_url_isSet = true;
}

bool OAIAuthProvider::is_authorization_url_Set() const{
    return m_authorization_url_isSet;
}

bool OAIAuthProvider::is_authorization_url_Valid() const{
    return m_authorization_url_isValid;
}

QString OAIAuthProvider::getId() const {
    return m_id;
}
void OAIAuthProvider::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAuthProvider::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAuthProvider::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAuthProvider::getIssuer() const {
    return m_issuer;
}
void OAIAuthProvider::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIAuthProvider::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIAuthProvider::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIAuthProvider::getJwksUri() const {
    return m_jwks_uri;
}
void OAIAuthProvider::setJwksUri(const QString &jwks_uri) {
    m_jwks_uri = jwks_uri;
    m_jwks_uri_isSet = true;
}

bool OAIAuthProvider::is_jwks_uri_Set() const{
    return m_jwks_uri_isSet;
}

bool OAIAuthProvider::is_jwks_uri_Valid() const{
    return m_jwks_uri_isValid;
}

QList<OAIJwtLocation> OAIAuthProvider::getJwtLocations() const {
    return m_jwt_locations;
}
void OAIAuthProvider::setJwtLocations(const QList<OAIJwtLocation> &jwt_locations) {
    m_jwt_locations = jwt_locations;
    m_jwt_locations_isSet = true;
}

bool OAIAuthProvider::is_jwt_locations_Set() const{
    return m_jwt_locations_isSet;
}

bool OAIAuthProvider::is_jwt_locations_Valid() const{
    return m_jwt_locations_isValid;
}

bool OAIAuthProvider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audiences_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwks_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwt_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthProvider::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
