/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticationRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticationRule::OAIAuthenticationRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticationRule::OAIAuthenticationRule() {
    this->initializeModel();
}

OAIAuthenticationRule::~OAIAuthenticationRule() {}

void OAIAuthenticationRule::initializeModel() {

    m_allow_without_credential_isSet = false;
    m_allow_without_credential_isValid = false;

    m_oauth_isSet = false;
    m_oauth_isValid = false;

    m_requirements_isSet = false;
    m_requirements_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;
}

void OAIAuthenticationRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticationRule::fromJsonObject(QJsonObject json) {

    m_allow_without_credential_isValid = ::OpenAPI::fromJsonValue(m_allow_without_credential, json[QString("allowWithoutCredential")]);
    m_allow_without_credential_isSet = !json[QString("allowWithoutCredential")].isNull() && m_allow_without_credential_isValid;

    m_oauth_isValid = ::OpenAPI::fromJsonValue(m_oauth, json[QString("oauth")]);
    m_oauth_isSet = !json[QString("oauth")].isNull() && m_oauth_isValid;

    m_requirements_isValid = ::OpenAPI::fromJsonValue(m_requirements, json[QString("requirements")]);
    m_requirements_isSet = !json[QString("requirements")].isNull() && m_requirements_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;
}

QString OAIAuthenticationRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticationRule::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_without_credential_isSet) {
        obj.insert(QString("allowWithoutCredential"), ::OpenAPI::toJsonValue(m_allow_without_credential));
    }
    if (m_oauth.isSet()) {
        obj.insert(QString("oauth"), ::OpenAPI::toJsonValue(m_oauth));
    }
    if (m_requirements.size() > 0) {
        obj.insert(QString("requirements"), ::OpenAPI::toJsonValue(m_requirements));
    }
    if (m_selector_isSet) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    return obj;
}

bool OAIAuthenticationRule::isAllowWithoutCredential() const {
    return m_allow_without_credential;
}
void OAIAuthenticationRule::setAllowWithoutCredential(const bool &allow_without_credential) {
    m_allow_without_credential = allow_without_credential;
    m_allow_without_credential_isSet = true;
}

bool OAIAuthenticationRule::is_allow_without_credential_Set() const{
    return m_allow_without_credential_isSet;
}

bool OAIAuthenticationRule::is_allow_without_credential_Valid() const{
    return m_allow_without_credential_isValid;
}

OAIOAuthRequirements OAIAuthenticationRule::getOauth() const {
    return m_oauth;
}
void OAIAuthenticationRule::setOauth(const OAIOAuthRequirements &oauth) {
    m_oauth = oauth;
    m_oauth_isSet = true;
}

bool OAIAuthenticationRule::is_oauth_Set() const{
    return m_oauth_isSet;
}

bool OAIAuthenticationRule::is_oauth_Valid() const{
    return m_oauth_isValid;
}

QList<OAIAuthRequirement> OAIAuthenticationRule::getRequirements() const {
    return m_requirements;
}
void OAIAuthenticationRule::setRequirements(const QList<OAIAuthRequirement> &requirements) {
    m_requirements = requirements;
    m_requirements_isSet = true;
}

bool OAIAuthenticationRule::is_requirements_Set() const{
    return m_requirements_isSet;
}

bool OAIAuthenticationRule::is_requirements_Valid() const{
    return m_requirements_isValid;
}

QString OAIAuthenticationRule::getSelector() const {
    return m_selector;
}
void OAIAuthenticationRule::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIAuthenticationRule::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIAuthenticationRule::is_selector_Valid() const{
    return m_selector_isValid;
}

bool OAIAuthenticationRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_without_credential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requirements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticationRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
