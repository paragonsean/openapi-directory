/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpRule::OAIHttpRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpRule::OAIHttpRule() {
    this->initializeModel();
}

OAIHttpRule::~OAIHttpRule() {}

void OAIHttpRule::initializeModel() {

    m_additional_bindings_isSet = false;
    m_additional_bindings_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_r_delete_isSet = false;
    m_r_delete_isValid = false;

    m_get_isSet = false;
    m_get_isValid = false;

    m_patch_isSet = false;
    m_patch_isValid = false;

    m_post_isSet = false;
    m_post_isValid = false;

    m_put_isSet = false;
    m_put_isValid = false;

    m_response_body_isSet = false;
    m_response_body_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;
}

void OAIHttpRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpRule::fromJsonObject(QJsonObject json) {

    m_additional_bindings_isValid = ::OpenAPI::fromJsonValue(m_additional_bindings, json[QString("additionalBindings")]);
    m_additional_bindings_isSet = !json[QString("additionalBindings")].isNull() && m_additional_bindings_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_r_delete_isValid = ::OpenAPI::fromJsonValue(m_r_delete, json[QString("delete")]);
    m_r_delete_isSet = !json[QString("delete")].isNull() && m_r_delete_isValid;

    m_get_isValid = ::OpenAPI::fromJsonValue(m_get, json[QString("get")]);
    m_get_isSet = !json[QString("get")].isNull() && m_get_isValid;

    m_patch_isValid = ::OpenAPI::fromJsonValue(m_patch, json[QString("patch")]);
    m_patch_isSet = !json[QString("patch")].isNull() && m_patch_isValid;

    m_post_isValid = ::OpenAPI::fromJsonValue(m_post, json[QString("post")]);
    m_post_isSet = !json[QString("post")].isNull() && m_post_isValid;

    m_put_isValid = ::OpenAPI::fromJsonValue(m_put, json[QString("put")]);
    m_put_isSet = !json[QString("put")].isNull() && m_put_isValid;

    m_response_body_isValid = ::OpenAPI::fromJsonValue(m_response_body, json[QString("responseBody")]);
    m_response_body_isSet = !json[QString("responseBody")].isNull() && m_response_body_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;
}

QString OAIHttpRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpRule::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_bindings.size() > 0) {
        obj.insert(QString("additionalBindings"), ::OpenAPI::toJsonValue(m_additional_bindings));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_custom.isSet()) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_r_delete_isSet) {
        obj.insert(QString("delete"), ::OpenAPI::toJsonValue(m_r_delete));
    }
    if (m_get_isSet) {
        obj.insert(QString("get"), ::OpenAPI::toJsonValue(m_get));
    }
    if (m_patch_isSet) {
        obj.insert(QString("patch"), ::OpenAPI::toJsonValue(m_patch));
    }
    if (m_post_isSet) {
        obj.insert(QString("post"), ::OpenAPI::toJsonValue(m_post));
    }
    if (m_put_isSet) {
        obj.insert(QString("put"), ::OpenAPI::toJsonValue(m_put));
    }
    if (m_response_body_isSet) {
        obj.insert(QString("responseBody"), ::OpenAPI::toJsonValue(m_response_body));
    }
    if (m_selector_isSet) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    return obj;
}

QList<OAIHttpRule> OAIHttpRule::getAdditionalBindings() const {
    return m_additional_bindings;
}
void OAIHttpRule::setAdditionalBindings(const QList<OAIHttpRule> &additional_bindings) {
    m_additional_bindings = additional_bindings;
    m_additional_bindings_isSet = true;
}

bool OAIHttpRule::is_additional_bindings_Set() const{
    return m_additional_bindings_isSet;
}

bool OAIHttpRule::is_additional_bindings_Valid() const{
    return m_additional_bindings_isValid;
}

QString OAIHttpRule::getBody() const {
    return m_body;
}
void OAIHttpRule::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIHttpRule::is_body_Set() const{
    return m_body_isSet;
}

bool OAIHttpRule::is_body_Valid() const{
    return m_body_isValid;
}

OAICustomHttpPattern OAIHttpRule::getCustom() const {
    return m_custom;
}
void OAIHttpRule::setCustom(const OAICustomHttpPattern &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAIHttpRule::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAIHttpRule::is_custom_Valid() const{
    return m_custom_isValid;
}

QString OAIHttpRule::getRDelete() const {
    return m_r_delete;
}
void OAIHttpRule::setRDelete(const QString &r_delete) {
    m_r_delete = r_delete;
    m_r_delete_isSet = true;
}

bool OAIHttpRule::is_r_delete_Set() const{
    return m_r_delete_isSet;
}

bool OAIHttpRule::is_r_delete_Valid() const{
    return m_r_delete_isValid;
}

QString OAIHttpRule::getGet() const {
    return m_get;
}
void OAIHttpRule::setGet(const QString &get) {
    m_get = get;
    m_get_isSet = true;
}

bool OAIHttpRule::is_get_Set() const{
    return m_get_isSet;
}

bool OAIHttpRule::is_get_Valid() const{
    return m_get_isValid;
}

QString OAIHttpRule::getPatch() const {
    return m_patch;
}
void OAIHttpRule::setPatch(const QString &patch) {
    m_patch = patch;
    m_patch_isSet = true;
}

bool OAIHttpRule::is_patch_Set() const{
    return m_patch_isSet;
}

bool OAIHttpRule::is_patch_Valid() const{
    return m_patch_isValid;
}

QString OAIHttpRule::getPost() const {
    return m_post;
}
void OAIHttpRule::setPost(const QString &post) {
    m_post = post;
    m_post_isSet = true;
}

bool OAIHttpRule::is_post_Set() const{
    return m_post_isSet;
}

bool OAIHttpRule::is_post_Valid() const{
    return m_post_isValid;
}

QString OAIHttpRule::getPut() const {
    return m_put;
}
void OAIHttpRule::setPut(const QString &put) {
    m_put = put;
    m_put_isSet = true;
}

bool OAIHttpRule::is_put_Set() const{
    return m_put_isSet;
}

bool OAIHttpRule::is_put_Valid() const{
    return m_put_isValid;
}

QString OAIHttpRule::getResponseBody() const {
    return m_response_body;
}
void OAIHttpRule::setResponseBody(const QString &response_body) {
    m_response_body = response_body;
    m_response_body_isSet = true;
}

bool OAIHttpRule::is_response_body_Set() const{
    return m_response_body_isSet;
}

bool OAIHttpRule::is_response_body_Valid() const{
    return m_response_body_isValid;
}

QString OAIHttpRule::getSelector() const {
    return m_selector;
}
void OAIHttpRule::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIHttpRule::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIHttpRule::is_selector_Valid() const{
    return m_selector_isValid;
}

bool OAIHttpRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_bindings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_get_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_put_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
