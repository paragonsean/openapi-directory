/*
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BillingConfig;
import org.openapitools.client.model.ServiceAccountConfig;
import org.openapitools.client.model.TenantProjectPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This structure defines a tenant project to be added to the specified tenancy unit and its initial configuration and properties. A project lien is created for the tenant project to prevent the tenant project from being deleted accidentally. The lien is deleted as part of tenant project removal.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:19.968058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TenantProjectConfig {
  public static final String SERIALIZED_NAME_BILLING_CONFIG = "billingConfig";
  @SerializedName(SERIALIZED_NAME_BILLING_CONFIG)
  private BillingConfig billingConfig;

  public static final String SERIALIZED_NAME_FOLDER = "folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private String folder;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_CONFIG = "serviceAccountConfig";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_CONFIG)
  private ServiceAccountConfig serviceAccountConfig;

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<String> services = new ArrayList<>();

  public static final String SERIALIZED_NAME_TENANT_PROJECT_POLICY = "tenantProjectPolicy";
  @SerializedName(SERIALIZED_NAME_TENANT_PROJECT_POLICY)
  private TenantProjectPolicy tenantProjectPolicy;

  public TenantProjectConfig() {
  }

  public TenantProjectConfig billingConfig(BillingConfig billingConfig) {
    this.billingConfig = billingConfig;
    return this;
  }

  /**
   * Get billingConfig
   * @return billingConfig
   */
  @javax.annotation.Nullable
  public BillingConfig getBillingConfig() {
    return billingConfig;
  }

  public void setBillingConfig(BillingConfig billingConfig) {
    this.billingConfig = billingConfig;
  }


  public TenantProjectConfig folder(String folder) {
    this.folder = folder;
    return this;
  }

  /**
   * Folder where project in this tenancy unit must be located This folder must have been previously created with the required permissions for the caller to create and configure a project in it. Valid folder resource names have the format &#x60;folders/{folder_number}&#x60; (for example, &#x60;folders/123456&#x60;).
   * @return folder
   */
  @javax.annotation.Nullable
  public String getFolder() {
    return folder;
  }

  public void setFolder(String folder) {
    this.folder = folder;
  }


  public TenantProjectConfig labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public TenantProjectConfig putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels that are applied to this project.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public TenantProjectConfig serviceAccountConfig(ServiceAccountConfig serviceAccountConfig) {
    this.serviceAccountConfig = serviceAccountConfig;
    return this;
  }

  /**
   * Get serviceAccountConfig
   * @return serviceAccountConfig
   */
  @javax.annotation.Nullable
  public ServiceAccountConfig getServiceAccountConfig() {
    return serviceAccountConfig;
  }

  public void setServiceAccountConfig(ServiceAccountConfig serviceAccountConfig) {
    this.serviceAccountConfig = serviceAccountConfig;
  }


  public TenantProjectConfig services(List<String> services) {
    this.services = services;
    return this;
  }

  public TenantProjectConfig addServicesItem(String servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

  /**
   * Google Cloud API names of services that are activated on this project during provisioning. If any of these services can&#39;t be activated, the request fails. For example: &#39;compute.googleapis.com&#39;,&#39;cloudfunctions.googleapis.com&#39;
   * @return services
   */
  @javax.annotation.Nullable
  public List<String> getServices() {
    return services;
  }

  public void setServices(List<String> services) {
    this.services = services;
  }


  public TenantProjectConfig tenantProjectPolicy(TenantProjectPolicy tenantProjectPolicy) {
    this.tenantProjectPolicy = tenantProjectPolicy;
    return this;
  }

  /**
   * Get tenantProjectPolicy
   * @return tenantProjectPolicy
   */
  @javax.annotation.Nullable
  public TenantProjectPolicy getTenantProjectPolicy() {
    return tenantProjectPolicy;
  }

  public void setTenantProjectPolicy(TenantProjectPolicy tenantProjectPolicy) {
    this.tenantProjectPolicy = tenantProjectPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TenantProjectConfig tenantProjectConfig = (TenantProjectConfig) o;
    return Objects.equals(this.billingConfig, tenantProjectConfig.billingConfig) &&
        Objects.equals(this.folder, tenantProjectConfig.folder) &&
        Objects.equals(this.labels, tenantProjectConfig.labels) &&
        Objects.equals(this.serviceAccountConfig, tenantProjectConfig.serviceAccountConfig) &&
        Objects.equals(this.services, tenantProjectConfig.services) &&
        Objects.equals(this.tenantProjectPolicy, tenantProjectConfig.tenantProjectPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingConfig, folder, labels, serviceAccountConfig, services, tenantProjectPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TenantProjectConfig {\n");
    sb.append("    billingConfig: ").append(toIndentedString(billingConfig)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    serviceAccountConfig: ").append(toIndentedString(serviceAccountConfig)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    tenantProjectPolicy: ").append(toIndentedString(tenantProjectPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingConfig");
    openapiFields.add("folder");
    openapiFields.add("labels");
    openapiFields.add("serviceAccountConfig");
    openapiFields.add("services");
    openapiFields.add("tenantProjectPolicy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TenantProjectConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TenantProjectConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TenantProjectConfig is not found in the empty JSON string", TenantProjectConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TenantProjectConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TenantProjectConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingConfig`
      if (jsonObj.get("billingConfig") != null && !jsonObj.get("billingConfig").isJsonNull()) {
        BillingConfig.validateJsonElement(jsonObj.get("billingConfig"));
      }
      if ((jsonObj.get("folder") != null && !jsonObj.get("folder").isJsonNull()) && !jsonObj.get("folder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folder").toString()));
      }
      // validate the optional field `serviceAccountConfig`
      if (jsonObj.get("serviceAccountConfig") != null && !jsonObj.get("serviceAccountConfig").isJsonNull()) {
        ServiceAccountConfig.validateJsonElement(jsonObj.get("serviceAccountConfig"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull() && !jsonObj.get("services").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
      }
      // validate the optional field `tenantProjectPolicy`
      if (jsonObj.get("tenantProjectPolicy") != null && !jsonObj.get("tenantProjectPolicy").isJsonNull()) {
        TenantProjectPolicy.validateJsonElement(jsonObj.get("tenantProjectPolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TenantProjectConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TenantProjectConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TenantProjectConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TenantProjectConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<TenantProjectConfig>() {
           @Override
           public void write(JsonWriter out, TenantProjectConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TenantProjectConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TenantProjectConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TenantProjectConfig
   * @throws IOException if the JSON string is invalid with respect to TenantProjectConfig
   */
  public static TenantProjectConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TenantProjectConfig.class);
  }

  /**
   * Convert an instance of TenantProjectConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

