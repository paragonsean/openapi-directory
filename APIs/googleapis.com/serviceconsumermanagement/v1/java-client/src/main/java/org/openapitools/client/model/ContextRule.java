/*
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A context rule provides information about the context for an individual API element.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:19.968058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContextRule {
  public static final String SERIALIZED_NAME_ALLOWED_REQUEST_EXTENSIONS = "allowedRequestExtensions";
  @SerializedName(SERIALIZED_NAME_ALLOWED_REQUEST_EXTENSIONS)
  private List<String> allowedRequestExtensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_RESPONSE_EXTENSIONS = "allowedResponseExtensions";
  @SerializedName(SERIALIZED_NAME_ALLOWED_RESPONSE_EXTENSIONS)
  private List<String> allowedResponseExtensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDED = "provided";
  @SerializedName(SERIALIZED_NAME_PROVIDED)
  private List<String> provided = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUESTED = "requested";
  @SerializedName(SERIALIZED_NAME_REQUESTED)
  private List<String> requested = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private String selector;

  public ContextRule() {
  }

  public ContextRule allowedRequestExtensions(List<String> allowedRequestExtensions) {
    this.allowedRequestExtensions = allowedRequestExtensions;
    return this;
  }

  public ContextRule addAllowedRequestExtensionsItem(String allowedRequestExtensionsItem) {
    if (this.allowedRequestExtensions == null) {
      this.allowedRequestExtensions = new ArrayList<>();
    }
    this.allowedRequestExtensions.add(allowedRequestExtensionsItem);
    return this;
  }

  /**
   * A list of full type names or extension IDs of extensions allowed in grpc side channel from client to backend.
   * @return allowedRequestExtensions
   */
  @javax.annotation.Nullable
  public List<String> getAllowedRequestExtensions() {
    return allowedRequestExtensions;
  }

  public void setAllowedRequestExtensions(List<String> allowedRequestExtensions) {
    this.allowedRequestExtensions = allowedRequestExtensions;
  }


  public ContextRule allowedResponseExtensions(List<String> allowedResponseExtensions) {
    this.allowedResponseExtensions = allowedResponseExtensions;
    return this;
  }

  public ContextRule addAllowedResponseExtensionsItem(String allowedResponseExtensionsItem) {
    if (this.allowedResponseExtensions == null) {
      this.allowedResponseExtensions = new ArrayList<>();
    }
    this.allowedResponseExtensions.add(allowedResponseExtensionsItem);
    return this;
  }

  /**
   * A list of full type names or extension IDs of extensions allowed in grpc side channel from backend to client.
   * @return allowedResponseExtensions
   */
  @javax.annotation.Nullable
  public List<String> getAllowedResponseExtensions() {
    return allowedResponseExtensions;
  }

  public void setAllowedResponseExtensions(List<String> allowedResponseExtensions) {
    this.allowedResponseExtensions = allowedResponseExtensions;
  }


  public ContextRule provided(List<String> provided) {
    this.provided = provided;
    return this;
  }

  public ContextRule addProvidedItem(String providedItem) {
    if (this.provided == null) {
      this.provided = new ArrayList<>();
    }
    this.provided.add(providedItem);
    return this;
  }

  /**
   * A list of full type names of provided contexts.
   * @return provided
   */
  @javax.annotation.Nullable
  public List<String> getProvided() {
    return provided;
  }

  public void setProvided(List<String> provided) {
    this.provided = provided;
  }


  public ContextRule requested(List<String> requested) {
    this.requested = requested;
    return this;
  }

  public ContextRule addRequestedItem(String requestedItem) {
    if (this.requested == null) {
      this.requested = new ArrayList<>();
    }
    this.requested.add(requestedItem);
    return this;
  }

  /**
   * A list of full type names of requested contexts.
   * @return requested
   */
  @javax.annotation.Nullable
  public List<String> getRequested() {
    return requested;
  }

  public void setRequested(List<String> requested) {
    this.requested = requested;
  }


  public ContextRule selector(String selector) {
    this.selector = selector;
    return this;
  }

  /**
   * Selects the methods to which this rule applies. Refer to selector for syntax details.
   * @return selector
   */
  @javax.annotation.Nullable
  public String getSelector() {
    return selector;
  }

  public void setSelector(String selector) {
    this.selector = selector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContextRule contextRule = (ContextRule) o;
    return Objects.equals(this.allowedRequestExtensions, contextRule.allowedRequestExtensions) &&
        Objects.equals(this.allowedResponseExtensions, contextRule.allowedResponseExtensions) &&
        Objects.equals(this.provided, contextRule.provided) &&
        Objects.equals(this.requested, contextRule.requested) &&
        Objects.equals(this.selector, contextRule.selector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedRequestExtensions, allowedResponseExtensions, provided, requested, selector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContextRule {\n");
    sb.append("    allowedRequestExtensions: ").append(toIndentedString(allowedRequestExtensions)).append("\n");
    sb.append("    allowedResponseExtensions: ").append(toIndentedString(allowedResponseExtensions)).append("\n");
    sb.append("    provided: ").append(toIndentedString(provided)).append("\n");
    sb.append("    requested: ").append(toIndentedString(requested)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedRequestExtensions");
    openapiFields.add("allowedResponseExtensions");
    openapiFields.add("provided");
    openapiFields.add("requested");
    openapiFields.add("selector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContextRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContextRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContextRule is not found in the empty JSON string", ContextRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContextRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContextRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedRequestExtensions") != null && !jsonObj.get("allowedRequestExtensions").isJsonNull() && !jsonObj.get("allowedRequestExtensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedRequestExtensions` to be an array in the JSON string but got `%s`", jsonObj.get("allowedRequestExtensions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedResponseExtensions") != null && !jsonObj.get("allowedResponseExtensions").isJsonNull() && !jsonObj.get("allowedResponseExtensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedResponseExtensions` to be an array in the JSON string but got `%s`", jsonObj.get("allowedResponseExtensions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("provided") != null && !jsonObj.get("provided").isJsonNull() && !jsonObj.get("provided").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `provided` to be an array in the JSON string but got `%s`", jsonObj.get("provided").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requested") != null && !jsonObj.get("requested").isJsonNull() && !jsonObj.get("requested").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requested` to be an array in the JSON string but got `%s`", jsonObj.get("requested").toString()));
      }
      if ((jsonObj.get("selector") != null && !jsonObj.get("selector").isJsonNull()) && !jsonObj.get("selector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selector").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContextRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContextRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContextRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContextRule.class));

       return (TypeAdapter<T>) new TypeAdapter<ContextRule>() {
           @Override
           public void write(JsonWriter out, ContextRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContextRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContextRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContextRule
   * @throws IOException if the JSON string is invalid with respect to ContextRule
   */
  public static ContextRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContextRule.class);
  }

  /**
   * Convert an instance of ContextRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

