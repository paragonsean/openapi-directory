/*
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes settings to use when generating API methods that use the long-running operation pattern. All default values below are from those used in the client library generators (e.g. [Java](https://github.com/googleapis/gapic-generator-java/blob/04c2faa191a9b5a10b92392fe8482279c4404803/src/main/java/com/google/api/generator/gapic/composer/common/RetrySettingsComposer.java)).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:19.968058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LongRunning {
  public static final String SERIALIZED_NAME_INITIAL_POLL_DELAY = "initialPollDelay";
  @SerializedName(SERIALIZED_NAME_INITIAL_POLL_DELAY)
  private String initialPollDelay;

  public static final String SERIALIZED_NAME_MAX_POLL_DELAY = "maxPollDelay";
  @SerializedName(SERIALIZED_NAME_MAX_POLL_DELAY)
  private String maxPollDelay;

  public static final String SERIALIZED_NAME_POLL_DELAY_MULTIPLIER = "pollDelayMultiplier";
  @SerializedName(SERIALIZED_NAME_POLL_DELAY_MULTIPLIER)
  private Float pollDelayMultiplier;

  public static final String SERIALIZED_NAME_TOTAL_POLL_TIMEOUT = "totalPollTimeout";
  @SerializedName(SERIALIZED_NAME_TOTAL_POLL_TIMEOUT)
  private String totalPollTimeout;

  public LongRunning() {
  }

  public LongRunning initialPollDelay(String initialPollDelay) {
    this.initialPollDelay = initialPollDelay;
    return this;
  }

  /**
   * Initial delay after which the first poll request will be made. Default value: 5 seconds.
   * @return initialPollDelay
   */
  @javax.annotation.Nullable
  public String getInitialPollDelay() {
    return initialPollDelay;
  }

  public void setInitialPollDelay(String initialPollDelay) {
    this.initialPollDelay = initialPollDelay;
  }


  public LongRunning maxPollDelay(String maxPollDelay) {
    this.maxPollDelay = maxPollDelay;
    return this;
  }

  /**
   * Maximum time between two subsequent poll requests. Default value: 45 seconds.
   * @return maxPollDelay
   */
  @javax.annotation.Nullable
  public String getMaxPollDelay() {
    return maxPollDelay;
  }

  public void setMaxPollDelay(String maxPollDelay) {
    this.maxPollDelay = maxPollDelay;
  }


  public LongRunning pollDelayMultiplier(Float pollDelayMultiplier) {
    this.pollDelayMultiplier = pollDelayMultiplier;
    return this;
  }

  /**
   * Multiplier to gradually increase delay between subsequent polls until it reaches max_poll_delay. Default value: 1.5.
   * @return pollDelayMultiplier
   */
  @javax.annotation.Nullable
  public Float getPollDelayMultiplier() {
    return pollDelayMultiplier;
  }

  public void setPollDelayMultiplier(Float pollDelayMultiplier) {
    this.pollDelayMultiplier = pollDelayMultiplier;
  }


  public LongRunning totalPollTimeout(String totalPollTimeout) {
    this.totalPollTimeout = totalPollTimeout;
    return this;
  }

  /**
   * Total polling timeout. Default value: 5 minutes.
   * @return totalPollTimeout
   */
  @javax.annotation.Nullable
  public String getTotalPollTimeout() {
    return totalPollTimeout;
  }

  public void setTotalPollTimeout(String totalPollTimeout) {
    this.totalPollTimeout = totalPollTimeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LongRunning longRunning = (LongRunning) o;
    return Objects.equals(this.initialPollDelay, longRunning.initialPollDelay) &&
        Objects.equals(this.maxPollDelay, longRunning.maxPollDelay) &&
        Objects.equals(this.pollDelayMultiplier, longRunning.pollDelayMultiplier) &&
        Objects.equals(this.totalPollTimeout, longRunning.totalPollTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(initialPollDelay, maxPollDelay, pollDelayMultiplier, totalPollTimeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LongRunning {\n");
    sb.append("    initialPollDelay: ").append(toIndentedString(initialPollDelay)).append("\n");
    sb.append("    maxPollDelay: ").append(toIndentedString(maxPollDelay)).append("\n");
    sb.append("    pollDelayMultiplier: ").append(toIndentedString(pollDelayMultiplier)).append("\n");
    sb.append("    totalPollTimeout: ").append(toIndentedString(totalPollTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("initialPollDelay");
    openapiFields.add("maxPollDelay");
    openapiFields.add("pollDelayMultiplier");
    openapiFields.add("totalPollTimeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LongRunning
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LongRunning.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LongRunning is not found in the empty JSON string", LongRunning.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LongRunning.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LongRunning` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("initialPollDelay") != null && !jsonObj.get("initialPollDelay").isJsonNull()) && !jsonObj.get("initialPollDelay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initialPollDelay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initialPollDelay").toString()));
      }
      if ((jsonObj.get("maxPollDelay") != null && !jsonObj.get("maxPollDelay").isJsonNull()) && !jsonObj.get("maxPollDelay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxPollDelay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxPollDelay").toString()));
      }
      if ((jsonObj.get("totalPollTimeout") != null && !jsonObj.get("totalPollTimeout").isJsonNull()) && !jsonObj.get("totalPollTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalPollTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalPollTimeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LongRunning.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LongRunning' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LongRunning> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LongRunning.class));

       return (TypeAdapter<T>) new TypeAdapter<LongRunning>() {
           @Override
           public void write(JsonWriter out, LongRunning value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LongRunning read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LongRunning given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LongRunning
   * @throws IOException if the JSON string is invalid with respect to LongRunning
   */
  public static LongRunning fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LongRunning.class);
  }

  /**
   * Convert an instance of LongRunning to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

