/*
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TenantResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Representation of a tenancy unit.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:19.968058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TenancyUnit {
  public static final String SERIALIZED_NAME_CONSUMER = "consumer";
  @SerializedName(SERIALIZED_NAME_CONSUMER)
  private String consumer;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_TENANT_RESOURCES = "tenantResources";
  @SerializedName(SERIALIZED_NAME_TENANT_RESOURCES)
  private List<TenantResource> tenantResources = new ArrayList<>();

  public TenancyUnit() {
  }

  public TenancyUnit(
     String consumer, 
     String createTime, 
     String service
  ) {
    this();
    this.consumer = consumer;
    this.createTime = createTime;
    this.service = service;
  }

  /**
   * Output only. @OutputOnly Cloud resource name of the consumer of this service. For example &#39;projects/123456&#39;.
   * @return consumer
   */
  @javax.annotation.Nullable
  public String getConsumer() {
    return consumer;
  }



  /**
   * Output only. @OutputOnly The time this tenancy unit was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public TenancyUnit name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Globally unique identifier of this tenancy unit \&quot;services/{service}/{collection id}/{resource id}/tenancyUnits/{unit}\&quot;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Google Cloud API name of the managed service owning this tenancy unit. For example &#39;serviceconsumermanagement.googleapis.com&#39;.
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }



  public TenancyUnit tenantResources(List<TenantResource> tenantResources) {
    this.tenantResources = tenantResources;
    return this;
  }

  public TenancyUnit addTenantResourcesItem(TenantResource tenantResourcesItem) {
    if (this.tenantResources == null) {
      this.tenantResources = new ArrayList<>();
    }
    this.tenantResources.add(tenantResourcesItem);
    return this;
  }

  /**
   * Resources constituting the tenancy unit. There can be at most 512 tenant resources in a tenancy unit.
   * @return tenantResources
   */
  @javax.annotation.Nullable
  public List<TenantResource> getTenantResources() {
    return tenantResources;
  }

  public void setTenantResources(List<TenantResource> tenantResources) {
    this.tenantResources = tenantResources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TenancyUnit tenancyUnit = (TenancyUnit) o;
    return Objects.equals(this.consumer, tenancyUnit.consumer) &&
        Objects.equals(this.createTime, tenancyUnit.createTime) &&
        Objects.equals(this.name, tenancyUnit.name) &&
        Objects.equals(this.service, tenancyUnit.service) &&
        Objects.equals(this.tenantResources, tenancyUnit.tenantResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumer, createTime, name, service, tenantResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TenancyUnit {\n");
    sb.append("    consumer: ").append(toIndentedString(consumer)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    tenantResources: ").append(toIndentedString(tenantResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumer");
    openapiFields.add("createTime");
    openapiFields.add("name");
    openapiFields.add("service");
    openapiFields.add("tenantResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TenancyUnit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TenancyUnit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TenancyUnit is not found in the empty JSON string", TenancyUnit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TenancyUnit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TenancyUnit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consumer") != null && !jsonObj.get("consumer").isJsonNull()) && !jsonObj.get("consumer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumer").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
      if (jsonObj.get("tenantResources") != null && !jsonObj.get("tenantResources").isJsonNull()) {
        JsonArray jsonArraytenantResources = jsonObj.getAsJsonArray("tenantResources");
        if (jsonArraytenantResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tenantResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tenantResources` to be an array in the JSON string but got `%s`", jsonObj.get("tenantResources").toString()));
          }

          // validate the optional field `tenantResources` (array)
          for (int i = 0; i < jsonArraytenantResources.size(); i++) {
            TenantResource.validateJsonElement(jsonArraytenantResources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TenancyUnit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TenancyUnit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TenancyUnit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TenancyUnit.class));

       return (TypeAdapter<T>) new TypeAdapter<TenancyUnit>() {
           @Override
           public void write(JsonWriter out, TenancyUnit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TenancyUnit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TenancyUnit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TenancyUnit
   * @throws IOException if the JSON string is invalid with respect to TenancyUnit
   */
  public static TenancyUnit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TenancyUnit.class);
  }

  /**
   * Convert an instance of TenancyUnit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

