/*
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Define a parameter&#39;s name and location. The parameter may be passed as either an HTTP header or a URL query parameter, and if both are passed the behavior is implementation-dependent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:19.968058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SystemParameter {
  public static final String SERIALIZED_NAME_HTTP_HEADER = "httpHeader";
  @SerializedName(SERIALIZED_NAME_HTTP_HEADER)
  private String httpHeader;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_URL_QUERY_PARAMETER = "urlQueryParameter";
  @SerializedName(SERIALIZED_NAME_URL_QUERY_PARAMETER)
  private String urlQueryParameter;

  public SystemParameter() {
  }

  public SystemParameter httpHeader(String httpHeader) {
    this.httpHeader = httpHeader;
    return this;
  }

  /**
   * Define the HTTP header name to use for the parameter. It is case insensitive.
   * @return httpHeader
   */
  @javax.annotation.Nullable
  public String getHttpHeader() {
    return httpHeader;
  }

  public void setHttpHeader(String httpHeader) {
    this.httpHeader = httpHeader;
  }


  public SystemParameter name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Define the name of the parameter, such as \&quot;api_key\&quot; . It is case sensitive.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SystemParameter urlQueryParameter(String urlQueryParameter) {
    this.urlQueryParameter = urlQueryParameter;
    return this;
  }

  /**
   * Define the URL query parameter name to use for the parameter. It is case sensitive.
   * @return urlQueryParameter
   */
  @javax.annotation.Nullable
  public String getUrlQueryParameter() {
    return urlQueryParameter;
  }

  public void setUrlQueryParameter(String urlQueryParameter) {
    this.urlQueryParameter = urlQueryParameter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemParameter systemParameter = (SystemParameter) o;
    return Objects.equals(this.httpHeader, systemParameter.httpHeader) &&
        Objects.equals(this.name, systemParameter.name) &&
        Objects.equals(this.urlQueryParameter, systemParameter.urlQueryParameter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpHeader, name, urlQueryParameter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemParameter {\n");
    sb.append("    httpHeader: ").append(toIndentedString(httpHeader)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    urlQueryParameter: ").append(toIndentedString(urlQueryParameter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("httpHeader");
    openapiFields.add("name");
    openapiFields.add("urlQueryParameter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SystemParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SystemParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SystemParameter is not found in the empty JSON string", SystemParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SystemParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SystemParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("httpHeader") != null && !jsonObj.get("httpHeader").isJsonNull()) && !jsonObj.get("httpHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpHeader").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("urlQueryParameter") != null && !jsonObj.get("urlQueryParameter").isJsonNull()) && !jsonObj.get("urlQueryParameter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlQueryParameter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlQueryParameter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SystemParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SystemParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SystemParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SystemParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<SystemParameter>() {
           @Override
           public void write(JsonWriter out, SystemParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SystemParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SystemParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SystemParameter
   * @throws IOException if the JSON string is invalid with respect to SystemParameter
   */
  public static SystemParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SystemParameter.class);
  }

  /**
   * Convert an instance of SystemParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

