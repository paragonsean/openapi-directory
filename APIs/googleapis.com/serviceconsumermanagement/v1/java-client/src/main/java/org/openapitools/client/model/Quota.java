/*
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricRule;
import org.openapitools.client.model.QuotaLimit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Quota configuration helps to achieve fairness and budgeting in service usage. The metric based quota configuration works this way: - The service configuration defines a set of metrics. - For API calls, the quota.metric_rules maps methods to metrics with corresponding costs. - The quota.limits defines limits on the metrics, which will be used for quota checks at runtime. An example quota configuration in yaml format: quota: limits: - name: apiWriteQpsPerProject metric: library.googleapis.com/write_calls unit: \&quot;1/min/{project}\&quot; # rate limit for consumer projects values: STANDARD: 10000 (The metric rules bind all methods to the read_calls metric, except for the UpdateBook and DeleteBook methods. These two methods are mapped to the write_calls metric, with the UpdateBook method consuming at twice rate as the DeleteBook method.) metric_rules: - selector: \&quot;*\&quot; metric_costs: library.googleapis.com/read_calls: 1 - selector: google.example.library.v1.LibraryService.UpdateBook metric_costs: library.googleapis.com/write_calls: 2 - selector: google.example.library.v1.LibraryService.DeleteBook metric_costs: library.googleapis.com/write_calls: 1 Corresponding Metric definition: metrics: - name: library.googleapis.com/read_calls display_name: Read requests metric_kind: DELTA value_type: INT64 - name: library.googleapis.com/write_calls display_name: Write requests metric_kind: DELTA value_type: INT64 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:19.968058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Quota {
  public static final String SERIALIZED_NAME_LIMITS = "limits";
  @SerializedName(SERIALIZED_NAME_LIMITS)
  private List<QuotaLimit> limits = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRIC_RULES = "metricRules";
  @SerializedName(SERIALIZED_NAME_METRIC_RULES)
  private List<MetricRule> metricRules = new ArrayList<>();

  public Quota() {
  }

  public Quota limits(List<QuotaLimit> limits) {
    this.limits = limits;
    return this;
  }

  public Quota addLimitsItem(QuotaLimit limitsItem) {
    if (this.limits == null) {
      this.limits = new ArrayList<>();
    }
    this.limits.add(limitsItem);
    return this;
  }

  /**
   * List of QuotaLimit definitions for the service.
   * @return limits
   */
  @javax.annotation.Nullable
  public List<QuotaLimit> getLimits() {
    return limits;
  }

  public void setLimits(List<QuotaLimit> limits) {
    this.limits = limits;
  }


  public Quota metricRules(List<MetricRule> metricRules) {
    this.metricRules = metricRules;
    return this;
  }

  public Quota addMetricRulesItem(MetricRule metricRulesItem) {
    if (this.metricRules == null) {
      this.metricRules = new ArrayList<>();
    }
    this.metricRules.add(metricRulesItem);
    return this;
  }

  /**
   * List of MetricRule definitions, each one mapping a selected method to one or more metrics.
   * @return metricRules
   */
  @javax.annotation.Nullable
  public List<MetricRule> getMetricRules() {
    return metricRules;
  }

  public void setMetricRules(List<MetricRule> metricRules) {
    this.metricRules = metricRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Quota quota = (Quota) o;
    return Objects.equals(this.limits, quota.limits) &&
        Objects.equals(this.metricRules, quota.metricRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(limits, metricRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Quota {\n");
    sb.append("    limits: ").append(toIndentedString(limits)).append("\n");
    sb.append("    metricRules: ").append(toIndentedString(metricRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("limits");
    openapiFields.add("metricRules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Quota
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Quota.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Quota is not found in the empty JSON string", Quota.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Quota.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Quota` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("limits") != null && !jsonObj.get("limits").isJsonNull()) {
        JsonArray jsonArraylimits = jsonObj.getAsJsonArray("limits");
        if (jsonArraylimits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("limits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `limits` to be an array in the JSON string but got `%s`", jsonObj.get("limits").toString()));
          }

          // validate the optional field `limits` (array)
          for (int i = 0; i < jsonArraylimits.size(); i++) {
            QuotaLimit.validateJsonElement(jsonArraylimits.get(i));
          };
        }
      }
      if (jsonObj.get("metricRules") != null && !jsonObj.get("metricRules").isJsonNull()) {
        JsonArray jsonArraymetricRules = jsonObj.getAsJsonArray("metricRules");
        if (jsonArraymetricRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metricRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metricRules` to be an array in the JSON string but got `%s`", jsonObj.get("metricRules").toString()));
          }

          // validate the optional field `metricRules` (array)
          for (int i = 0; i < jsonArraymetricRules.size(); i++) {
            MetricRule.validateJsonElement(jsonArraymetricRules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Quota.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Quota' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Quota> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Quota.class));

       return (TypeAdapter<T>) new TypeAdapter<Quota>() {
           @Override
           public void write(JsonWriter out, Quota value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Quota read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Quota given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Quota
   * @throws IOException if the JSON string is invalid with respect to Quota
   */
  public static Quota fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Quota.class);
  }

  /**
   * Convert an instance of Quota to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

