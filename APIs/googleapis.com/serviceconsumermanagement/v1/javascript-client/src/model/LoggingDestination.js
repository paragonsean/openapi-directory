/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LoggingDestination model module.
 * @module model/LoggingDestination
 * @version v1
 */
class LoggingDestination {
    /**
     * Constructs a new <code>LoggingDestination</code>.
     * Configuration of a specific logging destination (the producer project or the consumer project).
     * @alias module:model/LoggingDestination
     */
    constructor() { 
        
        LoggingDestination.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoggingDestination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoggingDestination} obj Optional instance to populate.
     * @return {module:model/LoggingDestination} The populated <code>LoggingDestination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoggingDestination();

            if (data.hasOwnProperty('logs')) {
                obj['logs'] = ApiClient.convertToType(data['logs'], ['String']);
            }
            if (data.hasOwnProperty('monitoredResource')) {
                obj['monitoredResource'] = ApiClient.convertToType(data['monitoredResource'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoggingDestination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoggingDestination</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['logs'])) {
            throw new Error("Expected the field `logs` to be an array in the JSON data but got " + data['logs']);
        }
        // ensure the json data is a string
        if (data['monitoredResource'] && !(typeof data['monitoredResource'] === 'string' || data['monitoredResource'] instanceof String)) {
            throw new Error("Expected the field `monitoredResource` to be a primitive type in the JSON string but got " + data['monitoredResource']);
        }

        return true;
    }


}



/**
 * Names of the logs to be sent to this destination. Each name must be defined in the Service.logs section. If the log name is not a domain scoped name, it will be automatically prefixed with the service name followed by \"/\".
 * @member {Array.<String>} logs
 */
LoggingDestination.prototype['logs'] = undefined;

/**
 * The monitored resource type. The type must be defined in the Service.monitored_resources section.
 * @member {String} monitoredResource
 */
LoggingDestination.prototype['monitoredResource'] = undefined;






export default LoggingDestination;

