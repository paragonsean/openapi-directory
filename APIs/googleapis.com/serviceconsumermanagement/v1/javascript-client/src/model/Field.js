/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Option from './Option';

/**
 * The Field model module.
 * @module model/Field
 * @version v1
 */
class Field {
    /**
     * Constructs a new <code>Field</code>.
     * A single field of a message type.
     * @alias module:model/Field
     */
    constructor() { 
        
        Field.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Field</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Field} obj Optional instance to populate.
     * @return {module:model/Field} The populated <code>Field</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Field();

            if (data.hasOwnProperty('cardinality')) {
                obj['cardinality'] = ApiClient.convertToType(data['cardinality'], 'String');
            }
            if (data.hasOwnProperty('defaultValue')) {
                obj['defaultValue'] = ApiClient.convertToType(data['defaultValue'], 'String');
            }
            if (data.hasOwnProperty('jsonName')) {
                obj['jsonName'] = ApiClient.convertToType(data['jsonName'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('oneofIndex')) {
                obj['oneofIndex'] = ApiClient.convertToType(data['oneofIndex'], 'Number');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [Option]);
            }
            if (data.hasOwnProperty('packed')) {
                obj['packed'] = ApiClient.convertToType(data['packed'], 'Boolean');
            }
            if (data.hasOwnProperty('typeUrl')) {
                obj['typeUrl'] = ApiClient.convertToType(data['typeUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Field</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Field</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cardinality'] && !(typeof data['cardinality'] === 'string' || data['cardinality'] instanceof String)) {
            throw new Error("Expected the field `cardinality` to be a primitive type in the JSON string but got " + data['cardinality']);
        }
        // ensure the json data is a string
        if (data['defaultValue'] && !(typeof data['defaultValue'] === 'string' || data['defaultValue'] instanceof String)) {
            throw new Error("Expected the field `defaultValue` to be a primitive type in the JSON string but got " + data['defaultValue']);
        }
        // ensure the json data is a string
        if (data['jsonName'] && !(typeof data['jsonName'] === 'string' || data['jsonName'] instanceof String)) {
            throw new Error("Expected the field `jsonName` to be a primitive type in the JSON string but got " + data['jsonName']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                Option.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['typeUrl'] && !(typeof data['typeUrl'] === 'string' || data['typeUrl'] instanceof String)) {
            throw new Error("Expected the field `typeUrl` to be a primitive type in the JSON string but got " + data['typeUrl']);
        }

        return true;
    }


}



/**
 * The field cardinality.
 * @member {module:model/Field.CardinalityEnum} cardinality
 */
Field.prototype['cardinality'] = undefined;

/**
 * The string value of the default value of this field. Proto2 syntax only.
 * @member {String} defaultValue
 */
Field.prototype['defaultValue'] = undefined;

/**
 * The field JSON name.
 * @member {String} jsonName
 */
Field.prototype['jsonName'] = undefined;

/**
 * The field type.
 * @member {module:model/Field.KindEnum} kind
 */
Field.prototype['kind'] = undefined;

/**
 * The field name.
 * @member {String} name
 */
Field.prototype['name'] = undefined;

/**
 * The field number.
 * @member {Number} number
 */
Field.prototype['number'] = undefined;

/**
 * The index of the field type in `Type.oneofs`, for message or enumeration types. The first type has index 1; zero means the type is not in the list.
 * @member {Number} oneofIndex
 */
Field.prototype['oneofIndex'] = undefined;

/**
 * The protocol buffer options.
 * @member {Array.<module:model/Option>} options
 */
Field.prototype['options'] = undefined;

/**
 * Whether to use alternative packed wire representation.
 * @member {Boolean} packed
 */
Field.prototype['packed'] = undefined;

/**
 * The field type URL, without the scheme, for message or enumeration types. Example: `\"type.googleapis.com/google.protobuf.Timestamp\"`.
 * @member {String} typeUrl
 */
Field.prototype['typeUrl'] = undefined;





/**
 * Allowed values for the <code>cardinality</code> property.
 * @enum {String}
 * @readonly
 */
Field['CardinalityEnum'] = {

    /**
     * value: "CARDINALITY_UNKNOWN"
     * @const
     */
    "UNKNOWN": "CARDINALITY_UNKNOWN",

    /**
     * value: "CARDINALITY_OPTIONAL"
     * @const
     */
    "OPTIONAL": "CARDINALITY_OPTIONAL",

    /**
     * value: "CARDINALITY_REQUIRED"
     * @const
     */
    "REQUIRED": "CARDINALITY_REQUIRED",

    /**
     * value: "CARDINALITY_REPEATED"
     * @const
     */
    "REPEATED": "CARDINALITY_REPEATED"
};


/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Field['KindEnum'] = {

    /**
     * value: "TYPE_UNKNOWN"
     * @const
     */
    "UNKNOWN": "TYPE_UNKNOWN",

    /**
     * value: "TYPE_DOUBLE"
     * @const
     */
    "DOUBLE": "TYPE_DOUBLE",

    /**
     * value: "TYPE_FLOAT"
     * @const
     */
    "FLOAT": "TYPE_FLOAT",

    /**
     * value: "TYPE_INT64"
     * @const
     */
    "INT64": "TYPE_INT64",

    /**
     * value: "TYPE_UINT64"
     * @const
     */
    "UINT64": "TYPE_UINT64",

    /**
     * value: "TYPE_INT32"
     * @const
     */
    "INT32": "TYPE_INT32",

    /**
     * value: "TYPE_FIXED64"
     * @const
     */
    "FIXED64": "TYPE_FIXED64",

    /**
     * value: "TYPE_FIXED32"
     * @const
     */
    "FIXED32": "TYPE_FIXED32",

    /**
     * value: "TYPE_BOOL"
     * @const
     */
    "BOOL": "TYPE_BOOL",

    /**
     * value: "TYPE_STRING"
     * @const
     */
    "STRING": "TYPE_STRING",

    /**
     * value: "TYPE_GROUP"
     * @const
     */
    "GROUP": "TYPE_GROUP",

    /**
     * value: "TYPE_MESSAGE"
     * @const
     */
    "MESSAGE": "TYPE_MESSAGE",

    /**
     * value: "TYPE_BYTES"
     * @const
     */
    "BYTES": "TYPE_BYTES",

    /**
     * value: "TYPE_UINT32"
     * @const
     */
    "UINT32": "TYPE_UINT32",

    /**
     * value: "TYPE_ENUM"
     * @const
     */
    "ENUM": "TYPE_ENUM",

    /**
     * value: "TYPE_SFIXED32"
     * @const
     */
    "SFIXED32": "TYPE_SFIXED32",

    /**
     * value: "TYPE_SFIXED64"
     * @const
     */
    "SFIXED64": "TYPE_SFIXED64",

    /**
     * value: "TYPE_SINT32"
     * @const
     */
    "SINT32": "TYPE_SINT32",

    /**
     * value: "TYPE_SINT64"
     * @const
     */
    "SINT64": "TYPE_SINT64"
};



export default Field;

