/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BillingConfig from './BillingConfig';
import ServiceAccountConfig from './ServiceAccountConfig';
import TenantProjectPolicy from './TenantProjectPolicy';

/**
 * The TenantProjectConfig model module.
 * @module model/TenantProjectConfig
 * @version v1
 */
class TenantProjectConfig {
    /**
     * Constructs a new <code>TenantProjectConfig</code>.
     * This structure defines a tenant project to be added to the specified tenancy unit and its initial configuration and properties. A project lien is created for the tenant project to prevent the tenant project from being deleted accidentally. The lien is deleted as part of tenant project removal.
     * @alias module:model/TenantProjectConfig
     */
    constructor() { 
        
        TenantProjectConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TenantProjectConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TenantProjectConfig} obj Optional instance to populate.
     * @return {module:model/TenantProjectConfig} The populated <code>TenantProjectConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TenantProjectConfig();

            if (data.hasOwnProperty('billingConfig')) {
                obj['billingConfig'] = BillingConfig.constructFromObject(data['billingConfig']);
            }
            if (data.hasOwnProperty('folder')) {
                obj['folder'] = ApiClient.convertToType(data['folder'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('serviceAccountConfig')) {
                obj['serviceAccountConfig'] = ServiceAccountConfig.constructFromObject(data['serviceAccountConfig']);
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = ApiClient.convertToType(data['services'], ['String']);
            }
            if (data.hasOwnProperty('tenantProjectPolicy')) {
                obj['tenantProjectPolicy'] = TenantProjectPolicy.constructFromObject(data['tenantProjectPolicy']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TenantProjectConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TenantProjectConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `billingConfig`
        if (data['billingConfig']) { // data not null
          BillingConfig.validateJSON(data['billingConfig']);
        }
        // ensure the json data is a string
        if (data['folder'] && !(typeof data['folder'] === 'string' || data['folder'] instanceof String)) {
            throw new Error("Expected the field `folder` to be a primitive type in the JSON string but got " + data['folder']);
        }
        // validate the optional field `serviceAccountConfig`
        if (data['serviceAccountConfig']) { // data not null
          ServiceAccountConfig.validateJSON(data['serviceAccountConfig']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['services'])) {
            throw new Error("Expected the field `services` to be an array in the JSON data but got " + data['services']);
        }
        // validate the optional field `tenantProjectPolicy`
        if (data['tenantProjectPolicy']) { // data not null
          TenantProjectPolicy.validateJSON(data['tenantProjectPolicy']);
        }

        return true;
    }


}



/**
 * @member {module:model/BillingConfig} billingConfig
 */
TenantProjectConfig.prototype['billingConfig'] = undefined;

/**
 * Folder where project in this tenancy unit must be located This folder must have been previously created with the required permissions for the caller to create and configure a project in it. Valid folder resource names have the format `folders/{folder_number}` (for example, `folders/123456`).
 * @member {String} folder
 */
TenantProjectConfig.prototype['folder'] = undefined;

/**
 * Labels that are applied to this project.
 * @member {Object.<String, String>} labels
 */
TenantProjectConfig.prototype['labels'] = undefined;

/**
 * @member {module:model/ServiceAccountConfig} serviceAccountConfig
 */
TenantProjectConfig.prototype['serviceAccountConfig'] = undefined;

/**
 * Google Cloud API names of services that are activated on this project during provisioning. If any of these services can't be activated, the request fails. For example: 'compute.googleapis.com','cloudfunctions.googleapis.com'
 * @member {Array.<String>} services
 */
TenantProjectConfig.prototype['services'] = undefined;

/**
 * @member {module:model/TenantProjectPolicy} tenantProjectPolicy
 */
TenantProjectConfig.prototype['tenantProjectPolicy'] = undefined;






export default TenantProjectConfig;

