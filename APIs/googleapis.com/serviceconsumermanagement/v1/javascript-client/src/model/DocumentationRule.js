/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DocumentationRule model module.
 * @module model/DocumentationRule
 * @version v1
 */
class DocumentationRule {
    /**
     * Constructs a new <code>DocumentationRule</code>.
     * A documentation rule provides information about individual API elements.
     * @alias module:model/DocumentationRule
     */
    constructor() { 
        
        DocumentationRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentationRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentationRule} obj Optional instance to populate.
     * @return {module:model/DocumentationRule} The populated <code>DocumentationRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentationRule();

            if (data.hasOwnProperty('deprecationDescription')) {
                obj['deprecationDescription'] = ApiClient.convertToType(data['deprecationDescription'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('disableReplacementWords')) {
                obj['disableReplacementWords'] = ApiClient.convertToType(data['disableReplacementWords'], 'String');
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = ApiClient.convertToType(data['selector'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentationRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentationRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deprecationDescription'] && !(typeof data['deprecationDescription'] === 'string' || data['deprecationDescription'] instanceof String)) {
            throw new Error("Expected the field `deprecationDescription` to be a primitive type in the JSON string but got " + data['deprecationDescription']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['disableReplacementWords'] && !(typeof data['disableReplacementWords'] === 'string' || data['disableReplacementWords'] instanceof String)) {
            throw new Error("Expected the field `disableReplacementWords` to be a primitive type in the JSON string but got " + data['disableReplacementWords']);
        }
        // ensure the json data is a string
        if (data['selector'] && !(typeof data['selector'] === 'string' || data['selector'] instanceof String)) {
            throw new Error("Expected the field `selector` to be a primitive type in the JSON string but got " + data['selector']);
        }

        return true;
    }


}



/**
 * Deprecation description of the selected element(s). It can be provided if an element is marked as `deprecated`.
 * @member {String} deprecationDescription
 */
DocumentationRule.prototype['deprecationDescription'] = undefined;

/**
 * Description of the selected proto element (e.g. a message, a method, a 'service' definition, or a field). Defaults to leading & trailing comments taken from the proto source definition of the proto element.
 * @member {String} description
 */
DocumentationRule.prototype['description'] = undefined;

/**
 * String of comma or space separated case-sensitive words for which method/field name replacement will be disabled by go/api-docgen.
 * @member {String} disableReplacementWords
 */
DocumentationRule.prototype['disableReplacementWords'] = undefined;

/**
 * The selector is a comma-separated list of patterns for any element such as a method, a field, an enum value. Each pattern is a qualified name of the element which may end in \"*\", indicating a wildcard. Wildcards are only allowed at the end and for a whole component of the qualified name, i.e. \"foo.*\" is ok, but not \"foo.b*\" or \"foo.*.bar\". A wildcard will match one or more components. To specify a default for all applicable elements, the whole pattern \"*\" is used.
 * @member {String} selector
 */
DocumentationRule.prototype['selector'] = undefined;






export default DocumentationRule;

