/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MetricRule model module.
 * @module model/MetricRule
 * @version v1
 */
class MetricRule {
    /**
     * Constructs a new <code>MetricRule</code>.
     * Bind API methods to metrics. Binding a method to a metric causes that metric&#39;s configured quota behaviors to apply to the method call.
     * @alias module:model/MetricRule
     */
    constructor() { 
        
        MetricRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricRule} obj Optional instance to populate.
     * @return {module:model/MetricRule} The populated <code>MetricRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricRule();

            if (data.hasOwnProperty('metricCosts')) {
                obj['metricCosts'] = ApiClient.convertToType(data['metricCosts'], {'String': 'String'});
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = ApiClient.convertToType(data['selector'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['selector'] && !(typeof data['selector'] === 'string' || data['selector'] instanceof String)) {
            throw new Error("Expected the field `selector` to be a primitive type in the JSON string but got " + data['selector']);
        }

        return true;
    }


}



/**
 * Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
 * @member {Object.<String, String>} metricCosts
 */
MetricRule.prototype['metricCosts'] = undefined;

/**
 * Selects the methods to which this rule applies. Refer to selector for syntax details.
 * @member {String} selector
 */
MetricRule.prototype['selector'] = undefined;






export default MetricRule;

