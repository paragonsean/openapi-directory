/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumValue from './EnumValue';
import Option from './Option';
import SourceContext from './SourceContext';

/**
 * The Enum model module.
 * @module model/Enum
 * @version v1
 */
class Enum {
    /**
     * Constructs a new <code>Enum</code>.
     * Enum type definition.
     * @alias module:model/Enum
     */
    constructor() { 
        
        Enum.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Enum</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Enum} obj Optional instance to populate.
     * @return {module:model/Enum} The populated <code>Enum</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Enum();

            if (data.hasOwnProperty('edition')) {
                obj['edition'] = ApiClient.convertToType(data['edition'], 'String');
            }
            if (data.hasOwnProperty('enumvalue')) {
                obj['enumvalue'] = ApiClient.convertToType(data['enumvalue'], [EnumValue]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [Option]);
            }
            if (data.hasOwnProperty('sourceContext')) {
                obj['sourceContext'] = SourceContext.constructFromObject(data['sourceContext']);
            }
            if (data.hasOwnProperty('syntax')) {
                obj['syntax'] = ApiClient.convertToType(data['syntax'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Enum</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Enum</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['edition'] && !(typeof data['edition'] === 'string' || data['edition'] instanceof String)) {
            throw new Error("Expected the field `edition` to be a primitive type in the JSON string but got " + data['edition']);
        }
        if (data['enumvalue']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['enumvalue'])) {
                throw new Error("Expected the field `enumvalue` to be an array in the JSON data but got " + data['enumvalue']);
            }
            // validate the optional field `enumvalue` (array)
            for (const item of data['enumvalue']) {
                EnumValue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                Option.validateJSON(item);
            };
        }
        // validate the optional field `sourceContext`
        if (data['sourceContext']) { // data not null
          SourceContext.validateJSON(data['sourceContext']);
        }
        // ensure the json data is a string
        if (data['syntax'] && !(typeof data['syntax'] === 'string' || data['syntax'] instanceof String)) {
            throw new Error("Expected the field `syntax` to be a primitive type in the JSON string but got " + data['syntax']);
        }

        return true;
    }


}



/**
 * The source edition string, only valid when syntax is SYNTAX_EDITIONS.
 * @member {String} edition
 */
Enum.prototype['edition'] = undefined;

/**
 * Enum value definitions.
 * @member {Array.<module:model/EnumValue>} enumvalue
 */
Enum.prototype['enumvalue'] = undefined;

/**
 * Enum type name.
 * @member {String} name
 */
Enum.prototype['name'] = undefined;

/**
 * Protocol buffer options.
 * @member {Array.<module:model/Option>} options
 */
Enum.prototype['options'] = undefined;

/**
 * @member {module:model/SourceContext} sourceContext
 */
Enum.prototype['sourceContext'] = undefined;

/**
 * The source syntax.
 * @member {module:model/Enum.SyntaxEnum} syntax
 */
Enum.prototype['syntax'] = undefined;





/**
 * Allowed values for the <code>syntax</code> property.
 * @enum {String}
 * @readonly
 */
Enum['SyntaxEnum'] = {

    /**
     * value: "SYNTAX_PROTO2"
     * @const
     */
    "PROTO2": "SYNTAX_PROTO2",

    /**
     * value: "SYNTAX_PROTO3"
     * @const
     */
    "PROTO3": "SYNTAX_PROTO3",

    /**
     * value: "SYNTAX_EDITIONS"
     * @const
     */
    "EDITIONS": "SYNTAX_EDITIONS"
};



export default Enum;

