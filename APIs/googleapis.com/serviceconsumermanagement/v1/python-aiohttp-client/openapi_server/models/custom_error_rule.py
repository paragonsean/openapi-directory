# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomErrorRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_error_type: bool=None, selector: str=None):
        """CustomErrorRule - a model defined in OpenAPI

        :param is_error_type: The is_error_type of this CustomErrorRule.
        :param selector: The selector of this CustomErrorRule.
        """
        self.openapi_types = {
            'is_error_type': bool,
            'selector': str
        }

        self.attribute_map = {
            'is_error_type': 'isErrorType',
            'selector': 'selector'
        }

        self._is_error_type = is_error_type
        self._selector = selector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomErrorRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomErrorRule of this CustomErrorRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_error_type(self):
        """Gets the is_error_type of this CustomErrorRule.

        Mark this message as possible payload in error response. Otherwise, objects of this type will be filtered when they appear in error payload.

        :return: The is_error_type of this CustomErrorRule.
        :rtype: bool
        """
        return self._is_error_type

    @is_error_type.setter
    def is_error_type(self, is_error_type):
        """Sets the is_error_type of this CustomErrorRule.

        Mark this message as possible payload in error response. Otherwise, objects of this type will be filtered when they appear in error payload.

        :param is_error_type: The is_error_type of this CustomErrorRule.
        :type is_error_type: bool
        """

        self._is_error_type = is_error_type

    @property
    def selector(self):
        """Gets the selector of this CustomErrorRule.

        Selects messages to which this rule applies. Refer to selector for syntax details.

        :return: The selector of this CustomErrorRule.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this CustomErrorRule.

        Selects messages to which this rule applies. Refer to selector for syntax details.

        :param selector: The selector of this CustomErrorRule.
        :type selector: str
        """

        self._selector = selector
