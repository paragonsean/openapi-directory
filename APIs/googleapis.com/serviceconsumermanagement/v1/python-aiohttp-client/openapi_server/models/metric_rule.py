# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetricRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_costs: Dict[str, str]=None, selector: str=None):
        """MetricRule - a model defined in OpenAPI

        :param metric_costs: The metric_costs of this MetricRule.
        :param selector: The selector of this MetricRule.
        """
        self.openapi_types = {
            'metric_costs': Dict[str, str],
            'selector': str
        }

        self.attribute_map = {
            'metric_costs': 'metricCosts',
            'selector': 'selector'
        }

        self._metric_costs = metric_costs
        self._selector = selector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricRule of this MetricRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_costs(self):
        """Gets the metric_costs of this MetricRule.

        Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.

        :return: The metric_costs of this MetricRule.
        :rtype: Dict[str, str]
        """
        return self._metric_costs

    @metric_costs.setter
    def metric_costs(self, metric_costs):
        """Sets the metric_costs of this MetricRule.

        Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.

        :param metric_costs: The metric_costs of this MetricRule.
        :type metric_costs: Dict[str, str]
        """

        self._metric_costs = metric_costs

    @property
    def selector(self):
        """Gets the selector of this MetricRule.

        Selects the methods to which this rule applies. Refer to selector for syntax details.

        :return: The selector of this MetricRule.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this MetricRule.

        Selects the methods to which this rule applies. Refer to selector for syntax details.

        :param selector: The selector of this MetricRule.
        :type selector: str
        """

        self._selector = selector
