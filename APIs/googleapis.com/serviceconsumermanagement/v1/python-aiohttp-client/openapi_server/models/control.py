# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.method_policy import MethodPolicy
from openapi_server import util


class Control(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment: str=None, method_policies: List[MethodPolicy]=None):
        """Control - a model defined in OpenAPI

        :param environment: The environment of this Control.
        :param method_policies: The method_policies of this Control.
        """
        self.openapi_types = {
            'environment': str,
            'method_policies': List[MethodPolicy]
        }

        self.attribute_map = {
            'environment': 'environment',
            'method_policies': 'methodPolicies'
        }

        self._environment = environment
        self._method_policies = method_policies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Control':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Control of this Control.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment(self):
        """Gets the environment of this Control.

        The service controller environment to use. If empty, no control plane feature (like quota and billing) will be enabled. The recommended value for most services is servicecontrol.googleapis.com

        :return: The environment of this Control.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Control.

        The service controller environment to use. If empty, no control plane feature (like quota and billing) will be enabled. The recommended value for most services is servicecontrol.googleapis.com

        :param environment: The environment of this Control.
        :type environment: str
        """

        self._environment = environment

    @property
    def method_policies(self):
        """Gets the method_policies of this Control.

        Defines policies applying to the API methods of the service.

        :return: The method_policies of this Control.
        :rtype: List[MethodPolicy]
        """
        return self._method_policies

    @method_policies.setter
    def method_policies(self, method_policies):
        """Sets the method_policies of this Control.

        Defines policies applying to the API methods of the service.

        :param method_policies: The method_policies of this Control.
        :type method_policies: List[MethodPolicy]
        """

        self._method_policies = method_policies
