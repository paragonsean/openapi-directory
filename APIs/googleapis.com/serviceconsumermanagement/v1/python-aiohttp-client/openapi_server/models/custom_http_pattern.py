# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomHttpPattern(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None, path: str=None):
        """CustomHttpPattern - a model defined in OpenAPI

        :param kind: The kind of this CustomHttpPattern.
        :param path: The path of this CustomHttpPattern.
        """
        self.openapi_types = {
            'kind': str,
            'path': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'path': 'path'
        }

        self._kind = kind
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomHttpPattern':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomHttpPattern of this CustomHttpPattern.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this CustomHttpPattern.

        The name of this custom HTTP verb.

        :return: The kind of this CustomHttpPattern.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CustomHttpPattern.

        The name of this custom HTTP verb.

        :param kind: The kind of this CustomHttpPattern.
        :type kind: str
        """

        self._kind = kind

    @property
    def path(self):
        """Gets the path of this CustomHttpPattern.

        The path matched by this custom verb.

        :return: The path of this CustomHttpPattern.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CustomHttpPattern.

        The path matched by this custom verb.

        :param path: The path of this CustomHttpPattern.
        :type path: str
        """

        self._path = path
