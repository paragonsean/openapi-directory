# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.jwt_location import JwtLocation
from openapi_server import util


class AuthProvider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audiences: str=None, authorization_url: str=None, id: str=None, issuer: str=None, jwks_uri: str=None, jwt_locations: List[JwtLocation]=None):
        """AuthProvider - a model defined in OpenAPI

        :param audiences: The audiences of this AuthProvider.
        :param authorization_url: The authorization_url of this AuthProvider.
        :param id: The id of this AuthProvider.
        :param issuer: The issuer of this AuthProvider.
        :param jwks_uri: The jwks_uri of this AuthProvider.
        :param jwt_locations: The jwt_locations of this AuthProvider.
        """
        self.openapi_types = {
            'audiences': str,
            'authorization_url': str,
            'id': str,
            'issuer': str,
            'jwks_uri': str,
            'jwt_locations': List[JwtLocation]
        }

        self.attribute_map = {
            'audiences': 'audiences',
            'authorization_url': 'authorizationUrl',
            'id': 'id',
            'issuer': 'issuer',
            'jwks_uri': 'jwksUri',
            'jwt_locations': 'jwtLocations'
        }

        self._audiences = audiences
        self._authorization_url = authorization_url
        self._id = id
        self._issuer = issuer
        self._jwks_uri = jwks_uri
        self._jwt_locations = jwt_locations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthProvider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthProvider of this AuthProvider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audiences(self):
        """Gets the audiences of this AuthProvider.

        The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, JWTs with audiences: - \"https://[service.name]/[google.protobuf.Api.name]\" - \"https://[service.name]/\" will be accepted. For example, if no audiences are in the setting, LibraryService API will accept JWTs with the following audiences: - https://library-example.googleapis.com/google.example.library.v1.LibraryService - https://library-example.googleapis.com/ Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com

        :return: The audiences of this AuthProvider.
        :rtype: str
        """
        return self._audiences

    @audiences.setter
    def audiences(self, audiences):
        """Sets the audiences of this AuthProvider.

        The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, JWTs with audiences: - \"https://[service.name]/[google.protobuf.Api.name]\" - \"https://[service.name]/\" will be accepted. For example, if no audiences are in the setting, LibraryService API will accept JWTs with the following audiences: - https://library-example.googleapis.com/google.example.library.v1.LibraryService - https://library-example.googleapis.com/ Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com

        :param audiences: The audiences of this AuthProvider.
        :type audiences: str
        """

        self._audiences = audiences

    @property
    def authorization_url(self):
        """Gets the authorization_url of this AuthProvider.

        Redirect URL if JWT token is required but not present or is expired. Implement authorizationUrl of securityDefinitions in OpenAPI spec.

        :return: The authorization_url of this AuthProvider.
        :rtype: str
        """
        return self._authorization_url

    @authorization_url.setter
    def authorization_url(self, authorization_url):
        """Sets the authorization_url of this AuthProvider.

        Redirect URL if JWT token is required but not present or is expired. Implement authorizationUrl of securityDefinitions in OpenAPI spec.

        :param authorization_url: The authorization_url of this AuthProvider.
        :type authorization_url: str
        """

        self._authorization_url = authorization_url

    @property
    def id(self):
        """Gets the id of this AuthProvider.

        The unique identifier of the auth provider. It will be referred to by `AuthRequirement.provider_id`. Example: \"bookstore_auth\".

        :return: The id of this AuthProvider.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthProvider.

        The unique identifier of the auth provider. It will be referred to by `AuthRequirement.provider_id`. Example: \"bookstore_auth\".

        :param id: The id of this AuthProvider.
        :type id: str
        """

        self._id = id

    @property
    def issuer(self):
        """Gets the issuer of this AuthProvider.

        Identifies the principal that issued the JWT. See https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1 Usually a URL or an email address. Example: https://securetoken.google.com Example: 1234567-compute@developer.gserviceaccount.com

        :return: The issuer of this AuthProvider.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this AuthProvider.

        Identifies the principal that issued the JWT. See https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1 Usually a URL or an email address. Example: https://securetoken.google.com Example: 1234567-compute@developer.gserviceaccount.com

        :param issuer: The issuer of this AuthProvider.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def jwks_uri(self):
        """Gets the jwks_uri of this AuthProvider.

        URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). Optional if the key set document: - can be retrieved from [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of the issuer. - can be inferred from the email domain of the issuer (e.g. a Google service account). Example: https://www.googleapis.com/oauth2/v1/certs

        :return: The jwks_uri of this AuthProvider.
        :rtype: str
        """
        return self._jwks_uri

    @jwks_uri.setter
    def jwks_uri(self, jwks_uri):
        """Sets the jwks_uri of this AuthProvider.

        URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). Optional if the key set document: - can be retrieved from [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of the issuer. - can be inferred from the email domain of the issuer (e.g. a Google service account). Example: https://www.googleapis.com/oauth2/v1/certs

        :param jwks_uri: The jwks_uri of this AuthProvider.
        :type jwks_uri: str
        """

        self._jwks_uri = jwks_uri

    @property
    def jwt_locations(self):
        """Gets the jwt_locations of this AuthProvider.

        Defines the locations to extract the JWT. For now it is only used by the Cloud Endpoints to store the OpenAPI extension [x-google-jwt-locations] (https://cloud.google.com/endpoints/docs/openapi/openapi-extensions#x-google-jwt-locations) JWT locations can be one of HTTP headers, URL query parameters or cookies. The rule is that the first match wins. If not specified, default to use following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion 3) access_token query parameter Default locations can be specified as followings: jwt_locations: - header: Authorization value_prefix: \"Bearer \" - header: x-goog-iap-jwt-assertion - query: access_token

        :return: The jwt_locations of this AuthProvider.
        :rtype: List[JwtLocation]
        """
        return self._jwt_locations

    @jwt_locations.setter
    def jwt_locations(self, jwt_locations):
        """Sets the jwt_locations of this AuthProvider.

        Defines the locations to extract the JWT. For now it is only used by the Cloud Endpoints to store the OpenAPI extension [x-google-jwt-locations] (https://cloud.google.com/endpoints/docs/openapi/openapi-extensions#x-google-jwt-locations) JWT locations can be one of HTTP headers, URL query parameters or cookies. The rule is that the first match wins. If not specified, default to use following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion 3) access_token query parameter Default locations can be specified as followings: jwt_locations: - header: Authorization value_prefix: \"Bearer \" - header: x-goog-iap-jwt-assertion - query: access_token

        :param jwt_locations: The jwt_locations of this AuthProvider.
        :type jwt_locations: List[JwtLocation]
        """

        self._jwt_locations = jwt_locations
