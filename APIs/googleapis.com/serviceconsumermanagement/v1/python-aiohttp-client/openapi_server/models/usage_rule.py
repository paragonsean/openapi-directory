# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsageRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_unregistered_calls: bool=None, selector: str=None, skip_service_control: bool=None):
        """UsageRule - a model defined in OpenAPI

        :param allow_unregistered_calls: The allow_unregistered_calls of this UsageRule.
        :param selector: The selector of this UsageRule.
        :param skip_service_control: The skip_service_control of this UsageRule.
        """
        self.openapi_types = {
            'allow_unregistered_calls': bool,
            'selector': str,
            'skip_service_control': bool
        }

        self.attribute_map = {
            'allow_unregistered_calls': 'allowUnregisteredCalls',
            'selector': 'selector',
            'skip_service_control': 'skipServiceControl'
        }

        self._allow_unregistered_calls = allow_unregistered_calls
        self._selector = selector
        self._skip_service_control = skip_service_control

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsageRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsageRule of this UsageRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_unregistered_calls(self):
        """Gets the allow_unregistered_calls of this UsageRule.

        If true, the selected method allows unregistered calls, e.g. calls that don't identify any user or application.

        :return: The allow_unregistered_calls of this UsageRule.
        :rtype: bool
        """
        return self._allow_unregistered_calls

    @allow_unregistered_calls.setter
    def allow_unregistered_calls(self, allow_unregistered_calls):
        """Sets the allow_unregistered_calls of this UsageRule.

        If true, the selected method allows unregistered calls, e.g. calls that don't identify any user or application.

        :param allow_unregistered_calls: The allow_unregistered_calls of this UsageRule.
        :type allow_unregistered_calls: bool
        """

        self._allow_unregistered_calls = allow_unregistered_calls

    @property
    def selector(self):
        """Gets the selector of this UsageRule.

        Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.

        :return: The selector of this UsageRule.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this UsageRule.

        Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.

        :param selector: The selector of this UsageRule.
        :type selector: str
        """

        self._selector = selector

    @property
    def skip_service_control(self):
        """Gets the skip_service_control of this UsageRule.

        If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods.

        :return: The skip_service_control of this UsageRule.
        :rtype: bool
        """
        return self._skip_service_control

    @skip_service_control.setter
    def skip_service_control(self, skip_service_control):
        """Sets the skip_service_control of this UsageRule.

        If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods.

        :param skip_service_control: The skip_service_control of this UsageRule.
        :type skip_service_control: bool
        """

        self._skip_service_control = skip_service_control
