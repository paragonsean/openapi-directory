# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttachTenantProjectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_resource: str=None, reserved_resource: str=None, tag: str=None):
        """AttachTenantProjectRequest - a model defined in OpenAPI

        :param external_resource: The external_resource of this AttachTenantProjectRequest.
        :param reserved_resource: The reserved_resource of this AttachTenantProjectRequest.
        :param tag: The tag of this AttachTenantProjectRequest.
        """
        self.openapi_types = {
            'external_resource': str,
            'reserved_resource': str,
            'tag': str
        }

        self.attribute_map = {
            'external_resource': 'externalResource',
            'reserved_resource': 'reservedResource',
            'tag': 'tag'
        }

        self._external_resource = external_resource
        self._reserved_resource = reserved_resource
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttachTenantProjectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttachTenantProjectRequest of this AttachTenantProjectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_resource(self):
        """Gets the external_resource of this AttachTenantProjectRequest.

        When attaching an external project, this is in the format of `projects/{project_number}`.

        :return: The external_resource of this AttachTenantProjectRequest.
        :rtype: str
        """
        return self._external_resource

    @external_resource.setter
    def external_resource(self, external_resource):
        """Sets the external_resource of this AttachTenantProjectRequest.

        When attaching an external project, this is in the format of `projects/{project_number}`.

        :param external_resource: The external_resource of this AttachTenantProjectRequest.
        :type external_resource: str
        """

        self._external_resource = external_resource

    @property
    def reserved_resource(self):
        """Gets the reserved_resource of this AttachTenantProjectRequest.

        When attaching a reserved project already in tenancy units, this is the tag of a tenant resource under the tenancy unit for the managed service's service producer project. The reserved tenant resource must be in an active state.

        :return: The reserved_resource of this AttachTenantProjectRequest.
        :rtype: str
        """
        return self._reserved_resource

    @reserved_resource.setter
    def reserved_resource(self, reserved_resource):
        """Sets the reserved_resource of this AttachTenantProjectRequest.

        When attaching a reserved project already in tenancy units, this is the tag of a tenant resource under the tenancy unit for the managed service's service producer project. The reserved tenant resource must be in an active state.

        :param reserved_resource: The reserved_resource of this AttachTenantProjectRequest.
        :type reserved_resource: str
        """

        self._reserved_resource = reserved_resource

    @property
    def tag(self):
        """Gets the tag of this AttachTenantProjectRequest.

        Required. Tag of the tenant resource after attachment. Must be less than 128 characters. Required.

        :return: The tag of this AttachTenantProjectRequest.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this AttachTenantProjectRequest.

        Required. Tag of the tenant resource after attachment. Must be less than 128 characters. Required.

        :param tag: The tag of this AttachTenantProjectRequest.
        :type tag: str
        """

        self._tag = tag
