# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.option import Option
from openapi_server import util


class Method(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, options: List[Option]=None, request_streaming: bool=None, request_type_url: str=None, response_streaming: bool=None, response_type_url: str=None, syntax: str=None):
        """Method - a model defined in OpenAPI

        :param name: The name of this Method.
        :param options: The options of this Method.
        :param request_streaming: The request_streaming of this Method.
        :param request_type_url: The request_type_url of this Method.
        :param response_streaming: The response_streaming of this Method.
        :param response_type_url: The response_type_url of this Method.
        :param syntax: The syntax of this Method.
        """
        self.openapi_types = {
            'name': str,
            'options': List[Option],
            'request_streaming': bool,
            'request_type_url': str,
            'response_streaming': bool,
            'response_type_url': str,
            'syntax': str
        }

        self.attribute_map = {
            'name': 'name',
            'options': 'options',
            'request_streaming': 'requestStreaming',
            'request_type_url': 'requestTypeUrl',
            'response_streaming': 'responseStreaming',
            'response_type_url': 'responseTypeUrl',
            'syntax': 'syntax'
        }

        self._name = name
        self._options = options
        self._request_streaming = request_streaming
        self._request_type_url = request_type_url
        self._response_streaming = response_streaming
        self._response_type_url = response_type_url
        self._syntax = syntax

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Method':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Method of this Method.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Method.

        The simple name of this method.

        :return: The name of this Method.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Method.

        The simple name of this method.

        :param name: The name of this Method.
        :type name: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this Method.

        Any metadata attached to the method.

        :return: The options of this Method.
        :rtype: List[Option]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Method.

        Any metadata attached to the method.

        :param options: The options of this Method.
        :type options: List[Option]
        """

        self._options = options

    @property
    def request_streaming(self):
        """Gets the request_streaming of this Method.

        If true, the request is streamed.

        :return: The request_streaming of this Method.
        :rtype: bool
        """
        return self._request_streaming

    @request_streaming.setter
    def request_streaming(self, request_streaming):
        """Sets the request_streaming of this Method.

        If true, the request is streamed.

        :param request_streaming: The request_streaming of this Method.
        :type request_streaming: bool
        """

        self._request_streaming = request_streaming

    @property
    def request_type_url(self):
        """Gets the request_type_url of this Method.

        A URL of the input message type.

        :return: The request_type_url of this Method.
        :rtype: str
        """
        return self._request_type_url

    @request_type_url.setter
    def request_type_url(self, request_type_url):
        """Sets the request_type_url of this Method.

        A URL of the input message type.

        :param request_type_url: The request_type_url of this Method.
        :type request_type_url: str
        """

        self._request_type_url = request_type_url

    @property
    def response_streaming(self):
        """Gets the response_streaming of this Method.

        If true, the response is streamed.

        :return: The response_streaming of this Method.
        :rtype: bool
        """
        return self._response_streaming

    @response_streaming.setter
    def response_streaming(self, response_streaming):
        """Sets the response_streaming of this Method.

        If true, the response is streamed.

        :param response_streaming: The response_streaming of this Method.
        :type response_streaming: bool
        """

        self._response_streaming = response_streaming

    @property
    def response_type_url(self):
        """Gets the response_type_url of this Method.

        The URL of the output message type.

        :return: The response_type_url of this Method.
        :rtype: str
        """
        return self._response_type_url

    @response_type_url.setter
    def response_type_url(self, response_type_url):
        """Sets the response_type_url of this Method.

        The URL of the output message type.

        :param response_type_url: The response_type_url of this Method.
        :type response_type_url: str
        """

        self._response_type_url = response_type_url

    @property
    def syntax(self):
        """Gets the syntax of this Method.

        The source syntax of this method.

        :return: The syntax of this Method.
        :rtype: str
        """
        return self._syntax

    @syntax.setter
    def syntax(self, syntax):
        """Sets the syntax of this Method.

        The source syntax of this method.

        :param syntax: The syntax of this Method.
        :type syntax: str
        """
        allowed_values = ["SYNTAX_PROTO2", "SYNTAX_PROTO3", "SYNTAX_EDITIONS"]  # noqa: E501
        if syntax not in allowed_values:
            raise ValueError(
                "Invalid value for `syntax` ({0}), must be one of {1}"
                .format(syntax, allowed_values)
            )

        self._syntax = syntax
