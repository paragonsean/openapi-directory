# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.billing_config import BillingConfig
from openapi_server.models.service_account_config import ServiceAccountConfig
from openapi_server.models.tenant_project_policy import TenantProjectPolicy
from openapi_server import util


class TenantProjectConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_config: BillingConfig=None, folder: str=None, labels: Dict[str, str]=None, service_account_config: ServiceAccountConfig=None, services: List[str]=None, tenant_project_policy: TenantProjectPolicy=None):
        """TenantProjectConfig - a model defined in OpenAPI

        :param billing_config: The billing_config of this TenantProjectConfig.
        :param folder: The folder of this TenantProjectConfig.
        :param labels: The labels of this TenantProjectConfig.
        :param service_account_config: The service_account_config of this TenantProjectConfig.
        :param services: The services of this TenantProjectConfig.
        :param tenant_project_policy: The tenant_project_policy of this TenantProjectConfig.
        """
        self.openapi_types = {
            'billing_config': BillingConfig,
            'folder': str,
            'labels': Dict[str, str],
            'service_account_config': ServiceAccountConfig,
            'services': List[str],
            'tenant_project_policy': TenantProjectPolicy
        }

        self.attribute_map = {
            'billing_config': 'billingConfig',
            'folder': 'folder',
            'labels': 'labels',
            'service_account_config': 'serviceAccountConfig',
            'services': 'services',
            'tenant_project_policy': 'tenantProjectPolicy'
        }

        self._billing_config = billing_config
        self._folder = folder
        self._labels = labels
        self._service_account_config = service_account_config
        self._services = services
        self._tenant_project_policy = tenant_project_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TenantProjectConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TenantProjectConfig of this TenantProjectConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_config(self):
        """Gets the billing_config of this TenantProjectConfig.


        :return: The billing_config of this TenantProjectConfig.
        :rtype: BillingConfig
        """
        return self._billing_config

    @billing_config.setter
    def billing_config(self, billing_config):
        """Sets the billing_config of this TenantProjectConfig.


        :param billing_config: The billing_config of this TenantProjectConfig.
        :type billing_config: BillingConfig
        """

        self._billing_config = billing_config

    @property
    def folder(self):
        """Gets the folder of this TenantProjectConfig.

        Folder where project in this tenancy unit must be located This folder must have been previously created with the required permissions for the caller to create and configure a project in it. Valid folder resource names have the format `folders/{folder_number}` (for example, `folders/123456`).

        :return: The folder of this TenantProjectConfig.
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this TenantProjectConfig.

        Folder where project in this tenancy unit must be located This folder must have been previously created with the required permissions for the caller to create and configure a project in it. Valid folder resource names have the format `folders/{folder_number}` (for example, `folders/123456`).

        :param folder: The folder of this TenantProjectConfig.
        :type folder: str
        """

        self._folder = folder

    @property
    def labels(self):
        """Gets the labels of this TenantProjectConfig.

        Labels that are applied to this project.

        :return: The labels of this TenantProjectConfig.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this TenantProjectConfig.

        Labels that are applied to this project.

        :param labels: The labels of this TenantProjectConfig.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def service_account_config(self):
        """Gets the service_account_config of this TenantProjectConfig.


        :return: The service_account_config of this TenantProjectConfig.
        :rtype: ServiceAccountConfig
        """
        return self._service_account_config

    @service_account_config.setter
    def service_account_config(self, service_account_config):
        """Sets the service_account_config of this TenantProjectConfig.


        :param service_account_config: The service_account_config of this TenantProjectConfig.
        :type service_account_config: ServiceAccountConfig
        """

        self._service_account_config = service_account_config

    @property
    def services(self):
        """Gets the services of this TenantProjectConfig.

        Google Cloud API names of services that are activated on this project during provisioning. If any of these services can't be activated, the request fails. For example: 'compute.googleapis.com','cloudfunctions.googleapis.com'

        :return: The services of this TenantProjectConfig.
        :rtype: List[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this TenantProjectConfig.

        Google Cloud API names of services that are activated on this project during provisioning. If any of these services can't be activated, the request fails. For example: 'compute.googleapis.com','cloudfunctions.googleapis.com'

        :param services: The services of this TenantProjectConfig.
        :type services: List[str]
        """

        self._services = services

    @property
    def tenant_project_policy(self):
        """Gets the tenant_project_policy of this TenantProjectConfig.


        :return: The tenant_project_policy of this TenantProjectConfig.
        :rtype: TenantProjectPolicy
        """
        return self._tenant_project_policy

    @tenant_project_policy.setter
    def tenant_project_policy(self, tenant_project_policy):
        """Sets the tenant_project_policy of this TenantProjectConfig.


        :param tenant_project_policy: The tenant_project_policy of this TenantProjectConfig.
        :type tenant_project_policy: TenantProjectPolicy
        """

        self._tenant_project_policy = tenant_project_policy
