# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetricDescriptorMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ingest_delay: str=None, launch_stage: str=None, sample_period: str=None):
        """MetricDescriptorMetadata - a model defined in OpenAPI

        :param ingest_delay: The ingest_delay of this MetricDescriptorMetadata.
        :param launch_stage: The launch_stage of this MetricDescriptorMetadata.
        :param sample_period: The sample_period of this MetricDescriptorMetadata.
        """
        self.openapi_types = {
            'ingest_delay': str,
            'launch_stage': str,
            'sample_period': str
        }

        self.attribute_map = {
            'ingest_delay': 'ingestDelay',
            'launch_stage': 'launchStage',
            'sample_period': 'samplePeriod'
        }

        self._ingest_delay = ingest_delay
        self._launch_stage = launch_stage
        self._sample_period = sample_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricDescriptorMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricDescriptorMetadata of this MetricDescriptorMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ingest_delay(self):
        """Gets the ingest_delay of this MetricDescriptorMetadata.

        The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.

        :return: The ingest_delay of this MetricDescriptorMetadata.
        :rtype: str
        """
        return self._ingest_delay

    @ingest_delay.setter
    def ingest_delay(self, ingest_delay):
        """Sets the ingest_delay of this MetricDescriptorMetadata.

        The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.

        :param ingest_delay: The ingest_delay of this MetricDescriptorMetadata.
        :type ingest_delay: str
        """

        self._ingest_delay = ingest_delay

    @property
    def launch_stage(self):
        """Gets the launch_stage of this MetricDescriptorMetadata.

        Deprecated. Must use the MetricDescriptor.launch_stage instead.

        :return: The launch_stage of this MetricDescriptorMetadata.
        :rtype: str
        """
        return self._launch_stage

    @launch_stage.setter
    def launch_stage(self, launch_stage):
        """Sets the launch_stage of this MetricDescriptorMetadata.

        Deprecated. Must use the MetricDescriptor.launch_stage instead.

        :param launch_stage: The launch_stage of this MetricDescriptorMetadata.
        :type launch_stage: str
        """
        allowed_values = ["LAUNCH_STAGE_UNSPECIFIED", "UNIMPLEMENTED", "PRELAUNCH", "EARLY_ACCESS", "ALPHA", "BETA", "GA", "DEPRECATED"]  # noqa: E501
        if launch_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `launch_stage` ({0}), must be one of {1}"
                .format(launch_stage, allowed_values)
            )

        self._launch_stage = launch_stage

    @property
    def sample_period(self):
        """Gets the sample_period of this MetricDescriptorMetadata.

        The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.

        :return: The sample_period of this MetricDescriptorMetadata.
        :rtype: str
        """
        return self._sample_period

    @sample_period.setter
    def sample_period(self, sample_period):
        """Sets the sample_period of this MetricDescriptorMetadata.

        The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.

        :param sample_period: The sample_period of this MetricDescriptorMetadata.
        :type sample_period: str
        """

        self._sample_period = sample_period
