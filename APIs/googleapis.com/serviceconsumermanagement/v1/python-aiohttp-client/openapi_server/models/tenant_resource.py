# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TenantResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource: str=None, status: str=None, tag: str=None):
        """TenantResource - a model defined in OpenAPI

        :param resource: The resource of this TenantResource.
        :param status: The status of this TenantResource.
        :param tag: The tag of this TenantResource.
        """
        self.openapi_types = {
            'resource': str,
            'status': str,
            'tag': str
        }

        self.attribute_map = {
            'resource': 'resource',
            'status': 'status',
            'tag': 'tag'
        }

        self._resource = resource
        self._status = status
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TenantResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TenantResource of this TenantResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource(self):
        """Gets the resource of this TenantResource.

        Output only. @OutputOnly Identifier of the tenant resource. For cloud projects, it is in the form 'projects/{number}'. For example 'projects/123456'.

        :return: The resource of this TenantResource.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this TenantResource.

        Output only. @OutputOnly Identifier of the tenant resource. For cloud projects, it is in the form 'projects/{number}'. For example 'projects/123456'.

        :param resource: The resource of this TenantResource.
        :type resource: str
        """

        self._resource = resource

    @property
    def status(self):
        """Gets the status of this TenantResource.

        Status of tenant resource.

        :return: The status of this TenantResource.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TenantResource.

        Status of tenant resource.

        :param status: The status of this TenantResource.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "PENDING_CREATE", "ACTIVE", "PENDING_DELETE", "FAILED", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tag(self):
        """Gets the tag of this TenantResource.

        Unique per single tenancy unit.

        :return: The tag of this TenantResource.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this TenantResource.

        Unique per single tenancy unit.

        :param tag: The tag of this TenantResource.
        :type tag: str
        """

        self._tag = tag
