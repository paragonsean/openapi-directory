# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceAccountConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, tenant_project_roles: List[str]=None):
        """ServiceAccountConfig - a model defined in OpenAPI

        :param account_id: The account_id of this ServiceAccountConfig.
        :param tenant_project_roles: The tenant_project_roles of this ServiceAccountConfig.
        """
        self.openapi_types = {
            'account_id': str,
            'tenant_project_roles': List[str]
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'tenant_project_roles': 'tenantProjectRoles'
        }

        self._account_id = account_id
        self._tenant_project_roles = tenant_project_roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceAccountConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceAccountConfig of this ServiceAccountConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this ServiceAccountConfig.

        ID of the IAM service account to be created in tenant project. The email format of the service account is \"@.iam.gserviceaccount.com\". This account ID must be unique within tenant project and service producers have to guarantee it. The ID must be 6-30 characters long, and match the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])`.

        :return: The account_id of this ServiceAccountConfig.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ServiceAccountConfig.

        ID of the IAM service account to be created in tenant project. The email format of the service account is \"@.iam.gserviceaccount.com\". This account ID must be unique within tenant project and service producers have to guarantee it. The ID must be 6-30 characters long, and match the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])`.

        :param account_id: The account_id of this ServiceAccountConfig.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def tenant_project_roles(self):
        """Gets the tenant_project_roles of this ServiceAccountConfig.

        Roles for the associated service account for the tenant project.

        :return: The tenant_project_roles of this ServiceAccountConfig.
        :rtype: List[str]
        """
        return self._tenant_project_roles

    @tenant_project_roles.setter
    def tenant_project_roles(self, tenant_project_roles):
        """Sets the tenant_project_roles of this ServiceAccountConfig.

        Roles for the associated service account for the tenant project.

        :param tenant_project_roles: The tenant_project_roles of this ServiceAccountConfig.
        :type tenant_project_roles: List[str]
        """

        self._tenant_project_roles = tenant_project_roles
