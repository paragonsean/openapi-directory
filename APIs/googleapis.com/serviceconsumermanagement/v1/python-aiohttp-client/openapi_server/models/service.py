# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api import Api
from openapi_server.models.authentication import Authentication
from openapi_server.models.backend import Backend
from openapi_server.models.billing import Billing
from openapi_server.models.context import Context
from openapi_server.models.control import Control
from openapi_server.models.custom_error import CustomError
from openapi_server.models.documentation import Documentation
from openapi_server.models.endpoint import Endpoint
from openapi_server.models.enum import Enum
from openapi_server.models.http import Http
from openapi_server.models.log_descriptor import LogDescriptor
from openapi_server.models.logging import Logging
from openapi_server.models.metric_descriptor import MetricDescriptor
from openapi_server.models.monitored_resource_descriptor import MonitoredResourceDescriptor
from openapi_server.models.monitoring import Monitoring
from openapi_server.models.publishing import Publishing
from openapi_server.models.quota import Quota
from openapi_server.models.source_info import SourceInfo
from openapi_server.models.system_parameters import SystemParameters
from openapi_server.models.type import Type
from openapi_server.models.usage import Usage
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apis: List[Api]=None, authentication: Authentication=None, backend: Backend=None, billing: Billing=None, config_version: int=None, context: Context=None, control: Control=None, custom_error: CustomError=None, documentation: Documentation=None, endpoints: List[Endpoint]=None, enums: List[Enum]=None, http: Http=None, id: str=None, logging: Logging=None, logs: List[LogDescriptor]=None, metrics: List[MetricDescriptor]=None, monitored_resources: List[MonitoredResourceDescriptor]=None, monitoring: Monitoring=None, name: str=None, producer_project_id: str=None, publishing: Publishing=None, quota: Quota=None, source_info: SourceInfo=None, system_parameters: SystemParameters=None, system_types: List[Type]=None, title: str=None, types: List[Type]=None, usage: Usage=None):
        """Service - a model defined in OpenAPI

        :param apis: The apis of this Service.
        :param authentication: The authentication of this Service.
        :param backend: The backend of this Service.
        :param billing: The billing of this Service.
        :param config_version: The config_version of this Service.
        :param context: The context of this Service.
        :param control: The control of this Service.
        :param custom_error: The custom_error of this Service.
        :param documentation: The documentation of this Service.
        :param endpoints: The endpoints of this Service.
        :param enums: The enums of this Service.
        :param http: The http of this Service.
        :param id: The id of this Service.
        :param logging: The logging of this Service.
        :param logs: The logs of this Service.
        :param metrics: The metrics of this Service.
        :param monitored_resources: The monitored_resources of this Service.
        :param monitoring: The monitoring of this Service.
        :param name: The name of this Service.
        :param producer_project_id: The producer_project_id of this Service.
        :param publishing: The publishing of this Service.
        :param quota: The quota of this Service.
        :param source_info: The source_info of this Service.
        :param system_parameters: The system_parameters of this Service.
        :param system_types: The system_types of this Service.
        :param title: The title of this Service.
        :param types: The types of this Service.
        :param usage: The usage of this Service.
        """
        self.openapi_types = {
            'apis': List[Api],
            'authentication': Authentication,
            'backend': Backend,
            'billing': Billing,
            'config_version': int,
            'context': Context,
            'control': Control,
            'custom_error': CustomError,
            'documentation': Documentation,
            'endpoints': List[Endpoint],
            'enums': List[Enum],
            'http': Http,
            'id': str,
            'logging': Logging,
            'logs': List[LogDescriptor],
            'metrics': List[MetricDescriptor],
            'monitored_resources': List[MonitoredResourceDescriptor],
            'monitoring': Monitoring,
            'name': str,
            'producer_project_id': str,
            'publishing': Publishing,
            'quota': Quota,
            'source_info': SourceInfo,
            'system_parameters': SystemParameters,
            'system_types': List[Type],
            'title': str,
            'types': List[Type],
            'usage': Usage
        }

        self.attribute_map = {
            'apis': 'apis',
            'authentication': 'authentication',
            'backend': 'backend',
            'billing': 'billing',
            'config_version': 'configVersion',
            'context': 'context',
            'control': 'control',
            'custom_error': 'customError',
            'documentation': 'documentation',
            'endpoints': 'endpoints',
            'enums': 'enums',
            'http': 'http',
            'id': 'id',
            'logging': 'logging',
            'logs': 'logs',
            'metrics': 'metrics',
            'monitored_resources': 'monitoredResources',
            'monitoring': 'monitoring',
            'name': 'name',
            'producer_project_id': 'producerProjectId',
            'publishing': 'publishing',
            'quota': 'quota',
            'source_info': 'sourceInfo',
            'system_parameters': 'systemParameters',
            'system_types': 'systemTypes',
            'title': 'title',
            'types': 'types',
            'usage': 'usage'
        }

        self._apis = apis
        self._authentication = authentication
        self._backend = backend
        self._billing = billing
        self._config_version = config_version
        self._context = context
        self._control = control
        self._custom_error = custom_error
        self._documentation = documentation
        self._endpoints = endpoints
        self._enums = enums
        self._http = http
        self._id = id
        self._logging = logging
        self._logs = logs
        self._metrics = metrics
        self._monitored_resources = monitored_resources
        self._monitoring = monitoring
        self._name = name
        self._producer_project_id = producer_project_id
        self._publishing = publishing
        self._quota = quota
        self._source_info = source_info
        self._system_parameters = system_parameters
        self._system_types = system_types
        self._title = title
        self._types = types
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apis(self):
        """Gets the apis of this Service.

        A list of API interfaces exported by this service. Only the `name` field of the google.protobuf.Api needs to be provided by the configuration author, as the remaining fields will be derived from the IDL during the normalization process. It is an error to specify an API interface here which cannot be resolved against the associated IDL files.

        :return: The apis of this Service.
        :rtype: List[Api]
        """
        return self._apis

    @apis.setter
    def apis(self, apis):
        """Sets the apis of this Service.

        A list of API interfaces exported by this service. Only the `name` field of the google.protobuf.Api needs to be provided by the configuration author, as the remaining fields will be derived from the IDL during the normalization process. It is an error to specify an API interface here which cannot be resolved against the associated IDL files.

        :param apis: The apis of this Service.
        :type apis: List[Api]
        """

        self._apis = apis

    @property
    def authentication(self):
        """Gets the authentication of this Service.


        :return: The authentication of this Service.
        :rtype: Authentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this Service.


        :param authentication: The authentication of this Service.
        :type authentication: Authentication
        """

        self._authentication = authentication

    @property
    def backend(self):
        """Gets the backend of this Service.


        :return: The backend of this Service.
        :rtype: Backend
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """Sets the backend of this Service.


        :param backend: The backend of this Service.
        :type backend: Backend
        """

        self._backend = backend

    @property
    def billing(self):
        """Gets the billing of this Service.


        :return: The billing of this Service.
        :rtype: Billing
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this Service.


        :param billing: The billing of this Service.
        :type billing: Billing
        """

        self._billing = billing

    @property
    def config_version(self):
        """Gets the config_version of this Service.

        Obsolete. Do not use. This field has no semantic meaning. The service config compiler always sets this field to `3`.

        :return: The config_version of this Service.
        :rtype: int
        """
        return self._config_version

    @config_version.setter
    def config_version(self, config_version):
        """Sets the config_version of this Service.

        Obsolete. Do not use. This field has no semantic meaning. The service config compiler always sets this field to `3`.

        :param config_version: The config_version of this Service.
        :type config_version: int
        """

        self._config_version = config_version

    @property
    def context(self):
        """Gets the context of this Service.


        :return: The context of this Service.
        :rtype: Context
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Service.


        :param context: The context of this Service.
        :type context: Context
        """

        self._context = context

    @property
    def control(self):
        """Gets the control of this Service.


        :return: The control of this Service.
        :rtype: Control
        """
        return self._control

    @control.setter
    def control(self, control):
        """Sets the control of this Service.


        :param control: The control of this Service.
        :type control: Control
        """

        self._control = control

    @property
    def custom_error(self):
        """Gets the custom_error of this Service.


        :return: The custom_error of this Service.
        :rtype: CustomError
        """
        return self._custom_error

    @custom_error.setter
    def custom_error(self, custom_error):
        """Sets the custom_error of this Service.


        :param custom_error: The custom_error of this Service.
        :type custom_error: CustomError
        """

        self._custom_error = custom_error

    @property
    def documentation(self):
        """Gets the documentation of this Service.


        :return: The documentation of this Service.
        :rtype: Documentation
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this Service.


        :param documentation: The documentation of this Service.
        :type documentation: Documentation
        """

        self._documentation = documentation

    @property
    def endpoints(self):
        """Gets the endpoints of this Service.

        Configuration for network endpoints. If this is empty, then an endpoint with the same name as the service is automatically generated to service all defined APIs.

        :return: The endpoints of this Service.
        :rtype: List[Endpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this Service.

        Configuration for network endpoints. If this is empty, then an endpoint with the same name as the service is automatically generated to service all defined APIs.

        :param endpoints: The endpoints of this Service.
        :type endpoints: List[Endpoint]
        """

        self._endpoints = endpoints

    @property
    def enums(self):
        """Gets the enums of this Service.

        A list of all enum types included in this API service. Enums referenced directly or indirectly by the `apis` are automatically included. Enums which are not referenced but shall be included should be listed here by name by the configuration author. Example: enums: - name: google.someapi.v1.SomeEnum

        :return: The enums of this Service.
        :rtype: List[Enum]
        """
        return self._enums

    @enums.setter
    def enums(self, enums):
        """Sets the enums of this Service.

        A list of all enum types included in this API service. Enums referenced directly or indirectly by the `apis` are automatically included. Enums which are not referenced but shall be included should be listed here by name by the configuration author. Example: enums: - name: google.someapi.v1.SomeEnum

        :param enums: The enums of this Service.
        :type enums: List[Enum]
        """

        self._enums = enums

    @property
    def http(self):
        """Gets the http of this Service.


        :return: The http of this Service.
        :rtype: Http
        """
        return self._http

    @http.setter
    def http(self, http):
        """Sets the http of this Service.


        :param http: The http of this Service.
        :type http: Http
        """

        self._http = http

    @property
    def id(self):
        """Gets the id of this Service.

        A unique ID for a specific instance of this message, typically assigned by the client for tracking purpose. Must be no longer than 63 characters and only lower case letters, digits, '.', '_' and '-' are allowed. If empty, the server may choose to generate one instead.

        :return: The id of this Service.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Service.

        A unique ID for a specific instance of this message, typically assigned by the client for tracking purpose. Must be no longer than 63 characters and only lower case letters, digits, '.', '_' and '-' are allowed. If empty, the server may choose to generate one instead.

        :param id: The id of this Service.
        :type id: str
        """

        self._id = id

    @property
    def logging(self):
        """Gets the logging of this Service.


        :return: The logging of this Service.
        :rtype: Logging
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this Service.


        :param logging: The logging of this Service.
        :type logging: Logging
        """

        self._logging = logging

    @property
    def logs(self):
        """Gets the logs of this Service.

        Defines the logs used by this service.

        :return: The logs of this Service.
        :rtype: List[LogDescriptor]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this Service.

        Defines the logs used by this service.

        :param logs: The logs of this Service.
        :type logs: List[LogDescriptor]
        """

        self._logs = logs

    @property
    def metrics(self):
        """Gets the metrics of this Service.

        Defines the metrics used by this service.

        :return: The metrics of this Service.
        :rtype: List[MetricDescriptor]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this Service.

        Defines the metrics used by this service.

        :param metrics: The metrics of this Service.
        :type metrics: List[MetricDescriptor]
        """

        self._metrics = metrics

    @property
    def monitored_resources(self):
        """Gets the monitored_resources of this Service.

        Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations.

        :return: The monitored_resources of this Service.
        :rtype: List[MonitoredResourceDescriptor]
        """
        return self._monitored_resources

    @monitored_resources.setter
    def monitored_resources(self, monitored_resources):
        """Sets the monitored_resources of this Service.

        Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations.

        :param monitored_resources: The monitored_resources of this Service.
        :type monitored_resources: List[MonitoredResourceDescriptor]
        """

        self._monitored_resources = monitored_resources

    @property
    def monitoring(self):
        """Gets the monitoring of this Service.


        :return: The monitoring of this Service.
        :rtype: Monitoring
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring):
        """Sets the monitoring of this Service.


        :param monitoring: The monitoring of this Service.
        :type monitoring: Monitoring
        """

        self._monitoring = monitoring

    @property
    def name(self):
        """Gets the name of this Service.

        The service name, which is a DNS-like logical identifier for the service, such as `calendar.googleapis.com`. The service name typically goes through DNS verification to make sure the owner of the service also owns the DNS name.

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.

        The service name, which is a DNS-like logical identifier for the service, such as `calendar.googleapis.com`. The service name typically goes through DNS verification to make sure the owner of the service also owns the DNS name.

        :param name: The name of this Service.
        :type name: str
        """

        self._name = name

    @property
    def producer_project_id(self):
        """Gets the producer_project_id of this Service.

        The Google project that owns this service.

        :return: The producer_project_id of this Service.
        :rtype: str
        """
        return self._producer_project_id

    @producer_project_id.setter
    def producer_project_id(self, producer_project_id):
        """Sets the producer_project_id of this Service.

        The Google project that owns this service.

        :param producer_project_id: The producer_project_id of this Service.
        :type producer_project_id: str
        """

        self._producer_project_id = producer_project_id

    @property
    def publishing(self):
        """Gets the publishing of this Service.


        :return: The publishing of this Service.
        :rtype: Publishing
        """
        return self._publishing

    @publishing.setter
    def publishing(self, publishing):
        """Sets the publishing of this Service.


        :param publishing: The publishing of this Service.
        :type publishing: Publishing
        """

        self._publishing = publishing

    @property
    def quota(self):
        """Gets the quota of this Service.


        :return: The quota of this Service.
        :rtype: Quota
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this Service.


        :param quota: The quota of this Service.
        :type quota: Quota
        """

        self._quota = quota

    @property
    def source_info(self):
        """Gets the source_info of this Service.


        :return: The source_info of this Service.
        :rtype: SourceInfo
        """
        return self._source_info

    @source_info.setter
    def source_info(self, source_info):
        """Sets the source_info of this Service.


        :param source_info: The source_info of this Service.
        :type source_info: SourceInfo
        """

        self._source_info = source_info

    @property
    def system_parameters(self):
        """Gets the system_parameters of this Service.


        :return: The system_parameters of this Service.
        :rtype: SystemParameters
        """
        return self._system_parameters

    @system_parameters.setter
    def system_parameters(self, system_parameters):
        """Sets the system_parameters of this Service.


        :param system_parameters: The system_parameters of this Service.
        :type system_parameters: SystemParameters
        """

        self._system_parameters = system_parameters

    @property
    def system_types(self):
        """Gets the system_types of this Service.

        A list of all proto message types included in this API service. It serves similar purpose as [google.api.Service.types], except that these types are not needed by user-defined APIs. Therefore, they will not show up in the generated discovery doc. This field should only be used to define system APIs in ESF.

        :return: The system_types of this Service.
        :rtype: List[Type]
        """
        return self._system_types

    @system_types.setter
    def system_types(self, system_types):
        """Sets the system_types of this Service.

        A list of all proto message types included in this API service. It serves similar purpose as [google.api.Service.types], except that these types are not needed by user-defined APIs. Therefore, they will not show up in the generated discovery doc. This field should only be used to define system APIs in ESF.

        :param system_types: The system_types of this Service.
        :type system_types: List[Type]
        """

        self._system_types = system_types

    @property
    def title(self):
        """Gets the title of this Service.

        The product title for this service, it is the name displayed in Google Cloud Console.

        :return: The title of this Service.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Service.

        The product title for this service, it is the name displayed in Google Cloud Console.

        :param title: The title of this Service.
        :type title: str
        """

        self._title = title

    @property
    def types(self):
        """Gets the types of this Service.

        A list of all proto message types included in this API service. Types referenced directly or indirectly by the `apis` are automatically included. Messages which are not referenced but shall be included, such as types used by the `google.protobuf.Any` type, should be listed here by name by the configuration author. Example: types: - name: google.protobuf.Int32

        :return: The types of this Service.
        :rtype: List[Type]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this Service.

        A list of all proto message types included in this API service. Types referenced directly or indirectly by the `apis` are automatically included. Messages which are not referenced but shall be included, such as types used by the `google.protobuf.Any` type, should be listed here by name by the configuration author. Example: types: - name: google.protobuf.Int32

        :param types: The types of this Service.
        :type types: List[Type]
        """

        self._types = types

    @property
    def usage(self):
        """Gets the usage of this Service.


        :return: The usage of this Service.
        :rtype: Usage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this Service.


        :param usage: The usage of this Service.
        :type usage: Usage
        """

        self._usage = usage
