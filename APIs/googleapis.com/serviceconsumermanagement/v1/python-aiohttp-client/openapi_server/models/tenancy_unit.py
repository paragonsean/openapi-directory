# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tenant_resource import TenantResource
from openapi_server import util


class TenancyUnit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer: str=None, create_time: str=None, name: str=None, service: str=None, tenant_resources: List[TenantResource]=None):
        """TenancyUnit - a model defined in OpenAPI

        :param consumer: The consumer of this TenancyUnit.
        :param create_time: The create_time of this TenancyUnit.
        :param name: The name of this TenancyUnit.
        :param service: The service of this TenancyUnit.
        :param tenant_resources: The tenant_resources of this TenancyUnit.
        """
        self.openapi_types = {
            'consumer': str,
            'create_time': str,
            'name': str,
            'service': str,
            'tenant_resources': List[TenantResource]
        }

        self.attribute_map = {
            'consumer': 'consumer',
            'create_time': 'createTime',
            'name': 'name',
            'service': 'service',
            'tenant_resources': 'tenantResources'
        }

        self._consumer = consumer
        self._create_time = create_time
        self._name = name
        self._service = service
        self._tenant_resources = tenant_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TenancyUnit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TenancyUnit of this TenancyUnit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer(self):
        """Gets the consumer of this TenancyUnit.

        Output only. @OutputOnly Cloud resource name of the consumer of this service. For example 'projects/123456'.

        :return: The consumer of this TenancyUnit.
        :rtype: str
        """
        return self._consumer

    @consumer.setter
    def consumer(self, consumer):
        """Sets the consumer of this TenancyUnit.

        Output only. @OutputOnly Cloud resource name of the consumer of this service. For example 'projects/123456'.

        :param consumer: The consumer of this TenancyUnit.
        :type consumer: str
        """

        self._consumer = consumer

    @property
    def create_time(self):
        """Gets the create_time of this TenancyUnit.

        Output only. @OutputOnly The time this tenancy unit was created.

        :return: The create_time of this TenancyUnit.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this TenancyUnit.

        Output only. @OutputOnly The time this tenancy unit was created.

        :param create_time: The create_time of this TenancyUnit.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def name(self):
        """Gets the name of this TenancyUnit.

        Globally unique identifier of this tenancy unit \"services/{service}/{collection id}/{resource id}/tenancyUnits/{unit}\"

        :return: The name of this TenancyUnit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TenancyUnit.

        Globally unique identifier of this tenancy unit \"services/{service}/{collection id}/{resource id}/tenancyUnits/{unit}\"

        :param name: The name of this TenancyUnit.
        :type name: str
        """

        self._name = name

    @property
    def service(self):
        """Gets the service of this TenancyUnit.

        Output only. Google Cloud API name of the managed service owning this tenancy unit. For example 'serviceconsumermanagement.googleapis.com'.

        :return: The service of this TenancyUnit.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this TenancyUnit.

        Output only. Google Cloud API name of the managed service owning this tenancy unit. For example 'serviceconsumermanagement.googleapis.com'.

        :param service: The service of this TenancyUnit.
        :type service: str
        """

        self._service = service

    @property
    def tenant_resources(self):
        """Gets the tenant_resources of this TenancyUnit.

        Resources constituting the tenancy unit. There can be at most 512 tenant resources in a tenancy unit.

        :return: The tenant_resources of this TenancyUnit.
        :rtype: List[TenantResource]
        """
        return self._tenant_resources

    @tenant_resources.setter
    def tenant_resources(self, tenant_resources):
        """Sets the tenant_resources of this TenancyUnit.

        Resources constituting the tenancy unit. There can be at most 512 tenant resources in a tenancy unit.

        :param tenant_resources: The tenant_resources of this TenancyUnit.
        :type tenant_resources: List[TenantResource]
        """

        self._tenant_resources = tenant_resources
