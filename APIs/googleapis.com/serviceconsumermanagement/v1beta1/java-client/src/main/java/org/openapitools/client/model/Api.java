/*
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Method;
import org.openapitools.client.model.Mixin;
import org.openapitools.client.model.Option;
import org.openapitools.client.model.SourceContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Api is a light-weight descriptor for an API Interface. Interfaces are also described as \&quot;protocol buffer services\&quot; in some contexts, such as by the \&quot;service\&quot; keyword in a .proto file, but they are different from API Services, which represent a concrete implementation of an interface as opposed to simply a description of methods and bindings. They are also sometimes simply referred to as \&quot;APIs\&quot; in other contexts, such as the name of this message itself. See https://cloud.google.com/apis/design/glossary for detailed terminology.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:19.435106-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Api {
  public static final String SERIALIZED_NAME_METHODS = "methods";
  @SerializedName(SERIALIZED_NAME_METHODS)
  private List<Method> methods = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIXINS = "mixins";
  @SerializedName(SERIALIZED_NAME_MIXINS)
  private List<Mixin> mixins = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<Option> options = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_CONTEXT = "sourceContext";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONTEXT)
  private SourceContext sourceContext;

  /**
   * The source syntax of the service.
   */
  @JsonAdapter(SyntaxEnum.Adapter.class)
  public enum SyntaxEnum {
    PROTO2("SYNTAX_PROTO2"),
    
    PROTO3("SYNTAX_PROTO3"),
    
    EDITIONS("SYNTAX_EDITIONS");

    private String value;

    SyntaxEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyntaxEnum fromValue(String value) {
      for (SyntaxEnum b : SyntaxEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyntaxEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyntaxEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyntaxEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyntaxEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SyntaxEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNTAX = "syntax";
  @SerializedName(SERIALIZED_NAME_SYNTAX)
  private SyntaxEnum syntax;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Api() {
  }

  public Api methods(List<Method> methods) {
    this.methods = methods;
    return this;
  }

  public Api addMethodsItem(Method methodsItem) {
    if (this.methods == null) {
      this.methods = new ArrayList<>();
    }
    this.methods.add(methodsItem);
    return this;
  }

  /**
   * The methods of this interface, in unspecified order.
   * @return methods
   */
  @javax.annotation.Nullable
  public List<Method> getMethods() {
    return methods;
  }

  public void setMethods(List<Method> methods) {
    this.methods = methods;
  }


  public Api mixins(List<Mixin> mixins) {
    this.mixins = mixins;
    return this;
  }

  public Api addMixinsItem(Mixin mixinsItem) {
    if (this.mixins == null) {
      this.mixins = new ArrayList<>();
    }
    this.mixins.add(mixinsItem);
    return this;
  }

  /**
   * Included interfaces. See Mixin.
   * @return mixins
   */
  @javax.annotation.Nullable
  public List<Mixin> getMixins() {
    return mixins;
  }

  public void setMixins(List<Mixin> mixins) {
    this.mixins = mixins;
  }


  public Api name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The fully qualified name of this interface, including package name followed by the interface&#39;s simple name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Api options(List<Option> options) {
    this.options = options;
    return this;
  }

  public Api addOptionsItem(Option optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * Any metadata attached to the interface.
   * @return options
   */
  @javax.annotation.Nullable
  public List<Option> getOptions() {
    return options;
  }

  public void setOptions(List<Option> options) {
    this.options = options;
  }


  public Api sourceContext(SourceContext sourceContext) {
    this.sourceContext = sourceContext;
    return this;
  }

  /**
   * Get sourceContext
   * @return sourceContext
   */
  @javax.annotation.Nullable
  public SourceContext getSourceContext() {
    return sourceContext;
  }

  public void setSourceContext(SourceContext sourceContext) {
    this.sourceContext = sourceContext;
  }


  public Api syntax(SyntaxEnum syntax) {
    this.syntax = syntax;
    return this;
  }

  /**
   * The source syntax of the service.
   * @return syntax
   */
  @javax.annotation.Nullable
  public SyntaxEnum getSyntax() {
    return syntax;
  }

  public void setSyntax(SyntaxEnum syntax) {
    this.syntax = syntax;
  }


  public Api version(String version) {
    this.version = version;
    return this;
  }

  /**
   * A version string for this interface. If specified, must have the form &#x60;major-version.minor-version&#x60;, as in &#x60;1.10&#x60;. If the minor version is omitted, it defaults to zero. If the entire version field is empty, the major version is derived from the package name, as outlined below. If the field is not empty, the version in the package name will be verified to be consistent with what is provided here. The versioning schema uses [semantic versioning](http://semver.org) where the major version number indicates a breaking change and the minor version an additive, non-breaking change. Both version numbers are signals to users what to expect from different versions, and should be carefully chosen based on the product plan. The major version is also reflected in the package name of the interface, which must end in &#x60;v&#x60;, as in &#x60;google.feature.v1&#x60;. For major versions 0 and 1, the suffix can be omitted. Zero major versions must only be used for experimental, non-GA interfaces. 
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Api api = (Api) o;
    return Objects.equals(this.methods, api.methods) &&
        Objects.equals(this.mixins, api.mixins) &&
        Objects.equals(this.name, api.name) &&
        Objects.equals(this.options, api.options) &&
        Objects.equals(this.sourceContext, api.sourceContext) &&
        Objects.equals(this.syntax, api.syntax) &&
        Objects.equals(this.version, api.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(methods, mixins, name, options, sourceContext, syntax, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Api {\n");
    sb.append("    methods: ").append(toIndentedString(methods)).append("\n");
    sb.append("    mixins: ").append(toIndentedString(mixins)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    sourceContext: ").append(toIndentedString(sourceContext)).append("\n");
    sb.append("    syntax: ").append(toIndentedString(syntax)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("methods");
    openapiFields.add("mixins");
    openapiFields.add("name");
    openapiFields.add("options");
    openapiFields.add("sourceContext");
    openapiFields.add("syntax");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Api
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Api.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Api is not found in the empty JSON string", Api.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Api.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Api` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("methods") != null && !jsonObj.get("methods").isJsonNull()) {
        JsonArray jsonArraymethods = jsonObj.getAsJsonArray("methods");
        if (jsonArraymethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("methods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `methods` to be an array in the JSON string but got `%s`", jsonObj.get("methods").toString()));
          }

          // validate the optional field `methods` (array)
          for (int i = 0; i < jsonArraymethods.size(); i++) {
            Method.validateJsonElement(jsonArraymethods.get(i));
          };
        }
      }
      if (jsonObj.get("mixins") != null && !jsonObj.get("mixins").isJsonNull()) {
        JsonArray jsonArraymixins = jsonObj.getAsJsonArray("mixins");
        if (jsonArraymixins != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mixins").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mixins` to be an array in the JSON string but got `%s`", jsonObj.get("mixins").toString()));
          }

          // validate the optional field `mixins` (array)
          for (int i = 0; i < jsonArraymixins.size(); i++) {
            Mixin.validateJsonElement(jsonArraymixins.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        if (jsonArrayoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
          }

          // validate the optional field `options` (array)
          for (int i = 0; i < jsonArrayoptions.size(); i++) {
            Option.validateJsonElement(jsonArrayoptions.get(i));
          };
        }
      }
      // validate the optional field `sourceContext`
      if (jsonObj.get("sourceContext") != null && !jsonObj.get("sourceContext").isJsonNull()) {
        SourceContext.validateJsonElement(jsonObj.get("sourceContext"));
      }
      if ((jsonObj.get("syntax") != null && !jsonObj.get("syntax").isJsonNull()) && !jsonObj.get("syntax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syntax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syntax").toString()));
      }
      // validate the optional field `syntax`
      if (jsonObj.get("syntax") != null && !jsonObj.get("syntax").isJsonNull()) {
        SyntaxEnum.validateJsonElement(jsonObj.get("syntax"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Api.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Api' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Api> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Api.class));

       return (TypeAdapter<T>) new TypeAdapter<Api>() {
           @Override
           public void write(JsonWriter out, Api value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Api read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Api given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Api
   * @throws IOException if the JSON string is invalid with respect to Api
   */
  public static Api fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Api.class);
  }

  /**
   * Convert an instance of Api to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

