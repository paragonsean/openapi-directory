/*
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LoggingDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Logging configuration of the service. The following example shows how to configure logs to be sent to the producer and consumer projects. In the example, the &#x60;activity_history&#x60; log is sent to both the producer and consumer projects, whereas the &#x60;purchase_history&#x60; log is only sent to the producer project. monitored_resources: - type: library.googleapis.com/branch labels: - key: /city description: The city where the library branch is located in. - key: /name description: The name of the branch. logs: - name: activity_history labels: - key: /customer_id - name: purchase_history logging: producer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history - purchase_history consumer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:19.435106-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Logging {
  public static final String SERIALIZED_NAME_CONSUMER_DESTINATIONS = "consumerDestinations";
  @SerializedName(SERIALIZED_NAME_CONSUMER_DESTINATIONS)
  private List<LoggingDestination> consumerDestinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCER_DESTINATIONS = "producerDestinations";
  @SerializedName(SERIALIZED_NAME_PRODUCER_DESTINATIONS)
  private List<LoggingDestination> producerDestinations = new ArrayList<>();

  public Logging() {
  }

  public Logging consumerDestinations(List<LoggingDestination> consumerDestinations) {
    this.consumerDestinations = consumerDestinations;
    return this;
  }

  public Logging addConsumerDestinationsItem(LoggingDestination consumerDestinationsItem) {
    if (this.consumerDestinations == null) {
      this.consumerDestinations = new ArrayList<>();
    }
    this.consumerDestinations.add(consumerDestinationsItem);
    return this;
  }

  /**
   * Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
   * @return consumerDestinations
   */
  @javax.annotation.Nullable
  public List<LoggingDestination> getConsumerDestinations() {
    return consumerDestinations;
  }

  public void setConsumerDestinations(List<LoggingDestination> consumerDestinations) {
    this.consumerDestinations = consumerDestinations;
  }


  public Logging producerDestinations(List<LoggingDestination> producerDestinations) {
    this.producerDestinations = producerDestinations;
    return this;
  }

  public Logging addProducerDestinationsItem(LoggingDestination producerDestinationsItem) {
    if (this.producerDestinations == null) {
      this.producerDestinations = new ArrayList<>();
    }
    this.producerDestinations.add(producerDestinationsItem);
    return this;
  }

  /**
   * Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
   * @return producerDestinations
   */
  @javax.annotation.Nullable
  public List<LoggingDestination> getProducerDestinations() {
    return producerDestinations;
  }

  public void setProducerDestinations(List<LoggingDestination> producerDestinations) {
    this.producerDestinations = producerDestinations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Logging logging = (Logging) o;
    return Objects.equals(this.consumerDestinations, logging.consumerDestinations) &&
        Objects.equals(this.producerDestinations, logging.producerDestinations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerDestinations, producerDestinations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Logging {\n");
    sb.append("    consumerDestinations: ").append(toIndentedString(consumerDestinations)).append("\n");
    sb.append("    producerDestinations: ").append(toIndentedString(producerDestinations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumerDestinations");
    openapiFields.add("producerDestinations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Logging
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Logging.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Logging is not found in the empty JSON string", Logging.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Logging.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Logging` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("consumerDestinations") != null && !jsonObj.get("consumerDestinations").isJsonNull()) {
        JsonArray jsonArrayconsumerDestinations = jsonObj.getAsJsonArray("consumerDestinations");
        if (jsonArrayconsumerDestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("consumerDestinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `consumerDestinations` to be an array in the JSON string but got `%s`", jsonObj.get("consumerDestinations").toString()));
          }

          // validate the optional field `consumerDestinations` (array)
          for (int i = 0; i < jsonArrayconsumerDestinations.size(); i++) {
            LoggingDestination.validateJsonElement(jsonArrayconsumerDestinations.get(i));
          };
        }
      }
      if (jsonObj.get("producerDestinations") != null && !jsonObj.get("producerDestinations").isJsonNull()) {
        JsonArray jsonArrayproducerDestinations = jsonObj.getAsJsonArray("producerDestinations");
        if (jsonArrayproducerDestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("producerDestinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `producerDestinations` to be an array in the JSON string but got `%s`", jsonObj.get("producerDestinations").toString()));
          }

          // validate the optional field `producerDestinations` (array)
          for (int i = 0; i < jsonArrayproducerDestinations.size(); i++) {
            LoggingDestination.validateJsonElement(jsonArrayproducerDestinations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Logging.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Logging' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Logging> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Logging.class));

       return (TypeAdapter<T>) new TypeAdapter<Logging>() {
           @Override
           public void write(JsonWriter out, Logging value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Logging read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Logging given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Logging
   * @throws IOException if the JSON string is invalid with respect to Logging
   */
  public static Logging fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Logging.class);
  }

  /**
   * Convert an instance of Logging to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

