/*
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.V1Beta1ProducerQuotaPolicy;
import org.openapitools.client.model.V1Beta1QuotaOverride;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A quota bucket is a quota provisioning unit for a specific set of dimensions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:19.435106-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V1Beta1QuotaBucket {
  public static final String SERIALIZED_NAME_ADMIN_OVERRIDE = "adminOverride";
  @SerializedName(SERIALIZED_NAME_ADMIN_OVERRIDE)
  private V1Beta1QuotaOverride adminOverride;

  public static final String SERIALIZED_NAME_CONSUMER_OVERRIDE = "consumerOverride";
  @SerializedName(SERIALIZED_NAME_CONSUMER_OVERRIDE)
  private V1Beta1QuotaOverride consumerOverride;

  public static final String SERIALIZED_NAME_DEFAULT_LIMIT = "defaultLimit";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LIMIT)
  private String defaultLimit;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Map<String, String> dimensions = new HashMap<>();

  public static final String SERIALIZED_NAME_EFFECTIVE_LIMIT = "effectiveLimit";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_LIMIT)
  private String effectiveLimit;

  public static final String SERIALIZED_NAME_PRODUCER_OVERRIDE = "producerOverride";
  @SerializedName(SERIALIZED_NAME_PRODUCER_OVERRIDE)
  private V1Beta1QuotaOverride producerOverride;

  public static final String SERIALIZED_NAME_PRODUCER_QUOTA_POLICY = "producerQuotaPolicy";
  @SerializedName(SERIALIZED_NAME_PRODUCER_QUOTA_POLICY)
  private V1Beta1ProducerQuotaPolicy producerQuotaPolicy;

  public V1Beta1QuotaBucket() {
  }

  public V1Beta1QuotaBucket adminOverride(V1Beta1QuotaOverride adminOverride) {
    this.adminOverride = adminOverride;
    return this;
  }

  /**
   * Get adminOverride
   * @return adminOverride
   */
  @javax.annotation.Nullable
  public V1Beta1QuotaOverride getAdminOverride() {
    return adminOverride;
  }

  public void setAdminOverride(V1Beta1QuotaOverride adminOverride) {
    this.adminOverride = adminOverride;
  }


  public V1Beta1QuotaBucket consumerOverride(V1Beta1QuotaOverride consumerOverride) {
    this.consumerOverride = consumerOverride;
    return this;
  }

  /**
   * Get consumerOverride
   * @return consumerOverride
   */
  @javax.annotation.Nullable
  public V1Beta1QuotaOverride getConsumerOverride() {
    return consumerOverride;
  }

  public void setConsumerOverride(V1Beta1QuotaOverride consumerOverride) {
    this.consumerOverride = consumerOverride;
  }


  public V1Beta1QuotaBucket defaultLimit(String defaultLimit) {
    this.defaultLimit = defaultLimit;
    return this;
  }

  /**
   * The default limit of this quota bucket, as specified by the service configuration.
   * @return defaultLimit
   */
  @javax.annotation.Nullable
  public String getDefaultLimit() {
    return defaultLimit;
  }

  public void setDefaultLimit(String defaultLimit) {
    this.defaultLimit = defaultLimit;
  }


  public V1Beta1QuotaBucket dimensions(Map<String, String> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public V1Beta1QuotaBucket putDimensionsItem(String key, String dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new HashMap<>();
    }
    this.dimensions.put(key, dimensionsItem);
    return this;
  }

  /**
   * The dimensions of this quota bucket. If this map is empty, this is the global bucket, which is the default quota value applied to all requests that do not have a more specific override. If this map is nonempty, the default limit, effective limit, and quota overrides apply only to requests that have the dimensions given in the map. For example, if the map has key \&quot;region\&quot; and value \&quot;us-east-1\&quot;, then the specified effective limit is only effective in that region, and the specified overrides apply only in that region.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public Map<String, String> getDimensions() {
    return dimensions;
  }

  public void setDimensions(Map<String, String> dimensions) {
    this.dimensions = dimensions;
  }


  public V1Beta1QuotaBucket effectiveLimit(String effectiveLimit) {
    this.effectiveLimit = effectiveLimit;
    return this;
  }

  /**
   * The effective limit of this quota bucket. Equal to default_limit if there are no overrides.
   * @return effectiveLimit
   */
  @javax.annotation.Nullable
  public String getEffectiveLimit() {
    return effectiveLimit;
  }

  public void setEffectiveLimit(String effectiveLimit) {
    this.effectiveLimit = effectiveLimit;
  }


  public V1Beta1QuotaBucket producerOverride(V1Beta1QuotaOverride producerOverride) {
    this.producerOverride = producerOverride;
    return this;
  }

  /**
   * Get producerOverride
   * @return producerOverride
   */
  @javax.annotation.Nullable
  public V1Beta1QuotaOverride getProducerOverride() {
    return producerOverride;
  }

  public void setProducerOverride(V1Beta1QuotaOverride producerOverride) {
    this.producerOverride = producerOverride;
  }


  public V1Beta1QuotaBucket producerQuotaPolicy(V1Beta1ProducerQuotaPolicy producerQuotaPolicy) {
    this.producerQuotaPolicy = producerQuotaPolicy;
    return this;
  }

  /**
   * Get producerQuotaPolicy
   * @return producerQuotaPolicy
   */
  @javax.annotation.Nullable
  public V1Beta1ProducerQuotaPolicy getProducerQuotaPolicy() {
    return producerQuotaPolicy;
  }

  public void setProducerQuotaPolicy(V1Beta1ProducerQuotaPolicy producerQuotaPolicy) {
    this.producerQuotaPolicy = producerQuotaPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1Beta1QuotaBucket v1Beta1QuotaBucket = (V1Beta1QuotaBucket) o;
    return Objects.equals(this.adminOverride, v1Beta1QuotaBucket.adminOverride) &&
        Objects.equals(this.consumerOverride, v1Beta1QuotaBucket.consumerOverride) &&
        Objects.equals(this.defaultLimit, v1Beta1QuotaBucket.defaultLimit) &&
        Objects.equals(this.dimensions, v1Beta1QuotaBucket.dimensions) &&
        Objects.equals(this.effectiveLimit, v1Beta1QuotaBucket.effectiveLimit) &&
        Objects.equals(this.producerOverride, v1Beta1QuotaBucket.producerOverride) &&
        Objects.equals(this.producerQuotaPolicy, v1Beta1QuotaBucket.producerQuotaPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminOverride, consumerOverride, defaultLimit, dimensions, effectiveLimit, producerOverride, producerQuotaPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1Beta1QuotaBucket {\n");
    sb.append("    adminOverride: ").append(toIndentedString(adminOverride)).append("\n");
    sb.append("    consumerOverride: ").append(toIndentedString(consumerOverride)).append("\n");
    sb.append("    defaultLimit: ").append(toIndentedString(defaultLimit)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    effectiveLimit: ").append(toIndentedString(effectiveLimit)).append("\n");
    sb.append("    producerOverride: ").append(toIndentedString(producerOverride)).append("\n");
    sb.append("    producerQuotaPolicy: ").append(toIndentedString(producerQuotaPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminOverride");
    openapiFields.add("consumerOverride");
    openapiFields.add("defaultLimit");
    openapiFields.add("dimensions");
    openapiFields.add("effectiveLimit");
    openapiFields.add("producerOverride");
    openapiFields.add("producerQuotaPolicy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1Beta1QuotaBucket
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1Beta1QuotaBucket.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1Beta1QuotaBucket is not found in the empty JSON string", V1Beta1QuotaBucket.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1Beta1QuotaBucket.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1Beta1QuotaBucket` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adminOverride`
      if (jsonObj.get("adminOverride") != null && !jsonObj.get("adminOverride").isJsonNull()) {
        V1Beta1QuotaOverride.validateJsonElement(jsonObj.get("adminOverride"));
      }
      // validate the optional field `consumerOverride`
      if (jsonObj.get("consumerOverride") != null && !jsonObj.get("consumerOverride").isJsonNull()) {
        V1Beta1QuotaOverride.validateJsonElement(jsonObj.get("consumerOverride"));
      }
      if ((jsonObj.get("defaultLimit") != null && !jsonObj.get("defaultLimit").isJsonNull()) && !jsonObj.get("defaultLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultLimit").toString()));
      }
      if ((jsonObj.get("effectiveLimit") != null && !jsonObj.get("effectiveLimit").isJsonNull()) && !jsonObj.get("effectiveLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveLimit").toString()));
      }
      // validate the optional field `producerOverride`
      if (jsonObj.get("producerOverride") != null && !jsonObj.get("producerOverride").isJsonNull()) {
        V1Beta1QuotaOverride.validateJsonElement(jsonObj.get("producerOverride"));
      }
      // validate the optional field `producerQuotaPolicy`
      if (jsonObj.get("producerQuotaPolicy") != null && !jsonObj.get("producerQuotaPolicy").isJsonNull()) {
        V1Beta1ProducerQuotaPolicy.validateJsonElement(jsonObj.get("producerQuotaPolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1Beta1QuotaBucket.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1Beta1QuotaBucket' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1Beta1QuotaBucket> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1Beta1QuotaBucket.class));

       return (TypeAdapter<T>) new TypeAdapter<V1Beta1QuotaBucket>() {
           @Override
           public void write(JsonWriter out, V1Beta1QuotaBucket value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1Beta1QuotaBucket read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1Beta1QuotaBucket given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1Beta1QuotaBucket
   * @throws IOException if the JSON string is invalid with respect to V1Beta1QuotaBucket
   */
  public static V1Beta1QuotaBucket fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1Beta1QuotaBucket.class);
  }

  /**
   * Convert an instance of V1Beta1QuotaBucket to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

