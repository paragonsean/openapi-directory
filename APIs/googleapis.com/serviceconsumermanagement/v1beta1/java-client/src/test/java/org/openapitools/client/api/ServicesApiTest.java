/*
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.V1Beta1ConsumerQuotaLimit;
import org.openapitools.client.model.V1Beta1ImportProducerOverridesRequest;
import org.openapitools.client.model.V1Beta1ListConsumerQuotaMetricsResponse;
import org.openapitools.client.model.V1Beta1ListProducerOverridesResponse;
import org.openapitools.client.model.V1Beta1QuotaOverride;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServicesApi
 */
@Disabled
public class ServicesApiTest {

    private final ServicesApi api = new ServicesApi();

    /**
     * Create or update multiple producer overrides atomically, all on the same consumer, but on many different metrics or limits. The name field in the quota override message should not be set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        V1Beta1ImportProducerOverridesRequest v1Beta1ImportProducerOverridesRequest = null;
        Operation response = api.serviceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverrides(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, v1Beta1ImportProducerOverridesRequest);
        // TODO: test validations
    }

    /**
     * Retrieves a summary of quota information for a specific quota limit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceconsumermanagementServicesConsumerQuotaMetricsLimitsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String view = null;
        V1Beta1ConsumerQuotaLimit response = api.serviceconsumermanagementServicesConsumerQuotaMetricsLimitsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, view);
        // TODO: test validations
    }

    /**
     * Creates a producer override. A producer override is applied by the owner or administrator of a service to increase or decrease the amount of quota a consumer of the service is allowed to use. To create multiple overrides at once, use ImportProducerOverrides instead. If an override with the specified dimensions already exists, this call will fail. To overwrite an existing override if one is already present (\&quot;upsert\&quot; semantics), use ImportProducerOverrides instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        List<String> forceOnly = null;
        V1Beta1QuotaOverride v1Beta1QuotaOverride = null;
        Operation response = api.serviceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force, forceOnly, v1Beta1QuotaOverride);
        // TODO: test validations
    }

    /**
     * Deletes a producer override.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        List<String> forceOnly = null;
        Operation response = api.serviceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force, forceOnly);
        // TODO: test validations
    }

    /**
     * Lists all producer overrides on this limit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        V1Beta1ListProducerOverridesResponse response = api.serviceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a producer override.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        List<String> forceOnly = null;
        String updateMask = null;
        V1Beta1QuotaOverride v1Beta1QuotaOverride = null;
        Operation response = api.serviceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force, forceOnly, updateMask, v1Beta1QuotaOverride);
        // TODO: test validations
    }

    /**
     * Retrieves a summary of all quota information about this consumer that is visible to the service producer, for each quota metric defined by the service. Each metric includes information about all of its defined limits. Each limit includes the limit configuration (quota unit, preciseness, default value), the current effective limit value, and all of the overrides applied to the limit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceconsumermanagementServicesConsumerQuotaMetricsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        V1Beta1ListConsumerQuotaMetricsResponse response = api.serviceconsumermanagementServicesConsumerQuotaMetricsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, view);
        // TODO: test validations
    }

}
