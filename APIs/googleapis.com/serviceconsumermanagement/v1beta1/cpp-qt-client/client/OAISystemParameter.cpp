/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISystemParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISystemParameter::OAISystemParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISystemParameter::OAISystemParameter() {
    this->initializeModel();
}

OAISystemParameter::~OAISystemParameter() {}

void OAISystemParameter::initializeModel() {

    m_http_header_isSet = false;
    m_http_header_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_query_parameter_isSet = false;
    m_url_query_parameter_isValid = false;
}

void OAISystemParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISystemParameter::fromJsonObject(QJsonObject json) {

    m_http_header_isValid = ::OpenAPI::fromJsonValue(m_http_header, json[QString("httpHeader")]);
    m_http_header_isSet = !json[QString("httpHeader")].isNull() && m_http_header_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_query_parameter_isValid = ::OpenAPI::fromJsonValue(m_url_query_parameter, json[QString("urlQueryParameter")]);
    m_url_query_parameter_isSet = !json[QString("urlQueryParameter")].isNull() && m_url_query_parameter_isValid;
}

QString OAISystemParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISystemParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_http_header_isSet) {
        obj.insert(QString("httpHeader"), ::OpenAPI::toJsonValue(m_http_header));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_query_parameter_isSet) {
        obj.insert(QString("urlQueryParameter"), ::OpenAPI::toJsonValue(m_url_query_parameter));
    }
    return obj;
}

QString OAISystemParameter::getHttpHeader() const {
    return m_http_header;
}
void OAISystemParameter::setHttpHeader(const QString &http_header) {
    m_http_header = http_header;
    m_http_header_isSet = true;
}

bool OAISystemParameter::is_http_header_Set() const{
    return m_http_header_isSet;
}

bool OAISystemParameter::is_http_header_Valid() const{
    return m_http_header_isValid;
}

QString OAISystemParameter::getName() const {
    return m_name;
}
void OAISystemParameter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISystemParameter::is_name_Set() const{
    return m_name_isSet;
}

bool OAISystemParameter::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISystemParameter::getUrlQueryParameter() const {
    return m_url_query_parameter;
}
void OAISystemParameter::setUrlQueryParameter(const QString &url_query_parameter) {
    m_url_query_parameter = url_query_parameter;
    m_url_query_parameter_isSet = true;
}

bool OAISystemParameter::is_url_query_parameter_Set() const{
    return m_url_query_parameter_isSet;
}

bool OAISystemParameter::is_url_query_parameter_Valid() const{
    return m_url_query_parameter_isValid;
}

bool OAISystemParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_query_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISystemParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
