/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQuota.h
 *
 * Quota configuration helps to achieve fairness and budgeting in service usage. The metric based quota configuration works this way: - The service configuration defines a set of metrics. - For API calls, the quota.metric_rules maps methods to metrics with corresponding costs. - The quota.limits defines limits on the metrics, which will be used for quota checks at runtime. An example quota configuration in yaml format: quota: limits: - name: apiWriteQpsPerProject metric: library.googleapis.com/write_calls unit: \&quot;1/min/{project}\&quot; # rate limit for consumer projects values: STANDARD: 10000 (The metric rules bind all methods to the read_calls metric, except for the UpdateBook and DeleteBook methods. These two methods are mapped to the write_calls metric, with the UpdateBook method consuming at twice rate as the DeleteBook method.) metric_rules: - selector: \&quot;*\&quot; metric_costs: library.googleapis.com/read_calls: 1 - selector: google.example.library.v1.LibraryService.UpdateBook metric_costs: library.googleapis.com/write_calls: 2 - selector: google.example.library.v1.LibraryService.DeleteBook metric_costs: library.googleapis.com/write_calls: 1 Corresponding Metric definition: metrics: - name: library.googleapis.com/read_calls display_name: Read requests metric_kind: DELTA value_type: INT64 - name: library.googleapis.com/write_calls display_name: Write requests metric_kind: DELTA value_type: INT64 
 */

#ifndef OAIQuota_H
#define OAIQuota_H

#include <QJsonObject>

#include "OAIMetricRule.h"
#include "OAIQuotaLimit.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIQuotaLimit;
class OAIMetricRule;

class OAIQuota : public OAIObject {
public:
    OAIQuota();
    OAIQuota(QString json);
    ~OAIQuota() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIQuotaLimit> getLimits() const;
    void setLimits(const QList<OAIQuotaLimit> &limits);
    bool is_limits_Set() const;
    bool is_limits_Valid() const;

    QList<OAIMetricRule> getMetricRules() const;
    void setMetricRules(const QList<OAIMetricRule> &metric_rules);
    bool is_metric_rules_Set() const;
    bool is_metric_rules_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIQuotaLimit> m_limits;
    bool m_limits_isSet;
    bool m_limits_isValid;

    QList<OAIMetricRule> m_metric_rules;
    bool m_metric_rules_isSet;
    bool m_metric_rules_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQuota)

#endif // OAIQuota_H
