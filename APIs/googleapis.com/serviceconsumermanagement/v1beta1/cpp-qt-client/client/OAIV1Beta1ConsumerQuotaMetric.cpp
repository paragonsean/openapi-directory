/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1Beta1ConsumerQuotaMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV1Beta1ConsumerQuotaMetric::OAIV1Beta1ConsumerQuotaMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV1Beta1ConsumerQuotaMetric::OAIV1Beta1ConsumerQuotaMetric() {
    this->initializeModel();
}

OAIV1Beta1ConsumerQuotaMetric::~OAIV1Beta1ConsumerQuotaMetric() {}

void OAIV1Beta1ConsumerQuotaMetric::initializeModel() {

    m_consumer_quota_limits_isSet = false;
    m_consumer_quota_limits_isValid = false;

    m_descendant_consumer_quota_limits_isSet = false;
    m_descendant_consumer_quota_limits_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIV1Beta1ConsumerQuotaMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV1Beta1ConsumerQuotaMetric::fromJsonObject(QJsonObject json) {

    m_consumer_quota_limits_isValid = ::OpenAPI::fromJsonValue(m_consumer_quota_limits, json[QString("consumerQuotaLimits")]);
    m_consumer_quota_limits_isSet = !json[QString("consumerQuotaLimits")].isNull() && m_consumer_quota_limits_isValid;

    m_descendant_consumer_quota_limits_isValid = ::OpenAPI::fromJsonValue(m_descendant_consumer_quota_limits, json[QString("descendantConsumerQuotaLimits")]);
    m_descendant_consumer_quota_limits_isSet = !json[QString("descendantConsumerQuotaLimits")].isNull() && m_descendant_consumer_quota_limits_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIV1Beta1ConsumerQuotaMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV1Beta1ConsumerQuotaMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_quota_limits.size() > 0) {
        obj.insert(QString("consumerQuotaLimits"), ::OpenAPI::toJsonValue(m_consumer_quota_limits));
    }
    if (m_descendant_consumer_quota_limits.size() > 0) {
        obj.insert(QString("descendantConsumerQuotaLimits"), ::OpenAPI::toJsonValue(m_descendant_consumer_quota_limits));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_metric_isSet) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QList<OAIV1Beta1ConsumerQuotaLimit> OAIV1Beta1ConsumerQuotaMetric::getConsumerQuotaLimits() const {
    return m_consumer_quota_limits;
}
void OAIV1Beta1ConsumerQuotaMetric::setConsumerQuotaLimits(const QList<OAIV1Beta1ConsumerQuotaLimit> &consumer_quota_limits) {
    m_consumer_quota_limits = consumer_quota_limits;
    m_consumer_quota_limits_isSet = true;
}

bool OAIV1Beta1ConsumerQuotaMetric::is_consumer_quota_limits_Set() const{
    return m_consumer_quota_limits_isSet;
}

bool OAIV1Beta1ConsumerQuotaMetric::is_consumer_quota_limits_Valid() const{
    return m_consumer_quota_limits_isValid;
}

QList<OAIV1Beta1ConsumerQuotaLimit> OAIV1Beta1ConsumerQuotaMetric::getDescendantConsumerQuotaLimits() const {
    return m_descendant_consumer_quota_limits;
}
void OAIV1Beta1ConsumerQuotaMetric::setDescendantConsumerQuotaLimits(const QList<OAIV1Beta1ConsumerQuotaLimit> &descendant_consumer_quota_limits) {
    m_descendant_consumer_quota_limits = descendant_consumer_quota_limits;
    m_descendant_consumer_quota_limits_isSet = true;
}

bool OAIV1Beta1ConsumerQuotaMetric::is_descendant_consumer_quota_limits_Set() const{
    return m_descendant_consumer_quota_limits_isSet;
}

bool OAIV1Beta1ConsumerQuotaMetric::is_descendant_consumer_quota_limits_Valid() const{
    return m_descendant_consumer_quota_limits_isValid;
}

QString OAIV1Beta1ConsumerQuotaMetric::getDisplayName() const {
    return m_display_name;
}
void OAIV1Beta1ConsumerQuotaMetric::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIV1Beta1ConsumerQuotaMetric::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIV1Beta1ConsumerQuotaMetric::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIV1Beta1ConsumerQuotaMetric::getMetric() const {
    return m_metric;
}
void OAIV1Beta1ConsumerQuotaMetric::setMetric(const QString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIV1Beta1ConsumerQuotaMetric::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIV1Beta1ConsumerQuotaMetric::is_metric_Valid() const{
    return m_metric_isValid;
}

QString OAIV1Beta1ConsumerQuotaMetric::getName() const {
    return m_name;
}
void OAIV1Beta1ConsumerQuotaMetric::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIV1Beta1ConsumerQuotaMetric::is_name_Set() const{
    return m_name_isSet;
}

bool OAIV1Beta1ConsumerQuotaMetric::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIV1Beta1ConsumerQuotaMetric::getUnit() const {
    return m_unit;
}
void OAIV1Beta1ConsumerQuotaMetric::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIV1Beta1ConsumerQuotaMetric::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIV1Beta1ConsumerQuotaMetric::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIV1Beta1ConsumerQuotaMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_quota_limits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_descendant_consumer_quota_limits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV1Beta1ConsumerQuotaMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
