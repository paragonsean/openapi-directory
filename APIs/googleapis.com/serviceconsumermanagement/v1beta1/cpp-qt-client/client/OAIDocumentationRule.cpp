/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentationRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentationRule::OAIDocumentationRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentationRule::OAIDocumentationRule() {
    this->initializeModel();
}

OAIDocumentationRule::~OAIDocumentationRule() {}

void OAIDocumentationRule::initializeModel() {

    m_deprecation_description_isSet = false;
    m_deprecation_description_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disable_replacement_words_isSet = false;
    m_disable_replacement_words_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;
}

void OAIDocumentationRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentationRule::fromJsonObject(QJsonObject json) {

    m_deprecation_description_isValid = ::OpenAPI::fromJsonValue(m_deprecation_description, json[QString("deprecationDescription")]);
    m_deprecation_description_isSet = !json[QString("deprecationDescription")].isNull() && m_deprecation_description_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disable_replacement_words_isValid = ::OpenAPI::fromJsonValue(m_disable_replacement_words, json[QString("disableReplacementWords")]);
    m_disable_replacement_words_isSet = !json[QString("disableReplacementWords")].isNull() && m_disable_replacement_words_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;
}

QString OAIDocumentationRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentationRule::asJsonObject() const {
    QJsonObject obj;
    if (m_deprecation_description_isSet) {
        obj.insert(QString("deprecationDescription"), ::OpenAPI::toJsonValue(m_deprecation_description));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disable_replacement_words_isSet) {
        obj.insert(QString("disableReplacementWords"), ::OpenAPI::toJsonValue(m_disable_replacement_words));
    }
    if (m_selector_isSet) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    return obj;
}

QString OAIDocumentationRule::getDeprecationDescription() const {
    return m_deprecation_description;
}
void OAIDocumentationRule::setDeprecationDescription(const QString &deprecation_description) {
    m_deprecation_description = deprecation_description;
    m_deprecation_description_isSet = true;
}

bool OAIDocumentationRule::is_deprecation_description_Set() const{
    return m_deprecation_description_isSet;
}

bool OAIDocumentationRule::is_deprecation_description_Valid() const{
    return m_deprecation_description_isValid;
}

QString OAIDocumentationRule::getDescription() const {
    return m_description;
}
void OAIDocumentationRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDocumentationRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDocumentationRule::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDocumentationRule::getDisableReplacementWords() const {
    return m_disable_replacement_words;
}
void OAIDocumentationRule::setDisableReplacementWords(const QString &disable_replacement_words) {
    m_disable_replacement_words = disable_replacement_words;
    m_disable_replacement_words_isSet = true;
}

bool OAIDocumentationRule::is_disable_replacement_words_Set() const{
    return m_disable_replacement_words_isSet;
}

bool OAIDocumentationRule::is_disable_replacement_words_Valid() const{
    return m_disable_replacement_words_isValid;
}

QString OAIDocumentationRule::getSelector() const {
    return m_selector;
}
void OAIDocumentationRule::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIDocumentationRule::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIDocumentationRule::is_selector_Valid() const{
    return m_selector_isValid;
}

bool OAIDocumentationRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deprecation_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_replacement_words_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentationRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
