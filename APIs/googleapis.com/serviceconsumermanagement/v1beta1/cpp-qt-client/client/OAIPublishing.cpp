/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishing::OAIPublishing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishing::OAIPublishing() {
    this->initializeModel();
}

OAIPublishing::~OAIPublishing() {}

void OAIPublishing::initializeModel() {

    m_api_short_name_isSet = false;
    m_api_short_name_isValid = false;

    m_codeowner_github_teams_isSet = false;
    m_codeowner_github_teams_isValid = false;

    m_doc_tag_prefix_isSet = false;
    m_doc_tag_prefix_isValid = false;

    m_documentation_uri_isSet = false;
    m_documentation_uri_isValid = false;

    m_github_label_isSet = false;
    m_github_label_isValid = false;

    m_library_settings_isSet = false;
    m_library_settings_isValid = false;

    m_method_settings_isSet = false;
    m_method_settings_isValid = false;

    m_new_issue_uri_isSet = false;
    m_new_issue_uri_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_proto_reference_documentation_uri_isSet = false;
    m_proto_reference_documentation_uri_isValid = false;

    m_rest_reference_documentation_uri_isSet = false;
    m_rest_reference_documentation_uri_isValid = false;
}

void OAIPublishing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishing::fromJsonObject(QJsonObject json) {

    m_api_short_name_isValid = ::OpenAPI::fromJsonValue(m_api_short_name, json[QString("apiShortName")]);
    m_api_short_name_isSet = !json[QString("apiShortName")].isNull() && m_api_short_name_isValid;

    m_codeowner_github_teams_isValid = ::OpenAPI::fromJsonValue(m_codeowner_github_teams, json[QString("codeownerGithubTeams")]);
    m_codeowner_github_teams_isSet = !json[QString("codeownerGithubTeams")].isNull() && m_codeowner_github_teams_isValid;

    m_doc_tag_prefix_isValid = ::OpenAPI::fromJsonValue(m_doc_tag_prefix, json[QString("docTagPrefix")]);
    m_doc_tag_prefix_isSet = !json[QString("docTagPrefix")].isNull() && m_doc_tag_prefix_isValid;

    m_documentation_uri_isValid = ::OpenAPI::fromJsonValue(m_documentation_uri, json[QString("documentationUri")]);
    m_documentation_uri_isSet = !json[QString("documentationUri")].isNull() && m_documentation_uri_isValid;

    m_github_label_isValid = ::OpenAPI::fromJsonValue(m_github_label, json[QString("githubLabel")]);
    m_github_label_isSet = !json[QString("githubLabel")].isNull() && m_github_label_isValid;

    m_library_settings_isValid = ::OpenAPI::fromJsonValue(m_library_settings, json[QString("librarySettings")]);
    m_library_settings_isSet = !json[QString("librarySettings")].isNull() && m_library_settings_isValid;

    m_method_settings_isValid = ::OpenAPI::fromJsonValue(m_method_settings, json[QString("methodSettings")]);
    m_method_settings_isSet = !json[QString("methodSettings")].isNull() && m_method_settings_isValid;

    m_new_issue_uri_isValid = ::OpenAPI::fromJsonValue(m_new_issue_uri, json[QString("newIssueUri")]);
    m_new_issue_uri_isSet = !json[QString("newIssueUri")].isNull() && m_new_issue_uri_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_proto_reference_documentation_uri_isValid = ::OpenAPI::fromJsonValue(m_proto_reference_documentation_uri, json[QString("protoReferenceDocumentationUri")]);
    m_proto_reference_documentation_uri_isSet = !json[QString("protoReferenceDocumentationUri")].isNull() && m_proto_reference_documentation_uri_isValid;

    m_rest_reference_documentation_uri_isValid = ::OpenAPI::fromJsonValue(m_rest_reference_documentation_uri, json[QString("restReferenceDocumentationUri")]);
    m_rest_reference_documentation_uri_isSet = !json[QString("restReferenceDocumentationUri")].isNull() && m_rest_reference_documentation_uri_isValid;
}

QString OAIPublishing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishing::asJsonObject() const {
    QJsonObject obj;
    if (m_api_short_name_isSet) {
        obj.insert(QString("apiShortName"), ::OpenAPI::toJsonValue(m_api_short_name));
    }
    if (m_codeowner_github_teams.size() > 0) {
        obj.insert(QString("codeownerGithubTeams"), ::OpenAPI::toJsonValue(m_codeowner_github_teams));
    }
    if (m_doc_tag_prefix_isSet) {
        obj.insert(QString("docTagPrefix"), ::OpenAPI::toJsonValue(m_doc_tag_prefix));
    }
    if (m_documentation_uri_isSet) {
        obj.insert(QString("documentationUri"), ::OpenAPI::toJsonValue(m_documentation_uri));
    }
    if (m_github_label_isSet) {
        obj.insert(QString("githubLabel"), ::OpenAPI::toJsonValue(m_github_label));
    }
    if (m_library_settings.size() > 0) {
        obj.insert(QString("librarySettings"), ::OpenAPI::toJsonValue(m_library_settings));
    }
    if (m_method_settings.size() > 0) {
        obj.insert(QString("methodSettings"), ::OpenAPI::toJsonValue(m_method_settings));
    }
    if (m_new_issue_uri_isSet) {
        obj.insert(QString("newIssueUri"), ::OpenAPI::toJsonValue(m_new_issue_uri));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_proto_reference_documentation_uri_isSet) {
        obj.insert(QString("protoReferenceDocumentationUri"), ::OpenAPI::toJsonValue(m_proto_reference_documentation_uri));
    }
    if (m_rest_reference_documentation_uri_isSet) {
        obj.insert(QString("restReferenceDocumentationUri"), ::OpenAPI::toJsonValue(m_rest_reference_documentation_uri));
    }
    return obj;
}

QString OAIPublishing::getApiShortName() const {
    return m_api_short_name;
}
void OAIPublishing::setApiShortName(const QString &api_short_name) {
    m_api_short_name = api_short_name;
    m_api_short_name_isSet = true;
}

bool OAIPublishing::is_api_short_name_Set() const{
    return m_api_short_name_isSet;
}

bool OAIPublishing::is_api_short_name_Valid() const{
    return m_api_short_name_isValid;
}

QList<QString> OAIPublishing::getCodeownerGithubTeams() const {
    return m_codeowner_github_teams;
}
void OAIPublishing::setCodeownerGithubTeams(const QList<QString> &codeowner_github_teams) {
    m_codeowner_github_teams = codeowner_github_teams;
    m_codeowner_github_teams_isSet = true;
}

bool OAIPublishing::is_codeowner_github_teams_Set() const{
    return m_codeowner_github_teams_isSet;
}

bool OAIPublishing::is_codeowner_github_teams_Valid() const{
    return m_codeowner_github_teams_isValid;
}

QString OAIPublishing::getDocTagPrefix() const {
    return m_doc_tag_prefix;
}
void OAIPublishing::setDocTagPrefix(const QString &doc_tag_prefix) {
    m_doc_tag_prefix = doc_tag_prefix;
    m_doc_tag_prefix_isSet = true;
}

bool OAIPublishing::is_doc_tag_prefix_Set() const{
    return m_doc_tag_prefix_isSet;
}

bool OAIPublishing::is_doc_tag_prefix_Valid() const{
    return m_doc_tag_prefix_isValid;
}

QString OAIPublishing::getDocumentationUri() const {
    return m_documentation_uri;
}
void OAIPublishing::setDocumentationUri(const QString &documentation_uri) {
    m_documentation_uri = documentation_uri;
    m_documentation_uri_isSet = true;
}

bool OAIPublishing::is_documentation_uri_Set() const{
    return m_documentation_uri_isSet;
}

bool OAIPublishing::is_documentation_uri_Valid() const{
    return m_documentation_uri_isValid;
}

QString OAIPublishing::getGithubLabel() const {
    return m_github_label;
}
void OAIPublishing::setGithubLabel(const QString &github_label) {
    m_github_label = github_label;
    m_github_label_isSet = true;
}

bool OAIPublishing::is_github_label_Set() const{
    return m_github_label_isSet;
}

bool OAIPublishing::is_github_label_Valid() const{
    return m_github_label_isValid;
}

QList<OAIClientLibrarySettings> OAIPublishing::getLibrarySettings() const {
    return m_library_settings;
}
void OAIPublishing::setLibrarySettings(const QList<OAIClientLibrarySettings> &library_settings) {
    m_library_settings = library_settings;
    m_library_settings_isSet = true;
}

bool OAIPublishing::is_library_settings_Set() const{
    return m_library_settings_isSet;
}

bool OAIPublishing::is_library_settings_Valid() const{
    return m_library_settings_isValid;
}

QList<OAIMethodSettings> OAIPublishing::getMethodSettings() const {
    return m_method_settings;
}
void OAIPublishing::setMethodSettings(const QList<OAIMethodSettings> &method_settings) {
    m_method_settings = method_settings;
    m_method_settings_isSet = true;
}

bool OAIPublishing::is_method_settings_Set() const{
    return m_method_settings_isSet;
}

bool OAIPublishing::is_method_settings_Valid() const{
    return m_method_settings_isValid;
}

QString OAIPublishing::getNewIssueUri() const {
    return m_new_issue_uri;
}
void OAIPublishing::setNewIssueUri(const QString &new_issue_uri) {
    m_new_issue_uri = new_issue_uri;
    m_new_issue_uri_isSet = true;
}

bool OAIPublishing::is_new_issue_uri_Set() const{
    return m_new_issue_uri_isSet;
}

bool OAIPublishing::is_new_issue_uri_Valid() const{
    return m_new_issue_uri_isValid;
}

QString OAIPublishing::getOrganization() const {
    return m_organization;
}
void OAIPublishing::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIPublishing::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIPublishing::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIPublishing::getProtoReferenceDocumentationUri() const {
    return m_proto_reference_documentation_uri;
}
void OAIPublishing::setProtoReferenceDocumentationUri(const QString &proto_reference_documentation_uri) {
    m_proto_reference_documentation_uri = proto_reference_documentation_uri;
    m_proto_reference_documentation_uri_isSet = true;
}

bool OAIPublishing::is_proto_reference_documentation_uri_Set() const{
    return m_proto_reference_documentation_uri_isSet;
}

bool OAIPublishing::is_proto_reference_documentation_uri_Valid() const{
    return m_proto_reference_documentation_uri_isValid;
}

QString OAIPublishing::getRestReferenceDocumentationUri() const {
    return m_rest_reference_documentation_uri;
}
void OAIPublishing::setRestReferenceDocumentationUri(const QString &rest_reference_documentation_uri) {
    m_rest_reference_documentation_uri = rest_reference_documentation_uri;
    m_rest_reference_documentation_uri_isSet = true;
}

bool OAIPublishing::is_rest_reference_documentation_uri_Set() const{
    return m_rest_reference_documentation_uri_isSet;
}

bool OAIPublishing::is_rest_reference_documentation_uri_Valid() const{
    return m_rest_reference_documentation_uri_isValid;
}

bool OAIPublishing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codeowner_github_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_tag_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_github_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_library_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_issue_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proto_reference_documentation_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rest_reference_documentation_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
