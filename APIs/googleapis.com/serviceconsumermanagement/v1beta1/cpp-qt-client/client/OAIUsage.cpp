/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsage::OAIUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsage::OAIUsage() {
    this->initializeModel();
}

OAIUsage::~OAIUsage() {}

void OAIUsage::initializeModel() {

    m_producer_notification_channel_isSet = false;
    m_producer_notification_channel_isValid = false;

    m_requirements_isSet = false;
    m_requirements_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;
}

void OAIUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsage::fromJsonObject(QJsonObject json) {

    m_producer_notification_channel_isValid = ::OpenAPI::fromJsonValue(m_producer_notification_channel, json[QString("producerNotificationChannel")]);
    m_producer_notification_channel_isSet = !json[QString("producerNotificationChannel")].isNull() && m_producer_notification_channel_isValid;

    m_requirements_isValid = ::OpenAPI::fromJsonValue(m_requirements, json[QString("requirements")]);
    m_requirements_isSet = !json[QString("requirements")].isNull() && m_requirements_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;
}

QString OAIUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_producer_notification_channel_isSet) {
        obj.insert(QString("producerNotificationChannel"), ::OpenAPI::toJsonValue(m_producer_notification_channel));
    }
    if (m_requirements.size() > 0) {
        obj.insert(QString("requirements"), ::OpenAPI::toJsonValue(m_requirements));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    return obj;
}

QString OAIUsage::getProducerNotificationChannel() const {
    return m_producer_notification_channel;
}
void OAIUsage::setProducerNotificationChannel(const QString &producer_notification_channel) {
    m_producer_notification_channel = producer_notification_channel;
    m_producer_notification_channel_isSet = true;
}

bool OAIUsage::is_producer_notification_channel_Set() const{
    return m_producer_notification_channel_isSet;
}

bool OAIUsage::is_producer_notification_channel_Valid() const{
    return m_producer_notification_channel_isValid;
}

QList<QString> OAIUsage::getRequirements() const {
    return m_requirements;
}
void OAIUsage::setRequirements(const QList<QString> &requirements) {
    m_requirements = requirements;
    m_requirements_isSet = true;
}

bool OAIUsage::is_requirements_Set() const{
    return m_requirements_isSet;
}

bool OAIUsage::is_requirements_Valid() const{
    return m_requirements_isValid;
}

QList<OAIUsageRule> OAIUsage::getRules() const {
    return m_rules;
}
void OAIUsage::setRules(const QList<OAIUsageRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIUsage::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIUsage::is_rules_Valid() const{
    return m_rules_isValid;
}

bool OAIUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_producer_notification_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requirements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
