/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPage::OAIPage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPage::OAIPage() {
    this->initializeModel();
}

OAIPage::~OAIPage() {}

void OAIPage::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_subpages_isSet = false;
    m_subpages_isValid = false;
}

void OAIPage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPage::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_subpages_isValid = ::OpenAPI::fromJsonValue(m_subpages, json[QString("subpages")]);
    m_subpages_isSet = !json[QString("subpages")].isNull() && m_subpages_isValid;
}

QString OAIPage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPage::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_subpages.size() > 0) {
        obj.insert(QString("subpages"), ::OpenAPI::toJsonValue(m_subpages));
    }
    return obj;
}

QString OAIPage::getContent() const {
    return m_content;
}
void OAIPage::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIPage::is_content_Set() const{
    return m_content_isSet;
}

bool OAIPage::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIPage::getName() const {
    return m_name;
}
void OAIPage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPage::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPage> OAIPage::getSubpages() const {
    return m_subpages;
}
void OAIPage::setSubpages(const QList<OAIPage> &subpages) {
    m_subpages = subpages;
    m_subpages_isSet = true;
}

bool OAIPage::is_subpages_Set() const{
    return m_subpages_isSet;
}

bool OAIPage::is_subpages_Valid() const{
    return m_subpages_isValid;
}

bool OAIPage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subpages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
