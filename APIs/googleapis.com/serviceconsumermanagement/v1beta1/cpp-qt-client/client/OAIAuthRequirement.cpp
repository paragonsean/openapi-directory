/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthRequirement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthRequirement::OAIAuthRequirement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthRequirement::OAIAuthRequirement() {
    this->initializeModel();
}

OAIAuthRequirement::~OAIAuthRequirement() {}

void OAIAuthRequirement::initializeModel() {

    m_audiences_isSet = false;
    m_audiences_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;
}

void OAIAuthRequirement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthRequirement::fromJsonObject(QJsonObject json) {

    m_audiences_isValid = ::OpenAPI::fromJsonValue(m_audiences, json[QString("audiences")]);
    m_audiences_isSet = !json[QString("audiences")].isNull() && m_audiences_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;
}

QString OAIAuthRequirement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthRequirement::asJsonObject() const {
    QJsonObject obj;
    if (m_audiences_isSet) {
        obj.insert(QString("audiences"), ::OpenAPI::toJsonValue(m_audiences));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    return obj;
}

QString OAIAuthRequirement::getAudiences() const {
    return m_audiences;
}
void OAIAuthRequirement::setAudiences(const QString &audiences) {
    m_audiences = audiences;
    m_audiences_isSet = true;
}

bool OAIAuthRequirement::is_audiences_Set() const{
    return m_audiences_isSet;
}

bool OAIAuthRequirement::is_audiences_Valid() const{
    return m_audiences_isValid;
}

QString OAIAuthRequirement::getProviderId() const {
    return m_provider_id;
}
void OAIAuthRequirement::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIAuthRequirement::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIAuthRequirement::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

bool OAIAuthRequirement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audiences_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthRequirement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
