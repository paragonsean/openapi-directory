/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServicesApi_H
#define OAI_OAIServicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOperation.h"
#include "OAIV1Beta1ConsumerQuotaLimit.h"
#include "OAIV1Beta1ImportProducerOverridesRequest.h"
#include "OAIV1Beta1ListConsumerQuotaMetricsResponse.h"
#include "OAIV1Beta1ListProducerOverridesResponse.h"
#include "OAIV1Beta1QuotaOverride.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServicesApi : public QObject {
    Q_OBJECT

public:
    OAIServicesApi(const int timeOut = 0);
    ~OAIServicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oaiv1_beta1_import_producer_overrides_request OAIV1Beta1ImportProducerOverridesRequest [optional]
    */
    virtual void serviceconsumermanagement_services_consumerQuotaMetrics_importProducerOverrides(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIV1Beta1ImportProducerOverridesRequest> &oaiv1_beta1_import_producer_overrides_request = ::OpenAPI::OptionalParam<OAIV1Beta1ImportProducerOverridesRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void serviceconsumermanagement_services_consumerQuotaMetrics_limits_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  force bool [optional]
    * @param[in]  force_only QList<QString> [optional]
    * @param[in]  oaiv1_beta1_quota_override OAIV1Beta1QuotaOverride [optional]
    */
    virtual void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &force_only = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIV1Beta1QuotaOverride> &oaiv1_beta1_quota_override = ::OpenAPI::OptionalParam<OAIV1Beta1QuotaOverride>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  force bool [optional]
    * @param[in]  force_only QList<QString> [optional]
    */
    virtual void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &force_only = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  force bool [optional]
    * @param[in]  force_only QList<QString> [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oaiv1_beta1_quota_override OAIV1Beta1QuotaOverride [optional]
    */
    virtual void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &force_only = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIV1Beta1QuotaOverride> &oaiv1_beta1_quota_override = ::OpenAPI::OptionalParam<OAIV1Beta1QuotaOverride>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void serviceconsumermanagement_services_consumerQuotaMetrics_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serviceconsumermanagement_services_consumerQuotaMetrics_importProducerOverridesCallback(OAIHttpRequestWorker *worker);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_getCallback(OAIHttpRequestWorker *worker);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_createCallback(OAIHttpRequestWorker *worker);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_deleteCallback(OAIHttpRequestWorker *worker);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_listCallback(OAIHttpRequestWorker *worker);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_patchCallback(OAIHttpRequestWorker *worker);
    void serviceconsumermanagement_services_consumerQuotaMetrics_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serviceconsumermanagement_services_consumerQuotaMetrics_importProducerOverridesSignal(OAIOperation summary);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_getSignal(OAIV1Beta1ConsumerQuotaLimit summary);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_createSignal(OAIOperation summary);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_deleteSignal(OAIOperation summary);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_listSignal(OAIV1Beta1ListProducerOverridesResponse summary);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_patchSignal(OAIOperation summary);
    void serviceconsumermanagement_services_consumerQuotaMetrics_listSignal(OAIV1Beta1ListConsumerQuotaMetricsResponse summary);


    void serviceconsumermanagement_services_consumerQuotaMetrics_importProducerOverridesSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_getSignalFull(OAIHttpRequestWorker *worker, OAIV1Beta1ConsumerQuotaLimit summary);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_deleteSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_listSignalFull(OAIHttpRequestWorker *worker, OAIV1Beta1ListProducerOverridesResponse summary);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_patchSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void serviceconsumermanagement_services_consumerQuotaMetrics_listSignalFull(OAIHttpRequestWorker *worker, OAIV1Beta1ListConsumerQuotaMetricsResponse summary);

    Q_DECL_DEPRECATED_X("Use serviceconsumermanagement_services_consumerQuotaMetrics_importProducerOverridesSignalError() instead")
    void serviceconsumermanagement_services_consumerQuotaMetrics_importProducerOverridesSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceconsumermanagement_services_consumerQuotaMetrics_importProducerOverridesSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceconsumermanagement_services_consumerQuotaMetrics_limits_getSignalError() instead")
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_getSignalE(OAIV1Beta1ConsumerQuotaLimit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_getSignalError(OAIV1Beta1ConsumerQuotaLimit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_createSignalError() instead")
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_deleteSignalError() instead")
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_deleteSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_deleteSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_listSignalError() instead")
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_listSignalE(OAIV1Beta1ListProducerOverridesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_listSignalError(OAIV1Beta1ListProducerOverridesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_patchSignalError() instead")
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_patchSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_patchSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceconsumermanagement_services_consumerQuotaMetrics_listSignalError() instead")
    void serviceconsumermanagement_services_consumerQuotaMetrics_listSignalE(OAIV1Beta1ListConsumerQuotaMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceconsumermanagement_services_consumerQuotaMetrics_listSignalError(OAIV1Beta1ListConsumerQuotaMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serviceconsumermanagement_services_consumerQuotaMetrics_importProducerOverridesSignalErrorFull() instead")
    void serviceconsumermanagement_services_consumerQuotaMetrics_importProducerOverridesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceconsumermanagement_services_consumerQuotaMetrics_importProducerOverridesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceconsumermanagement_services_consumerQuotaMetrics_limits_getSignalErrorFull() instead")
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_createSignalErrorFull() instead")
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_deleteSignalErrorFull() instead")
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_listSignalErrorFull() instead")
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_patchSignalErrorFull() instead")
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceconsumermanagement_services_consumerQuotaMetrics_limits_producerOverrides_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceconsumermanagement_services_consumerQuotaMetrics_listSignalErrorFull() instead")
    void serviceconsumermanagement_services_consumerQuotaMetrics_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceconsumermanagement_services_consumerQuotaMetrics_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
