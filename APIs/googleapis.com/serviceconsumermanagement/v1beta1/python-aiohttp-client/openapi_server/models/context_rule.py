# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContextRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_request_extensions: List[str]=None, allowed_response_extensions: List[str]=None, provided: List[str]=None, requested: List[str]=None, selector: str=None):
        """ContextRule - a model defined in OpenAPI

        :param allowed_request_extensions: The allowed_request_extensions of this ContextRule.
        :param allowed_response_extensions: The allowed_response_extensions of this ContextRule.
        :param provided: The provided of this ContextRule.
        :param requested: The requested of this ContextRule.
        :param selector: The selector of this ContextRule.
        """
        self.openapi_types = {
            'allowed_request_extensions': List[str],
            'allowed_response_extensions': List[str],
            'provided': List[str],
            'requested': List[str],
            'selector': str
        }

        self.attribute_map = {
            'allowed_request_extensions': 'allowedRequestExtensions',
            'allowed_response_extensions': 'allowedResponseExtensions',
            'provided': 'provided',
            'requested': 'requested',
            'selector': 'selector'
        }

        self._allowed_request_extensions = allowed_request_extensions
        self._allowed_response_extensions = allowed_response_extensions
        self._provided = provided
        self._requested = requested
        self._selector = selector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContextRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContextRule of this ContextRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_request_extensions(self):
        """Gets the allowed_request_extensions of this ContextRule.

        A list of full type names or extension IDs of extensions allowed in grpc side channel from client to backend.

        :return: The allowed_request_extensions of this ContextRule.
        :rtype: List[str]
        """
        return self._allowed_request_extensions

    @allowed_request_extensions.setter
    def allowed_request_extensions(self, allowed_request_extensions):
        """Sets the allowed_request_extensions of this ContextRule.

        A list of full type names or extension IDs of extensions allowed in grpc side channel from client to backend.

        :param allowed_request_extensions: The allowed_request_extensions of this ContextRule.
        :type allowed_request_extensions: List[str]
        """

        self._allowed_request_extensions = allowed_request_extensions

    @property
    def allowed_response_extensions(self):
        """Gets the allowed_response_extensions of this ContextRule.

        A list of full type names or extension IDs of extensions allowed in grpc side channel from backend to client.

        :return: The allowed_response_extensions of this ContextRule.
        :rtype: List[str]
        """
        return self._allowed_response_extensions

    @allowed_response_extensions.setter
    def allowed_response_extensions(self, allowed_response_extensions):
        """Sets the allowed_response_extensions of this ContextRule.

        A list of full type names or extension IDs of extensions allowed in grpc side channel from backend to client.

        :param allowed_response_extensions: The allowed_response_extensions of this ContextRule.
        :type allowed_response_extensions: List[str]
        """

        self._allowed_response_extensions = allowed_response_extensions

    @property
    def provided(self):
        """Gets the provided of this ContextRule.

        A list of full type names of provided contexts.

        :return: The provided of this ContextRule.
        :rtype: List[str]
        """
        return self._provided

    @provided.setter
    def provided(self, provided):
        """Sets the provided of this ContextRule.

        A list of full type names of provided contexts.

        :param provided: The provided of this ContextRule.
        :type provided: List[str]
        """

        self._provided = provided

    @property
    def requested(self):
        """Gets the requested of this ContextRule.

        A list of full type names of requested contexts.

        :return: The requested of this ContextRule.
        :rtype: List[str]
        """
        return self._requested

    @requested.setter
    def requested(self, requested):
        """Sets the requested of this ContextRule.

        A list of full type names of requested contexts.

        :param requested: The requested of this ContextRule.
        :type requested: List[str]
        """

        self._requested = requested

    @property
    def selector(self):
        """Gets the selector of this ContextRule.

        Selects the methods to which this rule applies. Refer to selector for syntax details.

        :return: The selector of this ContextRule.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this ContextRule.

        Selects the methods to which this rule applies. Refer to selector for syntax details.

        :param selector: The selector of this ContextRule.
        :type selector: str
        """

        self._selector = selector
