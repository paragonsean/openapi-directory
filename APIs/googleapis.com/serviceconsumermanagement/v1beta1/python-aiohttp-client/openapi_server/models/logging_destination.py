# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoggingDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logs: List[str]=None, monitored_resource: str=None):
        """LoggingDestination - a model defined in OpenAPI

        :param logs: The logs of this LoggingDestination.
        :param monitored_resource: The monitored_resource of this LoggingDestination.
        """
        self.openapi_types = {
            'logs': List[str],
            'monitored_resource': str
        }

        self.attribute_map = {
            'logs': 'logs',
            'monitored_resource': 'monitoredResource'
        }

        self._logs = logs
        self._monitored_resource = monitored_resource

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoggingDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoggingDestination of this LoggingDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logs(self):
        """Gets the logs of this LoggingDestination.

        Names of the logs to be sent to this destination. Each name must be defined in the Service.logs section. If the log name is not a domain scoped name, it will be automatically prefixed with the service name followed by \"/\".

        :return: The logs of this LoggingDestination.
        :rtype: List[str]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this LoggingDestination.

        Names of the logs to be sent to this destination. Each name must be defined in the Service.logs section. If the log name is not a domain scoped name, it will be automatically prefixed with the service name followed by \"/\".

        :param logs: The logs of this LoggingDestination.
        :type logs: List[str]
        """

        self._logs = logs

    @property
    def monitored_resource(self):
        """Gets the monitored_resource of this LoggingDestination.

        The monitored resource type. The type must be defined in the Service.monitored_resources section.

        :return: The monitored_resource of this LoggingDestination.
        :rtype: str
        """
        return self._monitored_resource

    @monitored_resource.setter
    def monitored_resource(self, monitored_resource):
        """Sets the monitored_resource of this LoggingDestination.

        The monitored resource type. The type must be defined in the Service.monitored_resources section.

        :param monitored_resource: The monitored_resource of this LoggingDestination.
        :type monitored_resource: str
        """

        self._monitored_resource = monitored_resource
