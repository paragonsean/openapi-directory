# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.long_running import LongRunning
from openapi_server import util


class MethodSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_populated_fields: List[str]=None, long_running: LongRunning=None, selector: str=None):
        """MethodSettings - a model defined in OpenAPI

        :param auto_populated_fields: The auto_populated_fields of this MethodSettings.
        :param long_running: The long_running of this MethodSettings.
        :param selector: The selector of this MethodSettings.
        """
        self.openapi_types = {
            'auto_populated_fields': List[str],
            'long_running': LongRunning,
            'selector': str
        }

        self.attribute_map = {
            'auto_populated_fields': 'autoPopulatedFields',
            'long_running': 'longRunning',
            'selector': 'selector'
        }

        self._auto_populated_fields = auto_populated_fields
        self._long_running = long_running
        self._selector = selector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MethodSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MethodSettings of this MethodSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_populated_fields(self):
        """Gets the auto_populated_fields of this MethodSettings.

        List of top-level fields of the request message, that should be automatically populated by the client libraries based on their (google.api.field_info).format. Currently supported format: UUID4. Example of a YAML configuration: publishing: method_settings: - selector: google.example.v1.ExampleService.CreateExample auto_populated_fields: - request_id

        :return: The auto_populated_fields of this MethodSettings.
        :rtype: List[str]
        """
        return self._auto_populated_fields

    @auto_populated_fields.setter
    def auto_populated_fields(self, auto_populated_fields):
        """Sets the auto_populated_fields of this MethodSettings.

        List of top-level fields of the request message, that should be automatically populated by the client libraries based on their (google.api.field_info).format. Currently supported format: UUID4. Example of a YAML configuration: publishing: method_settings: - selector: google.example.v1.ExampleService.CreateExample auto_populated_fields: - request_id

        :param auto_populated_fields: The auto_populated_fields of this MethodSettings.
        :type auto_populated_fields: List[str]
        """

        self._auto_populated_fields = auto_populated_fields

    @property
    def long_running(self):
        """Gets the long_running of this MethodSettings.


        :return: The long_running of this MethodSettings.
        :rtype: LongRunning
        """
        return self._long_running

    @long_running.setter
    def long_running(self, long_running):
        """Sets the long_running of this MethodSettings.


        :param long_running: The long_running of this MethodSettings.
        :type long_running: LongRunning
        """

        self._long_running = long_running

    @property
    def selector(self):
        """Gets the selector of this MethodSettings.

        The fully qualified name of the method, for which the options below apply. This is used to find the method to apply the options.

        :return: The selector of this MethodSettings.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this MethodSettings.

        The fully qualified name of the method, for which the options below apply. This is used to find the method to apply the options.

        :param selector: The selector of this MethodSettings.
        :type selector: str
        """

        self._selector = selector
