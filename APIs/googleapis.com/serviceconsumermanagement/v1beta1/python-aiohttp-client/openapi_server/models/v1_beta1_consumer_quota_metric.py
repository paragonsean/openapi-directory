# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.v1_beta1_consumer_quota_limit import V1Beta1ConsumerQuotaLimit
from openapi_server import util


class V1Beta1ConsumerQuotaMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_quota_limits: List[V1Beta1ConsumerQuotaLimit]=None, descendant_consumer_quota_limits: List[V1Beta1ConsumerQuotaLimit]=None, display_name: str=None, metric: str=None, name: str=None, unit: str=None):
        """V1Beta1ConsumerQuotaMetric - a model defined in OpenAPI

        :param consumer_quota_limits: The consumer_quota_limits of this V1Beta1ConsumerQuotaMetric.
        :param descendant_consumer_quota_limits: The descendant_consumer_quota_limits of this V1Beta1ConsumerQuotaMetric.
        :param display_name: The display_name of this V1Beta1ConsumerQuotaMetric.
        :param metric: The metric of this V1Beta1ConsumerQuotaMetric.
        :param name: The name of this V1Beta1ConsumerQuotaMetric.
        :param unit: The unit of this V1Beta1ConsumerQuotaMetric.
        """
        self.openapi_types = {
            'consumer_quota_limits': List[V1Beta1ConsumerQuotaLimit],
            'descendant_consumer_quota_limits': List[V1Beta1ConsumerQuotaLimit],
            'display_name': str,
            'metric': str,
            'name': str,
            'unit': str
        }

        self.attribute_map = {
            'consumer_quota_limits': 'consumerQuotaLimits',
            'descendant_consumer_quota_limits': 'descendantConsumerQuotaLimits',
            'display_name': 'displayName',
            'metric': 'metric',
            'name': 'name',
            'unit': 'unit'
        }

        self._consumer_quota_limits = consumer_quota_limits
        self._descendant_consumer_quota_limits = descendant_consumer_quota_limits
        self._display_name = display_name
        self._metric = metric
        self._name = name
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1Beta1ConsumerQuotaMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V1Beta1ConsumerQuotaMetric of this V1Beta1ConsumerQuotaMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_quota_limits(self):
        """Gets the consumer_quota_limits of this V1Beta1ConsumerQuotaMetric.

        The consumer quota for each quota limit defined on the metric.

        :return: The consumer_quota_limits of this V1Beta1ConsumerQuotaMetric.
        :rtype: List[V1Beta1ConsumerQuotaLimit]
        """
        return self._consumer_quota_limits

    @consumer_quota_limits.setter
    def consumer_quota_limits(self, consumer_quota_limits):
        """Sets the consumer_quota_limits of this V1Beta1ConsumerQuotaMetric.

        The consumer quota for each quota limit defined on the metric.

        :param consumer_quota_limits: The consumer_quota_limits of this V1Beta1ConsumerQuotaMetric.
        :type consumer_quota_limits: List[V1Beta1ConsumerQuotaLimit]
        """

        self._consumer_quota_limits = consumer_quota_limits

    @property
    def descendant_consumer_quota_limits(self):
        """Gets the descendant_consumer_quota_limits of this V1Beta1ConsumerQuotaMetric.

        The quota limits targeting the descendant containers of the consumer in request. If the consumer in request is of type `organizations` or `folders`, the field will list per-project limits in the metric; if the consumer in request is of type `project`, the field will be empty. The `quota_buckets` field of each descendant consumer quota limit will not be populated.

        :return: The descendant_consumer_quota_limits of this V1Beta1ConsumerQuotaMetric.
        :rtype: List[V1Beta1ConsumerQuotaLimit]
        """
        return self._descendant_consumer_quota_limits

    @descendant_consumer_quota_limits.setter
    def descendant_consumer_quota_limits(self, descendant_consumer_quota_limits):
        """Sets the descendant_consumer_quota_limits of this V1Beta1ConsumerQuotaMetric.

        The quota limits targeting the descendant containers of the consumer in request. If the consumer in request is of type `organizations` or `folders`, the field will list per-project limits in the metric; if the consumer in request is of type `project`, the field will be empty. The `quota_buckets` field of each descendant consumer quota limit will not be populated.

        :param descendant_consumer_quota_limits: The descendant_consumer_quota_limits of this V1Beta1ConsumerQuotaMetric.
        :type descendant_consumer_quota_limits: List[V1Beta1ConsumerQuotaLimit]
        """

        self._descendant_consumer_quota_limits = descendant_consumer_quota_limits

    @property
    def display_name(self):
        """Gets the display_name of this V1Beta1ConsumerQuotaMetric.

        The display name of the metric. An example name would be: \"CPUs\"

        :return: The display_name of this V1Beta1ConsumerQuotaMetric.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V1Beta1ConsumerQuotaMetric.

        The display name of the metric. An example name would be: \"CPUs\"

        :param display_name: The display_name of this V1Beta1ConsumerQuotaMetric.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def metric(self):
        """Gets the metric of this V1Beta1ConsumerQuotaMetric.

        The name of the metric. An example name would be: `compute.googleapis.com/cpus`

        :return: The metric of this V1Beta1ConsumerQuotaMetric.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this V1Beta1ConsumerQuotaMetric.

        The name of the metric. An example name would be: `compute.googleapis.com/cpus`

        :param metric: The metric of this V1Beta1ConsumerQuotaMetric.
        :type metric: str
        """

        self._metric = metric

    @property
    def name(self):
        """Gets the name of this V1Beta1ConsumerQuotaMetric.

        The resource name of the quota settings on this metric for this consumer. An example name would be: `services/serviceconsumermanagement.googleapis.com/projects/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus` The resource name is intended to be opaque and should not be parsed for its component strings, since its representation could change in the future.

        :return: The name of this V1Beta1ConsumerQuotaMetric.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1Beta1ConsumerQuotaMetric.

        The resource name of the quota settings on this metric for this consumer. An example name would be: `services/serviceconsumermanagement.googleapis.com/projects/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus` The resource name is intended to be opaque and should not be parsed for its component strings, since its representation could change in the future.

        :param name: The name of this V1Beta1ConsumerQuotaMetric.
        :type name: str
        """

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this V1Beta1ConsumerQuotaMetric.

        The units in which the metric value is reported.

        :return: The unit of this V1Beta1ConsumerQuotaMetric.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this V1Beta1ConsumerQuotaMetric.

        The units in which the metric value is reported.

        :param unit: The unit of this V1Beta1ConsumerQuotaMetric.
        :type unit: str
        """

        self._unit = unit
