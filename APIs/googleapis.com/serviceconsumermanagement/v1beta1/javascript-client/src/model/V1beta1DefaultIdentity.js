/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The V1beta1DefaultIdentity model module.
 * @module model/V1beta1DefaultIdentity
 * @version v1beta1
 */
class V1beta1DefaultIdentity {
    /**
     * Constructs a new <code>V1beta1DefaultIdentity</code>.
     * A default identity in the Identity and Access Management API.
     * @alias module:model/V1beta1DefaultIdentity
     */
    constructor() { 
        
        V1beta1DefaultIdentity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1beta1DefaultIdentity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1beta1DefaultIdentity} obj Optional instance to populate.
     * @return {module:model/V1beta1DefaultIdentity} The populated <code>V1beta1DefaultIdentity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1beta1DefaultIdentity();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('uniqueId')) {
                obj['uniqueId'] = ApiClient.convertToType(data['uniqueId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1beta1DefaultIdentity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1beta1DefaultIdentity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }
        // ensure the json data is a string
        if (data['uniqueId'] && !(typeof data['uniqueId'] === 'string' || data['uniqueId'] instanceof String)) {
            throw new Error("Expected the field `uniqueId` to be a primitive type in the JSON string but got " + data['uniqueId']);
        }

        return true;
    }


}



/**
 * The email address of the default identity.
 * @member {String} email
 */
V1beta1DefaultIdentity.prototype['email'] = undefined;

/**
 * Default identity resource name. An example name would be: `services/serviceconsumermanagement.googleapis.com/projects/123/defaultIdentity`
 * @member {String} name
 */
V1beta1DefaultIdentity.prototype['name'] = undefined;

/**
 * The Default Identity tag. If specified when creating the account, the tag must be present in activation_grants. If not specified when creating the account, the tag is set to the tag specified in activation_grants.
 * @member {String} tag
 */
V1beta1DefaultIdentity.prototype['tag'] = undefined;

/**
 * The unique and stable id of the default identity.
 * @member {String} uniqueId
 */
V1beta1DefaultIdentity.prototype['uniqueId'] = undefined;






export default V1beta1DefaultIdentity;

