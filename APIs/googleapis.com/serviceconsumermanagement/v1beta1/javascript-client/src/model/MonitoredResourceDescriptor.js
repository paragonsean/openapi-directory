/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LabelDescriptor from './LabelDescriptor';

/**
 * The MonitoredResourceDescriptor model module.
 * @module model/MonitoredResourceDescriptor
 * @version v1beta1
 */
class MonitoredResourceDescriptor {
    /**
     * Constructs a new <code>MonitoredResourceDescriptor</code>.
     * An object that describes the schema of a MonitoredResource object using a type name and a set of labels. For example, the monitored resource descriptor for Google Compute Engine VM instances has a type of &#x60;\&quot;gce_instance\&quot;&#x60; and specifies the use of the labels &#x60;\&quot;instance_id\&quot;&#x60; and &#x60;\&quot;zone\&quot;&#x60; to identify particular VM instances. Different APIs can support different monitored resource types. APIs generally provide a &#x60;list&#x60; method that returns the monitored resource descriptors used by the API. 
     * @alias module:model/MonitoredResourceDescriptor
     */
    constructor() { 
        
        MonitoredResourceDescriptor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MonitoredResourceDescriptor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MonitoredResourceDescriptor} obj Optional instance to populate.
     * @return {module:model/MonitoredResourceDescriptor} The populated <code>MonitoredResourceDescriptor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MonitoredResourceDescriptor();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [LabelDescriptor]);
            }
            if (data.hasOwnProperty('launchStage')) {
                obj['launchStage'] = ApiClient.convertToType(data['launchStage'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MonitoredResourceDescriptor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MonitoredResourceDescriptor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                LabelDescriptor.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['launchStage'] && !(typeof data['launchStage'] === 'string' || data['launchStage'] instanceof String)) {
            throw new Error("Expected the field `launchStage` to be a primitive type in the JSON string but got " + data['launchStage']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Optional. A detailed description of the monitored resource type that might be used in documentation.
 * @member {String} description
 */
MonitoredResourceDescriptor.prototype['description'] = undefined;

/**
 * Optional. A concise name for the monitored resource type that might be displayed in user interfaces. It should be a Title Cased Noun Phrase, without any article or other determiners. For example, `\"Google Cloud SQL Database\"`.
 * @member {String} displayName
 */
MonitoredResourceDescriptor.prototype['displayName'] = undefined;

/**
 * Required. A set of labels used to describe instances of this monitored resource type. For example, an individual Google Cloud SQL database is identified by values for the labels `\"database_id\"` and `\"zone\"`.
 * @member {Array.<module:model/LabelDescriptor>} labels
 */
MonitoredResourceDescriptor.prototype['labels'] = undefined;

/**
 * Optional. The launch stage of the monitored resource definition.
 * @member {module:model/MonitoredResourceDescriptor.LaunchStageEnum} launchStage
 */
MonitoredResourceDescriptor.prototype['launchStage'] = undefined;

/**
 * Optional. The resource name of the monitored resource descriptor: `\"projects/{project_id}/monitoredResourceDescriptors/{type}\"` where {type} is the value of the `type` field in this object and {project_id} is a project ID that provides API-specific context for accessing the type. APIs that do not use project information can use the resource name format `\"monitoredResourceDescriptors/{type}\"`.
 * @member {String} name
 */
MonitoredResourceDescriptor.prototype['name'] = undefined;

/**
 * Required. The monitored resource type. For example, the type `\"cloudsql_database\"` represents databases in Google Cloud SQL. For a list of types, see [Monitored resource types](https://cloud.google.com/monitoring/api/resources) and [Logging resource types](https://cloud.google.com/logging/docs/api/v2/resource-list).
 * @member {String} type
 */
MonitoredResourceDescriptor.prototype['type'] = undefined;





/**
 * Allowed values for the <code>launchStage</code> property.
 * @enum {String}
 * @readonly
 */
MonitoredResourceDescriptor['LaunchStageEnum'] = {

    /**
     * value: "LAUNCH_STAGE_UNSPECIFIED"
     * @const
     */
    "LAUNCH_STAGE_UNSPECIFIED": "LAUNCH_STAGE_UNSPECIFIED",

    /**
     * value: "UNIMPLEMENTED"
     * @const
     */
    "UNIMPLEMENTED": "UNIMPLEMENTED",

    /**
     * value: "PRELAUNCH"
     * @const
     */
    "PRELAUNCH": "PRELAUNCH",

    /**
     * value: "EARLY_ACCESS"
     * @const
     */
    "EARLY_ACCESS": "EARLY_ACCESS",

    /**
     * value: "ALPHA"
     * @const
     */
    "ALPHA": "ALPHA",

    /**
     * value: "BETA"
     * @const
     */
    "BETA": "BETA",

    /**
     * value: "GA"
     * @const
     */
    "GA": "GA",

    /**
     * value: "DEPRECATED"
     * @const
     */
    "DEPRECATED": "DEPRECATED"
};



export default MonitoredResourceDescriptor;

