/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MonitoringDestination from './MonitoringDestination';

/**
 * The Monitoring model module.
 * @module model/Monitoring
 * @version v1beta1
 */
class Monitoring {
    /**
     * Constructs a new <code>Monitoring</code>.
     * Monitoring configuration of the service. The example below shows how to configure monitored resources and metrics for monitoring. In the example, a monitored resource and two metrics are defined. The &#x60;library.googleapis.com/book/returned_count&#x60; metric is sent to both producer and consumer projects, whereas the &#x60;library.googleapis.com/book/num_overdue&#x60; metric is only sent to the consumer project. monitored_resources: - type: library.googleapis.com/Branch display_name: \&quot;Library Branch\&quot; description: \&quot;A branch of a library.\&quot; launch_stage: GA labels: - key: resource_container description: \&quot;The Cloud container (ie. project id) for the Branch.\&quot; - key: location description: \&quot;The location of the library branch.\&quot; - key: branch_id description: \&quot;The id of the branch.\&quot; metrics: - name: library.googleapis.com/book/returned_count display_name: \&quot;Books Returned\&quot; description: \&quot;The count of books that have been returned.\&quot; launch_stage: GA metric_kind: DELTA value_type: INT64 unit: \&quot;1\&quot; labels: - key: customer_id description: \&quot;The id of the customer.\&quot; - name: library.googleapis.com/book/num_overdue display_name: \&quot;Books Overdue\&quot; description: \&quot;The current number of overdue books.\&quot; launch_stage: GA metric_kind: GAUGE value_type: INT64 unit: \&quot;1\&quot; labels: - key: customer_id description: \&quot;The id of the customer.\&quot; monitoring: producer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count consumer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count - library.googleapis.com/book/num_overdue
     * @alias module:model/Monitoring
     */
    constructor() { 
        
        Monitoring.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Monitoring</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Monitoring} obj Optional instance to populate.
     * @return {module:model/Monitoring} The populated <code>Monitoring</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Monitoring();

            if (data.hasOwnProperty('consumerDestinations')) {
                obj['consumerDestinations'] = ApiClient.convertToType(data['consumerDestinations'], [MonitoringDestination]);
            }
            if (data.hasOwnProperty('producerDestinations')) {
                obj['producerDestinations'] = ApiClient.convertToType(data['producerDestinations'], [MonitoringDestination]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Monitoring</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Monitoring</code>.
     */
    static validateJSON(data) {
        if (data['consumerDestinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['consumerDestinations'])) {
                throw new Error("Expected the field `consumerDestinations` to be an array in the JSON data but got " + data['consumerDestinations']);
            }
            // validate the optional field `consumerDestinations` (array)
            for (const item of data['consumerDestinations']) {
                MonitoringDestination.validateJSON(item);
            };
        }
        if (data['producerDestinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['producerDestinations'])) {
                throw new Error("Expected the field `producerDestinations` to be an array in the JSON data but got " + data['producerDestinations']);
            }
            // validate the optional field `producerDestinations` (array)
            for (const item of data['producerDestinations']) {
                MonitoringDestination.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Monitoring configurations for sending metrics to the consumer project. There can be multiple consumer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
 * @member {Array.<module:model/MonitoringDestination>} consumerDestinations
 */
Monitoring.prototype['consumerDestinations'] = undefined;

/**
 * Monitoring configurations for sending metrics to the producer project. There can be multiple producer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
 * @member {Array.<module:model/MonitoringDestination>} producerDestinations
 */
Monitoring.prototype['producerDestinations'] = undefined;






export default Monitoring;

