/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClientLibrarySettings from './ClientLibrarySettings';
import MethodSettings from './MethodSettings';

/**
 * The Publishing model module.
 * @module model/Publishing
 * @version v1beta1
 */
class Publishing {
    /**
     * Constructs a new <code>Publishing</code>.
     * This message configures the settings for publishing [Google Cloud Client libraries](https://cloud.google.com/apis/docs/cloud-client-libraries) generated from the service config.
     * @alias module:model/Publishing
     */
    constructor() { 
        
        Publishing.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Publishing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Publishing} obj Optional instance to populate.
     * @return {module:model/Publishing} The populated <code>Publishing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Publishing();

            if (data.hasOwnProperty('apiShortName')) {
                obj['apiShortName'] = ApiClient.convertToType(data['apiShortName'], 'String');
            }
            if (data.hasOwnProperty('codeownerGithubTeams')) {
                obj['codeownerGithubTeams'] = ApiClient.convertToType(data['codeownerGithubTeams'], ['String']);
            }
            if (data.hasOwnProperty('docTagPrefix')) {
                obj['docTagPrefix'] = ApiClient.convertToType(data['docTagPrefix'], 'String');
            }
            if (data.hasOwnProperty('documentationUri')) {
                obj['documentationUri'] = ApiClient.convertToType(data['documentationUri'], 'String');
            }
            if (data.hasOwnProperty('githubLabel')) {
                obj['githubLabel'] = ApiClient.convertToType(data['githubLabel'], 'String');
            }
            if (data.hasOwnProperty('librarySettings')) {
                obj['librarySettings'] = ApiClient.convertToType(data['librarySettings'], [ClientLibrarySettings]);
            }
            if (data.hasOwnProperty('methodSettings')) {
                obj['methodSettings'] = ApiClient.convertToType(data['methodSettings'], [MethodSettings]);
            }
            if (data.hasOwnProperty('newIssueUri')) {
                obj['newIssueUri'] = ApiClient.convertToType(data['newIssueUri'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('protoReferenceDocumentationUri')) {
                obj['protoReferenceDocumentationUri'] = ApiClient.convertToType(data['protoReferenceDocumentationUri'], 'String');
            }
            if (data.hasOwnProperty('restReferenceDocumentationUri')) {
                obj['restReferenceDocumentationUri'] = ApiClient.convertToType(data['restReferenceDocumentationUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Publishing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Publishing</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['apiShortName'] && !(typeof data['apiShortName'] === 'string' || data['apiShortName'] instanceof String)) {
            throw new Error("Expected the field `apiShortName` to be a primitive type in the JSON string but got " + data['apiShortName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['codeownerGithubTeams'])) {
            throw new Error("Expected the field `codeownerGithubTeams` to be an array in the JSON data but got " + data['codeownerGithubTeams']);
        }
        // ensure the json data is a string
        if (data['docTagPrefix'] && !(typeof data['docTagPrefix'] === 'string' || data['docTagPrefix'] instanceof String)) {
            throw new Error("Expected the field `docTagPrefix` to be a primitive type in the JSON string but got " + data['docTagPrefix']);
        }
        // ensure the json data is a string
        if (data['documentationUri'] && !(typeof data['documentationUri'] === 'string' || data['documentationUri'] instanceof String)) {
            throw new Error("Expected the field `documentationUri` to be a primitive type in the JSON string but got " + data['documentationUri']);
        }
        // ensure the json data is a string
        if (data['githubLabel'] && !(typeof data['githubLabel'] === 'string' || data['githubLabel'] instanceof String)) {
            throw new Error("Expected the field `githubLabel` to be a primitive type in the JSON string but got " + data['githubLabel']);
        }
        if (data['librarySettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['librarySettings'])) {
                throw new Error("Expected the field `librarySettings` to be an array in the JSON data but got " + data['librarySettings']);
            }
            // validate the optional field `librarySettings` (array)
            for (const item of data['librarySettings']) {
                ClientLibrarySettings.validateJSON(item);
            };
        }
        if (data['methodSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['methodSettings'])) {
                throw new Error("Expected the field `methodSettings` to be an array in the JSON data but got " + data['methodSettings']);
            }
            // validate the optional field `methodSettings` (array)
            for (const item of data['methodSettings']) {
                MethodSettings.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['newIssueUri'] && !(typeof data['newIssueUri'] === 'string' || data['newIssueUri'] instanceof String)) {
            throw new Error("Expected the field `newIssueUri` to be a primitive type in the JSON string but got " + data['newIssueUri']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['protoReferenceDocumentationUri'] && !(typeof data['protoReferenceDocumentationUri'] === 'string' || data['protoReferenceDocumentationUri'] instanceof String)) {
            throw new Error("Expected the field `protoReferenceDocumentationUri` to be a primitive type in the JSON string but got " + data['protoReferenceDocumentationUri']);
        }
        // ensure the json data is a string
        if (data['restReferenceDocumentationUri'] && !(typeof data['restReferenceDocumentationUri'] === 'string' || data['restReferenceDocumentationUri'] instanceof String)) {
            throw new Error("Expected the field `restReferenceDocumentationUri` to be a primitive type in the JSON string but got " + data['restReferenceDocumentationUri']);
        }

        return true;
    }


}



/**
 * Used as a tracking tag when collecting data about the APIs developer relations artifacts like docs, packages delivered to package managers, etc. Example: \"speech\".
 * @member {String} apiShortName
 */
Publishing.prototype['apiShortName'] = undefined;

/**
 * GitHub teams to be added to CODEOWNERS in the directory in GitHub containing source code for the client libraries for this API.
 * @member {Array.<String>} codeownerGithubTeams
 */
Publishing.prototype['codeownerGithubTeams'] = undefined;

/**
 * A prefix used in sample code when demarking regions to be included in documentation.
 * @member {String} docTagPrefix
 */
Publishing.prototype['docTagPrefix'] = undefined;

/**
 * Link to product home page. Example: https://cloud.google.com/asset-inventory/docs/overview
 * @member {String} documentationUri
 */
Publishing.prototype['documentationUri'] = undefined;

/**
 * GitHub label to apply to issues and pull requests opened for this API.
 * @member {String} githubLabel
 */
Publishing.prototype['githubLabel'] = undefined;

/**
 * Client library settings. If the same version string appears multiple times in this list, then the last one wins. Settings from earlier settings with the same version string are discarded.
 * @member {Array.<module:model/ClientLibrarySettings>} librarySettings
 */
Publishing.prototype['librarySettings'] = undefined;

/**
 * A list of API method settings, e.g. the behavior for methods that use the long-running operation pattern.
 * @member {Array.<module:model/MethodSettings>} methodSettings
 */
Publishing.prototype['methodSettings'] = undefined;

/**
 * Link to a *public* URI where users can report issues. Example: https://issuetracker.google.com/issues/new?component=190865&template=1161103
 * @member {String} newIssueUri
 */
Publishing.prototype['newIssueUri'] = undefined;

/**
 * For whom the client library is being published.
 * @member {module:model/Publishing.OrganizationEnum} organization
 */
Publishing.prototype['organization'] = undefined;

/**
 * Optional link to proto reference documentation. Example: https://cloud.google.com/pubsub/lite/docs/reference/rpc
 * @member {String} protoReferenceDocumentationUri
 */
Publishing.prototype['protoReferenceDocumentationUri'] = undefined;

/**
 * Optional link to REST reference documentation. Example: https://cloud.google.com/pubsub/lite/docs/reference/rest
 * @member {String} restReferenceDocumentationUri
 */
Publishing.prototype['restReferenceDocumentationUri'] = undefined;





/**
 * Allowed values for the <code>organization</code> property.
 * @enum {String}
 * @readonly
 */
Publishing['OrganizationEnum'] = {

    /**
     * value: "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED"
     * @const
     */
    "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED": "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED",

    /**
     * value: "CLOUD"
     * @const
     */
    "CLOUD": "CLOUD",

    /**
     * value: "ADS"
     * @const
     */
    "ADS": "ADS",

    /**
     * value: "PHOTOS"
     * @const
     */
    "PHOTOS": "PHOTOS",

    /**
     * value: "STREET_VIEW"
     * @const
     */
    "STREET_VIEW": "STREET_VIEW",

    /**
     * value: "SHOPPING"
     * @const
     */
    "SHOPPING": "SHOPPING",

    /**
     * value: "GEO"
     * @const
     */
    "GEO": "GEO",

    /**
     * value: "GENERATIVE_AI"
     * @const
     */
    "GENERATIVE_AI": "GENERATIVE_AI"
};



export default Publishing;

