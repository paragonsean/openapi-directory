/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JwtLocation from './JwtLocation';

/**
 * The AuthProvider model module.
 * @module model/AuthProvider
 * @version v1beta1
 */
class AuthProvider {
    /**
     * Constructs a new <code>AuthProvider</code>.
     * Configuration for an authentication provider, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
     * @alias module:model/AuthProvider
     */
    constructor() { 
        
        AuthProvider.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthProvider</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthProvider} obj Optional instance to populate.
     * @return {module:model/AuthProvider} The populated <code>AuthProvider</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthProvider();

            if (data.hasOwnProperty('audiences')) {
                obj['audiences'] = ApiClient.convertToType(data['audiences'], 'String');
            }
            if (data.hasOwnProperty('authorizationUrl')) {
                obj['authorizationUrl'] = ApiClient.convertToType(data['authorizationUrl'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('jwksUri')) {
                obj['jwksUri'] = ApiClient.convertToType(data['jwksUri'], 'String');
            }
            if (data.hasOwnProperty('jwtLocations')) {
                obj['jwtLocations'] = ApiClient.convertToType(data['jwtLocations'], [JwtLocation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthProvider</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthProvider</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['audiences'] && !(typeof data['audiences'] === 'string' || data['audiences'] instanceof String)) {
            throw new Error("Expected the field `audiences` to be a primitive type in the JSON string but got " + data['audiences']);
        }
        // ensure the json data is a string
        if (data['authorizationUrl'] && !(typeof data['authorizationUrl'] === 'string' || data['authorizationUrl'] instanceof String)) {
            throw new Error("Expected the field `authorizationUrl` to be a primitive type in the JSON string but got " + data['authorizationUrl']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['issuer'] && !(typeof data['issuer'] === 'string' || data['issuer'] instanceof String)) {
            throw new Error("Expected the field `issuer` to be a primitive type in the JSON string but got " + data['issuer']);
        }
        // ensure the json data is a string
        if (data['jwksUri'] && !(typeof data['jwksUri'] === 'string' || data['jwksUri'] instanceof String)) {
            throw new Error("Expected the field `jwksUri` to be a primitive type in the JSON string but got " + data['jwksUri']);
        }
        if (data['jwtLocations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['jwtLocations'])) {
                throw new Error("Expected the field `jwtLocations` to be an array in the JSON data but got " + data['jwtLocations']);
            }
            // validate the optional field `jwtLocations` (array)
            for (const item of data['jwtLocations']) {
                JwtLocation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, JWTs with audiences: - \"https://[service.name]/[google.protobuf.Api.name]\" - \"https://[service.name]/\" will be accepted. For example, if no audiences are in the setting, LibraryService API will accept JWTs with the following audiences: - https://library-example.googleapis.com/google.example.library.v1.LibraryService - https://library-example.googleapis.com/ Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
 * @member {String} audiences
 */
AuthProvider.prototype['audiences'] = undefined;

/**
 * Redirect URL if JWT token is required but not present or is expired. Implement authorizationUrl of securityDefinitions in OpenAPI spec.
 * @member {String} authorizationUrl
 */
AuthProvider.prototype['authorizationUrl'] = undefined;

/**
 * The unique identifier of the auth provider. It will be referred to by `AuthRequirement.provider_id`. Example: \"bookstore_auth\".
 * @member {String} id
 */
AuthProvider.prototype['id'] = undefined;

/**
 * Identifies the principal that issued the JWT. See https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1 Usually a URL or an email address. Example: https://securetoken.google.com Example: 1234567-compute@developer.gserviceaccount.com
 * @member {String} issuer
 */
AuthProvider.prototype['issuer'] = undefined;

/**
 * URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). Optional if the key set document: - can be retrieved from [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of the issuer. - can be inferred from the email domain of the issuer (e.g. a Google service account). Example: https://www.googleapis.com/oauth2/v1/certs
 * @member {String} jwksUri
 */
AuthProvider.prototype['jwksUri'] = undefined;

/**
 * Defines the locations to extract the JWT. For now it is only used by the Cloud Endpoints to store the OpenAPI extension [x-google-jwt-locations] (https://cloud.google.com/endpoints/docs/openapi/openapi-extensions#x-google-jwt-locations) JWT locations can be one of HTTP headers, URL query parameters or cookies. The rule is that the first match wins. If not specified, default to use following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion 3) access_token query parameter Default locations can be specified as followings: jwt_locations: - header: Authorization value_prefix: \"Bearer \" - header: x-goog-iap-jwt-assertion - query: access_token
 * @member {Array.<module:model/JwtLocation>} jwtLocations
 */
AuthProvider.prototype['jwtLocations'] = undefined;






export default AuthProvider;

