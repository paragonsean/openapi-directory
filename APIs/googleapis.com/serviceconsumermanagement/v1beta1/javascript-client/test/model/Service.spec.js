/**
 * Service Consumer Management API
 * Manages the service consumers of a Service Infrastructure service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ServiceConsumerManagementApi);
  }
}(this, function(expect, ServiceConsumerManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ServiceConsumerManagementApi.Service();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Service', function() {
    it('should create an instance of Service', function() {
      // uncomment below and update the code to test Service
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be.a(ServiceConsumerManagementApi.Service);
    });

    it('should have the property apis (base name: "apis")', function() {
      // uncomment below and update the code to test the property apis
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property authentication (base name: "authentication")', function() {
      // uncomment below and update the code to test the property authentication
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property backend (base name: "backend")', function() {
      // uncomment below and update the code to test the property backend
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property billing (base name: "billing")', function() {
      // uncomment below and update the code to test the property billing
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property configVersion (base name: "configVersion")', function() {
      // uncomment below and update the code to test the property configVersion
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property context (base name: "context")', function() {
      // uncomment below and update the code to test the property context
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property control (base name: "control")', function() {
      // uncomment below and update the code to test the property control
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property customError (base name: "customError")', function() {
      // uncomment below and update the code to test the property customError
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property documentation (base name: "documentation")', function() {
      // uncomment below and update the code to test the property documentation
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property endpoints (base name: "endpoints")', function() {
      // uncomment below and update the code to test the property endpoints
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property enums (base name: "enums")', function() {
      // uncomment below and update the code to test the property enums
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property http (base name: "http")', function() {
      // uncomment below and update the code to test the property http
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property logging (base name: "logging")', function() {
      // uncomment below and update the code to test the property logging
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property logs (base name: "logs")', function() {
      // uncomment below and update the code to test the property logs
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property metrics (base name: "metrics")', function() {
      // uncomment below and update the code to test the property metrics
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property monitoredResources (base name: "monitoredResources")', function() {
      // uncomment below and update the code to test the property monitoredResources
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property monitoring (base name: "monitoring")', function() {
      // uncomment below and update the code to test the property monitoring
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property producerProjectId (base name: "producerProjectId")', function() {
      // uncomment below and update the code to test the property producerProjectId
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property publishing (base name: "publishing")', function() {
      // uncomment below and update the code to test the property publishing
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property quota (base name: "quota")', function() {
      // uncomment below and update the code to test the property quota
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property sourceInfo (base name: "sourceInfo")', function() {
      // uncomment below and update the code to test the property sourceInfo
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property systemParameters (base name: "systemParameters")', function() {
      // uncomment below and update the code to test the property systemParameters
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property systemTypes (base name: "systemTypes")', function() {
      // uncomment below and update the code to test the property systemTypes
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property types (base name: "types")', function() {
      // uncomment below and update the code to test the property types
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

    it('should have the property usage (base name: "usage")', function() {
      // uncomment below and update the code to test the property usage
      //var instance = new ServiceConsumerManagementApi.Service();
      //expect(instance).to.be();
    });

  });

}));
