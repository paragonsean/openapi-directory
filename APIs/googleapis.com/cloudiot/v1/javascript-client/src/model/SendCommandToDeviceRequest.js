/**
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SendCommandToDeviceRequest model module.
 * @module model/SendCommandToDeviceRequest
 * @version v1
 */
class SendCommandToDeviceRequest {
    /**
     * Constructs a new <code>SendCommandToDeviceRequest</code>.
     * Request for &#x60;SendCommandToDevice&#x60;.
     * @alias module:model/SendCommandToDeviceRequest
     */
    constructor() { 
        
        SendCommandToDeviceRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SendCommandToDeviceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendCommandToDeviceRequest} obj Optional instance to populate.
     * @return {module:model/SendCommandToDeviceRequest} The populated <code>SendCommandToDeviceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendCommandToDeviceRequest();

            if (data.hasOwnProperty('binaryData')) {
                obj['binaryData'] = ApiClient.convertToType(data['binaryData'], 'Blob');
            }
            if (data.hasOwnProperty('subfolder')) {
                obj['subfolder'] = ApiClient.convertToType(data['subfolder'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendCommandToDeviceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendCommandToDeviceRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['subfolder'] && !(typeof data['subfolder'] === 'string' || data['subfolder'] instanceof String)) {
            throw new Error("Expected the field `subfolder` to be a primitive type in the JSON string but got " + data['subfolder']);
        }

        return true;
    }


}



/**
 * Required. The command data to send to the device.
 * @member {Blob} binaryData
 */
SendCommandToDeviceRequest.prototype['binaryData'] = undefined;

/**
 * Optional subfolder for the command. If empty, the command will be delivered to the /devices/{device-id}/commands topic, otherwise it will be delivered to the /devices/{device-id}/commands/{subfolder} topic. Multi-level subfolders are allowed. This field must not have more than 256 characters, and must not contain any MQTT wildcards (\"+\" or \"#\") or null characters.
 * @member {String} subfolder
 */
SendCommandToDeviceRequest.prototype['subfolder'] = undefined;






export default SendCommandToDeviceRequest;

