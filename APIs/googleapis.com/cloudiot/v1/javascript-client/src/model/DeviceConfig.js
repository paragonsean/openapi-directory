/**
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceConfig model module.
 * @module model/DeviceConfig
 * @version v1
 */
class DeviceConfig {
    /**
     * Constructs a new <code>DeviceConfig</code>.
     * The device configuration. Eventually delivered to devices.
     * @alias module:model/DeviceConfig
     */
    constructor() { 
        
        DeviceConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceConfig} obj Optional instance to populate.
     * @return {module:model/DeviceConfig} The populated <code>DeviceConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceConfig();

            if (data.hasOwnProperty('binaryData')) {
                obj['binaryData'] = ApiClient.convertToType(data['binaryData'], 'Blob');
            }
            if (data.hasOwnProperty('cloudUpdateTime')) {
                obj['cloudUpdateTime'] = ApiClient.convertToType(data['cloudUpdateTime'], 'String');
            }
            if (data.hasOwnProperty('deviceAckTime')) {
                obj['deviceAckTime'] = ApiClient.convertToType(data['deviceAckTime'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cloudUpdateTime'] && !(typeof data['cloudUpdateTime'] === 'string' || data['cloudUpdateTime'] instanceof String)) {
            throw new Error("Expected the field `cloudUpdateTime` to be a primitive type in the JSON string but got " + data['cloudUpdateTime']);
        }
        // ensure the json data is a string
        if (data['deviceAckTime'] && !(typeof data['deviceAckTime'] === 'string' || data['deviceAckTime'] instanceof String)) {
            throw new Error("Expected the field `deviceAckTime` to be a primitive type in the JSON string but got " + data['deviceAckTime']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * The device configuration data.
 * @member {Blob} binaryData
 */
DeviceConfig.prototype['binaryData'] = undefined;

/**
 * [Output only] The time at which this configuration version was updated in Cloud IoT Core. This timestamp is set by the server.
 * @member {String} cloudUpdateTime
 */
DeviceConfig.prototype['cloudUpdateTime'] = undefined;

/**
 * [Output only] The time at which Cloud IoT Core received the acknowledgment from the device, indicating that the device has received this configuration version. If this field is not present, the device has not yet acknowledged that it received this version. Note that when the config was sent to the device, many config versions may have been available in Cloud IoT Core while the device was disconnected, and on connection, only the latest version is sent to the device. Some versions may never be sent to the device, and therefore are never acknowledged. This timestamp is set by Cloud IoT Core.
 * @member {String} deviceAckTime
 */
DeviceConfig.prototype['deviceAckTime'] = undefined;

/**
 * [Output only] The version of this update. The version number is assigned by the server, and is always greater than 0 after device creation. The version must be 0 on the `CreateDevice` request if a `config` is specified; the response of `CreateDevice` will always have a value of 1.
 * @member {String} version
 */
DeviceConfig.prototype['version'] = undefined;






export default DeviceConfig;

