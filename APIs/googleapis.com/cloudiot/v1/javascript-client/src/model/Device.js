/**
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceConfig from './DeviceConfig';
import DeviceCredential from './DeviceCredential';
import DeviceState from './DeviceState';
import GatewayConfig from './GatewayConfig';
import Status from './Status';

/**
 * The Device model module.
 * @module model/Device
 * @version v1
 */
class Device {
    /**
     * Constructs a new <code>Device</code>.
     * The device resource.
     * @alias module:model/Device
     */
    constructor() { 
        
        Device.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Device} obj Optional instance to populate.
     * @return {module:model/Device} The populated <code>Device</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Device();

            if (data.hasOwnProperty('blocked')) {
                obj['blocked'] = ApiClient.convertToType(data['blocked'], 'Boolean');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = DeviceConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('credentials')) {
                obj['credentials'] = ApiClient.convertToType(data['credentials'], [DeviceCredential]);
            }
            if (data.hasOwnProperty('gatewayConfig')) {
                obj['gatewayConfig'] = GatewayConfig.constructFromObject(data['gatewayConfig']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastConfigAckTime')) {
                obj['lastConfigAckTime'] = ApiClient.convertToType(data['lastConfigAckTime'], 'String');
            }
            if (data.hasOwnProperty('lastConfigSendTime')) {
                obj['lastConfigSendTime'] = ApiClient.convertToType(data['lastConfigSendTime'], 'String');
            }
            if (data.hasOwnProperty('lastErrorStatus')) {
                obj['lastErrorStatus'] = Status.constructFromObject(data['lastErrorStatus']);
            }
            if (data.hasOwnProperty('lastErrorTime')) {
                obj['lastErrorTime'] = ApiClient.convertToType(data['lastErrorTime'], 'String');
            }
            if (data.hasOwnProperty('lastEventTime')) {
                obj['lastEventTime'] = ApiClient.convertToType(data['lastEventTime'], 'String');
            }
            if (data.hasOwnProperty('lastHeartbeatTime')) {
                obj['lastHeartbeatTime'] = ApiClient.convertToType(data['lastHeartbeatTime'], 'String');
            }
            if (data.hasOwnProperty('lastStateTime')) {
                obj['lastStateTime'] = ApiClient.convertToType(data['lastStateTime'], 'String');
            }
            if (data.hasOwnProperty('logLevel')) {
                obj['logLevel'] = ApiClient.convertToType(data['logLevel'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('numId')) {
                obj['numId'] = ApiClient.convertToType(data['numId'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = DeviceState.constructFromObject(data['state']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Device</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Device</code>.
     */
    static validateJSON(data) {
        // validate the optional field `config`
        if (data['config']) { // data not null
          DeviceConfig.validateJSON(data['config']);
        }
        if (data['credentials']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['credentials'])) {
                throw new Error("Expected the field `credentials` to be an array in the JSON data but got " + data['credentials']);
            }
            // validate the optional field `credentials` (array)
            for (const item of data['credentials']) {
                DeviceCredential.validateJSON(item);
            };
        }
        // validate the optional field `gatewayConfig`
        if (data['gatewayConfig']) { // data not null
          GatewayConfig.validateJSON(data['gatewayConfig']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastConfigAckTime'] && !(typeof data['lastConfigAckTime'] === 'string' || data['lastConfigAckTime'] instanceof String)) {
            throw new Error("Expected the field `lastConfigAckTime` to be a primitive type in the JSON string but got " + data['lastConfigAckTime']);
        }
        // ensure the json data is a string
        if (data['lastConfigSendTime'] && !(typeof data['lastConfigSendTime'] === 'string' || data['lastConfigSendTime'] instanceof String)) {
            throw new Error("Expected the field `lastConfigSendTime` to be a primitive type in the JSON string but got " + data['lastConfigSendTime']);
        }
        // validate the optional field `lastErrorStatus`
        if (data['lastErrorStatus']) { // data not null
          Status.validateJSON(data['lastErrorStatus']);
        }
        // ensure the json data is a string
        if (data['lastErrorTime'] && !(typeof data['lastErrorTime'] === 'string' || data['lastErrorTime'] instanceof String)) {
            throw new Error("Expected the field `lastErrorTime` to be a primitive type in the JSON string but got " + data['lastErrorTime']);
        }
        // ensure the json data is a string
        if (data['lastEventTime'] && !(typeof data['lastEventTime'] === 'string' || data['lastEventTime'] instanceof String)) {
            throw new Error("Expected the field `lastEventTime` to be a primitive type in the JSON string but got " + data['lastEventTime']);
        }
        // ensure the json data is a string
        if (data['lastHeartbeatTime'] && !(typeof data['lastHeartbeatTime'] === 'string' || data['lastHeartbeatTime'] instanceof String)) {
            throw new Error("Expected the field `lastHeartbeatTime` to be a primitive type in the JSON string but got " + data['lastHeartbeatTime']);
        }
        // ensure the json data is a string
        if (data['lastStateTime'] && !(typeof data['lastStateTime'] === 'string' || data['lastStateTime'] instanceof String)) {
            throw new Error("Expected the field `lastStateTime` to be a primitive type in the JSON string but got " + data['lastStateTime']);
        }
        // ensure the json data is a string
        if (data['logLevel'] && !(typeof data['logLevel'] === 'string' || data['logLevel'] instanceof String)) {
            throw new Error("Expected the field `logLevel` to be a primitive type in the JSON string but got " + data['logLevel']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['numId'] && !(typeof data['numId'] === 'string' || data['numId'] instanceof String)) {
            throw new Error("Expected the field `numId` to be a primitive type in the JSON string but got " + data['numId']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          DeviceState.validateJSON(data['state']);
        }

        return true;
    }


}



/**
 * If a device is blocked, connections or requests from this device will fail. Can be used to temporarily prevent the device from connecting if, for example, the sensor is generating bad data and needs maintenance.
 * @member {Boolean} blocked
 */
Device.prototype['blocked'] = undefined;

/**
 * @member {module:model/DeviceConfig} config
 */
Device.prototype['config'] = undefined;

/**
 * The credentials used to authenticate this device. To allow credential rotation without interruption, multiple device credentials can be bound to this device. No more than 3 credentials can be bound to a single device at a time. When new credentials are added to a device, they are verified against the registry credentials. For details, see the description of the `DeviceRegistry.credentials` field.
 * @member {Array.<module:model/DeviceCredential>} credentials
 */
Device.prototype['credentials'] = undefined;

/**
 * @member {module:model/GatewayConfig} gatewayConfig
 */
Device.prototype['gatewayConfig'] = undefined;

/**
 * The user-defined device identifier. The device ID must be unique within a device registry.
 * @member {String} id
 */
Device.prototype['id'] = undefined;

/**
 * [Output only] The last time a cloud-to-device config version acknowledgment was received from the device. This field is only for configurations sent through MQTT.
 * @member {String} lastConfigAckTime
 */
Device.prototype['lastConfigAckTime'] = undefined;

/**
 * [Output only] The last time a cloud-to-device config version was sent to the device.
 * @member {String} lastConfigSendTime
 */
Device.prototype['lastConfigSendTime'] = undefined;

/**
 * @member {module:model/Status} lastErrorStatus
 */
Device.prototype['lastErrorStatus'] = undefined;

/**
 * [Output only] The time the most recent error occurred, such as a failure to publish to Cloud Pub/Sub. This field is the timestamp of 'last_error_status'.
 * @member {String} lastErrorTime
 */
Device.prototype['lastErrorTime'] = undefined;

/**
 * [Output only] The last time a telemetry event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
 * @member {String} lastEventTime
 */
Device.prototype['lastEventTime'] = undefined;

/**
 * [Output only] The last time an MQTT `PINGREQ` was received. This field applies only to devices connecting through MQTT. MQTT clients usually only send `PINGREQ` messages if the connection is idle, and no other messages have been sent. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
 * @member {String} lastHeartbeatTime
 */
Device.prototype['lastHeartbeatTime'] = undefined;

/**
 * [Output only] The last time a state event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
 * @member {String} lastStateTime
 */
Device.prototype['lastStateTime'] = undefined;

/**
 * **Beta Feature** The logging verbosity for device activity. If unspecified, DeviceRegistry.log_level will be used.
 * @member {module:model/Device.LogLevelEnum} logLevel
 */
Device.prototype['logLevel'] = undefined;

/**
 * The metadata key-value pairs assigned to the device. This metadata is not interpreted or indexed by Cloud IoT Core. It can be used to add contextual information for the device. Keys must conform to the regular expression a-zA-Z+ and be less than 128 bytes in length. Values are free-form strings. Each value must be less than or equal to 32 KB in size. The total size of all keys and values must be less than 256 KB, and the maximum number of key-value pairs is 500.
 * @member {Object.<String, String>} metadata
 */
Device.prototype['metadata'] = undefined;

/**
 * The resource path name. For example, `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`. When `name` is populated as a response from the service, it always ends in the device numeric ID.
 * @member {String} name
 */
Device.prototype['name'] = undefined;

/**
 * [Output only] A server-defined unique numeric ID for the device. This is a more compact way to identify devices, and it is globally unique.
 * @member {String} numId
 */
Device.prototype['numId'] = undefined;

/**
 * @member {module:model/DeviceState} state
 */
Device.prototype['state'] = undefined;





/**
 * Allowed values for the <code>logLevel</code> property.
 * @enum {String}
 * @readonly
 */
Device['LogLevelEnum'] = {

    /**
     * value: "LOG_LEVEL_UNSPECIFIED"
     * @const
     */
    "LOG_LEVEL_UNSPECIFIED": "LOG_LEVEL_UNSPECIFIED",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "INFO"
     * @const
     */
    "INFO": "INFO",

    /**
     * value: "DEBUG"
     * @const
     */
    "DEBUG": "DEBUG"
};



export default Device;

