/**
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventNotificationConfig from './EventNotificationConfig';
import HttpConfig from './HttpConfig';
import MqttConfig from './MqttConfig';
import RegistryCredential from './RegistryCredential';
import StateNotificationConfig from './StateNotificationConfig';

/**
 * The DeviceRegistry model module.
 * @module model/DeviceRegistry
 * @version v1
 */
class DeviceRegistry {
    /**
     * Constructs a new <code>DeviceRegistry</code>.
     * A container for a group of devices.
     * @alias module:model/DeviceRegistry
     */
    constructor() { 
        
        DeviceRegistry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceRegistry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceRegistry} obj Optional instance to populate.
     * @return {module:model/DeviceRegistry} The populated <code>DeviceRegistry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceRegistry();

            if (data.hasOwnProperty('credentials')) {
                obj['credentials'] = ApiClient.convertToType(data['credentials'], [RegistryCredential]);
            }
            if (data.hasOwnProperty('eventNotificationConfigs')) {
                obj['eventNotificationConfigs'] = ApiClient.convertToType(data['eventNotificationConfigs'], [EventNotificationConfig]);
            }
            if (data.hasOwnProperty('httpConfig')) {
                obj['httpConfig'] = HttpConfig.constructFromObject(data['httpConfig']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('logLevel')) {
                obj['logLevel'] = ApiClient.convertToType(data['logLevel'], 'String');
            }
            if (data.hasOwnProperty('mqttConfig')) {
                obj['mqttConfig'] = MqttConfig.constructFromObject(data['mqttConfig']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('stateNotificationConfig')) {
                obj['stateNotificationConfig'] = StateNotificationConfig.constructFromObject(data['stateNotificationConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceRegistry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceRegistry</code>.
     */
    static validateJSON(data) {
        if (data['credentials']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['credentials'])) {
                throw new Error("Expected the field `credentials` to be an array in the JSON data but got " + data['credentials']);
            }
            // validate the optional field `credentials` (array)
            for (const item of data['credentials']) {
                RegistryCredential.validateJSON(item);
            };
        }
        if (data['eventNotificationConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eventNotificationConfigs'])) {
                throw new Error("Expected the field `eventNotificationConfigs` to be an array in the JSON data but got " + data['eventNotificationConfigs']);
            }
            // validate the optional field `eventNotificationConfigs` (array)
            for (const item of data['eventNotificationConfigs']) {
                EventNotificationConfig.validateJSON(item);
            };
        }
        // validate the optional field `httpConfig`
        if (data['httpConfig']) { // data not null
          HttpConfig.validateJSON(data['httpConfig']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['logLevel'] && !(typeof data['logLevel'] === 'string' || data['logLevel'] instanceof String)) {
            throw new Error("Expected the field `logLevel` to be a primitive type in the JSON string but got " + data['logLevel']);
        }
        // validate the optional field `mqttConfig`
        if (data['mqttConfig']) { // data not null
          MqttConfig.validateJSON(data['mqttConfig']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `stateNotificationConfig`
        if (data['stateNotificationConfig']) { // data not null
          StateNotificationConfig.validateJSON(data['stateNotificationConfig']);
        }

        return true;
    }


}



/**
 * The credentials used to verify the device credentials. No more than 10 credentials can be bound to a single registry at a time. The verification process occurs at the time of device creation or update. If this field is empty, no verification is performed. Otherwise, the credentials of a newly created device or added credentials of an updated device should be signed with one of these registry credentials. Note, however, that existing devices will never be affected by modifications to this list of credentials: after a device has been successfully created in a registry, it should be able to connect even if its registry credentials are revoked, deleted, or modified.
 * @member {Array.<module:model/RegistryCredential>} credentials
 */
DeviceRegistry.prototype['credentials'] = undefined;

/**
 * The configuration for notification of telemetry events received from the device. All telemetry events that were successfully published by the device and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud Pub/Sub. If multiple configurations match a message, only the first matching configuration is used. If you try to publish a device telemetry event using MQTT without specifying a Cloud Pub/Sub topic for the device's registry, the connection closes automatically. If you try to do so using an HTTP connection, an error is returned. Up to 10 configurations may be provided.
 * @member {Array.<module:model/EventNotificationConfig>} eventNotificationConfigs
 */
DeviceRegistry.prototype['eventNotificationConfigs'] = undefined;

/**
 * @member {module:model/HttpConfig} httpConfig
 */
DeviceRegistry.prototype['httpConfig'] = undefined;

/**
 * The identifier of this device registry. For example, `myRegistry`.
 * @member {String} id
 */
DeviceRegistry.prototype['id'] = undefined;

/**
 * **Beta Feature** The default logging verbosity for activity from devices in this registry. The verbosity level can be overridden by Device.log_level.
 * @member {module:model/DeviceRegistry.LogLevelEnum} logLevel
 */
DeviceRegistry.prototype['logLevel'] = undefined;

/**
 * @member {module:model/MqttConfig} mqttConfig
 */
DeviceRegistry.prototype['mqttConfig'] = undefined;

/**
 * The resource path name. For example, `projects/example-project/locations/us-central1/registries/my-registry`.
 * @member {String} name
 */
DeviceRegistry.prototype['name'] = undefined;

/**
 * @member {module:model/StateNotificationConfig} stateNotificationConfig
 */
DeviceRegistry.prototype['stateNotificationConfig'] = undefined;





/**
 * Allowed values for the <code>logLevel</code> property.
 * @enum {String}
 * @readonly
 */
DeviceRegistry['LogLevelEnum'] = {

    /**
     * value: "LOG_LEVEL_UNSPECIFIED"
     * @const
     */
    "LOG_LEVEL_UNSPECIFIED": "LOG_LEVEL_UNSPECIFIED",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "INFO"
     * @const
     */
    "INFO": "INFO",

    /**
     * value: "DEBUG"
     * @const
     */
    "DEBUG": "DEBUG"
};



export default DeviceRegistry;

