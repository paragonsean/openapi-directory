/**
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventNotificationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventNotificationConfig::OAIEventNotificationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventNotificationConfig::OAIEventNotificationConfig() {
    this->initializeModel();
}

OAIEventNotificationConfig::~OAIEventNotificationConfig() {}

void OAIEventNotificationConfig::initializeModel() {

    m_pubsub_topic_name_isSet = false;
    m_pubsub_topic_name_isValid = false;

    m_subfolder_matches_isSet = false;
    m_subfolder_matches_isValid = false;
}

void OAIEventNotificationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventNotificationConfig::fromJsonObject(QJsonObject json) {

    m_pubsub_topic_name_isValid = ::OpenAPI::fromJsonValue(m_pubsub_topic_name, json[QString("pubsubTopicName")]);
    m_pubsub_topic_name_isSet = !json[QString("pubsubTopicName")].isNull() && m_pubsub_topic_name_isValid;

    m_subfolder_matches_isValid = ::OpenAPI::fromJsonValue(m_subfolder_matches, json[QString("subfolderMatches")]);
    m_subfolder_matches_isSet = !json[QString("subfolderMatches")].isNull() && m_subfolder_matches_isValid;
}

QString OAIEventNotificationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventNotificationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_pubsub_topic_name_isSet) {
        obj.insert(QString("pubsubTopicName"), ::OpenAPI::toJsonValue(m_pubsub_topic_name));
    }
    if (m_subfolder_matches_isSet) {
        obj.insert(QString("subfolderMatches"), ::OpenAPI::toJsonValue(m_subfolder_matches));
    }
    return obj;
}

QString OAIEventNotificationConfig::getPubsubTopicName() const {
    return m_pubsub_topic_name;
}
void OAIEventNotificationConfig::setPubsubTopicName(const QString &pubsub_topic_name) {
    m_pubsub_topic_name = pubsub_topic_name;
    m_pubsub_topic_name_isSet = true;
}

bool OAIEventNotificationConfig::is_pubsub_topic_name_Set() const{
    return m_pubsub_topic_name_isSet;
}

bool OAIEventNotificationConfig::is_pubsub_topic_name_Valid() const{
    return m_pubsub_topic_name_isValid;
}

QString OAIEventNotificationConfig::getSubfolderMatches() const {
    return m_subfolder_matches;
}
void OAIEventNotificationConfig::setSubfolderMatches(const QString &subfolder_matches) {
    m_subfolder_matches = subfolder_matches;
    m_subfolder_matches_isSet = true;
}

bool OAIEventNotificationConfig::is_subfolder_matches_Set() const{
    return m_subfolder_matches_isSet;
}

bool OAIEventNotificationConfig::is_subfolder_matches_Valid() const{
    return m_subfolder_matches_isValid;
}

bool OAIEventNotificationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pubsub_topic_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subfolder_matches_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventNotificationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
