/**
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGatewayConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGatewayConfig::OAIGatewayConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGatewayConfig::OAIGatewayConfig() {
    this->initializeModel();
}

OAIGatewayConfig::~OAIGatewayConfig() {}

void OAIGatewayConfig::initializeModel() {

    m_gateway_auth_method_isSet = false;
    m_gateway_auth_method_isValid = false;

    m_gateway_type_isSet = false;
    m_gateway_type_isValid = false;

    m_last_accessed_gateway_id_isSet = false;
    m_last_accessed_gateway_id_isValid = false;

    m_last_accessed_gateway_time_isSet = false;
    m_last_accessed_gateway_time_isValid = false;
}

void OAIGatewayConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGatewayConfig::fromJsonObject(QJsonObject json) {

    m_gateway_auth_method_isValid = ::OpenAPI::fromJsonValue(m_gateway_auth_method, json[QString("gatewayAuthMethod")]);
    m_gateway_auth_method_isSet = !json[QString("gatewayAuthMethod")].isNull() && m_gateway_auth_method_isValid;

    m_gateway_type_isValid = ::OpenAPI::fromJsonValue(m_gateway_type, json[QString("gatewayType")]);
    m_gateway_type_isSet = !json[QString("gatewayType")].isNull() && m_gateway_type_isValid;

    m_last_accessed_gateway_id_isValid = ::OpenAPI::fromJsonValue(m_last_accessed_gateway_id, json[QString("lastAccessedGatewayId")]);
    m_last_accessed_gateway_id_isSet = !json[QString("lastAccessedGatewayId")].isNull() && m_last_accessed_gateway_id_isValid;

    m_last_accessed_gateway_time_isValid = ::OpenAPI::fromJsonValue(m_last_accessed_gateway_time, json[QString("lastAccessedGatewayTime")]);
    m_last_accessed_gateway_time_isSet = !json[QString("lastAccessedGatewayTime")].isNull() && m_last_accessed_gateway_time_isValid;
}

QString OAIGatewayConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGatewayConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_gateway_auth_method_isSet) {
        obj.insert(QString("gatewayAuthMethod"), ::OpenAPI::toJsonValue(m_gateway_auth_method));
    }
    if (m_gateway_type_isSet) {
        obj.insert(QString("gatewayType"), ::OpenAPI::toJsonValue(m_gateway_type));
    }
    if (m_last_accessed_gateway_id_isSet) {
        obj.insert(QString("lastAccessedGatewayId"), ::OpenAPI::toJsonValue(m_last_accessed_gateway_id));
    }
    if (m_last_accessed_gateway_time_isSet) {
        obj.insert(QString("lastAccessedGatewayTime"), ::OpenAPI::toJsonValue(m_last_accessed_gateway_time));
    }
    return obj;
}

QString OAIGatewayConfig::getGatewayAuthMethod() const {
    return m_gateway_auth_method;
}
void OAIGatewayConfig::setGatewayAuthMethod(const QString &gateway_auth_method) {
    m_gateway_auth_method = gateway_auth_method;
    m_gateway_auth_method_isSet = true;
}

bool OAIGatewayConfig::is_gateway_auth_method_Set() const{
    return m_gateway_auth_method_isSet;
}

bool OAIGatewayConfig::is_gateway_auth_method_Valid() const{
    return m_gateway_auth_method_isValid;
}

QString OAIGatewayConfig::getGatewayType() const {
    return m_gateway_type;
}
void OAIGatewayConfig::setGatewayType(const QString &gateway_type) {
    m_gateway_type = gateway_type;
    m_gateway_type_isSet = true;
}

bool OAIGatewayConfig::is_gateway_type_Set() const{
    return m_gateway_type_isSet;
}

bool OAIGatewayConfig::is_gateway_type_Valid() const{
    return m_gateway_type_isValid;
}

QString OAIGatewayConfig::getLastAccessedGatewayId() const {
    return m_last_accessed_gateway_id;
}
void OAIGatewayConfig::setLastAccessedGatewayId(const QString &last_accessed_gateway_id) {
    m_last_accessed_gateway_id = last_accessed_gateway_id;
    m_last_accessed_gateway_id_isSet = true;
}

bool OAIGatewayConfig::is_last_accessed_gateway_id_Set() const{
    return m_last_accessed_gateway_id_isSet;
}

bool OAIGatewayConfig::is_last_accessed_gateway_id_Valid() const{
    return m_last_accessed_gateway_id_isValid;
}

QString OAIGatewayConfig::getLastAccessedGatewayTime() const {
    return m_last_accessed_gateway_time;
}
void OAIGatewayConfig::setLastAccessedGatewayTime(const QString &last_accessed_gateway_time) {
    m_last_accessed_gateway_time = last_accessed_gateway_time;
    m_last_accessed_gateway_time_isSet = true;
}

bool OAIGatewayConfig::is_last_accessed_gateway_time_Set() const{
    return m_last_accessed_gateway_time_isSet;
}

bool OAIGatewayConfig::is_last_accessed_gateway_time_Valid() const{
    return m_last_accessed_gateway_time_isValid;
}

bool OAIGatewayConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gateway_auth_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_accessed_gateway_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_accessed_gateway_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGatewayConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
