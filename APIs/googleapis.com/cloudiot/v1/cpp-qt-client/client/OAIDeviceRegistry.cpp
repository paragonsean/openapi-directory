/**
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceRegistry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceRegistry::OAIDeviceRegistry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceRegistry::OAIDeviceRegistry() {
    this->initializeModel();
}

OAIDeviceRegistry::~OAIDeviceRegistry() {}

void OAIDeviceRegistry::initializeModel() {

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_event_notification_configs_isSet = false;
    m_event_notification_configs_isValid = false;

    m_http_config_isSet = false;
    m_http_config_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_log_level_isSet = false;
    m_log_level_isValid = false;

    m_mqtt_config_isSet = false;
    m_mqtt_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_notification_config_isSet = false;
    m_state_notification_config_isValid = false;
}

void OAIDeviceRegistry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceRegistry::fromJsonObject(QJsonObject json) {

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_event_notification_configs_isValid = ::OpenAPI::fromJsonValue(m_event_notification_configs, json[QString("eventNotificationConfigs")]);
    m_event_notification_configs_isSet = !json[QString("eventNotificationConfigs")].isNull() && m_event_notification_configs_isValid;

    m_http_config_isValid = ::OpenAPI::fromJsonValue(m_http_config, json[QString("httpConfig")]);
    m_http_config_isSet = !json[QString("httpConfig")].isNull() && m_http_config_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_log_level_isValid = ::OpenAPI::fromJsonValue(m_log_level, json[QString("logLevel")]);
    m_log_level_isSet = !json[QString("logLevel")].isNull() && m_log_level_isValid;

    m_mqtt_config_isValid = ::OpenAPI::fromJsonValue(m_mqtt_config, json[QString("mqttConfig")]);
    m_mqtt_config_isSet = !json[QString("mqttConfig")].isNull() && m_mqtt_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_notification_config_isValid = ::OpenAPI::fromJsonValue(m_state_notification_config, json[QString("stateNotificationConfig")]);
    m_state_notification_config_isSet = !json[QString("stateNotificationConfig")].isNull() && m_state_notification_config_isValid;
}

QString OAIDeviceRegistry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceRegistry::asJsonObject() const {
    QJsonObject obj;
    if (m_credentials.size() > 0) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_event_notification_configs.size() > 0) {
        obj.insert(QString("eventNotificationConfigs"), ::OpenAPI::toJsonValue(m_event_notification_configs));
    }
    if (m_http_config.isSet()) {
        obj.insert(QString("httpConfig"), ::OpenAPI::toJsonValue(m_http_config));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_log_level_isSet) {
        obj.insert(QString("logLevel"), ::OpenAPI::toJsonValue(m_log_level));
    }
    if (m_mqtt_config.isSet()) {
        obj.insert(QString("mqttConfig"), ::OpenAPI::toJsonValue(m_mqtt_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_notification_config.isSet()) {
        obj.insert(QString("stateNotificationConfig"), ::OpenAPI::toJsonValue(m_state_notification_config));
    }
    return obj;
}

QList<OAIRegistryCredential> OAIDeviceRegistry::getCredentials() const {
    return m_credentials;
}
void OAIDeviceRegistry::setCredentials(const QList<OAIRegistryCredential> &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIDeviceRegistry::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIDeviceRegistry::is_credentials_Valid() const{
    return m_credentials_isValid;
}

QList<OAIEventNotificationConfig> OAIDeviceRegistry::getEventNotificationConfigs() const {
    return m_event_notification_configs;
}
void OAIDeviceRegistry::setEventNotificationConfigs(const QList<OAIEventNotificationConfig> &event_notification_configs) {
    m_event_notification_configs = event_notification_configs;
    m_event_notification_configs_isSet = true;
}

bool OAIDeviceRegistry::is_event_notification_configs_Set() const{
    return m_event_notification_configs_isSet;
}

bool OAIDeviceRegistry::is_event_notification_configs_Valid() const{
    return m_event_notification_configs_isValid;
}

OAIHttpConfig OAIDeviceRegistry::getHttpConfig() const {
    return m_http_config;
}
void OAIDeviceRegistry::setHttpConfig(const OAIHttpConfig &http_config) {
    m_http_config = http_config;
    m_http_config_isSet = true;
}

bool OAIDeviceRegistry::is_http_config_Set() const{
    return m_http_config_isSet;
}

bool OAIDeviceRegistry::is_http_config_Valid() const{
    return m_http_config_isValid;
}

QString OAIDeviceRegistry::getId() const {
    return m_id;
}
void OAIDeviceRegistry::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeviceRegistry::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeviceRegistry::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeviceRegistry::getLogLevel() const {
    return m_log_level;
}
void OAIDeviceRegistry::setLogLevel(const QString &log_level) {
    m_log_level = log_level;
    m_log_level_isSet = true;
}

bool OAIDeviceRegistry::is_log_level_Set() const{
    return m_log_level_isSet;
}

bool OAIDeviceRegistry::is_log_level_Valid() const{
    return m_log_level_isValid;
}

OAIMqttConfig OAIDeviceRegistry::getMqttConfig() const {
    return m_mqtt_config;
}
void OAIDeviceRegistry::setMqttConfig(const OAIMqttConfig &mqtt_config) {
    m_mqtt_config = mqtt_config;
    m_mqtt_config_isSet = true;
}

bool OAIDeviceRegistry::is_mqtt_config_Set() const{
    return m_mqtt_config_isSet;
}

bool OAIDeviceRegistry::is_mqtt_config_Valid() const{
    return m_mqtt_config_isValid;
}

QString OAIDeviceRegistry::getName() const {
    return m_name;
}
void OAIDeviceRegistry::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeviceRegistry::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeviceRegistry::is_name_Valid() const{
    return m_name_isValid;
}

OAIStateNotificationConfig OAIDeviceRegistry::getStateNotificationConfig() const {
    return m_state_notification_config;
}
void OAIDeviceRegistry::setStateNotificationConfig(const OAIStateNotificationConfig &state_notification_config) {
    m_state_notification_config = state_notification_config;
    m_state_notification_config_isSet = true;
}

bool OAIDeviceRegistry::is_state_notification_config_Set() const{
    return m_state_notification_config_isSet;
}

bool OAIDeviceRegistry::is_state_notification_config_Valid() const{
    return m_state_notification_config_isValid;
}

bool OAIDeviceRegistry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credentials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_notification_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mqtt_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_notification_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceRegistry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
