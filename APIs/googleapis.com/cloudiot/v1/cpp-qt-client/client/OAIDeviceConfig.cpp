/**
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceConfig::OAIDeviceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceConfig::OAIDeviceConfig() {
    this->initializeModel();
}

OAIDeviceConfig::~OAIDeviceConfig() {}

void OAIDeviceConfig::initializeModel() {

    m_binary_data_isSet = false;
    m_binary_data_isValid = false;

    m_cloud_update_time_isSet = false;
    m_cloud_update_time_isValid = false;

    m_device_ack_time_isSet = false;
    m_device_ack_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIDeviceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceConfig::fromJsonObject(QJsonObject json) {

    m_binary_data_isValid = ::OpenAPI::fromJsonValue(m_binary_data, json[QString("binaryData")]);
    m_binary_data_isSet = !json[QString("binaryData")].isNull() && m_binary_data_isValid;

    m_cloud_update_time_isValid = ::OpenAPI::fromJsonValue(m_cloud_update_time, json[QString("cloudUpdateTime")]);
    m_cloud_update_time_isSet = !json[QString("cloudUpdateTime")].isNull() && m_cloud_update_time_isValid;

    m_device_ack_time_isValid = ::OpenAPI::fromJsonValue(m_device_ack_time, json[QString("deviceAckTime")]);
    m_device_ack_time_isSet = !json[QString("deviceAckTime")].isNull() && m_device_ack_time_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIDeviceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_binary_data_isSet) {
        obj.insert(QString("binaryData"), ::OpenAPI::toJsonValue(m_binary_data));
    }
    if (m_cloud_update_time_isSet) {
        obj.insert(QString("cloudUpdateTime"), ::OpenAPI::toJsonValue(m_cloud_update_time));
    }
    if (m_device_ack_time_isSet) {
        obj.insert(QString("deviceAckTime"), ::OpenAPI::toJsonValue(m_device_ack_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QByteArray OAIDeviceConfig::getBinaryData() const {
    return m_binary_data;
}
void OAIDeviceConfig::setBinaryData(const QByteArray &binary_data) {
    m_binary_data = binary_data;
    m_binary_data_isSet = true;
}

bool OAIDeviceConfig::is_binary_data_Set() const{
    return m_binary_data_isSet;
}

bool OAIDeviceConfig::is_binary_data_Valid() const{
    return m_binary_data_isValid;
}

QString OAIDeviceConfig::getCloudUpdateTime() const {
    return m_cloud_update_time;
}
void OAIDeviceConfig::setCloudUpdateTime(const QString &cloud_update_time) {
    m_cloud_update_time = cloud_update_time;
    m_cloud_update_time_isSet = true;
}

bool OAIDeviceConfig::is_cloud_update_time_Set() const{
    return m_cloud_update_time_isSet;
}

bool OAIDeviceConfig::is_cloud_update_time_Valid() const{
    return m_cloud_update_time_isValid;
}

QString OAIDeviceConfig::getDeviceAckTime() const {
    return m_device_ack_time;
}
void OAIDeviceConfig::setDeviceAckTime(const QString &device_ack_time) {
    m_device_ack_time = device_ack_time;
    m_device_ack_time_isSet = true;
}

bool OAIDeviceConfig::is_device_ack_time_Set() const{
    return m_device_ack_time_isSet;
}

bool OAIDeviceConfig::is_device_ack_time_Valid() const{
    return m_device_ack_time_isValid;
}

QString OAIDeviceConfig::getVersion() const {
    return m_version;
}
void OAIDeviceConfig::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDeviceConfig::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDeviceConfig::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIDeviceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_binary_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_ack_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
