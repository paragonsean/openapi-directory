/**
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModifyCloudToDeviceConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModifyCloudToDeviceConfigRequest::OAIModifyCloudToDeviceConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModifyCloudToDeviceConfigRequest::OAIModifyCloudToDeviceConfigRequest() {
    this->initializeModel();
}

OAIModifyCloudToDeviceConfigRequest::~OAIModifyCloudToDeviceConfigRequest() {}

void OAIModifyCloudToDeviceConfigRequest::initializeModel() {

    m_binary_data_isSet = false;
    m_binary_data_isValid = false;

    m_version_to_update_isSet = false;
    m_version_to_update_isValid = false;
}

void OAIModifyCloudToDeviceConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModifyCloudToDeviceConfigRequest::fromJsonObject(QJsonObject json) {

    m_binary_data_isValid = ::OpenAPI::fromJsonValue(m_binary_data, json[QString("binaryData")]);
    m_binary_data_isSet = !json[QString("binaryData")].isNull() && m_binary_data_isValid;

    m_version_to_update_isValid = ::OpenAPI::fromJsonValue(m_version_to_update, json[QString("versionToUpdate")]);
    m_version_to_update_isSet = !json[QString("versionToUpdate")].isNull() && m_version_to_update_isValid;
}

QString OAIModifyCloudToDeviceConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModifyCloudToDeviceConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_binary_data_isSet) {
        obj.insert(QString("binaryData"), ::OpenAPI::toJsonValue(m_binary_data));
    }
    if (m_version_to_update_isSet) {
        obj.insert(QString("versionToUpdate"), ::OpenAPI::toJsonValue(m_version_to_update));
    }
    return obj;
}

QByteArray OAIModifyCloudToDeviceConfigRequest::getBinaryData() const {
    return m_binary_data;
}
void OAIModifyCloudToDeviceConfigRequest::setBinaryData(const QByteArray &binary_data) {
    m_binary_data = binary_data;
    m_binary_data_isSet = true;
}

bool OAIModifyCloudToDeviceConfigRequest::is_binary_data_Set() const{
    return m_binary_data_isSet;
}

bool OAIModifyCloudToDeviceConfigRequest::is_binary_data_Valid() const{
    return m_binary_data_isValid;
}

QString OAIModifyCloudToDeviceConfigRequest::getVersionToUpdate() const {
    return m_version_to_update;
}
void OAIModifyCloudToDeviceConfigRequest::setVersionToUpdate(const QString &version_to_update) {
    m_version_to_update = version_to_update;
    m_version_to_update_isSet = true;
}

bool OAIModifyCloudToDeviceConfigRequest::is_version_to_update_Set() const{
    return m_version_to_update_isSet;
}

bool OAIModifyCloudToDeviceConfigRequest::is_version_to_update_Valid() const{
    return m_version_to_update_isValid;
}

bool OAIModifyCloudToDeviceConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_binary_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_to_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModifyCloudToDeviceConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
