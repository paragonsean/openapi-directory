/**
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendCommandToDeviceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendCommandToDeviceRequest::OAISendCommandToDeviceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendCommandToDeviceRequest::OAISendCommandToDeviceRequest() {
    this->initializeModel();
}

OAISendCommandToDeviceRequest::~OAISendCommandToDeviceRequest() {}

void OAISendCommandToDeviceRequest::initializeModel() {

    m_binary_data_isSet = false;
    m_binary_data_isValid = false;

    m_subfolder_isSet = false;
    m_subfolder_isValid = false;
}

void OAISendCommandToDeviceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendCommandToDeviceRequest::fromJsonObject(QJsonObject json) {

    m_binary_data_isValid = ::OpenAPI::fromJsonValue(m_binary_data, json[QString("binaryData")]);
    m_binary_data_isSet = !json[QString("binaryData")].isNull() && m_binary_data_isValid;

    m_subfolder_isValid = ::OpenAPI::fromJsonValue(m_subfolder, json[QString("subfolder")]);
    m_subfolder_isSet = !json[QString("subfolder")].isNull() && m_subfolder_isValid;
}

QString OAISendCommandToDeviceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendCommandToDeviceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_binary_data_isSet) {
        obj.insert(QString("binaryData"), ::OpenAPI::toJsonValue(m_binary_data));
    }
    if (m_subfolder_isSet) {
        obj.insert(QString("subfolder"), ::OpenAPI::toJsonValue(m_subfolder));
    }
    return obj;
}

QByteArray OAISendCommandToDeviceRequest::getBinaryData() const {
    return m_binary_data;
}
void OAISendCommandToDeviceRequest::setBinaryData(const QByteArray &binary_data) {
    m_binary_data = binary_data;
    m_binary_data_isSet = true;
}

bool OAISendCommandToDeviceRequest::is_binary_data_Set() const{
    return m_binary_data_isSet;
}

bool OAISendCommandToDeviceRequest::is_binary_data_Valid() const{
    return m_binary_data_isValid;
}

QString OAISendCommandToDeviceRequest::getSubfolder() const {
    return m_subfolder;
}
void OAISendCommandToDeviceRequest::setSubfolder(const QString &subfolder) {
    m_subfolder = subfolder;
    m_subfolder_isSet = true;
}

bool OAISendCommandToDeviceRequest::is_subfolder_Set() const{
    return m_subfolder_isSet;
}

bool OAISendCommandToDeviceRequest::is_subfolder_Valid() const{
    return m_subfolder_isValid;
}

bool OAISendCommandToDeviceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_binary_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subfolder_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendCommandToDeviceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
