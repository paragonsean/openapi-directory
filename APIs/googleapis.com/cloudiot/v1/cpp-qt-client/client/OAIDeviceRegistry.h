/**
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeviceRegistry.h
 *
 * A container for a group of devices.
 */

#ifndef OAIDeviceRegistry_H
#define OAIDeviceRegistry_H

#include <QJsonObject>

#include "OAIEventNotificationConfig.h"
#include "OAIHttpConfig.h"
#include "OAIMqttConfig.h"
#include "OAIRegistryCredential.h"
#include "OAIStateNotificationConfig.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRegistryCredential;
class OAIEventNotificationConfig;
class OAIHttpConfig;
class OAIMqttConfig;
class OAIStateNotificationConfig;

class OAIDeviceRegistry : public OAIObject {
public:
    OAIDeviceRegistry();
    OAIDeviceRegistry(QString json);
    ~OAIDeviceRegistry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIRegistryCredential> getCredentials() const;
    void setCredentials(const QList<OAIRegistryCredential> &credentials);
    bool is_credentials_Set() const;
    bool is_credentials_Valid() const;

    QList<OAIEventNotificationConfig> getEventNotificationConfigs() const;
    void setEventNotificationConfigs(const QList<OAIEventNotificationConfig> &event_notification_configs);
    bool is_event_notification_configs_Set() const;
    bool is_event_notification_configs_Valid() const;

    OAIHttpConfig getHttpConfig() const;
    void setHttpConfig(const OAIHttpConfig &http_config);
    bool is_http_config_Set() const;
    bool is_http_config_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLogLevel() const;
    void setLogLevel(const QString &log_level);
    bool is_log_level_Set() const;
    bool is_log_level_Valid() const;

    OAIMqttConfig getMqttConfig() const;
    void setMqttConfig(const OAIMqttConfig &mqtt_config);
    bool is_mqtt_config_Set() const;
    bool is_mqtt_config_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIStateNotificationConfig getStateNotificationConfig() const;
    void setStateNotificationConfig(const OAIStateNotificationConfig &state_notification_config);
    bool is_state_notification_config_Set() const;
    bool is_state_notification_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIRegistryCredential> m_credentials;
    bool m_credentials_isSet;
    bool m_credentials_isValid;

    QList<OAIEventNotificationConfig> m_event_notification_configs;
    bool m_event_notification_configs_isSet;
    bool m_event_notification_configs_isValid;

    OAIHttpConfig m_http_config;
    bool m_http_config_isSet;
    bool m_http_config_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_log_level;
    bool m_log_level_isSet;
    bool m_log_level_isValid;

    OAIMqttConfig m_mqtt_config;
    bool m_mqtt_config_isSet;
    bool m_mqtt_config_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIStateNotificationConfig m_state_notification_config;
    bool m_state_notification_config_isSet;
    bool m_state_notification_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeviceRegistry)

#endif // OAIDeviceRegistry_H
