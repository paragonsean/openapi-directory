/**
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevice::OAIDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevice::OAIDevice() {
    this->initializeModel();
}

OAIDevice::~OAIDevice() {}

void OAIDevice::initializeModel() {

    m_blocked_isSet = false;
    m_blocked_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_gateway_config_isSet = false;
    m_gateway_config_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_config_ack_time_isSet = false;
    m_last_config_ack_time_isValid = false;

    m_last_config_send_time_isSet = false;
    m_last_config_send_time_isValid = false;

    m_last_error_status_isSet = false;
    m_last_error_status_isValid = false;

    m_last_error_time_isSet = false;
    m_last_error_time_isValid = false;

    m_last_event_time_isSet = false;
    m_last_event_time_isValid = false;

    m_last_heartbeat_time_isSet = false;
    m_last_heartbeat_time_isValid = false;

    m_last_state_time_isSet = false;
    m_last_state_time_isValid = false;

    m_log_level_isSet = false;
    m_log_level_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_num_id_isSet = false;
    m_num_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevice::fromJsonObject(QJsonObject json) {

    m_blocked_isValid = ::OpenAPI::fromJsonValue(m_blocked, json[QString("blocked")]);
    m_blocked_isSet = !json[QString("blocked")].isNull() && m_blocked_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_gateway_config_isValid = ::OpenAPI::fromJsonValue(m_gateway_config, json[QString("gatewayConfig")]);
    m_gateway_config_isSet = !json[QString("gatewayConfig")].isNull() && m_gateway_config_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_config_ack_time_isValid = ::OpenAPI::fromJsonValue(m_last_config_ack_time, json[QString("lastConfigAckTime")]);
    m_last_config_ack_time_isSet = !json[QString("lastConfigAckTime")].isNull() && m_last_config_ack_time_isValid;

    m_last_config_send_time_isValid = ::OpenAPI::fromJsonValue(m_last_config_send_time, json[QString("lastConfigSendTime")]);
    m_last_config_send_time_isSet = !json[QString("lastConfigSendTime")].isNull() && m_last_config_send_time_isValid;

    m_last_error_status_isValid = ::OpenAPI::fromJsonValue(m_last_error_status, json[QString("lastErrorStatus")]);
    m_last_error_status_isSet = !json[QString("lastErrorStatus")].isNull() && m_last_error_status_isValid;

    m_last_error_time_isValid = ::OpenAPI::fromJsonValue(m_last_error_time, json[QString("lastErrorTime")]);
    m_last_error_time_isSet = !json[QString("lastErrorTime")].isNull() && m_last_error_time_isValid;

    m_last_event_time_isValid = ::OpenAPI::fromJsonValue(m_last_event_time, json[QString("lastEventTime")]);
    m_last_event_time_isSet = !json[QString("lastEventTime")].isNull() && m_last_event_time_isValid;

    m_last_heartbeat_time_isValid = ::OpenAPI::fromJsonValue(m_last_heartbeat_time, json[QString("lastHeartbeatTime")]);
    m_last_heartbeat_time_isSet = !json[QString("lastHeartbeatTime")].isNull() && m_last_heartbeat_time_isValid;

    m_last_state_time_isValid = ::OpenAPI::fromJsonValue(m_last_state_time, json[QString("lastStateTime")]);
    m_last_state_time_isSet = !json[QString("lastStateTime")].isNull() && m_last_state_time_isValid;

    m_log_level_isValid = ::OpenAPI::fromJsonValue(m_log_level, json[QString("logLevel")]);
    m_log_level_isSet = !json[QString("logLevel")].isNull() && m_log_level_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_num_id_isValid = ::OpenAPI::fromJsonValue(m_num_id, json[QString("numId")]);
    m_num_id_isSet = !json[QString("numId")].isNull() && m_num_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_blocked_isSet) {
        obj.insert(QString("blocked"), ::OpenAPI::toJsonValue(m_blocked));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_credentials.size() > 0) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_gateway_config.isSet()) {
        obj.insert(QString("gatewayConfig"), ::OpenAPI::toJsonValue(m_gateway_config));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_config_ack_time_isSet) {
        obj.insert(QString("lastConfigAckTime"), ::OpenAPI::toJsonValue(m_last_config_ack_time));
    }
    if (m_last_config_send_time_isSet) {
        obj.insert(QString("lastConfigSendTime"), ::OpenAPI::toJsonValue(m_last_config_send_time));
    }
    if (m_last_error_status.isSet()) {
        obj.insert(QString("lastErrorStatus"), ::OpenAPI::toJsonValue(m_last_error_status));
    }
    if (m_last_error_time_isSet) {
        obj.insert(QString("lastErrorTime"), ::OpenAPI::toJsonValue(m_last_error_time));
    }
    if (m_last_event_time_isSet) {
        obj.insert(QString("lastEventTime"), ::OpenAPI::toJsonValue(m_last_event_time));
    }
    if (m_last_heartbeat_time_isSet) {
        obj.insert(QString("lastHeartbeatTime"), ::OpenAPI::toJsonValue(m_last_heartbeat_time));
    }
    if (m_last_state_time_isSet) {
        obj.insert(QString("lastStateTime"), ::OpenAPI::toJsonValue(m_last_state_time));
    }
    if (m_log_level_isSet) {
        obj.insert(QString("logLevel"), ::OpenAPI::toJsonValue(m_log_level));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_num_id_isSet) {
        obj.insert(QString("numId"), ::OpenAPI::toJsonValue(m_num_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

bool OAIDevice::isBlocked() const {
    return m_blocked;
}
void OAIDevice::setBlocked(const bool &blocked) {
    m_blocked = blocked;
    m_blocked_isSet = true;
}

bool OAIDevice::is_blocked_Set() const{
    return m_blocked_isSet;
}

bool OAIDevice::is_blocked_Valid() const{
    return m_blocked_isValid;
}

OAIDeviceConfig OAIDevice::getConfig() const {
    return m_config;
}
void OAIDevice::setConfig(const OAIDeviceConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIDevice::is_config_Set() const{
    return m_config_isSet;
}

bool OAIDevice::is_config_Valid() const{
    return m_config_isValid;
}

QList<OAIDeviceCredential> OAIDevice::getCredentials() const {
    return m_credentials;
}
void OAIDevice::setCredentials(const QList<OAIDeviceCredential> &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIDevice::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIDevice::is_credentials_Valid() const{
    return m_credentials_isValid;
}

OAIGatewayConfig OAIDevice::getGatewayConfig() const {
    return m_gateway_config;
}
void OAIDevice::setGatewayConfig(const OAIGatewayConfig &gateway_config) {
    m_gateway_config = gateway_config;
    m_gateway_config_isSet = true;
}

bool OAIDevice::is_gateway_config_Set() const{
    return m_gateway_config_isSet;
}

bool OAIDevice::is_gateway_config_Valid() const{
    return m_gateway_config_isValid;
}

QString OAIDevice::getId() const {
    return m_id;
}
void OAIDevice::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDevice::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDevice::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDevice::getLastConfigAckTime() const {
    return m_last_config_ack_time;
}
void OAIDevice::setLastConfigAckTime(const QString &last_config_ack_time) {
    m_last_config_ack_time = last_config_ack_time;
    m_last_config_ack_time_isSet = true;
}

bool OAIDevice::is_last_config_ack_time_Set() const{
    return m_last_config_ack_time_isSet;
}

bool OAIDevice::is_last_config_ack_time_Valid() const{
    return m_last_config_ack_time_isValid;
}

QString OAIDevice::getLastConfigSendTime() const {
    return m_last_config_send_time;
}
void OAIDevice::setLastConfigSendTime(const QString &last_config_send_time) {
    m_last_config_send_time = last_config_send_time;
    m_last_config_send_time_isSet = true;
}

bool OAIDevice::is_last_config_send_time_Set() const{
    return m_last_config_send_time_isSet;
}

bool OAIDevice::is_last_config_send_time_Valid() const{
    return m_last_config_send_time_isValid;
}

OAIStatus OAIDevice::getLastErrorStatus() const {
    return m_last_error_status;
}
void OAIDevice::setLastErrorStatus(const OAIStatus &last_error_status) {
    m_last_error_status = last_error_status;
    m_last_error_status_isSet = true;
}

bool OAIDevice::is_last_error_status_Set() const{
    return m_last_error_status_isSet;
}

bool OAIDevice::is_last_error_status_Valid() const{
    return m_last_error_status_isValid;
}

QString OAIDevice::getLastErrorTime() const {
    return m_last_error_time;
}
void OAIDevice::setLastErrorTime(const QString &last_error_time) {
    m_last_error_time = last_error_time;
    m_last_error_time_isSet = true;
}

bool OAIDevice::is_last_error_time_Set() const{
    return m_last_error_time_isSet;
}

bool OAIDevice::is_last_error_time_Valid() const{
    return m_last_error_time_isValid;
}

QString OAIDevice::getLastEventTime() const {
    return m_last_event_time;
}
void OAIDevice::setLastEventTime(const QString &last_event_time) {
    m_last_event_time = last_event_time;
    m_last_event_time_isSet = true;
}

bool OAIDevice::is_last_event_time_Set() const{
    return m_last_event_time_isSet;
}

bool OAIDevice::is_last_event_time_Valid() const{
    return m_last_event_time_isValid;
}

QString OAIDevice::getLastHeartbeatTime() const {
    return m_last_heartbeat_time;
}
void OAIDevice::setLastHeartbeatTime(const QString &last_heartbeat_time) {
    m_last_heartbeat_time = last_heartbeat_time;
    m_last_heartbeat_time_isSet = true;
}

bool OAIDevice::is_last_heartbeat_time_Set() const{
    return m_last_heartbeat_time_isSet;
}

bool OAIDevice::is_last_heartbeat_time_Valid() const{
    return m_last_heartbeat_time_isValid;
}

QString OAIDevice::getLastStateTime() const {
    return m_last_state_time;
}
void OAIDevice::setLastStateTime(const QString &last_state_time) {
    m_last_state_time = last_state_time;
    m_last_state_time_isSet = true;
}

bool OAIDevice::is_last_state_time_Set() const{
    return m_last_state_time_isSet;
}

bool OAIDevice::is_last_state_time_Valid() const{
    return m_last_state_time_isValid;
}

QString OAIDevice::getLogLevel() const {
    return m_log_level;
}
void OAIDevice::setLogLevel(const QString &log_level) {
    m_log_level = log_level;
    m_log_level_isSet = true;
}

bool OAIDevice::is_log_level_Set() const{
    return m_log_level_isSet;
}

bool OAIDevice::is_log_level_Valid() const{
    return m_log_level_isValid;
}

QMap<QString, QString> OAIDevice::getMetadata() const {
    return m_metadata;
}
void OAIDevice::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDevice::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDevice::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIDevice::getName() const {
    return m_name;
}
void OAIDevice::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDevice::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDevice::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDevice::getNumId() const {
    return m_num_id;
}
void OAIDevice::setNumId(const QString &num_id) {
    m_num_id = num_id;
    m_num_id_isSet = true;
}

bool OAIDevice::is_num_id_Set() const{
    return m_num_id_isSet;
}

bool OAIDevice::is_num_id_Valid() const{
    return m_num_id_isValid;
}

OAIDeviceState OAIDevice::getState() const {
    return m_state;
}
void OAIDevice::setState(const OAIDeviceState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDevice::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDevice::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_config_ack_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_config_send_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_error_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_error_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_heartbeat_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_state_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
