/**
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIX509CertificateDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIX509CertificateDetails::OAIX509CertificateDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIX509CertificateDetails::OAIX509CertificateDetails() {
    this->initializeModel();
}

OAIX509CertificateDetails::~OAIX509CertificateDetails() {}

void OAIX509CertificateDetails::initializeModel() {

    m_expiry_time_isSet = false;
    m_expiry_time_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_public_key_type_isSet = false;
    m_public_key_type_isValid = false;

    m_signature_algorithm_isSet = false;
    m_signature_algorithm_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIX509CertificateDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIX509CertificateDetails::fromJsonObject(QJsonObject json) {

    m_expiry_time_isValid = ::OpenAPI::fromJsonValue(m_expiry_time, json[QString("expiryTime")]);
    m_expiry_time_isSet = !json[QString("expiryTime")].isNull() && m_expiry_time_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_public_key_type_isValid = ::OpenAPI::fromJsonValue(m_public_key_type, json[QString("publicKeyType")]);
    m_public_key_type_isSet = !json[QString("publicKeyType")].isNull() && m_public_key_type_isValid;

    m_signature_algorithm_isValid = ::OpenAPI::fromJsonValue(m_signature_algorithm, json[QString("signatureAlgorithm")]);
    m_signature_algorithm_isSet = !json[QString("signatureAlgorithm")].isNull() && m_signature_algorithm_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAIX509CertificateDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIX509CertificateDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_expiry_time_isSet) {
        obj.insert(QString("expiryTime"), ::OpenAPI::toJsonValue(m_expiry_time));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_public_key_type_isSet) {
        obj.insert(QString("publicKeyType"), ::OpenAPI::toJsonValue(m_public_key_type));
    }
    if (m_signature_algorithm_isSet) {
        obj.insert(QString("signatureAlgorithm"), ::OpenAPI::toJsonValue(m_signature_algorithm));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QString OAIX509CertificateDetails::getExpiryTime() const {
    return m_expiry_time;
}
void OAIX509CertificateDetails::setExpiryTime(const QString &expiry_time) {
    m_expiry_time = expiry_time;
    m_expiry_time_isSet = true;
}

bool OAIX509CertificateDetails::is_expiry_time_Set() const{
    return m_expiry_time_isSet;
}

bool OAIX509CertificateDetails::is_expiry_time_Valid() const{
    return m_expiry_time_isValid;
}

QString OAIX509CertificateDetails::getIssuer() const {
    return m_issuer;
}
void OAIX509CertificateDetails::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIX509CertificateDetails::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIX509CertificateDetails::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIX509CertificateDetails::getPublicKeyType() const {
    return m_public_key_type;
}
void OAIX509CertificateDetails::setPublicKeyType(const QString &public_key_type) {
    m_public_key_type = public_key_type;
    m_public_key_type_isSet = true;
}

bool OAIX509CertificateDetails::is_public_key_type_Set() const{
    return m_public_key_type_isSet;
}

bool OAIX509CertificateDetails::is_public_key_type_Valid() const{
    return m_public_key_type_isValid;
}

QString OAIX509CertificateDetails::getSignatureAlgorithm() const {
    return m_signature_algorithm;
}
void OAIX509CertificateDetails::setSignatureAlgorithm(const QString &signature_algorithm) {
    m_signature_algorithm = signature_algorithm;
    m_signature_algorithm_isSet = true;
}

bool OAIX509CertificateDetails::is_signature_algorithm_Set() const{
    return m_signature_algorithm_isSet;
}

bool OAIX509CertificateDetails::is_signature_algorithm_Valid() const{
    return m_signature_algorithm_isValid;
}

QString OAIX509CertificateDetails::getStartTime() const {
    return m_start_time;
}
void OAIX509CertificateDetails::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIX509CertificateDetails::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIX509CertificateDetails::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIX509CertificateDetails::getSubject() const {
    return m_subject;
}
void OAIX509CertificateDetails::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIX509CertificateDetails::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIX509CertificateDetails::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIX509CertificateDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiry_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIX509CertificateDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
