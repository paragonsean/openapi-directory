/*
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BindDeviceToGatewayRequest;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceConfig;
import org.openapitools.client.model.DeviceRegistry;
import org.openapitools.client.model.GetIamPolicyRequest;
import org.openapitools.client.model.ListDeviceConfigVersionsResponse;
import org.openapitools.client.model.ListDeviceRegistriesResponse;
import org.openapitools.client.model.ListDeviceStatesResponse;
import org.openapitools.client.model.ListDevicesResponse;
import org.openapitools.client.model.ModifyCloudToDeviceConfigRequest;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.SendCommandToDeviceRequest;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.openapitools.client.model.UnbindDeviceFromGatewayRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Associates the device with the gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesBindDeviceToGatewayTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BindDeviceToGatewayRequest bindDeviceToGatewayRequest = null;
        Object response = api.cloudiotProjectsLocationsRegistriesBindDeviceToGateway(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, bindDeviceToGatewayRequest);
        // TODO: test validations
    }

    /**
     * Creates a device registry that contains devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DeviceRegistry deviceRegistry = null;
        DeviceRegistry response = api.cloudiotProjectsLocationsRegistriesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, deviceRegistry);
        // TODO: test validations
    }

    /**
     * Lists the last few versions of the device configuration in descending order (i.e.: newest first).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesDevicesConfigVersionsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer numVersions = null;
        ListDeviceConfigVersionsResponse response = api.cloudiotProjectsLocationsRegistriesDevicesConfigVersionsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, numVersions);
        // TODO: test validations
    }

    /**
     * Creates a device in a device registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesDevicesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Device device = null;
        Device response = api.cloudiotProjectsLocationsRegistriesDevicesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, device);
        // TODO: test validations
    }

    /**
     * Deletes a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesDevicesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.cloudiotProjectsLocationsRegistriesDevicesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets details about a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesDevicesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String fieldMask = null;
        Device response = api.cloudiotProjectsLocationsRegistriesDevicesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fieldMask);
        // TODO: test validations
    }

    /**
     * Modifies the configuration for the device, which is eventually sent from the Cloud IoT Core servers. Returns the modified configuration version and its metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesDevicesModifyCloudToDeviceConfigTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ModifyCloudToDeviceConfigRequest modifyCloudToDeviceConfigRequest = null;
        DeviceConfig response = api.cloudiotProjectsLocationsRegistriesDevicesModifyCloudToDeviceConfig(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, modifyCloudToDeviceConfigRequest);
        // TODO: test validations
    }

    /**
     * Updates a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesDevicesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Device device = null;
        Device response = api.cloudiotProjectsLocationsRegistriesDevicesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, device);
        // TODO: test validations
    }

    /**
     * Sends a command to the specified device. In order for a device to be able to receive commands, it must: 1) be connected to Cloud IoT Core using the MQTT protocol, and 2) be subscribed to the group of MQTT topics specified by /devices/{device-id}/commands/#. This subscription will receive commands at the top-level topic /devices/{device-id}/commands as well as commands for subfolders, like /devices/{device-id}/commands/subfolder. Note that subscribing to specific subfolders is not supported. If the command could not be delivered to the device, this method will return an error; in particular, if the device is not subscribed, this method will return FAILED_PRECONDITION. Otherwise, this method will return OK. If the subscription is QoS 1, at least once delivery will be guaranteed; for QoS 0, no acknowledgment will be expected from the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesDevicesSendCommandToDeviceTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SendCommandToDeviceRequest sendCommandToDeviceRequest = null;
        Object response = api.cloudiotProjectsLocationsRegistriesDevicesSendCommandToDevice(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sendCommandToDeviceRequest);
        // TODO: test validations
    }

    /**
     * Lists the last few versions of the device state in descending order (i.e.: newest first).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesDevicesStatesListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer numStates = null;
        ListDeviceStatesResponse response = api.cloudiotProjectsLocationsRegistriesDevicesStatesList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, numStates);
        // TODO: test validations
    }

    /**
     * List devices in a device registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesGroupsDevicesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> deviceIds = null;
        List<String> deviceNumIds = null;
        String fieldMask = null;
        String gatewayListOptionsAssociationsDeviceId = null;
        String gatewayListOptionsAssociationsGatewayId = null;
        String gatewayListOptionsGatewayType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListDevicesResponse response = api.cloudiotProjectsLocationsRegistriesGroupsDevicesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, deviceIds, deviceNumIds, fieldMask, gatewayListOptionsAssociationsDeviceId, gatewayListOptionsAssociationsGatewayId, gatewayListOptionsGatewayType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesGroupsGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetIamPolicyRequest getIamPolicyRequest = null;
        Policy response = api.cloudiotProjectsLocationsRegistriesGroupsGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, getIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesGroupsSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.cloudiotProjectsLocationsRegistriesGroupsSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesGroupsTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.cloudiotProjectsLocationsRegistriesGroupsTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Lists device registries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListDeviceRegistriesResponse response = api.cloudiotProjectsLocationsRegistriesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Deletes the association between the device and the gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudiotProjectsLocationsRegistriesUnbindDeviceFromGatewayTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UnbindDeviceFromGatewayRequest unbindDeviceFromGatewayRequest = null;
        Object response = api.cloudiotProjectsLocationsRegistriesUnbindDeviceFromGateway(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, unbindDeviceFromGatewayRequest);
        // TODO: test validations
    }

}
