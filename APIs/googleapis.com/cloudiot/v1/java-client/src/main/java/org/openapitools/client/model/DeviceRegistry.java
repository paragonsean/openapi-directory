/*
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventNotificationConfig;
import org.openapitools.client.model.HttpConfig;
import org.openapitools.client.model.MqttConfig;
import org.openapitools.client.model.RegistryCredential;
import org.openapitools.client.model.StateNotificationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A container for a group of devices.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:25.758673-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceRegistry {
  public static final String SERIALIZED_NAME_CREDENTIALS = "credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private List<RegistryCredential> credentials = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT_NOTIFICATION_CONFIGS = "eventNotificationConfigs";
  @SerializedName(SERIALIZED_NAME_EVENT_NOTIFICATION_CONFIGS)
  private List<EventNotificationConfig> eventNotificationConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_HTTP_CONFIG = "httpConfig";
  @SerializedName(SERIALIZED_NAME_HTTP_CONFIG)
  private HttpConfig httpConfig;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * **Beta Feature** The default logging verbosity for activity from devices in this registry. The verbosity level can be overridden by Device.log_level.
   */
  @JsonAdapter(LogLevelEnum.Adapter.class)
  public enum LogLevelEnum {
    LOG_LEVEL_UNSPECIFIED("LOG_LEVEL_UNSPECIFIED"),
    
    NONE("NONE"),
    
    ERROR("ERROR"),
    
    INFO("INFO"),
    
    DEBUG("DEBUG");

    private String value;

    LogLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogLevelEnum fromValue(String value) {
      for (LogLevelEnum b : LogLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LogLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOG_LEVEL = "logLevel";
  @SerializedName(SERIALIZED_NAME_LOG_LEVEL)
  private LogLevelEnum logLevel;

  public static final String SERIALIZED_NAME_MQTT_CONFIG = "mqttConfig";
  @SerializedName(SERIALIZED_NAME_MQTT_CONFIG)
  private MqttConfig mqttConfig;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATE_NOTIFICATION_CONFIG = "stateNotificationConfig";
  @SerializedName(SERIALIZED_NAME_STATE_NOTIFICATION_CONFIG)
  private StateNotificationConfig stateNotificationConfig;

  public DeviceRegistry() {
  }

  public DeviceRegistry credentials(List<RegistryCredential> credentials) {
    this.credentials = credentials;
    return this;
  }

  public DeviceRegistry addCredentialsItem(RegistryCredential credentialsItem) {
    if (this.credentials == null) {
      this.credentials = new ArrayList<>();
    }
    this.credentials.add(credentialsItem);
    return this;
  }

  /**
   * The credentials used to verify the device credentials. No more than 10 credentials can be bound to a single registry at a time. The verification process occurs at the time of device creation or update. If this field is empty, no verification is performed. Otherwise, the credentials of a newly created device or added credentials of an updated device should be signed with one of these registry credentials. Note, however, that existing devices will never be affected by modifications to this list of credentials: after a device has been successfully created in a registry, it should be able to connect even if its registry credentials are revoked, deleted, or modified.
   * @return credentials
   */
  @javax.annotation.Nullable
  public List<RegistryCredential> getCredentials() {
    return credentials;
  }

  public void setCredentials(List<RegistryCredential> credentials) {
    this.credentials = credentials;
  }


  public DeviceRegistry eventNotificationConfigs(List<EventNotificationConfig> eventNotificationConfigs) {
    this.eventNotificationConfigs = eventNotificationConfigs;
    return this;
  }

  public DeviceRegistry addEventNotificationConfigsItem(EventNotificationConfig eventNotificationConfigsItem) {
    if (this.eventNotificationConfigs == null) {
      this.eventNotificationConfigs = new ArrayList<>();
    }
    this.eventNotificationConfigs.add(eventNotificationConfigsItem);
    return this;
  }

  /**
   * The configuration for notification of telemetry events received from the device. All telemetry events that were successfully published by the device and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud Pub/Sub. If multiple configurations match a message, only the first matching configuration is used. If you try to publish a device telemetry event using MQTT without specifying a Cloud Pub/Sub topic for the device&#39;s registry, the connection closes automatically. If you try to do so using an HTTP connection, an error is returned. Up to 10 configurations may be provided.
   * @return eventNotificationConfigs
   */
  @javax.annotation.Nullable
  public List<EventNotificationConfig> getEventNotificationConfigs() {
    return eventNotificationConfigs;
  }

  public void setEventNotificationConfigs(List<EventNotificationConfig> eventNotificationConfigs) {
    this.eventNotificationConfigs = eventNotificationConfigs;
  }


  public DeviceRegistry httpConfig(HttpConfig httpConfig) {
    this.httpConfig = httpConfig;
    return this;
  }

  /**
   * Get httpConfig
   * @return httpConfig
   */
  @javax.annotation.Nullable
  public HttpConfig getHttpConfig() {
    return httpConfig;
  }

  public void setHttpConfig(HttpConfig httpConfig) {
    this.httpConfig = httpConfig;
  }


  public DeviceRegistry id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier of this device registry. For example, &#x60;myRegistry&#x60;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DeviceRegistry logLevel(LogLevelEnum logLevel) {
    this.logLevel = logLevel;
    return this;
  }

  /**
   * **Beta Feature** The default logging verbosity for activity from devices in this registry. The verbosity level can be overridden by Device.log_level.
   * @return logLevel
   */
  @javax.annotation.Nullable
  public LogLevelEnum getLogLevel() {
    return logLevel;
  }

  public void setLogLevel(LogLevelEnum logLevel) {
    this.logLevel = logLevel;
  }


  public DeviceRegistry mqttConfig(MqttConfig mqttConfig) {
    this.mqttConfig = mqttConfig;
    return this;
  }

  /**
   * Get mqttConfig
   * @return mqttConfig
   */
  @javax.annotation.Nullable
  public MqttConfig getMqttConfig() {
    return mqttConfig;
  }

  public void setMqttConfig(MqttConfig mqttConfig) {
    this.mqttConfig = mqttConfig;
  }


  public DeviceRegistry name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource path name. For example, &#x60;projects/example-project/locations/us-central1/registries/my-registry&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DeviceRegistry stateNotificationConfig(StateNotificationConfig stateNotificationConfig) {
    this.stateNotificationConfig = stateNotificationConfig;
    return this;
  }

  /**
   * Get stateNotificationConfig
   * @return stateNotificationConfig
   */
  @javax.annotation.Nullable
  public StateNotificationConfig getStateNotificationConfig() {
    return stateNotificationConfig;
  }

  public void setStateNotificationConfig(StateNotificationConfig stateNotificationConfig) {
    this.stateNotificationConfig = stateNotificationConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceRegistry deviceRegistry = (DeviceRegistry) o;
    return Objects.equals(this.credentials, deviceRegistry.credentials) &&
        Objects.equals(this.eventNotificationConfigs, deviceRegistry.eventNotificationConfigs) &&
        Objects.equals(this.httpConfig, deviceRegistry.httpConfig) &&
        Objects.equals(this.id, deviceRegistry.id) &&
        Objects.equals(this.logLevel, deviceRegistry.logLevel) &&
        Objects.equals(this.mqttConfig, deviceRegistry.mqttConfig) &&
        Objects.equals(this.name, deviceRegistry.name) &&
        Objects.equals(this.stateNotificationConfig, deviceRegistry.stateNotificationConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credentials, eventNotificationConfigs, httpConfig, id, logLevel, mqttConfig, name, stateNotificationConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceRegistry {\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    eventNotificationConfigs: ").append(toIndentedString(eventNotificationConfigs)).append("\n");
    sb.append("    httpConfig: ").append(toIndentedString(httpConfig)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logLevel: ").append(toIndentedString(logLevel)).append("\n");
    sb.append("    mqttConfig: ").append(toIndentedString(mqttConfig)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    stateNotificationConfig: ").append(toIndentedString(stateNotificationConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("credentials");
    openapiFields.add("eventNotificationConfigs");
    openapiFields.add("httpConfig");
    openapiFields.add("id");
    openapiFields.add("logLevel");
    openapiFields.add("mqttConfig");
    openapiFields.add("name");
    openapiFields.add("stateNotificationConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceRegistry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceRegistry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceRegistry is not found in the empty JSON string", DeviceRegistry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceRegistry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceRegistry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("credentials") != null && !jsonObj.get("credentials").isJsonNull()) {
        JsonArray jsonArraycredentials = jsonObj.getAsJsonArray("credentials");
        if (jsonArraycredentials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("credentials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `credentials` to be an array in the JSON string but got `%s`", jsonObj.get("credentials").toString()));
          }

          // validate the optional field `credentials` (array)
          for (int i = 0; i < jsonArraycredentials.size(); i++) {
            RegistryCredential.validateJsonElement(jsonArraycredentials.get(i));
          };
        }
      }
      if (jsonObj.get("eventNotificationConfigs") != null && !jsonObj.get("eventNotificationConfigs").isJsonNull()) {
        JsonArray jsonArrayeventNotificationConfigs = jsonObj.getAsJsonArray("eventNotificationConfigs");
        if (jsonArrayeventNotificationConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("eventNotificationConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `eventNotificationConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("eventNotificationConfigs").toString()));
          }

          // validate the optional field `eventNotificationConfigs` (array)
          for (int i = 0; i < jsonArrayeventNotificationConfigs.size(); i++) {
            EventNotificationConfig.validateJsonElement(jsonArrayeventNotificationConfigs.get(i));
          };
        }
      }
      // validate the optional field `httpConfig`
      if (jsonObj.get("httpConfig") != null && !jsonObj.get("httpConfig").isJsonNull()) {
        HttpConfig.validateJsonElement(jsonObj.get("httpConfig"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("logLevel") != null && !jsonObj.get("logLevel").isJsonNull()) && !jsonObj.get("logLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logLevel").toString()));
      }
      // validate the optional field `logLevel`
      if (jsonObj.get("logLevel") != null && !jsonObj.get("logLevel").isJsonNull()) {
        LogLevelEnum.validateJsonElement(jsonObj.get("logLevel"));
      }
      // validate the optional field `mqttConfig`
      if (jsonObj.get("mqttConfig") != null && !jsonObj.get("mqttConfig").isJsonNull()) {
        MqttConfig.validateJsonElement(jsonObj.get("mqttConfig"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `stateNotificationConfig`
      if (jsonObj.get("stateNotificationConfig") != null && !jsonObj.get("stateNotificationConfig").isJsonNull()) {
        StateNotificationConfig.validateJsonElement(jsonObj.get("stateNotificationConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceRegistry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceRegistry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceRegistry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceRegistry.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceRegistry>() {
           @Override
           public void write(JsonWriter out, DeviceRegistry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceRegistry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceRegistry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceRegistry
   * @throws IOException if the JSON string is invalid with respect to DeviceRegistry
   */
  public static DeviceRegistry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceRegistry.class);
  }

  /**
   * Convert an instance of DeviceRegistry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

