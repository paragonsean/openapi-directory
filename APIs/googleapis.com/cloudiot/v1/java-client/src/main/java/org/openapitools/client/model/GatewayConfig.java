/*
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Gateway-related configuration and state.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:25.758673-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GatewayConfig {
  /**
   * Indicates how to authorize and/or authenticate devices to access the gateway.
   */
  @JsonAdapter(GatewayAuthMethodEnum.Adapter.class)
  public enum GatewayAuthMethodEnum {
    GATEWAY_AUTH_METHOD_UNSPECIFIED("GATEWAY_AUTH_METHOD_UNSPECIFIED"),
    
    ASSOCIATION_ONLY("ASSOCIATION_ONLY"),
    
    DEVICE_AUTH_TOKEN_ONLY("DEVICE_AUTH_TOKEN_ONLY"),
    
    ASSOCIATION_AND_DEVICE_AUTH_TOKEN("ASSOCIATION_AND_DEVICE_AUTH_TOKEN");

    private String value;

    GatewayAuthMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GatewayAuthMethodEnum fromValue(String value) {
      for (GatewayAuthMethodEnum b : GatewayAuthMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GatewayAuthMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GatewayAuthMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GatewayAuthMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GatewayAuthMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GatewayAuthMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GATEWAY_AUTH_METHOD = "gatewayAuthMethod";
  @SerializedName(SERIALIZED_NAME_GATEWAY_AUTH_METHOD)
  private GatewayAuthMethodEnum gatewayAuthMethod;

  /**
   * Indicates whether the device is a gateway.
   */
  @JsonAdapter(GatewayTypeEnum.Adapter.class)
  public enum GatewayTypeEnum {
    GATEWAY_TYPE_UNSPECIFIED("GATEWAY_TYPE_UNSPECIFIED"),
    
    GATEWAY("GATEWAY"),
    
    NON_GATEWAY("NON_GATEWAY");

    private String value;

    GatewayTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GatewayTypeEnum fromValue(String value) {
      for (GatewayTypeEnum b : GatewayTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GatewayTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GatewayTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GatewayTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GatewayTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GatewayTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GATEWAY_TYPE = "gatewayType";
  @SerializedName(SERIALIZED_NAME_GATEWAY_TYPE)
  private GatewayTypeEnum gatewayType;

  public static final String SERIALIZED_NAME_LAST_ACCESSED_GATEWAY_ID = "lastAccessedGatewayId";
  @SerializedName(SERIALIZED_NAME_LAST_ACCESSED_GATEWAY_ID)
  private String lastAccessedGatewayId;

  public static final String SERIALIZED_NAME_LAST_ACCESSED_GATEWAY_TIME = "lastAccessedGatewayTime";
  @SerializedName(SERIALIZED_NAME_LAST_ACCESSED_GATEWAY_TIME)
  private String lastAccessedGatewayTime;

  public GatewayConfig() {
  }

  public GatewayConfig gatewayAuthMethod(GatewayAuthMethodEnum gatewayAuthMethod) {
    this.gatewayAuthMethod = gatewayAuthMethod;
    return this;
  }

  /**
   * Indicates how to authorize and/or authenticate devices to access the gateway.
   * @return gatewayAuthMethod
   */
  @javax.annotation.Nullable
  public GatewayAuthMethodEnum getGatewayAuthMethod() {
    return gatewayAuthMethod;
  }

  public void setGatewayAuthMethod(GatewayAuthMethodEnum gatewayAuthMethod) {
    this.gatewayAuthMethod = gatewayAuthMethod;
  }


  public GatewayConfig gatewayType(GatewayTypeEnum gatewayType) {
    this.gatewayType = gatewayType;
    return this;
  }

  /**
   * Indicates whether the device is a gateway.
   * @return gatewayType
   */
  @javax.annotation.Nullable
  public GatewayTypeEnum getGatewayType() {
    return gatewayType;
  }

  public void setGatewayType(GatewayTypeEnum gatewayType) {
    this.gatewayType = gatewayType;
  }


  public GatewayConfig lastAccessedGatewayId(String lastAccessedGatewayId) {
    this.lastAccessedGatewayId = lastAccessedGatewayId;
    return this;
  }

  /**
   * [Output only] The ID of the gateway the device accessed most recently.
   * @return lastAccessedGatewayId
   */
  @javax.annotation.Nullable
  public String getLastAccessedGatewayId() {
    return lastAccessedGatewayId;
  }

  public void setLastAccessedGatewayId(String lastAccessedGatewayId) {
    this.lastAccessedGatewayId = lastAccessedGatewayId;
  }


  public GatewayConfig lastAccessedGatewayTime(String lastAccessedGatewayTime) {
    this.lastAccessedGatewayTime = lastAccessedGatewayTime;
    return this;
  }

  /**
   * [Output only] The most recent time at which the device accessed the gateway specified in &#x60;last_accessed_gateway&#x60;.
   * @return lastAccessedGatewayTime
   */
  @javax.annotation.Nullable
  public String getLastAccessedGatewayTime() {
    return lastAccessedGatewayTime;
  }

  public void setLastAccessedGatewayTime(String lastAccessedGatewayTime) {
    this.lastAccessedGatewayTime = lastAccessedGatewayTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayConfig gatewayConfig = (GatewayConfig) o;
    return Objects.equals(this.gatewayAuthMethod, gatewayConfig.gatewayAuthMethod) &&
        Objects.equals(this.gatewayType, gatewayConfig.gatewayType) &&
        Objects.equals(this.lastAccessedGatewayId, gatewayConfig.lastAccessedGatewayId) &&
        Objects.equals(this.lastAccessedGatewayTime, gatewayConfig.lastAccessedGatewayTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gatewayAuthMethod, gatewayType, lastAccessedGatewayId, lastAccessedGatewayTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayConfig {\n");
    sb.append("    gatewayAuthMethod: ").append(toIndentedString(gatewayAuthMethod)).append("\n");
    sb.append("    gatewayType: ").append(toIndentedString(gatewayType)).append("\n");
    sb.append("    lastAccessedGatewayId: ").append(toIndentedString(lastAccessedGatewayId)).append("\n");
    sb.append("    lastAccessedGatewayTime: ").append(toIndentedString(lastAccessedGatewayTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gatewayAuthMethod");
    openapiFields.add("gatewayType");
    openapiFields.add("lastAccessedGatewayId");
    openapiFields.add("lastAccessedGatewayTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GatewayConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GatewayConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayConfig is not found in the empty JSON string", GatewayConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GatewayConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gatewayAuthMethod") != null && !jsonObj.get("gatewayAuthMethod").isJsonNull()) && !jsonObj.get("gatewayAuthMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayAuthMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayAuthMethod").toString()));
      }
      // validate the optional field `gatewayAuthMethod`
      if (jsonObj.get("gatewayAuthMethod") != null && !jsonObj.get("gatewayAuthMethod").isJsonNull()) {
        GatewayAuthMethodEnum.validateJsonElement(jsonObj.get("gatewayAuthMethod"));
      }
      if ((jsonObj.get("gatewayType") != null && !jsonObj.get("gatewayType").isJsonNull()) && !jsonObj.get("gatewayType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayType").toString()));
      }
      // validate the optional field `gatewayType`
      if (jsonObj.get("gatewayType") != null && !jsonObj.get("gatewayType").isJsonNull()) {
        GatewayTypeEnum.validateJsonElement(jsonObj.get("gatewayType"));
      }
      if ((jsonObj.get("lastAccessedGatewayId") != null && !jsonObj.get("lastAccessedGatewayId").isJsonNull()) && !jsonObj.get("lastAccessedGatewayId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastAccessedGatewayId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastAccessedGatewayId").toString()));
      }
      if ((jsonObj.get("lastAccessedGatewayTime") != null && !jsonObj.get("lastAccessedGatewayTime").isJsonNull()) && !jsonObj.get("lastAccessedGatewayTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastAccessedGatewayTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastAccessedGatewayTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayConfig>() {
           @Override
           public void write(JsonWriter out, GatewayConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GatewayConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GatewayConfig
   * @throws IOException if the JSON string is invalid with respect to GatewayConfig
   */
  public static GatewayConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayConfig.class);
  }

  /**
   * Convert an instance of GatewayConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

