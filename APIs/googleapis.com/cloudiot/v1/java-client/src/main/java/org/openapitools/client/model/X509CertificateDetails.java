/*
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of an X.509 certificate. For informational purposes only.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:25.758673-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class X509CertificateDetails {
  public static final String SERIALIZED_NAME_EXPIRY_TIME = "expiryTime";
  @SerializedName(SERIALIZED_NAME_EXPIRY_TIME)
  private String expiryTime;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_PUBLIC_KEY_TYPE = "publicKeyType";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY_TYPE)
  private String publicKeyType;

  public static final String SERIALIZED_NAME_SIGNATURE_ALGORITHM = "signatureAlgorithm";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_ALGORITHM)
  private String signatureAlgorithm;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public X509CertificateDetails() {
  }

  public X509CertificateDetails expiryTime(String expiryTime) {
    this.expiryTime = expiryTime;
    return this;
  }

  /**
   * The time the certificate becomes invalid.
   * @return expiryTime
   */
  @javax.annotation.Nullable
  public String getExpiryTime() {
    return expiryTime;
  }

  public void setExpiryTime(String expiryTime) {
    this.expiryTime = expiryTime;
  }


  public X509CertificateDetails issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * The entity that signed the certificate.
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public X509CertificateDetails publicKeyType(String publicKeyType) {
    this.publicKeyType = publicKeyType;
    return this;
  }

  /**
   * The type of public key in the certificate.
   * @return publicKeyType
   */
  @javax.annotation.Nullable
  public String getPublicKeyType() {
    return publicKeyType;
  }

  public void setPublicKeyType(String publicKeyType) {
    this.publicKeyType = publicKeyType;
  }


  public X509CertificateDetails signatureAlgorithm(String signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
    return this;
  }

  /**
   * The algorithm used to sign the certificate.
   * @return signatureAlgorithm
   */
  @javax.annotation.Nullable
  public String getSignatureAlgorithm() {
    return signatureAlgorithm;
  }

  public void setSignatureAlgorithm(String signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
  }


  public X509CertificateDetails startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time the certificate becomes valid.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public X509CertificateDetails subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The entity the certificate and public key belong to.
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    X509CertificateDetails x509CertificateDetails = (X509CertificateDetails) o;
    return Objects.equals(this.expiryTime, x509CertificateDetails.expiryTime) &&
        Objects.equals(this.issuer, x509CertificateDetails.issuer) &&
        Objects.equals(this.publicKeyType, x509CertificateDetails.publicKeyType) &&
        Objects.equals(this.signatureAlgorithm, x509CertificateDetails.signatureAlgorithm) &&
        Objects.equals(this.startTime, x509CertificateDetails.startTime) &&
        Objects.equals(this.subject, x509CertificateDetails.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiryTime, issuer, publicKeyType, signatureAlgorithm, startTime, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class X509CertificateDetails {\n");
    sb.append("    expiryTime: ").append(toIndentedString(expiryTime)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    publicKeyType: ").append(toIndentedString(publicKeyType)).append("\n");
    sb.append("    signatureAlgorithm: ").append(toIndentedString(signatureAlgorithm)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expiryTime");
    openapiFields.add("issuer");
    openapiFields.add("publicKeyType");
    openapiFields.add("signatureAlgorithm");
    openapiFields.add("startTime");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to X509CertificateDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!X509CertificateDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in X509CertificateDetails is not found in the empty JSON string", X509CertificateDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!X509CertificateDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `X509CertificateDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expiryTime") != null && !jsonObj.get("expiryTime").isJsonNull()) && !jsonObj.get("expiryTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryTime").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("publicKeyType") != null && !jsonObj.get("publicKeyType").isJsonNull()) && !jsonObj.get("publicKeyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicKeyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicKeyType").toString()));
      }
      if ((jsonObj.get("signatureAlgorithm") != null && !jsonObj.get("signatureAlgorithm").isJsonNull()) && !jsonObj.get("signatureAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signatureAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signatureAlgorithm").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!X509CertificateDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'X509CertificateDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<X509CertificateDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(X509CertificateDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<X509CertificateDetails>() {
           @Override
           public void write(JsonWriter out, X509CertificateDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public X509CertificateDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of X509CertificateDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of X509CertificateDetails
   * @throws IOException if the JSON string is invalid with respect to X509CertificateDetails
   */
  public static X509CertificateDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, X509CertificateDetails.class);
  }

  /**
   * Convert an instance of X509CertificateDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

