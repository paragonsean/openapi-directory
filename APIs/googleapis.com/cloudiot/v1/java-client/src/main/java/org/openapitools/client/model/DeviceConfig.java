/*
 * Cloud IoT API
 * Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The device configuration. Eventually delivered to devices.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:25.758673-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceConfig {
  public static final String SERIALIZED_NAME_BINARY_DATA = "binaryData";
  @SerializedName(SERIALIZED_NAME_BINARY_DATA)
  private byte[] binaryData;

  public static final String SERIALIZED_NAME_CLOUD_UPDATE_TIME = "cloudUpdateTime";
  @SerializedName(SERIALIZED_NAME_CLOUD_UPDATE_TIME)
  private String cloudUpdateTime;

  public static final String SERIALIZED_NAME_DEVICE_ACK_TIME = "deviceAckTime";
  @SerializedName(SERIALIZED_NAME_DEVICE_ACK_TIME)
  private String deviceAckTime;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public DeviceConfig() {
  }

  public DeviceConfig binaryData(byte[] binaryData) {
    this.binaryData = binaryData;
    return this;
  }

  /**
   * The device configuration data.
   * @return binaryData
   */
  @javax.annotation.Nullable
  public byte[] getBinaryData() {
    return binaryData;
  }

  public void setBinaryData(byte[] binaryData) {
    this.binaryData = binaryData;
  }


  public DeviceConfig cloudUpdateTime(String cloudUpdateTime) {
    this.cloudUpdateTime = cloudUpdateTime;
    return this;
  }

  /**
   * [Output only] The time at which this configuration version was updated in Cloud IoT Core. This timestamp is set by the server.
   * @return cloudUpdateTime
   */
  @javax.annotation.Nullable
  public String getCloudUpdateTime() {
    return cloudUpdateTime;
  }

  public void setCloudUpdateTime(String cloudUpdateTime) {
    this.cloudUpdateTime = cloudUpdateTime;
  }


  public DeviceConfig deviceAckTime(String deviceAckTime) {
    this.deviceAckTime = deviceAckTime;
    return this;
  }

  /**
   * [Output only] The time at which Cloud IoT Core received the acknowledgment from the device, indicating that the device has received this configuration version. If this field is not present, the device has not yet acknowledged that it received this version. Note that when the config was sent to the device, many config versions may have been available in Cloud IoT Core while the device was disconnected, and on connection, only the latest version is sent to the device. Some versions may never be sent to the device, and therefore are never acknowledged. This timestamp is set by Cloud IoT Core.
   * @return deviceAckTime
   */
  @javax.annotation.Nullable
  public String getDeviceAckTime() {
    return deviceAckTime;
  }

  public void setDeviceAckTime(String deviceAckTime) {
    this.deviceAckTime = deviceAckTime;
  }


  public DeviceConfig version(String version) {
    this.version = version;
    return this;
  }

  /**
   * [Output only] The version of this update. The version number is assigned by the server, and is always greater than 0 after device creation. The version must be 0 on the &#x60;CreateDevice&#x60; request if a &#x60;config&#x60; is specified; the response of &#x60;CreateDevice&#x60; will always have a value of 1.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceConfig deviceConfig = (DeviceConfig) o;
    return Arrays.equals(this.binaryData, deviceConfig.binaryData) &&
        Objects.equals(this.cloudUpdateTime, deviceConfig.cloudUpdateTime) &&
        Objects.equals(this.deviceAckTime, deviceConfig.deviceAckTime) &&
        Objects.equals(this.version, deviceConfig.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(binaryData), cloudUpdateTime, deviceAckTime, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceConfig {\n");
    sb.append("    binaryData: ").append(toIndentedString(binaryData)).append("\n");
    sb.append("    cloudUpdateTime: ").append(toIndentedString(cloudUpdateTime)).append("\n");
    sb.append("    deviceAckTime: ").append(toIndentedString(deviceAckTime)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("binaryData");
    openapiFields.add("cloudUpdateTime");
    openapiFields.add("deviceAckTime");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceConfig is not found in the empty JSON string", DeviceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cloudUpdateTime") != null && !jsonObj.get("cloudUpdateTime").isJsonNull()) && !jsonObj.get("cloudUpdateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudUpdateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudUpdateTime").toString()));
      }
      if ((jsonObj.get("deviceAckTime") != null && !jsonObj.get("deviceAckTime").isJsonNull()) && !jsonObj.get("deviceAckTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceAckTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceAckTime").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceConfig>() {
           @Override
           public void write(JsonWriter out, DeviceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceConfig
   * @throws IOException if the JSON string is invalid with respect to DeviceConfig
   */
  public static DeviceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceConfig.class);
  }

  /**
   * Convert an instance of DeviceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

