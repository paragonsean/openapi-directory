# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_notification_config import EventNotificationConfig
from openapi_server.models.http_config import HttpConfig
from openapi_server.models.mqtt_config import MqttConfig
from openapi_server.models.registry_credential import RegistryCredential
from openapi_server.models.state_notification_config import StateNotificationConfig
from openapi_server import util


class DeviceRegistry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credentials: List[RegistryCredential]=None, event_notification_configs: List[EventNotificationConfig]=None, http_config: HttpConfig=None, id: str=None, log_level: str=None, mqtt_config: MqttConfig=None, name: str=None, state_notification_config: StateNotificationConfig=None):
        """DeviceRegistry - a model defined in OpenAPI

        :param credentials: The credentials of this DeviceRegistry.
        :param event_notification_configs: The event_notification_configs of this DeviceRegistry.
        :param http_config: The http_config of this DeviceRegistry.
        :param id: The id of this DeviceRegistry.
        :param log_level: The log_level of this DeviceRegistry.
        :param mqtt_config: The mqtt_config of this DeviceRegistry.
        :param name: The name of this DeviceRegistry.
        :param state_notification_config: The state_notification_config of this DeviceRegistry.
        """
        self.openapi_types = {
            'credentials': List[RegistryCredential],
            'event_notification_configs': List[EventNotificationConfig],
            'http_config': HttpConfig,
            'id': str,
            'log_level': str,
            'mqtt_config': MqttConfig,
            'name': str,
            'state_notification_config': StateNotificationConfig
        }

        self.attribute_map = {
            'credentials': 'credentials',
            'event_notification_configs': 'eventNotificationConfigs',
            'http_config': 'httpConfig',
            'id': 'id',
            'log_level': 'logLevel',
            'mqtt_config': 'mqttConfig',
            'name': 'name',
            'state_notification_config': 'stateNotificationConfig'
        }

        self._credentials = credentials
        self._event_notification_configs = event_notification_configs
        self._http_config = http_config
        self._id = id
        self._log_level = log_level
        self._mqtt_config = mqtt_config
        self._name = name
        self._state_notification_config = state_notification_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceRegistry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceRegistry of this DeviceRegistry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credentials(self):
        """Gets the credentials of this DeviceRegistry.

        The credentials used to verify the device credentials. No more than 10 credentials can be bound to a single registry at a time. The verification process occurs at the time of device creation or update. If this field is empty, no verification is performed. Otherwise, the credentials of a newly created device or added credentials of an updated device should be signed with one of these registry credentials. Note, however, that existing devices will never be affected by modifications to this list of credentials: after a device has been successfully created in a registry, it should be able to connect even if its registry credentials are revoked, deleted, or modified.

        :return: The credentials of this DeviceRegistry.
        :rtype: List[RegistryCredential]
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this DeviceRegistry.

        The credentials used to verify the device credentials. No more than 10 credentials can be bound to a single registry at a time. The verification process occurs at the time of device creation or update. If this field is empty, no verification is performed. Otherwise, the credentials of a newly created device or added credentials of an updated device should be signed with one of these registry credentials. Note, however, that existing devices will never be affected by modifications to this list of credentials: after a device has been successfully created in a registry, it should be able to connect even if its registry credentials are revoked, deleted, or modified.

        :param credentials: The credentials of this DeviceRegistry.
        :type credentials: List[RegistryCredential]
        """

        self._credentials = credentials

    @property
    def event_notification_configs(self):
        """Gets the event_notification_configs of this DeviceRegistry.

        The configuration for notification of telemetry events received from the device. All telemetry events that were successfully published by the device and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud Pub/Sub. If multiple configurations match a message, only the first matching configuration is used. If you try to publish a device telemetry event using MQTT without specifying a Cloud Pub/Sub topic for the device's registry, the connection closes automatically. If you try to do so using an HTTP connection, an error is returned. Up to 10 configurations may be provided.

        :return: The event_notification_configs of this DeviceRegistry.
        :rtype: List[EventNotificationConfig]
        """
        return self._event_notification_configs

    @event_notification_configs.setter
    def event_notification_configs(self, event_notification_configs):
        """Sets the event_notification_configs of this DeviceRegistry.

        The configuration for notification of telemetry events received from the device. All telemetry events that were successfully published by the device and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud Pub/Sub. If multiple configurations match a message, only the first matching configuration is used. If you try to publish a device telemetry event using MQTT without specifying a Cloud Pub/Sub topic for the device's registry, the connection closes automatically. If you try to do so using an HTTP connection, an error is returned. Up to 10 configurations may be provided.

        :param event_notification_configs: The event_notification_configs of this DeviceRegistry.
        :type event_notification_configs: List[EventNotificationConfig]
        """

        self._event_notification_configs = event_notification_configs

    @property
    def http_config(self):
        """Gets the http_config of this DeviceRegistry.


        :return: The http_config of this DeviceRegistry.
        :rtype: HttpConfig
        """
        return self._http_config

    @http_config.setter
    def http_config(self, http_config):
        """Sets the http_config of this DeviceRegistry.


        :param http_config: The http_config of this DeviceRegistry.
        :type http_config: HttpConfig
        """

        self._http_config = http_config

    @property
    def id(self):
        """Gets the id of this DeviceRegistry.

        The identifier of this device registry. For example, `myRegistry`.

        :return: The id of this DeviceRegistry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceRegistry.

        The identifier of this device registry. For example, `myRegistry`.

        :param id: The id of this DeviceRegistry.
        :type id: str
        """

        self._id = id

    @property
    def log_level(self):
        """Gets the log_level of this DeviceRegistry.

        **Beta Feature** The default logging verbosity for activity from devices in this registry. The verbosity level can be overridden by Device.log_level.

        :return: The log_level of this DeviceRegistry.
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this DeviceRegistry.

        **Beta Feature** The default logging verbosity for activity from devices in this registry. The verbosity level can be overridden by Device.log_level.

        :param log_level: The log_level of this DeviceRegistry.
        :type log_level: str
        """
        allowed_values = ["LOG_LEVEL_UNSPECIFIED", "NONE", "ERROR", "INFO", "DEBUG"]  # noqa: E501
        if log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `log_level` ({0}), must be one of {1}"
                .format(log_level, allowed_values)
            )

        self._log_level = log_level

    @property
    def mqtt_config(self):
        """Gets the mqtt_config of this DeviceRegistry.


        :return: The mqtt_config of this DeviceRegistry.
        :rtype: MqttConfig
        """
        return self._mqtt_config

    @mqtt_config.setter
    def mqtt_config(self, mqtt_config):
        """Sets the mqtt_config of this DeviceRegistry.


        :param mqtt_config: The mqtt_config of this DeviceRegistry.
        :type mqtt_config: MqttConfig
        """

        self._mqtt_config = mqtt_config

    @property
    def name(self):
        """Gets the name of this DeviceRegistry.

        The resource path name. For example, `projects/example-project/locations/us-central1/registries/my-registry`.

        :return: The name of this DeviceRegistry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceRegistry.

        The resource path name. For example, `projects/example-project/locations/us-central1/registries/my-registry`.

        :param name: The name of this DeviceRegistry.
        :type name: str
        """

        self._name = name

    @property
    def state_notification_config(self):
        """Gets the state_notification_config of this DeviceRegistry.


        :return: The state_notification_config of this DeviceRegistry.
        :rtype: StateNotificationConfig
        """
        return self._state_notification_config

    @state_notification_config.setter
    def state_notification_config(self, state_notification_config):
        """Sets the state_notification_config of this DeviceRegistry.


        :param state_notification_config: The state_notification_config of this DeviceRegistry.
        :type state_notification_config: StateNotificationConfig
        """

        self._state_notification_config = state_notification_config
