# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GatewayConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_auth_method: str=None, gateway_type: str=None, last_accessed_gateway_id: str=None, last_accessed_gateway_time: str=None):
        """GatewayConfig - a model defined in OpenAPI

        :param gateway_auth_method: The gateway_auth_method of this GatewayConfig.
        :param gateway_type: The gateway_type of this GatewayConfig.
        :param last_accessed_gateway_id: The last_accessed_gateway_id of this GatewayConfig.
        :param last_accessed_gateway_time: The last_accessed_gateway_time of this GatewayConfig.
        """
        self.openapi_types = {
            'gateway_auth_method': str,
            'gateway_type': str,
            'last_accessed_gateway_id': str,
            'last_accessed_gateway_time': str
        }

        self.attribute_map = {
            'gateway_auth_method': 'gatewayAuthMethod',
            'gateway_type': 'gatewayType',
            'last_accessed_gateway_id': 'lastAccessedGatewayId',
            'last_accessed_gateway_time': 'lastAccessedGatewayTime'
        }

        self._gateway_auth_method = gateway_auth_method
        self._gateway_type = gateway_type
        self._last_accessed_gateway_id = last_accessed_gateway_id
        self._last_accessed_gateway_time = last_accessed_gateway_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GatewayConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GatewayConfig of this GatewayConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_auth_method(self):
        """Gets the gateway_auth_method of this GatewayConfig.

        Indicates how to authorize and/or authenticate devices to access the gateway.

        :return: The gateway_auth_method of this GatewayConfig.
        :rtype: str
        """
        return self._gateway_auth_method

    @gateway_auth_method.setter
    def gateway_auth_method(self, gateway_auth_method):
        """Sets the gateway_auth_method of this GatewayConfig.

        Indicates how to authorize and/or authenticate devices to access the gateway.

        :param gateway_auth_method: The gateway_auth_method of this GatewayConfig.
        :type gateway_auth_method: str
        """
        allowed_values = ["GATEWAY_AUTH_METHOD_UNSPECIFIED", "ASSOCIATION_ONLY", "DEVICE_AUTH_TOKEN_ONLY", "ASSOCIATION_AND_DEVICE_AUTH_TOKEN"]  # noqa: E501
        if gateway_auth_method not in allowed_values:
            raise ValueError(
                "Invalid value for `gateway_auth_method` ({0}), must be one of {1}"
                .format(gateway_auth_method, allowed_values)
            )

        self._gateway_auth_method = gateway_auth_method

    @property
    def gateway_type(self):
        """Gets the gateway_type of this GatewayConfig.

        Indicates whether the device is a gateway.

        :return: The gateway_type of this GatewayConfig.
        :rtype: str
        """
        return self._gateway_type

    @gateway_type.setter
    def gateway_type(self, gateway_type):
        """Sets the gateway_type of this GatewayConfig.

        Indicates whether the device is a gateway.

        :param gateway_type: The gateway_type of this GatewayConfig.
        :type gateway_type: str
        """
        allowed_values = ["GATEWAY_TYPE_UNSPECIFIED", "GATEWAY", "NON_GATEWAY"]  # noqa: E501
        if gateway_type not in allowed_values:
            raise ValueError(
                "Invalid value for `gateway_type` ({0}), must be one of {1}"
                .format(gateway_type, allowed_values)
            )

        self._gateway_type = gateway_type

    @property
    def last_accessed_gateway_id(self):
        """Gets the last_accessed_gateway_id of this GatewayConfig.

        [Output only] The ID of the gateway the device accessed most recently.

        :return: The last_accessed_gateway_id of this GatewayConfig.
        :rtype: str
        """
        return self._last_accessed_gateway_id

    @last_accessed_gateway_id.setter
    def last_accessed_gateway_id(self, last_accessed_gateway_id):
        """Sets the last_accessed_gateway_id of this GatewayConfig.

        [Output only] The ID of the gateway the device accessed most recently.

        :param last_accessed_gateway_id: The last_accessed_gateway_id of this GatewayConfig.
        :type last_accessed_gateway_id: str
        """

        self._last_accessed_gateway_id = last_accessed_gateway_id

    @property
    def last_accessed_gateway_time(self):
        """Gets the last_accessed_gateway_time of this GatewayConfig.

        [Output only] The most recent time at which the device accessed the gateway specified in `last_accessed_gateway`.

        :return: The last_accessed_gateway_time of this GatewayConfig.
        :rtype: str
        """
        return self._last_accessed_gateway_time

    @last_accessed_gateway_time.setter
    def last_accessed_gateway_time(self, last_accessed_gateway_time):
        """Sets the last_accessed_gateway_time of this GatewayConfig.

        [Output only] The most recent time at which the device accessed the gateway specified in `last_accessed_gateway`.

        :param last_accessed_gateway_time: The last_accessed_gateway_time of this GatewayConfig.
        :type last_accessed_gateway_time: str
        """

        self._last_accessed_gateway_time = last_accessed_gateway_time
