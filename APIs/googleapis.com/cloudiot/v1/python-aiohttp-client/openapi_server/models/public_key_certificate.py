# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.x509_certificate_details import X509CertificateDetails
from openapi_server import util


class PublicKeyCertificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate: str=None, format: str=None, x509_details: X509CertificateDetails=None):
        """PublicKeyCertificate - a model defined in OpenAPI

        :param certificate: The certificate of this PublicKeyCertificate.
        :param format: The format of this PublicKeyCertificate.
        :param x509_details: The x509_details of this PublicKeyCertificate.
        """
        self.openapi_types = {
            'certificate': str,
            'format': str,
            'x509_details': X509CertificateDetails
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'format': 'format',
            'x509_details': 'x509Details'
        }

        self._certificate = certificate
        self._format = format
        self._x509_details = x509_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicKeyCertificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicKeyCertificate of this PublicKeyCertificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate(self):
        """Gets the certificate of this PublicKeyCertificate.

        The certificate data.

        :return: The certificate of this PublicKeyCertificate.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this PublicKeyCertificate.

        The certificate data.

        :param certificate: The certificate of this PublicKeyCertificate.
        :type certificate: str
        """

        self._certificate = certificate

    @property
    def format(self):
        """Gets the format of this PublicKeyCertificate.

        The certificate format.

        :return: The format of this PublicKeyCertificate.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this PublicKeyCertificate.

        The certificate format.

        :param format: The format of this PublicKeyCertificate.
        :type format: str
        """
        allowed_values = ["UNSPECIFIED_PUBLIC_KEY_CERTIFICATE_FORMAT", "X509_CERTIFICATE_PEM"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def x509_details(self):
        """Gets the x509_details of this PublicKeyCertificate.


        :return: The x509_details of this PublicKeyCertificate.
        :rtype: X509CertificateDetails
        """
        return self._x509_details

    @x509_details.setter
    def x509_details(self, x509_details):
        """Sets the x509_details of this PublicKeyCertificate.


        :param x509_details: The x509_details of this PublicKeyCertificate.
        :type x509_details: X509CertificateDetails
        """

        self._x509_details = x509_details
