# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class X509CertificateDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry_time: str=None, issuer: str=None, public_key_type: str=None, signature_algorithm: str=None, start_time: str=None, subject: str=None):
        """X509CertificateDetails - a model defined in OpenAPI

        :param expiry_time: The expiry_time of this X509CertificateDetails.
        :param issuer: The issuer of this X509CertificateDetails.
        :param public_key_type: The public_key_type of this X509CertificateDetails.
        :param signature_algorithm: The signature_algorithm of this X509CertificateDetails.
        :param start_time: The start_time of this X509CertificateDetails.
        :param subject: The subject of this X509CertificateDetails.
        """
        self.openapi_types = {
            'expiry_time': str,
            'issuer': str,
            'public_key_type': str,
            'signature_algorithm': str,
            'start_time': str,
            'subject': str
        }

        self.attribute_map = {
            'expiry_time': 'expiryTime',
            'issuer': 'issuer',
            'public_key_type': 'publicKeyType',
            'signature_algorithm': 'signatureAlgorithm',
            'start_time': 'startTime',
            'subject': 'subject'
        }

        self._expiry_time = expiry_time
        self._issuer = issuer
        self._public_key_type = public_key_type
        self._signature_algorithm = signature_algorithm
        self._start_time = start_time
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'X509CertificateDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The X509CertificateDetails of this X509CertificateDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry_time(self):
        """Gets the expiry_time of this X509CertificateDetails.

        The time the certificate becomes invalid.

        :return: The expiry_time of this X509CertificateDetails.
        :rtype: str
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this X509CertificateDetails.

        The time the certificate becomes invalid.

        :param expiry_time: The expiry_time of this X509CertificateDetails.
        :type expiry_time: str
        """

        self._expiry_time = expiry_time

    @property
    def issuer(self):
        """Gets the issuer of this X509CertificateDetails.

        The entity that signed the certificate.

        :return: The issuer of this X509CertificateDetails.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this X509CertificateDetails.

        The entity that signed the certificate.

        :param issuer: The issuer of this X509CertificateDetails.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def public_key_type(self):
        """Gets the public_key_type of this X509CertificateDetails.

        The type of public key in the certificate.

        :return: The public_key_type of this X509CertificateDetails.
        :rtype: str
        """
        return self._public_key_type

    @public_key_type.setter
    def public_key_type(self, public_key_type):
        """Sets the public_key_type of this X509CertificateDetails.

        The type of public key in the certificate.

        :param public_key_type: The public_key_type of this X509CertificateDetails.
        :type public_key_type: str
        """

        self._public_key_type = public_key_type

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this X509CertificateDetails.

        The algorithm used to sign the certificate.

        :return: The signature_algorithm of this X509CertificateDetails.
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this X509CertificateDetails.

        The algorithm used to sign the certificate.

        :param signature_algorithm: The signature_algorithm of this X509CertificateDetails.
        :type signature_algorithm: str
        """

        self._signature_algorithm = signature_algorithm

    @property
    def start_time(self):
        """Gets the start_time of this X509CertificateDetails.

        The time the certificate becomes valid.

        :return: The start_time of this X509CertificateDetails.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this X509CertificateDetails.

        The time the certificate becomes valid.

        :param start_time: The start_time of this X509CertificateDetails.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def subject(self):
        """Gets the subject of this X509CertificateDetails.

        The entity the certificate and public key belong to.

        :return: The subject of this X509CertificateDetails.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this X509CertificateDetails.

        The entity the certificate and public key belong to.

        :param subject: The subject of this X509CertificateDetails.
        :type subject: str
        """

        self._subject = subject
