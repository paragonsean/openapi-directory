# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendCommandToDeviceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, binary_data: str=None, subfolder: str=None):
        """SendCommandToDeviceRequest - a model defined in OpenAPI

        :param binary_data: The binary_data of this SendCommandToDeviceRequest.
        :param subfolder: The subfolder of this SendCommandToDeviceRequest.
        """
        self.openapi_types = {
            'binary_data': str,
            'subfolder': str
        }

        self.attribute_map = {
            'binary_data': 'binaryData',
            'subfolder': 'subfolder'
        }

        self._binary_data = binary_data
        self._subfolder = subfolder

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendCommandToDeviceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendCommandToDeviceRequest of this SendCommandToDeviceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def binary_data(self):
        """Gets the binary_data of this SendCommandToDeviceRequest.

        Required. The command data to send to the device.

        :return: The binary_data of this SendCommandToDeviceRequest.
        :rtype: str
        """
        return self._binary_data

    @binary_data.setter
    def binary_data(self, binary_data):
        """Sets the binary_data of this SendCommandToDeviceRequest.

        Required. The command data to send to the device.

        :param binary_data: The binary_data of this SendCommandToDeviceRequest.
        :type binary_data: str
        """

        self._binary_data = binary_data

    @property
    def subfolder(self):
        """Gets the subfolder of this SendCommandToDeviceRequest.

        Optional subfolder for the command. If empty, the command will be delivered to the /devices/{device-id}/commands topic, otherwise it will be delivered to the /devices/{device-id}/commands/{subfolder} topic. Multi-level subfolders are allowed. This field must not have more than 256 characters, and must not contain any MQTT wildcards (\"+\" or \"#\") or null characters.

        :return: The subfolder of this SendCommandToDeviceRequest.
        :rtype: str
        """
        return self._subfolder

    @subfolder.setter
    def subfolder(self, subfolder):
        """Sets the subfolder of this SendCommandToDeviceRequest.

        Optional subfolder for the command. If empty, the command will be delivered to the /devices/{device-id}/commands topic, otherwise it will be delivered to the /devices/{device-id}/commands/{subfolder} topic. Multi-level subfolders are allowed. This field must not have more than 256 characters, and must not contain any MQTT wildcards (\"+\" or \"#\") or null characters.

        :param subfolder: The subfolder of this SendCommandToDeviceRequest.
        :type subfolder: str
        """

        self._subfolder = subfolder
