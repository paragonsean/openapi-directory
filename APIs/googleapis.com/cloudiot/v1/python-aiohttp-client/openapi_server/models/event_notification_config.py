# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventNotificationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pubsub_topic_name: str=None, subfolder_matches: str=None):
        """EventNotificationConfig - a model defined in OpenAPI

        :param pubsub_topic_name: The pubsub_topic_name of this EventNotificationConfig.
        :param subfolder_matches: The subfolder_matches of this EventNotificationConfig.
        """
        self.openapi_types = {
            'pubsub_topic_name': str,
            'subfolder_matches': str
        }

        self.attribute_map = {
            'pubsub_topic_name': 'pubsubTopicName',
            'subfolder_matches': 'subfolderMatches'
        }

        self._pubsub_topic_name = pubsub_topic_name
        self._subfolder_matches = subfolder_matches

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventNotificationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventNotificationConfig of this EventNotificationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pubsub_topic_name(self):
        """Gets the pubsub_topic_name of this EventNotificationConfig.

        A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.

        :return: The pubsub_topic_name of this EventNotificationConfig.
        :rtype: str
        """
        return self._pubsub_topic_name

    @pubsub_topic_name.setter
    def pubsub_topic_name(self, pubsub_topic_name):
        """Sets the pubsub_topic_name of this EventNotificationConfig.

        A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.

        :param pubsub_topic_name: The pubsub_topic_name of this EventNotificationConfig.
        :type pubsub_topic_name: str
        """

        self._pubsub_topic_name = pubsub_topic_name

    @property
    def subfolder_matches(self):
        """Gets the subfolder_matches of this EventNotificationConfig.

        If the subfolder name matches this string exactly, this configuration will be used. The string must not include the leading '/' character. If empty, all strings are matched. This field is used only for telemetry events; subfolders are not supported for state changes.

        :return: The subfolder_matches of this EventNotificationConfig.
        :rtype: str
        """
        return self._subfolder_matches

    @subfolder_matches.setter
    def subfolder_matches(self, subfolder_matches):
        """Sets the subfolder_matches of this EventNotificationConfig.

        If the subfolder name matches this string exactly, this configuration will be used. The string must not include the leading '/' character. If empty, all strings are matched. This field is used only for telemetry events; subfolders are not supported for state changes.

        :param subfolder_matches: The subfolder_matches of this EventNotificationConfig.
        :type subfolder_matches: str
        """

        self._subfolder_matches = subfolder_matches
