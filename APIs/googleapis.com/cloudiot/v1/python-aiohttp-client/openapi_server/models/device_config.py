# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, binary_data: str=None, cloud_update_time: str=None, device_ack_time: str=None, version: str=None):
        """DeviceConfig - a model defined in OpenAPI

        :param binary_data: The binary_data of this DeviceConfig.
        :param cloud_update_time: The cloud_update_time of this DeviceConfig.
        :param device_ack_time: The device_ack_time of this DeviceConfig.
        :param version: The version of this DeviceConfig.
        """
        self.openapi_types = {
            'binary_data': str,
            'cloud_update_time': str,
            'device_ack_time': str,
            'version': str
        }

        self.attribute_map = {
            'binary_data': 'binaryData',
            'cloud_update_time': 'cloudUpdateTime',
            'device_ack_time': 'deviceAckTime',
            'version': 'version'
        }

        self._binary_data = binary_data
        self._cloud_update_time = cloud_update_time
        self._device_ack_time = device_ack_time
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceConfig of this DeviceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def binary_data(self):
        """Gets the binary_data of this DeviceConfig.

        The device configuration data.

        :return: The binary_data of this DeviceConfig.
        :rtype: str
        """
        return self._binary_data

    @binary_data.setter
    def binary_data(self, binary_data):
        """Sets the binary_data of this DeviceConfig.

        The device configuration data.

        :param binary_data: The binary_data of this DeviceConfig.
        :type binary_data: str
        """

        self._binary_data = binary_data

    @property
    def cloud_update_time(self):
        """Gets the cloud_update_time of this DeviceConfig.

        [Output only] The time at which this configuration version was updated in Cloud IoT Core. This timestamp is set by the server.

        :return: The cloud_update_time of this DeviceConfig.
        :rtype: str
        """
        return self._cloud_update_time

    @cloud_update_time.setter
    def cloud_update_time(self, cloud_update_time):
        """Sets the cloud_update_time of this DeviceConfig.

        [Output only] The time at which this configuration version was updated in Cloud IoT Core. This timestamp is set by the server.

        :param cloud_update_time: The cloud_update_time of this DeviceConfig.
        :type cloud_update_time: str
        """

        self._cloud_update_time = cloud_update_time

    @property
    def device_ack_time(self):
        """Gets the device_ack_time of this DeviceConfig.

        [Output only] The time at which Cloud IoT Core received the acknowledgment from the device, indicating that the device has received this configuration version. If this field is not present, the device has not yet acknowledged that it received this version. Note that when the config was sent to the device, many config versions may have been available in Cloud IoT Core while the device was disconnected, and on connection, only the latest version is sent to the device. Some versions may never be sent to the device, and therefore are never acknowledged. This timestamp is set by Cloud IoT Core.

        :return: The device_ack_time of this DeviceConfig.
        :rtype: str
        """
        return self._device_ack_time

    @device_ack_time.setter
    def device_ack_time(self, device_ack_time):
        """Sets the device_ack_time of this DeviceConfig.

        [Output only] The time at which Cloud IoT Core received the acknowledgment from the device, indicating that the device has received this configuration version. If this field is not present, the device has not yet acknowledged that it received this version. Note that when the config was sent to the device, many config versions may have been available in Cloud IoT Core while the device was disconnected, and on connection, only the latest version is sent to the device. Some versions may never be sent to the device, and therefore are never acknowledged. This timestamp is set by Cloud IoT Core.

        :param device_ack_time: The device_ack_time of this DeviceConfig.
        :type device_ack_time: str
        """

        self._device_ack_time = device_ack_time

    @property
    def version(self):
        """Gets the version of this DeviceConfig.

        [Output only] The version of this update. The version number is assigned by the server, and is always greater than 0 after device creation. The version must be 0 on the `CreateDevice` request if a `config` is specified; the response of `CreateDevice` will always have a value of 1.

        :return: The version of this DeviceConfig.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DeviceConfig.

        [Output only] The version of this update. The version number is assigned by the server, and is always greater than 0 after device creation. The version must be 0 on the `CreateDevice` request if a `config` is specified; the response of `CreateDevice` will always have a value of 1.

        :param version: The version of this DeviceConfig.
        :type version: str
        """

        self._version = version
