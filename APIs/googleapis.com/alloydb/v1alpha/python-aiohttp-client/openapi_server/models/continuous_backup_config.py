# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server import util


class ContinuousBackupConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, encryption_config: EncryptionConfig=None, recovery_window_days: int=None):
        """ContinuousBackupConfig - a model defined in OpenAPI

        :param enabled: The enabled of this ContinuousBackupConfig.
        :param encryption_config: The encryption_config of this ContinuousBackupConfig.
        :param recovery_window_days: The recovery_window_days of this ContinuousBackupConfig.
        """
        self.openapi_types = {
            'enabled': bool,
            'encryption_config': EncryptionConfig,
            'recovery_window_days': int
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'encryption_config': 'encryptionConfig',
            'recovery_window_days': 'recoveryWindowDays'
        }

        self._enabled = enabled
        self._encryption_config = encryption_config
        self._recovery_window_days = recovery_window_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContinuousBackupConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContinuousBackupConfig of this ContinuousBackupConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this ContinuousBackupConfig.

        Whether ContinuousBackup is enabled.

        :return: The enabled of this ContinuousBackupConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ContinuousBackupConfig.

        Whether ContinuousBackup is enabled.

        :param enabled: The enabled of this ContinuousBackupConfig.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def encryption_config(self):
        """Gets the encryption_config of this ContinuousBackupConfig.


        :return: The encryption_config of this ContinuousBackupConfig.
        :rtype: EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this ContinuousBackupConfig.


        :param encryption_config: The encryption_config of this ContinuousBackupConfig.
        :type encryption_config: EncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def recovery_window_days(self):
        """Gets the recovery_window_days of this ContinuousBackupConfig.

        The number of days that are eligible to restore from using PITR. To support the entire recovery window, backups and logs are retained for one day more than the recovery window. If not set, defaults to 14 days.

        :return: The recovery_window_days of this ContinuousBackupConfig.
        :rtype: int
        """
        return self._recovery_window_days

    @recovery_window_days.setter
    def recovery_window_days(self, recovery_window_days):
        """Sets the recovery_window_days of this ContinuousBackupConfig.

        The number of days that are eligible to restore from using PITR. To support the entire recovery window, backups and logs are retained for one day more than the recovery window. If not set, defaults to 14 days.

        :param recovery_window_days: The recovery_window_days of this ContinuousBackupConfig.
        :type recovery_window_days: int
        """

        self._recovery_window_days = recovery_window_days
