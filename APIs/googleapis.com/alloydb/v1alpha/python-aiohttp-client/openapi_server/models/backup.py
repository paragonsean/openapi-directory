# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server.models.encryption_info import EncryptionInfo
from openapi_server.models.quantity_based_expiry import QuantityBasedExpiry
from openapi_server import util


class Backup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, cluster_name: str=None, cluster_uid: str=None, create_time: str=None, database_version: str=None, delete_time: str=None, description: str=None, display_name: str=None, encryption_config: EncryptionConfig=None, encryption_info: EncryptionInfo=None, etag: str=None, expiry_quantity: QuantityBasedExpiry=None, expiry_time: str=None, labels: Dict[str, str]=None, name: str=None, reconciling: bool=None, satisfies_pzi: bool=None, satisfies_pzs: bool=None, size_bytes: str=None, state: str=None, type: str=None, uid: str=None, update_time: str=None):
        """Backup - a model defined in OpenAPI

        :param annotations: The annotations of this Backup.
        :param cluster_name: The cluster_name of this Backup.
        :param cluster_uid: The cluster_uid of this Backup.
        :param create_time: The create_time of this Backup.
        :param database_version: The database_version of this Backup.
        :param delete_time: The delete_time of this Backup.
        :param description: The description of this Backup.
        :param display_name: The display_name of this Backup.
        :param encryption_config: The encryption_config of this Backup.
        :param encryption_info: The encryption_info of this Backup.
        :param etag: The etag of this Backup.
        :param expiry_quantity: The expiry_quantity of this Backup.
        :param expiry_time: The expiry_time of this Backup.
        :param labels: The labels of this Backup.
        :param name: The name of this Backup.
        :param reconciling: The reconciling of this Backup.
        :param satisfies_pzi: The satisfies_pzi of this Backup.
        :param satisfies_pzs: The satisfies_pzs of this Backup.
        :param size_bytes: The size_bytes of this Backup.
        :param state: The state of this Backup.
        :param type: The type of this Backup.
        :param uid: The uid of this Backup.
        :param update_time: The update_time of this Backup.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'cluster_name': str,
            'cluster_uid': str,
            'create_time': str,
            'database_version': str,
            'delete_time': str,
            'description': str,
            'display_name': str,
            'encryption_config': EncryptionConfig,
            'encryption_info': EncryptionInfo,
            'etag': str,
            'expiry_quantity': QuantityBasedExpiry,
            'expiry_time': str,
            'labels': Dict[str, str],
            'name': str,
            'reconciling': bool,
            'satisfies_pzi': bool,
            'satisfies_pzs': bool,
            'size_bytes': str,
            'state': str,
            'type': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'cluster_name': 'clusterName',
            'cluster_uid': 'clusterUid',
            'create_time': 'createTime',
            'database_version': 'databaseVersion',
            'delete_time': 'deleteTime',
            'description': 'description',
            'display_name': 'displayName',
            'encryption_config': 'encryptionConfig',
            'encryption_info': 'encryptionInfo',
            'etag': 'etag',
            'expiry_quantity': 'expiryQuantity',
            'expiry_time': 'expiryTime',
            'labels': 'labels',
            'name': 'name',
            'reconciling': 'reconciling',
            'satisfies_pzi': 'satisfiesPzi',
            'satisfies_pzs': 'satisfiesPzs',
            'size_bytes': 'sizeBytes',
            'state': 'state',
            'type': 'type',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._cluster_name = cluster_name
        self._cluster_uid = cluster_uid
        self._create_time = create_time
        self._database_version = database_version
        self._delete_time = delete_time
        self._description = description
        self._display_name = display_name
        self._encryption_config = encryption_config
        self._encryption_info = encryption_info
        self._etag = etag
        self._expiry_quantity = expiry_quantity
        self._expiry_time = expiry_time
        self._labels = labels
        self._name = name
        self._reconciling = reconciling
        self._satisfies_pzi = satisfies_pzi
        self._satisfies_pzs = satisfies_pzs
        self._size_bytes = size_bytes
        self._state = state
        self._type = type
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Backup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Backup of this Backup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this Backup.

        Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128

        :return: The annotations of this Backup.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Backup.

        Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128

        :param annotations: The annotations of this Backup.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def cluster_name(self):
        """Gets the cluster_name of this Backup.

        Required. The full resource name of the backup source cluster (e.g., projects/{project}/locations/{region}/clusters/{cluster_id}).

        :return: The cluster_name of this Backup.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this Backup.

        Required. The full resource name of the backup source cluster (e.g., projects/{project}/locations/{region}/clusters/{cluster_id}).

        :param cluster_name: The cluster_name of this Backup.
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def cluster_uid(self):
        """Gets the cluster_uid of this Backup.

        Output only. The system-generated UID of the cluster which was used to create this resource.

        :return: The cluster_uid of this Backup.
        :rtype: str
        """
        return self._cluster_uid

    @cluster_uid.setter
    def cluster_uid(self, cluster_uid):
        """Sets the cluster_uid of this Backup.

        Output only. The system-generated UID of the cluster which was used to create this resource.

        :param cluster_uid: The cluster_uid of this Backup.
        :type cluster_uid: str
        """

        self._cluster_uid = cluster_uid

    @property
    def create_time(self):
        """Gets the create_time of this Backup.

        Output only. Create time stamp

        :return: The create_time of this Backup.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Backup.

        Output only. Create time stamp

        :param create_time: The create_time of this Backup.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def database_version(self):
        """Gets the database_version of this Backup.

        Output only. The database engine major version of the cluster this backup was created from. Any restored cluster created from this backup will have the same database version.

        :return: The database_version of this Backup.
        :rtype: str
        """
        return self._database_version

    @database_version.setter
    def database_version(self, database_version):
        """Sets the database_version of this Backup.

        Output only. The database engine major version of the cluster this backup was created from. Any restored cluster created from this backup will have the same database version.

        :param database_version: The database_version of this Backup.
        :type database_version: str
        """
        allowed_values = ["DATABASE_VERSION_UNSPECIFIED", "POSTGRES_13", "POSTGRES_14", "POSTGRES_15"]  # noqa: E501
        if database_version not in allowed_values:
            raise ValueError(
                "Invalid value for `database_version` ({0}), must be one of {1}"
                .format(database_version, allowed_values)
            )

        self._database_version = database_version

    @property
    def delete_time(self):
        """Gets the delete_time of this Backup.

        Output only. Delete time stamp

        :return: The delete_time of this Backup.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this Backup.

        Output only. Delete time stamp

        :param delete_time: The delete_time of this Backup.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def description(self):
        """Gets the description of this Backup.

        User-provided description of the backup.

        :return: The description of this Backup.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Backup.

        User-provided description of the backup.

        :param description: The description of this Backup.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Backup.

        User-settable and human-readable display name for the Backup.

        :return: The display_name of this Backup.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Backup.

        User-settable and human-readable display name for the Backup.

        :param display_name: The display_name of this Backup.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def encryption_config(self):
        """Gets the encryption_config of this Backup.


        :return: The encryption_config of this Backup.
        :rtype: EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this Backup.


        :param encryption_config: The encryption_config of this Backup.
        :type encryption_config: EncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def encryption_info(self):
        """Gets the encryption_info of this Backup.


        :return: The encryption_info of this Backup.
        :rtype: EncryptionInfo
        """
        return self._encryption_info

    @encryption_info.setter
    def encryption_info(self, encryption_info):
        """Sets the encryption_info of this Backup.


        :param encryption_info: The encryption_info of this Backup.
        :type encryption_info: EncryptionInfo
        """

        self._encryption_info = encryption_info

    @property
    def etag(self):
        """Gets the etag of this Backup.

        For Resource freshness validation (https://google.aip.dev/154)

        :return: The etag of this Backup.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Backup.

        For Resource freshness validation (https://google.aip.dev/154)

        :param etag: The etag of this Backup.
        :type etag: str
        """

        self._etag = etag

    @property
    def expiry_quantity(self):
        """Gets the expiry_quantity of this Backup.


        :return: The expiry_quantity of this Backup.
        :rtype: QuantityBasedExpiry
        """
        return self._expiry_quantity

    @expiry_quantity.setter
    def expiry_quantity(self, expiry_quantity):
        """Sets the expiry_quantity of this Backup.


        :param expiry_quantity: The expiry_quantity of this Backup.
        :type expiry_quantity: QuantityBasedExpiry
        """

        self._expiry_quantity = expiry_quantity

    @property
    def expiry_time(self):
        """Gets the expiry_time of this Backup.

        Output only. The time at which after the backup is eligible to be garbage collected. It is the duration specified by the backup's retention policy, added to the backup's create_time.

        :return: The expiry_time of this Backup.
        :rtype: str
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this Backup.

        Output only. The time at which after the backup is eligible to be garbage collected. It is the duration specified by the backup's retention policy, added to the backup's create_time.

        :param expiry_time: The expiry_time of this Backup.
        :type expiry_time: str
        """

        self._expiry_time = expiry_time

    @property
    def labels(self):
        """Gets the labels of this Backup.

        Labels as key value pairs

        :return: The labels of this Backup.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Backup.

        Labels as key value pairs

        :param labels: The labels of this Backup.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Backup.

        Output only. The name of the backup resource with the format: * projects/{project}/locations/{region}/backups/{backup_id} where the cluster and backup ID segments should satisfy the regex expression `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`, e.g. 1-63 characters of lowercase letters, numbers, and dashes, starting with a letter, and ending with a letter or number. For more details see https://google.aip.dev/122. The prefix of the backup resource name is the name of the parent resource: * projects/{project}/locations/{region}

        :return: The name of this Backup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Backup.

        Output only. The name of the backup resource with the format: * projects/{project}/locations/{region}/backups/{backup_id} where the cluster and backup ID segments should satisfy the regex expression `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`, e.g. 1-63 characters of lowercase letters, numbers, and dashes, starting with a letter, and ending with a letter or number. For more details see https://google.aip.dev/122. The prefix of the backup resource name is the name of the parent resource: * projects/{project}/locations/{region}

        :param name: The name of this Backup.
        :type name: str
        """

        self._name = name

    @property
    def reconciling(self):
        """Gets the reconciling of this Backup.

        Output only. Reconciling (https://google.aip.dev/128#reconciliation), if true, indicates that the service is actively updating the resource. This can happen due to user-triggered updates or system actions like failover or maintenance.

        :return: The reconciling of this Backup.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this Backup.

        Output only. Reconciling (https://google.aip.dev/128#reconciliation), if true, indicates that the service is actively updating the resource. This can happen due to user-triggered updates or system actions like failover or maintenance.

        :param reconciling: The reconciling of this Backup.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def satisfies_pzi(self):
        """Gets the satisfies_pzi of this Backup.

        Output only. Reserved for future use.

        :return: The satisfies_pzi of this Backup.
        :rtype: bool
        """
        return self._satisfies_pzi

    @satisfies_pzi.setter
    def satisfies_pzi(self, satisfies_pzi):
        """Sets the satisfies_pzi of this Backup.

        Output only. Reserved for future use.

        :param satisfies_pzi: The satisfies_pzi of this Backup.
        :type satisfies_pzi: bool
        """

        self._satisfies_pzi = satisfies_pzi

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this Backup.

        Output only. Reserved for future use.

        :return: The satisfies_pzs of this Backup.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this Backup.

        Output only. Reserved for future use.

        :param satisfies_pzs: The satisfies_pzs of this Backup.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def size_bytes(self):
        """Gets the size_bytes of this Backup.

        Output only. The size of the backup in bytes.

        :return: The size_bytes of this Backup.
        :rtype: str
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this Backup.

        Output only. The size of the backup in bytes.

        :param size_bytes: The size_bytes of this Backup.
        :type size_bytes: str
        """

        self._size_bytes = size_bytes

    @property
    def state(self):
        """Gets the state of this Backup.

        Output only. The current state of the backup.

        :return: The state of this Backup.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Backup.

        Output only. The current state of the backup.

        :param state: The state of this Backup.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "READY", "CREATING", "FAILED", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this Backup.

        The backup type, which suggests the trigger for the backup.

        :return: The type of this Backup.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Backup.

        The backup type, which suggests the trigger for the backup.

        :param type: The type of this Backup.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "ON_DEMAND", "AUTOMATED", "CONTINUOUS"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this Backup.

        Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.

        :return: The uid of this Backup.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Backup.

        Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.

        :param uid: The uid of this Backup.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Backup.

        Output only. Update time stamp

        :return: The update_time of this Backup.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Backup.

        Output only. Update time stamp

        :param update_time: The update_time of this Backup.
        :type update_time: str
        """

        self._update_time = update_time
