# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SslConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_source: str=None, ssl_mode: str=None):
        """SslConfig - a model defined in OpenAPI

        :param ca_source: The ca_source of this SslConfig.
        :param ssl_mode: The ssl_mode of this SslConfig.
        """
        self.openapi_types = {
            'ca_source': str,
            'ssl_mode': str
        }

        self.attribute_map = {
            'ca_source': 'caSource',
            'ssl_mode': 'sslMode'
        }

        self._ca_source = ca_source
        self._ssl_mode = ssl_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SslConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SslConfig of this SslConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_source(self):
        """Gets the ca_source of this SslConfig.

        Optional. Certificate Authority (CA) source. Only CA_SOURCE_MANAGED is supported currently, and is the default value.

        :return: The ca_source of this SslConfig.
        :rtype: str
        """
        return self._ca_source

    @ca_source.setter
    def ca_source(self, ca_source):
        """Sets the ca_source of this SslConfig.

        Optional. Certificate Authority (CA) source. Only CA_SOURCE_MANAGED is supported currently, and is the default value.

        :param ca_source: The ca_source of this SslConfig.
        :type ca_source: str
        """
        allowed_values = ["CA_SOURCE_UNSPECIFIED", "CA_SOURCE_MANAGED"]  # noqa: E501
        if ca_source not in allowed_values:
            raise ValueError(
                "Invalid value for `ca_source` ({0}), must be one of {1}"
                .format(ca_source, allowed_values)
            )

        self._ca_source = ca_source

    @property
    def ssl_mode(self):
        """Gets the ssl_mode of this SslConfig.

        Optional. SSL mode. Specifies client-server SSL/TLS connection behavior.

        :return: The ssl_mode of this SslConfig.
        :rtype: str
        """
        return self._ssl_mode

    @ssl_mode.setter
    def ssl_mode(self, ssl_mode):
        """Sets the ssl_mode of this SslConfig.

        Optional. SSL mode. Specifies client-server SSL/TLS connection behavior.

        :param ssl_mode: The ssl_mode of this SslConfig.
        :type ssl_mode: str
        """
        allowed_values = ["SSL_MODE_UNSPECIFIED", "SSL_MODE_ALLOW", "SSL_MODE_REQUIRE", "SSL_MODE_VERIFY_CA", "ALLOW_UNENCRYPTED_AND_ENCRYPTED", "ENCRYPTED_ONLY"]  # noqa: E501
        if ssl_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_mode` ({0}), must be one of {1}"
                .format(ssl_mode, allowed_values)
            )

        self._ssl_mode = ssl_mode
