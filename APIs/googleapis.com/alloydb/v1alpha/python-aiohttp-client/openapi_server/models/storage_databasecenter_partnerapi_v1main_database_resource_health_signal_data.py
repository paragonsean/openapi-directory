# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.storage_databasecenter_partnerapi_v1main_compliance import StorageDatabasecenterPartnerapiV1mainCompliance
from openapi_server import util


class StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_metadata: Dict[str, object]=None, compliance: List[StorageDatabasecenterPartnerapiV1mainCompliance]=None, description: str=None, event_time: str=None, external_uri: str=None, name: str=None, provider: str=None, resource_container: str=None, resource_name: str=None, signal_class: str=None, signal_id: str=None, signal_type: str=None, state: str=None):
        """StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData - a model defined in OpenAPI

        :param additional_metadata: The additional_metadata of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :param compliance: The compliance of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :param description: The description of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :param event_time: The event_time of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :param external_uri: The external_uri of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :param name: The name of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :param provider: The provider of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :param resource_container: The resource_container of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :param resource_name: The resource_name of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :param signal_class: The signal_class of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :param signal_id: The signal_id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :param signal_type: The signal_type of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :param state: The state of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        """
        self.openapi_types = {
            'additional_metadata': Dict[str, object],
            'compliance': List[StorageDatabasecenterPartnerapiV1mainCompliance],
            'description': str,
            'event_time': str,
            'external_uri': str,
            'name': str,
            'provider': str,
            'resource_container': str,
            'resource_name': str,
            'signal_class': str,
            'signal_id': str,
            'signal_type': str,
            'state': str
        }

        self.attribute_map = {
            'additional_metadata': 'additionalMetadata',
            'compliance': 'compliance',
            'description': 'description',
            'event_time': 'eventTime',
            'external_uri': 'externalUri',
            'name': 'name',
            'provider': 'provider',
            'resource_container': 'resourceContainer',
            'resource_name': 'resourceName',
            'signal_class': 'signalClass',
            'signal_id': 'signalId',
            'signal_type': 'signalType',
            'state': 'state'
        }

        self._additional_metadata = additional_metadata
        self._compliance = compliance
        self._description = description
        self._event_time = event_time
        self._external_uri = external_uri
        self._name = name
        self._provider = provider
        self._resource_container = resource_container
        self._resource_name = resource_name
        self._signal_class = signal_class
        self._signal_id = signal_id
        self._signal_type = signal_type
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_metadata(self):
        """Gets the additional_metadata of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Any other additional metadata

        :return: The additional_metadata of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :rtype: Dict[str, object]
        """
        return self._additional_metadata

    @additional_metadata.setter
    def additional_metadata(self, additional_metadata):
        """Sets the additional_metadata of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Any other additional metadata

        :param additional_metadata: The additional_metadata of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :type additional_metadata: Dict[str, object]
        """

        self._additional_metadata = additional_metadata

    @property
    def compliance(self):
        """Gets the compliance of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Industry standards associated with this signal; if this signal is an issue, that could be a violation of the associated industry standard(s). For example, AUTO_BACKUP_DISABLED signal is associated with CIS GCP 1.1, CIS GCP 1.2, CIS GCP 1.3, NIST 800-53 and ISO-27001 compliance standards. If a database resource does not have automated backup enable, it will violate these following industry standards.

        :return: The compliance of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :rtype: List[StorageDatabasecenterPartnerapiV1mainCompliance]
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance):
        """Sets the compliance of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Industry standards associated with this signal; if this signal is an issue, that could be a violation of the associated industry standard(s). For example, AUTO_BACKUP_DISABLED signal is associated with CIS GCP 1.1, CIS GCP 1.2, CIS GCP 1.3, NIST 800-53 and ISO-27001 compliance standards. If a database resource does not have automated backup enable, it will violate these following industry standards.

        :param compliance: The compliance of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :type compliance: List[StorageDatabasecenterPartnerapiV1mainCompliance]
        """

        self._compliance = compliance

    @property
    def description(self):
        """Gets the description of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Description associated with signal

        :return: The description of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Description associated with signal

        :param description: The description of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :type description: str
        """

        self._description = description

    @property
    def event_time(self):
        """Gets the event_time of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Required. The last time at which the event described by this signal took place

        :return: The event_time of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :rtype: str
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Required. The last time at which the event described by this signal took place

        :param event_time: The event_time of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :type event_time: str
        """

        self._event_time = event_time

    @property
    def external_uri(self):
        """Gets the external_uri of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        The external-uri of the signal, using which more information about this signal can be obtained. In GCP, this will take user to SCC page to get more details about signals.

        :return: The external_uri of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :rtype: str
        """
        return self._external_uri

    @external_uri.setter
    def external_uri(self, external_uri):
        """Sets the external_uri of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        The external-uri of the signal, using which more information about this signal can be obtained. In GCP, this will take user to SCC page to get more details about signals.

        :param external_uri: The external_uri of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :type external_uri: str
        """

        self._external_uri = external_uri

    @property
    def name(self):
        """Gets the name of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Required. The name of the signal, ex: PUBLIC_SQL_INSTANCE, SQL_LOG_ERROR_VERBOSITY etc.

        :return: The name of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Required. The name of the signal, ex: PUBLIC_SQL_INSTANCE, SQL_LOG_ERROR_VERBOSITY etc.

        :param name: The name of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :type name: str
        """

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Cloud provider name. Ex: GCP/AWS/Azure/OnPrem/SelfManaged

        :return: The provider of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Cloud provider name. Ex: GCP/AWS/Azure/OnPrem/SelfManaged

        :param provider: The provider of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :type provider: str
        """
        allowed_values = ["PROVIDER_UNSPECIFIED", "GCP", "AWS", "AZURE", "ONPREM", "SELFMANAGED", "PROVIDER_OTHER"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def resource_container(self):
        """Gets the resource_container of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Closest parent container of this resource. In GCP, 'container' refers to a Cloud Resource Manager project. It must be resource name of a Cloud Resource Manager project with the format of \"provider//\", such as \"projects/123\". For GCP provided resources, number should be project number.

        :return: The resource_container of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :rtype: str
        """
        return self._resource_container

    @resource_container.setter
    def resource_container(self, resource_container):
        """Sets the resource_container of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Closest parent container of this resource. In GCP, 'container' refers to a Cloud Resource Manager project. It must be resource name of a Cloud Resource Manager project with the format of \"provider//\", such as \"projects/123\". For GCP provided resources, number should be project number.

        :param resource_container: The resource_container of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :type resource_container: str
        """

        self._resource_container = resource_container

    @property
    def resource_name(self):
        """Gets the resource_name of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Required. Database resource name associated with the signal. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel

        :return: The resource_name of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Required. Database resource name associated with the signal. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel

        :param resource_name: The resource_name of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :type resource_name: str
        """

        self._resource_name = resource_name

    @property
    def signal_class(self):
        """Gets the signal_class of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Required. The class of the signal, such as if it's a THREAT or VULNERABILITY.

        :return: The signal_class of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :rtype: str
        """
        return self._signal_class

    @signal_class.setter
    def signal_class(self, signal_class):
        """Sets the signal_class of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Required. The class of the signal, such as if it's a THREAT or VULNERABILITY.

        :param signal_class: The signal_class of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :type signal_class: str
        """
        allowed_values = ["CLASS_UNSPECIFIED", "THREAT", "VULNERABILITY", "MISCONFIGURATION", "OBSERVATION", "ERROR"]  # noqa: E501
        if signal_class not in allowed_values:
            raise ValueError(
                "Invalid value for `signal_class` ({0}), must be one of {1}"
                .format(signal_class, allowed_values)
            )

        self._signal_class = signal_class

    @property
    def signal_id(self):
        """Gets the signal_id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Required. Unique identifier for the signal. This is an unique id which would be mainatined by partner to identify a signal.

        :return: The signal_id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :rtype: str
        """
        return self._signal_id

    @signal_id.setter
    def signal_id(self, signal_id):
        """Sets the signal_id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Required. Unique identifier for the signal. This is an unique id which would be mainatined by partner to identify a signal.

        :param signal_id: The signal_id of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :type signal_id: str
        """

        self._signal_id = signal_id

    @property
    def signal_type(self):
        """Gets the signal_type of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Required. Type of signal, for example, `AVAILABLE_IN_MULTIPLE_ZONES`, `LOGGING_MOST_ERRORS`, etc.

        :return: The signal_type of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :rtype: str
        """
        return self._signal_type

    @signal_type.setter
    def signal_type(self, signal_type):
        """Sets the signal_type of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.

        Required. Type of signal, for example, `AVAILABLE_IN_MULTIPLE_ZONES`, `LOGGING_MOST_ERRORS`, etc.

        :param signal_type: The signal_type of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :type signal_type: str
        """
        allowed_values = ["SIGNAL_TYPE_UNSPECIFIED", "SIGNAL_TYPE_NOT_PROTECTED_BY_AUTOMATIC_FAILOVER", "SIGNAL_TYPE_GROUP_NOT_REPLICATING_ACROSS_REGIONS", "SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_ZONES", "SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_REGIONS", "SIGNAL_TYPE_NO_PROMOTABLE_REPLICA", "SIGNAL_TYPE_NO_AUTOMATED_BACKUP_POLICY", "SIGNAL_TYPE_SHORT_BACKUP_RETENTION", "SIGNAL_TYPE_LAST_BACKUP_FAILED", "SIGNAL_TYPE_LAST_BACKUP_OLD", "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_2_0", "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_3", "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_2", "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_1", "SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_0", "SIGNAL_TYPE_VIOLATES_NIST_800_53", "SIGNAL_TYPE_VIOLATES_ISO_27001", "SIGNAL_TYPE_VIOLATES_PCI_DSS_V3_2_1", "SIGNAL_TYPE_LOGS_NOT_OPTIMIZED_FOR_TROUBLESHOOTING", "SIGNAL_TYPE_QUERY_DURATIONS_NOT_LOGGED", "SIGNAL_TYPE_VERBOSE_ERROR_LOGGING", "SIGNAL_TYPE_QUERY_LOCK_WAITS_NOT_LOGGED", "SIGNAL_TYPE_LOGGING_MOST_ERRORS", "SIGNAL_TYPE_LOGGING_ONLY_CRITICAL_ERRORS", "SIGNAL_TYPE_MINIMAL_ERROR_LOGGING", "SIGNAL_TYPE_QUERY_STATISTICS_LOGGED", "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_CLIENT_HOSTNAME", "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PARSER_STATISTICS", "SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PLANNER_STATISTICS", "SIGNAL_TYPE_NOT_LOGGING_ONLY_DDL_STATEMENTS", "SIGNAL_TYPE_LOGGING_QUERY_STATISTICS", "SIGNAL_TYPE_NOT_LOGGING_TEMPORARY_FILES", "SIGNAL_TYPE_CONNECTION_MAX_NOT_CONFIGURED", "SIGNAL_TYPE_USER_OPTIONS_CONFIGURED", "SIGNAL_TYPE_EXPOSED_TO_PUBLIC_ACCESS", "SIGNAL_TYPE_UNENCRYPTED_CONNECTIONS", "SIGNAL_TYPE_NO_ROOT_PASSWORD", "SIGNAL_TYPE_WEAK_ROOT_PASSWORD", "SIGNAL_TYPE_ENCRYPTION_KEY_NOT_CUSTOMER_MANAGED", "SIGNAL_TYPE_SERVER_AUTHENTICATION_NOT_REQUIRED", "SIGNAL_TYPE_EXPOSED_BY_OWNERSHIP_CHAINING", "SIGNAL_TYPE_EXPOSED_TO_EXTERNAL_SCRIPTS", "SIGNAL_TYPE_EXPOSED_TO_LOCAL_DATA_LOADS", "SIGNAL_TYPE_CONNECTION_ATTEMPTS_NOT_LOGGED", "SIGNAL_TYPE_DISCONNECTIONS_NOT_LOGGED", "SIGNAL_TYPE_LOGGING_EXCESSIVE_STATEMENT_INFO", "SIGNAL_TYPE_EXPOSED_TO_REMOTE_ACCESS", "SIGNAL_TYPE_DATABASE_NAMES_EXPOSED", "SIGNAL_TYPE_SENSITIVE_TRACE_INFO_NOT_MASKED", "SIGNAL_TYPE_PUBLIC_IP_ENABLED", "SIGNAL_TYPE_IDLE", "SIGNAL_TYPE_OVERPROVISIONED", "SIGNAL_TYPE_HIGH_NUMBER_OF_OPEN_TABLES", "SIGNAL_TYPE_HIGH_NUMBER_OF_TABLES", "SIGNAL_TYPE_HIGH_TRANSACTION_ID_UTILIZATION", "SIGNAL_TYPE_UNDERPROVISIONED", "SIGNAL_TYPE_OUT_OF_DISK", "SIGNAL_TYPE_SERVER_CERTIFICATE_NEAR_EXPIRY", "SIGNAL_TYPE_DATABASE_AUDITING_DISABLED", "SIGNAL_TYPE_RESTRICT_AUTHORIZED_NETWORKS", "SIGNAL_TYPE_VIOLATE_POLICY_RESTRICT_PUBLIC_IP"]  # noqa: E501
        if signal_type not in allowed_values:
            raise ValueError(
                "Invalid value for `signal_type` ({0}), must be one of {1}"
                .format(signal_type, allowed_values)
            )

        self._signal_type = signal_type

    @property
    def state(self):
        """Gets the state of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.


        :return: The state of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.


        :param state: The state of this StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "RESOLVED", "MUTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
