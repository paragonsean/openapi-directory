# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryInsightsInstanceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query_plans_per_minute: int=None, query_string_length: int=None, record_application_tags: bool=None, record_client_address: bool=None):
        """QueryInsightsInstanceConfig - a model defined in OpenAPI

        :param query_plans_per_minute: The query_plans_per_minute of this QueryInsightsInstanceConfig.
        :param query_string_length: The query_string_length of this QueryInsightsInstanceConfig.
        :param record_application_tags: The record_application_tags of this QueryInsightsInstanceConfig.
        :param record_client_address: The record_client_address of this QueryInsightsInstanceConfig.
        """
        self.openapi_types = {
            'query_plans_per_minute': int,
            'query_string_length': int,
            'record_application_tags': bool,
            'record_client_address': bool
        }

        self.attribute_map = {
            'query_plans_per_minute': 'queryPlansPerMinute',
            'query_string_length': 'queryStringLength',
            'record_application_tags': 'recordApplicationTags',
            'record_client_address': 'recordClientAddress'
        }

        self._query_plans_per_minute = query_plans_per_minute
        self._query_string_length = query_string_length
        self._record_application_tags = record_application_tags
        self._record_client_address = record_client_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryInsightsInstanceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryInsightsInstanceConfig of this QueryInsightsInstanceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query_plans_per_minute(self):
        """Gets the query_plans_per_minute of this QueryInsightsInstanceConfig.

        Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 20 is considered valid.

        :return: The query_plans_per_minute of this QueryInsightsInstanceConfig.
        :rtype: int
        """
        return self._query_plans_per_minute

    @query_plans_per_minute.setter
    def query_plans_per_minute(self, query_plans_per_minute):
        """Sets the query_plans_per_minute of this QueryInsightsInstanceConfig.

        Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 20 is considered valid.

        :param query_plans_per_minute: The query_plans_per_minute of this QueryInsightsInstanceConfig.
        :type query_plans_per_minute: int
        """

        self._query_plans_per_minute = query_plans_per_minute

    @property
    def query_string_length(self):
        """Gets the query_string_length of this QueryInsightsInstanceConfig.

        Query string length. The default value is 1024. Any integer between 256 and 4500 is considered valid.

        :return: The query_string_length of this QueryInsightsInstanceConfig.
        :rtype: int
        """
        return self._query_string_length

    @query_string_length.setter
    def query_string_length(self, query_string_length):
        """Sets the query_string_length of this QueryInsightsInstanceConfig.

        Query string length. The default value is 1024. Any integer between 256 and 4500 is considered valid.

        :param query_string_length: The query_string_length of this QueryInsightsInstanceConfig.
        :type query_string_length: int
        """

        self._query_string_length = query_string_length

    @property
    def record_application_tags(self):
        """Gets the record_application_tags of this QueryInsightsInstanceConfig.

        Record application tags for an instance. This flag is turned \"on\" by default.

        :return: The record_application_tags of this QueryInsightsInstanceConfig.
        :rtype: bool
        """
        return self._record_application_tags

    @record_application_tags.setter
    def record_application_tags(self, record_application_tags):
        """Sets the record_application_tags of this QueryInsightsInstanceConfig.

        Record application tags for an instance. This flag is turned \"on\" by default.

        :param record_application_tags: The record_application_tags of this QueryInsightsInstanceConfig.
        :type record_application_tags: bool
        """

        self._record_application_tags = record_application_tags

    @property
    def record_client_address(self):
        """Gets the record_client_address of this QueryInsightsInstanceConfig.

        Record client address for an instance. Client address is PII information. This flag is turned \"on\" by default.

        :return: The record_client_address of this QueryInsightsInstanceConfig.
        :rtype: bool
        """
        return self._record_client_address

    @record_client_address.setter
    def record_client_address(self, record_client_address):
        """Sets the record_client_address of this QueryInsightsInstanceConfig.

        Record client address for an instance. Client address is PII information. This flag is turned \"on\" by default.

        :param record_client_address: The record_client_address of this QueryInsightsInstanceConfig.
        :type record_client_address: bool
        """

        self._record_client_address = record_client_address
