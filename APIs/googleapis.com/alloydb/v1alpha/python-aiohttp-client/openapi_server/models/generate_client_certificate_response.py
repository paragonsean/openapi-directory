# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateClientCertificateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_cert: str=None, pem_certificate: str=None, pem_certificate_chain: List[str]=None):
        """GenerateClientCertificateResponse - a model defined in OpenAPI

        :param ca_cert: The ca_cert of this GenerateClientCertificateResponse.
        :param pem_certificate: The pem_certificate of this GenerateClientCertificateResponse.
        :param pem_certificate_chain: The pem_certificate_chain of this GenerateClientCertificateResponse.
        """
        self.openapi_types = {
            'ca_cert': str,
            'pem_certificate': str,
            'pem_certificate_chain': List[str]
        }

        self.attribute_map = {
            'ca_cert': 'caCert',
            'pem_certificate': 'pemCertificate',
            'pem_certificate_chain': 'pemCertificateChain'
        }

        self._ca_cert = ca_cert
        self._pem_certificate = pem_certificate
        self._pem_certificate_chain = pem_certificate_chain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateClientCertificateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateClientCertificateResponse of this GenerateClientCertificateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_cert(self):
        """Gets the ca_cert of this GenerateClientCertificateResponse.

        Optional. The pem-encoded cluster ca X.509 certificate.

        :return: The ca_cert of this GenerateClientCertificateResponse.
        :rtype: str
        """
        return self._ca_cert

    @ca_cert.setter
    def ca_cert(self, ca_cert):
        """Sets the ca_cert of this GenerateClientCertificateResponse.

        Optional. The pem-encoded cluster ca X.509 certificate.

        :param ca_cert: The ca_cert of this GenerateClientCertificateResponse.
        :type ca_cert: str
        """

        self._ca_cert = ca_cert

    @property
    def pem_certificate(self):
        """Gets the pem_certificate of this GenerateClientCertificateResponse.

        Output only. The pem-encoded, signed X.509 certificate.

        :return: The pem_certificate of this GenerateClientCertificateResponse.
        :rtype: str
        """
        return self._pem_certificate

    @pem_certificate.setter
    def pem_certificate(self, pem_certificate):
        """Sets the pem_certificate of this GenerateClientCertificateResponse.

        Output only. The pem-encoded, signed X.509 certificate.

        :param pem_certificate: The pem_certificate of this GenerateClientCertificateResponse.
        :type pem_certificate: str
        """

        self._pem_certificate = pem_certificate

    @property
    def pem_certificate_chain(self):
        """Gets the pem_certificate_chain of this GenerateClientCertificateResponse.

        Output only. The pem-encoded chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.

        :return: The pem_certificate_chain of this GenerateClientCertificateResponse.
        :rtype: List[str]
        """
        return self._pem_certificate_chain

    @pem_certificate_chain.setter
    def pem_certificate_chain(self, pem_certificate_chain):
        """Sets the pem_certificate_chain of this GenerateClientCertificateResponse.

        Output only. The pem-encoded chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.

        :param pem_certificate_chain: The pem_certificate_chain of this GenerateClientCertificateResponse.
        :type pem_certificate_chain: List[str]
        """

        self._pem_certificate_chain = pem_certificate_chain
