# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.integer_restrictions import IntegerRestrictions
from openapi_server.models.string_restrictions import StringRestrictions
from openapi_server import util


class SupportedDatabaseFlag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepts_multiple_values: bool=None, flag_name: str=None, integer_restrictions: IntegerRestrictions=None, name: str=None, requires_db_restart: bool=None, string_restrictions: StringRestrictions=None, supported_db_versions: List[str]=None, value_type: str=None):
        """SupportedDatabaseFlag - a model defined in OpenAPI

        :param accepts_multiple_values: The accepts_multiple_values of this SupportedDatabaseFlag.
        :param flag_name: The flag_name of this SupportedDatabaseFlag.
        :param integer_restrictions: The integer_restrictions of this SupportedDatabaseFlag.
        :param name: The name of this SupportedDatabaseFlag.
        :param requires_db_restart: The requires_db_restart of this SupportedDatabaseFlag.
        :param string_restrictions: The string_restrictions of this SupportedDatabaseFlag.
        :param supported_db_versions: The supported_db_versions of this SupportedDatabaseFlag.
        :param value_type: The value_type of this SupportedDatabaseFlag.
        """
        self.openapi_types = {
            'accepts_multiple_values': bool,
            'flag_name': str,
            'integer_restrictions': IntegerRestrictions,
            'name': str,
            'requires_db_restart': bool,
            'string_restrictions': StringRestrictions,
            'supported_db_versions': List[str],
            'value_type': str
        }

        self.attribute_map = {
            'accepts_multiple_values': 'acceptsMultipleValues',
            'flag_name': 'flagName',
            'integer_restrictions': 'integerRestrictions',
            'name': 'name',
            'requires_db_restart': 'requiresDbRestart',
            'string_restrictions': 'stringRestrictions',
            'supported_db_versions': 'supportedDbVersions',
            'value_type': 'valueType'
        }

        self._accepts_multiple_values = accepts_multiple_values
        self._flag_name = flag_name
        self._integer_restrictions = integer_restrictions
        self._name = name
        self._requires_db_restart = requires_db_restart
        self._string_restrictions = string_restrictions
        self._supported_db_versions = supported_db_versions
        self._value_type = value_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupportedDatabaseFlag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SupportedDatabaseFlag of this SupportedDatabaseFlag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepts_multiple_values(self):
        """Gets the accepts_multiple_values of this SupportedDatabaseFlag.

        Whether the database flag accepts multiple values. If true, a comma-separated list of stringified values may be specified.

        :return: The accepts_multiple_values of this SupportedDatabaseFlag.
        :rtype: bool
        """
        return self._accepts_multiple_values

    @accepts_multiple_values.setter
    def accepts_multiple_values(self, accepts_multiple_values):
        """Sets the accepts_multiple_values of this SupportedDatabaseFlag.

        Whether the database flag accepts multiple values. If true, a comma-separated list of stringified values may be specified.

        :param accepts_multiple_values: The accepts_multiple_values of this SupportedDatabaseFlag.
        :type accepts_multiple_values: bool
        """

        self._accepts_multiple_values = accepts_multiple_values

    @property
    def flag_name(self):
        """Gets the flag_name of this SupportedDatabaseFlag.

        The name of the database flag, e.g. \"max_allowed_packets\". The is a possibly key for the Instance.database_flags map field.

        :return: The flag_name of this SupportedDatabaseFlag.
        :rtype: str
        """
        return self._flag_name

    @flag_name.setter
    def flag_name(self, flag_name):
        """Sets the flag_name of this SupportedDatabaseFlag.

        The name of the database flag, e.g. \"max_allowed_packets\". The is a possibly key for the Instance.database_flags map field.

        :param flag_name: The flag_name of this SupportedDatabaseFlag.
        :type flag_name: str
        """

        self._flag_name = flag_name

    @property
    def integer_restrictions(self):
        """Gets the integer_restrictions of this SupportedDatabaseFlag.


        :return: The integer_restrictions of this SupportedDatabaseFlag.
        :rtype: IntegerRestrictions
        """
        return self._integer_restrictions

    @integer_restrictions.setter
    def integer_restrictions(self, integer_restrictions):
        """Sets the integer_restrictions of this SupportedDatabaseFlag.


        :param integer_restrictions: The integer_restrictions of this SupportedDatabaseFlag.
        :type integer_restrictions: IntegerRestrictions
        """

        self._integer_restrictions = integer_restrictions

    @property
    def name(self):
        """Gets the name of this SupportedDatabaseFlag.

        The name of the flag resource, following Google Cloud conventions, e.g.: * projects/{project}/locations/{location}/flags/{flag} This field currently has no semantic meaning.

        :return: The name of this SupportedDatabaseFlag.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SupportedDatabaseFlag.

        The name of the flag resource, following Google Cloud conventions, e.g.: * projects/{project}/locations/{location}/flags/{flag} This field currently has no semantic meaning.

        :param name: The name of this SupportedDatabaseFlag.
        :type name: str
        """

        self._name = name

    @property
    def requires_db_restart(self):
        """Gets the requires_db_restart of this SupportedDatabaseFlag.

        Whether setting or updating this flag on an Instance requires a database restart. If a flag that requires database restart is set, the backend will automatically restart the database (making sure to satisfy any availability SLO's).

        :return: The requires_db_restart of this SupportedDatabaseFlag.
        :rtype: bool
        """
        return self._requires_db_restart

    @requires_db_restart.setter
    def requires_db_restart(self, requires_db_restart):
        """Sets the requires_db_restart of this SupportedDatabaseFlag.

        Whether setting or updating this flag on an Instance requires a database restart. If a flag that requires database restart is set, the backend will automatically restart the database (making sure to satisfy any availability SLO's).

        :param requires_db_restart: The requires_db_restart of this SupportedDatabaseFlag.
        :type requires_db_restart: bool
        """

        self._requires_db_restart = requires_db_restart

    @property
    def string_restrictions(self):
        """Gets the string_restrictions of this SupportedDatabaseFlag.


        :return: The string_restrictions of this SupportedDatabaseFlag.
        :rtype: StringRestrictions
        """
        return self._string_restrictions

    @string_restrictions.setter
    def string_restrictions(self, string_restrictions):
        """Sets the string_restrictions of this SupportedDatabaseFlag.


        :param string_restrictions: The string_restrictions of this SupportedDatabaseFlag.
        :type string_restrictions: StringRestrictions
        """

        self._string_restrictions = string_restrictions

    @property
    def supported_db_versions(self):
        """Gets the supported_db_versions of this SupportedDatabaseFlag.

        Major database engine versions for which this flag is supported.

        :return: The supported_db_versions of this SupportedDatabaseFlag.
        :rtype: List[str]
        """
        return self._supported_db_versions

    @supported_db_versions.setter
    def supported_db_versions(self, supported_db_versions):
        """Sets the supported_db_versions of this SupportedDatabaseFlag.

        Major database engine versions for which this flag is supported.

        :param supported_db_versions: The supported_db_versions of this SupportedDatabaseFlag.
        :type supported_db_versions: List[str]
        """
        allowed_values = ["DATABASE_VERSION_UNSPECIFIED", "POSTGRES_13", "POSTGRES_14", "POSTGRES_15"]  # noqa: E501
        if not set(supported_db_versions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_db_versions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(supported_db_versions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_db_versions = supported_db_versions

    @property
    def value_type(self):
        """Gets the value_type of this SupportedDatabaseFlag.


        :return: The value_type of this SupportedDatabaseFlag.
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this SupportedDatabaseFlag.


        :param value_type: The value_type of this SupportedDatabaseFlag.
        :type value_type: str
        """
        allowed_values = ["VALUE_TYPE_UNSPECIFIED", "STRING", "INTEGER", "FLOAT", "NONE"]  # noqa: E501
        if value_type not in allowed_values:
            raise ValueError(
                "Invalid value for `value_type` ({0}), must be one of {1}"
                .format(value_type, allowed_values)
            )

        self._value_type = value_type
