# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.storage_databasecenter_partnerapi_v1main_backup_configuration import StorageDatabasecenterPartnerapiV1mainBackupConfiguration
from openapi_server.models.storage_databasecenter_partnerapi_v1main_backup_run import StorageDatabasecenterPartnerapiV1mainBackupRun
from openapi_server.models.storage_databasecenter_partnerapi_v1main_database_resource_id import StorageDatabasecenterPartnerapiV1mainDatabaseResourceId
from openapi_server.models.storage_databasecenter_proto_common_product import StorageDatabasecenterProtoCommonProduct
from openapi_server import util


class StorageDatabasecenterPartnerapiV1mainDatabaseMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_configuration: StorageDatabasecenterPartnerapiV1mainBackupConfiguration=None, backup_run: StorageDatabasecenterPartnerapiV1mainBackupRun=None, product: StorageDatabasecenterProtoCommonProduct=None, resource_id: StorageDatabasecenterPartnerapiV1mainDatabaseResourceId=None, resource_name: str=None):
        """StorageDatabasecenterPartnerapiV1mainDatabaseMetadata - a model defined in OpenAPI

        :param backup_configuration: The backup_configuration of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        :param backup_run: The backup_run of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        :param product: The product of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        :param resource_id: The resource_id of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        :param resource_name: The resource_name of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        """
        self.openapi_types = {
            'backup_configuration': StorageDatabasecenterPartnerapiV1mainBackupConfiguration,
            'backup_run': StorageDatabasecenterPartnerapiV1mainBackupRun,
            'product': StorageDatabasecenterProtoCommonProduct,
            'resource_id': StorageDatabasecenterPartnerapiV1mainDatabaseResourceId,
            'resource_name': str
        }

        self.attribute_map = {
            'backup_configuration': 'backupConfiguration',
            'backup_run': 'backupRun',
            'product': 'product',
            'resource_id': 'resourceId',
            'resource_name': 'resourceName'
        }

        self._backup_configuration = backup_configuration
        self._backup_run = backup_run
        self._product = product
        self._resource_id = resource_id
        self._resource_name = resource_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageDatabasecenterPartnerapiV1mainDatabaseMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageDatabasecenterPartnerapiV1mainDatabaseMetadata of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_configuration(self):
        """Gets the backup_configuration of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.


        :return: The backup_configuration of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        :rtype: StorageDatabasecenterPartnerapiV1mainBackupConfiguration
        """
        return self._backup_configuration

    @backup_configuration.setter
    def backup_configuration(self, backup_configuration):
        """Sets the backup_configuration of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.


        :param backup_configuration: The backup_configuration of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        :type backup_configuration: StorageDatabasecenterPartnerapiV1mainBackupConfiguration
        """

        self._backup_configuration = backup_configuration

    @property
    def backup_run(self):
        """Gets the backup_run of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.


        :return: The backup_run of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        :rtype: StorageDatabasecenterPartnerapiV1mainBackupRun
        """
        return self._backup_run

    @backup_run.setter
    def backup_run(self, backup_run):
        """Sets the backup_run of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.


        :param backup_run: The backup_run of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        :type backup_run: StorageDatabasecenterPartnerapiV1mainBackupRun
        """

        self._backup_run = backup_run

    @property
    def product(self):
        """Gets the product of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.


        :return: The product of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        :rtype: StorageDatabasecenterProtoCommonProduct
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.


        :param product: The product of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        :type product: StorageDatabasecenterProtoCommonProduct
        """

        self._product = product

    @property
    def resource_id(self):
        """Gets the resource_id of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.


        :return: The resource_id of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        :rtype: StorageDatabasecenterPartnerapiV1mainDatabaseResourceId
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.


        :param resource_id: The resource_id of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        :type resource_id: StorageDatabasecenterPartnerapiV1mainDatabaseResourceId
        """

        self._resource_id = resource_id

    @property
    def resource_name(self):
        """Gets the resource_name of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.

        Required. Database name. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel

        :return: The resource_name of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.

        Required. Database name. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel

        :param resource_name: The resource_name of this StorageDatabasecenterPartnerapiV1mainDatabaseMetadata.
        :type resource_name: str
        """

        self._resource_name = resource_name
