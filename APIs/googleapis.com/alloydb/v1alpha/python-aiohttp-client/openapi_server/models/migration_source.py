# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MigrationSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_port: str=None, reference_id: str=None, source_type: str=None):
        """MigrationSource - a model defined in OpenAPI

        :param host_port: The host_port of this MigrationSource.
        :param reference_id: The reference_id of this MigrationSource.
        :param source_type: The source_type of this MigrationSource.
        """
        self.openapi_types = {
            'host_port': str,
            'reference_id': str,
            'source_type': str
        }

        self.attribute_map = {
            'host_port': 'hostPort',
            'reference_id': 'referenceId',
            'source_type': 'sourceType'
        }

        self._host_port = host_port
        self._reference_id = reference_id
        self._source_type = source_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MigrationSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MigrationSource of this MigrationSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_port(self):
        """Gets the host_port of this MigrationSource.

        Output only. The host and port of the on-premises instance in host:port format

        :return: The host_port of this MigrationSource.
        :rtype: str
        """
        return self._host_port

    @host_port.setter
    def host_port(self, host_port):
        """Sets the host_port of this MigrationSource.

        Output only. The host and port of the on-premises instance in host:port format

        :param host_port: The host_port of this MigrationSource.
        :type host_port: str
        """

        self._host_port = host_port

    @property
    def reference_id(self):
        """Gets the reference_id of this MigrationSource.

        Output only. Place holder for the external source identifier(e.g DMS job name) that created the cluster.

        :return: The reference_id of this MigrationSource.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this MigrationSource.

        Output only. Place holder for the external source identifier(e.g DMS job name) that created the cluster.

        :param reference_id: The reference_id of this MigrationSource.
        :type reference_id: str
        """

        self._reference_id = reference_id

    @property
    def source_type(self):
        """Gets the source_type of this MigrationSource.

        Output only. Type of migration source.

        :return: The source_type of this MigrationSource.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this MigrationSource.

        Output only. Type of migration source.

        :param source_type: The source_type of this MigrationSource.
        :type source_type: str
        """
        allowed_values = ["MIGRATION_SOURCE_TYPE_UNSPECIFIED", "DMS"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type
