/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration() {
    this->initializeModel();
}

OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::~OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration() {}

void OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::initializeModel() {

    m_availability_type_isSet = false;
    m_availability_type_isValid = false;

    m_external_replica_configured_isSet = false;
    m_external_replica_configured_isValid = false;

    m_promotable_replica_configured_isSet = false;
    m_promotable_replica_configured_isValid = false;
}

void OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::fromJsonObject(QJsonObject json) {

    m_availability_type_isValid = ::OpenAPI::fromJsonValue(m_availability_type, json[QString("availabilityType")]);
    m_availability_type_isSet = !json[QString("availabilityType")].isNull() && m_availability_type_isValid;

    m_external_replica_configured_isValid = ::OpenAPI::fromJsonValue(m_external_replica_configured, json[QString("externalReplicaConfigured")]);
    m_external_replica_configured_isSet = !json[QString("externalReplicaConfigured")].isNull() && m_external_replica_configured_isValid;

    m_promotable_replica_configured_isValid = ::OpenAPI::fromJsonValue(m_promotable_replica_configured, json[QString("promotableReplicaConfigured")]);
    m_promotable_replica_configured_isSet = !json[QString("promotableReplicaConfigured")].isNull() && m_promotable_replica_configured_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_type_isSet) {
        obj.insert(QString("availabilityType"), ::OpenAPI::toJsonValue(m_availability_type));
    }
    if (m_external_replica_configured_isSet) {
        obj.insert(QString("externalReplicaConfigured"), ::OpenAPI::toJsonValue(m_external_replica_configured));
    }
    if (m_promotable_replica_configured_isSet) {
        obj.insert(QString("promotableReplicaConfigured"), ::OpenAPI::toJsonValue(m_promotable_replica_configured));
    }
    return obj;
}

QString OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::getAvailabilityType() const {
    return m_availability_type;
}
void OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::setAvailabilityType(const QString &availability_type) {
    m_availability_type = availability_type;
    m_availability_type_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::is_availability_type_Set() const{
    return m_availability_type_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::is_availability_type_Valid() const{
    return m_availability_type_isValid;
}

bool OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::isExternalReplicaConfigured() const {
    return m_external_replica_configured;
}
void OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::setExternalReplicaConfigured(const bool &external_replica_configured) {
    m_external_replica_configured = external_replica_configured;
    m_external_replica_configured_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::is_external_replica_configured_Set() const{
    return m_external_replica_configured_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::is_external_replica_configured_Valid() const{
    return m_external_replica_configured_isValid;
}

bool OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::isPromotableReplicaConfigured() const {
    return m_promotable_replica_configured;
}
void OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::setPromotableReplicaConfigured(const bool &promotable_replica_configured) {
    m_promotable_replica_configured = promotable_replica_configured;
    m_promotable_replica_configured_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::is_promotable_replica_configured_Set() const{
    return m_promotable_replica_configured_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::is_promotable_replica_configured_Valid() const{
    return m_promotable_replica_configured_isValid;
}

bool OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_replica_configured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotable_replica_configured_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
