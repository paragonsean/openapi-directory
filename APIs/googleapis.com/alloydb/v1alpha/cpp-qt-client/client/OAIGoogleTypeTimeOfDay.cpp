/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleTypeTimeOfDay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleTypeTimeOfDay::OAIGoogleTypeTimeOfDay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleTypeTimeOfDay::OAIGoogleTypeTimeOfDay() {
    this->initializeModel();
}

OAIGoogleTypeTimeOfDay::~OAIGoogleTypeTimeOfDay() {}

void OAIGoogleTypeTimeOfDay::initializeModel() {

    m_hours_isSet = false;
    m_hours_isValid = false;

    m_minutes_isSet = false;
    m_minutes_isValid = false;

    m_nanos_isSet = false;
    m_nanos_isValid = false;

    m_seconds_isSet = false;
    m_seconds_isValid = false;
}

void OAIGoogleTypeTimeOfDay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleTypeTimeOfDay::fromJsonObject(QJsonObject json) {

    m_hours_isValid = ::OpenAPI::fromJsonValue(m_hours, json[QString("hours")]);
    m_hours_isSet = !json[QString("hours")].isNull() && m_hours_isValid;

    m_minutes_isValid = ::OpenAPI::fromJsonValue(m_minutes, json[QString("minutes")]);
    m_minutes_isSet = !json[QString("minutes")].isNull() && m_minutes_isValid;

    m_nanos_isValid = ::OpenAPI::fromJsonValue(m_nanos, json[QString("nanos")]);
    m_nanos_isSet = !json[QString("nanos")].isNull() && m_nanos_isValid;

    m_seconds_isValid = ::OpenAPI::fromJsonValue(m_seconds, json[QString("seconds")]);
    m_seconds_isSet = !json[QString("seconds")].isNull() && m_seconds_isValid;
}

QString OAIGoogleTypeTimeOfDay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleTypeTimeOfDay::asJsonObject() const {
    QJsonObject obj;
    if (m_hours_isSet) {
        obj.insert(QString("hours"), ::OpenAPI::toJsonValue(m_hours));
    }
    if (m_minutes_isSet) {
        obj.insert(QString("minutes"), ::OpenAPI::toJsonValue(m_minutes));
    }
    if (m_nanos_isSet) {
        obj.insert(QString("nanos"), ::OpenAPI::toJsonValue(m_nanos));
    }
    if (m_seconds_isSet) {
        obj.insert(QString("seconds"), ::OpenAPI::toJsonValue(m_seconds));
    }
    return obj;
}

qint32 OAIGoogleTypeTimeOfDay::getHours() const {
    return m_hours;
}
void OAIGoogleTypeTimeOfDay::setHours(const qint32 &hours) {
    m_hours = hours;
    m_hours_isSet = true;
}

bool OAIGoogleTypeTimeOfDay::is_hours_Set() const{
    return m_hours_isSet;
}

bool OAIGoogleTypeTimeOfDay::is_hours_Valid() const{
    return m_hours_isValid;
}

qint32 OAIGoogleTypeTimeOfDay::getMinutes() const {
    return m_minutes;
}
void OAIGoogleTypeTimeOfDay::setMinutes(const qint32 &minutes) {
    m_minutes = minutes;
    m_minutes_isSet = true;
}

bool OAIGoogleTypeTimeOfDay::is_minutes_Set() const{
    return m_minutes_isSet;
}

bool OAIGoogleTypeTimeOfDay::is_minutes_Valid() const{
    return m_minutes_isValid;
}

qint32 OAIGoogleTypeTimeOfDay::getNanos() const {
    return m_nanos;
}
void OAIGoogleTypeTimeOfDay::setNanos(const qint32 &nanos) {
    m_nanos = nanos;
    m_nanos_isSet = true;
}

bool OAIGoogleTypeTimeOfDay::is_nanos_Set() const{
    return m_nanos_isSet;
}

bool OAIGoogleTypeTimeOfDay::is_nanos_Valid() const{
    return m_nanos_isValid;
}

qint32 OAIGoogleTypeTimeOfDay::getSeconds() const {
    return m_seconds;
}
void OAIGoogleTypeTimeOfDay::setSeconds(const qint32 &seconds) {
    m_seconds = seconds;
    m_seconds_isSet = true;
}

bool OAIGoogleTypeTimeOfDay::is_seconds_Set() const{
    return m_seconds_isSet;
}

bool OAIGoogleTypeTimeOfDay::is_seconds_Valid() const{
    return m_seconds_isValid;
}

bool OAIGoogleTypeTimeOfDay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nanos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleTypeTimeOfDay::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
