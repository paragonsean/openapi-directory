/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISupportedDatabaseFlag.h
 *
 * SupportedDatabaseFlag gives general information about a database flag, like type and allowed values. This is a static value that is defined on the server side, and it cannot be modified by callers. To set the Database flags on a particular Instance, a caller should modify the Instance.database_flags field.
 */

#ifndef OAISupportedDatabaseFlag_H
#define OAISupportedDatabaseFlag_H

#include <QJsonObject>

#include "OAIIntegerRestrictions.h"
#include "OAIStringRestrictions.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIntegerRestrictions;
class OAIStringRestrictions;

class OAISupportedDatabaseFlag : public OAIObject {
public:
    OAISupportedDatabaseFlag();
    OAISupportedDatabaseFlag(QString json);
    ~OAISupportedDatabaseFlag() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAcceptsMultipleValues() const;
    void setAcceptsMultipleValues(const bool &accepts_multiple_values);
    bool is_accepts_multiple_values_Set() const;
    bool is_accepts_multiple_values_Valid() const;

    QString getFlagName() const;
    void setFlagName(const QString &flag_name);
    bool is_flag_name_Set() const;
    bool is_flag_name_Valid() const;

    OAIIntegerRestrictions getIntegerRestrictions() const;
    void setIntegerRestrictions(const OAIIntegerRestrictions &integer_restrictions);
    bool is_integer_restrictions_Set() const;
    bool is_integer_restrictions_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isRequiresDbRestart() const;
    void setRequiresDbRestart(const bool &requires_db_restart);
    bool is_requires_db_restart_Set() const;
    bool is_requires_db_restart_Valid() const;

    OAIStringRestrictions getStringRestrictions() const;
    void setStringRestrictions(const OAIStringRestrictions &string_restrictions);
    bool is_string_restrictions_Set() const;
    bool is_string_restrictions_Valid() const;

    QList<QString> getSupportedDbVersions() const;
    void setSupportedDbVersions(const QList<QString> &supported_db_versions);
    bool is_supported_db_versions_Set() const;
    bool is_supported_db_versions_Valid() const;

    QString getValueType() const;
    void setValueType(const QString &value_type);
    bool is_value_type_Set() const;
    bool is_value_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_accepts_multiple_values;
    bool m_accepts_multiple_values_isSet;
    bool m_accepts_multiple_values_isValid;

    QString m_flag_name;
    bool m_flag_name_isSet;
    bool m_flag_name_isValid;

    OAIIntegerRestrictions m_integer_restrictions;
    bool m_integer_restrictions_isSet;
    bool m_integer_restrictions_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_requires_db_restart;
    bool m_requires_db_restart_isSet;
    bool m_requires_db_restart_isValid;

    OAIStringRestrictions m_string_restrictions;
    bool m_string_restrictions_isSet;
    bool m_string_restrictions_isValid;

    QList<QString> m_supported_db_versions;
    bool m_supported_db_versions_isSet;
    bool m_supported_db_versions_isValid;

    QString m_value_type;
    bool m_value_type_isSet;
    bool m_value_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISupportedDatabaseFlag)

#endif // OAISupportedDatabaseFlag_H
