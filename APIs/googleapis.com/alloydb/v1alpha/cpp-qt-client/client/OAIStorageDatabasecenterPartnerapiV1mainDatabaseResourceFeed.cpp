/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed() {
    this->initializeModel();
}

OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::~OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed() {}

void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::initializeModel() {

    m_feed_timestamp_isSet = false;
    m_feed_timestamp_isValid = false;

    m_feed_type_isSet = false;
    m_feed_type_isValid = false;

    m_recommendation_signal_data_isSet = false;
    m_recommendation_signal_data_isValid = false;

    m_resource_health_signal_data_isSet = false;
    m_resource_health_signal_data_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_metadata_isSet = false;
    m_resource_metadata_isValid = false;
}

void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::fromJsonObject(QJsonObject json) {

    m_feed_timestamp_isValid = ::OpenAPI::fromJsonValue(m_feed_timestamp, json[QString("feedTimestamp")]);
    m_feed_timestamp_isSet = !json[QString("feedTimestamp")].isNull() && m_feed_timestamp_isValid;

    m_feed_type_isValid = ::OpenAPI::fromJsonValue(m_feed_type, json[QString("feedType")]);
    m_feed_type_isSet = !json[QString("feedType")].isNull() && m_feed_type_isValid;

    m_recommendation_signal_data_isValid = ::OpenAPI::fromJsonValue(m_recommendation_signal_data, json[QString("recommendationSignalData")]);
    m_recommendation_signal_data_isSet = !json[QString("recommendationSignalData")].isNull() && m_recommendation_signal_data_isValid;

    m_resource_health_signal_data_isValid = ::OpenAPI::fromJsonValue(m_resource_health_signal_data, json[QString("resourceHealthSignalData")]);
    m_resource_health_signal_data_isSet = !json[QString("resourceHealthSignalData")].isNull() && m_resource_health_signal_data_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_metadata_isValid = ::OpenAPI::fromJsonValue(m_resource_metadata, json[QString("resourceMetadata")]);
    m_resource_metadata_isSet = !json[QString("resourceMetadata")].isNull() && m_resource_metadata_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::asJsonObject() const {
    QJsonObject obj;
    if (m_feed_timestamp_isSet) {
        obj.insert(QString("feedTimestamp"), ::OpenAPI::toJsonValue(m_feed_timestamp));
    }
    if (m_feed_type_isSet) {
        obj.insert(QString("feedType"), ::OpenAPI::toJsonValue(m_feed_type));
    }
    if (m_recommendation_signal_data.isSet()) {
        obj.insert(QString("recommendationSignalData"), ::OpenAPI::toJsonValue(m_recommendation_signal_data));
    }
    if (m_resource_health_signal_data.isSet()) {
        obj.insert(QString("resourceHealthSignalData"), ::OpenAPI::toJsonValue(m_resource_health_signal_data));
    }
    if (m_resource_id.isSet()) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_metadata.isSet()) {
        obj.insert(QString("resourceMetadata"), ::OpenAPI::toJsonValue(m_resource_metadata));
    }
    return obj;
}

QString OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::getFeedTimestamp() const {
    return m_feed_timestamp;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::setFeedTimestamp(const QString &feed_timestamp) {
    m_feed_timestamp = feed_timestamp;
    m_feed_timestamp_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::is_feed_timestamp_Set() const{
    return m_feed_timestamp_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::is_feed_timestamp_Valid() const{
    return m_feed_timestamp_isValid;
}

QString OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::getFeedType() const {
    return m_feed_type;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::setFeedType(const QString &feed_type) {
    m_feed_type = feed_type;
    m_feed_type_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::is_feed_type_Set() const{
    return m_feed_type_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::is_feed_type_Valid() const{
    return m_feed_type_isValid;
}

OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::getRecommendationSignalData() const {
    return m_recommendation_signal_data;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::setRecommendationSignalData(const OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceRecommendationSignalData &recommendation_signal_data) {
    m_recommendation_signal_data = recommendation_signal_data;
    m_recommendation_signal_data_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::is_recommendation_signal_data_Set() const{
    return m_recommendation_signal_data_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::is_recommendation_signal_data_Valid() const{
    return m_recommendation_signal_data_isValid;
}

OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::getResourceHealthSignalData() const {
    return m_resource_health_signal_data;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::setResourceHealthSignalData(const OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData &resource_health_signal_data) {
    m_resource_health_signal_data = resource_health_signal_data;
    m_resource_health_signal_data_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::is_resource_health_signal_data_Set() const{
    return m_resource_health_signal_data_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::is_resource_health_signal_data_Valid() const{
    return m_resource_health_signal_data_isValid;
}

OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceId OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::getResourceId() const {
    return m_resource_id;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::setResourceId(const OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceId &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::getResourceMetadata() const {
    return m_resource_metadata;
}
void OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::setResourceMetadata(const OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata &resource_metadata) {
    m_resource_metadata = resource_metadata;
    m_resource_metadata_isSet = true;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::is_resource_metadata_Set() const{
    return m_resource_metadata_isSet;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::is_resource_metadata_Valid() const{
    return m_resource_metadata_isValid;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feed_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_signal_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_health_signal_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
