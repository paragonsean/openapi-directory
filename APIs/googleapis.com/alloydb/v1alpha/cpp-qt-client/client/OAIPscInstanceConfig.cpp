/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPscInstanceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPscInstanceConfig::OAIPscInstanceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPscInstanceConfig::OAIPscInstanceConfig() {
    this->initializeModel();
}

OAIPscInstanceConfig::~OAIPscInstanceConfig() {}

void OAIPscInstanceConfig::initializeModel() {

    m_allowed_consumer_networks_isSet = false;
    m_allowed_consumer_networks_isValid = false;

    m_allowed_consumer_projects_isSet = false;
    m_allowed_consumer_projects_isValid = false;

    m_outgoing_service_attachment_links_isSet = false;
    m_outgoing_service_attachment_links_isValid = false;

    m_psc_enabled_isSet = false;
    m_psc_enabled_isValid = false;

    m_psc_interface_configs_isSet = false;
    m_psc_interface_configs_isValid = false;

    m_service_attachment_link_isSet = false;
    m_service_attachment_link_isValid = false;
}

void OAIPscInstanceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPscInstanceConfig::fromJsonObject(QJsonObject json) {

    m_allowed_consumer_networks_isValid = ::OpenAPI::fromJsonValue(m_allowed_consumer_networks, json[QString("allowedConsumerNetworks")]);
    m_allowed_consumer_networks_isSet = !json[QString("allowedConsumerNetworks")].isNull() && m_allowed_consumer_networks_isValid;

    m_allowed_consumer_projects_isValid = ::OpenAPI::fromJsonValue(m_allowed_consumer_projects, json[QString("allowedConsumerProjects")]);
    m_allowed_consumer_projects_isSet = !json[QString("allowedConsumerProjects")].isNull() && m_allowed_consumer_projects_isValid;

    m_outgoing_service_attachment_links_isValid = ::OpenAPI::fromJsonValue(m_outgoing_service_attachment_links, json[QString("outgoingServiceAttachmentLinks")]);
    m_outgoing_service_attachment_links_isSet = !json[QString("outgoingServiceAttachmentLinks")].isNull() && m_outgoing_service_attachment_links_isValid;

    m_psc_enabled_isValid = ::OpenAPI::fromJsonValue(m_psc_enabled, json[QString("pscEnabled")]);
    m_psc_enabled_isSet = !json[QString("pscEnabled")].isNull() && m_psc_enabled_isValid;

    m_psc_interface_configs_isValid = ::OpenAPI::fromJsonValue(m_psc_interface_configs, json[QString("pscInterfaceConfigs")]);
    m_psc_interface_configs_isSet = !json[QString("pscInterfaceConfigs")].isNull() && m_psc_interface_configs_isValid;

    m_service_attachment_link_isValid = ::OpenAPI::fromJsonValue(m_service_attachment_link, json[QString("serviceAttachmentLink")]);
    m_service_attachment_link_isSet = !json[QString("serviceAttachmentLink")].isNull() && m_service_attachment_link_isValid;
}

QString OAIPscInstanceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPscInstanceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_consumer_networks.size() > 0) {
        obj.insert(QString("allowedConsumerNetworks"), ::OpenAPI::toJsonValue(m_allowed_consumer_networks));
    }
    if (m_allowed_consumer_projects.size() > 0) {
        obj.insert(QString("allowedConsumerProjects"), ::OpenAPI::toJsonValue(m_allowed_consumer_projects));
    }
    if (m_outgoing_service_attachment_links.size() > 0) {
        obj.insert(QString("outgoingServiceAttachmentLinks"), ::OpenAPI::toJsonValue(m_outgoing_service_attachment_links));
    }
    if (m_psc_enabled_isSet) {
        obj.insert(QString("pscEnabled"), ::OpenAPI::toJsonValue(m_psc_enabled));
    }
    if (m_psc_interface_configs.size() > 0) {
        obj.insert(QString("pscInterfaceConfigs"), ::OpenAPI::toJsonValue(m_psc_interface_configs));
    }
    if (m_service_attachment_link_isSet) {
        obj.insert(QString("serviceAttachmentLink"), ::OpenAPI::toJsonValue(m_service_attachment_link));
    }
    return obj;
}

QList<QString> OAIPscInstanceConfig::getAllowedConsumerNetworks() const {
    return m_allowed_consumer_networks;
}
void OAIPscInstanceConfig::setAllowedConsumerNetworks(const QList<QString> &allowed_consumer_networks) {
    m_allowed_consumer_networks = allowed_consumer_networks;
    m_allowed_consumer_networks_isSet = true;
}

bool OAIPscInstanceConfig::is_allowed_consumer_networks_Set() const{
    return m_allowed_consumer_networks_isSet;
}

bool OAIPscInstanceConfig::is_allowed_consumer_networks_Valid() const{
    return m_allowed_consumer_networks_isValid;
}

QList<QString> OAIPscInstanceConfig::getAllowedConsumerProjects() const {
    return m_allowed_consumer_projects;
}
void OAIPscInstanceConfig::setAllowedConsumerProjects(const QList<QString> &allowed_consumer_projects) {
    m_allowed_consumer_projects = allowed_consumer_projects;
    m_allowed_consumer_projects_isSet = true;
}

bool OAIPscInstanceConfig::is_allowed_consumer_projects_Set() const{
    return m_allowed_consumer_projects_isSet;
}

bool OAIPscInstanceConfig::is_allowed_consumer_projects_Valid() const{
    return m_allowed_consumer_projects_isValid;
}

QList<QString> OAIPscInstanceConfig::getOutgoingServiceAttachmentLinks() const {
    return m_outgoing_service_attachment_links;
}
void OAIPscInstanceConfig::setOutgoingServiceAttachmentLinks(const QList<QString> &outgoing_service_attachment_links) {
    m_outgoing_service_attachment_links = outgoing_service_attachment_links;
    m_outgoing_service_attachment_links_isSet = true;
}

bool OAIPscInstanceConfig::is_outgoing_service_attachment_links_Set() const{
    return m_outgoing_service_attachment_links_isSet;
}

bool OAIPscInstanceConfig::is_outgoing_service_attachment_links_Valid() const{
    return m_outgoing_service_attachment_links_isValid;
}

bool OAIPscInstanceConfig::isPscEnabled() const {
    return m_psc_enabled;
}
void OAIPscInstanceConfig::setPscEnabled(const bool &psc_enabled) {
    m_psc_enabled = psc_enabled;
    m_psc_enabled_isSet = true;
}

bool OAIPscInstanceConfig::is_psc_enabled_Set() const{
    return m_psc_enabled_isSet;
}

bool OAIPscInstanceConfig::is_psc_enabled_Valid() const{
    return m_psc_enabled_isValid;
}

QList<OAIPscInterfaceConfig> OAIPscInstanceConfig::getPscInterfaceConfigs() const {
    return m_psc_interface_configs;
}
void OAIPscInstanceConfig::setPscInterfaceConfigs(const QList<OAIPscInterfaceConfig> &psc_interface_configs) {
    m_psc_interface_configs = psc_interface_configs;
    m_psc_interface_configs_isSet = true;
}

bool OAIPscInstanceConfig::is_psc_interface_configs_Set() const{
    return m_psc_interface_configs_isSet;
}

bool OAIPscInstanceConfig::is_psc_interface_configs_Valid() const{
    return m_psc_interface_configs_isValid;
}

QString OAIPscInstanceConfig::getServiceAttachmentLink() const {
    return m_service_attachment_link;
}
void OAIPscInstanceConfig::setServiceAttachmentLink(const QString &service_attachment_link) {
    m_service_attachment_link = service_attachment_link;
    m_service_attachment_link_isSet = true;
}

bool OAIPscInstanceConfig::is_service_attachment_link_Set() const{
    return m_service_attachment_link_isSet;
}

bool OAIPscInstanceConfig::is_service_attachment_link_Valid() const{
    return m_service_attachment_link_isValid;
}

bool OAIPscInstanceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_consumer_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_consumer_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_outgoing_service_attachment_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_interface_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_attachment_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPscInstanceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
