/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkConfig::OAINetworkConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkConfig::OAINetworkConfig() {
    this->initializeModel();
}

OAINetworkConfig::~OAINetworkConfig() {}

void OAINetworkConfig::initializeModel() {

    m_allocated_ip_range_isSet = false;
    m_allocated_ip_range_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;
}

void OAINetworkConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkConfig::fromJsonObject(QJsonObject json) {

    m_allocated_ip_range_isValid = ::OpenAPI::fromJsonValue(m_allocated_ip_range, json[QString("allocatedIpRange")]);
    m_allocated_ip_range_isSet = !json[QString("allocatedIpRange")].isNull() && m_allocated_ip_range_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;
}

QString OAINetworkConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_allocated_ip_range_isSet) {
        obj.insert(QString("allocatedIpRange"), ::OpenAPI::toJsonValue(m_allocated_ip_range));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    return obj;
}

QString OAINetworkConfig::getAllocatedIpRange() const {
    return m_allocated_ip_range;
}
void OAINetworkConfig::setAllocatedIpRange(const QString &allocated_ip_range) {
    m_allocated_ip_range = allocated_ip_range;
    m_allocated_ip_range_isSet = true;
}

bool OAINetworkConfig::is_allocated_ip_range_Set() const{
    return m_allocated_ip_range_isSet;
}

bool OAINetworkConfig::is_allocated_ip_range_Valid() const{
    return m_allocated_ip_range_isValid;
}

QString OAINetworkConfig::getNetwork() const {
    return m_network;
}
void OAINetworkConfig::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAINetworkConfig::is_network_Set() const{
    return m_network_isSet;
}

bool OAINetworkConfig::is_network_Valid() const{
    return m_network_isValid;
}

bool OAINetworkConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocated_ip_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
