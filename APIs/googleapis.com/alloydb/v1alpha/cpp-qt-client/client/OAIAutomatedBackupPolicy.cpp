/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomatedBackupPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomatedBackupPolicy::OAIAutomatedBackupPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomatedBackupPolicy::OAIAutomatedBackupPolicy() {
    this->initializeModel();
}

OAIAutomatedBackupPolicy::~OAIAutomatedBackupPolicy() {}

void OAIAutomatedBackupPolicy::initializeModel() {

    m_backup_window_isSet = false;
    m_backup_window_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_quantity_based_retention_isSet = false;
    m_quantity_based_retention_isValid = false;

    m_time_based_retention_isSet = false;
    m_time_based_retention_isValid = false;

    m_weekly_schedule_isSet = false;
    m_weekly_schedule_isValid = false;
}

void OAIAutomatedBackupPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomatedBackupPolicy::fromJsonObject(QJsonObject json) {

    m_backup_window_isValid = ::OpenAPI::fromJsonValue(m_backup_window, json[QString("backupWindow")]);
    m_backup_window_isSet = !json[QString("backupWindow")].isNull() && m_backup_window_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_quantity_based_retention_isValid = ::OpenAPI::fromJsonValue(m_quantity_based_retention, json[QString("quantityBasedRetention")]);
    m_quantity_based_retention_isSet = !json[QString("quantityBasedRetention")].isNull() && m_quantity_based_retention_isValid;

    m_time_based_retention_isValid = ::OpenAPI::fromJsonValue(m_time_based_retention, json[QString("timeBasedRetention")]);
    m_time_based_retention_isSet = !json[QString("timeBasedRetention")].isNull() && m_time_based_retention_isValid;

    m_weekly_schedule_isValid = ::OpenAPI::fromJsonValue(m_weekly_schedule, json[QString("weeklySchedule")]);
    m_weekly_schedule_isSet = !json[QString("weeklySchedule")].isNull() && m_weekly_schedule_isValid;
}

QString OAIAutomatedBackupPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomatedBackupPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_window_isSet) {
        obj.insert(QString("backupWindow"), ::OpenAPI::toJsonValue(m_backup_window));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_quantity_based_retention.isSet()) {
        obj.insert(QString("quantityBasedRetention"), ::OpenAPI::toJsonValue(m_quantity_based_retention));
    }
    if (m_time_based_retention.isSet()) {
        obj.insert(QString("timeBasedRetention"), ::OpenAPI::toJsonValue(m_time_based_retention));
    }
    if (m_weekly_schedule.isSet()) {
        obj.insert(QString("weeklySchedule"), ::OpenAPI::toJsonValue(m_weekly_schedule));
    }
    return obj;
}

QString OAIAutomatedBackupPolicy::getBackupWindow() const {
    return m_backup_window;
}
void OAIAutomatedBackupPolicy::setBackupWindow(const QString &backup_window) {
    m_backup_window = backup_window;
    m_backup_window_isSet = true;
}

bool OAIAutomatedBackupPolicy::is_backup_window_Set() const{
    return m_backup_window_isSet;
}

bool OAIAutomatedBackupPolicy::is_backup_window_Valid() const{
    return m_backup_window_isValid;
}

bool OAIAutomatedBackupPolicy::isEnabled() const {
    return m_enabled;
}
void OAIAutomatedBackupPolicy::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAutomatedBackupPolicy::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAutomatedBackupPolicy::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIEncryptionConfig OAIAutomatedBackupPolicy::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIAutomatedBackupPolicy::setEncryptionConfig(const OAIEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIAutomatedBackupPolicy::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIAutomatedBackupPolicy::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QMap<QString, QString> OAIAutomatedBackupPolicy::getLabels() const {
    return m_labels;
}
void OAIAutomatedBackupPolicy::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIAutomatedBackupPolicy::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIAutomatedBackupPolicy::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIAutomatedBackupPolicy::getLocation() const {
    return m_location;
}
void OAIAutomatedBackupPolicy::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIAutomatedBackupPolicy::is_location_Set() const{
    return m_location_isSet;
}

bool OAIAutomatedBackupPolicy::is_location_Valid() const{
    return m_location_isValid;
}

OAIQuantityBasedRetention OAIAutomatedBackupPolicy::getQuantityBasedRetention() const {
    return m_quantity_based_retention;
}
void OAIAutomatedBackupPolicy::setQuantityBasedRetention(const OAIQuantityBasedRetention &quantity_based_retention) {
    m_quantity_based_retention = quantity_based_retention;
    m_quantity_based_retention_isSet = true;
}

bool OAIAutomatedBackupPolicy::is_quantity_based_retention_Set() const{
    return m_quantity_based_retention_isSet;
}

bool OAIAutomatedBackupPolicy::is_quantity_based_retention_Valid() const{
    return m_quantity_based_retention_isValid;
}

OAITimeBasedRetention OAIAutomatedBackupPolicy::getTimeBasedRetention() const {
    return m_time_based_retention;
}
void OAIAutomatedBackupPolicy::setTimeBasedRetention(const OAITimeBasedRetention &time_based_retention) {
    m_time_based_retention = time_based_retention;
    m_time_based_retention_isSet = true;
}

bool OAIAutomatedBackupPolicy::is_time_based_retention_Set() const{
    return m_time_based_retention_isSet;
}

bool OAIAutomatedBackupPolicy::is_time_based_retention_Valid() const{
    return m_time_based_retention_isValid;
}

OAIWeeklySchedule OAIAutomatedBackupPolicy::getWeeklySchedule() const {
    return m_weekly_schedule;
}
void OAIAutomatedBackupPolicy::setWeeklySchedule(const OAIWeeklySchedule &weekly_schedule) {
    m_weekly_schedule = weekly_schedule;
    m_weekly_schedule_isSet = true;
}

bool OAIAutomatedBackupPolicy::is_weekly_schedule_Set() const{
    return m_weekly_schedule_isSet;
}

bool OAIAutomatedBackupPolicy::is_weekly_schedule_Valid() const{
    return m_weekly_schedule_isValid;
}

bool OAIAutomatedBackupPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_based_retention.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_based_retention.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomatedBackupPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
