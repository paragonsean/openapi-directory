/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageDatabasecenterProtoCommonProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageDatabasecenterProtoCommonProduct::OAIStorageDatabasecenterProtoCommonProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageDatabasecenterProtoCommonProduct::OAIStorageDatabasecenterProtoCommonProduct() {
    this->initializeModel();
}

OAIStorageDatabasecenterProtoCommonProduct::~OAIStorageDatabasecenterProtoCommonProduct() {}

void OAIStorageDatabasecenterProtoCommonProduct::initializeModel() {

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIStorageDatabasecenterProtoCommonProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageDatabasecenterProtoCommonProduct::fromJsonObject(QJsonObject json) {

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIStorageDatabasecenterProtoCommonProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageDatabasecenterProtoCommonProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_engine_isSet) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIStorageDatabasecenterProtoCommonProduct::getEngine() const {
    return m_engine;
}
void OAIStorageDatabasecenterProtoCommonProduct::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIStorageDatabasecenterProtoCommonProduct::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIStorageDatabasecenterProtoCommonProduct::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIStorageDatabasecenterProtoCommonProduct::getType() const {
    return m_type;
}
void OAIStorageDatabasecenterProtoCommonProduct::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStorageDatabasecenterProtoCommonProduct::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStorageDatabasecenterProtoCommonProduct::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIStorageDatabasecenterProtoCommonProduct::getVersion() const {
    return m_version;
}
void OAIStorageDatabasecenterProtoCommonProduct::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIStorageDatabasecenterProtoCommonProduct::is_version_Set() const{
    return m_version_isSet;
}

bool OAIStorageDatabasecenterProtoCommonProduct::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIStorageDatabasecenterProtoCommonProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageDatabasecenterProtoCommonProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
