/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings.h
 *
 * 
 */

#ifndef OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings_H
#define OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings : public OAIObject {
public:
    OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings();
    OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings(QString json);
    ~OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getQuantityBasedRetention() const;
    void setQuantityBasedRetention(const qint32 &quantity_based_retention);
    bool is_quantity_based_retention_Set() const;
    bool is_quantity_based_retention_Valid() const;

    QString getRetentionUnit() const;
    void setRetentionUnit(const QString &retention_unit);
    bool is_retention_unit_Set() const;
    bool is_retention_unit_Valid() const;

    QString getTimeBasedRetention() const;
    void setTimeBasedRetention(const QString &time_based_retention);
    bool is_time_based_retention_Set() const;
    bool is_time_based_retention_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_quantity_based_retention;
    bool m_quantity_based_retention_isSet;
    bool m_quantity_based_retention_isValid;

    QString m_retention_unit;
    bool m_retention_unit_isSet;
    bool m_retention_unit_isValid;

    QString m_time_based_retention;
    bool m_time_based_retention_isSet;
    bool m_time_based_retention_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings)

#endif // OAIStorageDatabasecenterPartnerapiV1mainRetentionSettings_H
