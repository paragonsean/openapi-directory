/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPscInterfaceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPscInterfaceConfig::OAIPscInterfaceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPscInterfaceConfig::OAIPscInterfaceConfig() {
    this->initializeModel();
}

OAIPscInterfaceConfig::~OAIPscInterfaceConfig() {}

void OAIPscInterfaceConfig::initializeModel() {

    m_consumer_endpoint_ips_isSet = false;
    m_consumer_endpoint_ips_isValid = false;

    m_network_attachment_isSet = false;
    m_network_attachment_isValid = false;
}

void OAIPscInterfaceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPscInterfaceConfig::fromJsonObject(QJsonObject json) {

    m_consumer_endpoint_ips_isValid = ::OpenAPI::fromJsonValue(m_consumer_endpoint_ips, json[QString("consumerEndpointIps")]);
    m_consumer_endpoint_ips_isSet = !json[QString("consumerEndpointIps")].isNull() && m_consumer_endpoint_ips_isValid;

    m_network_attachment_isValid = ::OpenAPI::fromJsonValue(m_network_attachment, json[QString("networkAttachment")]);
    m_network_attachment_isSet = !json[QString("networkAttachment")].isNull() && m_network_attachment_isValid;
}

QString OAIPscInterfaceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPscInterfaceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_endpoint_ips.size() > 0) {
        obj.insert(QString("consumerEndpointIps"), ::OpenAPI::toJsonValue(m_consumer_endpoint_ips));
    }
    if (m_network_attachment_isSet) {
        obj.insert(QString("networkAttachment"), ::OpenAPI::toJsonValue(m_network_attachment));
    }
    return obj;
}

QList<QString> OAIPscInterfaceConfig::getConsumerEndpointIps() const {
    return m_consumer_endpoint_ips;
}
void OAIPscInterfaceConfig::setConsumerEndpointIps(const QList<QString> &consumer_endpoint_ips) {
    m_consumer_endpoint_ips = consumer_endpoint_ips;
    m_consumer_endpoint_ips_isSet = true;
}

bool OAIPscInterfaceConfig::is_consumer_endpoint_ips_Set() const{
    return m_consumer_endpoint_ips_isSet;
}

bool OAIPscInterfaceConfig::is_consumer_endpoint_ips_Valid() const{
    return m_consumer_endpoint_ips_isValid;
}

QString OAIPscInterfaceConfig::getNetworkAttachment() const {
    return m_network_attachment;
}
void OAIPscInterfaceConfig::setNetworkAttachment(const QString &network_attachment) {
    m_network_attachment = network_attachment;
    m_network_attachment_isSet = true;
}

bool OAIPscInterfaceConfig::is_network_attachment_Set() const{
    return m_network_attachment_isSet;
}

bool OAIPscInterfaceConfig::is_network_attachment_Valid() const{
    return m_network_attachment_isValid;
}

bool OAIPscInterfaceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_endpoint_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPscInterfaceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
