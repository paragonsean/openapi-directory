/**
 * AlloyDB API
 * AlloyDB for PostgreSQL is an open source-compatible database service that provides a powerful option for migrating, modernizing, or building commercial-grade applications. It offers full compatibility with standard PostgreSQL, and is more than 4x faster for transactional workloads and up to 100x faster for analytical queries than standard PostgreSQL in our performance tests. AlloyDB for PostgreSQL offers a 99.99 percent availability SLA inclusive of maintenance. AlloyDB is optimized for the most demanding use cases, allowing you to build new applications that require high transaction throughput, large database sizes, or multiple read resources; scale existing PostgreSQL workloads with no application changes; and modernize legacy proprietary databases. 
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreClusterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreClusterRequest::OAIRestoreClusterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreClusterRequest::OAIRestoreClusterRequest() {
    this->initializeModel();
}

OAIRestoreClusterRequest::~OAIRestoreClusterRequest() {}

void OAIRestoreClusterRequest::initializeModel() {

    m_backup_source_isSet = false;
    m_backup_source_isValid = false;

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_continuous_backup_source_isSet = false;
    m_continuous_backup_source_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;
}

void OAIRestoreClusterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreClusterRequest::fromJsonObject(QJsonObject json) {

    m_backup_source_isValid = ::OpenAPI::fromJsonValue(m_backup_source, json[QString("backupSource")]);
    m_backup_source_isSet = !json[QString("backupSource")].isNull() && m_backup_source_isValid;

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("clusterId")]);
    m_cluster_id_isSet = !json[QString("clusterId")].isNull() && m_cluster_id_isValid;

    m_continuous_backup_source_isValid = ::OpenAPI::fromJsonValue(m_continuous_backup_source, json[QString("continuousBackupSource")]);
    m_continuous_backup_source_isSet = !json[QString("continuousBackupSource")].isNull() && m_continuous_backup_source_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("validateOnly")]);
    m_validate_only_isSet = !json[QString("validateOnly")].isNull() && m_validate_only_isValid;
}

QString OAIRestoreClusterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreClusterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_source.isSet()) {
        obj.insert(QString("backupSource"), ::OpenAPI::toJsonValue(m_backup_source));
    }
    if (m_cluster.isSet()) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_cluster_id_isSet) {
        obj.insert(QString("clusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_continuous_backup_source.isSet()) {
        obj.insert(QString("continuousBackupSource"), ::OpenAPI::toJsonValue(m_continuous_backup_source));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("validateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    return obj;
}

OAIBackupSource OAIRestoreClusterRequest::getBackupSource() const {
    return m_backup_source;
}
void OAIRestoreClusterRequest::setBackupSource(const OAIBackupSource &backup_source) {
    m_backup_source = backup_source;
    m_backup_source_isSet = true;
}

bool OAIRestoreClusterRequest::is_backup_source_Set() const{
    return m_backup_source_isSet;
}

bool OAIRestoreClusterRequest::is_backup_source_Valid() const{
    return m_backup_source_isValid;
}

OAICluster OAIRestoreClusterRequest::getCluster() const {
    return m_cluster;
}
void OAIRestoreClusterRequest::setCluster(const OAICluster &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIRestoreClusterRequest::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIRestoreClusterRequest::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAIRestoreClusterRequest::getClusterId() const {
    return m_cluster_id;
}
void OAIRestoreClusterRequest::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAIRestoreClusterRequest::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAIRestoreClusterRequest::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

OAIContinuousBackupSource OAIRestoreClusterRequest::getContinuousBackupSource() const {
    return m_continuous_backup_source;
}
void OAIRestoreClusterRequest::setContinuousBackupSource(const OAIContinuousBackupSource &continuous_backup_source) {
    m_continuous_backup_source = continuous_backup_source;
    m_continuous_backup_source_isSet = true;
}

bool OAIRestoreClusterRequest::is_continuous_backup_source_Set() const{
    return m_continuous_backup_source_isSet;
}

bool OAIRestoreClusterRequest::is_continuous_backup_source_Valid() const{
    return m_continuous_backup_source_isValid;
}

QString OAIRestoreClusterRequest::getRequestId() const {
    return m_request_id;
}
void OAIRestoreClusterRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIRestoreClusterRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIRestoreClusterRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIRestoreClusterRequest::isValidateOnly() const {
    return m_validate_only;
}
void OAIRestoreClusterRequest::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAIRestoreClusterRequest::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAIRestoreClusterRequest::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

bool OAIRestoreClusterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continuous_backup_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreClusterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
